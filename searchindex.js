Search.setIndex({"alltitles": {"1. Endlessness": [[351, "endlessness"]], "2. Intractability": [[351, "intractability"]], "2.1 First solution: acyclic_tree()": [[351, "first-solution-acyclic-tree"]], "2.2 Better solution: mst()": [[351, "better-solution-mst"]], "2005": [[356, "id20"]], "2006": [[356, "id19"]], "2007": [[356, "id18"]], "2008": [[356, "id17"]], "2009": [[356, "id16"]], "2010": [[356, "id15"]], "2011": [[356, "id14"]], "2012": [[356, "id13"]], "2013": [[356, "id12"]], "2014": [[356, "id11"]], "2015": [[356, "id10"]], "2016": [[356, "id9"]], "2017": [[356, "id8"]], "2018": [[356, "id7"]], "2019": [[356, "id6"]], "2020": [[356, "id5"]], "2021": [[356, "id4"]], "2022": [[356, "id3"]], "2023": [[356, "id2"]], "2024": [[356, "id1"]], "32-bit binary installation": [[355, "bit-binary-installation"]], "A not lazy loader.": [[297, "a-not-lazy-loader"]], "Access to all Synsets": [[351, "access-to-all-synsets"]], "Accessing ngram frequencies": [[308, "accessing-ngram-frequencies"]], "Accessing the Floresta Portuguese Treebank": [[333, "accessing-the-floresta-portuguese-treebank"]], "Accessing the MacMorpho Tagged Corpus": [[333, "accessing-the-macmorpho-tagged-corpus"]], "Accessing the Machado Text Corpus": [[333, "accessing-the-machado-text-corpus"]], "Adding Background Knowledge": [[311, "adding-background-knowledge"]], "Alignment": [[346, "alignment"]], "Alignment Algorithms": [[346, "alignment-algorithms"]], "Alignment Error Rate (AER)": [[346, "alignment-error-rate-aer"]], "Alignment Objects": [[346, "alignment-objects"]], "Annotated Documents": [[315, "annotated-documents"]], "Association measures": [[305, "association-measures"], [328, "association-measures"]], "Automated Derivation": [[319, "automated-derivation"]], "Automatically Created Corpus Reader Instances": [[307, "automatically-created-corpus-reader-instances"]], "Available Corpora": [[55, "available-corpora"]], "BLEU tests": [[296, "bleu-tests"]], "Basic stuff": [[301, "basic-stuff"]], "Batch Processing": [[338, "batch-processing"]], "Brill Trainer with evaluation": [[343, "brill-trainer-with-evaluation"]], "Buffered Gzip Reading and Writing": [[309, "buffered-gzip-reading-and-writing"]], "CCG combinator semantics computation": [[299, "ccg-combinator-semantics-computation"]], "CHILDES Corpus Readers": [[301, "childes-corpus-readers"]], "Categories": [[307, "categories"]], "Categorized Corpora": [[307, "categorized-corpora"]], "Categorized Markdown Corpus Reader": [[307, "categorized-markdown-corpus-reader"]], "Caveats:": [[235, "caveats"]], "Character Encodings": [[333, "character-encodings"]], "Chart": [[299, "chart"]], "Chat-80": [[300, "chat-80"]], "Checking Consistency": [[311, "checking-consistency"]], "Checking Informativity": [[311, "checking-informativity"]], "Checking the word access.": [[297, "checking-the-word-access"]], "ChunkParserI": [[302, "chunkparseri"]], "ChunkString": [[302, "chunkstring"]], "Chunked Corpora": [[307, "chunked-corpora"]], "Chunking": [[302, "chunking"]], "Chunking Rules": [[302, "chunking-rules"]], "Classifiers": [[303, "classifiers"]], "Closed Domain Assumption": [[330, "closed-domain-assumption"]], "Closed World Assumption": [[330, "closed-world-assumption"]], "CoNLL Data": [[310, "conll-data"]], "Collections": [[304, "collections"]], "Collocations": [[305, "collocations"]], "Combinatory Categorial Grammar": [[298, "combinatory-categorial-grammar"]], "Combinatory Categorial Grammar with semantics": [[299, "combinatory-categorial-grammar-with-semantics"]], "Command line installation": [[294, "command-line-installation"]], "Common Corpus Reader Methods": [[307, "common-corpus-reader-methods"]], "Compilation": [[318, "compilation"]], "Complex semantics": [[299, "complex-semantics"]], "Concatenation": [[307, "concatenation"]], "Concepts": [[182, "concepts"], [300, "concepts"]], "Concordance Example": [[306, "concordance-example"]], "Concordance List": [[306, "concordance-list"]], "ConditionalFreqDist": [[334, "conditionalfreqdist"]], "Confusion Matrix": [[328, "confusion-matrix"]], "Conjunction": [[298, "conjunction"]], "Constructor": [[307, "constructor"]], "Contributing to NLTK": [[293, null]], "Converting Input-Features to Joint-Features": [[33, "converting-input-features-to-joint-features"]], "Cooper Storage": [[338, "cooper-storage"]], "Corpus Access": [[324, "corpus-access"]], "Corpus Reader": [[346, "corpus-reader"]], "Corpus Reader Classes": [[307, "corpus-reader-classes"]], "Corpus Reader Functions": [[55, "corpus-reader-functions"], [57, "corpus-reader-functions"]], "Corpus Reader Objects": [[307, "corpus-reader-objects"]], "Corpus Readers": [[307, "corpus-readers"]], "Corpus Types": [[307, "corpus-types"]], "Corpus View Regression Tests": [[307, "corpus-view-regression-tests"]], "Corpus Views": [[307, "corpus-views"]], "Creating New Corpus Reader Instances": [[307, "creating-new-corpus-reader-instances"]], "Crubadan Corpus Reader": [[308, "crubadan-corpus-reader"]], "Custom Feature Values": [[314, "custom-feature-values"]], "Customer Review Corpus information": [[91, "customer-review-corpus-information"]], "Data Access Methods": [[307, "data-access-methods"], [307, "id1"]], "Default Reasoning": [[330, "default-reasoning"]], "Demo of \u2018a man walks\u2019 using Compilation": [[318, "demo-of-a-man-walks-using-compilation"]], "Demo of \u2018every girl chases a dog\u2019": [[318, "demo-of-every-girl-chases-a-dog"]], "Demo of \u201cA dog walks\u201d": [[318, "demo-of-a-dog-walks"]], "Demo of \u201cJohn walks\u201d": [[318, "demo-of-john-walks"]], "Demonstrate word embedding using Gensim": [[317, "demonstrate-word-embedding-using-gensim"]], "Dependency Grammars": [[310, "dependency-grammars"]], "Dependency Graph to Glue Formulas": [[318, "dependency-graph-to-glue-formulas"]], "Dependency Graph to LFG f-structure": [[318, "dependency-graph-to-lfg-f-structure"]], "Design": [[307, "design"]], "Dictionary access methods (mutating)": [[314, "dictionary-access-methods-mutating"]], "Dictionary access methods (non-mutating)": [[314, "dictionary-access-methods-non-mutating"]], "Discourse Checking": [[311, "discourse-checking"]], "Discourse Representation Theory": [[312, "discourse-representation-theory"]], "Distance Metrics": [[328, "distance-metrics"]], "Don\u2019t Reinvent the Wheel": [[307, "don-t-reinvent-the-wheel"]], "Download Directory": [[113, "download-directory"]], "Downloading Packages": [[113, "downloading-packages"]], "EM for IBM Model 1": [[346, "em-for-ibm-model-1"]], "EasyInstall Tests": [[341, "easyinstall-tests"]], "Efficiency": [[25, "efficiency"]], "Emacs Tip": [[25, "emacs-tip"]], "Endlessness vs. intractability in relation trees": [[351, "endlessness-vs-intractability-in-relation-trees"]], "Equality & Hashing": [[314, "equality-hashing"]], "Evaluation": [[338, "evaluation"], [346, "evaluation"]], "Evaluation of Taggers": [[343, "evaluation-of-taggers"]], "Example usage": [[145, "example-usage"]], "Example usage of NLTK modules": [[295, null]], "Examples": [[258, "examples"]], "Examples for Portuguese Processing": [[333, "examples-for-portuguese-processing"]], "Expressions": [[314, "expressions"]], "Feature Grammar Parsing": [[313, "feature-grammar-parsing"]], "Feature Paths": [[314, "feature-paths"], [314, "id1"]], "Feature Structure Equality": [[314, "feature-structure-equality"]], "Feature Structure Types": [[314, "feature-structure-types"]], "Feature Structures": [[341, "feature-structures"]], "Feature Structures & Unification": [[314, "feature-structures-unification"]], "Feature Structures as Graphs": [[313, "feature-structures-as-graphs"]], "Feature Value Sets & Feature Value Tuples": [[314, "feature-value-sets-feature-value-tuples"]], "Features": [[30, "features"]], "Featuresets": [[30, "featuresets"]], "Filtering candidates": [[305, "filtering-candidates"]], "Finders": [[305, "finders"]], "Finding Conflicts": [[314, "finding-conflicts"]], "Finding Files in the NLTK Data Package": [[309, "finding-files-in-the-nltk-data-package"]], "Former NLTK Team Members": [[358, "former-nltk-team-members"]], "FrameNet": [[307, "framenet"], [315, "framenet"]], "Frames": [[315, "frames"]], "FreqDist": [[334, "freqdist"]], "Generating sentences from context-free grammars": [[316, "generating-sentences-from-context-free-grammars"]], "Glue": [[318, "glue"]], "Glue Semantics": [[318, "glue-semantics"], [319, "glue-semantics"]], "Grammar Parsing": [[320, "grammar-parsing"]], "Grammar with Binding Operators": [[313, "grammar-with-binding-operators"]], "How to use CHILDESCorpusReader": [[301, "how-to-use-childescorpusreader"]], "ImmutableMultiParentedTree Regression Tests": [[347, "immutablemultiparentedtree-regression-tests"]], "ImmutableParentedTree Regression Tests": [[347, "immutableparentedtree-regression-tests"]], "Implementation": [[307, "implementation"]], "Implementation notes": [[235, "implementation-notes"]], "Importing TreePrettyPrinter": [[348, "importing-treeprettyprinter"]], "Index": [[357, null]], "Individuals and Lexical Items": [[182, "individuals-and-lexical-items"], [300, "individuals-and-lexical-items"]], "Information Extraction": [[336, "information-extraction"]], "Initialize the Dependency Parser": [[319, "initialize-the-dependency-parser"]], "Installing NLTK": [[355, null]], "Installing NLTK Data": [[294, null], [355, "installing-nltk-data"]], "Installing Third-Party Software": [[355, "installing-third-party-software"]], "Installing via a proxy web server": [[294, "installing-via-a-proxy-web-server"]], "Integration with MALT parser": [[310, "integration-with-malt-parser"]], "Interactive installer": [[294, "interactive-installer"]], "Introduction": [[311, "introduction"], [322, "introduction"]], "Issue 167": [[325, "issue-167"]], "Issue 367": [[325, "issue-367"]], "Issue 380": [[325, "issue-380"]], "JEITA Corpus": [[324, "jeita-corpus"]], "JSON Encoding and Decoding": [[309, "json-encoding-and-decoding"]], "Japanese Language Processing": [[324, "japanese-language-processing"]], "KNB Corpus": [[324, "knb-corpus"]], "Keywords": [[305, "keywords"]], "Kneser Ney Estimation": [[334, "kneser-ney-estimation"]], "Known Issues:": [[235, "known-issues"]], "LFG f-structure to Glue": [[318, "lfg-f-structure-to-glue"]], "Language Model Counter": [[137, "language-model-counter"]], "Language code mapping and helper methods": [[308, "language-code-mapping-and-helper-methods"]], "Lazy Loader": [[309, "lazy-loader"]], "LazyIteratorList": [[304, "lazyiteratorlist"]], "Lemmas": [[351, "lemmas"]], "Lesk Algorithm": [[353, "lesk-algorithm"]], "Lexical Units": [[315, "lexical-units"]], "Lexicon": [[299, "lexicon"]], "Light-weight Feature Structures": [[314, "light-weight-feature-structures"]], "Lightweight Feature Structures": [[120, "lightweight-feature-structures"]], "Linear logic": [[318, "linear-logic"]], "Loading Data Files": [[309, "loading-data-files"]], "Loading Resources From the Data Package": [[309, "loading-resources-from-the-data-package"]], "Loading alternative Wordnet versions": [[351, "loading-alternative-wordnet-versions"]], "Logic & Lambda Calculus": [[326, "logic-lambda-calculus"]], "Logical Inference and Model Building": [[322, "logical-inference-and-model-building"]], "Lookup": [[340, "lookup"]], "METEOR tests": [[327, "meteor-tests"]], "Mac/Unix": [[355, "mac-unix"]], "Mace4": [[322, "mace4"]], "Mace4 Installation": [[322, "mace4-installation"]], "Making Local Copies": [[309, "making-local-copies"]], "Manual installation": [[294, "manual-installation"]], "Maximum Likelihood Estimation": [[334, "maximum-likelihood-estimation"]], "Metrics": [[328, "metrics"], [341, "metrics"]], "Miscellaneous Measures": [[328, "miscellaneous-measures"]], "Model Tests": [[338, "model-tests"]], "Module contents": [[0, "module-nltk"], [1, "module-nltk.app"], [12, "module-nltk.ccg"], [18, "module-nltk.chat"], [25, "module-nltk.chunk"], [30, "module-nltk.classify"], [46, "module-nltk.cluster"], [55, "module-nltk.corpus"], [57, "module-nltk.corpus.reader"], [100, "module-contents"], [114, "module-nltk.draw"], [123, "module-nltk.inference"], [135, "module-nltk.lm"], [143, "module-nltk.metrics"], [153, "module-nltk.misc"], [159, "module-nltk.parse"], [180, "module-nltk.sem"], [195, "module-nltk.sentiment"], [199, "module-nltk.stem"], [213, "module-nltk.tag"], [227, "module-nltk.tbl"], [236, "module-nltk.tokenize"], [256, "module-nltk.translate"], [275, "module-nltk.tree"], [285, "module-nltk.twitter"]], "Morphy": [[351, "morphy"]], "Multi-Decorator Example": [[330, "multi-decorator-example"]], "MultiParentedTree Regression Tests": [[347, "multiparentedtree-regression-tests"]], "Multiple Iterators": [[307, "multiple-iterators"]], "NLTK Download Server": [[113, "nltk-download-server"]], "NLTK Interface to Model Builders": [[322, "nltk-interface-to-model-builders"]], "NLTK Interface to Theorem Provers": [[322, "nltk-interface-to-theorem-provers"]], "NLTK Language Modeling Module.": [[135, "nltk-language-modeling-module"]], "NLTK Team": [[358, null]], "Named Entities": [[336, "named-entities"]], "Natural Language Toolkit": [[354, null]], "Next Steps": [[354, "next-steps"]], "No Alignment test": [[327, "no-alignment-test"]], "No semantics": [[299, "no-semantics"]], "Non-Projective Dependency Parsing": [[310, "non-projective-dependency-parsing"]], "Nonmonotonic Reasoning": [[330, "nonmonotonic-reasoning"]], "Notations": [[263, "notations"], [264, "notations"], [265, "notations"], [266, "notations"], [267, "notations"]], "Opinion Lexicon information": [[83, "opinion-lexicon-information"]], "Other Corpora": [[307, "other-corpora"]], "Overview": [[182, "overview"], [305, "overview"], [307, "overview"], [309, "overview"], [312, "overview"], [314, "overview"], [326, "overview"], [342, "overview"]], "PAICE\u2019s evaluation statistics for stemming algorithms": [[331, "paice-s-evaluation-statistics-for-stemming-algorithms"]], "Parented Tree Methods": [[347, "parented-tree-methods"]], "Parented Trees": [[347, "parented-trees"]], "ParentedTree Regression Tests": [[347, "parentedtree-regression-tests"]], "Parse errors": [[312, "parse-errors"], [326, "parse-errors"]], "Parse to semantics": [[312, "parse-to-semantics"]], "Parsed Corpora": [[307, "parsed-corpora"]], "Parser": [[312, "parser"]], "Parsing": [[332, "parsing"], [341, "parsing"]], "Parsing Feature Structure Strings": [[314, "parsing-feature-structure-strings"]], "Part-of-Speech Tagging": [[333, "part-of-speech-tagging"]], "Patching Issue #2088": [[306, "patching-issue-2088"]], "Persistence": [[182, "persistence"], [300, "persistence"]], "Plaintext Corpora": [[307, "plaintext-corpora"]], "Plaintext Corpus Reader": [[307, "plaintext-corpus-reader"]], "Precision": [[346, "precision"]], "Preparing Data": [[135, "preparing-data"]], "Pretty Printing": [[312, "pretty-printing"]], "ProbabilisticTree Regression Tests": [[347, "probabilistictree-regression-tests"]], "Probability": [[334, "probability"]], "Processing Tasks": [[333, "processing-tasks"]], "Projective Dependency Parsing": [[310, "projective-dependency-parsing"]], "PropBank": [[307, "propbank"], [335, "propbank"]], "Propositional Model Test": [[338, "propositional-model-test"]], "Prover9": [[322, "prover9"]], "Prover9 Installation": [[322, "prover9-installation"]], "Prune the trained binary model": [[317, "prune-the-trained-binary-model"]], "Python Programming, with Portuguese Examples": [[333, "python-programming-with-portuguese-examples"]], "Question Answering": [[337, "question-answering"]], "Ranking and correlation": [[305, "ranking-and-correlation"]], "Reading Chat-80 Files": [[182, "reading-chat-80-files"], [300, "reading-chat-80-files"]], "Reading Corpora": [[333, "reading-corpora"]], "Reading Feature Structures": [[314, "reading-feature-structures"]], "Readings and Threads": [[311, "readings-and-threads"]], "Recall": [[346, "recall"]], "Reentrance": [[314, "reentrance"]], "References": [[263, "references"], [264, "references"], [265, "references"], [266, "references"], [267, "references"]], "RegexpChunkParser": [[25, "regexpchunkparser"], [302, "regexpchunkparser"]], "RegexpChunkRules": [[25, "regexpchunkrules"]], "RegexpParser": [[302, "regexpparser"]], "Regression Testing for issue #1025": [[343, "regression-testing-for-issue-1025"]], "Regression Testing for issue #2483": [[343, "regression-testing-for-issue-2483"]], "Regression Testing from book": [[311, "regression-testing-from-book"]], "Regression Tests": [[302, "regression-tests"], [303, "regression-tests"], [307, "regression-tests"], [309, "regression-tests"], [314, "regression-tests"], [325, "regression-tests"], [326, "regression-tests"], [343, "regression-tests"], [351, "regression-tests"]], "Regression Tests: MWETokenizer": [[344, "regression-tests-mwetokenizer"]], "Regression Tests: NLTKWordTokenizer": [[344, "regression-tests-nltkwordtokenizer"]], "Regression Tests: PunktSentenceTokenizer": [[344, "regression-tests-punktsentencetokenizer"]], "Regression Tests: Regexp Tokenizer": [[344, "regression-tests-regexp-tokenizer"]], "Regression Tests: TextTilingTokenizer": [[344, "regression-tests-texttilingtokenizer"]], "Regression Tests: ToktokTokenizer": [[344, "regression-tests-toktoktokenizer"]], "Regression Tests: TweetTokenizer": [[344, "regression-tests-tweettokenizer"]], "Regression Tests: align_tokens": [[344, "regression-tests-align-tokens"]], "Regression tests for TypedMaxentFeatureEncoding": [[303, "regression-tests-for-typedmaxentfeatureencoding"]], "Relation Extraction": [[336, "relation-extraction"]], "Relative Clauses": [[298, "relative-clauses"]], "Release Notes": [[356, null]], "Remove Variables": [[314, "remove-variables"]], "Replace": [[326, "replace"]], "Resolution Theorem Prover": [[337, "resolution-theorem-prover"]], "Resource Caching": [[309, "resource-caching"]], "Retracting Bindings": [[314, "retracting-bindings"]], "Retrieving other Data Sources": [[309, "retrieving-other-data-sources"]], "SQL Query": [[300, "sql-query"]], "Sample usage for bleu": [[296, null]], "Sample usage for bnc": [[297, null]], "Sample usage for ccg": [[298, null]], "Sample usage for ccg_semantics": [[299, null]], "Sample usage for chat80": [[300, null]], "Sample usage for childes": [[301, null]], "Sample usage for chunk": [[302, null]], "Sample usage for classify": [[303, null]], "Sample usage for collections": [[304, null]], "Sample usage for collocations": [[305, null]], "Sample usage for concordance": [[306, null]], "Sample usage for corpus": [[307, null]], "Sample usage for crubadan": [[308, null]], "Sample usage for data": [[309, null]], "Sample usage for dependency": [[310, null]], "Sample usage for discourse": [[311, null]], "Sample usage for drt": [[312, null]], "Sample usage for featgram": [[313, null]], "Sample usage for featstruct": [[314, null]], "Sample usage for framenet": [[315, null]], "Sample usage for generate": [[316, null]], "Sample usage for gensim": [[317, null]], "Sample usage for gluesemantics": [[318, null]], "Sample usage for gluesemantics_malt": [[319, null]], "Sample usage for grammar": [[320, null]], "Sample usage for grammartestsuites": [[321, null]], "Sample usage for inference": [[322, null]], "Sample usage for internals": [[323, null]], "Sample usage for japanese": [[324, null]], "Sample usage for lm": [[325, null]], "Sample usage for logic": [[326, null]], "Sample usage for meteor": [[327, null]], "Sample usage for metrics": [[328, null]], "Sample usage for misc": [[329, null]], "Sample usage for nonmonotonic": [[330, null]], "Sample usage for paice": [[331, null]], "Sample usage for parse": [[332, null]], "Sample usage for portuguese_en": [[333, null]], "Sample usage for probability": [[334, null]], "Sample usage for propbank": [[335, null]], "Sample usage for relextract": [[336, null]], "Sample usage for resolution": [[337, null]], "Sample usage for semantics": [[338, null]], "Sample usage for sentiment": [[339, null]], "Sample usage for sentiwordnet": [[340, null]], "Sample usage for simple": [[341, null]], "Sample usage for stem": [[342, null]], "Sample usage for tag": [[343, null]], "Sample usage for tokenize": [[344, null]], "Sample usage for toolbox": [[345, null]], "Sample usage for translate": [[346, null]], "Sample usage for tree": [[347, null]], "Sample usage for treeprettyprinter": [[348, null]], "Sample usage for treetransforms": [[349, null]], "Sample usage for util": [[350, null]], "Sample usage for wordnet": [[351, null]], "Sample usage for wordnet_lch": [[352, null]], "Sample usage for wsd": [[353, null]], "Satisfier Tests": [[338, "satisfier-tests"]], "Searching Text": [[333, "searching-text"]], "Seek and Tell": [[307, "seek-and-tell"]], "SeekableUnicodeStreamReader": [[307, "seekableunicodestreamreader"]], "Semantics": [[338, "semantics"]], "Sentence Segmentation": [[333, "sentence-segmentation"]], "SentiSynsets": [[340, "sentisynsets"]], "SentiWordNet": [[307, "sentiwordnet"]], "SentiWordNet Interface": [[340, "sentiwordnet-interface"]], "Sentiment Analysis": [[339, "sentiment-analysis"]], "Sequential Taggers": [[343, "sequential-taggers"]], "Setting up a Python Environment (Mac/Unix/Windows)": [[355, "setting-up-a-python-environment-mac-unix-windows"]], "Setup": [[301, "setup"], [311, "setup"], [328, "setup"]], "Similarity": [[351, "similarity"]], "Simple Concordancing": [[333, "simple-concordancing"]], "Simple semantics": [[299, "simple-semantics"]], "Simplify": [[326, "simplify"]], "Size argument to read()": [[307, "size-argument-to-read"]], "Slicing": [[307, "slicing"]], "Some simple things you can do with NLTK": [[354, "some-simple-things-you-can-do-with-nltk"]], "Squashed Bugs": [[307, "squashed-bugs"], [314, "squashed-bugs"], [347, "squashed-bugs"]], "Squashed bugs": [[334, "squashed-bugs"]], "Standard IR Scores": [[328, "standard-ir-scores"]], "Stemmers": [[342, "stemmers"]], "Stemming": [[333, "stemming"]], "Stopwords": [[333, "stopwords"]], "Stream Backed Corpus Views": [[307, "stream-backed-corpus-views"]], "Submodules": [[0, "submodules"], [1, "submodules"], [12, "submodules"], [18, "submodules"], [25, "submodules"], [30, "submodules"], [46, "submodules"], [55, "submodules"], [57, "submodules"], [114, "submodules"], [123, "submodules"], [135, "submodules"], [143, "submodules"], [153, "submodules"], [159, "submodules"], [180, "submodules"], [195, "submodules"], [199, "submodules"], [213, "submodules"], [227, "submodules"], [236, "submodules"], [256, "submodules"], [275, "submodules"], [285, "submodules"]], "Subpackages": [[0, "subpackages"], [55, "subpackages"]], "Synset Closures": [[351, "synset-closures"]], "Synsets": [[351, "synsets"]], "TGrep search implementation for NLTK trees": [[235, "tgrep-search-implementation-for-nltk-trees"]], "Table of Contents": [[307, "table-of-contents"]], "Tag Patterns": [[25, "tag-patterns"]], "Tagged Corpora": [[307, "tagged-corpora"]], "Tagged Corpus Reader": [[307, "tagged-corpus-reader"]], "Teardown test": [[351, "teardown-test"]], "Terminology": [[266, "terminology"], [267, "terminology"]], "Terminology: \u2018feature\u2019": [[33, "terminology-feature"]], "Test Parser": [[326, "test-parser"]], "Test Suites for Grammars": [[321, "test-suites-for-grammars"]], "Test for equality under alpha-conversion": [[326, "test-for-equality-under-alpha-conversion"]], "Test for formulas in Model": [[338, "test-for-formulas-in-model"]], "Test is_tautology()": [[337, "test-is-tautology"]], "Test most_general_unification()": [[337, "test-most-general-unification"]], "Test numerals": [[326, "test-numerals"]], "Test of i Function": [[338, "test-of-i-function"]], "Test proof()": [[337, "test-proof"]], "Test prove()": [[337, "test-prove"]], "Test subsumes()": [[337, "test-subsumes"]], "Test unify()": [[337, "test-unify"]], "Testing access to the sentences.": [[297, "testing-access-to-the-sentences"]], "Testing some HMM estimators": [[334, "testing-some-hmm-estimators"]], "Tests based on the Blackburn & Bos testsuite": [[338, "tests-based-on-the-blackburn-bos-testsuite"]], "Tests based on wikipedia examples": [[327, "tests-based-on-wikipedia-examples"]], "Tests for loading feature grammar files": [[332, "tests-for-loading-feature-grammar-files"]], "Tests for mapping from syntax to semantics": [[338, "tests-for-mapping-from-syntax-to-semantics"]], "Tests from published papers": [[299, "tests-from-published-papers"]], "Texts as List of Words": [[333, "texts-as-list-of-words"]], "The ProverCommand": [[322, "the-provercommand"]], "The equiv() method": [[322, "the-equiv-method"]], "Tokenization": [[341, "tokenization"]], "Tracing": [[314, "tracing"]], "Tracing the Feature Chart Parser": [[332, "tracing-the-feature-chart-parser"]], "Train the model": [[317, "train-the-model"]], "Training": [[135, "training"]], "Training Classifiers": [[30, "training-classifiers"]], "Tree Parsing": [[347, "tree-parsing"]], "Tree.fromlist()": [[347, "tree-fromlist"]], "Trie": [[304, "trie"]], "Type error during parsing": [[326, "type-error-during-parsing"]], "Typed Logic": [[326, "typed-logic"]], "Understemming and Overstemming values": [[331, "understemming-and-overstemming-values"]], "Unicode support": [[298, "unicode-support"]], "Unification": [[314, "unification"]], "Unification Bindings": [[314, "unification-bindings"]], "Unification on Dicts & Lists": [[314, "unification-on-dicts-lists"]], "Unique Names Assumption": [[330, "unique-names-assumption"]], "Unit Tests": [[312, "unit-tests"], [338, "unit-tests"]], "Unit test cases for toolbox": [[345, "unit-test-cases-for-toolbox"]], "Unit tests for ARLSTem Stemmer": [[342, "unit-tests-for-arlstem-stemmer"]], "Unit tests for ARLSTem2 Stemmer": [[342, "unit-tests-for-arlstem2-stemmer"]], "Unit tests for LARGE context-free grammars": [[332, "unit-tests-for-large-context-free-grammars"]], "Unit tests for Snowball stemmer": [[342, "unit-tests-for-snowball-stemmer"]], "Unit tests for Wordfinder class": [[329, "unit-tests-for-wordfinder-class"]], "Unit tests for function argument application in a Model": [[338, "unit-tests-for-function-argument-application-in-a-model"]], "Unit tests for nltk.tree.Tree": [[347, "unit-tests-for-nltk-tree-tree"]], "Unit tests for nltk.tree.prettyprinter.TreePrettyPrinter": [[348, "unit-tests-for-nltk-tree-prettyprinter-treeprettyprinter"]], "Unit tests for relations and valuations": [[338, "unit-tests-for-relations-and-valuations"]], "Unit tests for the Chart Parser class": [[332, "unit-tests-for-the-chart-parser-class"]], "Unit tests for the Context Free Grammar class": [[332, "unit-tests-for-the-context-free-grammar-class"]], "Unit tests for the FeatStructNonterminal class": [[332, "unit-tests-for-the-featstructnonterminal-class"]], "Unit tests for the Feature Chart Parser classes": [[332, "unit-tests-for-the-feature-chart-parser-classes"]], "Unit tests for the Incremental Chart Parser class": [[332, "unit-tests-for-the-incremental-chart-parser-class"]], "Unit tests for the Porter stemmer": [[342, "unit-tests-for-the-porter-stemmer"]], "Unit tests for the Probabilistic CFG class": [[332, "unit-tests-for-the-probabilistic-cfg-class"]], "Unit tests for the Probabilistic Chart Parse classes": [[332, "unit-tests-for-the-probabilistic-chart-parse-classes"]], "Unit tests for the TreeTransformation class": [[349, "unit-tests-for-the-treetransformation-class"]], "Unit tests for the Viterbi Parse classes": [[332, "unit-tests-for-the-viterbi-parse-classes"]], "Unit tests for the miscellaneous sort functions.": [[329, "unit-tests-for-the-miscellaneous-sort-functions"]], "Unit tests for the nltk.utilities module": [[323, "unit-tests-for-the-nltk-utilities-module"]], "Unit tests for the rd (Recursive Descent Parser) class": [[332, "unit-tests-for-the-rd-recursive-descent-parser-class"]], "Unit tests for the sr (Shift Reduce Parser) class": [[332, "unit-tests-for-the-sr-shift-reduce-parser-class"]], "Unresolved Issues": [[25, "unresolved-issues"]], "Untyped Logic": [[326, "untyped-logic"]], "Usage": [[181, "usage"], [235, "usage"]], "Using Mace4": [[322, "using-mace4"]], "Using Prover9": [[322, "using-prover9"]], "Using Valuations": [[300, "using-valuations"]], "Using a Trained Model": [[135, "using-a-trained-model"]], "Using conjunctions": [[299, "using-conjunctions"]], "Using contingency table values": [[305, "using-contingency-table-values"]], "Using the pre-trained model": [[317, "using-the-pre-trained-model"]], "Utility functions": [[350, "utility-functions"]], "Vader": [[339, "vader"]], "Variables / Free": [[326, "variables-free"]], "Verb Frames": [[351, "verb-frames"]], "Verbnet Corpus Reader": [[307, "verbnet-corpus-reader"]], "Windows": [[355, "windows"]], "With inference": [[319, "with-inference"]], "Witten Bell Estimation": [[334, "witten-bell-estimation"]], "Word Lists and Lexicons": [[307, "word-lists-and-lexicons"]], "Word Sense Disambiguation": [[353, "word-sense-disambiguation"]], "WordNet": [[307, "wordnet"]], "WordNet Interface": [[351, "wordnet-interface"]], "WordNet Lowest Common Hypernyms": [[352, "wordnet-lowest-common-hypernyms"]], "Words": [[351, "words"]], "Writing New Corpus Readers": [[307, "writing-new-corpus-readers"]], "betaConversionTestSuite.pl": [[326, "betaconversiontestsuite-pl"]], "comparative_sentences": [[307, "comparative-sentences"]], "equiv():": [[312, "equiv"]], "fol()": [[312, "fol"]], "markers": [[345, "markers"]], "multext_east": [[307, "multext-east"]], "nltk package": [[0, null]], "nltk.app package": [[1, null]], "nltk.app.chartparser_app module": [[2, null]], "nltk.app.chunkparser_app module": [[3, null]], "nltk.app.collocations_app module": [[4, null]], "nltk.app.concordance_app module": [[5, null]], "nltk.app.nemo_app module": [[6, null]], "nltk.app.rdparser_app module": [[7, null]], "nltk.app.srparser_app module": [[8, null]], "nltk.app.wordfreq_app module": [[9, null]], "nltk.app.wordnet_app module": [[10, null]], "nltk.book module": [[11, null]], "nltk.ccg package": [[12, null]], "nltk.ccg.api module": [[13, null]], "nltk.ccg.chart module": [[14, null]], "nltk.ccg.combinator module": [[15, null]], "nltk.ccg.lexicon module": [[16, null]], "nltk.ccg.logic module": [[17, null]], "nltk.chat package": [[18, null]], "nltk.chat.eliza module": [[19, null]], "nltk.chat.iesha module": [[20, null]], "nltk.chat.rude module": [[21, null]], "nltk.chat.suntsu module": [[22, null]], "nltk.chat.util module": [[23, null]], "nltk.chat.zen module": [[24, null]], "nltk.chunk package": [[25, null]], "nltk.chunk.api module": [[26, null]], "nltk.chunk.named_entity module": [[27, null]], "nltk.chunk.regexp module": [[28, null]], "nltk.chunk.util module": [[29, null]], "nltk.classify package": [[30, null]], "nltk.classify.api module": [[31, null]], "nltk.classify.decisiontree module": [[32, null]], "nltk.classify.maxent module": [[33, null]], "nltk.classify.megam module": [[34, null]], "nltk.classify.naivebayes module": [[35, null]], "nltk.classify.positivenaivebayes module": [[36, null]], "nltk.classify.rte_classify module": [[37, null]], "nltk.classify.scikitlearn module": [[38, null]], "nltk.classify.senna module": [[39, null]], "nltk.classify.svm module": [[40, null]], "nltk.classify.tadm module": [[41, null]], "nltk.classify.textcat module": [[42, null]], "nltk.classify.util module": [[43, null]], "nltk.classify.weka module": [[44, null]], "nltk.cli module": [[45, null]], "nltk.cluster package": [[46, null]], "nltk.cluster.api module": [[47, null]], "nltk.cluster.em module": [[48, null]], "nltk.cluster.gaac module": [[49, null]], "nltk.cluster.kmeans module": [[50, null]], "nltk.cluster.util module": [[51, null]], "nltk.collections module": [[52, null]], "nltk.collocations module": [[53, null]], "nltk.compat module": [[54, null]], "nltk.corpus package": [[55, null]], "nltk.corpus.europarl_raw module": [[56, null]], "nltk.corpus.reader package": [[57, null]], "nltk.corpus.reader.aligned module": [[58, null]], "nltk.corpus.reader.api module": [[59, null]], "nltk.corpus.reader.bcp47 module": [[60, null]], "nltk.corpus.reader.bnc module": [[61, null]], "nltk.corpus.reader.bracket_parse module": [[62, null]], "nltk.corpus.reader.categorized_sents module": [[63, null]], "nltk.corpus.reader.chasen module": [[64, null]], "nltk.corpus.reader.childes module": [[65, null]], "nltk.corpus.reader.chunked module": [[66, null]], "nltk.corpus.reader.cmudict module": [[67, null]], "nltk.corpus.reader.comparative_sents module": [[68, null]], "nltk.corpus.reader.conll module": [[69, null]], "nltk.corpus.reader.crubadan module": [[70, null]], "nltk.corpus.reader.dependency module": [[71, null]], "nltk.corpus.reader.framenet module": [[72, null]], "nltk.corpus.reader.ieer module": [[73, null]], "nltk.corpus.reader.indian module": [[74, null]], "nltk.corpus.reader.ipipan module": [[75, null]], "nltk.corpus.reader.knbc module": [[76, null]], "nltk.corpus.reader.lin module": [[77, null]], "nltk.corpus.reader.markdown module": [[78, null]], "nltk.corpus.reader.mte module": [[79, null]], "nltk.corpus.reader.nkjp module": [[80, null]], "nltk.corpus.reader.nombank module": [[81, null]], "nltk.corpus.reader.nps_chat module": [[82, null]], "nltk.corpus.reader.opinion_lexicon module": [[83, null]], "nltk.corpus.reader.panlex_lite module": [[84, null]], "nltk.corpus.reader.panlex_swadesh module": [[85, null]], "nltk.corpus.reader.pl196x module": [[86, null]], "nltk.corpus.reader.plaintext module": [[87, null]], "nltk.corpus.reader.ppattach module": [[88, null]], "nltk.corpus.reader.propbank module": [[89, null]], "nltk.corpus.reader.pros_cons module": [[90, null]], "nltk.corpus.reader.reviews module": [[91, null]], "nltk.corpus.reader.rte module": [[92, null]], "nltk.corpus.reader.semcor module": [[93, null]], "nltk.corpus.reader.senseval module": [[94, null]], "nltk.corpus.reader.sentiwordnet module": [[95, null]], "nltk.corpus.reader.sinica_treebank module": [[96, null]], "nltk.corpus.reader.string_category module": [[97, null]], "nltk.corpus.reader.switchboard module": [[98, null]], "nltk.corpus.reader.tagged module": [[99, null]], "nltk.corpus.reader.timit module": [[100, null]], "nltk.corpus.reader.toolbox module": [[101, null]], "nltk.corpus.reader.twitter module": [[102, null]], "nltk.corpus.reader.udhr module": [[103, null]], "nltk.corpus.reader.util module": [[104, null]], "nltk.corpus.reader.verbnet module": [[105, null]], "nltk.corpus.reader.wordlist module": [[106, null]], "nltk.corpus.reader.wordnet module": [[107, null]], "nltk.corpus.reader.xmldocs module": [[108, null]], "nltk.corpus.reader.ycoe module": [[109, null]], "nltk.corpus.util module": [[110, null]], "nltk.data module": [[111, null]], "nltk.decorators module": [[112, null]], "nltk.downloader module": [[113, null]], "nltk.draw package": [[114, null]], "nltk.draw.cfg module": [[115, null]], "nltk.draw.dispersion module": [[116, null]], "nltk.draw.table module": [[117, null]], "nltk.draw.tree module": [[118, null]], "nltk.draw.util module": [[119, null]], "nltk.featstruct module": [[120, null]], "nltk.grammar module": [[121, null]], "nltk.help module": [[122, null]], "nltk.inference package": [[123, null]], "nltk.inference.api module": [[124, null]], "nltk.inference.discourse module": [[125, null]], "nltk.inference.mace module": [[126, null]], "nltk.inference.nonmonotonic module": [[127, null]], "nltk.inference.prover9 module": [[128, null]], "nltk.inference.resolution module": [[129, null]], "nltk.inference.tableau module": [[130, null]], "nltk.internals module": [[131, null]], "nltk.jsontags module": [[132, null]], "nltk.langnames module": [[133, null]], "nltk.lazyimport module": [[134, null]], "nltk.lm package": [[135, null]], "nltk.lm.api module": [[136, null]], "nltk.lm.counter module": [[137, null]], "nltk.lm.models module": [[138, null]], "nltk.lm.preprocessing module": [[139, null]], "nltk.lm.smoothing module": [[140, null]], "nltk.lm.util module": [[141, null]], "nltk.lm.vocabulary module": [[142, null]], "nltk.metrics package": [[143, null]], "nltk.metrics.agreement module": [[144, null]], "nltk.metrics.aline module": [[145, null]], "nltk.metrics.association module": [[146, null]], "nltk.metrics.confusionmatrix module": [[147, null]], "nltk.metrics.distance module": [[148, null]], "nltk.metrics.paice module": [[149, null]], "nltk.metrics.scores module": [[150, null]], "nltk.metrics.segmentation module": [[151, null]], "nltk.metrics.spearman module": [[152, null]], "nltk.misc package": [[153, null]], "nltk.misc.babelfish module": [[154, null]], "nltk.misc.chomsky module": [[155, null]], "nltk.misc.minimalset module": [[156, null]], "nltk.misc.sort module": [[157, null]], "nltk.misc.wordfinder module": [[158, null]], "nltk.parse package": [[159, null]], "nltk.parse.api module": [[160, null]], "nltk.parse.bllip module": [[161, null]], "nltk.parse.chart module": [[162, null]], "nltk.parse.corenlp module": [[163, null]], "nltk.parse.dependencygraph module": [[164, null]], "nltk.parse.earleychart module": [[165, null]], "nltk.parse.evaluate module": [[166, null]], "nltk.parse.featurechart module": [[167, null]], "nltk.parse.generate module": [[168, null]], "nltk.parse.malt module": [[169, null]], "nltk.parse.nonprojectivedependencyparser module": [[170, null]], "nltk.parse.pchart module": [[171, null]], "nltk.parse.projectivedependencyparser module": [[172, null]], "nltk.parse.recursivedescent module": [[173, null]], "nltk.parse.shiftreduce module": [[174, null]], "nltk.parse.stanford module": [[175, null]], "nltk.parse.transitionparser module": [[176, null]], "nltk.parse.util module": [[177, null]], "nltk.parse.viterbi module": [[178, null]], "nltk.probability module": [[179, null]], "nltk.sem package": [[180, null]], "nltk.sem.boxer module": [[181, null]], "nltk.sem.chat80 module": [[182, null]], "nltk.sem.cooper_storage module": [[183, null]], "nltk.sem.drt module": [[184, null]], "nltk.sem.drt_glue_demo module": [[185, null]], "nltk.sem.evaluate module": [[186, null]], "nltk.sem.glue module": [[187, null]], "nltk.sem.hole module": [[188, null]], "nltk.sem.lfg module": [[189, null]], "nltk.sem.linearlogic module": [[190, null]], "nltk.sem.logic module": [[191, null]], "nltk.sem.relextract module": [[192, null]], "nltk.sem.skolemize module": [[193, null]], "nltk.sem.util module": [[194, null]], "nltk.sentiment package": [[195, null]], "nltk.sentiment.sentiment_analyzer module": [[196, null]], "nltk.sentiment.util module": [[197, null]], "nltk.sentiment.vader module": [[198, null]], "nltk.stem package": [[199, null]], "nltk.stem.api module": [[200, null]], "nltk.stem.arlstem module": [[201, null]], "nltk.stem.arlstem2 module": [[202, null]], "nltk.stem.cistem module": [[203, null]], "nltk.stem.isri module": [[204, null]], "nltk.stem.lancaster module": [[205, null]], "nltk.stem.porter module": [[206, null]], "nltk.stem.regexp module": [[207, null]], "nltk.stem.rslp module": [[208, null]], "nltk.stem.snowball module": [[209, null]], "nltk.stem.util module": [[210, null]], "nltk.stem.wordnet module": [[211, null]], "nltk.tabdata module": [[212, null]], "nltk.tag package": [[213, null]], "nltk.tag.api module": [[214, null]], "nltk.tag.brill module": [[215, null]], "nltk.tag.brill_trainer module": [[216, null]], "nltk.tag.crf module": [[217, null]], "nltk.tag.hmm module": [[218, null]], "nltk.tag.hunpos module": [[219, null]], "nltk.tag.mapping module": [[220, null]], "nltk.tag.perceptron module": [[221, null]], "nltk.tag.senna module": [[222, null]], "nltk.tag.sequential module": [[223, null]], "nltk.tag.stanford module": [[224, null]], "nltk.tag.tnt module": [[225, null]], "nltk.tag.util module": [[226, null]], "nltk.tbl package": [[227, null]], "nltk.tbl.api module": [[228, null]], "nltk.tbl.demo module": [[229, null]], "nltk.tbl.erroranalysis module": [[230, null]], "nltk.tbl.feature module": [[231, null]], "nltk.tbl.rule module": [[232, null]], "nltk.tbl.template module": [[233, null]], "nltk.text module": [[234, null]], "nltk.tgrep module": [[235, null]], "nltk.tokenize package": [[236, null]], "nltk.tokenize.api module": [[237, null]], "nltk.tokenize.casual module": [[238, null]], "nltk.tokenize.destructive module": [[239, null]], "nltk.tokenize.legality_principle module": [[240, null]], "nltk.tokenize.mwe module": [[241, null]], "nltk.tokenize.nist module": [[242, null]], "nltk.tokenize.punkt module": [[243, null]], "nltk.tokenize.regexp module": [[244, null]], "nltk.tokenize.repp module": [[245, null]], "nltk.tokenize.sexpr module": [[246, null]], "nltk.tokenize.simple module": [[247, null]], "nltk.tokenize.sonority_sequencing module": [[248, null]], "nltk.tokenize.stanford module": [[249, null]], "nltk.tokenize.stanford_segmenter module": [[250, null]], "nltk.tokenize.texttiling module": [[251, null]], "nltk.tokenize.toktok module": [[252, null]], "nltk.tokenize.treebank module": [[253, null]], "nltk.tokenize.util module": [[254, null]], "nltk.toolbox module": [[255, null]], "nltk.translate package": [[256, null]], "nltk.translate.api module": [[257, null]], "nltk.translate.bleu_score module": [[258, null]], "nltk.translate.chrf_score module": [[259, null]], "nltk.translate.gale_church module": [[260, null]], "nltk.translate.gdfa module": [[261, null]], "nltk.translate.gleu_score module": [[262, null]], "nltk.translate.ibm1 module": [[263, null]], "nltk.translate.ibm2 module": [[264, null]], "nltk.translate.ibm3 module": [[265, null]], "nltk.translate.ibm4 module": [[266, null]], "nltk.translate.ibm5 module": [[267, null]], "nltk.translate.ibm_model module": [[268, null]], "nltk.translate.meteor_score module": [[269, null]], "nltk.translate.metrics module": [[270, null]], "nltk.translate.nist_score module": [[271, null]], "nltk.translate.phrase_based module": [[272, null]], "nltk.translate.ribes_score module": [[273, null]], "nltk.translate.stack_decoder module": [[274, null]], "nltk.tree package": [[275, null]], "nltk.tree.immutable module": [[276, null]], "nltk.tree.parented module": [[277, null]], "nltk.tree.parsing module": [[278, null]], "nltk.tree.prettyprinter module": [[279, null]], "nltk.tree.probabilistic module": [[280, null]], "nltk.tree.transforms module": [[281, null]], "nltk.tree.tree module": [[282, null]], "nltk.treeprettyprinter module": [[283, null]], "nltk.treetransforms module": [[284, null]], "nltk.twitter package": [[285, null]], "nltk.twitter.api module": [[286, null]], "nltk.twitter.common module": [[287, null]], "nltk.twitter.twitter_demo module": [[288, null]], "nltk.twitter.twitterclient module": [[289, null]], "nltk.twitter.util module": [[290, null]], "nltk.util module": [[291, null]], "nltk.wsd module": [[292, null]], "nps_chat": [[307, "nps-chat"]], "opinion_lexicon": [[307, "opinion-lexicon"]], "overridden()": [[323, "overridden"]], "ppattach": [[307, "ppattach"]], "product_reviews_1 and product_reviews_2": [[307, "product-reviews-1-and-product-reviews-2"]], "pros_cons": [[307, "pros-cons"]], "read_str()": [[323, "read-str"]], "regression tests": [[312, "regression-tests"]], "replace bound": [[312, "replace-bound"], [312, "id2"]], "replace unbound": [[312, "replace-unbound"], [312, "id1"]], "replace unbound with bound": [[312, "replace-unbound-with-bound"]], "replace unbound with bound on other side": [[312, "replace-unbound-with-bound-on-other-side"]], "replace unbound with bound on same side": [[312, "replace-unbound-with-bound-on-same-side"]], "replace unbound with double bound": [[312, "replace-unbound-with-double-bound"]], "replace unbound with unbound": [[312, "replace-unbound-with-unbound"], [312, "id3"]], "replace():": [[312, "replace"]], "resolve_anaphora()": [[312, "resolve-anaphora"]], "rte": [[307, "rte"]], "semcor": [[307, "semcor"]], "senseval": [[307, "senseval"]], "sentence_polarity": [[307, "sentence-polarity"]], "shakespeare": [[307, "shakespeare"]], "simplify()": [[312, "simplify"]], "subjectivity": [[307, "subjectivity"]], "timit": [[307, "timit"]], "toolbox": [[307, "toolbox"]], "toolbox functions": [[345, "toolbox-functions"]], "toolbox.StandardFormat": [[345, "toolbox-standardformat"]], "toolbox.StandardFormat.close()": [[345, "toolbox-standardformat-close"]], "toolbox.StandardFormat.fields()": [[345, "toolbox-standardformat-fields"]], "toolbox.StandardFormat.line_num": [[345, "toolbox-standardformat-line-num"]], "toolbox.StandardFormat.open()": [[345, "toolbox-standardformat-open"]], "toolbox.StandardFormat.open_string()": [[345, "toolbox-standardformat-open-string"]], "toolbox.StandardFormat.raw_fields()": [[345, "toolbox-standardformat-raw-fields"]], "toolbox.ToolboxData": [[345, "toolbox-toolboxdata"]], "toolbox.ToolboxData.parse()": [[345, "toolbox-toolboxdata-parse"]], "toolbox.to_sfm_string()": [[345, "toolbox-to-sfm-string"]], "twitter_samples": [[307, "twitter-samples"]], "verbnet": [[307, "verbnet"]]}, "docnames": ["api/nltk", "api/nltk.app", "api/nltk.app.chartparser_app", "api/nltk.app.chunkparser_app", "api/nltk.app.collocations_app", "api/nltk.app.concordance_app", "api/nltk.app.nemo_app", "api/nltk.app.rdparser_app", "api/nltk.app.srparser_app", "api/nltk.app.wordfreq_app", "api/nltk.app.wordnet_app", "api/nltk.book", "api/nltk.ccg", "api/nltk.ccg.api", "api/nltk.ccg.chart", "api/nltk.ccg.combinator", "api/nltk.ccg.lexicon", "api/nltk.ccg.logic", "api/nltk.chat", "api/nltk.chat.eliza", "api/nltk.chat.iesha", "api/nltk.chat.rude", "api/nltk.chat.suntsu", "api/nltk.chat.util", "api/nltk.chat.zen", "api/nltk.chunk", "api/nltk.chunk.api", "api/nltk.chunk.named_entity", "api/nltk.chunk.regexp", "api/nltk.chunk.util", "api/nltk.classify", "api/nltk.classify.api", "api/nltk.classify.decisiontree", "api/nltk.classify.maxent", "api/nltk.classify.megam", "api/nltk.classify.naivebayes", "api/nltk.classify.positivenaivebayes", "api/nltk.classify.rte_classify", "api/nltk.classify.scikitlearn", "api/nltk.classify.senna", "api/nltk.classify.svm", "api/nltk.classify.tadm", "api/nltk.classify.textcat", "api/nltk.classify.util", "api/nltk.classify.weka", "api/nltk.cli", "api/nltk.cluster", "api/nltk.cluster.api", "api/nltk.cluster.em", "api/nltk.cluster.gaac", "api/nltk.cluster.kmeans", "api/nltk.cluster.util", "api/nltk.collections", "api/nltk.collocations", "api/nltk.compat", "api/nltk.corpus", "api/nltk.corpus.europarl_raw", "api/nltk.corpus.reader", "api/nltk.corpus.reader.aligned", "api/nltk.corpus.reader.api", "api/nltk.corpus.reader.bcp47", "api/nltk.corpus.reader.bnc", "api/nltk.corpus.reader.bracket_parse", "api/nltk.corpus.reader.categorized_sents", "api/nltk.corpus.reader.chasen", "api/nltk.corpus.reader.childes", "api/nltk.corpus.reader.chunked", "api/nltk.corpus.reader.cmudict", "api/nltk.corpus.reader.comparative_sents", "api/nltk.corpus.reader.conll", "api/nltk.corpus.reader.crubadan", "api/nltk.corpus.reader.dependency", "api/nltk.corpus.reader.framenet", "api/nltk.corpus.reader.ieer", "api/nltk.corpus.reader.indian", "api/nltk.corpus.reader.ipipan", "api/nltk.corpus.reader.knbc", "api/nltk.corpus.reader.lin", "api/nltk.corpus.reader.markdown", "api/nltk.corpus.reader.mte", "api/nltk.corpus.reader.nkjp", "api/nltk.corpus.reader.nombank", "api/nltk.corpus.reader.nps_chat", "api/nltk.corpus.reader.opinion_lexicon", "api/nltk.corpus.reader.panlex_lite", "api/nltk.corpus.reader.panlex_swadesh", "api/nltk.corpus.reader.pl196x", "api/nltk.corpus.reader.plaintext", "api/nltk.corpus.reader.ppattach", "api/nltk.corpus.reader.propbank", "api/nltk.corpus.reader.pros_cons", "api/nltk.corpus.reader.reviews", "api/nltk.corpus.reader.rte", "api/nltk.corpus.reader.semcor", "api/nltk.corpus.reader.senseval", "api/nltk.corpus.reader.sentiwordnet", "api/nltk.corpus.reader.sinica_treebank", "api/nltk.corpus.reader.string_category", "api/nltk.corpus.reader.switchboard", "api/nltk.corpus.reader.tagged", "api/nltk.corpus.reader.timit", "api/nltk.corpus.reader.toolbox", "api/nltk.corpus.reader.twitter", "api/nltk.corpus.reader.udhr", "api/nltk.corpus.reader.util", "api/nltk.corpus.reader.verbnet", "api/nltk.corpus.reader.wordlist", "api/nltk.corpus.reader.wordnet", "api/nltk.corpus.reader.xmldocs", "api/nltk.corpus.reader.ycoe", "api/nltk.corpus.util", "api/nltk.data", "api/nltk.decorators", "api/nltk.downloader", "api/nltk.draw", "api/nltk.draw.cfg", "api/nltk.draw.dispersion", "api/nltk.draw.table", "api/nltk.draw.tree", "api/nltk.draw.util", "api/nltk.featstruct", "api/nltk.grammar", "api/nltk.help", "api/nltk.inference", "api/nltk.inference.api", "api/nltk.inference.discourse", "api/nltk.inference.mace", "api/nltk.inference.nonmonotonic", "api/nltk.inference.prover9", "api/nltk.inference.resolution", "api/nltk.inference.tableau", "api/nltk.internals", "api/nltk.jsontags", "api/nltk.langnames", "api/nltk.lazyimport", "api/nltk.lm", "api/nltk.lm.api", "api/nltk.lm.counter", "api/nltk.lm.models", "api/nltk.lm.preprocessing", "api/nltk.lm.smoothing", "api/nltk.lm.util", "api/nltk.lm.vocabulary", "api/nltk.metrics", "api/nltk.metrics.agreement", "api/nltk.metrics.aline", "api/nltk.metrics.association", "api/nltk.metrics.confusionmatrix", "api/nltk.metrics.distance", "api/nltk.metrics.paice", "api/nltk.metrics.scores", "api/nltk.metrics.segmentation", "api/nltk.metrics.spearman", "api/nltk.misc", "api/nltk.misc.babelfish", "api/nltk.misc.chomsky", "api/nltk.misc.minimalset", "api/nltk.misc.sort", "api/nltk.misc.wordfinder", "api/nltk.parse", "api/nltk.parse.api", "api/nltk.parse.bllip", "api/nltk.parse.chart", "api/nltk.parse.corenlp", "api/nltk.parse.dependencygraph", "api/nltk.parse.earleychart", "api/nltk.parse.evaluate", "api/nltk.parse.featurechart", "api/nltk.parse.generate", "api/nltk.parse.malt", "api/nltk.parse.nonprojectivedependencyparser", "api/nltk.parse.pchart", "api/nltk.parse.projectivedependencyparser", "api/nltk.parse.recursivedescent", "api/nltk.parse.shiftreduce", "api/nltk.parse.stanford", "api/nltk.parse.transitionparser", "api/nltk.parse.util", "api/nltk.parse.viterbi", "api/nltk.probability", "api/nltk.sem", "api/nltk.sem.boxer", "api/nltk.sem.chat80", "api/nltk.sem.cooper_storage", "api/nltk.sem.drt", "api/nltk.sem.drt_glue_demo", "api/nltk.sem.evaluate", "api/nltk.sem.glue", "api/nltk.sem.hole", "api/nltk.sem.lfg", "api/nltk.sem.linearlogic", "api/nltk.sem.logic", "api/nltk.sem.relextract", "api/nltk.sem.skolemize", "api/nltk.sem.util", "api/nltk.sentiment", "api/nltk.sentiment.sentiment_analyzer", "api/nltk.sentiment.util", "api/nltk.sentiment.vader", "api/nltk.stem", "api/nltk.stem.api", "api/nltk.stem.arlstem", "api/nltk.stem.arlstem2", "api/nltk.stem.cistem", "api/nltk.stem.isri", "api/nltk.stem.lancaster", "api/nltk.stem.porter", "api/nltk.stem.regexp", "api/nltk.stem.rslp", "api/nltk.stem.snowball", "api/nltk.stem.util", "api/nltk.stem.wordnet", "api/nltk.tabdata", "api/nltk.tag", "api/nltk.tag.api", "api/nltk.tag.brill", "api/nltk.tag.brill_trainer", "api/nltk.tag.crf", "api/nltk.tag.hmm", "api/nltk.tag.hunpos", "api/nltk.tag.mapping", "api/nltk.tag.perceptron", "api/nltk.tag.senna", "api/nltk.tag.sequential", "api/nltk.tag.stanford", "api/nltk.tag.tnt", "api/nltk.tag.util", "api/nltk.tbl", "api/nltk.tbl.api", "api/nltk.tbl.demo", "api/nltk.tbl.erroranalysis", "api/nltk.tbl.feature", "api/nltk.tbl.rule", "api/nltk.tbl.template", "api/nltk.text", "api/nltk.tgrep", "api/nltk.tokenize", "api/nltk.tokenize.api", "api/nltk.tokenize.casual", "api/nltk.tokenize.destructive", "api/nltk.tokenize.legality_principle", "api/nltk.tokenize.mwe", "api/nltk.tokenize.nist", "api/nltk.tokenize.punkt", "api/nltk.tokenize.regexp", "api/nltk.tokenize.repp", "api/nltk.tokenize.sexpr", "api/nltk.tokenize.simple", "api/nltk.tokenize.sonority_sequencing", "api/nltk.tokenize.stanford", "api/nltk.tokenize.stanford_segmenter", "api/nltk.tokenize.texttiling", "api/nltk.tokenize.toktok", "api/nltk.tokenize.treebank", "api/nltk.tokenize.util", "api/nltk.toolbox", "api/nltk.translate", "api/nltk.translate.api", "api/nltk.translate.bleu_score", "api/nltk.translate.chrf_score", "api/nltk.translate.gale_church", "api/nltk.translate.gdfa", "api/nltk.translate.gleu_score", "api/nltk.translate.ibm1", "api/nltk.translate.ibm2", "api/nltk.translate.ibm3", "api/nltk.translate.ibm4", "api/nltk.translate.ibm5", "api/nltk.translate.ibm_model", "api/nltk.translate.meteor_score", "api/nltk.translate.metrics", "api/nltk.translate.nist_score", "api/nltk.translate.phrase_based", "api/nltk.translate.ribes_score", "api/nltk.translate.stack_decoder", "api/nltk.tree", "api/nltk.tree.immutable", "api/nltk.tree.parented", "api/nltk.tree.parsing", "api/nltk.tree.prettyprinter", "api/nltk.tree.probabilistic", "api/nltk.tree.transforms", "api/nltk.tree.tree", "api/nltk.treeprettyprinter", "api/nltk.treetransforms", "api/nltk.twitter", "api/nltk.twitter.api", "api/nltk.twitter.common", "api/nltk.twitter.twitter_demo", "api/nltk.twitter.twitterclient", "api/nltk.twitter.util", "api/nltk.util", "api/nltk.wsd", "contribute", "data", "howto", "howto/bleu", "howto/bnc", "howto/ccg", "howto/ccg_semantics", "howto/chat80", "howto/childes", "howto/chunk", "howto/classify", "howto/collections", "howto/collocations", "howto/concordance", "howto/corpus", "howto/crubadan", "howto/data", "howto/dependency", "howto/discourse", "howto/drt", "howto/featgram", "howto/featstruct", "howto/framenet", "howto/generate", "howto/gensim", "howto/gluesemantics", "howto/gluesemantics_malt", "howto/grammar", "howto/grammartestsuites", "howto/inference", "howto/internals", "howto/japanese", "howto/lm", "howto/logic", "howto/meteor", "howto/metrics", "howto/misc", "howto/nonmonotonic", "howto/paice", "howto/parse", "howto/portuguese_en", "howto/probability", "howto/propbank", "howto/relextract", "howto/resolution", "howto/semantics", "howto/sentiment", "howto/sentiwordnet", "howto/simple", "howto/stem", "howto/tag", "howto/tokenize", "howto/toolbox", "howto/translate", "howto/tree", "howto/treeprettyprinter", "howto/treetransforms", "howto/util", "howto/wordnet", "howto/wordnet_lch", "howto/wsd", "index", "install", "news", "py-modindex", "team"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1}, "filenames": ["api/nltk.rst", "api/nltk.app.rst", "api/nltk.app.chartparser_app.rst", "api/nltk.app.chunkparser_app.rst", "api/nltk.app.collocations_app.rst", "api/nltk.app.concordance_app.rst", "api/nltk.app.nemo_app.rst", "api/nltk.app.rdparser_app.rst", "api/nltk.app.srparser_app.rst", "api/nltk.app.wordfreq_app.rst", "api/nltk.app.wordnet_app.rst", "api/nltk.book.rst", "api/nltk.ccg.rst", "api/nltk.ccg.api.rst", "api/nltk.ccg.chart.rst", "api/nltk.ccg.combinator.rst", "api/nltk.ccg.lexicon.rst", "api/nltk.ccg.logic.rst", "api/nltk.chat.rst", "api/nltk.chat.eliza.rst", "api/nltk.chat.iesha.rst", "api/nltk.chat.rude.rst", "api/nltk.chat.suntsu.rst", "api/nltk.chat.util.rst", "api/nltk.chat.zen.rst", "api/nltk.chunk.rst", "api/nltk.chunk.api.rst", "api/nltk.chunk.named_entity.rst", "api/nltk.chunk.regexp.rst", "api/nltk.chunk.util.rst", "api/nltk.classify.rst", "api/nltk.classify.api.rst", "api/nltk.classify.decisiontree.rst", "api/nltk.classify.maxent.rst", "api/nltk.classify.megam.rst", "api/nltk.classify.naivebayes.rst", "api/nltk.classify.positivenaivebayes.rst", "api/nltk.classify.rte_classify.rst", "api/nltk.classify.scikitlearn.rst", "api/nltk.classify.senna.rst", "api/nltk.classify.svm.rst", "api/nltk.classify.tadm.rst", "api/nltk.classify.textcat.rst", "api/nltk.classify.util.rst", "api/nltk.classify.weka.rst", "api/nltk.cli.rst", "api/nltk.cluster.rst", "api/nltk.cluster.api.rst", "api/nltk.cluster.em.rst", "api/nltk.cluster.gaac.rst", "api/nltk.cluster.kmeans.rst", "api/nltk.cluster.util.rst", "api/nltk.collections.rst", "api/nltk.collocations.rst", "api/nltk.compat.rst", "api/nltk.corpus.rst", "api/nltk.corpus.europarl_raw.rst", "api/nltk.corpus.reader.rst", "api/nltk.corpus.reader.aligned.rst", "api/nltk.corpus.reader.api.rst", "api/nltk.corpus.reader.bcp47.rst", "api/nltk.corpus.reader.bnc.rst", "api/nltk.corpus.reader.bracket_parse.rst", "api/nltk.corpus.reader.categorized_sents.rst", "api/nltk.corpus.reader.chasen.rst", "api/nltk.corpus.reader.childes.rst", "api/nltk.corpus.reader.chunked.rst", "api/nltk.corpus.reader.cmudict.rst", "api/nltk.corpus.reader.comparative_sents.rst", "api/nltk.corpus.reader.conll.rst", "api/nltk.corpus.reader.crubadan.rst", "api/nltk.corpus.reader.dependency.rst", "api/nltk.corpus.reader.framenet.rst", "api/nltk.corpus.reader.ieer.rst", "api/nltk.corpus.reader.indian.rst", "api/nltk.corpus.reader.ipipan.rst", "api/nltk.corpus.reader.knbc.rst", "api/nltk.corpus.reader.lin.rst", "api/nltk.corpus.reader.markdown.rst", "api/nltk.corpus.reader.mte.rst", "api/nltk.corpus.reader.nkjp.rst", "api/nltk.corpus.reader.nombank.rst", "api/nltk.corpus.reader.nps_chat.rst", "api/nltk.corpus.reader.opinion_lexicon.rst", "api/nltk.corpus.reader.panlex_lite.rst", "api/nltk.corpus.reader.panlex_swadesh.rst", "api/nltk.corpus.reader.pl196x.rst", "api/nltk.corpus.reader.plaintext.rst", "api/nltk.corpus.reader.ppattach.rst", "api/nltk.corpus.reader.propbank.rst", "api/nltk.corpus.reader.pros_cons.rst", "api/nltk.corpus.reader.reviews.rst", "api/nltk.corpus.reader.rte.rst", "api/nltk.corpus.reader.semcor.rst", "api/nltk.corpus.reader.senseval.rst", "api/nltk.corpus.reader.sentiwordnet.rst", "api/nltk.corpus.reader.sinica_treebank.rst", "api/nltk.corpus.reader.string_category.rst", "api/nltk.corpus.reader.switchboard.rst", "api/nltk.corpus.reader.tagged.rst", "api/nltk.corpus.reader.timit.rst", "api/nltk.corpus.reader.toolbox.rst", "api/nltk.corpus.reader.twitter.rst", "api/nltk.corpus.reader.udhr.rst", "api/nltk.corpus.reader.util.rst", "api/nltk.corpus.reader.verbnet.rst", "api/nltk.corpus.reader.wordlist.rst", "api/nltk.corpus.reader.wordnet.rst", "api/nltk.corpus.reader.xmldocs.rst", "api/nltk.corpus.reader.ycoe.rst", "api/nltk.corpus.util.rst", "api/nltk.data.rst", "api/nltk.decorators.rst", "api/nltk.downloader.rst", "api/nltk.draw.rst", "api/nltk.draw.cfg.rst", "api/nltk.draw.dispersion.rst", "api/nltk.draw.table.rst", "api/nltk.draw.tree.rst", "api/nltk.draw.util.rst", "api/nltk.featstruct.rst", "api/nltk.grammar.rst", "api/nltk.help.rst", "api/nltk.inference.rst", "api/nltk.inference.api.rst", "api/nltk.inference.discourse.rst", "api/nltk.inference.mace.rst", "api/nltk.inference.nonmonotonic.rst", "api/nltk.inference.prover9.rst", "api/nltk.inference.resolution.rst", "api/nltk.inference.tableau.rst", "api/nltk.internals.rst", "api/nltk.jsontags.rst", "api/nltk.langnames.rst", "api/nltk.lazyimport.rst", "api/nltk.lm.rst", "api/nltk.lm.api.rst", "api/nltk.lm.counter.rst", "api/nltk.lm.models.rst", "api/nltk.lm.preprocessing.rst", "api/nltk.lm.smoothing.rst", "api/nltk.lm.util.rst", "api/nltk.lm.vocabulary.rst", "api/nltk.metrics.rst", "api/nltk.metrics.agreement.rst", "api/nltk.metrics.aline.rst", "api/nltk.metrics.association.rst", "api/nltk.metrics.confusionmatrix.rst", "api/nltk.metrics.distance.rst", "api/nltk.metrics.paice.rst", "api/nltk.metrics.scores.rst", "api/nltk.metrics.segmentation.rst", "api/nltk.metrics.spearman.rst", "api/nltk.misc.rst", "api/nltk.misc.babelfish.rst", "api/nltk.misc.chomsky.rst", "api/nltk.misc.minimalset.rst", "api/nltk.misc.sort.rst", "api/nltk.misc.wordfinder.rst", "api/nltk.parse.rst", "api/nltk.parse.api.rst", "api/nltk.parse.bllip.rst", "api/nltk.parse.chart.rst", "api/nltk.parse.corenlp.rst", "api/nltk.parse.dependencygraph.rst", "api/nltk.parse.earleychart.rst", "api/nltk.parse.evaluate.rst", "api/nltk.parse.featurechart.rst", "api/nltk.parse.generate.rst", "api/nltk.parse.malt.rst", "api/nltk.parse.nonprojectivedependencyparser.rst", "api/nltk.parse.pchart.rst", "api/nltk.parse.projectivedependencyparser.rst", "api/nltk.parse.recursivedescent.rst", "api/nltk.parse.shiftreduce.rst", "api/nltk.parse.stanford.rst", "api/nltk.parse.transitionparser.rst", "api/nltk.parse.util.rst", "api/nltk.parse.viterbi.rst", "api/nltk.probability.rst", "api/nltk.sem.rst", "api/nltk.sem.boxer.rst", "api/nltk.sem.chat80.rst", "api/nltk.sem.cooper_storage.rst", "api/nltk.sem.drt.rst", "api/nltk.sem.drt_glue_demo.rst", "api/nltk.sem.evaluate.rst", "api/nltk.sem.glue.rst", "api/nltk.sem.hole.rst", "api/nltk.sem.lfg.rst", "api/nltk.sem.linearlogic.rst", "api/nltk.sem.logic.rst", "api/nltk.sem.relextract.rst", "api/nltk.sem.skolemize.rst", "api/nltk.sem.util.rst", "api/nltk.sentiment.rst", "api/nltk.sentiment.sentiment_analyzer.rst", "api/nltk.sentiment.util.rst", "api/nltk.sentiment.vader.rst", "api/nltk.stem.rst", "api/nltk.stem.api.rst", "api/nltk.stem.arlstem.rst", "api/nltk.stem.arlstem2.rst", "api/nltk.stem.cistem.rst", "api/nltk.stem.isri.rst", "api/nltk.stem.lancaster.rst", "api/nltk.stem.porter.rst", "api/nltk.stem.regexp.rst", "api/nltk.stem.rslp.rst", "api/nltk.stem.snowball.rst", "api/nltk.stem.util.rst", "api/nltk.stem.wordnet.rst", "api/nltk.tabdata.rst", "api/nltk.tag.rst", "api/nltk.tag.api.rst", "api/nltk.tag.brill.rst", "api/nltk.tag.brill_trainer.rst", "api/nltk.tag.crf.rst", "api/nltk.tag.hmm.rst", "api/nltk.tag.hunpos.rst", "api/nltk.tag.mapping.rst", "api/nltk.tag.perceptron.rst", "api/nltk.tag.senna.rst", "api/nltk.tag.sequential.rst", "api/nltk.tag.stanford.rst", "api/nltk.tag.tnt.rst", "api/nltk.tag.util.rst", "api/nltk.tbl.rst", "api/nltk.tbl.api.rst", "api/nltk.tbl.demo.rst", "api/nltk.tbl.erroranalysis.rst", "api/nltk.tbl.feature.rst", "api/nltk.tbl.rule.rst", "api/nltk.tbl.template.rst", "api/nltk.text.rst", "api/nltk.tgrep.rst", "api/nltk.tokenize.rst", "api/nltk.tokenize.api.rst", "api/nltk.tokenize.casual.rst", "api/nltk.tokenize.destructive.rst", "api/nltk.tokenize.legality_principle.rst", "api/nltk.tokenize.mwe.rst", "api/nltk.tokenize.nist.rst", "api/nltk.tokenize.punkt.rst", "api/nltk.tokenize.regexp.rst", "api/nltk.tokenize.repp.rst", "api/nltk.tokenize.sexpr.rst", "api/nltk.tokenize.simple.rst", "api/nltk.tokenize.sonority_sequencing.rst", "api/nltk.tokenize.stanford.rst", "api/nltk.tokenize.stanford_segmenter.rst", "api/nltk.tokenize.texttiling.rst", "api/nltk.tokenize.toktok.rst", "api/nltk.tokenize.treebank.rst", "api/nltk.tokenize.util.rst", "api/nltk.toolbox.rst", "api/nltk.translate.rst", "api/nltk.translate.api.rst", "api/nltk.translate.bleu_score.rst", "api/nltk.translate.chrf_score.rst", "api/nltk.translate.gale_church.rst", "api/nltk.translate.gdfa.rst", "api/nltk.translate.gleu_score.rst", "api/nltk.translate.ibm1.rst", "api/nltk.translate.ibm2.rst", "api/nltk.translate.ibm3.rst", "api/nltk.translate.ibm4.rst", "api/nltk.translate.ibm5.rst", "api/nltk.translate.ibm_model.rst", "api/nltk.translate.meteor_score.rst", "api/nltk.translate.metrics.rst", "api/nltk.translate.nist_score.rst", "api/nltk.translate.phrase_based.rst", "api/nltk.translate.ribes_score.rst", "api/nltk.translate.stack_decoder.rst", "api/nltk.tree.rst", "api/nltk.tree.immutable.rst", "api/nltk.tree.parented.rst", "api/nltk.tree.parsing.rst", "api/nltk.tree.prettyprinter.rst", "api/nltk.tree.probabilistic.rst", "api/nltk.tree.transforms.rst", "api/nltk.tree.tree.rst", "api/nltk.treeprettyprinter.rst", "api/nltk.treetransforms.rst", "api/nltk.twitter.rst", "api/nltk.twitter.api.rst", "api/nltk.twitter.common.rst", "api/nltk.twitter.twitter_demo.rst", "api/nltk.twitter.twitterclient.rst", "api/nltk.twitter.util.rst", "api/nltk.util.rst", "api/nltk.wsd.rst", "contribute.rst", "data.rst", "howto.rst", "howto/bleu.rst", "howto/bnc.rst", "howto/ccg.rst", "howto/ccg_semantics.rst", "howto/chat80.rst", "howto/childes.rst", "howto/chunk.rst", "howto/classify.rst", "howto/collections.rst", "howto/collocations.rst", "howto/concordance.rst", "howto/corpus.rst", "howto/crubadan.rst", "howto/data.rst", "howto/dependency.rst", "howto/discourse.rst", "howto/drt.rst", "howto/featgram.rst", "howto/featstruct.rst", "howto/framenet.rst", "howto/generate.rst", "howto/gensim.rst", "howto/gluesemantics.rst", "howto/gluesemantics_malt.rst", "howto/grammar.rst", "howto/grammartestsuites.rst", "howto/inference.rst", "howto/internals.rst", "howto/japanese.rst", "howto/lm.rst", "howto/logic.rst", "howto/meteor.rst", "howto/metrics.rst", "howto/misc.rst", "howto/nonmonotonic.rst", "howto/paice.rst", "howto/parse.rst", "howto/portuguese_en.rst", "howto/probability.rst", "howto/propbank.rst", "howto/relextract.rst", "howto/resolution.rst", "howto/semantics.rst", "howto/sentiment.rst", "howto/sentiwordnet.rst", "howto/simple.rst", "howto/stem.rst", "howto/tag.rst", "howto/tokenize.rst", "howto/toolbox.rst", "howto/translate.rst", "howto/tree.rst", "howto/treeprettyprinter.rst", "howto/treetransforms.rst", "howto/util.rst", "howto/wordnet.rst", "howto/wordnet_lch.rst", "howto/wsd.rst", "index.rst", "install.rst", "news.rst", "py-modindex.rst", "team.rst"], "indexentries": {"__init__() (nltk.ccg.api.ccgvar method)": [[13, "nltk.ccg.api.CCGVar.__init__", false]], "__init__() (nltk.ccg.api.direction method)": [[13, "nltk.ccg.api.Direction.__init__", false]], "__init__() (nltk.ccg.api.functionalcategory method)": [[13, "nltk.ccg.api.FunctionalCategory.__init__", false]], "__init__() (nltk.ccg.api.primitivecategory method)": [[13, "nltk.ccg.api.PrimitiveCategory.__init__", false]], "__init__() (nltk.ccg.chart.backwardtyperaiserule method)": [[14, "nltk.ccg.chart.BackwardTypeRaiseRule.__init__", false]], "__init__() (nltk.ccg.chart.binarycombinatorrule method)": [[14, "nltk.ccg.chart.BinaryCombinatorRule.__init__", false]], "__init__() (nltk.ccg.chart.ccgchart method)": [[14, "nltk.ccg.chart.CCGChart.__init__", false]], "__init__() (nltk.ccg.chart.ccgchartparser method)": [[14, "nltk.ccg.chart.CCGChartParser.__init__", false]], "__init__() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.__init__", false]], "__init__() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.__init__", false]], "__init__() (nltk.ccg.chart.forwardtyperaiserule method)": [[14, "nltk.ccg.chart.ForwardTypeRaiseRule.__init__", false]], "__init__() (nltk.ccg.combinator.backwardcombinator method)": [[15, "nltk.ccg.combinator.BackwardCombinator.__init__", false]], "__init__() (nltk.ccg.combinator.forwardcombinator method)": [[15, "nltk.ccg.combinator.ForwardCombinator.__init__", false]], "__init__() (nltk.ccg.lexicon.ccglexicon method)": [[16, "nltk.ccg.lexicon.CCGLexicon.__init__", false]], "__init__() (nltk.ccg.lexicon.token method)": [[16, "nltk.ccg.lexicon.Token.__init__", false]], "__init__() (nltk.chat.util.chat method)": [[23, "nltk.chat.util.Chat.__init__", false]], "__init__() (nltk.chunk.named_entity.maxent_ne_chunker method)": [[27, "nltk.chunk.named_entity.Maxent_NE_Chunker.__init__", false]], "__init__() (nltk.chunk.named_entity.nechunkparser method)": [[27, "nltk.chunk.named_entity.NEChunkParser.__init__", false]], "__init__() (nltk.chunk.named_entity.nechunkparsertagger method)": [[27, "nltk.chunk.named_entity.NEChunkParserTagger.__init__", false]], "__init__() (nltk.chunk.regexp.chunkrule method)": [[28, "nltk.chunk.regexp.ChunkRule.__init__", false]], "__init__() (nltk.chunk.regexp.chunkrulewithcontext method)": [[28, "nltk.chunk.regexp.ChunkRuleWithContext.__init__", false]], "__init__() (nltk.chunk.regexp.chunkstring method)": [[28, "nltk.chunk.regexp.ChunkString.__init__", false]], "__init__() (nltk.chunk.regexp.expandleftrule method)": [[28, "nltk.chunk.regexp.ExpandLeftRule.__init__", false]], "__init__() (nltk.chunk.regexp.expandrightrule method)": [[28, "nltk.chunk.regexp.ExpandRightRule.__init__", false]], "__init__() (nltk.chunk.regexp.mergerule method)": [[28, "nltk.chunk.regexp.MergeRule.__init__", false]], "__init__() (nltk.chunk.regexp.regexpchunkparser method)": [[28, "nltk.chunk.regexp.RegexpChunkParser.__init__", false]], "__init__() (nltk.chunk.regexp.regexpchunkrule method)": [[28, "nltk.chunk.regexp.RegexpChunkRule.__init__", false]], "__init__() (nltk.chunk.regexp.regexpparser method)": [[28, "nltk.chunk.regexp.RegexpParser.__init__", false]], "__init__() (nltk.chunk.regexp.splitrule method)": [[28, "nltk.chunk.regexp.SplitRule.__init__", false]], "__init__() (nltk.chunk.regexp.striprule method)": [[28, "nltk.chunk.regexp.StripRule.__init__", false]], "__init__() (nltk.chunk.regexp.unchunkrule method)": [[28, "nltk.chunk.regexp.UnChunkRule.__init__", false]], "__init__() (nltk.chunk.util.chunkscore method)": [[29, "nltk.chunk.util.ChunkScore.__init__", false]], "__init__() (nltk.classify.decisiontree.decisiontreeclassifier method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.__init__", false]], "__init__() (nltk.classify.maxent.binarymaxentfeatureencoding method)": [[33, "nltk.classify.maxent.BinaryMaxentFeatureEncoding.__init__", false]], "__init__() (nltk.classify.maxent.functionbackedmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.FunctionBackedMaxentFeatureEncoding.__init__", false]], "__init__() (nltk.classify.maxent.gisencoding method)": [[33, "nltk.classify.maxent.GISEncoding.__init__", false]], "__init__() (nltk.classify.maxent.maxentclassifier method)": [[33, "nltk.classify.maxent.MaxentClassifier.__init__", false]], "__init__() (nltk.classify.maxent.tadmeventmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.TadmEventMaxentFeatureEncoding.__init__", false]], "__init__() (nltk.classify.maxent.typedmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.TypedMaxentFeatureEncoding.__init__", false]], "__init__() (nltk.classify.naivebayes.naivebayesclassifier method)": [[35, "nltk.classify.naivebayes.NaiveBayesClassifier.__init__", false]], "__init__() (nltk.classify.rte_classify.rtefeatureextractor method)": [[37, "nltk.classify.rte_classify.RTEFeatureExtractor.__init__", false]], "__init__() (nltk.classify.scikitlearn.sklearnclassifier method)": [[38, "nltk.classify.scikitlearn.SklearnClassifier.__init__", false]], "__init__() (nltk.classify.senna.senna method)": [[39, "nltk.classify.senna.Senna.__init__", false]], "__init__() (nltk.classify.svm.svmclassifier method)": [[40, "nltk.classify.svm.SvmClassifier.__init__", false]], "__init__() (nltk.classify.textcat.textcat method)": [[42, "nltk.classify.textcat.TextCat.__init__", false]], "__init__() (nltk.classify.util.cutoffchecker method)": [[43, "nltk.classify.util.CutoffChecker.__init__", false]], "__init__() (nltk.classify.weka.arff_formatter method)": [[44, "nltk.classify.weka.ARFF_Formatter.__init__", false]], "__init__() (nltk.classify.weka.wekaclassifier method)": [[44, "nltk.classify.weka.WekaClassifier.__init__", false]], "__init__() (nltk.cluster.em.emclusterer method)": [[48, "nltk.cluster.em.EMClusterer.__init__", false]], "__init__() (nltk.cluster.gaac.gaaclusterer method)": [[49, "nltk.cluster.gaac.GAAClusterer.__init__", false]], "__init__() (nltk.cluster.kmeans.kmeansclusterer method)": [[50, "nltk.cluster.kmeans.KMeansClusterer.__init__", false]], "__init__() (nltk.cluster.util.dendrogram method)": [[51, "nltk.cluster.util.Dendrogram.__init__", false]], "__init__() (nltk.cluster.util.vectorspaceclusterer method)": [[51, "nltk.cluster.util.VectorSpaceClusterer.__init__", false]], "__init__() (nltk.collections.lazyconcatenation method)": [[52, "nltk.collections.LazyConcatenation.__init__", false]], "__init__() (nltk.collections.lazyenumerate method)": [[52, "nltk.collections.LazyEnumerate.__init__", false]], "__init__() (nltk.collections.lazyiteratorlist method)": [[52, "nltk.collections.LazyIteratorList.__init__", false]], "__init__() (nltk.collections.lazymap method)": [[52, "nltk.collections.LazyMap.__init__", false]], "__init__() (nltk.collections.lazysubsequence method)": [[52, "nltk.collections.LazySubsequence.__init__", false]], "__init__() (nltk.collections.lazyzip method)": [[52, "nltk.collections.LazyZip.__init__", false]], "__init__() (nltk.collections.ordereddict method)": [[52, "nltk.collections.OrderedDict.__init__", false]], "__init__() (nltk.collections.trie method)": [[52, "nltk.collections.Trie.__init__", false]], "__init__() (nltk.collocations.bigramcollocationfinder method)": [[53, "nltk.collocations.BigramCollocationFinder.__init__", false]], "__init__() (nltk.collocations.quadgramcollocationfinder method)": [[53, "nltk.collocations.QuadgramCollocationFinder.__init__", false]], "__init__() (nltk.collocations.trigramcollocationfinder method)": [[53, "nltk.collocations.TrigramCollocationFinder.__init__", false]], "__init__() (nltk.corpus.reader.aligned.alignedcorpusreader method)": [[58, "nltk.corpus.reader.aligned.AlignedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.aligned.alignedsentcorpusview method)": [[58, "nltk.corpus.reader.aligned.AlignedSentCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.alignedcorpusreader method)": [[57, "nltk.corpus.reader.AlignedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.alpinocorpusreader method)": [[57, "nltk.corpus.reader.AlpinoCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.api.categorizedcorpusreader method)": [[59, "nltk.corpus.reader.api.CategorizedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.api.corpusreader method)": [[59, "nltk.corpus.reader.api.CorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.bcp47.bcp47corpusreader method)": [[60, "nltk.corpus.reader.bcp47.BCP47CorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.bcp47corpusreader method)": [[57, "nltk.corpus.reader.BCP47CorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.bnc.bnccorpusreader method)": [[61, "nltk.corpus.reader.bnc.BNCCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.bnc.bncsentence method)": [[61, "nltk.corpus.reader.bnc.BNCSentence.__init__", false]], "__init__() (nltk.corpus.reader.bnc.bncwordview method)": [[61, "nltk.corpus.reader.bnc.BNCWordView.__init__", false]], "__init__() (nltk.corpus.reader.bnccorpusreader method)": [[57, "nltk.corpus.reader.BNCCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.bracket_parse.alpinocorpusreader method)": [[62, "nltk.corpus.reader.bracket_parse.AlpinoCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.bracket_parse.bracketparsecorpusreader method)": [[62, "nltk.corpus.reader.bracket_parse.BracketParseCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.bracket_parse.categorizedbracketparsecorpusreader method)": [[62, "nltk.corpus.reader.bracket_parse.CategorizedBracketParseCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.bracketparsecorpusreader method)": [[57, "nltk.corpus.reader.BracketParseCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.categorized_sents.categorizedsentencescorpusreader method)": [[63, "nltk.corpus.reader.categorized_sents.CategorizedSentencesCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.categorizedbracketparsecorpusreader method)": [[57, "nltk.corpus.reader.CategorizedBracketParseCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.categorizedcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.categorizedplaintextcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedPlaintextCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.categorizedsentencescorpusreader method)": [[57, "nltk.corpus.reader.CategorizedSentencesCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.categorizedtaggedcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedTaggedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.chasen.chasencorpusreader method)": [[64, "nltk.corpus.reader.chasen.ChasenCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.chasen.chasencorpusview method)": [[64, "nltk.corpus.reader.chasen.ChasenCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.chasencorpusreader method)": [[57, "nltk.corpus.reader.ChasenCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.childes.childescorpusreader method)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.childescorpusreader method)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.chunked.chunkedcorpusreader method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.chunked.chunkedcorpusview method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.chunkedcorpusreader method)": [[57, "nltk.corpus.reader.ChunkedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.comparative_sents.comparativesentencescorpusreader method)": [[68, "nltk.corpus.reader.comparative_sents.ComparativeSentencesCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.comparative_sents.comparison method)": [[68, "nltk.corpus.reader.comparative_sents.Comparison.__init__", false]], "__init__() (nltk.corpus.reader.comparativesentencescorpusreader method)": [[57, "nltk.corpus.reader.ComparativeSentencesCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.conll.conllchunkcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllChunkCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.conll.conllsrlinstance method)": [[69, "nltk.corpus.reader.conll.ConllSRLInstance.__init__", false]], "__init__() (nltk.corpus.reader.conll.conllsrlinstancelist method)": [[69, "nltk.corpus.reader.conll.ConllSRLInstanceList.__init__", false]], "__init__() (nltk.corpus.reader.conllchunkcorpusreader method)": [[57, "nltk.corpus.reader.ConllChunkCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.corpusreader method)": [[57, "nltk.corpus.reader.CorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.crubadan.crubadancorpusreader method)": [[70, "nltk.corpus.reader.crubadan.CrubadanCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.crubadancorpusreader method)": [[57, "nltk.corpus.reader.CrubadanCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.dependency.dependencycorpusreader method)": [[71, "nltk.corpus.reader.dependency.DependencyCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.dependency.dependencycorpusview method)": [[71, "nltk.corpus.reader.dependency.DependencyCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.dependencycorpusreader method)": [[57, "nltk.corpus.reader.DependencyCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.framenet.attrdict method)": [[72, "nltk.corpus.reader.framenet.AttrDict.__init__", false]], "__init__() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.framenet.future method)": [[72, "nltk.corpus.reader.framenet.Future.__init__", false]], "__init__() (nltk.corpus.reader.framenet.prettydict method)": [[72, "nltk.corpus.reader.framenet.PrettyDict.__init__", false]], "__init__() (nltk.corpus.reader.framenet.prettylist method)": [[72, "nltk.corpus.reader.framenet.PrettyList.__init__", false]], "__init__() (nltk.corpus.reader.framenet.speciallist method)": [[72, "nltk.corpus.reader.framenet.SpecialList.__init__", false]], "__init__() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.ieer.ieerdocument method)": [[73, "nltk.corpus.reader.ieer.IEERDocument.__init__", false]], "__init__() (nltk.corpus.reader.indian.indiancorpusview method)": [[74, "nltk.corpus.reader.indian.IndianCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.ipipan.ipipancorpusreader method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.ipipan.ipipancorpusview method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.ipipancorpusreader method)": [[57, "nltk.corpus.reader.IPIPANCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.knbc.knbcorpusreader method)": [[76, "nltk.corpus.reader.knbc.KNBCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.knbcorpusreader method)": [[57, "nltk.corpus.reader.KNBCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.lin.linthesauruscorpusreader method)": [[77, "nltk.corpus.reader.lin.LinThesaurusCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.linthesauruscorpusreader method)": [[57, "nltk.corpus.reader.LinThesaurusCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.macmorphocorpusreader method)": [[57, "nltk.corpus.reader.MacMorphoCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.markdown.codeblock method)": [[78, "nltk.corpus.reader.markdown.CodeBlock.__init__", false]], "__init__() (nltk.corpus.reader.markdown.markdownblock method)": [[78, "nltk.corpus.reader.markdown.MarkdownBlock.__init__", false]], "__init__() (nltk.corpus.reader.markdown.markdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.MarkdownCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.markdown.markdownsection method)": [[78, "nltk.corpus.reader.markdown.MarkdownSection.__init__", false]], "__init__() (nltk.corpus.reader.mte.mtecorpusreader method)": [[79, "nltk.corpus.reader.mte.MTECorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.mte.mtecorpusview method)": [[79, "nltk.corpus.reader.mte.MTECorpusView.__init__", false]], "__init__() (nltk.corpus.reader.mte.mtefilereader method)": [[79, "nltk.corpus.reader.mte.MTEFileReader.__init__", false]], "__init__() (nltk.corpus.reader.mtecorpusreader method)": [[57, "nltk.corpus.reader.MTECorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.nkjp.nkjpcorpus_header_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Header_View.__init__", false]], "__init__() (nltk.corpus.reader.nkjp.nkjpcorpus_morph_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Morph_View.__init__", false]], "__init__() (nltk.corpus.reader.nkjp.nkjpcorpus_segmentation_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Segmentation_View.__init__", false]], "__init__() (nltk.corpus.reader.nkjp.nkjpcorpus_text_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Text_View.__init__", false]], "__init__() (nltk.corpus.reader.nkjp.nkjpcorpusreader method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.nkjp.xml_tool method)": [[80, "nltk.corpus.reader.nkjp.XML_Tool.__init__", false]], "__init__() (nltk.corpus.reader.nkjpcorpusreader method)": [[57, "nltk.corpus.reader.NKJPCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.nombank.nombankchaintreepointer method)": [[81, "nltk.corpus.reader.nombank.NombankChainTreePointer.__init__", false]], "__init__() (nltk.corpus.reader.nombank.nombankcorpusreader method)": [[81, "nltk.corpus.reader.nombank.NombankCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.nombank.nombankinstance method)": [[81, "nltk.corpus.reader.nombank.NombankInstance.__init__", false]], "__init__() (nltk.corpus.reader.nombank.nombankpointer method)": [[81, "nltk.corpus.reader.nombank.NombankPointer.__init__", false]], "__init__() (nltk.corpus.reader.nombank.nombanksplittreepointer method)": [[81, "nltk.corpus.reader.nombank.NombankSplitTreePointer.__init__", false]], "__init__() (nltk.corpus.reader.nombank.nombanktreepointer method)": [[81, "nltk.corpus.reader.nombank.NombankTreePointer.__init__", false]], "__init__() (nltk.corpus.reader.nombankcorpusreader method)": [[57, "nltk.corpus.reader.NombankCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.nps_chat.npschatcorpusreader method)": [[82, "nltk.corpus.reader.nps_chat.NPSChatCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.npschatcorpusreader method)": [[57, "nltk.corpus.reader.NPSChatCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.opinion_lexicon.ignorereadmecorpusview method)": [[83, "nltk.corpus.reader.opinion_lexicon.IgnoreReadmeCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.panlex_lite.meaning method)": [[84, "nltk.corpus.reader.panlex_lite.Meaning.__init__", false]], "__init__() (nltk.corpus.reader.panlex_lite.panlexlitecorpusreader method)": [[84, "nltk.corpus.reader.panlex_lite.PanLexLiteCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.panlex_swadesh.panlexswadeshcorpusreader method)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexSwadeshCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.panlexlitecorpusreader method)": [[57, "nltk.corpus.reader.PanLexLiteCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.panlexswadeshcorpusreader method)": [[57, "nltk.corpus.reader.PanlexSwadeshCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.pl196x.pl196xcorpusreader method)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.pl196x.teicorpusview method)": [[86, "nltk.corpus.reader.pl196x.TEICorpusView.__init__", false]], "__init__() (nltk.corpus.reader.pl196xcorpusreader method)": [[57, "nltk.corpus.reader.Pl196xCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.plaintext.categorizedplaintextcorpusreader method)": [[87, "nltk.corpus.reader.plaintext.CategorizedPlaintextCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.plaintext.plaintextcorpusreader method)": [[87, "nltk.corpus.reader.plaintext.PlaintextCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.plaintext.portuguesecategorizedplaintextcorpusreader method)": [[87, "nltk.corpus.reader.plaintext.PortugueseCategorizedPlaintextCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.plaintextcorpusreader method)": [[57, "nltk.corpus.reader.PlaintextCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.portuguesecategorizedplaintextcorpusreader method)": [[57, "nltk.corpus.reader.PortugueseCategorizedPlaintextCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.ppattach.ppattachment method)": [[88, "nltk.corpus.reader.ppattach.PPAttachment.__init__", false]], "__init__() (nltk.corpus.reader.propbank.propbankchaintreepointer method)": [[89, "nltk.corpus.reader.propbank.PropbankChainTreePointer.__init__", false]], "__init__() (nltk.corpus.reader.propbank.propbankcorpusreader method)": [[89, "nltk.corpus.reader.propbank.PropbankCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.propbank.propbankinflection method)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.__init__", false]], "__init__() (nltk.corpus.reader.propbank.propbankinstance method)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.__init__", false]], "__init__() (nltk.corpus.reader.propbank.propbankpointer method)": [[89, "nltk.corpus.reader.propbank.PropbankPointer.__init__", false]], "__init__() (nltk.corpus.reader.propbank.propbanksplittreepointer method)": [[89, "nltk.corpus.reader.propbank.PropbankSplitTreePointer.__init__", false]], "__init__() (nltk.corpus.reader.propbank.propbanktreepointer method)": [[89, "nltk.corpus.reader.propbank.PropbankTreePointer.__init__", false]], "__init__() (nltk.corpus.reader.propbankcorpusreader method)": [[57, "nltk.corpus.reader.PropbankCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.pros_cons.prosconscorpusreader method)": [[90, "nltk.corpus.reader.pros_cons.ProsConsCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.prosconscorpusreader method)": [[57, "nltk.corpus.reader.ProsConsCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.reviews.review method)": [[91, "nltk.corpus.reader.reviews.Review.__init__", false]], "__init__() (nltk.corpus.reader.reviews.reviewline method)": [[91, "nltk.corpus.reader.reviews.ReviewLine.__init__", false]], "__init__() (nltk.corpus.reader.reviews.reviewscorpusreader method)": [[91, "nltk.corpus.reader.reviews.ReviewsCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.reviewscorpusreader method)": [[57, "nltk.corpus.reader.ReviewsCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.rte.rtepair method)": [[92, "nltk.corpus.reader.rte.RTEPair.__init__", false]], "__init__() (nltk.corpus.reader.semcor.semcorcorpusreader method)": [[93, "nltk.corpus.reader.semcor.SemcorCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.semcor.semcorsentence method)": [[93, "nltk.corpus.reader.semcor.SemcorSentence.__init__", false]], "__init__() (nltk.corpus.reader.semcor.semcorwordview method)": [[93, "nltk.corpus.reader.semcor.SemcorWordView.__init__", false]], "__init__() (nltk.corpus.reader.semcorcorpusreader method)": [[57, "nltk.corpus.reader.SemcorCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.senseval.sensevalcorpusview method)": [[94, "nltk.corpus.reader.senseval.SensevalCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.senseval.sensevalinstance method)": [[94, "nltk.corpus.reader.senseval.SensevalInstance.__init__", false]], "__init__() (nltk.corpus.reader.sentisynset method)": [[57, "nltk.corpus.reader.SentiSynset.__init__", false]], "__init__() (nltk.corpus.reader.sentiwordnet.sentisynset method)": [[95, "nltk.corpus.reader.sentiwordnet.SentiSynset.__init__", false]], "__init__() (nltk.corpus.reader.sentiwordnet.sentiwordnetcorpusreader method)": [[95, "nltk.corpus.reader.sentiwordnet.SentiWordNetCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.sentiwordnetcorpusreader method)": [[57, "nltk.corpus.reader.SentiWordNetCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.string_category.stringcategorycorpusreader method)": [[97, "nltk.corpus.reader.string_category.StringCategoryCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.stringcategorycorpusreader method)": [[57, "nltk.corpus.reader.StringCategoryCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.switchboard.switchboardcorpusreader method)": [[98, "nltk.corpus.reader.switchboard.SwitchboardCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.switchboard.switchboardturn method)": [[98, "nltk.corpus.reader.switchboard.SwitchboardTurn.__init__", false]], "__init__() (nltk.corpus.reader.switchboardcorpusreader method)": [[57, "nltk.corpus.reader.SwitchboardCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.tagged.categorizedtaggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.CategorizedTaggedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.tagged.macmorphocorpusreader method)": [[99, "nltk.corpus.reader.tagged.MacMorphoCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.tagged.taggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.TaggedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.tagged.taggedcorpusview method)": [[99, "nltk.corpus.reader.tagged.TaggedCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.tagged.timittaggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.TimitTaggedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.taggedcorpusreader method)": [[57, "nltk.corpus.reader.TaggedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.teicorpusview method)": [[57, "nltk.corpus.reader.TEICorpusView.__init__", false]], "__init__() (nltk.corpus.reader.timit.speakerinfo method)": [[100, "nltk.corpus.reader.timit.SpeakerInfo.__init__", false]], "__init__() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.timittaggedcorpusreader method)": [[57, "nltk.corpus.reader.TimitTaggedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.twitter.twittercorpusreader method)": [[102, "nltk.corpus.reader.twitter.TwitterCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.twittercorpusreader method)": [[57, "nltk.corpus.reader.TwitterCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.udhr.udhrcorpusreader method)": [[103, "nltk.corpus.reader.udhr.UdhrCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.udhrcorpusreader method)": [[57, "nltk.corpus.reader.UdhrCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.util.concatenatedcorpusview method)": [[104, "nltk.corpus.reader.util.ConcatenatedCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.util.streambackedcorpusview method)": [[104, "nltk.corpus.reader.util.StreamBackedCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.__init__", false]], "__init__() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.__init__", false]], "__init__() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.wordnet.wordneticcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetICCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.wordneticcorpusreader method)": [[57, "nltk.corpus.reader.WordNetICCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.xmlcorpusreader method)": [[57, "nltk.corpus.reader.XMLCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.xmldocs.xmlcorpusreader method)": [[108, "nltk.corpus.reader.xmldocs.XMLCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.xmldocs.xmlcorpusview method)": [[108, "nltk.corpus.reader.xmldocs.XMLCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.ycoe.ycoecorpusreader method)": [[109, "nltk.corpus.reader.ycoe.YCOECorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.ycoe.ycoetaggedcorpusreader method)": [[109, "nltk.corpus.reader.ycoe.YCOETaggedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.ycoecorpusreader method)": [[57, "nltk.corpus.reader.YCOECorpusReader.__init__", false]], "__init__() (nltk.corpus.util.lazycorpusloader method)": [[110, "nltk.corpus.util.LazyCorpusLoader.__init__", false]], "__init__() (nltk.data.filesystempathpointer method)": [[111, "nltk.data.FileSystemPathPointer.__init__", false]], "__init__() (nltk.data.lazyloader method)": [[111, "nltk.data.LazyLoader.__init__", false]], "__init__() (nltk.data.openondemandzipfile method)": [[111, "nltk.data.OpenOnDemandZipFile.__init__", false]], "__init__() (nltk.data.seekableunicodestreamreader method)": [[111, "nltk.data.SeekableUnicodeStreamReader.__init__", false]], "__init__() (nltk.downloader.collection method)": [[113, "nltk.downloader.Collection.__init__", false]], "__init__() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.__init__", false]], "__init__() (nltk.downloader.downloadergui method)": [[113, "nltk.downloader.DownloaderGUI.__init__", false]], "__init__() (nltk.downloader.downloadershell method)": [[113, "nltk.downloader.DownloaderShell.__init__", false]], "__init__() (nltk.downloader.errormessage method)": [[113, "nltk.downloader.ErrorMessage.__init__", false]], "__init__() (nltk.downloader.finishcollectionmessage method)": [[113, "nltk.downloader.FinishCollectionMessage.__init__", false]], "__init__() (nltk.downloader.finishdownloadmessage method)": [[113, "nltk.downloader.FinishDownloadMessage.__init__", false]], "__init__() (nltk.downloader.finishpackagemessage method)": [[113, "nltk.downloader.FinishPackageMessage.__init__", false]], "__init__() (nltk.downloader.finishunzipmessage method)": [[113, "nltk.downloader.FinishUnzipMessage.__init__", false]], "__init__() (nltk.downloader.package method)": [[113, "nltk.downloader.Package.__init__", false]], "__init__() (nltk.downloader.progressmessage method)": [[113, "nltk.downloader.ProgressMessage.__init__", false]], "__init__() (nltk.downloader.selectdownloaddirmessage method)": [[113, "nltk.downloader.SelectDownloadDirMessage.__init__", false]], "__init__() (nltk.downloader.stalemessage method)": [[113, "nltk.downloader.StaleMessage.__init__", false]], "__init__() (nltk.downloader.startcollectionmessage method)": [[113, "nltk.downloader.StartCollectionMessage.__init__", false]], "__init__() (nltk.downloader.startdownloadmessage method)": [[113, "nltk.downloader.StartDownloadMessage.__init__", false]], "__init__() (nltk.downloader.startpackagemessage method)": [[113, "nltk.downloader.StartPackageMessage.__init__", false]], "__init__() (nltk.downloader.startunzipmessage method)": [[113, "nltk.downloader.StartUnzipMessage.__init__", false]], "__init__() (nltk.downloader.uptodatemessage method)": [[113, "nltk.downloader.UpToDateMessage.__init__", false]], "__init__() (nltk.draw.cfg.cfgdemo method)": [[115, "nltk.draw.cfg.CFGDemo.__init__", false]], "__init__() (nltk.draw.cfg.cfgeditor method)": [[115, "nltk.draw.cfg.CFGEditor.__init__", false]], "__init__() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.__init__", false]], "__init__() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.__init__", false]], "__init__() (nltk.draw.tree.treesegmentwidget method)": [[118, "nltk.draw.tree.TreeSegmentWidget.__init__", false]], "__init__() (nltk.draw.tree.treeview method)": [[118, "nltk.draw.tree.TreeView.__init__", false]], "__init__() (nltk.draw.tree.treewidget method)": [[118, "nltk.draw.tree.TreeWidget.__init__", false]], "__init__() (nltk.draw.util.abstractcontainerwidget method)": [[119, "nltk.draw.util.AbstractContainerWidget.__init__", false]], "__init__() (nltk.draw.util.boxwidget method)": [[119, "nltk.draw.util.BoxWidget.__init__", false]], "__init__() (nltk.draw.util.bracketwidget method)": [[119, "nltk.draw.util.BracketWidget.__init__", false]], "__init__() (nltk.draw.util.canvasframe method)": [[119, "nltk.draw.util.CanvasFrame.__init__", false]], "__init__() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.__init__", false]], "__init__() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.__init__", false]], "__init__() (nltk.draw.util.entrydialog method)": [[119, "nltk.draw.util.EntryDialog.__init__", false]], "__init__() (nltk.draw.util.mutableoptionmenu method)": [[119, "nltk.draw.util.MutableOptionMenu.__init__", false]], "__init__() (nltk.draw.util.ovalwidget method)": [[119, "nltk.draw.util.OvalWidget.__init__", false]], "__init__() (nltk.draw.util.parenwidget method)": [[119, "nltk.draw.util.ParenWidget.__init__", false]], "__init__() (nltk.draw.util.scrollwatcherwidget method)": [[119, "nltk.draw.util.ScrollWatcherWidget.__init__", false]], "__init__() (nltk.draw.util.sequencewidget method)": [[119, "nltk.draw.util.SequenceWidget.__init__", false]], "__init__() (nltk.draw.util.showtext method)": [[119, "nltk.draw.util.ShowText.__init__", false]], "__init__() (nltk.draw.util.spacewidget method)": [[119, "nltk.draw.util.SpaceWidget.__init__", false]], "__init__() (nltk.draw.util.stackwidget method)": [[119, "nltk.draw.util.StackWidget.__init__", false]], "__init__() (nltk.draw.util.symbolwidget method)": [[119, "nltk.draw.util.SymbolWidget.__init__", false]], "__init__() (nltk.draw.util.textwidget method)": [[119, "nltk.draw.util.TextWidget.__init__", false]], "__init__() (nltk.featstruct.featdict method)": [[120, "nltk.featstruct.FeatDict.__init__", false]], "__init__() (nltk.featstruct.featlist method)": [[120, "nltk.featstruct.FeatList.__init__", false]], "__init__() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.__init__", false]], "__init__() (nltk.featstruct.feature method)": [[120, "nltk.featstruct.Feature.__init__", false]], "__init__() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.__init__", false]], "__init__() (nltk.grammar.dependencygrammar method)": [[121, "nltk.grammar.DependencyGrammar.__init__", false]], "__init__() (nltk.grammar.nonterminal method)": [[121, "nltk.grammar.Nonterminal.__init__", false]], "__init__() (nltk.grammar.pcfg method)": [[121, "nltk.grammar.PCFG.__init__", false]], "__init__() (nltk.grammar.probabilisticdependencygrammar method)": [[121, "nltk.grammar.ProbabilisticDependencyGrammar.__init__", false]], "__init__() (nltk.grammar.probabilisticproduction method)": [[121, "nltk.grammar.ProbabilisticProduction.__init__", false]], "__init__() (nltk.grammar.production method)": [[121, "nltk.grammar.Production.__init__", false]], "__init__() (nltk.inference.api.basemodelbuildercommand method)": [[124, "nltk.inference.api.BaseModelBuilderCommand.__init__", false]], "__init__() (nltk.inference.api.baseprovercommand method)": [[124, "nltk.inference.api.BaseProverCommand.__init__", false]], "__init__() (nltk.inference.api.basetheoremtoolcommand method)": [[124, "nltk.inference.api.BaseTheoremToolCommand.__init__", false]], "__init__() (nltk.inference.api.modelbuildercommanddecorator method)": [[124, "nltk.inference.api.ModelBuilderCommandDecorator.__init__", false]], "__init__() (nltk.inference.api.parallelproverbuilder method)": [[124, "nltk.inference.api.ParallelProverBuilder.__init__", false]], "__init__() (nltk.inference.api.parallelproverbuildercommand method)": [[124, "nltk.inference.api.ParallelProverBuilderCommand.__init__", false]], "__init__() (nltk.inference.api.provercommanddecorator method)": [[124, "nltk.inference.api.ProverCommandDecorator.__init__", false]], "__init__() (nltk.inference.api.theoremtoolcommanddecorator method)": [[124, "nltk.inference.api.TheoremToolCommandDecorator.__init__", false]], "__init__() (nltk.inference.api.theoremtoolthread method)": [[124, "nltk.inference.api.TheoremToolThread.__init__", false]], "__init__() (nltk.inference.discourse.cfgreadingcommand method)": [[125, "nltk.inference.discourse.CfgReadingCommand.__init__", false]], "__init__() (nltk.inference.discourse.discoursetester method)": [[125, "nltk.inference.discourse.DiscourseTester.__init__", false]], "__init__() (nltk.inference.discourse.drtgluereadingcommand method)": [[125, "nltk.inference.discourse.DrtGlueReadingCommand.__init__", false]], "__init__() (nltk.inference.mace.mace method)": [[126, "nltk.inference.mace.Mace.__init__", false]], "__init__() (nltk.inference.mace.macecommand method)": [[126, "nltk.inference.mace.MaceCommand.__init__", false]], "__init__() (nltk.inference.nonmonotonic.predholder method)": [[127, "nltk.inference.nonmonotonic.PredHolder.__init__", false]], "__init__() (nltk.inference.prover9.prover9 method)": [[128, "nltk.inference.prover9.Prover9.__init__", false]], "__init__() (nltk.inference.prover9.prover9command method)": [[128, "nltk.inference.prover9.Prover9Command.__init__", false]], "__init__() (nltk.inference.prover9.prover9exception method)": [[128, "nltk.inference.prover9.Prover9Exception.__init__", false]], "__init__() (nltk.inference.resolution.bindingdict method)": [[129, "nltk.inference.resolution.BindingDict.__init__", false]], "__init__() (nltk.inference.resolution.bindingexception method)": [[129, "nltk.inference.resolution.BindingException.__init__", false]], "__init__() (nltk.inference.resolution.clause method)": [[129, "nltk.inference.resolution.Clause.__init__", false]], "__init__() (nltk.inference.resolution.debugobject method)": [[129, "nltk.inference.resolution.DebugObject.__init__", false]], "__init__() (nltk.inference.resolution.resolutionprovercommand method)": [[129, "nltk.inference.resolution.ResolutionProverCommand.__init__", false]], "__init__() (nltk.inference.resolution.unificationexception method)": [[129, "nltk.inference.resolution.UnificationException.__init__", false]], "__init__() (nltk.inference.tableau.agenda method)": [[130, "nltk.inference.tableau.Agenda.__init__", false]], "__init__() (nltk.inference.tableau.debug method)": [[130, "nltk.inference.tableau.Debug.__init__", false]], "__init__() (nltk.inference.tableau.tableauprovercommand method)": [[130, "nltk.inference.tableau.TableauProverCommand.__init__", false]], "__init__() (nltk.internals.counter method)": [[131, "nltk.internals.Counter.__init__", false]], "__init__() (nltk.internals.elementwrapper method)": [[131, "nltk.internals.ElementWrapper.__init__", false]], "__init__() (nltk.internals.readerror method)": [[131, "nltk.internals.ReadError.__init__", false]], "__init__() (nltk.lazyimport.lazymodule method)": [[134, "nltk.lazyimport.LazyModule.__init__", false]], "__init__() (nltk.lm.absolutediscountinginterpolated method)": [[135, "nltk.lm.AbsoluteDiscountingInterpolated.__init__", false]], "__init__() (nltk.lm.api.languagemodel method)": [[136, "nltk.lm.api.LanguageModel.__init__", false]], "__init__() (nltk.lm.api.smoothing method)": [[136, "nltk.lm.api.Smoothing.__init__", false]], "__init__() (nltk.lm.counter.ngramcounter method)": [[137, "nltk.lm.counter.NgramCounter.__init__", false]], "__init__() (nltk.lm.kneserneyinterpolated method)": [[135, "nltk.lm.KneserNeyInterpolated.__init__", false]], "__init__() (nltk.lm.laplace method)": [[135, "nltk.lm.Laplace.__init__", false]], "__init__() (nltk.lm.lidstone method)": [[135, "nltk.lm.Lidstone.__init__", false]], "__init__() (nltk.lm.models.absolutediscountinginterpolated method)": [[138, "nltk.lm.models.AbsoluteDiscountingInterpolated.__init__", false]], "__init__() (nltk.lm.models.interpolatedlanguagemodel method)": [[138, "nltk.lm.models.InterpolatedLanguageModel.__init__", false]], "__init__() (nltk.lm.models.kneserneyinterpolated method)": [[138, "nltk.lm.models.KneserNeyInterpolated.__init__", false]], "__init__() (nltk.lm.models.laplace method)": [[138, "nltk.lm.models.Laplace.__init__", false]], "__init__() (nltk.lm.models.lidstone method)": [[138, "nltk.lm.models.Lidstone.__init__", false]], "__init__() (nltk.lm.models.stupidbackoff method)": [[138, "nltk.lm.models.StupidBackoff.__init__", false]], "__init__() (nltk.lm.models.wittenbellinterpolated method)": [[138, "nltk.lm.models.WittenBellInterpolated.__init__", false]], "__init__() (nltk.lm.ngramcounter method)": [[135, "nltk.lm.NgramCounter.__init__", false]], "__init__() (nltk.lm.smoothing.absolutediscounting method)": [[140, "nltk.lm.smoothing.AbsoluteDiscounting.__init__", false]], "__init__() (nltk.lm.smoothing.kneserney method)": [[140, "nltk.lm.smoothing.KneserNey.__init__", false]], "__init__() (nltk.lm.smoothing.wittenbell method)": [[140, "nltk.lm.smoothing.WittenBell.__init__", false]], "__init__() (nltk.lm.stupidbackoff method)": [[135, "nltk.lm.StupidBackoff.__init__", false]], "__init__() (nltk.lm.vocabulary method)": [[135, "nltk.lm.Vocabulary.__init__", false]], "__init__() (nltk.lm.vocabulary.vocabulary method)": [[142, "nltk.lm.vocabulary.Vocabulary.__init__", false]], "__init__() (nltk.lm.wittenbellinterpolated method)": [[135, "nltk.lm.WittenBellInterpolated.__init__", false]], "__init__() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.__init__", false]], "__init__() (nltk.metrics.association.contingencymeasures method)": [[146, "nltk.metrics.association.ContingencyMeasures.__init__", false]], "__init__() (nltk.metrics.confusionmatrix.confusionmatrix method)": [[147, "nltk.metrics.confusionmatrix.ConfusionMatrix.__init__", false]], "__init__() (nltk.metrics.paice.paice method)": [[149, "nltk.metrics.paice.Paice.__init__", false]], "__init__() (nltk.misc.minimalset.minimalset method)": [[156, "nltk.misc.minimalset.MinimalSet.__init__", false]], "__init__() (nltk.parse.bllip.bllipparser method)": [[161, "nltk.parse.bllip.BllipParser.__init__", false]], "__init__() (nltk.parse.chart.bottomupchartparser method)": [[162, "nltk.parse.chart.BottomUpChartParser.__init__", false]], "__init__() (nltk.parse.chart.bottomupleftcornerchartparser method)": [[162, "nltk.parse.chart.BottomUpLeftCornerChartParser.__init__", false]], "__init__() (nltk.parse.chart.cachedtopdownpredictrule method)": [[162, "nltk.parse.chart.CachedTopDownPredictRule.__init__", false]], "__init__() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.__init__", false]], "__init__() (nltk.parse.chart.chartparser method)": [[162, "nltk.parse.chart.ChartParser.__init__", false]], "__init__() (nltk.parse.chart.edgei method)": [[162, "nltk.parse.chart.EdgeI.__init__", false]], "__init__() (nltk.parse.chart.leafedge method)": [[162, "nltk.parse.chart.LeafEdge.__init__", false]], "__init__() (nltk.parse.chart.leftcornerchartparser method)": [[162, "nltk.parse.chart.LeftCornerChartParser.__init__", false]], "__init__() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.__init__", false]], "__init__() (nltk.parse.chart.topdownchartparser method)": [[162, "nltk.parse.chart.TopDownChartParser.__init__", false]], "__init__() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.__init__", false]], "__init__() (nltk.parse.corenlp.corenlpserver method)": [[163, "nltk.parse.corenlp.CoreNLPServer.__init__", false]], "__init__() (nltk.parse.corenlp.genericcorenlpparser method)": [[163, "nltk.parse.corenlp.GenericCoreNLPParser.__init__", false]], "__init__() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.__init__", false]], "__init__() (nltk.parse.earleychart.earleychartparser method)": [[165, "nltk.parse.earleychart.EarleyChartParser.__init__", false]], "__init__() (nltk.parse.earleychart.featureearleychartparser method)": [[165, "nltk.parse.earleychart.FeatureEarleyChartParser.__init__", false]], "__init__() (nltk.parse.earleychart.featureincrementalbottomupchartparser method)": [[165, "nltk.parse.earleychart.FeatureIncrementalBottomUpChartParser.__init__", false]], "__init__() (nltk.parse.earleychart.featureincrementalbottomupleftcornerchartparser method)": [[165, "nltk.parse.earleychart.FeatureIncrementalBottomUpLeftCornerChartParser.__init__", false]], "__init__() (nltk.parse.earleychart.featureincrementalchartparser method)": [[165, "nltk.parse.earleychart.FeatureIncrementalChartParser.__init__", false]], "__init__() (nltk.parse.earleychart.featureincrementaltopdownchartparser method)": [[165, "nltk.parse.earleychart.FeatureIncrementalTopDownChartParser.__init__", false]], "__init__() (nltk.parse.earleychart.incrementalbottomupchartparser method)": [[165, "nltk.parse.earleychart.IncrementalBottomUpChartParser.__init__", false]], "__init__() (nltk.parse.earleychart.incrementalbottomupleftcornerchartparser method)": [[165, "nltk.parse.earleychart.IncrementalBottomUpLeftCornerChartParser.__init__", false]], "__init__() (nltk.parse.earleychart.incrementalchartparser method)": [[165, "nltk.parse.earleychart.IncrementalChartParser.__init__", false]], "__init__() (nltk.parse.earleychart.incrementalleftcornerchartparser method)": [[165, "nltk.parse.earleychart.IncrementalLeftCornerChartParser.__init__", false]], "__init__() (nltk.parse.earleychart.incrementaltopdownchartparser method)": [[165, "nltk.parse.earleychart.IncrementalTopDownChartParser.__init__", false]], "__init__() (nltk.parse.evaluate.dependencyevaluator method)": [[166, "nltk.parse.evaluate.DependencyEvaluator.__init__", false]], "__init__() (nltk.parse.featurechart.featurebottomupchartparser method)": [[167, "nltk.parse.featurechart.FeatureBottomUpChartParser.__init__", false]], "__init__() (nltk.parse.featurechart.featurebottomupleftcornerchartparser method)": [[167, "nltk.parse.featurechart.FeatureBottomUpLeftCornerChartParser.__init__", false]], "__init__() (nltk.parse.featurechart.featurechartparser method)": [[167, "nltk.parse.featurechart.FeatureChartParser.__init__", false]], "__init__() (nltk.parse.featurechart.featuretopdownchartparser method)": [[167, "nltk.parse.featurechart.FeatureTopDownChartParser.__init__", false]], "__init__() (nltk.parse.featurechart.featuretreeedge method)": [[167, "nltk.parse.featurechart.FeatureTreeEdge.__init__", false]], "__init__() (nltk.parse.featurechart.instantiatevarschart method)": [[167, "nltk.parse.featurechart.InstantiateVarsChart.__init__", false]], "__init__() (nltk.parse.malt.maltparser method)": [[169, "nltk.parse.malt.MaltParser.__init__", false]], "__init__() (nltk.parse.nonprojectivedependencyparser.dependencyscoreri method)": [[170, "nltk.parse.nonprojectivedependencyparser.DependencyScorerI.__init__", false]], "__init__() (nltk.parse.nonprojectivedependencyparser.naivebayesdependencyscorer method)": [[170, "nltk.parse.nonprojectivedependencyparser.NaiveBayesDependencyScorer.__init__", false]], "__init__() (nltk.parse.nonprojectivedependencyparser.nonprojectivedependencyparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.NonprojectiveDependencyParser.__init__", false]], "__init__() (nltk.parse.nonprojectivedependencyparser.probabilisticnonprojectiveparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser.__init__", false]], "__init__() (nltk.parse.pchart.bottomupprobabilisticchartparser method)": [[171, "nltk.parse.pchart.BottomUpProbabilisticChartParser.__init__", false]], "__init__() (nltk.parse.pchart.probabilistictreeedge method)": [[171, "nltk.parse.pchart.ProbabilisticTreeEdge.__init__", false]], "__init__() (nltk.parse.projectivedependencyparser.chartcell method)": [[172, "nltk.parse.projectivedependencyparser.ChartCell.__init__", false]], "__init__() (nltk.parse.projectivedependencyparser.dependencyspan method)": [[172, "nltk.parse.projectivedependencyparser.DependencySpan.__init__", false]], "__init__() (nltk.parse.projectivedependencyparser.probabilisticprojectivedependencyparser method)": [[172, "nltk.parse.projectivedependencyparser.ProbabilisticProjectiveDependencyParser.__init__", false]], "__init__() (nltk.parse.projectivedependencyparser.projectivedependencyparser method)": [[172, "nltk.parse.projectivedependencyparser.ProjectiveDependencyParser.__init__", false]], "__init__() (nltk.parse.recursivedescent.recursivedescentparser method)": [[173, "nltk.parse.recursivedescent.RecursiveDescentParser.__init__", false]], "__init__() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.__init__", false]], "__init__() (nltk.parse.shiftreduce.shiftreduceparser method)": [[174, "nltk.parse.shiftreduce.ShiftReduceParser.__init__", false]], "__init__() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.__init__", false]], "__init__() (nltk.parse.stanford.genericstanfordparser method)": [[175, "nltk.parse.stanford.GenericStanfordParser.__init__", false]], "__init__() (nltk.parse.stanford.stanforddependencyparser method)": [[175, "nltk.parse.stanford.StanfordDependencyParser.__init__", false]], "__init__() (nltk.parse.stanford.stanfordneuraldependencyparser method)": [[175, "nltk.parse.stanford.StanfordNeuralDependencyParser.__init__", false]], "__init__() (nltk.parse.stanford.stanfordparser method)": [[175, "nltk.parse.stanford.StanfordParser.__init__", false]], "__init__() (nltk.parse.transitionparser.configuration method)": [[176, "nltk.parse.transitionparser.Configuration.__init__", false]], "__init__() (nltk.parse.transitionparser.transition method)": [[176, "nltk.parse.transitionparser.Transition.__init__", false]], "__init__() (nltk.parse.transitionparser.transitionparser method)": [[176, "nltk.parse.transitionparser.TransitionParser.__init__", false]], "__init__() (nltk.parse.util.testgrammar method)": [[177, "nltk.parse.util.TestGrammar.__init__", false]], "__init__() (nltk.parse.viterbi.viterbiparser method)": [[178, "nltk.parse.viterbi.ViterbiParser.__init__", false]], "__init__() (nltk.probability.conditionalfreqdist method)": [[179, "nltk.probability.ConditionalFreqDist.__init__", false]], "__init__() (nltk.probability.conditionalprobdist method)": [[179, "nltk.probability.ConditionalProbDist.__init__", false]], "__init__() (nltk.probability.conditionalprobdisti method)": [[179, "nltk.probability.ConditionalProbDistI.__init__", false]], "__init__() (nltk.probability.crossvalidationprobdist method)": [[179, "nltk.probability.CrossValidationProbDist.__init__", false]], "__init__() (nltk.probability.dictionaryconditionalprobdist method)": [[179, "nltk.probability.DictionaryConditionalProbDist.__init__", false]], "__init__() (nltk.probability.dictionaryprobdist method)": [[179, "nltk.probability.DictionaryProbDist.__init__", false]], "__init__() (nltk.probability.eleprobdist method)": [[179, "nltk.probability.ELEProbDist.__init__", false]], "__init__() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.__init__", false]], "__init__() (nltk.probability.heldoutprobdist method)": [[179, "nltk.probability.HeldoutProbDist.__init__", false]], "__init__() (nltk.probability.kneserneyprobdist method)": [[179, "nltk.probability.KneserNeyProbDist.__init__", false]], "__init__() (nltk.probability.laplaceprobdist method)": [[179, "nltk.probability.LaplaceProbDist.__init__", false]], "__init__() (nltk.probability.lidstoneprobdist method)": [[179, "nltk.probability.LidstoneProbDist.__init__", false]], "__init__() (nltk.probability.mleprobdist method)": [[179, "nltk.probability.MLEProbDist.__init__", false]], "__init__() (nltk.probability.mutableprobdist method)": [[179, "nltk.probability.MutableProbDist.__init__", false]], "__init__() (nltk.probability.probabilisticmixin method)": [[179, "nltk.probability.ProbabilisticMixIn.__init__", false]], "__init__() (nltk.probability.probdisti method)": [[179, "nltk.probability.ProbDistI.__init__", false]], "__init__() (nltk.probability.simplegoodturingprobdist method)": [[179, "nltk.probability.SimpleGoodTuringProbDist.__init__", false]], "__init__() (nltk.probability.uniformprobdist method)": [[179, "nltk.probability.UniformProbDist.__init__", false]], "__init__() (nltk.probability.wittenbellprobdist method)": [[179, "nltk.probability.WittenBellProbDist.__init__", false]], "__init__() (nltk.sem.boxer.boxer method)": [[181, "nltk.sem.boxer.Boxer.__init__", false]], "__init__() (nltk.sem.boxer.boxercard method)": [[181, "nltk.sem.boxer.BoxerCard.__init__", false]], "__init__() (nltk.sem.boxer.boxerdrs method)": [[181, "nltk.sem.boxer.BoxerDrs.__init__", false]], "__init__() (nltk.sem.boxer.boxerdrsparser method)": [[181, "nltk.sem.boxer.BoxerDrsParser.__init__", false]], "__init__() (nltk.sem.boxer.boxereq method)": [[181, "nltk.sem.boxer.BoxerEq.__init__", false]], "__init__() (nltk.sem.boxer.boxerindexed method)": [[181, "nltk.sem.boxer.BoxerIndexed.__init__", false]], "__init__() (nltk.sem.boxer.boxernamed method)": [[181, "nltk.sem.boxer.BoxerNamed.__init__", false]], "__init__() (nltk.sem.boxer.boxernot method)": [[181, "nltk.sem.boxer.BoxerNot.__init__", false]], "__init__() (nltk.sem.boxer.boxeror method)": [[181, "nltk.sem.boxer.BoxerOr.__init__", false]], "__init__() (nltk.sem.boxer.boxeroutputdrsparser method)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser.__init__", false]], "__init__() (nltk.sem.boxer.boxerpred method)": [[181, "nltk.sem.boxer.BoxerPred.__init__", false]], "__init__() (nltk.sem.boxer.boxerprop method)": [[181, "nltk.sem.boxer.BoxerProp.__init__", false]], "__init__() (nltk.sem.boxer.boxerrel method)": [[181, "nltk.sem.boxer.BoxerRel.__init__", false]], "__init__() (nltk.sem.boxer.boxerwhq method)": [[181, "nltk.sem.boxer.BoxerWhq.__init__", false]], "__init__() (nltk.sem.boxer.nltkdrtboxerdrsinterpreter method)": [[181, "nltk.sem.boxer.NltkDrtBoxerDrsInterpreter.__init__", false]], "__init__() (nltk.sem.chat80.concept method)": [[182, "nltk.sem.chat80.Concept.__init__", false]], "__init__() (nltk.sem.cooper_storage.cooperstore method)": [[183, "nltk.sem.cooper_storage.CooperStore.__init__", false]], "__init__() (nltk.sem.drt.drs method)": [[184, "nltk.sem.drt.DRS.__init__", false]], "__init__() (nltk.sem.drt.drsdrawer method)": [[184, "nltk.sem.drt.DrsDrawer.__init__", false]], "__init__() (nltk.sem.drt.drtconcatenation method)": [[184, "nltk.sem.drt.DrtConcatenation.__init__", false]], "__init__() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.__init__", false]], "__init__() (nltk.sem.drt.drtproposition method)": [[184, "nltk.sem.drt.DrtProposition.__init__", false]], "__init__() (nltk.sem.drt_glue_demo.drswidget method)": [[185, "nltk.sem.drt_glue_demo.DrsWidget.__init__", false]], "__init__() (nltk.sem.drt_glue_demo.drtgluedemo method)": [[185, "nltk.sem.drt_glue_demo.DrtGlueDemo.__init__", false]], "__init__() (nltk.sem.evaluate.assignment method)": [[186, "nltk.sem.evaluate.Assignment.__init__", false]], "__init__() (nltk.sem.evaluate.model method)": [[186, "nltk.sem.evaluate.Model.__init__", false]], "__init__() (nltk.sem.evaluate.valuation method)": [[186, "nltk.sem.evaluate.Valuation.__init__", false]], "__init__() (nltk.sem.glue.drtglue method)": [[187, "nltk.sem.glue.DrtGlue.__init__", false]], "__init__() (nltk.sem.glue.drtglueformula method)": [[187, "nltk.sem.glue.DrtGlueFormula.__init__", false]], "__init__() (nltk.sem.glue.glue method)": [[187, "nltk.sem.glue.Glue.__init__", false]], "__init__() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.__init__", false]], "__init__() (nltk.sem.glue.glueformula method)": [[187, "nltk.sem.glue.GlueFormula.__init__", false]], "__init__() (nltk.sem.hole.constraint method)": [[188, "nltk.sem.hole.Constraint.__init__", false]], "__init__() (nltk.sem.hole.holesemantics method)": [[188, "nltk.sem.hole.HoleSemantics.__init__", false]], "__init__() (nltk.sem.linearlogic.applicationexpression method)": [[190, "nltk.sem.linearlogic.ApplicationExpression.__init__", false]], "__init__() (nltk.sem.linearlogic.atomicexpression method)": [[190, "nltk.sem.linearlogic.AtomicExpression.__init__", false]], "__init__() (nltk.sem.linearlogic.bindingdict method)": [[190, "nltk.sem.linearlogic.BindingDict.__init__", false]], "__init__() (nltk.sem.linearlogic.impexpression method)": [[190, "nltk.sem.linearlogic.ImpExpression.__init__", false]], "__init__() (nltk.sem.linearlogic.linearlogicparser method)": [[190, "nltk.sem.linearlogic.LinearLogicParser.__init__", false]], "__init__() (nltk.sem.linearlogic.unificationexception method)": [[190, "nltk.sem.linearlogic.UnificationException.__init__", false]], "__init__() (nltk.sem.logic.abstractvariableexpression method)": [[191, "nltk.sem.logic.AbstractVariableExpression.__init__", false]], "__init__() (nltk.sem.logic.anytype method)": [[191, "nltk.sem.logic.AnyType.__init__", false]], "__init__() (nltk.sem.logic.applicationexpression method)": [[191, "nltk.sem.logic.ApplicationExpression.__init__", false]], "__init__() (nltk.sem.logic.binaryexpression method)": [[191, "nltk.sem.logic.BinaryExpression.__init__", false]], "__init__() (nltk.sem.logic.complextype method)": [[191, "nltk.sem.logic.ComplexType.__init__", false]], "__init__() (nltk.sem.logic.expectedmoretokensexception method)": [[191, "nltk.sem.logic.ExpectedMoreTokensException.__init__", false]], "__init__() (nltk.sem.logic.illegaltypeexception method)": [[191, "nltk.sem.logic.IllegalTypeException.__init__", false]], "__init__() (nltk.sem.logic.inconsistenttypehierarchyexception method)": [[191, "nltk.sem.logic.InconsistentTypeHierarchyException.__init__", false]], "__init__() (nltk.sem.logic.logicalexpressionexception method)": [[191, "nltk.sem.logic.LogicalExpressionException.__init__", false]], "__init__() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.__init__", false]], "__init__() (nltk.sem.logic.negatedexpression method)": [[191, "nltk.sem.logic.NegatedExpression.__init__", false]], "__init__() (nltk.sem.logic.typeexception method)": [[191, "nltk.sem.logic.TypeException.__init__", false]], "__init__() (nltk.sem.logic.typeresolutionexception method)": [[191, "nltk.sem.logic.TypeResolutionException.__init__", false]], "__init__() (nltk.sem.logic.unexpectedtokenexception method)": [[191, "nltk.sem.logic.UnexpectedTokenException.__init__", false]], "__init__() (nltk.sem.logic.variable method)": [[191, "nltk.sem.logic.Variable.__init__", false]], "__init__() (nltk.sem.logic.variablebinderexpression method)": [[191, "nltk.sem.logic.VariableBinderExpression.__init__", false]], "__init__() (nltk.sentiment.sentiment_analyzer.sentimentanalyzer method)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer.__init__", false]], "__init__() (nltk.sentiment.vader.sentimentintensityanalyzer method)": [[198, "nltk.sentiment.vader.SentimentIntensityAnalyzer.__init__", false]], "__init__() (nltk.sentiment.vader.sentitext method)": [[198, "nltk.sentiment.vader.SentiText.__init__", false]], "__init__() (nltk.sentiment.vader.vaderconstants method)": [[198, "nltk.sentiment.vader.VaderConstants.__init__", false]], "__init__() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.__init__", false]], "__init__() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.__init__", false]], "__init__() (nltk.stem.cistem.cistem method)": [[203, "nltk.stem.cistem.Cistem.__init__", false]], "__init__() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.__init__", false]], "__init__() (nltk.stem.lancaster.lancasterstemmer method)": [[205, "nltk.stem.lancaster.LancasterStemmer.__init__", false]], "__init__() (nltk.stem.porter.porterstemmer method)": [[206, "nltk.stem.porter.PorterStemmer.__init__", false]], "__init__() (nltk.stem.regexp.regexpstemmer method)": [[207, "nltk.stem.regexp.RegexpStemmer.__init__", false]], "__init__() (nltk.stem.rslp.rslpstemmer method)": [[208, "nltk.stem.rslp.RSLPStemmer.__init__", false]], "__init__() (nltk.stem.snowball.porterstemmer method)": [[209, "nltk.stem.snowball.PorterStemmer.__init__", false]], "__init__() (nltk.stem.snowball.snowballstemmer method)": [[209, "nltk.stem.snowball.SnowballStemmer.__init__", false]], "__init__() (nltk.tag.brill.brilltagger method)": [[215, "nltk.tag.brill.BrillTagger.__init__", false]], "__init__() (nltk.tag.brill_trainer.brilltaggertrainer method)": [[216, "nltk.tag.brill_trainer.BrillTaggerTrainer.__init__", false]], "__init__() (nltk.tag.crf.crftagger method)": [[217, "nltk.tag.crf.CRFTagger.__init__", false]], "__init__() (nltk.tag.hmm.hiddenmarkovmodeltagger method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.__init__", false]], "__init__() (nltk.tag.hmm.hiddenmarkovmodeltrainer method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTrainer.__init__", false]], "__init__() (nltk.tag.hunpos.hunpostagger method)": [[219, "nltk.tag.hunpos.HunposTagger.__init__", false]], "__init__() (nltk.tag.perceptron.averagedperceptron method)": [[221, "nltk.tag.perceptron.AveragedPerceptron.__init__", false]], "__init__() (nltk.tag.perceptron.perceptrontagger method)": [[221, "nltk.tag.perceptron.PerceptronTagger.__init__", false]], "__init__() (nltk.tag.senna.sennachunktagger method)": [[222, "nltk.tag.senna.SennaChunkTagger.__init__", false]], "__init__() (nltk.tag.senna.sennanertagger method)": [[222, "nltk.tag.senna.SennaNERTagger.__init__", false]], "__init__() (nltk.tag.senna.sennatagger method)": [[222, "nltk.tag.senna.SennaTagger.__init__", false]], "__init__() (nltk.tag.sequential.affixtagger method)": [[223, "nltk.tag.sequential.AffixTagger.__init__", false]], "__init__() (nltk.tag.sequential.bigramtagger method)": [[223, "nltk.tag.sequential.BigramTagger.__init__", false]], "__init__() (nltk.tag.sequential.classifierbasedtagger method)": [[223, "nltk.tag.sequential.ClassifierBasedTagger.__init__", false]], "__init__() (nltk.tag.sequential.contexttagger method)": [[223, "nltk.tag.sequential.ContextTagger.__init__", false]], "__init__() (nltk.tag.sequential.defaulttagger method)": [[223, "nltk.tag.sequential.DefaultTagger.__init__", false]], "__init__() (nltk.tag.sequential.ngramtagger method)": [[223, "nltk.tag.sequential.NgramTagger.__init__", false]], "__init__() (nltk.tag.sequential.regexptagger method)": [[223, "nltk.tag.sequential.RegexpTagger.__init__", false]], "__init__() (nltk.tag.sequential.sequentialbackofftagger method)": [[223, "nltk.tag.sequential.SequentialBackoffTagger.__init__", false]], "__init__() (nltk.tag.sequential.trigramtagger method)": [[223, "nltk.tag.sequential.TrigramTagger.__init__", false]], "__init__() (nltk.tag.sequential.unigramtagger method)": [[223, "nltk.tag.sequential.UnigramTagger.__init__", false]], "__init__() (nltk.tag.stanford.stanfordnertagger method)": [[224, "nltk.tag.stanford.StanfordNERTagger.__init__", false]], "__init__() (nltk.tag.stanford.stanfordpostagger method)": [[224, "nltk.tag.stanford.StanfordPOSTagger.__init__", false]], "__init__() (nltk.tag.stanford.stanfordtagger method)": [[224, "nltk.tag.stanford.StanfordTagger.__init__", false]], "__init__() (nltk.tag.tnt.tnt method)": [[225, "nltk.tag.tnt.TnT.__init__", false]], "__init__() (nltk.tbl.feature.feature method)": [[231, "nltk.tbl.feature.Feature.__init__", false]], "__init__() (nltk.tbl.rule.rule method)": [[232, "nltk.tbl.rule.Rule.__init__", false]], "__init__() (nltk.tbl.rule.tagrule method)": [[232, "nltk.tbl.rule.TagRule.__init__", false]], "__init__() (nltk.tbl.template.template method)": [[233, "nltk.tbl.template.Template.__init__", false]], "__init__() (nltk.text.concordanceindex method)": [[234, "nltk.text.ConcordanceIndex.__init__", false]], "__init__() (nltk.text.contextindex method)": [[234, "nltk.text.ContextIndex.__init__", false]], "__init__() (nltk.text.text method)": [[234, "nltk.text.Text.__init__", false]], "__init__() (nltk.text.textcollection method)": [[234, "nltk.text.TextCollection.__init__", false]], "__init__() (nltk.text.tokensearcher method)": [[234, "nltk.text.TokenSearcher.__init__", false]], "__init__() (nltk.tokenize.casual.tweettokenizer method)": [[238, "nltk.tokenize.casual.TweetTokenizer.__init__", false]], "__init__() (nltk.tokenize.legality_principle.legalitysyllabletokenizer method)": [[240, "nltk.tokenize.legality_principle.LegalitySyllableTokenizer.__init__", false]], "__init__() (nltk.tokenize.mwe.mwetokenizer method)": [[241, "nltk.tokenize.mwe.MWETokenizer.__init__", false]], "__init__() (nltk.tokenize.punkt.punktbaseclass method)": [[243, "nltk.tokenize.punkt.PunktBaseClass.__init__", false]], "__init__() (nltk.tokenize.punkt.punktparameters method)": [[243, "nltk.tokenize.punkt.PunktParameters.__init__", false]], "__init__() (nltk.tokenize.punkt.punktsentencetokenizer method)": [[243, "nltk.tokenize.punkt.PunktSentenceTokenizer.__init__", false]], "__init__() (nltk.tokenize.punkt.punkttoken method)": [[243, "nltk.tokenize.punkt.PunktToken.__init__", false]], "__init__() (nltk.tokenize.punkt.punkttokenizer method)": [[243, "nltk.tokenize.punkt.PunktTokenizer.__init__", false]], "__init__() (nltk.tokenize.punkt.punkttrainer method)": [[243, "nltk.tokenize.punkt.PunktTrainer.__init__", false]], "__init__() (nltk.tokenize.regexp.blanklinetokenizer method)": [[244, "nltk.tokenize.regexp.BlanklineTokenizer.__init__", false]], "__init__() (nltk.tokenize.regexp.regexptokenizer method)": [[244, "nltk.tokenize.regexp.RegexpTokenizer.__init__", false]], "__init__() (nltk.tokenize.regexp.whitespacetokenizer method)": [[244, "nltk.tokenize.regexp.WhitespaceTokenizer.__init__", false]], "__init__() (nltk.tokenize.regexp.wordpuncttokenizer method)": [[244, "nltk.tokenize.regexp.WordPunctTokenizer.__init__", false]], "__init__() (nltk.tokenize.repp.repptokenizer method)": [[245, "nltk.tokenize.repp.ReppTokenizer.__init__", false]], "__init__() (nltk.tokenize.sexpr.sexprtokenizer method)": [[246, "nltk.tokenize.sexpr.SExprTokenizer.__init__", false]], "__init__() (nltk.tokenize.simple.linetokenizer method)": [[247, "nltk.tokenize.simple.LineTokenizer.__init__", false]], "__init__() (nltk.tokenize.sonority_sequencing.syllabletokenizer method)": [[248, "nltk.tokenize.sonority_sequencing.SyllableTokenizer.__init__", false]], "__init__() (nltk.tokenize.stanford.stanfordtokenizer method)": [[249, "nltk.tokenize.stanford.StanfordTokenizer.__init__", false]], "__init__() (nltk.tokenize.stanford_segmenter.stanfordsegmenter method)": [[250, "nltk.tokenize.stanford_segmenter.StanfordSegmenter.__init__", false]], "__init__() (nltk.tokenize.texttiling.texttilingtokenizer method)": [[251, "nltk.tokenize.texttiling.TextTilingTokenizer.__init__", false]], "__init__() (nltk.tokenize.texttiling.tokensequence method)": [[251, "nltk.tokenize.texttiling.TokenSequence.__init__", false]], "__init__() (nltk.tokenize.texttiling.tokentablefield method)": [[251, "nltk.tokenize.texttiling.TokenTableField.__init__", false]], "__init__() (nltk.toolbox.standardformat method)": [[255, "nltk.toolbox.StandardFormat.__init__", false]], "__init__() (nltk.toolbox.toolboxsettings method)": [[255, "nltk.toolbox.ToolboxSettings.__init__", false]], "__init__() (nltk.translate.api.alignedsent method)": [[257, "nltk.translate.api.AlignedSent.__init__", false]], "__init__() (nltk.translate.api.phrasetable method)": [[257, "nltk.translate.api.PhraseTable.__init__", false]], "__init__() (nltk.translate.bleu_score.smoothingfunction method)": [[258, "nltk.translate.bleu_score.SmoothingFunction.__init__", false]], "__init__() (nltk.translate.ibm1.ibmmodel1 method)": [[263, "nltk.translate.ibm1.IBMModel1.__init__", false]], "__init__() (nltk.translate.ibm2.ibmmodel2 method)": [[264, "nltk.translate.ibm2.IBMModel2.__init__", false]], "__init__() (nltk.translate.ibm2.model2counts method)": [[264, "nltk.translate.ibm2.Model2Counts.__init__", false]], "__init__() (nltk.translate.ibm3.ibmmodel3 method)": [[265, "nltk.translate.ibm3.IBMModel3.__init__", false]], "__init__() (nltk.translate.ibm3.model3counts method)": [[265, "nltk.translate.ibm3.Model3Counts.__init__", false]], "__init__() (nltk.translate.ibm4.ibmmodel4 method)": [[266, "nltk.translate.ibm4.IBMModel4.__init__", false]], "__init__() (nltk.translate.ibm4.model4counts method)": [[266, "nltk.translate.ibm4.Model4Counts.__init__", false]], "__init__() (nltk.translate.ibm5.ibmmodel5 method)": [[267, "nltk.translate.ibm5.IBMModel5.__init__", false]], "__init__() (nltk.translate.ibm5.model5counts method)": [[267, "nltk.translate.ibm5.Model5Counts.__init__", false]], "__init__() (nltk.translate.ibm5.slots method)": [[267, "nltk.translate.ibm5.Slots.__init__", false]], "__init__() (nltk.translate.ibm_model.alignmentinfo method)": [[268, "nltk.translate.ibm_model.AlignmentInfo.__init__", false]], "__init__() (nltk.translate.ibm_model.counts method)": [[268, "nltk.translate.ibm_model.Counts.__init__", false]], "__init__() (nltk.translate.ibm_model.ibmmodel method)": [[268, "nltk.translate.ibm_model.IBMModel.__init__", false]], "__init__() (nltk.translate.stack_decoder.stackdecoder method)": [[274, "nltk.translate.stack_decoder.StackDecoder.__init__", false]], "__init__() (nltk.tree.immutable.immutableprobabilistictree method)": [[276, "nltk.tree.immutable.ImmutableProbabilisticTree.__init__", false]], "__init__() (nltk.tree.immutable.immutabletree method)": [[276, "nltk.tree.immutable.ImmutableTree.__init__", false]], "__init__() (nltk.tree.immutableprobabilistictree method)": [[275, "nltk.tree.ImmutableProbabilisticTree.__init__", false]], "__init__() (nltk.tree.immutabletree method)": [[275, "nltk.tree.ImmutableTree.__init__", false]], "__init__() (nltk.tree.multiparentedtree method)": [[275, "nltk.tree.MultiParentedTree.__init__", false]], "__init__() (nltk.tree.parented.multiparentedtree method)": [[277, "nltk.tree.parented.MultiParentedTree.__init__", false]], "__init__() (nltk.tree.parented.parentedtree method)": [[277, "nltk.tree.parented.ParentedTree.__init__", false]], "__init__() (nltk.tree.parentedtree method)": [[275, "nltk.tree.ParentedTree.__init__", false]], "__init__() (nltk.tree.prettyprinter.treeprettyprinter method)": [[279, "nltk.tree.prettyprinter.TreePrettyPrinter.__init__", false]], "__init__() (nltk.tree.probabilistic.probabilistictree method)": [[280, "nltk.tree.probabilistic.ProbabilisticTree.__init__", false]], "__init__() (nltk.tree.probabilistictree method)": [[275, "nltk.tree.ProbabilisticTree.__init__", false]], "__init__() (nltk.tree.tree method)": [[275, "nltk.tree.Tree.__init__", false]], "__init__() (nltk.tree.tree.tree method)": [[282, "nltk.tree.tree.Tree.__init__", false]], "__init__() (nltk.tree.treeprettyprinter method)": [[275, "nltk.tree.TreePrettyPrinter.__init__", false]], "__init__() (nltk.twitter.api.basictweethandler method)": [[286, "nltk.twitter.api.BasicTweetHandler.__init__", false]], "__init__() (nltk.twitter.api.tweethandleri method)": [[286, "nltk.twitter.api.TweetHandlerI.__init__", false]], "__init__() (nltk.twitter.twitterclient.query method)": [[289, "nltk.twitter.twitterclient.Query.__init__", false]], "__init__() (nltk.twitter.twitterclient.streamer method)": [[289, "nltk.twitter.twitterclient.Streamer.__init__", false]], "__init__() (nltk.twitter.twitterclient.tweetwriter method)": [[289, "nltk.twitter.twitterclient.TweetWriter.__init__", false]], "__init__() (nltk.twitter.twitterclient.twitter method)": [[289, "nltk.twitter.twitterclient.Twitter.__init__", false]], "__init__() (nltk.twitter.util.authenticate method)": [[290, "nltk.twitter.util.Authenticate.__init__", false]], "__init__() (nltk.util.index method)": [[291, "nltk.util.Index.__init__", false]], "__new__() (nltk.collections.lazysubsequence static method)": [[52, "nltk.collections.LazySubsequence.__new__", false]], "__new__() (nltk.corpus.reader.markdown.image static method)": [[78, "nltk.corpus.reader.markdown.Image.__new__", false]], "__new__() (nltk.corpus.reader.markdown.link static method)": [[78, "nltk.corpus.reader.markdown.Link.__new__", false]], "__new__() (nltk.corpus.reader.markdown.list static method)": [[78, "nltk.corpus.reader.markdown.List.__new__", false]], "__new__() (nltk.corpus.reader.panlex_swadesh.panlexlanguage static method)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexLanguage.__new__", false]], "__new__() (nltk.featstruct.featstruct static method)": [[120, "nltk.featstruct.FeatStruct.__new__", false]], "__new__() (nltk.internals.deprecated static method)": [[131, "nltk.internals.Deprecated.__new__", false]], "__new__() (nltk.internals.elementwrapper static method)": [[131, "nltk.internals.ElementWrapper.__new__", false]], "__new__() (nltk.translate.api.alignment static method)": [[257, "nltk.translate.api.Alignment.__new__", false]], "__new__() (nltk.translate.api.phrasetableentry static method)": [[257, "nltk.translate.api.PhraseTableEntry.__new__", false]], "__new__() (nltk.translate.bleu_score.fraction static method)": [[258, "nltk.translate.bleu_score.Fraction.__new__", false]], "abbr (nltk.tokenize.punkt.punkttoken attribute)": [[243, "nltk.tokenize.punkt.PunktToken.abbr", false]], "abbrev (nltk.tokenize.punkt.punkttrainer attribute)": [[243, "nltk.tokenize.punkt.PunktTrainer.ABBREV", false]], "abbrev_backoff (nltk.tokenize.punkt.punkttrainer attribute)": [[243, "nltk.tokenize.punkt.PunktTrainer.ABBREV_BACKOFF", false]], "abbrev_types (nltk.tokenize.punkt.punktparameters attribute)": [[243, "nltk.tokenize.punkt.PunktParameters.abbrev_types", false]], "about() (nltk.downloader.downloadergui method)": [[113, "nltk.downloader.DownloaderGUI.about", false]], "about() (nltk.sem.drt_glue_demo.drtgluedemo method)": [[185, "nltk.sem.drt_glue_demo.DrtGlueDemo.about", false]], "absolutediscounting (class in nltk.lm.smoothing)": [[140, "nltk.lm.smoothing.AbsoluteDiscounting", false]], "absolutediscountinginterpolated (class in nltk.lm)": [[135, "nltk.lm.AbsoluteDiscountingInterpolated", false]], "absolutediscountinginterpolated (class in nltk.lm.models)": [[138, "nltk.lm.models.AbsoluteDiscountingInterpolated", false]], "abspath() (nltk.corpus.reader.api.corpusreader method)": [[59, "nltk.corpus.reader.api.CorpusReader.abspath", false]], "abspath() (nltk.corpus.reader.corpusreader method)": [[57, "nltk.corpus.reader.CorpusReader.abspath", false]], "abspaths() (nltk.corpus.reader.api.corpusreader method)": [[59, "nltk.corpus.reader.api.CorpusReader.abspaths", false]], "abspaths() (nltk.corpus.reader.corpusreader method)": [[57, "nltk.corpus.reader.CorpusReader.abspaths", false]], "abstractboxerdrs (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.AbstractBoxerDrs", false]], "abstractccgcategory (class in nltk.ccg.api)": [[13, "nltk.ccg.api.AbstractCCGCategory", false]], "abstractchartrule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.AbstractChartRule", false]], "abstractcontainerwidget (class in nltk.draw.util)": [[119, "nltk.draw.util.AbstractContainerWidget", false]], "abstractlazysequence (class in nltk.collections)": [[52, "nltk.collections.AbstractLazySequence", false]], "abstractvariableexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.AbstractVariableExpression", false]], "accuracy() (in module nltk.chunk.util)": [[29, "nltk.chunk.util.accuracy", false]], "accuracy() (in module nltk.classify.util)": [[43, "nltk.classify.util.accuracy", false]], "accuracy() (in module nltk.metrics.scores)": [[150, "nltk.metrics.scores.accuracy", false]], "accuracy() (nltk.chunk.api.chunkparseri method)": [[26, "nltk.chunk.api.ChunkParserI.accuracy", false]], "accuracy() (nltk.chunk.util.chunkscore method)": [[29, "nltk.chunk.util.ChunkScore.accuracy", false]], "accuracy() (nltk.tag.api.taggeri method)": [[214, "nltk.tag.api.TaggerI.accuracy", false]], "activate() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.activate", false]], "active (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.ACTIVE", false]], "acyclic_branches_depth_first() (in module nltk.util)": [[291, "nltk.util.acyclic_branches_depth_first", false]], "acyclic_breadth_first() (in module nltk.util)": [[291, "nltk.util.acyclic_breadth_first", false]], "acyclic_depth_first() (in module nltk.util)": [[291, "nltk.util.acyclic_depth_first", false]], "acyclic_dic2tree() (in module nltk.util)": [[291, "nltk.util.acyclic_dic2tree", false]], "acyclic_tree() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.acyclic_tree", false]], "add() (nltk.draw.util.mutableoptionmenu method)": [[119, "nltk.draw.util.MutableOptionMenu.add", false]], "add() (nltk.misc.minimalset.minimalset method)": [[156, "nltk.misc.minimalset.MinimalSet.add", false]], "add() (nltk.parse.projectivedependencyparser.chartcell method)": [[172, "nltk.parse.projectivedependencyparser.ChartCell.add", false]], "add() (nltk.sem.evaluate.assignment method)": [[186, "nltk.sem.evaluate.Assignment.add", false]], "add() (nltk.translate.api.phrasetable method)": [[257, "nltk.translate.api.PhraseTable.add", false]], "add_access_token() (in module nltk.twitter.util)": [[290, "nltk.twitter.util.add_access_token", false]], "add_arc() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.add_arc", false]], "add_assumptions() (nltk.inference.api.basetheoremtoolcommand method)": [[124, "nltk.inference.api.BaseTheoremToolCommand.add_assumptions", false]], "add_assumptions() (nltk.inference.api.theoremtoolcommand method)": [[124, "nltk.inference.api.TheoremToolCommand.add_assumptions", false]], "add_assumptions() (nltk.inference.api.theoremtoolcommanddecorator method)": [[124, "nltk.inference.api.TheoremToolCommandDecorator.add_assumptions", false]], "add_background() (nltk.inference.discourse.discoursetester method)": [[125, "nltk.inference.discourse.DiscourseTester.add_background", false]], "add_blank_lines() (in module nltk.toolbox)": [[255, "nltk.toolbox.add_blank_lines", false]], "add_callback() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.add_callback", false]], "add_child() (nltk.draw.util.scrollwatcherwidget method)": [[119, "nltk.draw.util.ScrollWatcherWidget.add_child", false]], "add_default_fields() (in module nltk.toolbox)": [[255, "nltk.toolbox.add_default_fields", false]], "add_exomw() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.add_exomw", false]], "add_exomw() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.add_exomw", false]], "add_feat_extractor() (nltk.sentiment.sentiment_analyzer.sentimentanalyzer method)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer.add_feat_extractor", false]], "add_line() (nltk.corpus.reader.reviews.review method)": [[91, "nltk.corpus.reader.reviews.Review.add_line", false]], "add_logs() (in module nltk.probability)": [[179, "nltk.probability.add_logs", false]], "add_missing_dependencies() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.add_missing_dependencies", false]], "add_mwe() (nltk.tokenize.mwe.mwetokenizer method)": [[241, "nltk.tokenize.mwe.MWETokenizer.add_mwe", false]], "add_node() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.add_node", false]], "add_omw() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.add_omw", false]], "add_omw() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.add_omw", false]], "add_ortho_context() (nltk.tokenize.punkt.punktparameters method)": [[243, "nltk.tokenize.punkt.PunktParameters.add_ortho_context", false]], "add_provs() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.add_provs", false]], "add_provs() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.add_provs", false]], "add_py3_data() (in module nltk.compat)": [[54, "nltk.compat.add_py3_data", false]], "add_root() (nltk.corpus.reader.nkjp.nkjpcorpusreader method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.add_root", false]], "add_root() (nltk.corpus.reader.nkjpcorpusreader method)": [[57, "nltk.corpus.reader.NKJPCorpusReader.add_root", false]], "add_sentence() (nltk.inference.discourse.discoursetester method)": [[125, "nltk.inference.discourse.DiscourseTester.add_sentence", false]], "add_widget() (nltk.draw.util.canvasframe method)": [[119, "nltk.draw.util.CanvasFrame.add_widget", false]], "adj (nltk.corpus.reader.wordnet.wordnetcorpusreader attribute)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.ADJ", false]], "adj (nltk.corpus.reader.wordnetcorpusreader attribute)": [[57, "nltk.corpus.reader.WordNetCorpusReader.ADJ", false]], "adj_sat (nltk.corpus.reader.wordnet.wordnetcorpusreader attribute)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.ADJ_SAT", false]], "adj_sat (nltk.corpus.reader.wordnetcorpusreader attribute)": [[57, "nltk.corpus.reader.WordNetCorpusReader.ADJ_SAT", false]], "adjective() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.adjective", false]], "adv (nltk.corpus.reader.wordnet.wordnetcorpusreader attribute)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.ADV", false]], "adv (nltk.corpus.reader.wordnetcorpusreader attribute)": [[57, "nltk.corpus.reader.WordNetCorpusReader.ADV", false]], "ae_kappa() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.Ae_kappa", false]], "affixtagger (class in nltk.tag.sequential)": [[223, "nltk.tag.sequential.AffixTagger", false]], "age() (nltk.corpus.reader.childes.childescorpusreader method)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.age", false]], "age() (nltk.corpus.reader.childescorpusreader method)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.age", false]], "agenda (class in nltk.inference.tableau)": [[130, "nltk.inference.tableau.Agenda", false]], "agr() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.agr", false]], "algorithms (nltk.classify.maxent.maxentclassifier attribute)": [[33, "nltk.classify.maxent.MaxentClassifier.ALGORITHMS", false]], "align() (in module nltk.metrics.aline)": [[145, "nltk.metrics.aline.align", false]], "align() (nltk.translate.ibm1.ibmmodel1 method)": [[263, "nltk.translate.ibm1.IBMModel1.align", false]], "align() (nltk.translate.ibm2.ibmmodel2 method)": [[264, "nltk.translate.ibm2.IBMModel2.align", false]], "align_all() (nltk.translate.ibm1.ibmmodel1 method)": [[263, "nltk.translate.ibm1.IBMModel1.align_all", false]], "align_all() (nltk.translate.ibm2.ibmmodel2 method)": [[264, "nltk.translate.ibm2.IBMModel2.align_all", false]], "align_blocks() (in module nltk.translate.gale_church)": [[260, "nltk.translate.gale_church.align_blocks", false]], "align_log_prob() (in module nltk.translate.gale_church)": [[260, "nltk.translate.gale_church.align_log_prob", false]], "align_texts() (in module nltk.translate.gale_church)": [[260, "nltk.translate.gale_church.align_texts", false]], "align_tokens() (in module nltk.tokenize.util)": [[254, "nltk.tokenize.util.align_tokens", false]], "align_words() (in module nltk.translate.meteor_score)": [[269, "nltk.translate.meteor_score.align_words", false]], "aligned_sents() (nltk.corpus.reader.aligned.alignedcorpusreader method)": [[58, "nltk.corpus.reader.aligned.AlignedCorpusReader.aligned_sents", false]], "aligned_sents() (nltk.corpus.reader.alignedcorpusreader method)": [[57, "nltk.corpus.reader.AlignedCorpusReader.aligned_sents", false]], "alignedcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.AlignedCorpusReader", false]], "alignedcorpusreader (class in nltk.corpus.reader.aligned)": [[58, "nltk.corpus.reader.aligned.AlignedCorpusReader", false]], "alignedsent (class in nltk.translate.api)": [[257, "nltk.translate.api.AlignedSent", false]], "alignedsentcorpusview (class in nltk.corpus.reader.aligned)": [[58, "nltk.corpus.reader.aligned.AlignedSentCorpusView", false]], "alignment (class in nltk.translate.api)": [[257, "nltk.translate.api.Alignment", false]], "alignment (nltk.translate.api.alignedsent property)": [[257, "nltk.translate.api.AlignedSent.alignment", false]], "alignment (nltk.translate.ibm_model.alignmentinfo attribute)": [[268, "nltk.translate.ibm_model.AlignmentInfo.alignment", false]], "alignment_error_rate() (in module nltk.translate.metrics)": [[270, "nltk.translate.metrics.alignment_error_rate", false]], "alignmentinfo (class in nltk.translate.ibm_model)": [[268, "nltk.translate.ibm_model.AlignmentInfo", false]], "all (in module nltk.twitter.twitter_demo)": [[288, "nltk.twitter.twitter_demo.ALL", false]], "all (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.ALL", false]], "all (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.ALL", false]], "all (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.ALL", false]], "all_eng_synsets() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.all_eng_synsets", false]], "all_eng_synsets() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.all_eng_synsets", false]], "all_lemma_names() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.all_lemma_names", false]], "all_lemma_names() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.all_lemma_names", false]], "all_list (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.ALL_LIST", false]], "all_omw_synsets() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.all_omw_synsets", false]], "all_omw_synsets() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.all_omw_synsets", false]], "all_senti_synsets() (nltk.corpus.reader.sentiwordnet.sentiwordnetcorpusreader method)": [[95, "nltk.corpus.reader.sentiwordnet.SentiWordNetCorpusReader.all_senti_synsets", false]], "all_senti_synsets() (nltk.corpus.reader.sentiwordnetcorpusreader method)": [[57, "nltk.corpus.reader.SentiWordNetCorpusReader.all_senti_synsets", false]], "all_synsets() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.all_synsets", false]], "all_synsets() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.all_synsets", false]], "all_words() (nltk.sentiment.sentiment_analyzer.sentimentanalyzer method)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer.all_words", false]], "allcap_differential() (nltk.sentiment.vader.sentitext method)": [[198, "nltk.sentiment.vader.SentiText.allcap_differential", false]], "allexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.AllExpression", false]], "alltemplates (nltk.tbl.template.template attribute)": [[233, "nltk.tbl.template.Template.ALLTEMPLATES", false]], "alpha() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.alpha", false]], "alpha_convert() (nltk.sem.drt.drtlambdaexpression method)": [[184, "nltk.sem.drt.DrtLambdaExpression.alpha_convert", false]], "alpha_convert() (nltk.sem.logic.variablebinderexpression method)": [[191, "nltk.sem.logic.VariableBinderExpression.alpha_convert", false]], "alpha_gamma() (nltk.lm.api.smoothing method)": [[136, "nltk.lm.api.Smoothing.alpha_gamma", false]], "alpha_gamma() (nltk.lm.smoothing.absolutediscounting method)": [[140, "nltk.lm.smoothing.AbsoluteDiscounting.alpha_gamma", false]], "alpha_gamma() (nltk.lm.smoothing.kneserney method)": [[140, "nltk.lm.smoothing.KneserNey.alpha_gamma", false]], "alpha_gamma() (nltk.lm.smoothing.wittenbell method)": [[140, "nltk.lm.smoothing.WittenBell.alpha_gamma", false]], "alpinocorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.AlpinoCorpusReader", false]], "alpinocorpusreader (class in nltk.corpus.reader.bracket_parse)": [[62, "nltk.corpus.reader.bracket_parse.AlpinoCorpusReader", false]], "ampercent (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.AMPERCENT", false]], "anaphoraresolutionexception": [[184, "nltk.sem.drt.AnaphoraResolutionException", false]], "ancestors() (in module nltk.tgrep)": [[235, "nltk.tgrep.ancestors", false]], "and (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.AND", false]], "and (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.AND", false]], "and (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.AND", false]], "and_list (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.AND_LIST", false]], "andexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.AndExpression", false]], "annotations() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.annotations", false]], "annotations() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.annotations", false]], "annotationtask (class in nltk.metrics.agreement)": [[144, "nltk.metrics.agreement.AnnotationTask", false]], "answer_key (nltk.inference.resolution.resolutionprover attribute)": [[129, "nltk.inference.resolution.ResolutionProver.ANSWER_KEY", false]], "antonyms() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.antonyms", false]], "anytype (class in nltk.sem.logic)": [[191, "nltk.sem.logic.AnyType", false]], "ao() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.Ao", false]], "api_call() (nltk.parse.corenlp.genericcorenlpparser method)": [[163, "nltk.parse.corenlp.GenericCoreNLPParser.api_call", false]], "app (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.APP", false]], "app() (in module nltk.app.chartparser_app)": [[2, "nltk.app.chartparser_app.app", false]], "app() (in module nltk.app.chunkparser_app)": [[3, "nltk.app.chunkparser_app.app", false]], "app() (in module nltk.app.collocations_app)": [[4, "nltk.app.collocations_app.app", false]], "app() (in module nltk.app.concordance_app)": [[5, "nltk.app.concordance_app.app", false]], "app() (in module nltk.app.nemo_app)": [[6, "nltk.app.nemo_app.app", false]], "app() (in module nltk.app.rdparser_app)": [[7, "nltk.app.rdparser_app.app", false]], "app() (in module nltk.app.srparser_app)": [[8, "nltk.app.srparser_app.app", false]], "app() (in module nltk.app.wordfreq_app)": [[9, "nltk.app.wordfreq_app.app", false]], "app() (in module nltk.app.wordnet_app)": [[10, "nltk.app.wordnet_app.app", false]], "append() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.append", false]], "append() (nltk.featstruct.featlist method)": [[120, "nltk.featstruct.FeatList.append", false]], "append() (nltk.tree.immutable.immutabletree method)": [[276, "nltk.tree.immutable.ImmutableTree.append", false]], "append() (nltk.tree.immutabletree method)": [[275, "nltk.tree.ImmutableTree.append", false]], "append_prop() (nltk.inference.nonmonotonic.predholder method)": [[127, "nltk.inference.nonmonotonic.PredHolder.append_prop", false]], "append_sig() (nltk.inference.nonmonotonic.predholder method)": [[127, "nltk.inference.nonmonotonic.PredHolder.append_sig", false]], "applicable_rules() (nltk.tbl.template.brilltemplatei method)": [[233, "nltk.tbl.template.BrillTemplateI.applicable_rules", false]], "applicable_rules() (nltk.tbl.template.template method)": [[233, "nltk.tbl.template.Template.applicable_rules", false]], "applicationexpression (class in nltk.sem.linearlogic)": [[190, "nltk.sem.linearlogic.ApplicationExpression", false]], "applicationexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.ApplicationExpression", false]], "applies() (nltk.tbl.rule.rule method)": [[232, "nltk.tbl.rule.Rule.applies", false]], "applies() (nltk.tbl.rule.tagrule method)": [[232, "nltk.tbl.rule.TagRule.applies", false]], "apply() (nltk.ccg.chart.backwardtyperaiserule method)": [[14, "nltk.ccg.chart.BackwardTypeRaiseRule.apply", false]], "apply() (nltk.ccg.chart.binarycombinatorrule method)": [[14, "nltk.ccg.chart.BinaryCombinatorRule.apply", false]], "apply() (nltk.ccg.chart.forwardtyperaiserule method)": [[14, "nltk.ccg.chart.ForwardTypeRaiseRule.apply", false]], "apply() (nltk.chunk.regexp.regexpchunkrule method)": [[28, "nltk.chunk.regexp.RegexpChunkRule.apply", false]], "apply() (nltk.parse.chart.abstractchartrule method)": [[162, "nltk.parse.chart.AbstractChartRule.apply", false]], "apply() (nltk.parse.chart.bottomuppredictcombinerule method)": [[162, "nltk.parse.chart.BottomUpPredictCombineRule.apply", false]], "apply() (nltk.parse.chart.bottomuppredictrule method)": [[162, "nltk.parse.chart.BottomUpPredictRule.apply", false]], "apply() (nltk.parse.chart.cachedtopdownpredictrule method)": [[162, "nltk.parse.chart.CachedTopDownPredictRule.apply", false]], "apply() (nltk.parse.chart.chartrulei method)": [[162, "nltk.parse.chart.ChartRuleI.apply", false]], "apply() (nltk.parse.chart.emptypredictrule method)": [[162, "nltk.parse.chart.EmptyPredictRule.apply", false]], "apply() (nltk.parse.chart.filteredbottomuppredictcombinerule method)": [[162, "nltk.parse.chart.FilteredBottomUpPredictCombineRule.apply", false]], "apply() (nltk.parse.chart.fundamentalrule method)": [[162, "nltk.parse.chart.FundamentalRule.apply", false]], "apply() (nltk.parse.chart.leafinitrule method)": [[162, "nltk.parse.chart.LeafInitRule.apply", false]], "apply() (nltk.parse.chart.singleedgefundamentalrule method)": [[162, "nltk.parse.chart.SingleEdgeFundamentalRule.apply", false]], "apply() (nltk.parse.chart.topdowninitrule method)": [[162, "nltk.parse.chart.TopDownInitRule.apply", false]], "apply() (nltk.parse.chart.topdownpredictrule method)": [[162, "nltk.parse.chart.TopDownPredictRule.apply", false]], "apply() (nltk.parse.earleychart.completerrule method)": [[165, "nltk.parse.earleychart.CompleterRule.apply", false]], "apply() (nltk.parse.earleychart.filteredcompletefundamentalrule method)": [[165, "nltk.parse.earleychart.FilteredCompleteFundamentalRule.apply", false]], "apply() (nltk.parse.earleychart.scannerrule method)": [[165, "nltk.parse.earleychart.ScannerRule.apply", false]], "apply() (nltk.parse.featurechart.featurebottomuppredictcombinerule method)": [[167, "nltk.parse.featurechart.FeatureBottomUpPredictCombineRule.apply", false]], "apply() (nltk.parse.featurechart.featurebottomuppredictrule method)": [[167, "nltk.parse.featurechart.FeatureBottomUpPredictRule.apply", false]], "apply() (nltk.parse.featurechart.featureemptypredictrule method)": [[167, "nltk.parse.featurechart.FeatureEmptyPredictRule.apply", false]], "apply() (nltk.parse.featurechart.featurefundamentalrule method)": [[167, "nltk.parse.featurechart.FeatureFundamentalRule.apply", false]], "apply() (nltk.parse.featurechart.featuretopdowninitrule method)": [[167, "nltk.parse.featurechart.FeatureTopDownInitRule.apply", false]], "apply() (nltk.parse.featurechart.featuretopdownpredictrule method)": [[167, "nltk.parse.featurechart.FeatureTopDownPredictRule.apply", false]], "apply() (nltk.parse.pchart.probabilisticbottomupinitrule method)": [[171, "nltk.parse.pchart.ProbabilisticBottomUpInitRule.apply", false]], "apply() (nltk.parse.pchart.probabilisticbottomuppredictrule method)": [[171, "nltk.parse.pchart.ProbabilisticBottomUpPredictRule.apply", false]], "apply() (nltk.parse.pchart.probabilisticfundamentalrule method)": [[171, "nltk.parse.pchart.ProbabilisticFundamentalRule.apply", false]], "apply() (nltk.parse.pchart.singleedgeprobabilisticfundamentalrule method)": [[171, "nltk.parse.pchart.SingleEdgeProbabilisticFundamentalRule.apply", false]], "apply() (nltk.tbl.rule.tagrule method)": [[232, "nltk.tbl.rule.TagRule.apply", false]], "apply_everywhere() (nltk.parse.chart.abstractchartrule method)": [[162, "nltk.parse.chart.AbstractChartRule.apply_everywhere", false]], "apply_everywhere() (nltk.parse.chart.chartrulei method)": [[162, "nltk.parse.chart.ChartRuleI.apply_everywhere", false]], "apply_features() (in module nltk.classify.util)": [[43, "nltk.classify.util.apply_features", false]], "apply_features() (nltk.sentiment.sentiment_analyzer.sentimentanalyzer method)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer.apply_features", false]], "apply_rule() (nltk.stem.rslp.rslpstemmer method)": [[208, "nltk.stem.rslp.RSLPStemmer.apply_rule", false]], "applyto() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.applyto", false]], "applyto() (nltk.sem.glue.glueformula method)": [[187, "nltk.sem.glue.GlueFormula.applyto", false]], "applyto() (nltk.sem.linearlogic.expression method)": [[190, "nltk.sem.linearlogic.Expression.applyto", false]], "applyto() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.applyto", false]], "approxrand() (in module nltk.metrics.scores)": [[150, "nltk.metrics.scores.approxrand", false]], "arabicstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.ArabicStemmer", false]], "arc_eager (nltk.parse.transitionparser.transitionparser attribute)": [[176, "nltk.parse.transitionparser.TransitionParser.ARC_EAGER", false]], "arc_standard (nltk.parse.transitionparser.transitionparser attribute)": [[176, "nltk.parse.transitionparser.TransitionParser.ARC_STANDARD", false]], "arff_formatter (class in nltk.classify.weka)": [[44, "nltk.classify.weka.ARFF_Formatter", false]], "arg() (nltk.ccg.api.functionalcategory method)": [[13, "nltk.ccg.api.FunctionalCategory.arg", false]], "args (nltk.sem.logic.applicationexpression property)": [[191, "nltk.sem.logic.ApplicationExpression.args", false]], "arguments (nltk.corpus.reader.conll.conllsrlinstance attribute)": [[69, "nltk.corpus.reader.conll.ConllSRLInstance.arguments", false]], "arguments (nltk.corpus.reader.nombank.nombankinstance attribute)": [[81, "nltk.corpus.reader.nombank.NombankInstance.arguments", false]], "arguments (nltk.corpus.reader.propbank.propbankinstance attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.arguments", false]], "arity() (in module nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.arity", false]], "arity_parse_demo() (in module nltk.parse.projectivedependencyparser)": [[172, "nltk.parse.projectivedependencyparser.arity_parse_demo", false]], "arlstem (class in nltk.stem.arlstem)": [[201, "nltk.stem.arlstem.ARLSTem", false]], "arlstem2 (class in nltk.stem.arlstem2)": [[202, "nltk.stem.arlstem2.ARLSTem2", false]], "arrow (nltk.draw.cfg.cfgeditor attribute)": [[115, "nltk.draw.cfg.CFGEditor.ARROW", false]], "arrow (nltk.draw.cfg.productionlist attribute)": [[115, "nltk.draw.cfg.ProductionList.ARROW", false]], "assertnexttoken() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.assertNextToken", false]], "asserttoken() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.assertToken", false]], "assign_values() (nltk.tokenize.sonority_sequencing.syllabletokenizer method)": [[248, "nltk.tokenize.sonority_sequencing.SyllableTokenizer.assign_values", false]], "assignment (class in nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.Assignment", false]], "assumptions() (nltk.inference.api.basetheoremtoolcommand method)": [[124, "nltk.inference.api.BaseTheoremToolCommand.assumptions", false]], "assumptions() (nltk.inference.api.theoremtoolcommand method)": [[124, "nltk.inference.api.TheoremToolCommand.assumptions", false]], "assumptions() (nltk.inference.api.theoremtoolcommanddecorator method)": [[124, "nltk.inference.api.TheoremToolCommandDecorator.assumptions", false]], "assumptions() (nltk.inference.nonmonotonic.closeddomainprover method)": [[127, "nltk.inference.nonmonotonic.ClosedDomainProver.assumptions", false]], "assumptions() (nltk.inference.nonmonotonic.closedworldprover method)": [[127, "nltk.inference.nonmonotonic.ClosedWorldProver.assumptions", false]], "assumptions() (nltk.inference.nonmonotonic.uniquenamesprover method)": [[127, "nltk.inference.nonmonotonic.UniqueNamesProver.assumptions", false]], "atom (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.ATOM", false]], "atomicexpression (class in nltk.sem.linearlogic)": [[190, "nltk.sem.linearlogic.AtomicExpression", false]], "atoms() (nltk.sem.boxer.abstractboxerdrs method)": [[181, "nltk.sem.boxer.AbstractBoxerDrs.atoms", false]], "atoms() (nltk.sem.boxer.boxerdrs method)": [[181, "nltk.sem.boxer.BoxerDrs.atoms", false]], "atoms() (nltk.sem.boxer.boxereq method)": [[181, "nltk.sem.boxer.BoxerEq.atoms", false]], "atoms() (nltk.sem.boxer.boxerindexed method)": [[181, "nltk.sem.boxer.BoxerIndexed.atoms", false]], "atoms() (nltk.sem.boxer.boxernot method)": [[181, "nltk.sem.boxer.BoxerNot.atoms", false]], "atoms() (nltk.sem.boxer.boxeror method)": [[181, "nltk.sem.boxer.BoxerOr.atoms", false]], "atoms() (nltk.sem.boxer.boxerprop method)": [[181, "nltk.sem.boxer.BoxerProp.atoms", false]], "atoms() (nltk.sem.boxer.boxerwhq method)": [[181, "nltk.sem.boxer.BoxerWhq.atoms", false]], "attachments() (nltk.corpus.reader.ppattach.ppattachmentcorpusreader method)": [[88, "nltk.corpus.reader.ppattach.PPAttachmentCorpusReader.attachments", false]], "attachments() (nltk.corpus.reader.ppattachmentcorpusreader method)": [[57, "nltk.corpus.reader.PPAttachmentCorpusReader.attachments", false]], "attempt_adjuncts() (nltk.sem.boxer.boxerdrsparser method)": [[181, "nltk.sem.boxer.BoxerDrsParser.attempt_adjuncts", false]], "attempt_adjuncts() (nltk.sem.boxer.boxeroutputdrsparser method)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser.attempt_adjuncts", false]], "attempt_adjuncts() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.attempt_adjuncts", false]], "attempt_applicationexpression() (nltk.sem.linearlogic.linearlogicparser method)": [[190, "nltk.sem.linearlogic.LinearLogicParser.attempt_ApplicationExpression", false]], "attempt_applicationexpression() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.attempt_ApplicationExpression", false]], "attempt_booleanexpression() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.attempt_BooleanExpression", false]], "attempt_equalityexpression() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.attempt_EqualityExpression", false]], "attested_labels() (in module nltk.classify.util)": [[43, "nltk.classify.util.attested_labels", false]], "attrdict (class in nltk.corpus.reader.framenet)": [[72, "nltk.corpus.reader.framenet.AttrDict", false]], "audiodata() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.audiodata", false]], "audiodata() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.audiodata", false]], "augment() (nltk.sem.chat80.concept method)": [[182, "nltk.sem.chat80.Concept.augment", false]], "augparsecategory() (in module nltk.ccg.lexicon)": [[16, "nltk.ccg.lexicon.augParseCategory", false]], "authenticate (class in nltk.twitter.util)": [[290, "nltk.twitter.util.Authenticate", false]], "author (nltk.corpus.reader.bnc.bncwordview attribute)": [[61, "nltk.corpus.reader.bnc.BNCWordView.author", false]], "author (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.author", false]], "auto_formats (in module nltk.data)": [[111, "nltk.data.AUTO_FORMATS", false]], "available_categories (nltk.corpus.reader.unicharscorpusreader attribute)": [[57, "nltk.corpus.reader.UnicharsCorpusReader.available_categories", false]], "available_categories (nltk.corpus.reader.wordlist.unicharscorpusreader attribute)": [[106, "nltk.corpus.reader.wordlist.UnicharsCorpusReader.available_categories", false]], "available_langs (nltk.corpus.reader.nonbreakingprefixescorpusreader attribute)": [[57, "nltk.corpus.reader.NonbreakingPrefixesCorpusReader.available_langs", false]], "available_langs (nltk.corpus.reader.wordlist.nonbreakingprefixescorpusreader attribute)": [[106, "nltk.corpus.reader.wordlist.NonbreakingPrefixesCorpusReader.available_langs", false]], "average_characters (nltk.translate.gale_church.languageindependent attribute)": [[260, "nltk.translate.gale_church.LanguageIndependent.AVERAGE_CHARACTERS", false]], "average_weights() (nltk.tag.perceptron.averagedperceptron method)": [[221, "nltk.tag.perceptron.AveragedPerceptron.average_weights", false]], "averagedperceptron (class in nltk.tag.perceptron)": [[221, "nltk.tag.perceptron.AveragedPerceptron", false]], "avg_ao() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.avg_Ao", false]], "b() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.B", false]], "b_decr (nltk.sentiment.vader.vaderconstants attribute)": [[198, "nltk.sentiment.vader.VaderConstants.B_DECR", false]], "b_incr (nltk.sentiment.vader.vaderconstants attribute)": [[198, "nltk.sentiment.vader.VaderConstants.B_INCR", false]], "babelize_shell() (in module nltk.misc.babelfish)": [[154, "nltk.misc.babelfish.babelize_shell", false]], "background() (nltk.inference.discourse.discoursetester method)": [[125, "nltk.inference.discourse.DiscourseTester.background", false]], "backoff (nltk.tag.sequential.sequentialbackofftagger property)": [[223, "nltk.tag.sequential.SequentialBackoffTagger.backoff", false]], "backtrack() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.backtrack", false]], "backwardbxconstraint() (in module nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.backwardBxConstraint", false]], "backwardcombinator (class in nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.BackwardCombinator", false]], "backwardonly() (in module nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.backwardOnly", false]], "backwardsxconstraint() (in module nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.backwardSxConstraint", false]], "backwardtconstraint() (in module nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.backwardTConstraint", false]], "backwardtyperaiserule (class in nltk.ccg.chart)": [[14, "nltk.ccg.chart.BackwardTypeRaiseRule", false]], "base_fdist() (nltk.probability.heldoutprobdist method)": [[179, "nltk.probability.HeldoutProbDist.base_fdist", false]], "baseform (nltk.corpus.reader.nombank.nombankinstance attribute)": [[81, "nltk.corpus.reader.nombank.NombankInstance.baseform", false]], "baseform (nltk.corpus.reader.propbank.propbankinstance property)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.baseform", false]], "basemodelbuildercommand (class in nltk.inference.api)": [[124, "nltk.inference.api.BaseModelBuilderCommand", false]], "baseprovercommand (class in nltk.inference.api)": [[124, "nltk.inference.api.BaseProverCommand", false]], "basetheoremtoolcommand (class in nltk.inference.api)": [[124, "nltk.inference.api.BaseTheoremToolCommand", false]], "basic_sent_chop() (in module nltk.tag.tnt)": [[225, "nltk.tag.tnt.basic_sent_chop", false]], "basictweethandler (class in nltk.twitter.api)": [[286, "nltk.twitter.api.BasicTweetHandler", false]], "basictype (class in nltk.sem.logic)": [[191, "nltk.sem.logic.BasicType", false]], "batch_tag_incremental() (nltk.tag.brill.brilltagger method)": [[215, "nltk.tag.brill.BrillTagger.batch_tag_incremental", false]], "bbox() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.bbox", false]], "bbox() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.bbox", false]], "bcp47corpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.BCP47CorpusReader", false]], "bcp47corpusreader (class in nltk.corpus.reader.bcp47)": [[60, "nltk.corpus.reader.bcp47.BCP47CorpusReader", false]], "beam_threshold (nltk.translate.stack_decoder.stackdecoder attribute)": [[274, "nltk.translate.stack_decoder.StackDecoder.beam_threshold", false]], "best_binary_stump() (nltk.classify.decisiontree.decisiontreeclassifier static method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.best_binary_stump", false]], "best_incoming_arc() (nltk.parse.nonprojectivedependencyparser.probabilisticnonprojectiveparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser.best_incoming_arc", false]], "best_model2_alignment() (nltk.translate.ibm_model.ibmmodel method)": [[268, "nltk.translate.ibm_model.IBMModel.best_model2_alignment", false]], "best_path() (nltk.tag.hmm.hiddenmarkovmodeltagger method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.best_path", false]], "best_path_simple() (nltk.tag.hmm.hiddenmarkovmodeltagger method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.best_path_simple", false]], "best_stump() (nltk.classify.decisiontree.decisiontreeclassifier static method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.best_stump", false]], "bigram_collocation_feats() (nltk.sentiment.sentiment_analyzer.sentimentanalyzer method)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer.bigram_collocation_feats", false]], "bigram_finder() (nltk.collocations.trigramcollocationfinder method)": [[53, "nltk.collocations.TrigramCollocationFinder.bigram_finder", false]], "bigramassocmeasures (class in nltk.metrics.association)": [[146, "nltk.metrics.association.BigramAssocMeasures", false]], "bigramcollocationfinder (class in nltk.collocations)": [[53, "nltk.collocations.BigramCollocationFinder", false]], "bigrams() (in module nltk.util)": [[291, "nltk.util.bigrams", false]], "bigramtagger (class in nltk.tag.sequential)": [[223, "nltk.tag.sequential.BigramTagger", false]], "binarize() (nltk.grammar.cfg class method)": [[121, "nltk.grammar.CFG.binarize", false]], "binary_concept() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.binary_concept", false]], "binary_distance() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.binary_distance", false]], "binary_locations() (nltk.inference.prover9.prover9parent method)": [[128, "nltk.inference.prover9.Prover9Parent.binary_locations", false]], "binary_names_demo_features() (in module nltk.classify.util)": [[43, "nltk.classify.util.binary_names_demo_features", false]], "binary_search_file() (in module nltk.util)": [[291, "nltk.util.binary_search_file", false]], "binary_stump() (nltk.classify.decisiontree.decisiontreeclassifier static method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.binary_stump", false]], "binarycombinatorrule (class in nltk.ccg.chart)": [[14, "nltk.ccg.chart.BinaryCombinatorRule", false]], "binaryexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.BinaryExpression", false]], "binarymaxentfeatureencoding (class in nltk.classify.maxent)": [[33, "nltk.classify.maxent.BinaryMaxentFeatureEncoding", false]], "bind() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.bind", false]], "bind_click() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.bind_click", false]], "bind_click_leaves() (nltk.draw.tree.treewidget method)": [[118, "nltk.draw.tree.TreeWidget.bind_click_leaves", false]], "bind_click_nodes() (nltk.draw.tree.treewidget method)": [[118, "nltk.draw.tree.TreeWidget.bind_click_nodes", false]], "bind_click_trees() (nltk.draw.tree.treewidget method)": [[118, "nltk.draw.tree.TreeWidget.bind_click_trees", false]], "bind_drag() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.bind_drag", false]], "bind_drag_leaves() (nltk.draw.tree.treewidget method)": [[118, "nltk.draw.tree.TreeWidget.bind_drag_leaves", false]], "bind_drag_nodes() (nltk.draw.tree.treewidget method)": [[118, "nltk.draw.tree.TreeWidget.bind_drag_nodes", false]], "bind_drag_trees() (nltk.draw.tree.treewidget method)": [[118, "nltk.draw.tree.TreeWidget.bind_drag_trees", false]], "bind_to_columns() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.bind_to_columns", false]], "bind_to_columns() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.bind_to_columns", false]], "bind_to_labels() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.bind_to_labels", false]], "bind_to_labels() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.bind_to_labels", false]], "bind_to_listboxes() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.bind_to_listboxes", false]], "bind_to_listboxes() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.bind_to_listboxes", false]], "binding_ops() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.binding_ops", false]], "bindingdict (class in nltk.inference.resolution)": [[129, "nltk.inference.resolution.BindingDict", false]], "bindingdict (class in nltk.sem.linearlogic)": [[190, "nltk.sem.linearlogic.BindingDict", false]], "bindingexception": [[129, "nltk.inference.resolution.BindingException", false]], "bindings() (nltk.parse.featurechart.featuretreeedge method)": [[167, "nltk.parse.featurechart.FeatureTreeEdge.bindings", false]], "binops (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.BINOPS", false]], "bio_to_chunks() (nltk.tag.senna.sennachunktagger method)": [[222, "nltk.tag.senna.SennaChunkTagger.bio_to_chunks", false]], "blankline_tokenize() (in module nltk.tokenize.regexp)": [[244, "nltk.tokenize.regexp.blankline_tokenize", false]], "blanklinetokenizer (class in nltk.tokenize.regexp)": [[244, "nltk.tokenize.regexp.BlanklineTokenizer", false]], "bllipparser (class in nltk.parse.bllip)": [[161, "nltk.parse.bllip.BllipParser", false]], "blockquote_reader() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.blockquote_reader", false]], "blockquotes() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.blockquotes", false]], "bnccorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.BNCCorpusReader", false]], "bnccorpusreader (class in nltk.corpus.reader.bnc)": [[61, "nltk.corpus.reader.bnc.BNCCorpusReader", false]], "bncsentence (class in nltk.corpus.reader.bnc)": [[61, "nltk.corpus.reader.bnc.BNCSentence", false]], "bncwordview (class in nltk.corpus.reader.bnc)": [[61, "nltk.corpus.reader.bnc.BNCWordView", false]], "boolean_ops() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.boolean_ops", false]], "booleanexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.BooleanExpression", false]], "booster_dict (nltk.sentiment.vader.vaderconstants attribute)": [[198, "nltk.sentiment.vader.VaderConstants.BOOSTER_DICT", false]], "bothbackward() (in module nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.bothBackward", false]], "bothforward() (in module nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.bothForward", false]], "bottomupchartparser (class in nltk.parse.chart)": [[162, "nltk.parse.chart.BottomUpChartParser", false]], "bottomupleftcornerchartparser (class in nltk.parse.chart)": [[162, "nltk.parse.chart.BottomUpLeftCornerChartParser", false]], "bottomuppredictcombinerule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.BottomUpPredictCombineRule", false]], "bottomuppredictrule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.BottomUpPredictRule", false]], "bottomupprobabilisticchartparser (class in nltk.parse.pchart)": [[171, "nltk.parse.pchart.BottomUpProbabilisticChartParser", false]], "boxer (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.Boxer", false]], "boxercard (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerCard", false]], "boxerdrs (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerDrs", false]], "boxerdrsparser (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerDrsParser", false]], "boxereq (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerEq", false]], "boxerindexed (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerIndexed", false]], "boxernamed (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerNamed", false]], "boxernot (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerNot", false]], "boxeror (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerOr", false]], "boxeroutputdrsparser (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser", false]], "boxerpred (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerPred", false]], "boxerprop (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerProp", false]], "boxerrel (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerRel", false]], "boxerwhq (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerWhq", false]], "boxwidget (class in nltk.draw.util)": [[119, "nltk.draw.util.BoxWidget", false]], "bracket_parse() (in module nltk.tree)": [[275, "nltk.tree.bracket_parse", false]], "bracket_parse() (in module nltk.tree.parsing)": [[278, "nltk.tree.parsing.bracket_parse", false]], "bracketparsecorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.BracketParseCorpusReader", false]], "bracketparsecorpusreader (class in nltk.corpus.reader.bracket_parse)": [[62, "nltk.corpus.reader.bracket_parse.BracketParseCorpusReader", false]], "bracketwidget (class in nltk.draw.util)": [[119, "nltk.draw.util.BracketWidget", false]], "breadth_first() (in module nltk.util)": [[291, "nltk.util.breadth_first", false]], "brevity_penalty() (in module nltk.translate.bleu_score)": [[258, "nltk.translate.bleu_score.brevity_penalty", false]], "brill24() (in module nltk.tag.brill)": [[215, "nltk.tag.brill.brill24", false]], "brilltagger (class in nltk.tag.brill)": [[215, "nltk.tag.brill.BrillTagger", false]], "brilltaggertrainer (class in nltk.tag.brill_trainer)": [[216, "nltk.tag.brill_trainer.BrillTaggerTrainer", false]], "brilltemplatei (class in nltk.tbl.template)": [[233, "nltk.tbl.template.BrillTemplateI", false]], "brown_tagset() (in module nltk.help)": [[122, "nltk.help.brown_tagset", false]], "bubble() (in module nltk.misc.sort)": [[157, "nltk.misc.sort.bubble", false]], "buffer (nltk.sem.drt.drsdrawer attribute)": [[184, "nltk.sem.drt.DrsDrawer.BUFFER", false]], "bufferedgzipfile() (in module nltk.data)": [[111, "nltk.data.BufferedGzipFile", false]], "build_index() (in module nltk.downloader)": [[113, "nltk.downloader.build_index", false]], "build_model() (in module nltk.chunk.named_entity)": [[27, "nltk.chunk.named_entity.build_model", false]], "build_model() (nltk.inference.api.basemodelbuildercommand method)": [[124, "nltk.inference.api.BaseModelBuilderCommand.build_model", false]], "build_model() (nltk.inference.api.modelbuilder method)": [[124, "nltk.inference.api.ModelBuilder.build_model", false]], "build_model() (nltk.inference.api.modelbuildercommand method)": [[124, "nltk.inference.api.ModelBuilderCommand.build_model", false]], "build_model() (nltk.inference.api.modelbuildercommanddecorator method)": [[124, "nltk.inference.api.ModelBuilderCommandDecorator.build_model", false]], "build_model() (nltk.inference.api.parallelproverbuildercommand method)": [[124, "nltk.inference.api.ParallelProverBuilderCommand.build_model", false]], "build_preprocessed_file() (nltk.corpus.reader.nkjp.xml_tool method)": [[80, "nltk.corpus.reader.nkjp.XML_Tool.build_preprocessed_file", false]], "buildindexes() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.buildindexes", false]], "buildindexes() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.buildindexes", false]], "bytebuffer (nltk.data.seekableunicodestreamreader attribute)": [[111, "nltk.data.SeekableUnicodeStreamReader.bytebuffer", false]], "c (nltk.classify.maxent.gisencoding property)": [[33, "nltk.classify.maxent.GISEncoding.C", false]], "c (nltk.downloader.downloadergui attribute)": [[113, "nltk.downloader.DownloaderGUI.c", false]], "c_incr (nltk.sentiment.vader.vaderconstants attribute)": [[198, "nltk.sentiment.vader.VaderConstants.C_INCR", false]], "cachedtopdownpredictrule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.CachedTopDownPredictRule", false]], "calc_dist() (nltk.classify.textcat.textcat method)": [[42, "nltk.classify.textcat.TextCat.calc_dist", false]], "calculate_deltas() (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.calculate_deltas", false]], "calculate_empirical_fcount() (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.calculate_empirical_fcount", false]], "calculate_estimated_fcount() (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.calculate_estimated_fcount", false]], "calculate_nfmap() (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.calculate_nfmap", false]], "call_megam() (in module nltk.classify.megam)": [[34, "nltk.classify.megam.call_megam", false]], "call_tadm() (in module nltk.classify.tadm)": [[41, "nltk.classify.tadm.call_tadm", false]], "can_combine() (nltk.ccg.combinator.backwardcombinator method)": [[15, "nltk.ccg.combinator.BackwardCombinator.can_combine", false]], "can_combine() (nltk.ccg.combinator.directedbinarycombinator method)": [[15, "nltk.ccg.combinator.DirectedBinaryCombinator.can_combine", false]], "can_combine() (nltk.ccg.combinator.forwardcombinator method)": [[15, "nltk.ccg.combinator.ForwardCombinator.can_combine", false]], "can_combine() (nltk.ccg.combinator.undirectedbinarycombinator method)": [[15, "nltk.ccg.combinator.UndirectedBinaryCombinator.can_combine", false]], "can_combine() (nltk.ccg.combinator.undirectedcomposition method)": [[15, "nltk.ccg.combinator.UndirectedComposition.can_combine", false]], "can_combine() (nltk.ccg.combinator.undirectedfunctionapplication method)": [[15, "nltk.ccg.combinator.UndirectedFunctionApplication.can_combine", false]], "can_combine() (nltk.ccg.combinator.undirectedsubstitution method)": [[15, "nltk.ccg.combinator.UndirectedSubstitution.can_combine", false]], "can_combine() (nltk.ccg.combinator.undirectedtyperaise method)": [[15, "nltk.ccg.combinator.UndirectedTypeRaise.can_combine", false]], "can_compose() (nltk.ccg.api.direction method)": [[13, "nltk.ccg.api.Direction.can_compose", false]], "can_cross() (nltk.ccg.api.direction method)": [[13, "nltk.ccg.api.Direction.can_cross", false]], "can_unify() (nltk.ccg.api.abstractccgcategory method)": [[13, "nltk.ccg.api.AbstractCCGCategory.can_unify", false]], "can_unify() (nltk.ccg.api.ccgvar method)": [[13, "nltk.ccg.api.CCGVar.can_unify", false]], "can_unify() (nltk.ccg.api.direction method)": [[13, "nltk.ccg.api.Direction.can_unify", false]], "can_unify() (nltk.ccg.api.functionalcategory method)": [[13, "nltk.ccg.api.FunctionalCategory.can_unify", false]], "can_unify() (nltk.ccg.api.primitivecategory method)": [[13, "nltk.ccg.api.PrimitiveCategory.can_unify", false]], "canvas() (nltk.draw.util.canvasframe method)": [[119, "nltk.draw.util.CanvasFrame.canvas", false]], "canvas() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.canvas", false]], "canvasframe (class in nltk.draw.util)": [[119, "nltk.draw.util.CanvasFrame", false]], "canvaswidget (class in nltk.draw.util)": [[119, "nltk.draw.util.CanvasWidget", false]], "casual_tokenize() (in module nltk.tokenize.casual)": [[238, "nltk.tokenize.casual.casual_tokenize", false]], "categ() (nltk.ccg.api.primitivecategory method)": [[13, "nltk.ccg.api.PrimitiveCategory.categ", false]], "categ() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.categ", false]], "categ() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.categ", false]], "categ() (nltk.ccg.lexicon.token method)": [[16, "nltk.ccg.lexicon.Token.categ", false]], "categories (class in nltk.inference.tableau)": [[130, "nltk.inference.tableau.Categories", false]], "categories() (nltk.ccg.lexicon.ccglexicon method)": [[16, "nltk.ccg.lexicon.CCGLexicon.categories", false]], "categories() (nltk.corpus.reader.api.categorizedcorpusreader method)": [[59, "nltk.corpus.reader.api.CategorizedCorpusReader.categories", false]], "categories() (nltk.corpus.reader.categorizedcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedCorpusReader.categories", false]], "categories() (nltk.corpus.reader.ipipan.ipipancorpusreader method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader.categories", false]], "categories() (nltk.corpus.reader.ipipancorpusreader method)": [[57, "nltk.corpus.reader.IPIPANCorpusReader.categories", false]], "categories() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.categories", false]], "categorizedbracketparsecorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.CategorizedBracketParseCorpusReader", false]], "categorizedbracketparsecorpusreader (class in nltk.corpus.reader.bracket_parse)": [[62, "nltk.corpus.reader.bracket_parse.CategorizedBracketParseCorpusReader", false]], "categorizedcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.CategorizedCorpusReader", false]], "categorizedcorpusreader (class in nltk.corpus.reader.api)": [[59, "nltk.corpus.reader.api.CategorizedCorpusReader", false]], "categorizedmarkdowncorpusreader (class in nltk.corpus.reader.markdown)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader", false]], "categorizedplaintextcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.CategorizedPlaintextCorpusReader", false]], "categorizedplaintextcorpusreader (class in nltk.corpus.reader.plaintext)": [[87, "nltk.corpus.reader.plaintext.CategorizedPlaintextCorpusReader", false]], "categorizedsentencescorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.CategorizedSentencesCorpusReader", false]], "categorizedsentencescorpusreader (class in nltk.corpus.reader.categorized_sents)": [[63, "nltk.corpus.reader.categorized_sents.CategorizedSentencesCorpusReader", false]], "categorizedtaggedcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.CategorizedTaggedCorpusReader", false]], "categorizedtaggedcorpusreader (class in nltk.corpus.reader.tagged)": [[99, "nltk.corpus.reader.tagged.CategorizedTaggedCorpusReader", false]], "ccgchart (class in nltk.ccg.chart)": [[14, "nltk.ccg.chart.CCGChart", false]], "ccgchartparser (class in nltk.ccg.chart)": [[14, "nltk.ccg.chart.CCGChartParser", false]], "ccgedge (class in nltk.ccg.chart)": [[14, "nltk.ccg.chart.CCGEdge", false]], "ccgleafedge (class in nltk.ccg.chart)": [[14, "nltk.ccg.chart.CCGLeafEdge", false]], "ccglexicon (class in nltk.ccg.lexicon)": [[16, "nltk.ccg.lexicon.CCGLexicon", false]], "ccgvar (class in nltk.ccg.api)": [[13, "nltk.ccg.api.CCGVar", false]], "center_of_cept() (nltk.translate.ibm_model.alignmentinfo method)": [[268, "nltk.translate.ibm_model.AlignmentInfo.center_of_cept", false]], "cepts (nltk.translate.ibm_model.alignmentinfo attribute)": [[268, "nltk.translate.ibm_model.AlignmentInfo.cepts", false]], "cfg (class in nltk.grammar)": [[121, "nltk.grammar.CFG", false]], "cfgdemo (class in nltk.draw.cfg)": [[115, "nltk.draw.cfg.CFGDemo", false]], "cfgeditor (class in nltk.draw.cfg)": [[115, "nltk.draw.cfg.CFGEditor", false]], "cfgreadingcommand (class in nltk.inference.discourse)": [[125, "nltk.inference.discourse.CfgReadingCommand", false]], "change_var() (nltk.sem.boxer.boxernamed method)": [[181, "nltk.sem.boxer.BoxerNamed.change_var", false]], "change_var() (nltk.sem.boxer.boxerpred method)": [[181, "nltk.sem.boxer.BoxerPred.change_var", false]], "channels() (nltk.corpus.reader.ipipan.ipipancorpusreader method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader.channels", false]], "channels() (nltk.corpus.reader.ipipancorpusreader method)": [[57, "nltk.corpus.reader.IPIPANCorpusReader.channels", false]], "chapters() (nltk.corpus.reader.europarlcorpusreader method)": [[57, "nltk.corpus.reader.EuroparlCorpusReader.chapters", false]], "chapters() (nltk.corpus.reader.plaintext.europarlcorpusreader method)": [[87, "nltk.corpus.reader.plaintext.EuroparlCorpusReader.chapters", false]], "char_seek_forward() (nltk.data.seekableunicodestreamreader method)": [[111, "nltk.data.SeekableUnicodeStreamReader.char_seek_forward", false]], "chars() (nltk.corpus.reader.unicharscorpusreader method)": [[57, "nltk.corpus.reader.UnicharsCorpusReader.chars", false]], "chars() (nltk.corpus.reader.wordlist.unicharscorpusreader method)": [[106, "nltk.corpus.reader.wordlist.UnicharsCorpusReader.chars", false]], "chart (class in nltk.parse.chart)": [[162, "nltk.parse.chart.Chart", false]], "chart() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.chart", false]], "chart_parse() (nltk.parse.chart.chartparser method)": [[162, "nltk.parse.chart.ChartParser.chart_parse", false]], "chart_parse() (nltk.parse.earleychart.incrementalchartparser method)": [[165, "nltk.parse.earleychart.IncrementalChartParser.chart_parse", false]], "chartcell (class in nltk.parse.projectivedependencyparser)": [[172, "nltk.parse.projectivedependencyparser.ChartCell", false]], "chartokenizer (class in nltk.tokenize.simple)": [[247, "nltk.tokenize.simple.CharTokenizer", false]], "chartparser (class in nltk.parse.chart)": [[162, "nltk.parse.chart.ChartParser", false]], "chartrulei (class in nltk.parse.chart)": [[162, "nltk.parse.chart.ChartRuleI", false]], "chasencorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.ChasenCorpusReader", false]], "chasencorpusreader (class in nltk.corpus.reader.chasen)": [[64, "nltk.corpus.reader.chasen.ChasenCorpusReader", false]], "chasencorpusview (class in nltk.corpus.reader.chasen)": [[64, "nltk.corpus.reader.chasen.ChasenCorpusView", false]], "chat (class in nltk.chat.util)": [[23, "nltk.chat.util.Chat", false]], "chatbots() (in module nltk.chat)": [[18, "nltk.chat.chatbots", false]], "check() (in module nltk.misc.wordfinder)": [[158, "nltk.misc.wordfinder.check", false]], "check() (nltk.classify.util.cutoffchecker method)": [[43, "nltk.classify.util.CutoffChecker.check", false]], "check() (nltk.probability.simplegoodturingprobdist method)": [[179, "nltk.probability.SimpleGoodTuringProbDist.check", false]], "check_coverage() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.check_coverage", false]], "check_date_limit() (nltk.twitter.api.tweethandleri method)": [[286, "nltk.twitter.api.TweetHandlerI.check_date_limit", false]], "check_megam_config() (in module nltk.classify.util)": [[43, "nltk.classify.util.check_megam_config", false]], "checksum (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.checksum", false]], "chi_sq() (nltk.metrics.association.bigramassocmeasures class method)": [[146, "nltk.metrics.association.BigramAssocMeasures.chi_sq", false]], "chi_sq() (nltk.metrics.association.ngramassocmeasures class method)": [[146, "nltk.metrics.association.NgramAssocMeasures.chi_sq", false]], "child() (nltk.draw.util.abstractcontainerwidget method)": [[119, "nltk.draw.util.AbstractContainerWidget.child", false]], "child_pointer_lists() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.child_pointer_lists", false]], "child_widgets() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.child_widgets", false]], "childes_url_base (nltk.corpus.reader.childes.childescorpusreader attribute)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.childes_url_base", false]], "childes_url_base (nltk.corpus.reader.childescorpusreader attribute)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.childes_url_base", false]], "childescorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.CHILDESCorpusReader", false]], "childescorpusreader (class in nltk.corpus.reader.childes)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader", false]], "children (nltk.downloader.collection attribute)": [[113, "nltk.downloader.Collection.children", false]], "children() (nltk.draw.util.sequencewidget method)": [[119, "nltk.draw.util.SequenceWidget.children", false]], "children() (nltk.draw.util.stackwidget method)": [[119, "nltk.draw.util.StackWidget.children", false]], "chomsky_normal_form() (in module nltk.tree)": [[275, "nltk.tree.chomsky_normal_form", false]], "chomsky_normal_form() (in module nltk.tree.transforms)": [[281, "nltk.tree.transforms.chomsky_normal_form", false]], "chomsky_normal_form() (in module nltk.treetransforms)": [[284, "nltk.treetransforms.chomsky_normal_form", false]], "chomsky_normal_form() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.chomsky_normal_form", false]], "chomsky_normal_form() (nltk.tree.tree method)": [[275, "nltk.tree.Tree.chomsky_normal_form", false]], "chomsky_normal_form() (nltk.tree.tree.tree method)": [[282, "nltk.tree.tree.Tree.chomsky_normal_form", false]], "choose() (in module nltk.util)": [[291, "nltk.util.choose", false]], "choose_tag() (nltk.tag.sequential.classifierbasedtagger method)": [[223, "nltk.tag.sequential.ClassifierBasedTagger.choose_tag", false]], "choose_tag() (nltk.tag.sequential.contexttagger method)": [[223, "nltk.tag.sequential.ContextTagger.choose_tag", false]], "choose_tag() (nltk.tag.sequential.defaulttagger method)": [[223, "nltk.tag.sequential.DefaultTagger.choose_tag", false]], "choose_tag() (nltk.tag.sequential.regexptagger method)": [[223, "nltk.tag.sequential.RegexpTagger.choose_tag", false]], "choose_tag() (nltk.tag.sequential.sequentialbackofftagger method)": [[223, "nltk.tag.sequential.SequentialBackoffTagger.choose_tag", false]], "chrf_precision_recall_fscore_support() (in module nltk.translate.chrf_score)": [[259, "nltk.translate.chrf_score.chrf_precision_recall_fscore_support", false]], "chunk (nltk.corpus.reader.conll.conllcorpusreader attribute)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.CHUNK", false]], "chunk (nltk.corpus.reader.conllcorpusreader attribute)": [[57, "nltk.corpus.reader.ConllCorpusReader.CHUNK", false]], "chunk_sents() (nltk.corpus.reader.semcor.semcorcorpusreader method)": [[93, "nltk.corpus.reader.semcor.SemcorCorpusReader.chunk_sents", false]], "chunk_sents() (nltk.corpus.reader.semcorcorpusreader method)": [[57, "nltk.corpus.reader.SemcorCorpusReader.chunk_sents", false]], "chunk_tag (nltk.chunk.regexp.chunkstring attribute)": [[28, "nltk.chunk.regexp.ChunkString.CHUNK_TAG", false]], "chunk_tag_char (nltk.chunk.regexp.chunkstring attribute)": [[28, "nltk.chunk.regexp.ChunkString.CHUNK_TAG_CHAR", false]], "chunked_paras() (nltk.corpus.reader.chunked.chunkedcorpusreader method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusReader.chunked_paras", false]], "chunked_paras() (nltk.corpus.reader.chunkedcorpusreader method)": [[57, "nltk.corpus.reader.ChunkedCorpusReader.chunked_paras", false]], "chunked_sents() (nltk.corpus.reader.chunked.chunkedcorpusreader method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusReader.chunked_sents", false]], "chunked_sents() (nltk.corpus.reader.chunkedcorpusreader method)": [[57, "nltk.corpus.reader.ChunkedCorpusReader.chunked_sents", false]], "chunked_sents() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.chunked_sents", false]], "chunked_sents() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.chunked_sents", false]], "chunked_words() (nltk.corpus.reader.chunked.chunkedcorpusreader method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusReader.chunked_words", false]], "chunked_words() (nltk.corpus.reader.chunkedcorpusreader method)": [[57, "nltk.corpus.reader.ChunkedCorpusReader.chunked_words", false]], "chunked_words() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.chunked_words", false]], "chunked_words() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.chunked_words", false]], "chunkedcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.ChunkedCorpusReader", false]], "chunkedcorpusreader (class in nltk.corpus.reader.chunked)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusReader", false]], "chunkedcorpusview (class in nltk.corpus.reader.chunked)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusView", false]], "chunkparseri (class in nltk.chunk.api)": [[26, "nltk.chunk.api.ChunkParserI", false]], "chunkrule (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.ChunkRule", false]], "chunkrulewithcontext (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.ChunkRuleWithContext", false]], "chunks() (nltk.corpus.reader.semcor.semcorcorpusreader method)": [[93, "nltk.corpus.reader.semcor.SemcorCorpusReader.chunks", false]], "chunks() (nltk.corpus.reader.semcorcorpusreader method)": [[57, "nltk.corpus.reader.SemcorCorpusReader.chunks", false]], "chunkscore (class in nltk.chunk.util)": [[29, "nltk.chunk.util.ChunkScore", false]], "chunkstring (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.ChunkString", false]], "cistem (class in nltk.stem.cistem)": [[203, "nltk.stem.cistem.Cistem", false]], "citation() (nltk.corpus.reader.api.corpusreader method)": [[59, "nltk.corpus.reader.api.CorpusReader.citation", false]], "citation() (nltk.corpus.reader.corpusreader method)": [[57, "nltk.corpus.reader.CorpusReader.citation", false]], "citation() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.citation", false]], "citation() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.citation", false]], "cities2table() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.cities2table", false]], "cjk_compatibility_forms (nltk.tokenize.util.cjkchars attribute)": [[254, "nltk.tokenize.util.CJKChars.CJK_Compatibility_Forms", false]], "cjk_compatibility_ideographs (nltk.tokenize.util.cjkchars attribute)": [[254, "nltk.tokenize.util.CJKChars.CJK_Compatibility_Ideographs", false]], "cjk_radicals (nltk.tokenize.util.cjkchars attribute)": [[254, "nltk.tokenize.util.CJKChars.CJK_Radicals", false]], "cjkchars (class in nltk.tokenize.util)": [[254, "nltk.tokenize.util.CJKChars", false]], "class_abbrev() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.class_abbrev", false]], "classids() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.classids", false]], "classids() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.classids", false]], "classification_probdist() (nltk.cluster.api.clusteri method)": [[47, "nltk.cluster.api.ClusterI.classification_probdist", false]], "classifier() (nltk.tag.sequential.classifierbasedtagger method)": [[223, "nltk.tag.sequential.ClassifierBasedTagger.classifier", false]], "classifierbasedpostagger (class in nltk.tag.sequential)": [[223, "nltk.tag.sequential.ClassifierBasedPOSTagger", false]], "classifierbasedtagger (class in nltk.tag.sequential)": [[223, "nltk.tag.sequential.ClassifierBasedTagger", false]], "classifieri (class in nltk.classify.api)": [[31, "nltk.classify.api.ClassifierI", false]], "classify() (nltk.classify.api.classifieri method)": [[31, "nltk.classify.api.ClassifierI.classify", false]], "classify() (nltk.classify.api.multiclassifieri method)": [[31, "nltk.classify.api.MultiClassifierI.classify", false]], "classify() (nltk.classify.decisiontree.decisiontreeclassifier method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.classify", false]], "classify() (nltk.classify.maxent.maxentclassifier method)": [[33, "nltk.classify.maxent.MaxentClassifier.classify", false]], "classify() (nltk.classify.naivebayes.naivebayesclassifier method)": [[35, "nltk.classify.naivebayes.NaiveBayesClassifier.classify", false]], "classify() (nltk.cluster.api.clusteri method)": [[47, "nltk.cluster.api.ClusterI.classify", false]], "classify() (nltk.cluster.util.vectorspaceclusterer method)": [[51, "nltk.cluster.util.VectorSpaceClusterer.classify", false]], "classify() (nltk.sentiment.sentiment_analyzer.sentimentanalyzer method)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer.classify", false]], "classify_many() (nltk.classify.api.classifieri method)": [[31, "nltk.classify.api.ClassifierI.classify_many", false]], "classify_many() (nltk.classify.api.multiclassifieri method)": [[31, "nltk.classify.api.MultiClassifierI.classify_many", false]], "classify_many() (nltk.classify.scikitlearn.sklearnclassifier method)": [[38, "nltk.classify.scikitlearn.SklearnClassifier.classify_many", false]], "classify_many() (nltk.classify.weka.wekaclassifier method)": [[44, "nltk.classify.weka.WekaClassifier.classify_many", false]], "classify_vectorspace() (nltk.cluster.em.emclusterer method)": [[48, "nltk.cluster.em.EMClusterer.classify_vectorspace", false]], "classify_vectorspace() (nltk.cluster.gaac.gaaclusterer method)": [[49, "nltk.cluster.gaac.GAAClusterer.classify_vectorspace", false]], "classify_vectorspace() (nltk.cluster.kmeans.kmeansclusterer method)": [[50, "nltk.cluster.kmeans.KMeansClusterer.classify_vectorspace", false]], "classify_vectorspace() (nltk.cluster.util.vectorspaceclusterer method)": [[51, "nltk.cluster.util.VectorSpaceClusterer.classify_vectorspace", false]], "clause (class in nltk.inference.resolution)": [[129, "nltk.inference.resolution.Clause", false]], "clause() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.clause", false]], "clause2concepts() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.clause2concepts", false]], "clausify() (in module nltk.inference.resolution)": [[129, "nltk.inference.resolution.clausify", false]], "claws5_tagset() (in module nltk.help)": [[122, "nltk.help.claws5_tagset", false]], "clean() (nltk.sem.boxer.abstractboxerdrs method)": [[181, "nltk.sem.boxer.AbstractBoxerDrs.clean", false]], "clean() (nltk.sem.boxer.boxerdrs method)": [[181, "nltk.sem.boxer.BoxerDrs.clean", false]], "clean() (nltk.sem.boxer.boxernamed method)": [[181, "nltk.sem.boxer.BoxerNamed.clean", false]], "clean() (nltk.sem.boxer.boxernot method)": [[181, "nltk.sem.boxer.BoxerNot.clean", false]], "clean() (nltk.sem.boxer.boxeror method)": [[181, "nltk.sem.boxer.BoxerOr.clean", false]], "clean() (nltk.sem.boxer.boxerpred method)": [[181, "nltk.sem.boxer.BoxerPred.clean", false]], "clean() (nltk.sem.boxer.boxerprop method)": [[181, "nltk.sem.boxer.BoxerProp.clean", false]], "clean() (nltk.sem.boxer.boxerrel method)": [[181, "nltk.sem.boxer.BoxerRel.clean", false]], "clean() (nltk.sem.boxer.boxerwhq method)": [[181, "nltk.sem.boxer.BoxerWhq.clean", false]], "clean_html() (in module nltk.util)": [[291, "nltk.util.clean_html", false]], "clean_url() (in module nltk.util)": [[291, "nltk.util.clean_url", false]], "clear() (nltk.collections.ordereddict method)": [[52, "nltk.collections.OrderedDict.clear", false]], "clear() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.clear", false]], "clear() (nltk.featstruct.featdict method)": [[120, "nltk.featstruct.FeatDict.clear", false]], "clear() (nltk.sem.drt_glue_demo.drswidget method)": [[185, "nltk.sem.drt_glue_demo.DrsWidget.clear", false]], "clear_abbrevs() (nltk.tokenize.punkt.punktparameters method)": [[243, "nltk.tokenize.punkt.PunktParameters.clear_abbrevs", false]], "clear_cache() (in module nltk.data)": [[111, "nltk.data.clear_cache", false]], "clear_collocations() (nltk.tokenize.punkt.punktparameters method)": [[243, "nltk.tokenize.punkt.PunktParameters.clear_collocations", false]], "clear_ortho_context() (nltk.tokenize.punkt.punktparameters method)": [[243, "nltk.tokenize.punkt.PunktParameters.clear_ortho_context", false]], "clear_sent_starters() (nltk.tokenize.punkt.punktparameters method)": [[243, "nltk.tokenize.punkt.PunktParameters.clear_sent_starters", false]], "clear_status_cache() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.clear_status_cache", false]], "clone() (nltk.inference.tableau.agenda method)": [[130, "nltk.inference.tableau.Agenda.clone", false]], "close (nltk.sem.linearlogic.tokens attribute)": [[190, "nltk.sem.linearlogic.Tokens.CLOSE", false]], "close (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.CLOSE", false]], "close() (nltk.corpus.reader.util.concatenatedcorpusview method)": [[104, "nltk.corpus.reader.util.ConcatenatedCorpusView.close", false]], "close() (nltk.corpus.reader.util.streambackedcorpusview method)": [[104, "nltk.corpus.reader.util.StreamBackedCorpusView.close", false]], "close() (nltk.data.seekableunicodestreamreader method)": [[111, "nltk.data.SeekableUnicodeStreamReader.close", false]], "close() (nltk.sem.chat80.concept method)": [[182, "nltk.sem.chat80.Concept.close", false]], "close() (nltk.tag.hunpos.hunpostagger method)": [[219, "nltk.tag.hunpos.HunposTagger.close", false]], "close() (nltk.toolbox.standardformat method)": [[255, "nltk.toolbox.StandardFormat.close", false]], "close_bracket (nltk.sem.drt.drttokens attribute)": [[184, "nltk.sem.drt.DrtTokens.CLOSE_BRACKET", false]], "close_punct (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.CLOSE_PUNCT", false]], "close_punct_re (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.CLOSE_PUNCT_RE", false]], "closed (nltk.data.seekableunicodestreamreader property)": [[111, "nltk.data.SeekableUnicodeStreamReader.closed", false]], "closed_domain_demo() (in module nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.closed_domain_demo", false]], "closed_world_demo() (in module nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.closed_world_demo", false]], "closeddomainprover (class in nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.ClosedDomainProver", false]], "closedworldprover (class in nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.ClosedWorldProver", false]], "closest_ref_length() (in module nltk.translate.bleu_score)": [[258, "nltk.translate.bleu_score.closest_ref_length", false]], "closure() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.closure", false]], "cluster() (nltk.cluster.api.clusteri method)": [[47, "nltk.cluster.api.ClusterI.cluster", false]], "cluster() (nltk.cluster.gaac.gaaclusterer method)": [[49, "nltk.cluster.gaac.GAAClusterer.cluster", false]], "cluster() (nltk.cluster.util.vectorspaceclusterer method)": [[51, "nltk.cluster.util.VectorSpaceClusterer.cluster", false]], "cluster_name() (nltk.cluster.api.clusteri method)": [[47, "nltk.cluster.api.ClusterI.cluster_name", false]], "cluster_names() (nltk.cluster.api.clusteri method)": [[47, "nltk.cluster.api.ClusterI.cluster_names", false]], "cluster_vectorspace() (nltk.cluster.em.emclusterer method)": [[48, "nltk.cluster.em.EMClusterer.cluster_vectorspace", false]], "cluster_vectorspace() (nltk.cluster.gaac.gaaclusterer method)": [[49, "nltk.cluster.gaac.GAAClusterer.cluster_vectorspace", false]], "cluster_vectorspace() (nltk.cluster.kmeans.kmeansclusterer method)": [[50, "nltk.cluster.kmeans.KMeansClusterer.cluster_vectorspace", false]], "cluster_vectorspace() (nltk.cluster.util.vectorspaceclusterer method)": [[51, "nltk.cluster.util.VectorSpaceClusterer.cluster_vectorspace", false]], "clusteri (class in nltk.cluster.api)": [[47, "nltk.cluster.api.ClusterI", false]], "cmp_chunks() (in module nltk.chunk.named_entity)": [[27, "nltk.chunk.named_entity.cmp_chunks", false]], "cmudictcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.CMUDictCorpusReader", false]], "cmudictcorpusreader (class in nltk.corpus.reader.cmudict)": [[67, "nltk.corpus.reader.cmudict.CMUDictCorpusReader", false]], "code_block_reader() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.code_block_reader", false]], "code_blocks() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.code_blocks", false]], "codeblock (class in nltk.corpus.reader.markdown)": [[78, "nltk.corpus.reader.markdown.CodeBlock", false]], "collapse_nodes() (nltk.parse.nonprojectivedependencyparser.probabilisticnonprojectiveparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser.collapse_nodes", false]], "collapse_unary() (in module nltk.tree)": [[275, "nltk.tree.collapse_unary", false]], "collapse_unary() (in module nltk.tree.transforms)": [[281, "nltk.tree.transforms.collapse_unary", false]], "collapse_unary() (in module nltk.treetransforms)": [[284, "nltk.treetransforms.collapse_unary", false]], "collapse_unary() (nltk.tree.tree method)": [[275, "nltk.tree.Tree.collapse_unary", false]], "collapse_unary() (nltk.tree.tree.tree method)": [[282, "nltk.tree.tree.Tree.collapse_unary", false]], "collapsed_tree() (nltk.draw.tree.treewidget method)": [[118, "nltk.draw.tree.TreeWidget.collapsed_tree", false]], "collection (class in nltk.downloader)": [[113, "nltk.downloader.Collection", false]], "collections() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.collections", false]], "collocation (nltk.tokenize.punkt.punkttrainer attribute)": [[243, "nltk.tokenize.punkt.PunktTrainer.COLLOCATION", false]], "collocation_list() (nltk.text.text method)": [[234, "nltk.text.Text.collocation_list", false]], "collocations (nltk.tokenize.punkt.punktparameters attribute)": [[243, "nltk.tokenize.punkt.PunktParameters.collocations", false]], "collocations() (nltk.text.text method)": [[234, "nltk.text.Text.collocations", false]], "colon (nltk.sem.drt.drttokens attribute)": [[184, "nltk.sem.drt.DrtTokens.COLON", false]], "colorizedlist (class in nltk.draw.util)": [[119, "nltk.draw.util.ColorizedList", false]], "column_index() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.column_index", false]], "column_labels (nltk.draw.table.multilistbox property)": [[117, "nltk.draw.table.MultiListbox.column_labels", false]], "column_names (nltk.draw.table.multilistbox property)": [[117, "nltk.draw.table.MultiListbox.column_names", false]], "column_names (nltk.draw.table.table property)": [[117, "nltk.draw.table.Table.column_names", false]], "column_types (nltk.corpus.reader.conll.conllcorpusreader attribute)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.COLUMN_TYPES", false]], "column_types (nltk.corpus.reader.conllcorpusreader attribute)": [[57, "nltk.corpus.reader.ConllCorpusReader.COLUMN_TYPES", false]], "column_weights (nltk.downloader.downloadergui attribute)": [[113, "nltk.downloader.DownloaderGUI.COLUMN_WEIGHTS", false]], "column_widths (nltk.downloader.downloadergui attribute)": [[113, "nltk.downloader.DownloaderGUI.COLUMN_WIDTHS", false]], "columnconfig() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.columnconfig", false]], "columnconfig() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.columnconfig", false]], "columnconfigure() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.columnconfigure", false]], "columnconfigure() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.columnconfigure", false]], "columns (nltk.downloader.downloadergui attribute)": [[113, "nltk.downloader.DownloaderGUI.COLUMNS", false]], "combination_prover_demo() (in module nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.combination_prover_demo", false]], "combine() (nltk.ccg.combinator.backwardcombinator method)": [[15, "nltk.ccg.combinator.BackwardCombinator.combine", false]], "combine() (nltk.ccg.combinator.directedbinarycombinator method)": [[15, "nltk.ccg.combinator.DirectedBinaryCombinator.combine", false]], "combine() (nltk.ccg.combinator.forwardcombinator method)": [[15, "nltk.ccg.combinator.ForwardCombinator.combine", false]], "combine() (nltk.ccg.combinator.undirectedbinarycombinator method)": [[15, "nltk.ccg.combinator.UndirectedBinaryCombinator.combine", false]], "combine() (nltk.ccg.combinator.undirectedcomposition method)": [[15, "nltk.ccg.combinator.UndirectedComposition.combine", false]], "combine() (nltk.ccg.combinator.undirectedfunctionapplication method)": [[15, "nltk.ccg.combinator.UndirectedFunctionApplication.combine", false]], "combine() (nltk.ccg.combinator.undirectedsubstitution method)": [[15, "nltk.ccg.combinator.UndirectedSubstitution.combine", false]], "combine() (nltk.ccg.combinator.undirectedtyperaise method)": [[15, "nltk.ccg.combinator.UndirectedTypeRaise.combine", false]], "combine_readings() (nltk.inference.discourse.cfgreadingcommand method)": [[125, "nltk.inference.discourse.CfgReadingCommand.combine_readings", false]], "combine_readings() (nltk.inference.discourse.drtgluereadingcommand method)": [[125, "nltk.inference.discourse.DrtGlueReadingCommand.combine_readings", false]], "combine_readings() (nltk.inference.discourse.readingcommand method)": [[125, "nltk.inference.discourse.ReadingCommand.combine_readings", false]], "comma (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.COMMA", false]], "comma_in_num (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.COMMA_IN_NUM", false]], "comma_separated_string_args() (in module nltk.corpus.reader.markdown)": [[78, "nltk.corpus.reader.markdown.comma_separated_string_args", false]], "common_contexts() (nltk.text.contextindex method)": [[234, "nltk.text.ContextIndex.common_contexts", false]], "common_contexts() (nltk.text.text method)": [[234, "nltk.text.Text.common_contexts", false]], "common_hypernyms() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.common_hypernyms", false]], "comparativesentencescorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.ComparativeSentencesCorpusReader", false]], "comparativesentencescorpusreader (class in nltk.corpus.reader.comparative_sents)": [[68, "nltk.corpus.reader.comparative_sents.ComparativeSentencesCorpusReader", false]], "comparison (class in nltk.corpus.reader.comparative_sents)": [[68, "nltk.corpus.reader.comparative_sents.Comparison", false]], "comparisons() (nltk.corpus.reader.comparative_sents.comparativesentencescorpusreader method)": [[68, "nltk.corpus.reader.comparative_sents.ComparativeSentencesCorpusReader.comparisons", false]], "comparisons() (nltk.corpus.reader.comparativesentencescorpusreader method)": [[57, "nltk.corpus.reader.ComparativeSentencesCorpusReader.comparisons", false]], "compile() (nltk.sem.glue.glueformula method)": [[187, "nltk.sem.glue.GlueFormula.compile", false]], "compile_neg() (nltk.sem.linearlogic.atomicexpression method)": [[190, "nltk.sem.linearlogic.AtomicExpression.compile_neg", false]], "compile_neg() (nltk.sem.linearlogic.impexpression method)": [[190, "nltk.sem.linearlogic.ImpExpression.compile_neg", false]], "compile_pos() (nltk.sem.linearlogic.atomicexpression method)": [[190, "nltk.sem.linearlogic.AtomicExpression.compile_pos", false]], "compile_pos() (nltk.sem.linearlogic.impexpression method)": [[190, "nltk.sem.linearlogic.ImpExpression.compile_pos", false]], "completefundamentalrule (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.CompleteFundamentalRule", false]], "completerrule (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.CompleterRule", false]], "complextype (class in nltk.sem.logic)": [[191, "nltk.sem.logic.ComplexType", false]], "compute_composition_semantics() (in module nltk.ccg.logic)": [[17, "nltk.ccg.logic.compute_composition_semantics", false]], "compute_function_semantics() (in module nltk.ccg.logic)": [[17, "nltk.ccg.logic.compute_function_semantics", false]], "compute_future_scores() (nltk.translate.stack_decoder.stackdecoder method)": [[274, "nltk.translate.stack_decoder.StackDecoder.compute_future_scores", false]], "compute_max_subtract_score() (nltk.parse.nonprojectivedependencyparser.probabilisticnonprojectiveparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser.compute_max_subtract_score", false]], "compute_original_indexes() (nltk.parse.nonprojectivedependencyparser.probabilisticnonprojectiveparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser.compute_original_indexes", false]], "compute_prob() (nltk.parse.projectivedependencyparser.probabilisticprojectivedependencyparser method)": [[172, "nltk.parse.projectivedependencyparser.ProbabilisticProjectiveDependencyParser.compute_prob", false]], "compute_semantics() (in module nltk.ccg.chart)": [[14, "nltk.ccg.chart.compute_semantics", false]], "compute_substitution_semantics() (in module nltk.ccg.logic)": [[17, "nltk.ccg.logic.compute_substitution_semantics", false]], "compute_type_raised_semantics() (in module nltk.ccg.logic)": [[17, "nltk.ccg.logic.compute_type_raised_semantics", false]], "concat() (in module nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.concat", false]], "concatenate() (nltk.parse.projectivedependencyparser.probabilisticprojectivedependencyparser method)": [[172, "nltk.parse.projectivedependencyparser.ProbabilisticProjectiveDependencyParser.concatenate", false]], "concatenate() (nltk.parse.projectivedependencyparser.projectivedependencyparser method)": [[172, "nltk.parse.projectivedependencyparser.ProjectiveDependencyParser.concatenate", false]], "concatenated_view() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.concatenated_view", false]], "concatenatedcorpusview (class in nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.ConcatenatedCorpusView", false]], "concept (class in nltk.sem.chat80)": [[182, "nltk.sem.chat80.Concept", false]], "concepts() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.concepts", false]], "concordance() (nltk.text.text method)": [[234, "nltk.text.Text.concordance", false]], "concordance_list() (nltk.text.text method)": [[234, "nltk.text.Text.concordance_list", false]], "concordanceindex (class in nltk.text)": [[234, "nltk.text.ConcordanceIndex", false]], "conditionalexponentialclassifier (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.ConditionalExponentialClassifier", false]], "conditionalfreqdist (class in nltk.probability)": [[179, "nltk.probability.ConditionalFreqDist", false]], "conditionalprobdist (class in nltk.probability)": [[179, "nltk.probability.ConditionalProbDist", false]], "conditionalprobdisti (class in nltk.probability)": [[179, "nltk.probability.ConditionalProbDistI", false]], "conditions() (nltk.probability.conditionalfreqdist method)": [[179, "nltk.probability.ConditionalFreqDist.conditions", false]], "conditions() (nltk.probability.conditionalprobdisti method)": [[179, "nltk.probability.ConditionalProbDistI.conditions", false]], "config_java() (in module nltk.internals)": [[131, "nltk.internals.config_java", false]], "config_megam() (in module nltk.classify.megam)": [[34, "nltk.classify.megam.config_megam", false]], "config_prover9() (nltk.inference.prover9.prover9parent method)": [[128, "nltk.inference.prover9.Prover9Parent.config_prover9", false]], "config_tadm() (in module nltk.classify.tadm)": [[41, "nltk.classify.tadm.config_tadm", false]], "config_weka() (in module nltk.classify.weka)": [[44, "nltk.classify.weka.config_weka", false]], "configuration (class in nltk.parse.transitionparser)": [[176, "nltk.parse.transitionparser.Configuration", false]], "configure() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.configure", false]], "conflicts() (in module nltk.featstruct)": [[120, "nltk.featstruct.conflicts", false]], "confusion() (nltk.tag.api.taggeri method)": [[214, "nltk.tag.api.TaggerI.confusion", false]], "confusionmatrix (class in nltk.metrics.confusionmatrix)": [[147, "nltk.metrics.confusionmatrix.ConfusionMatrix", false]], "conll_demo() (in module nltk.parse.dependencygraph)": [[164, "nltk.parse.dependencygraph.conll_demo", false]], "conll_file_demo() (in module nltk.parse.dependencygraph)": [[164, "nltk.parse.dependencygraph.conll_file_demo", false]], "conllchunkcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.ConllChunkCorpusReader", false]], "conllchunkcorpusreader (class in nltk.corpus.reader.conll)": [[69, "nltk.corpus.reader.conll.ConllChunkCorpusReader", false]], "conllcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.ConllCorpusReader", false]], "conllcorpusreader (class in nltk.corpus.reader.conll)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader", false]], "conllesp() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.conllesp", false]], "conllned() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.conllned", false]], "conllsrlinstance (class in nltk.corpus.reader.conll)": [[69, "nltk.corpus.reader.conll.ConllSRLInstance", false]], "conllsrlinstancelist (class in nltk.corpus.reader.conll)": [[69, "nltk.corpus.reader.conll.ConllSRLInstanceList", false]], "conllstr2tree() (in module nltk.chunk.util)": [[29, "nltk.chunk.util.conllstr2tree", false]], "conlltags2tree() (in module nltk.chunk.util)": [[29, "nltk.chunk.util.conlltags2tree", false]], "connect_graph() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.connect_graph", false]], "constantexpression (class in nltk.sem.linearlogic)": [[190, "nltk.sem.linearlogic.ConstantExpression", false]], "constantexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.ConstantExpression", false]], "constants (class in nltk.sem.hole)": [[188, "nltk.sem.hole.Constants", false]], "constants() (nltk.sem.logic.applicationexpression method)": [[191, "nltk.sem.logic.ApplicationExpression.constants", false]], "constants() (nltk.sem.logic.constantexpression method)": [[191, "nltk.sem.logic.ConstantExpression.constants", false]], "constants() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.constants", false]], "constants() (nltk.sem.logic.functionvariableexpression method)": [[191, "nltk.sem.logic.FunctionVariableExpression.constants", false]], "constants() (nltk.sem.logic.individualvariableexpression method)": [[191, "nltk.sem.logic.IndividualVariableExpression.constants", false]], "constraint (class in nltk.sem.hole)": [[188, "nltk.sem.hole.Constraint", false]], "contact (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.contact", false]], "contains() (nltk.grammar.dependencygrammar method)": [[121, "nltk.grammar.DependencyGrammar.contains", false]], "contains() (nltk.grammar.probabilisticdependencygrammar method)": [[121, "nltk.grammar.ProbabilisticDependencyGrammar.contains", false]], "contains_address() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.contains_address", false]], "contains_cycle() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.contains_cycle", false]], "context() (nltk.tag.sequential.affixtagger method)": [[223, "nltk.tag.sequential.AffixTagger.context", false]], "context() (nltk.tag.sequential.contexttagger method)": [[223, "nltk.tag.sequential.ContextTagger.context", false]], "context() (nltk.tag.sequential.ngramtagger method)": [[223, "nltk.tag.sequential.NgramTagger.context", false]], "context() (nltk.tag.sequential.unigramtagger method)": [[223, "nltk.tag.sequential.UnigramTagger.context", false]], "context_counts() (nltk.lm.api.languagemodel method)": [[136, "nltk.lm.api.LanguageModel.context_counts", false]], "contextindex (class in nltk.text)": [[234, "nltk.text.ContextIndex", false]], "contexts() (nltk.misc.minimalset.minimalset method)": [[156, "nltk.misc.minimalset.MinimalSet.contexts", false]], "contexttagger (class in nltk.tag.sequential)": [[223, "nltk.tag.sequential.ContextTagger", false]], "contingencymeasures (class in nltk.metrics.association)": [[146, "nltk.metrics.association.ContingencyMeasures", false]], "contractions2 (nltk.tokenize.destructive.macintyrecontractions attribute)": [[239, "nltk.tokenize.destructive.MacIntyreContractions.CONTRACTIONS2", false]], "contractions2 (nltk.tokenize.destructive.nltkwordtokenizer attribute)": [[239, "nltk.tokenize.destructive.NLTKWordTokenizer.CONTRACTIONS2", false]], "contractions2 (nltk.tokenize.treebank.treebankworddetokenizer attribute)": [[253, "nltk.tokenize.treebank.TreebankWordDetokenizer.CONTRACTIONS2", false]], "contractions2 (nltk.tokenize.treebank.treebankwordtokenizer attribute)": [[253, "nltk.tokenize.treebank.TreebankWordTokenizer.CONTRACTIONS2", false]], "contractions3 (nltk.tokenize.destructive.macintyrecontractions attribute)": [[239, "nltk.tokenize.destructive.MacIntyreContractions.CONTRACTIONS3", false]], "contractions3 (nltk.tokenize.destructive.nltkwordtokenizer attribute)": [[239, "nltk.tokenize.destructive.NLTKWordTokenizer.CONTRACTIONS3", false]], "contractions3 (nltk.tokenize.treebank.treebankworddetokenizer attribute)": [[253, "nltk.tokenize.treebank.TreebankWordDetokenizer.CONTRACTIONS3", false]], "contractions3 (nltk.tokenize.treebank.treebankwordtokenizer attribute)": [[253, "nltk.tokenize.treebank.TreebankWordTokenizer.CONTRACTIONS3", false]], "contractions4 (nltk.tokenize.destructive.macintyrecontractions attribute)": [[239, "nltk.tokenize.destructive.MacIntyreContractions.CONTRACTIONS4", false]], "converse() (nltk.chat.util.chat method)": [[23, "nltk.chat.util.Chat.converse", false]], "convert() (nltk.tree.immutable.immutableprobabilistictree class method)": [[276, "nltk.tree.immutable.ImmutableProbabilisticTree.convert", false]], "convert() (nltk.tree.immutableprobabilistictree class method)": [[275, "nltk.tree.ImmutableProbabilisticTree.convert", false]], "convert() (nltk.tree.probabilistic.probabilistictree class method)": [[280, "nltk.tree.probabilistic.ProbabilisticTree.convert", false]], "convert() (nltk.tree.probabilistictree class method)": [[275, "nltk.tree.ProbabilisticTree.convert", false]], "convert() (nltk.tree.tree class method)": [[275, "nltk.tree.Tree.convert", false]], "convert() (nltk.tree.tree.tree class method)": [[282, "nltk.tree.tree.Tree.convert", false]], "convert_age() (nltk.corpus.reader.childes.childescorpusreader method)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.convert_age", false]], "convert_age() (nltk.corpus.reader.childescorpusreader method)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.convert_age", false]], "convert_parentheses (nltk.tokenize.destructive.nltkwordtokenizer attribute)": [[239, "nltk.tokenize.destructive.NLTKWordTokenizer.CONVERT_PARENTHESES", false]], "convert_parentheses (nltk.tokenize.treebank.treebankworddetokenizer attribute)": [[253, "nltk.tokenize.treebank.TreebankWordDetokenizer.CONVERT_PARENTHESES", false]], "convert_parentheses (nltk.tokenize.treebank.treebankwordtokenizer attribute)": [[253, "nltk.tokenize.treebank.TreebankWordTokenizer.CONVERT_PARENTHESES", false]], "convert_to_prover9() (in module nltk.inference.prover9)": [[128, "nltk.inference.prover9.convert_to_prover9", false]], "cooperstore (class in nltk.sem.cooper_storage)": [[183, "nltk.sem.cooper_storage.CooperStore", false]], "copy() (nltk.collections.ordereddict method)": [[52, "nltk.collections.OrderedDict.copy", false]], "copy() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.copy", false]], "copy() (nltk.probability.conditionalfreqdist method)": [[179, "nltk.probability.ConditionalFreqDist.copy", false]], "copy() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.copy", false]], "copy() (nltk.sem.evaluate.assignment method)": [[186, "nltk.sem.evaluate.Assignment.copy", false]], "copy() (nltk.tree.immutable.immutableprobabilistictree method)": [[276, "nltk.tree.immutable.ImmutableProbabilisticTree.copy", false]], "copy() (nltk.tree.immutableprobabilistictree method)": [[275, "nltk.tree.ImmutableProbabilisticTree.copy", false]], "copy() (nltk.tree.parented.parentedtree method)": [[277, "nltk.tree.parented.ParentedTree.copy", false]], "copy() (nltk.tree.parentedtree method)": [[275, "nltk.tree.ParentedTree.copy", false]], "copy() (nltk.tree.probabilistic.probabilistictree method)": [[280, "nltk.tree.probabilistic.ProbabilisticTree.copy", false]], "copy() (nltk.tree.probabilistictree method)": [[275, "nltk.tree.ProbabilisticTree.copy", false]], "copy() (nltk.tree.tree method)": [[275, "nltk.tree.Tree.copy", false]], "copy() (nltk.tree.tree.tree method)": [[282, "nltk.tree.tree.Tree.copy", false]], "copyright (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.copyright", false]], "corenlpdependencyparser (class in nltk.parse.corenlp)": [[163, "nltk.parse.corenlp.CoreNLPDependencyParser", false]], "corenlpparser (class in nltk.parse.corenlp)": [[163, "nltk.parse.corenlp.CoreNLPParser", false]], "corenlpserver (class in nltk.parse.corenlp)": [[163, "nltk.parse.corenlp.CoreNLPServer", false]], "corenlpservererror": [[163, "nltk.parse.corenlp.CoreNLPServerError", false]], "corpora() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.corpora", false]], "corpus() (nltk.corpus.reader.childes.childescorpusreader method)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.corpus", false]], "corpus() (nltk.corpus.reader.childescorpusreader method)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.corpus", false]], "corpus_bleu() (in module nltk.translate.bleu_score)": [[258, "nltk.translate.bleu_score.corpus_bleu", false]], "corpus_chrf() (in module nltk.translate.chrf_score)": [[259, "nltk.translate.chrf_score.corpus_chrf", false]], "corpus_gleu() (in module nltk.translate.gleu_score)": [[262, "nltk.translate.gleu_score.corpus_gleu", false]], "corpus_nist() (in module nltk.translate.nist_score)": [[271, "nltk.translate.nist_score.corpus_nist", false]], "corpus_ribes() (in module nltk.translate.ribes_score)": [[273, "nltk.translate.ribes_score.corpus_ribes", false]], "corpus_size() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.corpus_size", false]], "corpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.CorpusReader", false]], "corpusreader (class in nltk.corpus.reader.api)": [[59, "nltk.corpus.reader.api.CorpusReader", false]], "corpusreader_demo() (in module nltk.twitter.twitter_demo)": [[288, "nltk.twitter.twitter_demo.corpusreader_demo", false]], "corpusview (nltk.corpus.reader.categorized_sents.categorizedsentencescorpusreader attribute)": [[63, "nltk.corpus.reader.categorized_sents.CategorizedSentencesCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.categorizedsentencescorpusreader attribute)": [[57, "nltk.corpus.reader.CategorizedSentencesCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.comparative_sents.comparativesentencescorpusreader attribute)": [[68, "nltk.corpus.reader.comparative_sents.ComparativeSentencesCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.comparativesentencescorpusreader attribute)": [[57, "nltk.corpus.reader.ComparativeSentencesCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.opinion_lexicon.opinionlexiconcorpusreader attribute)": [[83, "nltk.corpus.reader.opinion_lexicon.OpinionLexiconCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.opinionlexiconcorpusreader attribute)": [[57, "nltk.corpus.reader.OpinionLexiconCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.plaintext.plaintextcorpusreader attribute)": [[87, "nltk.corpus.reader.plaintext.PlaintextCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.plaintextcorpusreader attribute)": [[57, "nltk.corpus.reader.PlaintextCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.pros_cons.prosconscorpusreader attribute)": [[90, "nltk.corpus.reader.pros_cons.ProsConsCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.prosconscorpusreader attribute)": [[57, "nltk.corpus.reader.ProsConsCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.reviews.reviewscorpusreader attribute)": [[91, "nltk.corpus.reader.reviews.ReviewsCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.reviewscorpusreader attribute)": [[57, "nltk.corpus.reader.ReviewsCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.twitter.twittercorpusreader attribute)": [[102, "nltk.corpus.reader.twitter.TwitterCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.twittercorpusreader attribute)": [[57, "nltk.corpus.reader.TwitterCorpusReader.CorpusView", false]], "correct() (nltk.chunk.util.chunkscore method)": [[29, "nltk.chunk.util.ChunkScore.correct", false]], "cosine_distance() (in module nltk.cluster.util)": [[51, "nltk.cluster.util.cosine_distance", false]], "count() (nltk.collections.abstractlazysequence method)": [[52, "nltk.collections.AbstractLazySequence.count", false]], "count() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.count", false]], "count() (nltk.text.text method)": [[234, "nltk.text.Text.count", false]], "counter (class in nltk.internals)": [[131, "nltk.internals.Counter", false]], "counter (nltk.twitter.api.basictweethandler attribute)": [[286, "nltk.twitter.api.BasicTweetHandler.counter", false]], "counts (class in nltk.translate.ibm_model)": [[268, "nltk.translate.ibm_model.Counts", false]], "credsfromfile() (in module nltk.twitter.util)": [[290, "nltk.twitter.util.credsfromfile", false]], "crftagger (class in nltk.tag.crf)": [[217, "nltk.tag.crf.CRFTagger", false]], "crosseddirs() (in module nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.crossedDirs", false]], "crossvalidationprobdist (class in nltk.probability)": [[179, "nltk.probability.CrossValidationProbDist", false]], "crubadan_to_iso() (nltk.corpus.reader.crubadan.crubadancorpusreader method)": [[70, "nltk.corpus.reader.crubadan.CrubadanCorpusReader.crubadan_to_iso", false]], "crubadan_to_iso() (nltk.corpus.reader.crubadancorpusreader method)": [[57, "nltk.corpus.reader.CrubadanCorpusReader.crubadan_to_iso", false]], "crubadancorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.CrubadanCorpusReader", false]], "crubadancorpusreader (class in nltk.corpus.reader.crubadan)": [[70, "nltk.corpus.reader.crubadan.CrubadanCorpusReader", false]], "currency_sym (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.CURRENCY_SYM", false]], "currency_sym_re (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.CURRENCY_SYM_RE", false]], "current_chartrule() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.current_chartrule", false]], "currently_complete() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.currently_complete", false]], "curselection() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.curselection", false]], "custom_distance() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.custom_distance", false]], "custom_lemmas() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.custom_lemmas", false]], "custom_lemmas() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.custom_lemmas", false]], "cut_string() (in module nltk.util)": [[291, "nltk.util.cut_string", false]], "cutoff (nltk.lm.vocabulary property)": [[135, "nltk.lm.Vocabulary.cutoff", false]], "cutoff (nltk.lm.vocabulary.vocabulary property)": [[142, "nltk.lm.vocabulary.Vocabulary.cutoff", false]], "cutoffchecker (class in nltk.classify.util)": [[43, "nltk.classify.util.CutoffChecker", false]], "cycle_finding_demo() (in module nltk.parse.dependencygraph)": [[164, "nltk.parse.dependencygraph.cycle_finding_demo", false]], "cyclic() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.cyclic", false]], "d_neg (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.D_NEG", false]], "danishstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.DanishStemmer", false]], "dash_preceed_digit (nltk.tokenize.nist.nisttokenizer attribute)": [[242, "nltk.tokenize.nist.NISTTokenizer.DASH_PRECEED_DIGIT", false]], "data_dict() (nltk.corpus.reader.bcp47.bcp47corpusreader method)": [[60, "nltk.corpus.reader.bcp47.BCP47CorpusReader.data_dict", false]], "data_dict() (nltk.corpus.reader.bcp47corpusreader method)": [[57, "nltk.corpus.reader.BCP47CorpusReader.data_dict", false]], "data_section() (nltk.classify.weka.arff_formatter method)": [[44, "nltk.classify.weka.ARFF_Formatter.data_section", false]], "debug (class in nltk.inference.tableau)": [[130, "nltk.inference.tableau.Debug", false]], "debug (nltk.data.seekableunicodestreamreader attribute)": [[111, "nltk.data.SeekableUnicodeStreamReader.DEBUG", false]], "debug_decisions() (nltk.tokenize.punkt.punktsentencetokenizer method)": [[243, "nltk.tokenize.punkt.PunktSentenceTokenizer.debug_decisions", false]], "debugobject (class in nltk.inference.resolution)": [[129, "nltk.inference.resolution.DebugObject", false]], "decisiontreeclassifier (class in nltk.classify.decisiontree)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier", false]], "decode (nltk.data.seekableunicodestreamreader attribute)": [[111, "nltk.data.SeekableUnicodeStreamReader.decode", false]], "decode() (nltk.jsontags.jsontaggeddecoder method)": [[132, "nltk.jsontags.JSONTaggedDecoder.decode", false]], "decode_json_obj() (nltk.tag.brill.brilltagger class method)": [[215, "nltk.tag.brill.BrillTagger.decode_json_obj", false]], "decode_json_obj() (nltk.tag.perceptron.averagedperceptron class method)": [[221, "nltk.tag.perceptron.AveragedPerceptron.decode_json_obj", false]], "decode_json_obj() (nltk.tag.perceptron.perceptrontagger class method)": [[221, "nltk.tag.perceptron.PerceptronTagger.decode_json_obj", false]], "decode_json_obj() (nltk.tag.sequential.affixtagger class method)": [[223, "nltk.tag.sequential.AffixTagger.decode_json_obj", false]], "decode_json_obj() (nltk.tag.sequential.defaulttagger class method)": [[223, "nltk.tag.sequential.DefaultTagger.decode_json_obj", false]], "decode_json_obj() (nltk.tag.sequential.ngramtagger class method)": [[223, "nltk.tag.sequential.NgramTagger.decode_json_obj", false]], "decode_json_obj() (nltk.tag.sequential.regexptagger class method)": [[223, "nltk.tag.sequential.RegexpTagger.decode_json_obj", false]], "decode_json_obj() (nltk.tbl.feature.feature class method)": [[231, "nltk.tbl.feature.Feature.decode_json_obj", false]], "decode_json_obj() (nltk.tbl.rule.rule class method)": [[232, "nltk.tbl.rule.Rule.decode_json_obj", false]], "decode_obj() (nltk.jsontags.jsontaggeddecoder class method)": [[132, "nltk.jsontags.JSONTaggedDecoder.decode_obj", false]], "decode_result() (in module nltk.inference.mace)": [[126, "nltk.inference.mace.decode_result", false]], "decode_tag() (nltk.corpus.reader.pl196x.pl196xcorpusreader method)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader.decode_tag", false]], "decode_tag() (nltk.corpus.reader.pl196xcorpusreader method)": [[57, "nltk.corpus.reader.Pl196xCorpusReader.decode_tag", false]], "decorate_proof() (nltk.inference.api.baseprovercommand method)": [[124, "nltk.inference.api.BaseProverCommand.decorate_proof", false]], "decorate_proof() (nltk.inference.api.provercommanddecorator method)": [[124, "nltk.inference.api.ProverCommandDecorator.decorate_proof", false]], "decorate_proof() (nltk.inference.prover9.prover9command method)": [[128, "nltk.inference.prover9.Prover9Command.decorate_proof", false]], "decorator() (in module nltk.decorators)": [[112, "nltk.decorators.decorator", false]], "deepcopy() (nltk.probability.conditionalfreqdist method)": [[179, "nltk.probability.ConditionalFreqDist.deepcopy", false]], "default (nltk.featstruct.feature property)": [[120, "nltk.featstruct.Feature.default", false]], "default() (nltk.jsontags.jsontaggedencoder method)": [[132, "nltk.jsontags.JSONTaggedEncoder.default", false]], "default_column_width (nltk.downloader.downloadergui attribute)": [[113, "nltk.downloader.DownloaderGUI.DEFAULT_COLUMN_WIDTH", false]], "default_config() (nltk.tokenize.stanford_segmenter.stanfordsegmenter method)": [[250, "nltk.tokenize.stanford_segmenter.StanfordSegmenter.default_config", false]], "default_download_dir() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.default_download_dir", false]], "default_reasoning_demo() (in module nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.default_reasoning_demo", false]], "default_rule_tuple (nltk.stem.lancaster.lancasterstemmer attribute)": [[205, "nltk.stem.lancaster.LancasterStemmer.default_rule_tuple", false]], "default_url (nltk.downloader.downloader attribute)": [[113, "nltk.downloader.Downloader.DEFAULT_URL", false]], "default_ws (nltk.collocations.bigramcollocationfinder attribute)": [[53, "nltk.collocations.BigramCollocationFinder.default_ws", false]], "default_ws (nltk.collocations.quadgramcollocationfinder attribute)": [[53, "nltk.collocations.QuadgramCollocationFinder.default_ws", false]], "default_ws (nltk.collocations.trigramcollocationfinder attribute)": [[53, "nltk.collocations.TrigramCollocationFinder.default_ws", false]], "defaulttagger (class in nltk.tag.sequential)": [[223, "nltk.tag.sequential.DefaultTagger", false]], "definition() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.definition", false]], "delete() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.delete", false]], "delta() (in module nltk.metrics.aline)": [[145, "nltk.metrics.aline.delta", false]], "demo() (in module nltk)": [[0, "nltk.demo", false]], "demo() (in module nltk.ccg.chart)": [[14, "nltk.ccg.chart.demo", false]], "demo() (in module nltk.chat.eliza)": [[19, "nltk.chat.eliza.demo", false]], "demo() (in module nltk.chat.iesha)": [[20, "nltk.chat.iesha.demo", false]], "demo() (in module nltk.chat.rude)": [[21, "nltk.chat.rude.demo", false]], "demo() (in module nltk.chat.suntsu)": [[22, "nltk.chat.suntsu.demo", false]], "demo() (in module nltk.chat.zen)": [[24, "nltk.chat.zen.demo", false]], "demo() (in module nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.demo", false]], "demo() (in module nltk.chunk.util)": [[29, "nltk.chunk.util.demo", false]], "demo() (in module nltk.classify.decisiontree)": [[32, "nltk.classify.decisiontree.demo", false]], "demo() (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.demo", false]], "demo() (in module nltk.classify.naivebayes)": [[35, "nltk.classify.naivebayes.demo", false]], "demo() (in module nltk.classify.positivenaivebayes)": [[36, "nltk.classify.positivenaivebayes.demo", false]], "demo() (in module nltk.classify.textcat)": [[42, "nltk.classify.textcat.demo", false]], "demo() (in module nltk.cluster.em)": [[48, "nltk.cluster.em.demo", false]], "demo() (in module nltk.cluster.gaac)": [[49, "nltk.cluster.gaac.demo", false]], "demo() (in module nltk.cluster.kmeans)": [[50, "nltk.cluster.kmeans.demo", false]], "demo() (in module nltk.corpus)": [[55, "nltk.corpus.demo", false]], "demo() (in module nltk.corpus.reader.chasen)": [[64, "nltk.corpus.reader.chasen.demo", false]], "demo() (in module nltk.corpus.reader.childes)": [[65, "nltk.corpus.reader.childes.demo", false]], "demo() (in module nltk.corpus.reader.framenet)": [[72, "nltk.corpus.reader.framenet.demo", false]], "demo() (in module nltk.corpus.reader.knbc)": [[76, "nltk.corpus.reader.knbc.demo", false]], "demo() (in module nltk.corpus.reader.lin)": [[77, "nltk.corpus.reader.lin.demo", false]], "demo() (in module nltk.corpus.reader.toolbox)": [[101, "nltk.corpus.reader.toolbox.demo", false]], "demo() (in module nltk.draw.cfg)": [[115, "nltk.draw.cfg.demo", false]], "demo() (in module nltk.draw.table)": [[117, "nltk.draw.table.demo", false]], "demo() (in module nltk.draw.tree)": [[118, "nltk.draw.tree.demo", false]], "demo() (in module nltk.draw.util)": [[119, "nltk.draw.util.demo", false]], "demo() (in module nltk.inference.discourse)": [[125, "nltk.inference.discourse.demo", false]], "demo() (in module nltk.inference.mace)": [[126, "nltk.inference.mace.demo", false]], "demo() (in module nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.demo", false]], "demo() (in module nltk.inference.prover9)": [[128, "nltk.inference.prover9.demo", false]], "demo() (in module nltk.inference.resolution)": [[129, "nltk.inference.resolution.demo", false]], "demo() (in module nltk.inference.tableau)": [[130, "nltk.inference.tableau.demo", false]], "demo() (in module nltk.metrics.aline)": [[145, "nltk.metrics.aline.demo", false]], "demo() (in module nltk.metrics.confusionmatrix)": [[147, "nltk.metrics.confusionmatrix.demo", false]], "demo() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.demo", false]], "demo() (in module nltk.metrics.paice)": [[149, "nltk.metrics.paice.demo", false]], "demo() (in module nltk.metrics.scores)": [[150, "nltk.metrics.scores.demo", false]], "demo() (in module nltk.misc.sort)": [[157, "nltk.misc.sort.demo", false]], "demo() (in module nltk.parse.chart)": [[162, "nltk.parse.chart.demo", false]], "demo() (in module nltk.parse.dependencygraph)": [[164, "nltk.parse.dependencygraph.demo", false]], "demo() (in module nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.demo", false]], "demo() (in module nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.demo", false]], "demo() (in module nltk.parse.generate)": [[168, "nltk.parse.generate.demo", false]], "demo() (in module nltk.parse.nonprojectivedependencyparser)": [[170, "nltk.parse.nonprojectivedependencyparser.demo", false]], "demo() (in module nltk.parse.pchart)": [[171, "nltk.parse.pchart.demo", false]], "demo() (in module nltk.parse.projectivedependencyparser)": [[172, "nltk.parse.projectivedependencyparser.demo", false]], "demo() (in module nltk.parse.recursivedescent)": [[173, "nltk.parse.recursivedescent.demo", false]], "demo() (in module nltk.parse.shiftreduce)": [[174, "nltk.parse.shiftreduce.demo", false]], "demo() (in module nltk.parse.transitionparser)": [[176, "nltk.parse.transitionparser.demo", false]], "demo() (in module nltk.parse.viterbi)": [[178, "nltk.parse.viterbi.demo", false]], "demo() (in module nltk.sem.cooper_storage)": [[183, "nltk.sem.cooper_storage.demo", false]], "demo() (in module nltk.sem.drt)": [[184, "nltk.sem.drt.demo", false]], "demo() (in module nltk.sem.drt_glue_demo)": [[185, "nltk.sem.drt_glue_demo.demo", false]], "demo() (in module nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.demo", false]], "demo() (in module nltk.sem.glue)": [[187, "nltk.sem.glue.demo", false]], "demo() (in module nltk.sem.linearlogic)": [[190, "nltk.sem.linearlogic.demo", false]], "demo() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.demo", false]], "demo() (in module nltk.sem.util)": [[194, "nltk.sem.util.demo", false]], "demo() (in module nltk.stem.porter)": [[206, "nltk.stem.porter.demo", false]], "demo() (in module nltk.stem.snowball)": [[209, "nltk.stem.snowball.demo", false]], "demo() (in module nltk.tag.hmm)": [[218, "nltk.tag.hmm.demo", false]], "demo() (in module nltk.tag.tnt)": [[225, "nltk.tag.tnt.demo", false]], "demo() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo", false]], "demo() (in module nltk.tokenize.punkt)": [[243, "nltk.tokenize.punkt.demo", false]], "demo() (in module nltk.tokenize.texttiling)": [[251, "nltk.tokenize.texttiling.demo", false]], "demo() (in module nltk.toolbox)": [[255, "nltk.toolbox.demo", false]], "demo2() (in module nltk.draw.cfg)": [[115, "nltk.draw.cfg.demo2", false]], "demo2() (in module nltk.tag.tnt)": [[225, "nltk.tag.tnt.demo2", false]], "demo3() (in module nltk.draw.cfg)": [[115, "nltk.draw.cfg.demo3", false]], "demo3() (in module nltk.tag.tnt)": [[225, "nltk.tag.tnt.demo3", false]], "demo_bw() (in module nltk.tag.hmm)": [[218, "nltk.tag.hmm.demo_bw", false]], "demo_error_analysis() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo_error_analysis", false]], "demo_errors() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.demo_errors", false]], "demo_eval() (in module nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.demo_eval", false]], "demo_generated_templates() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo_generated_templates", false]], "demo_grammar() (in module nltk.parse.chart)": [[162, "nltk.parse.chart.demo_grammar", false]], "demo_grammar() (in module nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.demo_grammar", false]], "demo_high_accuracy_rules() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo_high_accuracy_rules", false]], "demo_learning_curve() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo_learning_curve", false]], "demo_legacy_grammar() (in module nltk.sem.util)": [[194, "nltk.sem.util.demo_legacy_grammar", false]], "demo_liu_hu_lexicon() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.demo_liu_hu_lexicon", false]], "demo_model0() (in module nltk.sem.util)": [[194, "nltk.sem.util.demo_model0", false]], "demo_movie_reviews() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.demo_movie_reviews", false]], "demo_multifeature_template() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo_multifeature_template", false]], "demo_multiposition_feature() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo_multiposition_feature", false]], "demo_pos() (in module nltk.tag.hmm)": [[218, "nltk.tag.hmm.demo_pos", false]], "demo_pos_bw() (in module nltk.tag.hmm)": [[218, "nltk.tag.hmm.demo_pos_bw", false]], "demo_read_depgraph() (in module nltk.sem.lfg)": [[189, "nltk.sem.lfg.demo_read_depgraph", false]], "demo_repr_rule_format() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo_repr_rule_format", false]], "demo_sent_subjectivity() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.demo_sent_subjectivity", false]], "demo_serialize_tagger() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo_serialize_tagger", false]], "demo_str_rule_format() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo_str_rule_format", false]], "demo_subjectivity() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.demo_subjectivity", false]], "demo_template_statistics() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo_template_statistics", false]], "demo_tweets() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.demo_tweets", false]], "demo_vader_instance() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.demo_vader_instance", false]], "demo_vader_tweets() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.demo_vader_tweets", false]], "demo_verbose_rule_format() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo_verbose_rule_format", false]], "demoexception() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.demoException", false]], "demoscorer (class in nltk.parse.nonprojectivedependencyparser)": [[170, "nltk.parse.nonprojectivedependencyparser.DemoScorer", false]], "dendrogram (class in nltk.cluster.util)": [[51, "nltk.cluster.util.Dendrogram", false]], "dendrogram() (nltk.cluster.gaac.gaaclusterer method)": [[49, "nltk.cluster.gaac.GAAClusterer.dendrogram", false]], "denominator (nltk.translate.bleu_score.fraction property)": [[258, "nltk.translate.bleu_score.Fraction.denominator", false]], "dep_parse() (nltk.sem.glue.glue method)": [[187, "nltk.sem.glue.Glue.dep_parse", false]], "dependencycorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.DependencyCorpusReader", false]], "dependencycorpusreader (class in nltk.corpus.reader.dependency)": [[71, "nltk.corpus.reader.dependency.DependencyCorpusReader", false]], "dependencycorpusview (class in nltk.corpus.reader.dependency)": [[71, "nltk.corpus.reader.dependency.DependencyCorpusView", false]], "dependencyevaluator (class in nltk.parse.evaluate)": [[166, "nltk.parse.evaluate.DependencyEvaluator", false]], "dependencygrammar (class in nltk.grammar)": [[121, "nltk.grammar.DependencyGrammar", false]], "dependencygraph (class in nltk.parse.dependencygraph)": [[164, "nltk.parse.dependencygraph.DependencyGraph", false]], "dependencygrapherror": [[164, "nltk.parse.dependencygraph.DependencyGraphError", false]], "dependencyproduction (class in nltk.grammar)": [[121, "nltk.grammar.DependencyProduction", false]], "dependencyscoreri (class in nltk.parse.nonprojectivedependencyparser)": [[170, "nltk.parse.nonprojectivedependencyparser.DependencyScorerI", false]], "dependencyspan (class in nltk.parse.projectivedependencyparser)": [[172, "nltk.parse.projectivedependencyparser.DependencySpan", false]], "depgraph_to_glue() (nltk.sem.glue.glue method)": [[187, "nltk.sem.glue.Glue.depgraph_to_glue", false]], "deprecated (class in nltk.internals)": [[131, "nltk.internals.Deprecated", false]], "deprecated() (in module nltk.internals)": [[131, "nltk.internals.deprecated", false]], "derivationally_related_forms() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.derivationally_related_forms", false]], "descape_entity() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.descape_entity", false]], "descr() (nltk.chunk.regexp.regexpchunkrule method)": [[28, "nltk.chunk.regexp.RegexpChunkRule.descr", false]], "describe() (nltk.classify.maxent.binarymaxentfeatureencoding method)": [[33, "nltk.classify.maxent.BinaryMaxentFeatureEncoding.describe", false]], "describe() (nltk.classify.maxent.functionbackedmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.FunctionBackedMaxentFeatureEncoding.describe", false]], "describe() (nltk.classify.maxent.gisencoding method)": [[33, "nltk.classify.maxent.GISEncoding.describe", false]], "describe() (nltk.classify.maxent.maxentfeatureencodingi method)": [[33, "nltk.classify.maxent.MaxentFeatureEncodingI.describe", false]], "describe() (nltk.classify.maxent.tadmeventmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.TadmEventMaxentFeatureEncoding.describe", false]], "describe() (nltk.classify.maxent.typedmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.TypedMaxentFeatureEncoding.describe", false]], "describe_template_sets() (in module nltk.tag.brill)": [[215, "nltk.tag.brill.describe_template_sets", false]], "destroy() (nltk.downloader.downloadergui method)": [[113, "nltk.downloader.DownloaderGUI.destroy", false]], "destroy() (nltk.draw.cfg.cfgdemo method)": [[115, "nltk.draw.cfg.CFGDemo.destroy", false]], "destroy() (nltk.draw.tree.treeview method)": [[118, "nltk.draw.tree.TreeView.destroy", false]], "destroy() (nltk.draw.util.canvasframe method)": [[119, "nltk.draw.util.CanvasFrame.destroy", false]], "destroy() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.destroy", false]], "destroy() (nltk.draw.util.mutableoptionmenu method)": [[119, "nltk.draw.util.MutableOptionMenu.destroy", false]], "destroy() (nltk.draw.util.showtext method)": [[119, "nltk.draw.util.ShowText.destroy", false]], "destroy() (nltk.sem.drt_glue_demo.drtgluedemo method)": [[185, "nltk.sem.drt_glue_demo.DrtGlueDemo.destroy", false]], "destroy_widget() (nltk.draw.util.canvasframe method)": [[119, "nltk.draw.util.CanvasFrame.destroy_widget", false]], "detokenize() (nltk.tokenize.treebank.treebankworddetokenizer method)": [[253, "nltk.tokenize.treebank.TreebankWordDetokenizer.detokenize", false]], "dice() (nltk.metrics.association.bigramassocmeasures static method)": [[146, "nltk.metrics.association.BigramAssocMeasures.dice", false]], "dict() (nltk.corpus.reader.cmudict.cmudictcorpusreader method)": [[67, "nltk.corpus.reader.cmudict.CMUDictCorpusReader.dict", false]], "dict() (nltk.corpus.reader.cmudictcorpusreader method)": [[57, "nltk.corpus.reader.CMUDictCorpusReader.dict", false]], "dict2tab() (nltk.tabdata.tabencoder method)": [[212, "nltk.tabdata.TabEncoder.dict2tab", false]], "dictionaryconditionalprobdist (class in nltk.probability)": [[179, "nltk.probability.DictionaryConditionalProbDist", false]], "dictionaryprobdist (class in nltk.probability)": [[179, "nltk.probability.DictionaryProbDist", false]], "diff() (in module nltk.metrics.aline)": [[145, "nltk.metrics.aline.diff", false]], "digraph() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.digraph", false]], "digraph() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.digraph", false]], "dir() (nltk.ccg.api.direction method)": [[13, "nltk.ccg.api.Direction.dir", false]], "dir() (nltk.ccg.api.functionalcategory method)": [[13, "nltk.ccg.api.FunctionalCategory.dir", false]], "directedbinarycombinator (class in nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.DirectedBinaryCombinator", false]], "direction (class in nltk.ccg.api)": [[13, "nltk.ccg.api.Direction", false]], "disable_custom_lemmas() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.disable_custom_lemmas", false]], "disable_custom_lemmas() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.disable_custom_lemmas", false]], "disagreement() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.Disagreement", false]], "discard_line() (nltk.data.seekableunicodestreamreader method)": [[111, "nltk.data.SeekableUnicodeStreamReader.discard_line", false]], "discount() (nltk.probability.crossvalidationprobdist method)": [[179, "nltk.probability.CrossValidationProbDist.discount", false]], "discount() (nltk.probability.heldoutprobdist method)": [[179, "nltk.probability.HeldoutProbDist.discount", false]], "discount() (nltk.probability.kneserneyprobdist method)": [[179, "nltk.probability.KneserNeyProbDist.discount", false]], "discount() (nltk.probability.lidstoneprobdist method)": [[179, "nltk.probability.LidstoneProbDist.discount", false]], "discount() (nltk.probability.probdisti method)": [[179, "nltk.probability.ProbDistI.discount", false]], "discount() (nltk.probability.simplegoodturingprobdist method)": [[179, "nltk.probability.SimpleGoodTuringProbDist.discount", false]], "discount() (nltk.probability.wittenbellprobdist method)": [[179, "nltk.probability.WittenBellProbDist.discount", false]], "discourse_demo() (in module nltk.inference.discourse)": [[125, "nltk.inference.discourse.discourse_demo", false]], "discourses() (nltk.corpus.reader.switchboard.switchboardcorpusreader method)": [[98, "nltk.corpus.reader.switchboard.SwitchboardCorpusReader.discourses", false]], "discourses() (nltk.corpus.reader.switchboardcorpusreader method)": [[57, "nltk.corpus.reader.SwitchboardCorpusReader.discourses", false]], "discoursetester (class in nltk.inference.discourse)": [[125, "nltk.inference.discourse.DiscourseTester", false]], "dispersion_plot() (in module nltk.draw.dispersion)": [[116, "nltk.draw.dispersion.dispersion_plot", false]], "dispersion_plot() (nltk.text.text method)": [[234, "nltk.text.Text.dispersion_plot", false]], "display (nltk.featstruct.feature property)": [[120, "nltk.featstruct.Feature.display", false]], "display() (nltk.misc.minimalset.minimalset method)": [[156, "nltk.misc.minimalset.MinimalSet.display", false]], "display_all() (nltk.misc.minimalset.minimalset method)": [[156, "nltk.misc.minimalset.MinimalSet.display_all", false]], "distortion_factor (nltk.translate.stack_decoder.stackdecoder property)": [[274, "nltk.translate.stack_decoder.StackDecoder.distortion_factor", false]], "distortion_score() (nltk.translate.stack_decoder.stackdecoder method)": [[274, "nltk.translate.stack_decoder.StackDecoder.distortion_score", false]], "do_continue() (nltk.twitter.api.basictweethandler method)": [[286, "nltk.twitter.api.BasicTweetHandler.do_continue", false]], "do_continue() (nltk.twitter.twitterclient.tweetwriter method)": [[289, "nltk.twitter.twitterclient.TweetWriter.do_continue", false]], "do_kw() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.Do_Kw", false]], "do_kw_pairwise() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.Do_Kw_pairwise", false]], "do_stop (nltk.twitter.api.basictweethandler attribute)": [[286, "nltk.twitter.api.BasicTweetHandler.do_stop", false]], "doc() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.doc", false]], "doc() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.doc", false]], "doc() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.doc", false]], "doc() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.doc", false]], "docs() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.docs", false]], "docs() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.docs", false]], "docs() (nltk.corpus.reader.ieer.ieercorpusreader method)": [[73, "nltk.corpus.reader.ieer.IEERCorpusReader.docs", false]], "docs() (nltk.corpus.reader.ieercorpusreader method)": [[57, "nltk.corpus.reader.IEERCorpusReader.docs", false]], "docs() (nltk.corpus.reader.twitter.twittercorpusreader method)": [[102, "nltk.corpus.reader.twitter.TwitterCorpusReader.docs", false]], "docs() (nltk.corpus.reader.twittercorpusreader method)": [[57, "nltk.corpus.reader.TwitterCorpusReader.docs", false]], "docs_metadata() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.docs_metadata", false]], "docs_metadata() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.docs_metadata", false]], "documents (in module nltk.corpus.reader.ieer)": [[73, "nltk.corpus.reader.ieer.documents", false]], "documents (in module nltk.corpus.reader.ycoe)": [[109, "nltk.corpus.reader.ycoe.documents", false]], "documents() (nltk.corpus.reader.ycoe.ycoecorpusreader method)": [[109, "nltk.corpus.reader.ycoe.YCOECorpusReader.documents", false]], "documents() (nltk.corpus.reader.ycoecorpusreader method)": [[57, "nltk.corpus.reader.YCOECorpusReader.documents", false]], "domain (nltk.sem.evaluate.valuation property)": [[186, "nltk.sem.evaluate.Valuation.domain", false]], "domains() (nltk.corpus.reader.ipipan.ipipancorpusreader method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader.domains", false]], "domains() (nltk.corpus.reader.ipipancorpusreader method)": [[57, "nltk.corpus.reader.IPIPANCorpusReader.domains", false]], "dot (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.DOT", false]], "dot() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.dot", false]], "dot() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.dot", false]], "dot() (nltk.parse.chart.edgei method)": [[162, "nltk.parse.chart.EdgeI.dot", false]], "dot() (nltk.parse.chart.leafedge method)": [[162, "nltk.parse.chart.LeafEdge.dot", false]], "dot() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.dot", false]], "dot2img() (in module nltk.parse.dependencygraph)": [[164, "nltk.parse.dependencygraph.dot2img", false]], "dot_digraph() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.dot_digraph", false]], "double_dashes (nltk.tokenize.destructive.nltkwordtokenizer attribute)": [[239, "nltk.tokenize.destructive.NLTKWordTokenizer.DOUBLE_DASHES", false]], "double_dashes (nltk.tokenize.treebank.treebankworddetokenizer attribute)": [[253, "nltk.tokenize.treebank.TreebankWordDetokenizer.DOUBLE_DASHES", false]], "double_dashes (nltk.tokenize.treebank.treebankwordtokenizer attribute)": [[253, "nltk.tokenize.treebank.TreebankWordTokenizer.DOUBLE_DASHES", false]], "download() (in module nltk.downloader)": [[113, "nltk.downloader.download", false]], "download() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.download", false]], "download_dir (nltk.downloader.downloader property)": [[113, "nltk.downloader.Downloader.download_dir", false]], "download_gui() (in module nltk.downloader)": [[113, "nltk.downloader.download_gui", false]], "download_shell() (in module nltk.downloader)": [[113, "nltk.downloader.download_shell", false]], "downloader (class in nltk.downloader)": [[113, "nltk.downloader.Downloader", false]], "downloadergui (class in nltk.downloader)": [[113, "nltk.downloader.DownloaderGUI", false]], "downloadermessage (class in nltk.downloader)": [[113, "nltk.downloader.DownloaderMessage", false]], "downloadershell (class in nltk.downloader)": [[113, "nltk.downloader.DownloaderShell", false]], "draw() (nltk.sem.drt.drsdrawer method)": [[184, "nltk.sem.drt.DrsDrawer.draw", false]], "draw() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.draw", false]], "draw() (nltk.sem.drt_glue_demo.drswidget method)": [[185, "nltk.sem.drt_glue_demo.DrsWidget.draw", false]], "draw() (nltk.tree.tree method)": [[275, "nltk.tree.Tree.draw", false]], "draw() (nltk.tree.tree.tree method)": [[282, "nltk.tree.tree.Tree.draw", false]], "draw_trees() (in module nltk.draw.tree)": [[118, "nltk.draw.tree.draw_trees", false]], "drs (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DRS", false]], "drs (nltk.sem.drt.drttokens attribute)": [[184, "nltk.sem.drt.DrtTokens.DRS", false]], "drs_conc (nltk.sem.drt.drttokens attribute)": [[184, "nltk.sem.drt.DrtTokens.DRS_CONC", false]], "drsdrawer (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrsDrawer", false]], "drswidget (class in nltk.sem.drt_glue_demo)": [[185, "nltk.sem.drt_glue_demo.DrsWidget", false]], "drt_discourse_demo() (in module nltk.inference.discourse)": [[125, "nltk.inference.discourse.drt_discourse_demo", false]], "drtabstractvariableexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtAbstractVariableExpression", false]], "drtapplicationexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtApplicationExpression", false]], "drtbinaryexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtBinaryExpression", false]], "drtbooleanexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtBooleanExpression", false]], "drtconcatenation (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtConcatenation", false]], "drtconstantexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtConstantExpression", false]], "drtequalityexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtEqualityExpression", false]], "drteventvariableexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtEventVariableExpression", false]], "drtexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtExpression", false]], "drtfunctionvariableexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtFunctionVariableExpression", false]], "drtglue (class in nltk.sem.glue)": [[187, "nltk.sem.glue.DrtGlue", false]], "drtgluedemo (class in nltk.sem.drt_glue_demo)": [[185, "nltk.sem.drt_glue_demo.DrtGlueDemo", false]], "drtgluedict (class in nltk.sem.glue)": [[187, "nltk.sem.glue.DrtGlueDict", false]], "drtglueformula (class in nltk.sem.glue)": [[187, "nltk.sem.glue.DrtGlueFormula", false]], "drtgluereadingcommand (class in nltk.inference.discourse)": [[125, "nltk.inference.discourse.DrtGlueReadingCommand", false]], "drtindividualvariableexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtIndividualVariableExpression", false]], "drtlambdaexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtLambdaExpression", false]], "drtnegatedexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtNegatedExpression", false]], "drtorexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtOrExpression", false]], "drtparser (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtParser", false]], "drtproposition (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtProposition", false]], "drttokens (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtTokens", false]], "drtvariableexpression() (in module nltk.sem.drt)": [[184, "nltk.sem.drt.DrtVariableExpression", false]], "dstoffset (nltk.twitter.api.localtimezoneoffsetwithutc attribute)": [[286, "nltk.twitter.api.LocalTimezoneOffsetWithUTC.DSTOFFSET", false]], "dump() (nltk.tokenize.punkt.punktsentencetokenizer method)": [[243, "nltk.tokenize.punkt.PunktSentenceTokenizer.dump", false]], "dutchstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.DutchStemmer", false]], "earleychartparser (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.EarleyChartParser", false]], "edge_closure() (in module nltk.util)": [[291, "nltk.util.edge_closure", false]], "edgei (class in nltk.parse.chart)": [[162, "nltk.parse.chart.EdgeI", false]], "edges() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.edges", false]], "edges() (nltk.parse.earleychart.incrementalchart method)": [[165, "nltk.parse.earleychart.IncrementalChart.edges", false]], "edges2dot() (in module nltk.util)": [[291, "nltk.util.edges2dot", false]], "edit_distance() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.edit_distance", false]], "edit_distance_align() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.edit_distance_align", false]], "editor (nltk.corpus.reader.bnc.bncwordview attribute)": [[61, "nltk.corpus.reader.bnc.BNCWordView.editor", false]], "elementtree_indent() (in module nltk.util)": [[291, "nltk.util.elementtree_indent", false]], "elementwrapper (class in nltk.internals)": [[131, "nltk.internals.ElementWrapper", false]], "eleprobdist (class in nltk.probability)": [[179, "nltk.probability.ELEProbDist", false]], "eliminate_equality() (nltk.sem.drt.drs method)": [[184, "nltk.sem.drt.DRS.eliminate_equality", false]], "eliminate_equality() (nltk.sem.drt.drtabstractvariableexpression method)": [[184, "nltk.sem.drt.DrtAbstractVariableExpression.eliminate_equality", false]], "eliminate_equality() (nltk.sem.drt.drtconcatenation method)": [[184, "nltk.sem.drt.DrtConcatenation.eliminate_equality", false]], "eliminate_equality() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.eliminate_equality", false]], "eliminate_equality() (nltk.sem.drt.drtproposition method)": [[184, "nltk.sem.drt.DrtProposition.eliminate_equality", false]], "eliminate_start() (nltk.grammar.cfg class method)": [[121, "nltk.grammar.CFG.eliminate_start", false]], "eliza_chat() (in module nltk.chat.eliza)": [[19, "nltk.chat.eliza.eliza_chat", false]], "ellipsis (nltk.tokenize.punkt.punkttoken attribute)": [[243, "nltk.tokenize.punkt.PunktToken.ellipsis", false]], "emclusterer (class in nltk.cluster.em)": [[48, "nltk.cluster.em.EMClusterer", false]], "emptypredictrule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.EmptyPredictRule", false]], "en_em_dashes (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.EN_EM_DASHES", false]], "encode() (nltk.classify.maxent.binarymaxentfeatureencoding method)": [[33, "nltk.classify.maxent.BinaryMaxentFeatureEncoding.encode", false]], "encode() (nltk.classify.maxent.functionbackedmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.FunctionBackedMaxentFeatureEncoding.encode", false]], "encode() (nltk.classify.maxent.gisencoding method)": [[33, "nltk.classify.maxent.GISEncoding.encode", false]], "encode() (nltk.classify.maxent.maxentfeatureencodingi method)": [[33, "nltk.classify.maxent.MaxentFeatureEncodingI.encode", false]], "encode() (nltk.classify.maxent.tadmeventmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.TadmEventMaxentFeatureEncoding.encode", false]], "encode() (nltk.classify.maxent.typedmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.TypedMaxentFeatureEncoding.encode", false]], "encode_json_obj() (nltk.tag.brill.brilltagger method)": [[215, "nltk.tag.brill.BrillTagger.encode_json_obj", false]], "encode_json_obj() (nltk.tag.perceptron.averagedperceptron method)": [[221, "nltk.tag.perceptron.AveragedPerceptron.encode_json_obj", false]], "encode_json_obj() (nltk.tag.perceptron.perceptrontagger method)": [[221, "nltk.tag.perceptron.PerceptronTagger.encode_json_obj", false]], "encode_json_obj() (nltk.tag.sequential.affixtagger method)": [[223, "nltk.tag.sequential.AffixTagger.encode_json_obj", false]], "encode_json_obj() (nltk.tag.sequential.defaulttagger method)": [[223, "nltk.tag.sequential.DefaultTagger.encode_json_obj", false]], "encode_json_obj() (nltk.tag.sequential.ngramtagger method)": [[223, "nltk.tag.sequential.NgramTagger.encode_json_obj", false]], "encode_json_obj() (nltk.tag.sequential.regexptagger method)": [[223, "nltk.tag.sequential.RegexpTagger.encode_json_obj", false]], "encode_json_obj() (nltk.tbl.feature.feature method)": [[231, "nltk.tbl.feature.Feature.encode_json_obj", false]], "encode_json_obj() (nltk.tbl.rule.rule method)": [[232, "nltk.tbl.rule.Rule.encode_json_obj", false]], "encoding (nltk.data.seekableunicodestreamreader attribute)": [[111, "nltk.data.SeekableUnicodeStreamReader.encoding", false]], "encoding() (nltk.corpus.reader.api.corpusreader method)": [[59, "nltk.corpus.reader.api.CorpusReader.encoding", false]], "encoding() (nltk.corpus.reader.corpusreader method)": [[57, "nltk.corpus.reader.CorpusReader.encoding", false]], "encoding_demo() (in module nltk.classify.tadm)": [[41, "nltk.classify.tadm.encoding_demo", false]], "encodings (nltk.corpus.reader.udhr.udhrcorpusreader attribute)": [[103, "nltk.corpus.reader.udhr.UdhrCorpusReader.ENCODINGS", false]], "encodings (nltk.corpus.reader.udhrcorpusreader attribute)": [[57, "nltk.corpus.reader.UdhrCorpusReader.ENCODINGS", false]], "end (nltk.tag.perceptron.perceptrontagger attribute)": [[221, "nltk.tag.perceptron.PerceptronTagger.END", false]], "end() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.end", false]], "end() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.end", false]], "end() (nltk.parse.chart.edgei method)": [[162, "nltk.parse.chart.EdgeI.end", false]], "end() (nltk.parse.chart.leafedge method)": [[162, "nltk.parse.chart.LeafEdge.end", false]], "end() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.end", false]], "end_w5() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.end_w5", false]], "end_w6() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.end_w6", false]], "ending_quotes (nltk.tokenize.destructive.nltkwordtokenizer attribute)": [[239, "nltk.tokenize.destructive.NLTKWordTokenizer.ENDING_QUOTES", false]], "ending_quotes (nltk.tokenize.treebank.treebankworddetokenizer attribute)": [[253, "nltk.tokenize.treebank.TreebankWordDetokenizer.ENDING_QUOTES", false]], "ending_quotes (nltk.tokenize.treebank.treebankwordtokenizer attribute)": [[253, "nltk.tokenize.treebank.TreebankWordTokenizer.ENDING_QUOTES", false]], "englishstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.EnglishStemmer", false]], "ensure_loaded() (nltk.corpus.reader.api.corpusreader method)": [[59, "nltk.corpus.reader.api.CorpusReader.ensure_loaded", false]], "ensure_loaded() (nltk.corpus.reader.corpusreader method)": [[57, "nltk.corpus.reader.CorpusReader.ensure_loaded", false]], "entitytype (class in nltk.sem.logic)": [[191, "nltk.sem.logic.EntityType", false]], "entries() (nltk.corpus.reader.cmudict.cmudictcorpusreader method)": [[67, "nltk.corpus.reader.cmudict.CMUDictCorpusReader.entries", false]], "entries() (nltk.corpus.reader.cmudictcorpusreader method)": [[57, "nltk.corpus.reader.CMUDictCorpusReader.entries", false]], "entries() (nltk.corpus.reader.mwappdbcorpusreader method)": [[57, "nltk.corpus.reader.MWAPPDBCorpusReader.entries", false]], "entries() (nltk.corpus.reader.panlex_swadesh.panlexswadeshcorpusreader method)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexSwadeshCorpusReader.entries", false]], "entries() (nltk.corpus.reader.panlexswadeshcorpusreader method)": [[57, "nltk.corpus.reader.PanlexSwadeshCorpusReader.entries", false]], "entries() (nltk.corpus.reader.swadeshcorpusreader method)": [[57, "nltk.corpus.reader.SwadeshCorpusReader.entries", false]], "entries() (nltk.corpus.reader.toolbox.toolboxcorpusreader method)": [[101, "nltk.corpus.reader.toolbox.ToolboxCorpusReader.entries", false]], "entries() (nltk.corpus.reader.toolboxcorpusreader method)": [[57, "nltk.corpus.reader.ToolboxCorpusReader.entries", false]], "entries() (nltk.corpus.reader.wordlist.mwappdbcorpusreader method)": [[106, "nltk.corpus.reader.wordlist.MWAPPDBCorpusReader.entries", false]], "entries() (nltk.corpus.reader.wordlist.swadeshcorpusreader method)": [[106, "nltk.corpus.reader.wordlist.SwadeshCorpusReader.entries", false]], "entropy() (in module nltk.probability)": [[179, "nltk.probability.entropy", false]], "entropy() (nltk.lm.api.languagemodel method)": [[136, "nltk.lm.api.LanguageModel.entropy", false]], "entropy() (nltk.tag.hmm.hiddenmarkovmodeltagger method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.entropy", false]], "entrydialog (class in nltk.draw.util)": [[119, "nltk.draw.util.EntryDialog", false]], "epsilon (nltk.grammar.pcfg attribute)": [[121, "nltk.grammar.PCFG.EPSILON", false]], "eq (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.EQ", false]], "eq (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.EQ", false]], "eq_list (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.EQ_LIST", false]], "equal_values() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.equal_values", false]], "equality_preds() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.equality_preds", false]], "equalityexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.EqualityExpression", false]], "equiv() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.equiv", false]], "equiv() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.equiv", false]], "erfcc() (in module nltk.translate.gale_church)": [[260, "nltk.translate.gale_church.erfcc", false]], "error": [[186, "nltk.sem.evaluate.Error", false]], "error() (nltk.classify.decisiontree.decisiontreeclassifier method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.error", false]], "error_list() (in module nltk.tbl.erroranalysis)": [[230, "nltk.tbl.erroranalysis.error_list", false]], "errormessage (class in nltk.downloader)": [[113, "nltk.downloader.ErrorMessage", false]], "errors (nltk.data.seekableunicodestreamreader attribute)": [[111, "nltk.data.SeekableUnicodeStreamReader.errors", false]], "euclidean_distance() (in module nltk.cluster.util)": [[51, "nltk.cluster.util.euclidean_distance", false]], "europarlcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.EuroparlCorpusReader", false]], "europarlcorpusreader (class in nltk.corpus.reader.plaintext)": [[87, "nltk.corpus.reader.plaintext.EuroparlCorpusReader", false]], "eval() (nltk.parse.evaluate.dependencyevaluator method)": [[166, "nltk.parse.evaluate.DependencyEvaluator.eval", false]], "evaluate() (nltk.chunk.api.chunkparseri method)": [[26, "nltk.chunk.api.ChunkParserI.evaluate", false]], "evaluate() (nltk.metrics.confusionmatrix.confusionmatrix method)": [[147, "nltk.metrics.confusionmatrix.ConfusionMatrix.evaluate", false]], "evaluate() (nltk.sem.evaluate.model method)": [[186, "nltk.sem.evaluate.Model.evaluate", false]], "evaluate() (nltk.sentiment.sentiment_analyzer.sentimentanalyzer method)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer.evaluate", false]], "evaluate() (nltk.tag.api.taggeri method)": [[214, "nltk.tag.api.TaggerI.evaluate", false]], "evaluate_per_tag() (nltk.tag.api.taggeri method)": [[214, "nltk.tag.api.TaggerI.evaluate_per_tag", false]], "evaluate_sents() (in module nltk.sem.util)": [[194, "nltk.sem.util.evaluate_sents", false]], "eventtype (class in nltk.sem.logic)": [[191, "nltk.sem.logic.EventType", false]], "eventvariableexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.EventVariableExpression", false]], "everygrams() (in module nltk.util)": [[291, "nltk.util.everygrams", false]], "exact_match() (in module nltk.translate.meteor_score)": [[269, "nltk.translate.meteor_score.exact_match", false]], "examples() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.examples", false]], "executable() (nltk.classify.senna.senna method)": [[39, "nltk.classify.senna.Senna.executable", false]], "exemplars() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.exemplars", false]], "exemplars() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.exemplars", false]], "exists (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.EXISTS", false]], "exists (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.EXISTS", false]], "exists (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.EXISTS", false]], "exists_list (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.EXISTS_LIST", false]], "existsexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.ExistsExpression", false]], "expand() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.expand", false]], "expand() (nltk.tbl.feature.feature class method)": [[231, "nltk.tbl.feature.Feature.expand", false]], "expand() (nltk.tbl.template.template class method)": [[233, "nltk.tbl.template.Template.expand", false]], "expand_threads() (nltk.inference.discourse.discoursetester method)": [[125, "nltk.inference.discourse.DiscourseTester.expand_threads", false]], "expand_tweetids() (nltk.twitter.twitterclient.query method)": [[289, "nltk.twitter.twitterclient.Query.expand_tweetids", false]], "expand_tweetids_demo() (in module nltk.twitter.twitter_demo)": [[288, "nltk.twitter.twitter_demo.expand_tweetids_demo", false]], "expandable_productions() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.expandable_productions", false]], "expanded_tree() (nltk.draw.tree.treewidget method)": [[118, "nltk.draw.tree.TreeWidget.expanded_tree", false]], "expandleftrule (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.ExpandLeftRule", false]], "expandrightrule (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.ExpandRightRule", false]], "expansion_score() (nltk.translate.stack_decoder.stackdecoder method)": [[274, "nltk.translate.stack_decoder.StackDecoder.expansion_score", false]], "expectedmoretokensexception": [[191, "nltk.sem.logic.ExpectedMoreTokensException", false]], "explain() (nltk.classify.maxent.maxentclassifier method)": [[33, "nltk.classify.maxent.MaxentClassifier.explain", false]], "expression (class in nltk.sem.linearlogic)": [[190, "nltk.sem.linearlogic.Expression", false]], "expression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.Expression", false]], "expressions() (nltk.corpus.reader.panlex_lite.meaning method)": [[84, "nltk.corpus.reader.panlex_lite.Meaning.expressions", false]], "extend() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.extend", false]], "extend() (nltk.featstruct.featlist method)": [[120, "nltk.featstruct.FeatList.extend", false]], "extend() (nltk.tree.immutable.immutabletree method)": [[276, "nltk.tree.immutable.ImmutableTree.extend", false]], "extend() (nltk.tree.immutabletree method)": [[275, "nltk.tree.ImmutableTree.extend", false]], "extract() (in module nltk.translate.phrase_based)": [[272, "nltk.translate.phrase_based.extract", false]], "extract_bigram_feats() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.extract_bigram_feats", false]], "extract_features() (nltk.parse.transitionparser.configuration method)": [[176, "nltk.parse.transitionparser.Configuration.extract_features", false]], "extract_features() (nltk.sentiment.sentiment_analyzer.sentimentanalyzer method)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer.extract_features", false]], "extract_fields() (in module nltk.twitter.common)": [[287, "nltk.twitter.common.extract_fields", false]], "extract_property() (nltk.tag.brill.pos static method)": [[215, "nltk.tag.brill.Pos.extract_property", false]], "extract_property() (nltk.tag.brill.word static method)": [[215, "nltk.tag.brill.Word.extract_property", false]], "extract_property() (nltk.tbl.feature.feature static method)": [[231, "nltk.tbl.feature.Feature.extract_property", false]], "extract_rels() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.extract_rels", false]], "extract_test_sentences() (in module nltk.parse.util)": [[177, "nltk.parse.util.extract_test_sentences", false]], "extract_unigram_feats() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.extract_unigram_feats", false]], "f() (in module nltk.classify.decisiontree)": [[32, "nltk.classify.decisiontree.f", false]], "f_measure() (in module nltk.metrics.scores)": [[150, "nltk.metrics.scores.f_measure", false]], "f_measure() (nltk.chunk.util.chunkscore method)": [[29, "nltk.chunk.util.ChunkScore.f_measure", false]], "f_measure() (nltk.metrics.confusionmatrix.confusionmatrix method)": [[147, "nltk.metrics.confusionmatrix.ConfusionMatrix.f_measure", false]], "f_measure() (nltk.tag.api.taggeri method)": [[214, "nltk.tag.api.TaggerI.f_measure", false]], "fe_relations() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.fe_relations", false]], "fe_relations() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.fe_relations", false]], "featdict (class in nltk.featstruct)": [[120, "nltk.featstruct.FeatDict", false]], "featlist (class in nltk.featstruct)": [[120, "nltk.featstruct.FeatList", false]], "featstruct (class in nltk.featstruct)": [[120, "nltk.featstruct.FeatStruct", false]], "featstructreader (class in nltk.featstruct)": [[120, "nltk.featstruct.FeatStructReader", false]], "feature (class in nltk.featstruct)": [[120, "nltk.featstruct.Feature", false]], "feature (class in nltk.tbl.feature)": [[231, "nltk.tbl.feature.Feature", false]], "feature_detector() (nltk.tag.sequential.classifierbasedpostagger method)": [[223, "nltk.tag.sequential.ClassifierBasedPOSTagger.feature_detector", false]], "feature_detector() (nltk.tag.sequential.classifierbasedtagger method)": [[223, "nltk.tag.sequential.ClassifierBasedTagger.feature_detector", false]], "featurebottomupchartparser (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureBottomUpChartParser", false]], "featurebottomupleftcornerchartparser (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureBottomUpLeftCornerChartParser", false]], "featurebottomuppredictcombinerule (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureBottomUpPredictCombineRule", false]], "featurebottomuppredictrule (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureBottomUpPredictRule", false]], "featurechart (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureChart", false]], "featurechartparser (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureChartParser", false]], "featurecompletefundamentalrule (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.FeatureCompleteFundamentalRule", false]], "featurecompleterrule (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.FeatureCompleterRule", false]], "featureearleychartparser (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.FeatureEarleyChartParser", false]], "featureemptypredictrule (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureEmptyPredictRule", false]], "featurefundamentalrule (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureFundamentalRule", false]], "featureincrementalbottomupchartparser (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.FeatureIncrementalBottomUpChartParser", false]], "featureincrementalbottomupleftcornerchartparser (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.FeatureIncrementalBottomUpLeftCornerChartParser", false]], "featureincrementalchart (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.FeatureIncrementalChart", false]], "featureincrementalchartparser (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.FeatureIncrementalChartParser", false]], "featureincrementaltopdownchartparser (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.FeatureIncrementalTopDownChartParser", false]], "featurepredictorrule (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.FeaturePredictorRule", false]], "features() (nltk.corpus.reader.reviews.review method)": [[91, "nltk.corpus.reader.reviews.Review.features", false]], "features() (nltk.corpus.reader.reviews.reviewscorpusreader method)": [[91, "nltk.corpus.reader.reviews.ReviewsCorpusReader.features", false]], "features() (nltk.corpus.reader.reviewscorpusreader method)": [[57, "nltk.corpus.reader.ReviewsCorpusReader.features", false]], "featurescannerrule (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.FeatureScannerRule", false]], "featuresettaggeri (class in nltk.tag.api)": [[214, "nltk.tag.api.FeaturesetTaggerI", false]], "featuresingleedgefundamentalrule (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureSingleEdgeFundamentalRule", false]], "featuretopdownchartparser (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureTopDownChartParser", false]], "featuretopdowninitrule (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureTopDownInitRule", false]], "featuretopdownpredictrule (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureTopDownPredictRule", false]], "featuretreeedge (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureTreeEdge", false]], "fem2masc() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.fem2masc", false]], "fem2masc() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.fem2masc", false]], "fertility_of_i() (nltk.translate.ibm_model.alignmentinfo method)": [[268, "nltk.translate.ibm_model.AlignmentInfo.fertility_of_i", false]], "fes() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.fes", false]], "fes() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.fes", false]], "fields() (nltk.corpus.reader.toolbox.toolboxcorpusreader method)": [[101, "nltk.corpus.reader.toolbox.ToolboxCorpusReader.fields", false]], "fields() (nltk.corpus.reader.toolboxcorpusreader method)": [[57, "nltk.corpus.reader.ToolboxCorpusReader.fields", false]], "fields() (nltk.toolbox.standardformat method)": [[255, "nltk.toolbox.StandardFormat.fields", false]], "file_size() (nltk.data.filesystempathpointer method)": [[111, "nltk.data.FileSystemPathPointer.file_size", false]], "file_size() (nltk.data.pathpointer method)": [[111, "nltk.data.PathPointer.file_size", false]], "fileid (nltk.corpus.reader.nombank.nombankinstance attribute)": [[81, "nltk.corpus.reader.nombank.NombankInstance.fileid", false]], "fileid (nltk.corpus.reader.propbank.propbankinstance attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.fileid", false]], "fileid (nltk.corpus.reader.util.streambackedcorpusview property)": [[104, "nltk.corpus.reader.util.StreamBackedCorpusView.fileid", false]], "fileids() (nltk.corpus.reader.api.categorizedcorpusreader method)": [[59, "nltk.corpus.reader.api.CategorizedCorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.api.corpusreader method)": [[59, "nltk.corpus.reader.api.CorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.categorizedcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedCorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.corpusreader method)": [[57, "nltk.corpus.reader.CorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.ipipan.ipipancorpusreader method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.ipipancorpusreader method)": [[57, "nltk.corpus.reader.IPIPANCorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.nkjp.nkjpcorpusreader method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.nkjpcorpusreader method)": [[57, "nltk.corpus.reader.NKJPCorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.ycoe.ycoecorpusreader method)": [[109, "nltk.corpus.reader.ycoe.YCOECorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.ycoecorpusreader method)": [[57, "nltk.corpus.reader.YCOECorpusReader.fileids", false]], "filename (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.filename", false]], "filestring() (in module nltk.util)": [[291, "nltk.util.filestring", false]], "filesystempathpointer (class in nltk.data)": [[111, "nltk.data.FileSystemPathPointer", false]], "filter() (nltk.twitter.twitterclient.streamer method)": [[289, "nltk.twitter.twitterclient.Streamer.filter", false]], "filteredbottomuppredictcombinerule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.FilteredBottomUpPredictCombineRule", false]], "filteredcompletefundamentalrule (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.FilteredCompleteFundamentalRule", false]], "filteredsingleedgefundamentalrule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.FilteredSingleEdgeFundamentalRule", false]], "final_period_1 (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.FINAL_PERIOD_1", false]], "final_period_2 (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.FINAL_PERIOD_2", false]], "finalize_training() (nltk.tokenize.punkt.punkttrainer method)": [[243, "nltk.tokenize.punkt.PunktTrainer.finalize_training", false]], "find() (in module nltk.data)": [[111, "nltk.data.find", false]], "find() (nltk.internals.elementwrapper method)": [[131, "nltk.internals.ElementWrapper.find", false]], "find_abbrev_types() (nltk.tokenize.punkt.punkttrainer method)": [[243, "nltk.tokenize.punkt.PunktTrainer.find_abbrev_types", false]], "find_all_src_phrases() (nltk.translate.stack_decoder.stackdecoder method)": [[274, "nltk.translate.stack_decoder.StackDecoder.find_all_src_phrases", false]], "find_answers() (nltk.inference.resolution.resolutionprovercommand method)": [[129, "nltk.inference.resolution.ResolutionProverCommand.find_answers", false]], "find_best_fit() (nltk.probability.simplegoodturingprobdist method)": [[179, "nltk.probability.SimpleGoodTuringProbDist.find_best_fit", false]], "find_binary() (in module nltk.internals)": [[131, "nltk.internals.find_binary", false]], "find_binary_iter() (in module nltk.internals)": [[131, "nltk.internals.find_binary_iter", false]], "find_concordance() (nltk.text.concordanceindex method)": [[234, "nltk.text.ConcordanceIndex.find_concordance", false]], "find_corpus_fileids() (in module nltk.corpus.reader)": [[57, "nltk.corpus.reader.find_corpus_fileids", false]], "find_corpus_fileids() (in module nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.find_corpus_fileids", false]], "find_dimentions() (nltk.draw.util.showtext method)": [[119, "nltk.draw.util.ShowText.find_dimentions", false]], "find_dir() (in module nltk.internals)": [[131, "nltk.internals.find_dir", false]], "find_file() (in module nltk.internals)": [[131, "nltk.internals.find_file", false]], "find_file_iter() (in module nltk.internals)": [[131, "nltk.internals.find_file_iter", false]], "find_increasing_sequences() (in module nltk.translate.ribes_score)": [[273, "nltk.translate.ribes_score.find_increasing_sequences", false]], "find_jar() (in module nltk.internals)": [[131, "nltk.internals.find_jar", false]], "find_jar_iter() (in module nltk.internals)": [[131, "nltk.internals.find_jar_iter", false]], "find_jars_within_path() (in module nltk.internals)": [[131, "nltk.internals.find_jars_within_path", false]], "find_label_name() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.find_label_name", false]], "find_legal_onsets() (nltk.tokenize.legality_principle.legalitysyllabletokenizer method)": [[240, "nltk.tokenize.legality_principle.LegalitySyllableTokenizer.find_legal_onsets", false]], "find_malt_model() (in module nltk.parse.malt)": [[169, "nltk.parse.malt.find_malt_model", false]], "find_maltparser() (in module nltk.parse.malt)": [[169, "nltk.parse.malt.find_maltparser", false]], "find_repptokenizer() (nltk.tokenize.repp.repptokenizer method)": [[245, "nltk.tokenize.repp.ReppTokenizer.find_repptokenizer", false]], "findall() (nltk.internals.elementwrapper method)": [[131, "nltk.internals.ElementWrapper.findall", false]], "findall() (nltk.text.text method)": [[234, "nltk.text.Text.findall", false]], "findall() (nltk.text.tokensearcher method)": [[234, "nltk.text.TokenSearcher.findall", false]], "findtype() (nltk.sem.logic.abstractvariableexpression method)": [[191, "nltk.sem.logic.AbstractVariableExpression.findtype", false]], "findtype() (nltk.sem.logic.applicationexpression method)": [[191, "nltk.sem.logic.ApplicationExpression.findtype", false]], "findtype() (nltk.sem.logic.binaryexpression method)": [[191, "nltk.sem.logic.BinaryExpression.findtype", false]], "findtype() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.findtype", false]], "findtype() (nltk.sem.logic.negatedexpression method)": [[191, "nltk.sem.logic.NegatedExpression.findtype", false]], "findtype() (nltk.sem.logic.variablebinderexpression method)": [[191, "nltk.sem.logic.VariableBinderExpression.findtype", false]], "fingerprints (nltk.classify.textcat.textcat attribute)": [[42, "nltk.classify.textcat.TextCat.fingerprints", false]], "finishcollectionmessage (class in nltk.downloader)": [[113, "nltk.downloader.FinishCollectionMessage", false]], "finishdownloadmessage (class in nltk.downloader)": [[113, "nltk.downloader.FinishDownloadMessage", false]], "finishpackagemessage (class in nltk.downloader)": [[113, "nltk.downloader.FinishPackageMessage", false]], "finishunzipmessage (class in nltk.downloader)": [[113, "nltk.downloader.FinishUnzipMessage", false]], "finite (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.FINITE", false]], "finnishstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.FinnishStemmer", false]], "first (nltk.sem.logic.anytype property)": [[191, "nltk.sem.logic.AnyType.first", false]], "first_case (nltk.tokenize.punkt.punkttoken property)": [[243, "nltk.tokenize.punkt.PunktToken.first_case", false]], "first_lower (nltk.tokenize.punkt.punkttoken property)": [[243, "nltk.tokenize.punkt.PunktToken.first_lower", false]], "first_upper (nltk.tokenize.punkt.punkttoken property)": [[243, "nltk.tokenize.punkt.PunktToken.first_upper", false]], "fisher() (nltk.metrics.association.bigramassocmeasures class method)": [[146, "nltk.metrics.association.BigramAssocMeasures.fisher", false]], "fisher_exact() (in module nltk.metrics.association)": [[146, "nltk.metrics.association.fisher_exact", false]], "fit() (nltk.lm.api.languagemodel method)": [[136, "nltk.lm.api.LanguageModel.fit", false]], "flatten() (in module nltk.lm.preprocessing)": [[139, "nltk.lm.preprocessing.flatten", false]], "flatten() (in module nltk.util)": [[291, "nltk.util.flatten", false]], "flatten() (nltk.tree.tree method)": [[275, "nltk.tree.Tree.flatten", false]], "flatten() (nltk.tree.tree.tree method)": [[282, "nltk.tree.tree.Tree.flatten", false]], "fntbl37() (in module nltk.tag.brill)": [[215, "nltk.tag.brill.fntbl37", false]], "focus() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.focus", false]], "focus() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.focus", false]], "fol() (nltk.sem.drt.drs method)": [[184, "nltk.sem.drt.DRS.fol", false]], "fol() (nltk.sem.drt.drtabstractvariableexpression method)": [[184, "nltk.sem.drt.DrtAbstractVariableExpression.fol", false]], "fol() (nltk.sem.drt.drtapplicationexpression method)": [[184, "nltk.sem.drt.DrtApplicationExpression.fol", false]], "fol() (nltk.sem.drt.drtconcatenation method)": [[184, "nltk.sem.drt.DrtConcatenation.fol", false]], "fol() (nltk.sem.drt.drtequalityexpression method)": [[184, "nltk.sem.drt.DrtEqualityExpression.fol", false]], "fol() (nltk.sem.drt.drtlambdaexpression method)": [[184, "nltk.sem.drt.DrtLambdaExpression.fol", false]], "fol() (nltk.sem.drt.drtnegatedexpression method)": [[184, "nltk.sem.drt.DrtNegatedExpression.fol", false]], "fol() (nltk.sem.drt.drtorexpression method)": [[184, "nltk.sem.drt.DrtOrExpression.fol", false]], "fol() (nltk.sem.drt.drtproposition method)": [[184, "nltk.sem.drt.DrtProposition.fol", false]], "foldemo() (in module nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.foldemo", false]], "followtoscreen_demo() (in module nltk.twitter.twitter_demo)": [[288, "nltk.twitter.twitter_demo.followtoscreen_demo", false]], "folmodel() (in module nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.folmodel", false]], "format() (nltk.classify.weka.arff_formatter method)": [[44, "nltk.classify.weka.ARFF_Formatter.format", false]], "format() (nltk.tbl.rule.rule method)": [[232, "nltk.tbl.rule.Rule.format", false]], "format_debug_decision() (in module nltk.tokenize.punkt)": [[243, "nltk.tokenize.punkt.format_debug_decision", false]], "formats (in module nltk.data)": [[111, "nltk.data.FORMATS", false]], "formula_tree() (nltk.sem.hole.holesemantics method)": [[188, "nltk.sem.hole.HoleSemantics.formula_tree", false]], "forwardcombinator (class in nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.ForwardCombinator", false]], "forwardonly() (in module nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.forwardOnly", false]], "forwardsconstraint() (in module nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.forwardSConstraint", false]], "forwardtconstraint() (in module nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.forwardTConstraint", false]], "forwardtyperaiserule (class in nltk.ccg.chart)": [[14, "nltk.ccg.chart.ForwardTypeRaiseRule", false]], "fraction (class in nltk.translate.bleu_score)": [[258, "nltk.translate.bleu_score.Fraction", false]], "fractional_presence() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.fractional_presence", false]], "frame() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.frame", false]], "frame() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.frame", false]], "frame_by_id() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.frame_by_id", false]], "frame_by_id() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.frame_by_id", false]], "frame_by_name() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.frame_by_name", false]], "frame_by_name() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.frame_by_name", false]], "frame_config (nltk.draw.table.multilistbox attribute)": [[117, "nltk.draw.table.MultiListbox.FRAME_CONFIG", false]], "frame_ids() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.frame_ids", false]], "frame_ids() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.frame_ids", false]], "frame_ids_and_names() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.frame_ids_and_names", false]], "frame_ids_and_names() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.frame_ids_and_names", false]], "frame_relation_types() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.frame_relation_types", false]], "frame_relation_types() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.frame_relation_types", false]], "frame_relations() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.frame_relations", false]], "frame_relations() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.frame_relations", false]], "frame_strings() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.frame_strings", false]], "framenetcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.FramenetCorpusReader", false]], "framenetcorpusreader (class in nltk.corpus.reader.framenet)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader", false]], "frameneterror": [[72, "nltk.corpus.reader.framenet.FramenetError", false]], "frames() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.frames", false]], "frames() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.frames", false]], "frames() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.frames", false]], "frames() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.frames", false]], "frames_by_lemma() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.frames_by_lemma", false]], "frames_by_lemma() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.frames_by_lemma", false]], "free() (nltk.inference.resolution.clause method)": [[129, "nltk.inference.resolution.Clause.free", false]], "free() (nltk.sem.drt.drs method)": [[184, "nltk.sem.drt.DRS.free", false]], "free() (nltk.sem.drt.possibleantecedents method)": [[184, "nltk.sem.drt.PossibleAntecedents.free", false]], "free() (nltk.sem.logic.constantexpression method)": [[191, "nltk.sem.logic.ConstantExpression.free", false]], "free() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.free", false]], "free() (nltk.sem.logic.functionvariableexpression method)": [[191, "nltk.sem.logic.FunctionVariableExpression.free", false]], "free() (nltk.sem.logic.individualvariableexpression method)": [[191, "nltk.sem.logic.IndividualVariableExpression.free", false]], "free() (nltk.sem.logic.variablebinderexpression method)": [[191, "nltk.sem.logic.VariableBinderExpression.free", false]], "freeze() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.freeze", false]], "freeze() (nltk.tree.tree method)": [[275, "nltk.tree.Tree.freeze", false]], "freeze() (nltk.tree.tree.tree method)": [[282, "nltk.tree.tree.Tree.freeze", false]], "frenchstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.FrenchStemmer", false]], "freq() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.freq", false]], "freq_threshold() (nltk.tokenize.punkt.punkttrainer method)": [[243, "nltk.tokenize.punkt.PunktTrainer.freq_threshold", false]], "freqdist (class in nltk.probability)": [[179, "nltk.probability.FreqDist", false]], "freqdist() (nltk.probability.lidstoneprobdist method)": [[179, "nltk.probability.LidstoneProbDist.freqdist", false]], "freqdist() (nltk.probability.mleprobdist method)": [[179, "nltk.probability.MLEProbDist.freqdist", false]], "freqdist() (nltk.probability.simplegoodturingprobdist method)": [[179, "nltk.probability.SimpleGoodTuringProbDist.freqdist", false]], "freqdist() (nltk.probability.wittenbellprobdist method)": [[179, "nltk.probability.WittenBellProbDist.freqdist", false]], "freqdists() (nltk.probability.crossvalidationprobdist method)": [[179, "nltk.probability.CrossValidationProbDist.freqdists", false]], "from_production() (nltk.parse.chart.treeedge static method)": [[162, "nltk.parse.chart.TreeEdge.from_production", false]], "from_production() (nltk.parse.featurechart.featuretreeedge static method)": [[167, "nltk.parse.featurechart.FeatureTreeEdge.from_production", false]], "from_production() (nltk.parse.pchart.probabilistictreeedge static method)": [[171, "nltk.parse.pchart.ProbabilisticTreeEdge.from_production", false]], "from_train() (nltk.classify.weka.arff_formatter static method)": [[44, "nltk.classify.weka.ARFF_Formatter.from_train", false]], "from_unified_model_dir() (nltk.parse.bllip.bllipparser class method)": [[161, "nltk.parse.bllip.BllipParser.from_unified_model_dir", false]], "from_words() (nltk.collocations.bigramcollocationfinder class method)": [[53, "nltk.collocations.BigramCollocationFinder.from_words", false]], "from_words() (nltk.collocations.quadgramcollocationfinder class method)": [[53, "nltk.collocations.QuadgramCollocationFinder.from_words", false]], "from_words() (nltk.collocations.trigramcollocationfinder class method)": [[53, "nltk.collocations.TrigramCollocationFinder.from_words", false]], "fromlist() (nltk.tree.tree class method)": [[275, "nltk.tree.Tree.fromlist", false]], "fromlist() (nltk.tree.tree.tree class method)": [[282, "nltk.tree.tree.Tree.fromlist", false]], "fromstring() (in module nltk.ccg.lexicon)": [[16, "nltk.ccg.lexicon.fromstring", false]], "fromstring() (nltk.chunk.regexp.regexpchunkrule static method)": [[28, "nltk.chunk.regexp.RegexpChunkRule.fromstring", false]], "fromstring() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.fromstring", false]], "fromstring() (nltk.grammar.cfg class method)": [[121, "nltk.grammar.CFG.fromstring", false]], "fromstring() (nltk.grammar.dependencygrammar class method)": [[121, "nltk.grammar.DependencyGrammar.fromstring", false]], "fromstring() (nltk.grammar.pcfg class method)": [[121, "nltk.grammar.PCFG.fromstring", false]], "fromstring() (nltk.sem.drt.drtexpression class method)": [[184, "nltk.sem.drt.DrtExpression.fromstring", false]], "fromstring() (nltk.sem.evaluate.valuation class method)": [[186, "nltk.sem.evaluate.Valuation.fromstring", false]], "fromstring() (nltk.sem.linearlogic.expression class method)": [[190, "nltk.sem.linearlogic.Expression.fromstring", false]], "fromstring() (nltk.sem.logic.expression class method)": [[191, "nltk.sem.logic.Expression.fromstring", false]], "fromstring() (nltk.sem.logic.type class method)": [[191, "nltk.sem.logic.Type.fromstring", false]], "fromstring() (nltk.translate.api.alignment class method)": [[257, "nltk.translate.api.Alignment.fromstring", false]], "fromstring() (nltk.tree.tree class method)": [[275, "nltk.tree.Tree.fromstring", false]], "fromstring() (nltk.tree.tree.tree class method)": [[282, "nltk.tree.tree.Tree.fromstring", false]], "fromxml() (nltk.downloader.collection static method)": [[113, "nltk.downloader.Collection.fromxml", false]], "fromxml() (nltk.downloader.package static method)": [[113, "nltk.downloader.Package.fromxml", false]], "frontier() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.frontier", false]], "frozen() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.frozen", false]], "fstructure (class in nltk.sem.lfg)": [[189, "nltk.sem.lfg.FStructure", false]], "ft_sents() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.ft_sents", false]], "ft_sents() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.ft_sents", false]], "functionalcategory (class in nltk.ccg.api)": [[13, "nltk.ccg.api.FunctionalCategory", false]], "functionbackedmaxentfeatureencoding (class in nltk.classify.maxent)": [[33, "nltk.classify.maxent.FunctionBackedMaxentFeatureEncoding", false]], "functionvariableexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.FunctionVariableExpression", false]], "fundamentalrule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.FundamentalRule", false]], "funky_punct_1 (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.FUNKY_PUNCT_1", false]], "funky_punct_2 (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.FUNKY_PUNCT_2", false]], "future (class in nltk.corpus.reader.framenet)": [[72, "nltk.corpus.reader.framenet.Future", false]], "future (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.FUTURE", false]], "future_score() (nltk.translate.stack_decoder.stackdecoder method)": [[274, "nltk.translate.stack_decoder.StackDecoder.future_score", false]], "gaaclusterer (class in nltk.cluster.gaac)": [[49, "nltk.cluster.gaac.GAAClusterer", false]], "generate() (in module nltk.parse.generate)": [[168, "nltk.parse.generate.generate", false]], "generate() (nltk.lm.api.languagemodel method)": [[136, "nltk.lm.api.LanguageModel.generate", false]], "generate() (nltk.probability.probdisti method)": [[179, "nltk.probability.ProbDistI.generate", false]], "generate() (nltk.text.text method)": [[234, "nltk.text.Text.generate", false]], "generate_chomsky() (in module nltk.misc.chomsky)": [[155, "nltk.misc.chomsky.generate_chomsky", false]], "generate_malt_command() (nltk.parse.malt.maltparser method)": [[169, "nltk.parse.malt.MaltParser.generate_malt_command", false]], "generate_repp_command() (nltk.tokenize.repp.repptokenizer method)": [[245, "nltk.tokenize.repp.ReppTokenizer.generate_repp_command", false]], "genericcorenlpparser (class in nltk.parse.corenlp)": [[163, "nltk.parse.corenlp.GenericCoreNLPParser", false]], "genericstanfordparser (class in nltk.parse.stanford)": [[175, "nltk.parse.stanford.GenericStanfordParser", false]], "germanstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.GermanStemmer", false]], "gerund (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.GERUND", false]], "get() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.get", false]], "get() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.get", false]], "get() (nltk.featstruct.featdict method)": [[120, "nltk.featstruct.FeatDict.get", false]], "get() (nltk.internals.counter method)": [[131, "nltk.internals.Counter.get", false]], "get_all_symbols() (nltk.sem.boxer.boxerdrsparser method)": [[181, "nltk.sem.boxer.BoxerDrsParser.get_all_symbols", false]], "get_all_symbols() (nltk.sem.boxer.boxeroutputdrsparser method)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser.get_all_symbols", false]], "get_all_symbols() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.get_all_symbols", false]], "get_all_symbols() (nltk.sem.linearlogic.linearlogicparser method)": [[190, "nltk.sem.linearlogic.LinearLogicParser.get_all_symbols", false]], "get_all_symbols() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.get_all_symbols", false]], "get_booleanexpression_factory() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.get_BooleanExpression_factory", false]], "get_booleanexpression_factory() (nltk.sem.linearlogic.linearlogicparser method)": [[190, "nltk.sem.linearlogic.LinearLogicParser.get_BooleanExpression_factory", false]], "get_booleanexpression_factory() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.get_BooleanExpression_factory", false]], "get_by_address() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.get_by_address", false]], "get_cycle_path() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.get_cycle_path", false]], "get_domain() (in module nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.get_domain", false]], "get_glue_dict() (nltk.sem.glue.drtglue method)": [[187, "nltk.sem.glue.DrtGlue.get_glue_dict", false]], "get_glue_dict() (nltk.sem.glue.glue method)": [[187, "nltk.sem.glue.Glue.get_glue_dict", false]], "get_glueformula_factory() (nltk.sem.glue.drtgluedict method)": [[187, "nltk.sem.glue.DrtGlueDict.get_GlueFormula_factory", false]], "get_glueformula_factory() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.get_GlueFormula_factory", false]], "get_glueformulas_from_semtype_entry() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.get_glueformulas_from_semtype_entry", false]], "get_header_field_list() (in module nltk.twitter.common)": [[287, "nltk.twitter.common.get_header_field_list", false]], "get_label() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.get_label", false]], "get_languages() (nltk.corpus.reader.panlex_swadesh.panlexswadeshcorpusreader method)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexSwadeshCorpusReader.get_languages", false]], "get_languages() (nltk.corpus.reader.panlexswadeshcorpusreader method)": [[57, "nltk.corpus.reader.PanlexSwadeshCorpusReader.get_languages", false]], "get_macrolanguages() (nltk.corpus.reader.panlex_swadesh.panlexswadeshcorpusreader method)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexSwadeshCorpusReader.get_macrolanguages", false]], "get_macrolanguages() (nltk.corpus.reader.panlexswadeshcorpusreader method)": [[57, "nltk.corpus.reader.PanlexSwadeshCorpusReader.get_macrolanguages", false]], "get_meaning_formula() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.get_meaning_formula", false]], "get_model_builder() (nltk.inference.api.basemodelbuildercommand method)": [[124, "nltk.inference.api.BaseModelBuilderCommand.get_model_builder", false]], "get_model_builder() (nltk.inference.api.modelbuildercommand method)": [[124, "nltk.inference.api.ModelBuilderCommand.get_model_builder", false]], "get_model_builder() (nltk.inference.api.modelbuildercommanddecorator method)": [[124, "nltk.inference.api.ModelBuilderCommandDecorator.get_model_builder", false]], "get_neighborhood() (nltk.tbl.template.brilltemplatei method)": [[233, "nltk.tbl.template.BrillTemplateI.get_neighborhood", false]], "get_neighborhood() (nltk.tbl.template.template method)": [[233, "nltk.tbl.template.Template.get_neighborhood", false]], "get_next_token_variable() (nltk.sem.boxer.boxerdrsparser method)": [[181, "nltk.sem.boxer.BoxerDrsParser.get_next_token_variable", false]], "get_next_token_variable() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.get_next_token_variable", false]], "get_params() (nltk.tokenize.punkt.punkttrainer method)": [[243, "nltk.tokenize.punkt.PunktTrainer.get_params", false]], "get_paths() (nltk.corpus.reader.nkjp.nkjpcorpusreader method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.get_paths", false]], "get_paths() (nltk.corpus.reader.nkjpcorpusreader method)": [[57, "nltk.corpus.reader.NKJPCorpusReader.get_paths", false]], "get_pos_tagger() (nltk.sem.glue.glue method)": [[187, "nltk.sem.glue.Glue.get_pos_tagger", false]], "get_prover() (nltk.inference.api.baseprovercommand method)": [[124, "nltk.inference.api.BaseProverCommand.get_prover", false]], "get_prover() (nltk.inference.api.provercommand method)": [[124, "nltk.inference.api.ProverCommand.get_prover", false]], "get_prover() (nltk.inference.api.provercommanddecorator method)": [[124, "nltk.inference.api.ProverCommandDecorator.get_prover", false]], "get_quantifiedexpression_factory() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.get_QuantifiedExpression_factory", false]], "get_readings() (nltk.sem.glue.glue method)": [[187, "nltk.sem.glue.Glue.get_readings", false]], "get_refs() (nltk.sem.drt.drs method)": [[184, "nltk.sem.drt.DRS.get_refs", false]], "get_refs() (nltk.sem.drt.drtabstractvariableexpression method)": [[184, "nltk.sem.drt.DrtAbstractVariableExpression.get_refs", false]], "get_refs() (nltk.sem.drt.drtapplicationexpression method)": [[184, "nltk.sem.drt.DrtApplicationExpression.get_refs", false]], "get_refs() (nltk.sem.drt.drtbinaryexpression method)": [[184, "nltk.sem.drt.DrtBinaryExpression.get_refs", false]], "get_refs() (nltk.sem.drt.drtconcatenation method)": [[184, "nltk.sem.drt.DrtConcatenation.get_refs", false]], "get_refs() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.get_refs", false]], "get_refs() (nltk.sem.drt.drtlambdaexpression method)": [[184, "nltk.sem.drt.DrtLambdaExpression.get_refs", false]], "get_refs() (nltk.sem.drt.drtnegatedexpression method)": [[184, "nltk.sem.drt.DrtNegatedExpression.get_refs", false]], "get_refs() (nltk.sem.drt.drtproposition method)": [[184, "nltk.sem.drt.DrtProposition.get_refs", false]], "get_segm_id() (nltk.corpus.reader.nkjp.nkjpcorpus_segmentation_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Segmentation_View.get_segm_id", false]], "get_segm_id() (nltk.corpus.reader.nkjp.nkjpcorpus_text_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Text_View.get_segm_id", false]], "get_semtypes() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.get_semtypes", false]], "get_sent_beg() (nltk.corpus.reader.nkjp.nkjpcorpus_segmentation_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Segmentation_View.get_sent_beg", false]], "get_sent_end() (nltk.corpus.reader.nkjp.nkjpcorpus_segmentation_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Segmentation_View.get_sent_end", false]], "get_sentences() (nltk.corpus.reader.nkjp.nkjpcorpus_segmentation_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Segmentation_View.get_sentences", false]], "get_version() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.get_version", false]], "get_version() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.get_version", false]], "get_words_from_dictionary() (in module nltk.metrics.paice)": [[149, "nltk.metrics.paice.get_words_from_dictionary", false]], "getchildren() (nltk.internals.elementwrapper method)": [[131, "nltk.internals.ElementWrapper.getchildren", false]], "getinfo() (in module nltk.decorators)": [[112, "nltk.decorators.getinfo", false]], "getiterator() (nltk.internals.elementwrapper method)": [[131, "nltk.internals.ElementWrapper.getiterator", false]], "getop() (nltk.sem.drt.drtconcatenation method)": [[184, "nltk.sem.drt.DrtConcatenation.getOp", false]], "getop() (nltk.sem.logic.andexpression method)": [[191, "nltk.sem.logic.AndExpression.getOp", false]], "getop() (nltk.sem.logic.equalityexpression method)": [[191, "nltk.sem.logic.EqualityExpression.getOp", false]], "getop() (nltk.sem.logic.iffexpression method)": [[191, "nltk.sem.logic.IffExpression.getOp", false]], "getop() (nltk.sem.logic.impexpression method)": [[191, "nltk.sem.logic.ImpExpression.getOp", false]], "getop() (nltk.sem.logic.orexpression method)": [[191, "nltk.sem.logic.OrExpression.getOp", false]], "getquantifier() (nltk.sem.logic.allexpression method)": [[191, "nltk.sem.logic.AllExpression.getQuantifier", false]], "getquantifier() (nltk.sem.logic.existsexpression method)": [[191, "nltk.sem.logic.ExistsExpression.getQuantifier", false]], "getquantifier() (nltk.sem.logic.iotaexpression method)": [[191, "nltk.sem.logic.IotaExpression.getQuantifier", false]], "gfl_to_compiled() (nltk.sem.glue.glue method)": [[187, "nltk.sem.glue.Glue.gfl_to_compiled", false]], "ghd() (in module nltk.metrics.segmentation)": [[151, "nltk.metrics.segmentation.ghd", false]], "gisencoding (class in nltk.classify.maxent)": [[33, "nltk.classify.maxent.GISEncoding", false]], "glue (class in nltk.sem.glue)": [[187, "nltk.sem.glue.Glue", false]], "gluedict (class in nltk.sem.glue)": [[187, "nltk.sem.glue.GlueDict", false]], "glueformula (class in nltk.sem.glue)": [[187, "nltk.sem.glue.GlueFormula", false]], "goal() (nltk.inference.api.basetheoremtoolcommand method)": [[124, "nltk.inference.api.BaseTheoremToolCommand.goal", false]], "goal() (nltk.inference.api.theoremtoolcommand method)": [[124, "nltk.inference.api.TheoremToolCommand.goal", false]], "goal() (nltk.inference.api.theoremtoolcommanddecorator method)": [[124, "nltk.inference.api.TheoremToolCommandDecorator.goal", false]], "goal() (nltk.inference.nonmonotonic.closeddomainprover method)": [[127, "nltk.inference.nonmonotonic.ClosedDomainProver.goal", false]], "grammar() (nltk.inference.discourse.discoursetester method)": [[125, "nltk.inference.discourse.DiscourseTester.grammar", false]], "grammar() (nltk.parse.api.parseri method)": [[160, "nltk.parse.api.ParserI.grammar", false]], "grammar() (nltk.parse.chart.chartparser method)": [[162, "nltk.parse.chart.ChartParser.grammar", false]], "grammar() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.grammar", false]], "grammar() (nltk.parse.pchart.bottomupprobabilisticchartparser method)": [[171, "nltk.parse.pchart.BottomUpProbabilisticChartParser.grammar", false]], "grammar() (nltk.parse.recursivedescent.recursivedescentparser method)": [[173, "nltk.parse.recursivedescent.RecursiveDescentParser.grammar", false]], "grammar() (nltk.parse.shiftreduce.shiftreduceparser method)": [[174, "nltk.parse.shiftreduce.ShiftReduceParser.grammar", false]], "grammar() (nltk.parse.viterbi.viterbiparser method)": [[178, "nltk.parse.viterbi.ViterbiParser.grammar", false]], "grid() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.grid", false]], "grid() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.grid", false]], "groups() (nltk.cluster.util.dendrogram method)": [[51, "nltk.cluster.util.Dendrogram.groups", false]], "grow_diag_final_and() (in module nltk.translate.gdfa)": [[261, "nltk.translate.gdfa.grow_diag_final_and", false]], "guess_encoding() (in module nltk.util)": [[291, "nltk.util.guess_encoding", false]], "guess_language() (nltk.classify.textcat.textcat method)": [[42, "nltk.classify.textcat.TextCat.guess_language", false]], "guess_path() (in module nltk.twitter.util)": [[290, "nltk.twitter.util.guess_path", false]], "guessed() (nltk.chunk.util.chunkscore method)": [[29, "nltk.chunk.util.ChunkScore.guessed", false]], "gzipfilesystempathpointer (class in nltk.data)": [[111, "nltk.data.GzipFileSystemPathPointer", false]], "hall_demo() (in module nltk.parse.nonprojectivedependencyparser)": [[170, "nltk.parse.nonprojectivedependencyparser.hall_demo", false]], "handle() (nltk.sem.boxer.boxerdrsparser method)": [[181, "nltk.sem.boxer.BoxerDrsParser.handle", false]], "handle() (nltk.sem.boxer.boxeroutputdrsparser method)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser.handle", false]], "handle() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.handle", false]], "handle() (nltk.sem.linearlogic.linearlogicparser method)": [[190, "nltk.sem.linearlogic.LinearLogicParser.handle", false]], "handle() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.handle", false]], "handle() (nltk.twitter.api.tweethandleri method)": [[286, "nltk.twitter.api.TweetHandlerI.handle", false]], "handle() (nltk.twitter.twitterclient.tweetviewer method)": [[289, "nltk.twitter.twitterclient.TweetViewer.handle", false]], "handle() (nltk.twitter.twitterclient.tweetwriter method)": [[289, "nltk.twitter.twitterclient.TweetWriter.handle", false]], "handle_condition() (nltk.sem.boxer.boxeroutputdrsparser method)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser.handle_condition", false]], "handle_conds() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.handle_conds", false]], "handle_drs() (nltk.sem.boxer.boxeroutputdrsparser method)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser.handle_drs", false]], "handle_drs() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.handle_DRS", false]], "handle_elt() (nltk.corpus.reader.bnc.bncwordview method)": [[61, "nltk.corpus.reader.bnc.BNCWordView.handle_elt", false]], "handle_elt() (nltk.corpus.reader.nkjp.nkjpcorpus_header_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Header_View.handle_elt", false]], "handle_elt() (nltk.corpus.reader.nkjp.nkjpcorpus_morph_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Morph_View.handle_elt", false]], "handle_elt() (nltk.corpus.reader.nkjp.nkjpcorpus_segmentation_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Segmentation_View.handle_elt", false]], "handle_elt() (nltk.corpus.reader.nkjp.nkjpcorpus_text_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Text_View.handle_elt", false]], "handle_elt() (nltk.corpus.reader.semcor.semcorwordview method)": [[93, "nltk.corpus.reader.semcor.SemcorWordView.handle_elt", false]], "handle_elt() (nltk.corpus.reader.xmldocs.xmlcorpusview method)": [[108, "nltk.corpus.reader.xmldocs.XMLCorpusView.handle_elt", false]], "handle_header() (nltk.corpus.reader.bnc.bncwordview method)": [[61, "nltk.corpus.reader.bnc.BNCWordView.handle_header", false]], "handle_lambda() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.handle_lambda", false]], "handle_negation() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.handle_negation", false]], "handle_open() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.handle_open", false]], "handle_prop() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.handle_prop", false]], "handle_quant() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.handle_quant", false]], "handle_query() (nltk.corpus.reader.nkjp.nkjpcorpus_header_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Header_View.handle_query", false]], "handle_query() (nltk.corpus.reader.nkjp.nkjpcorpus_morph_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Morph_View.handle_query", false]], "handle_query() (nltk.corpus.reader.nkjp.nkjpcorpus_segmentation_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Segmentation_View.handle_query", false]], "handle_query() (nltk.corpus.reader.nkjp.nkjpcorpus_text_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Text_View.handle_query", false]], "handle_refs() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.handle_refs", false]], "handle_sent() (nltk.corpus.reader.bnc.bncwordview method)": [[61, "nltk.corpus.reader.bnc.BNCWordView.handle_sent", false]], "handle_sent() (nltk.corpus.reader.semcor.semcorwordview method)": [[93, "nltk.corpus.reader.semcor.SemcorWordView.handle_sent", false]], "handle_variable() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.handle_variable", false]], "handle_word() (nltk.corpus.reader.bnc.bncwordview method)": [[61, "nltk.corpus.reader.bnc.BNCWordView.handle_word", false]], "handle_word() (nltk.corpus.reader.semcor.semcorwordview method)": [[93, "nltk.corpus.reader.semcor.SemcorWordView.handle_word", false]], "hangul_jamo (nltk.tokenize.util.cjkchars attribute)": [[254, "nltk.tokenize.util.CJKChars.Hangul_Jamo", false]], "hangul_syllables (nltk.tokenize.util.cjkchars attribute)": [[254, "nltk.tokenize.util.CJKChars.Hangul_Syllables", false]], "hapaxes() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.hapaxes", false]], "has_key() (nltk.featstruct.featdict method)": [[120, "nltk.featstruct.FeatDict.has_key", false]], "has_priority() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.has_priority", false]], "head_index() (nltk.parse.projectivedependencyparser.dependencyspan method)": [[172, "nltk.parse.projectivedependencyparser.DependencySpan.head_index", false]], "head_len (nltk.corpus.reader.pl196x.pl196xcorpusreader attribute)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader.head_len", false]], "head_len (nltk.corpus.reader.pl196xcorpusreader attribute)": [[57, "nltk.corpus.reader.Pl196xCorpusReader.head_len", false]], "header() (nltk.corpus.reader.nkjp.nkjpcorpusreader method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.header", false]], "header() (nltk.corpus.reader.nkjpcorpusreader method)": [[57, "nltk.corpus.reader.NKJPCorpusReader.header", false]], "header_mode (nltk.corpus.reader.nkjp.nkjpcorpusreader attribute)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.HEADER_MODE", false]], "header_mode (nltk.corpus.reader.nkjpcorpusreader attribute)": [[57, "nltk.corpus.reader.NKJPCorpusReader.HEADER_MODE", false]], "header_section() (nltk.classify.weka.arff_formatter method)": [[44, "nltk.classify.weka.ARFF_Formatter.header_section", false]], "height() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.height", false]], "height() (nltk.tree.tree method)": [[275, "nltk.tree.Tree.height", false]], "height() (nltk.tree.tree.tree method)": [[282, "nltk.tree.tree.Tree.height", false]], "heldout_fdist() (nltk.probability.heldoutprobdist method)": [[179, "nltk.probability.HeldoutProbDist.heldout_fdist", false]], "heldoutprobdist (class in nltk.probability)": [[179, "nltk.probability.HeldoutProbDist", false]], "help (nltk.downloader.downloadergui attribute)": [[113, "nltk.downloader.DownloaderGUI.HELP", false]], "help() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.help", false]], "help() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.help", false]], "help() (nltk.downloader.downloadergui method)": [[113, "nltk.downloader.DownloaderGUI.help", false]], "hidden() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.hidden", false]], "hiddenmarkovmodeltagger (class in nltk.tag.hmm)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger", false]], "hiddenmarkovmodeltrainer (class in nltk.tag.hmm)": [[218, "nltk.tag.hmm.HiddenMarkovModelTrainer", false]], "hide() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.hide", false]], "hide_column() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.hide_column", false]], "hide_column() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.hide_column", false]], "hillclimb() (nltk.translate.ibm5.ibmmodel5 method)": [[267, "nltk.translate.ibm5.IBMModel5.hillclimb", false]], "hillclimb() (nltk.translate.ibm_model.ibmmodel method)": [[268, "nltk.translate.ibm_model.IBMModel.hillclimb", false]], "hole (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.HOLE", false]], "hole_readings() (in module nltk.sem.hole)": [[188, "nltk.sem.hole.hole_readings", false]], "holesemantics (class in nltk.sem.hole)": [[188, "nltk.sem.hole.HoleSemantics", false]], "href (nltk.corpus.reader.markdown.link attribute)": [[78, "nltk.corpus.reader.markdown.Link.href", false]], "hungarianstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.HungarianStemmer", false]], "hunpostagger (class in nltk.tag.hunpos)": [[219, "nltk.tag.hunpos.HunposTagger", false]], "hyp_extra() (nltk.classify.rte_classify.rtefeatureextractor method)": [[37, "nltk.classify.rte_classify.RTEFeatureExtractor.hyp_extra", false]], "hypernym_distances() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.hypernym_distances", false]], "hypernym_paths() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.hypernym_paths", false]], "i() (nltk.sem.evaluate.model method)": [[186, "nltk.sem.evaluate.Model.i", false]], "ibmmodel (class in nltk.translate.ibm_model)": [[268, "nltk.translate.ibm_model.IBMModel", false]], "ibmmodel1 (class in nltk.translate.ibm1)": [[263, "nltk.translate.ibm1.IBMModel1", false]], "ibmmodel2 (class in nltk.translate.ibm2)": [[264, "nltk.translate.ibm2.IBMModel2", false]], "ibmmodel3 (class in nltk.translate.ibm3)": [[265, "nltk.translate.ibm3.IBMModel3", false]], "ibmmodel4 (class in nltk.translate.ibm4)": [[266, "nltk.translate.ibm4.IBMModel4", false]], "ibmmodel5 (class in nltk.translate.ibm5)": [[267, "nltk.translate.ibm5.IBMModel5", false]], "ic() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.ic", false]], "ic() (nltk.corpus.reader.wordnet.wordneticcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetICCorpusReader.ic", false]], "ic() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.ic", false]], "ic() (nltk.corpus.reader.wordneticcorpusreader method)": [[57, "nltk.corpus.reader.WordNetICCorpusReader.ic", false]], "id (nltk.downloader.collection attribute)": [[113, "nltk.downloader.Collection.id", false]], "id (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.id", false]], "id() (nltk.ccg.api.ccgvar method)": [[13, "nltk.ccg.api.CCGVar.id", false]], "id() (nltk.corpus.reader.panlex_lite.meaning method)": [[84, "nltk.corpus.reader.panlex_lite.Meaning.id", false]], "idf() (nltk.text.textcollection method)": [[234, "nltk.text.TextCollection.idf", false]], "ieer_headlines() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.ieer_headlines", false]], "ieercorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.IEERCorpusReader", false]], "ieercorpusreader (class in nltk.corpus.reader.ieer)": [[73, "nltk.corpus.reader.ieer.IEERCorpusReader", false]], "ieerdocument (class in nltk.corpus.reader.ieer)": [[73, "nltk.corpus.reader.ieer.IEERDocument", false]], "ieerstr2tree() (in module nltk.chunk.util)": [[29, "nltk.chunk.util.ieerstr2tree", false]], "iesha_chat() (in module nltk.chat.iesha)": [[20, "nltk.chat.iesha.iesha_chat", false]], "iff (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.IFF", false]], "iff (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.IFF", false]], "iff (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.IFF", false]], "iff_list (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.IFF_LIST", false]], "iffexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.IffExpression", false]], "ignore (nltk.corpus.reader.conll.conllcorpusreader attribute)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.IGNORE", false]], "ignore (nltk.corpus.reader.conllcorpusreader attribute)": [[57, "nltk.corpus.reader.ConllCorpusReader.IGNORE", false]], "ignore_abbrev_penalty (nltk.tokenize.punkt.punkttrainer attribute)": [[243, "nltk.tokenize.punkt.PunktTrainer.IGNORE_ABBREV_PENALTY", false]], "ignorereadmecorpusview (class in nltk.corpus.reader.opinion_lexicon)": [[83, "nltk.corpus.reader.opinion_lexicon.IgnoreReadmeCorpusView", false]], "illegaltypeexception": [[191, "nltk.sem.logic.IllegalTypeException", false]], "image (class in nltk.corpus.reader.markdown)": [[78, "nltk.corpus.reader.markdown.Image", false]], "image_reader() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.image_reader", false]], "images() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.images", false]], "immutablemultiparentedtree (class in nltk.tree)": [[275, "nltk.tree.ImmutableMultiParentedTree", false]], "immutablemultiparentedtree (class in nltk.tree.immutable)": [[276, "nltk.tree.immutable.ImmutableMultiParentedTree", false]], "immutableparentedtree (class in nltk.tree)": [[275, "nltk.tree.ImmutableParentedTree", false]], "immutableparentedtree (class in nltk.tree.immutable)": [[276, "nltk.tree.immutable.ImmutableParentedTree", false]], "immutableprobabilisticmixin (class in nltk.probability)": [[179, "nltk.probability.ImmutableProbabilisticMixIn", false]], "immutableprobabilistictree (class in nltk.tree)": [[275, "nltk.tree.ImmutableProbabilisticTree", false]], "immutableprobabilistictree (class in nltk.tree.immutable)": [[276, "nltk.tree.immutable.ImmutableProbabilisticTree", false]], "immutabletree (class in nltk.tree)": [[275, "nltk.tree.ImmutableTree", false]], "immutabletree (class in nltk.tree.immutable)": [[276, "nltk.tree.immutable.ImmutableTree", false]], "imp (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.IMP", false]], "imp (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.IMP", false]], "imp (nltk.sem.linearlogic.tokens attribute)": [[190, "nltk.sem.linearlogic.Tokens.IMP", false]], "imp (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.IMP", false]], "imp_list (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.IMP_LIST", false]], "impexpression (class in nltk.sem.linearlogic)": [[190, "nltk.sem.linearlogic.ImpExpression", false]], "impexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.ImpExpression", false]], "import_from_stdlib() (in module nltk.internals)": [[131, "nltk.internals.import_from_stdlib", false]], "in_chunk_pattern (nltk.chunk.regexp.chunkstring attribute)": [[28, "nltk.chunk.regexp.ChunkString.IN_CHUNK_PATTERN", false]], "in_demo() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.in_demo", false]], "in_idle() (in module nltk.util)": [[291, "nltk.util.in_idle", false]], "in_strip_pattern (nltk.chunk.regexp.chunkstring attribute)": [[28, "nltk.chunk.regexp.ChunkString.IN_STRIP_PATTERN", false]], "include_abbrev_collocs (nltk.tokenize.punkt.punkttrainer attribute)": [[243, "nltk.tokenize.punkt.PunktTrainer.INCLUDE_ABBREV_COLLOCS", false]], "include_all_collocs (nltk.tokenize.punkt.punkttrainer attribute)": [[243, "nltk.tokenize.punkt.PunktTrainer.INCLUDE_ALL_COLLOCS", false]], "inconsistenttypehierarchyexception": [[191, "nltk.sem.logic.InconsistentTypeHierarchyException", false]], "incorrect() (nltk.chunk.util.chunkscore method)": [[29, "nltk.chunk.util.ChunkScore.incorrect", false]], "incr_download() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.incr_download", false]], "incrementalbottomupchartparser (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.IncrementalBottomUpChartParser", false]], "incrementalbottomupleftcornerchartparser (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.IncrementalBottomUpLeftCornerChartParser", false]], "incrementalchart (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.IncrementalChart", false]], "incrementalchartparser (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.IncrementalChartParser", false]], "incrementalleftcornerchartparser (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.IncrementalLeftCornerChartParser", false]], "incrementaltopdownchartparser (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.IncrementalTopDownChartParser", false]], "index (class in nltk.util)": [[291, "nltk.util.Index", false]], "index() (nltk.collections.abstractlazysequence method)": [[52, "nltk.collections.AbstractLazySequence.index", false]], "index() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.index", false]], "index() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.index", false]], "index() (nltk.text.text method)": [[234, "nltk.text.Text.index", false]], "index_sense() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.index_sense", false]], "index_sense() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.index_sense", false]], "index_timeout (nltk.downloader.downloader attribute)": [[113, "nltk.downloader.Downloader.INDEX_TIMEOUT", false]], "indiancorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.IndianCorpusReader", false]], "indiancorpusreader (class in nltk.corpus.reader.indian)": [[74, "nltk.corpus.reader.indian.IndianCorpusReader", false]], "indiancorpusview (class in nltk.corpus.reader.indian)": [[74, "nltk.corpus.reader.indian.IndianCorpusView", false]], "individualvariableexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.IndividualVariableExpression", false]], "induce_pcfg() (in module nltk.grammar)": [[121, "nltk.grammar.induce_pcfg", false]], "infinitive (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.INFINITIVE", false]], "inflection (nltk.corpus.reader.propbank.propbankinstance attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.inflection", false]], "info() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.info", false]], "information_content() (in module nltk.corpus.reader.wordnet)": [[107, "nltk.corpus.reader.wordnet.information_content", false]], "init_vocab() (nltk.translate.ibm_model.ibmmodel method)": [[268, "nltk.translate.ibm_model.IBMModel.init_vocab", false]], "initial_columns (nltk.downloader.downloadergui attribute)": [[113, "nltk.downloader.DownloaderGUI.INITIAL_COLUMNS", false]], "initialize() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.initialize", false]], "initialize() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.initialize", false]], "initialize() (nltk.parse.earleychart.incrementalchart method)": [[165, "nltk.parse.earleychart.IncrementalChart.initialize", false]], "initialize() (nltk.parse.featurechart.instantiatevarschart method)": [[167, "nltk.parse.featurechart.InstantiateVarsChart.initialize", false]], "initialize() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.initialize", false]], "initialize() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.initialize", false]], "initialize_edge_scores() (nltk.parse.nonprojectivedependencyparser.probabilisticnonprojectiveparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser.initialize_edge_scores", false]], "initialize_labels() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.initialize_labels", false]], "initialize_labels() (nltk.sem.linearlogic.atomicexpression method)": [[190, "nltk.sem.linearlogic.AtomicExpression.initialize_labels", false]], "initialize_labels() (nltk.sem.linearlogic.impexpression method)": [[190, "nltk.sem.linearlogic.ImpExpression.initialize_labels", false]], "innermostfunction() (in module nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.innermostFunction", false]], "inrange() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.inRange", false]], "insert() (nltk.collections.trie method)": [[52, "nltk.collections.Trie.insert", false]], "insert() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.insert", false]], "insert() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.insert", false]], "insert() (nltk.featstruct.featlist method)": [[120, "nltk.featstruct.FeatList.insert", false]], "insert() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.insert", false]], "insert() (nltk.parse.featurechart.instantiatevarschart method)": [[167, "nltk.parse.featurechart.InstantiateVarsChart.insert", false]], "insert_child() (nltk.draw.tree.treesegmentwidget method)": [[118, "nltk.draw.tree.TreeSegmentWidget.insert_child", false]], "insert_child() (nltk.draw.util.sequencewidget method)": [[119, "nltk.draw.util.SequenceWidget.insert_child", false]], "insert_child() (nltk.draw.util.stackwidget method)": [[119, "nltk.draw.util.StackWidget.insert_child", false]], "insert_with_backpointer() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.insert_with_backpointer", false]], "insidechartparser (class in nltk.parse.pchart)": [[171, "nltk.parse.pchart.InsideChartParser", false]], "inst_vars() (nltk.parse.featurechart.instantiatevarschart method)": [[167, "nltk.parse.featurechart.InstantiateVarsChart.inst_vars", false]], "installed (nltk.downloader.downloader attribute)": [[113, "nltk.downloader.Downloader.INSTALLED", false]], "instances() (nltk.corpus.reader.nombank.nombankcorpusreader method)": [[81, "nltk.corpus.reader.nombank.NombankCorpusReader.instances", false]], "instances() (nltk.corpus.reader.nombankcorpusreader method)": [[57, "nltk.corpus.reader.NombankCorpusReader.instances", false]], "instances() (nltk.corpus.reader.propbank.propbankcorpusreader method)": [[89, "nltk.corpus.reader.propbank.PropbankCorpusReader.instances", false]], "instances() (nltk.corpus.reader.propbankcorpusreader method)": [[57, "nltk.corpus.reader.PropbankCorpusReader.instances", false]], "instances() (nltk.corpus.reader.senseval.sensevalcorpusreader method)": [[94, "nltk.corpus.reader.senseval.SensevalCorpusReader.instances", false]], "instances() (nltk.corpus.reader.sensevalcorpusreader method)": [[57, "nltk.corpus.reader.SensevalCorpusReader.instances", false]], "instantiate_edge() (nltk.parse.featurechart.instantiatevarschart method)": [[167, "nltk.parse.featurechart.InstantiateVarsChart.instantiate_edge", false]], "instantiatevarschart (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.InstantiateVarsChart", false]], "internal_punctuation (nltk.tokenize.punkt.punktlanguagevars attribute)": [[243, "nltk.tokenize.punkt.PunktLanguageVars.internal_punctuation", false]], "international_regexes (nltk.tokenize.nist.nisttokenizer attribute)": [[242, "nltk.tokenize.nist.NISTTokenizer.INTERNATIONAL_REGEXES", false]], "international_tokenize() (nltk.tokenize.nist.nisttokenizer method)": [[242, "nltk.tokenize.nist.NISTTokenizer.international_tokenize", false]], "interpolatedlanguagemodel (class in nltk.lm.models)": [[138, "nltk.lm.models.InterpolatedLanguageModel", false]], "interpret() (nltk.sem.boxer.boxer method)": [[181, "nltk.sem.boxer.Boxer.interpret", false]], "interpret() (nltk.sem.boxer.nltkdrtboxerdrsinterpreter method)": [[181, "nltk.sem.boxer.NltkDrtBoxerDrsInterpreter.interpret", false]], "interpret() (nltk.sem.boxer.passthroughboxerdrsinterpreter method)": [[181, "nltk.sem.boxer.PassthroughBoxerDrsInterpreter.interpret", false]], "interpret_multi() (nltk.sem.boxer.boxer method)": [[181, "nltk.sem.boxer.Boxer.interpret_multi", false]], "interpret_multi_sents() (nltk.sem.boxer.boxer method)": [[181, "nltk.sem.boxer.Boxer.interpret_multi_sents", false]], "interpret_sents() (in module nltk.sem.util)": [[194, "nltk.sem.util.interpret_sents", false]], "interpret_sents() (nltk.sem.boxer.boxer method)": [[181, "nltk.sem.boxer.Boxer.interpret_sents", false]], "intersects() (nltk.tbl.feature.feature method)": [[231, "nltk.tbl.feature.Feature.intersects", false]], "interval_distance() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.interval_distance", false]], "inverse_dict() (in module nltk.langnames)": [[133, "nltk.langnames.inverse_dict", false]], "invert() (nltk.translate.api.alignedsent method)": [[257, "nltk.translate.api.AlignedSent.invert", false]], "invert() (nltk.translate.api.alignment method)": [[257, "nltk.translate.api.Alignment.invert", false]], "invert_dict() (in module nltk.util)": [[291, "nltk.util.invert_dict", false]], "invert_graph() (in module nltk.util)": [[291, "nltk.util.invert_graph", false]], "iob_sents() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.iob_sents", false]], "iob_sents() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.iob_sents", false]], "iob_words() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.iob_words", false]], "iob_words() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.iob_words", false]], "iota (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.IOTA", false]], "iota_list (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.IOTA_LIST", false]], "iotaexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.IotaExpression", false]], "ipipancorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.IPIPANCorpusReader", false]], "ipipancorpusreader (class in nltk.corpus.reader.ipipan)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader", false]], "ipipancorpusview (class in nltk.corpus.reader.ipipan)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusView", false]], "is_alpha (nltk.tokenize.punkt.punkttoken property)": [[243, "nltk.tokenize.punkt.PunktToken.is_alpha", false]], "is_atom() (nltk.inference.tableau.tableauprover static method)": [[130, "nltk.inference.tableau.TableauProver.is_atom", false]], "is_atom() (nltk.sem.logic.applicationexpression method)": [[191, "nltk.sem.logic.ApplicationExpression.is_atom", false]], "is_backward() (nltk.ccg.api.direction method)": [[13, "nltk.ccg.api.Direction.is_backward", false]], "is_binarised() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.is_binarised", false]], "is_chomsky_normal_form() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.is_chomsky_normal_form", false]], "is_cjk() (in module nltk.tokenize.util)": [[254, "nltk.tokenize.util.is_cjk", false]], "is_complete() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.is_complete", false]], "is_complete() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.is_complete", false]], "is_complete() (nltk.parse.chart.edgei method)": [[162, "nltk.parse.chart.EdgeI.is_complete", false]], "is_complete() (nltk.parse.chart.leafedge method)": [[162, "nltk.parse.chart.LeafEdge.is_complete", false]], "is_complete() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.is_complete", false]], "is_defined (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.is_defined", false]], "is_ellipsis (nltk.tokenize.punkt.punkttoken property)": [[243, "nltk.tokenize.punkt.PunktToken.is_ellipsis", false]], "is_eventvar() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.is_eventvar", false]], "is_flexible_chomsky_normal_form() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.is_flexible_chomsky_normal_form", false]], "is_forward() (nltk.ccg.api.direction method)": [[13, "nltk.ccg.api.Direction.is_forward", false]], "is_function() (nltk.ccg.api.abstractccgcategory method)": [[13, "nltk.ccg.api.AbstractCCGCategory.is_function", false]], "is_function() (nltk.ccg.api.ccgvar method)": [[13, "nltk.ccg.api.CCGVar.is_function", false]], "is_function() (nltk.ccg.api.functionalcategory method)": [[13, "nltk.ccg.api.FunctionalCategory.is_function", false]], "is_function() (nltk.ccg.api.primitivecategory method)": [[13, "nltk.ccg.api.PrimitiveCategory.is_function", false]], "is_funcvar() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.is_funcvar", false]], "is_head_word() (nltk.translate.ibm_model.alignmentinfo method)": [[268, "nltk.translate.ibm_model.AlignmentInfo.is_head_word", false]], "is_incomplete() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.is_incomplete", false]], "is_incomplete() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.is_incomplete", false]], "is_incomplete() (nltk.parse.chart.edgei method)": [[162, "nltk.parse.chart.EdgeI.is_incomplete", false]], "is_incomplete() (nltk.parse.chart.leafedge method)": [[162, "nltk.parse.chart.LeafEdge.is_incomplete", false]], "is_incomplete() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.is_incomplete", false]], "is_indvar() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.is_indvar", false]], "is_initial (nltk.tokenize.punkt.punkttoken property)": [[243, "nltk.tokenize.punkt.PunktToken.is_initial", false]], "is_installed() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.is_installed", false]], "is_leftcorner() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.is_leftcorner", false]], "is_lexical() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.is_lexical", false]], "is_lexical() (nltk.grammar.production method)": [[121, "nltk.grammar.Production.is_lexical", false]], "is_node() (nltk.sem.hole.holesemantics method)": [[188, "nltk.sem.hole.HoleSemantics.is_node", false]], "is_non_punct (nltk.tokenize.punkt.punkttoken property)": [[243, "nltk.tokenize.punkt.PunktToken.is_non_punct", false]], "is_nonempty() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.is_nonempty", false]], "is_nonlexical() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.is_nonlexical", false]], "is_nonlexical() (nltk.grammar.production method)": [[121, "nltk.grammar.Production.is_nonlexical", false]], "is_noun (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.is_noun", false]], "is_number (nltk.tokenize.punkt.punkttoken property)": [[243, "nltk.tokenize.punkt.PunktToken.is_number", false]], "is_ordered (nltk.corpus.reader.markdown.list attribute)": [[78, "nltk.corpus.reader.markdown.List.is_ordered", false]], "is_primitive() (nltk.ccg.api.abstractccgcategory method)": [[13, "nltk.ccg.api.AbstractCCGCategory.is_primitive", false]], "is_primitive() (nltk.ccg.api.ccgvar method)": [[13, "nltk.ccg.api.CCGVar.is_primitive", false]], "is_primitive() (nltk.ccg.api.functionalcategory method)": [[13, "nltk.ccg.api.FunctionalCategory.is_primitive", false]], "is_primitive() (nltk.ccg.api.primitivecategory method)": [[13, "nltk.ccg.api.PrimitiveCategory.is_primitive", false]], "is_pronoun_function() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.is_pronoun_function", false]], "is_rel() (in module nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.is_rel", false]], "is_stale() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.is_stale", false]], "is_tautology() (nltk.inference.resolution.clause method)": [[129, "nltk.inference.resolution.Clause.is_tautology", false]], "is_var() (nltk.ccg.api.abstractccgcategory method)": [[13, "nltk.ccg.api.AbstractCCGCategory.is_var", false]], "is_var() (nltk.ccg.api.ccgvar method)": [[13, "nltk.ccg.api.CCGVar.is_var", false]], "is_var() (nltk.ccg.api.functionalcategory method)": [[13, "nltk.ccg.api.FunctionalCategory.is_var", false]], "is_var() (nltk.ccg.api.primitivecategory method)": [[13, "nltk.ccg.api.PrimitiveCategory.is_var", false]], "is_variable() (nltk.ccg.api.direction method)": [[13, "nltk.ccg.api.Direction.is_variable", false]], "is_verb (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.is_verb", false]], "is_writable() (in module nltk.internals)": [[131, "nltk.internals.is_writable", false]], "iso639 (nltk.corpus.reader.panlex_swadesh.panlexlanguage attribute)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexLanguage.iso639", false]], "iso639_type (nltk.corpus.reader.panlex_swadesh.panlexlanguage attribute)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexLanguage.iso639_type", false]], "iso_to_crubadan() (nltk.corpus.reader.crubadan.crubadancorpusreader method)": [[70, "nltk.corpus.reader.crubadan.CrubadanCorpusReader.iso_to_crubadan", false]], "iso_to_crubadan() (nltk.corpus.reader.crubadancorpusreader method)": [[57, "nltk.corpus.reader.CrubadanCorpusReader.iso_to_crubadan", false]], "isristemmer (class in nltk.stem.isri)": [[204, "nltk.stem.isri.ISRIStemmer", false]], "issubsetof() (nltk.inference.resolution.clause method)": [[129, "nltk.inference.resolution.Clause.isSubsetOf", false]], "issuperset() (nltk.tbl.feature.feature method)": [[231, "nltk.tbl.feature.Feature.issuperset", false]], "isvariable() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.isvariable", false]], "isvariable() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.isvariable", false]], "italianstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.ItalianStemmer", false]], "itemcget() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.itemcget", false]], "itemconfig() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.itemconfig", false]], "itemconfig() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.itemconfig", false]], "itemconfigure() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.itemconfigure", false]], "itemconfigure() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.itemconfigure", false]], "items (nltk.corpus.reader.markdown.list attribute)": [[78, "nltk.corpus.reader.markdown.List.items", false]], "items() (nltk.collections.ordereddict method)": [[52, "nltk.collections.OrderedDict.items", false]], "iterate_from() (nltk.collections.abstractlazysequence method)": [[52, "nltk.collections.AbstractLazySequence.iterate_from", false]], "iterate_from() (nltk.collections.lazyconcatenation method)": [[52, "nltk.collections.LazyConcatenation.iterate_from", false]], "iterate_from() (nltk.collections.lazyiteratorlist method)": [[52, "nltk.collections.LazyIteratorList.iterate_from", false]], "iterate_from() (nltk.collections.lazymap method)": [[52, "nltk.collections.LazyMap.iterate_from", false]], "iterate_from() (nltk.collections.lazysubsequence method)": [[52, "nltk.collections.LazySubsequence.iterate_from", false]], "iterate_from() (nltk.collections.lazyzip method)": [[52, "nltk.collections.LazyZip.iterate_from", false]], "iterate_from() (nltk.corpus.reader.util.concatenatedcorpusview method)": [[104, "nltk.corpus.reader.util.ConcatenatedCorpusView.iterate_from", false]], "iterate_from() (nltk.corpus.reader.util.streambackedcorpusview method)": [[104, "nltk.corpus.reader.util.StreamBackedCorpusView.iterate_from", false]], "iteredges() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.iteredges", false]], "iteredges() (nltk.parse.earleychart.incrementalchart method)": [[165, "nltk.parse.earleychart.IncrementalChart.iteredges", false]], "ivdict2tab() (nltk.tabdata.tabencoder method)": [[212, "nltk.tabdata.TabEncoder.ivdict2tab", false]], "jaccard() (nltk.metrics.association.ngramassocmeasures class method)": [[146, "nltk.metrics.association.NgramAssocMeasures.jaccard", false]], "jaccard_distance() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.jaccard_distance", false]], "jaro_similarity() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.jaro_similarity", false]], "jaro_winkler_similarity() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.jaro_winkler_similarity", false]], "java() (in module nltk.internals)": [[131, "nltk.internals.java", false]], "jcn_similarity() (in module nltk.corpus.reader.wordnet)": [[107, "nltk.corpus.reader.wordnet.jcn_similarity", false]], "jcn_similarity() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.jcn_similarity", false]], "jcn_similarity() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.jcn_similarity", false]], "jcn_similarity() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.jcn_similarity", false]], "join() (nltk.data.filesystempathpointer method)": [[111, "nltk.data.FileSystemPathPointer.join", false]], "join() (nltk.data.pathpointer method)": [[111, "nltk.data.PathPointer.join", false]], "json2csv() (in module nltk.twitter.common)": [[287, "nltk.twitter.common.json2csv", false]], "json2csv_entities() (in module nltk.twitter.common)": [[287, "nltk.twitter.common.json2csv_entities", false]], "json2csv_preprocess() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.json2csv_preprocess", false]], "json_tag (nltk.tag.brill.brilltagger attribute)": [[215, "nltk.tag.brill.BrillTagger.json_tag", false]], "json_tag (nltk.tag.brill.pos attribute)": [[215, "nltk.tag.brill.Pos.json_tag", false]], "json_tag (nltk.tag.brill.word attribute)": [[215, "nltk.tag.brill.Word.json_tag", false]], "json_tag (nltk.tag.perceptron.averagedperceptron attribute)": [[221, "nltk.tag.perceptron.AveragedPerceptron.json_tag", false]], "json_tag (nltk.tag.perceptron.perceptrontagger attribute)": [[221, "nltk.tag.perceptron.PerceptronTagger.json_tag", false]], "json_tag (nltk.tag.sequential.affixtagger attribute)": [[223, "nltk.tag.sequential.AffixTagger.json_tag", false]], "json_tag (nltk.tag.sequential.bigramtagger attribute)": [[223, "nltk.tag.sequential.BigramTagger.json_tag", false]], "json_tag (nltk.tag.sequential.defaulttagger attribute)": [[223, "nltk.tag.sequential.DefaultTagger.json_tag", false]], "json_tag (nltk.tag.sequential.ngramtagger attribute)": [[223, "nltk.tag.sequential.NgramTagger.json_tag", false]], "json_tag (nltk.tag.sequential.regexptagger attribute)": [[223, "nltk.tag.sequential.RegexpTagger.json_tag", false]], "json_tag (nltk.tag.sequential.trigramtagger attribute)": [[223, "nltk.tag.sequential.TrigramTagger.json_tag", false]], "json_tag (nltk.tag.sequential.unigramtagger attribute)": [[223, "nltk.tag.sequential.UnigramTagger.json_tag", false]], "json_tag (nltk.tbl.feature.feature attribute)": [[231, "nltk.tbl.feature.Feature.json_tag", false]], "json_tag (nltk.tbl.rule.rule attribute)": [[232, "nltk.tbl.rule.Rule.json_tag", false]], "jsontaggeddecoder (class in nltk.jsontags)": [[132, "nltk.jsontags.JSONTaggedDecoder", false]], "jsontaggedencoder (class in nltk.jsontags)": [[132, "nltk.jsontags.JSONTaggedEncoder", false]], "kappa() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.kappa", false]], "kappa_pairwise() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.kappa_pairwise", false]], "katakana_hangul_halfwidth (nltk.tokenize.util.cjkchars attribute)": [[254, "nltk.tokenize.util.CJKChars.Katakana_Hangul_Halfwidth", false]], "kendall_tau() (in module nltk.translate.ribes_score)": [[273, "nltk.translate.ribes_score.kendall_tau", false]], "key() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.key", false]], "key() (nltk.metrics.confusionmatrix.confusionmatrix method)": [[147, "nltk.metrics.confusionmatrix.ConfusionMatrix.key", false]], "keys() (nltk.collections.ordereddict method)": [[52, "nltk.collections.OrderedDict.keys", false]], "keywords() (nltk.corpus.reader.comparative_sents.comparativesentencescorpusreader method)": [[68, "nltk.corpus.reader.comparative_sents.ComparativeSentencesCorpusReader.keywords", false]], "keywords() (nltk.corpus.reader.comparativesentencescorpusreader method)": [[57, "nltk.corpus.reader.ComparativeSentencesCorpusReader.keywords", false]], "keywords_readme() (nltk.corpus.reader.comparative_sents.comparativesentencescorpusreader method)": [[68, "nltk.corpus.reader.comparative_sents.ComparativeSentencesCorpusReader.keywords_readme", false]], "keywords_readme() (nltk.corpus.reader.comparativesentencescorpusreader method)": [[57, "nltk.corpus.reader.ComparativeSentencesCorpusReader.keywords_readme", false]], "kmeansclusterer (class in nltk.cluster.kmeans)": [[50, "nltk.cluster.kmeans.KMeansClusterer", false]], "knbcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.KNBCorpusReader", false]], "knbcorpusreader (class in nltk.corpus.reader.knbc)": [[76, "nltk.corpus.reader.knbc.KNBCorpusReader", false]], "kneserney (class in nltk.lm.smoothing)": [[140, "nltk.lm.smoothing.KneserNey", false]], "kneserneyinterpolated (class in nltk.lm)": [[135, "nltk.lm.KneserNeyInterpolated", false]], "kneserneyinterpolated (class in nltk.lm.models)": [[138, "nltk.lm.models.KneserNeyInterpolated", false]], "kneserneyprobdist (class in nltk.probability)": [[179, "nltk.probability.KneserNeyProbDist", false]], "label (nltk.corpus.reader.markdown.image attribute)": [[78, "nltk.corpus.reader.markdown.Image.label", false]], "label (nltk.corpus.reader.markdown.link attribute)": [[78, "nltk.corpus.reader.markdown.Link.label", false]], "label (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.LABEL", false]], "label() (nltk.draw.tree.treesegmentwidget method)": [[118, "nltk.draw.tree.TreeSegmentWidget.label", false]], "label() (nltk.tree.tree method)": [[275, "nltk.tree.Tree.label", false]], "label() (nltk.tree.tree.tree method)": [[282, "nltk.tree.tree.Tree.label", false]], "label_config (nltk.draw.table.multilistbox attribute)": [[117, "nltk.draw.table.MultiListbox.LABEL_CONFIG", false]], "label_indivs() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.label_indivs", false]], "labels() (nltk.classify.api.classifieri method)": [[31, "nltk.classify.api.ClassifierI.labels", false]], "labels() (nltk.classify.api.multiclassifieri method)": [[31, "nltk.classify.api.MultiClassifierI.labels", false]], "labels() (nltk.classify.decisiontree.decisiontreeclassifier method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.labels", false]], "labels() (nltk.classify.maxent.binarymaxentfeatureencoding method)": [[33, "nltk.classify.maxent.BinaryMaxentFeatureEncoding.labels", false]], "labels() (nltk.classify.maxent.functionbackedmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.FunctionBackedMaxentFeatureEncoding.labels", false]], "labels() (nltk.classify.maxent.maxentclassifier method)": [[33, "nltk.classify.maxent.MaxentClassifier.labels", false]], "labels() (nltk.classify.maxent.maxentfeatureencodingi method)": [[33, "nltk.classify.maxent.MaxentFeatureEncodingI.labels", false]], "labels() (nltk.classify.maxent.tadmeventmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.TadmEventMaxentFeatureEncoding.labels", false]], "labels() (nltk.classify.maxent.typedmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.TypedMaxentFeatureEncoding.labels", false]], "labels() (nltk.classify.naivebayes.naivebayesclassifier method)": [[35, "nltk.classify.naivebayes.NaiveBayesClassifier.labels", false]], "labels() (nltk.classify.scikitlearn.sklearnclassifier method)": [[38, "nltk.classify.scikitlearn.SklearnClassifier.labels", false]], "labels() (nltk.classify.weka.arff_formatter method)": [[44, "nltk.classify.weka.ARFF_Formatter.labels", false]], "lambda (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.LAMBDA", false]], "lambda_abstract() (nltk.sem.glue.glueformula method)": [[187, "nltk.sem.glue.GlueFormula.lambda_abstract", false]], "lambda_list (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.LAMBDA_LIST", false]], "lambdaexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.LambdaExpression", false]], "lancasterstemmer (class in nltk.stem.lancaster)": [[205, "nltk.stem.lancaster.LancasterStemmer", false]], "lang() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.lang", false]], "lang2q() (in module nltk.langnames)": [[133, "nltk.langnames.lang2q", false]], "lang2str() (nltk.corpus.reader.bcp47.bcp47corpusreader method)": [[60, "nltk.corpus.reader.bcp47.BCP47CorpusReader.lang2str", false]], "lang2str() (nltk.corpus.reader.bcp47corpusreader method)": [[57, "nltk.corpus.reader.BCP47CorpusReader.lang2str", false]], "lang_dependent_regexes (nltk.tokenize.nist.nisttokenizer attribute)": [[242, "nltk.tokenize.nist.NISTTokenizer.LANG_DEPENDENT_REGEXES", false]], "lang_dists() (nltk.classify.textcat.textcat method)": [[42, "nltk.classify.textcat.TextCat.lang_dists", false]], "lang_freq() (nltk.corpus.reader.crubadan.crubadancorpusreader method)": [[70, "nltk.corpus.reader.crubadan.CrubadanCorpusReader.lang_freq", false]], "lang_freq() (nltk.corpus.reader.crubadancorpusreader method)": [[57, "nltk.corpus.reader.CrubadanCorpusReader.lang_freq", false]], "lang_independent_sub() (nltk.tokenize.nist.nisttokenizer method)": [[242, "nltk.tokenize.nist.NISTTokenizer.lang_independent_sub", false]], "langcode() (in module nltk.langnames)": [[133, "nltk.langnames.langcode", false]], "langname() (in module nltk.langnames)": [[133, "nltk.langnames.langname", false]], "langs() (nltk.corpus.reader.crubadan.crubadancorpusreader method)": [[70, "nltk.corpus.reader.crubadan.CrubadanCorpusReader.langs", false]], "langs() (nltk.corpus.reader.crubadancorpusreader method)": [[57, "nltk.corpus.reader.CrubadanCorpusReader.langs", false]], "langs() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.langs", false]], "langs() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.langs", false]], "language_codes() (nltk.corpus.reader.panlex_swadesh.panlexswadeshcorpusreader method)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexSwadeshCorpusReader.language_codes", false]], "language_codes() (nltk.corpus.reader.panlexswadeshcorpusreader method)": [[57, "nltk.corpus.reader.PanlexSwadeshCorpusReader.language_codes", false]], "language_varieties() (nltk.corpus.reader.panlex_lite.panlexlitecorpusreader method)": [[84, "nltk.corpus.reader.panlex_lite.PanLexLiteCorpusReader.language_varieties", false]], "language_varieties() (nltk.corpus.reader.panlexlitecorpusreader method)": [[57, "nltk.corpus.reader.PanLexLiteCorpusReader.language_varieties", false]], "languageindependent (class in nltk.translate.gale_church)": [[260, "nltk.translate.gale_church.LanguageIndependent", false]], "languagemodel (class in nltk.lm.api)": [[136, "nltk.lm.api.LanguageModel", false]], "languages (nltk.stem.snowball.snowballstemmer attribute)": [[209, "nltk.stem.snowball.SnowballStemmer.languages", false]], "langvar_uid (nltk.corpus.reader.panlex_swadesh.panlexlanguage attribute)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexLanguage.langvar_uid", false]], "laplace (class in nltk.lm)": [[135, "nltk.lm.Laplace", false]], "laplace (class in nltk.lm.models)": [[138, "nltk.lm.models.Laplace", false]], "laplaceprobdist (class in nltk.probability)": [[179, "nltk.probability.LaplaceProbDist", false]], "last_distances (nltk.classify.textcat.textcat attribute)": [[42, "nltk.classify.textcat.TextCat.last_distances", false]], "lazyconcatenation (class in nltk.collections)": [[52, "nltk.collections.LazyConcatenation", false]], "lazycorpusloader (class in nltk.corpus.util)": [[110, "nltk.corpus.util.LazyCorpusLoader", false]], "lazyenumerate (class in nltk.collections)": [[52, "nltk.collections.LazyEnumerate", false]], "lazyiteratorlist (class in nltk.collections)": [[52, "nltk.collections.LazyIteratorList", false]], "lazyloader (class in nltk.data)": [[111, "nltk.data.LazyLoader", false]], "lazymap (class in nltk.collections)": [[52, "nltk.collections.LazyMap", false]], "lazymodule (class in nltk.lazyimport)": [[134, "nltk.lazyimport.LazyModule", false]], "lazysubsequence (class in nltk.collections)": [[52, "nltk.collections.LazySubsequence", false]], "lazyzip (class in nltk.collections)": [[52, "nltk.collections.LazyZip", false]], "lch_similarity() (in module nltk.corpus.reader.wordnet)": [[107, "nltk.corpus.reader.wordnet.lch_similarity", false]], "lch_similarity() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.lch_similarity", false]], "lch_similarity() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.lch_similarity", false]], "lch_similarity() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.lch_similarity", false]], "leaf (nltk.collections.trie attribute)": [[52, "nltk.collections.Trie.LEAF", false]], "leaf() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.leaf", false]], "leaf() (nltk.classify.decisiontree.decisiontreeclassifier static method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.leaf", false]], "leaf() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.leaf", false]], "leaf_treeposition() (nltk.tree.tree method)": [[275, "nltk.tree.Tree.leaf_treeposition", false]], "leaf_treeposition() (nltk.tree.tree.tree method)": [[282, "nltk.tree.tree.Tree.leaf_treeposition", false]], "leafedge (class in nltk.parse.chart)": [[162, "nltk.parse.chart.LeafEdge", false]], "leafinitrule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.LeafInitRule", false]], "leaves() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.leaves", false]], "leaves() (nltk.tree.tree method)": [[275, "nltk.tree.Tree.leaves", false]], "leaves() (nltk.tree.tree.tree method)": [[282, "nltk.tree.tree.Tree.leaves", false]], "left_arc (nltk.parse.transitionparser.transition attribute)": [[176, "nltk.parse.transitionparser.Transition.LEFT_ARC", false]], "left_arc() (nltk.parse.transitionparser.transition method)": [[176, "nltk.parse.transitionparser.Transition.left_arc", false]], "left_children() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.left_children", false]], "left_sibling() (nltk.tree.parented.parentedtree method)": [[277, "nltk.tree.parented.ParentedTree.left_sibling", false]], "left_sibling() (nltk.tree.parentedtree method)": [[275, "nltk.tree.ParentedTree.left_sibling", false]], "left_siblings() (nltk.tree.multiparentedtree method)": [[275, "nltk.tree.MultiParentedTree.left_siblings", false]], "left_siblings() (nltk.tree.parented.multiparentedtree method)": [[277, "nltk.tree.parented.MultiParentedTree.left_siblings", false]], "leftcorner_parents() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.leftcorner_parents", false]], "leftcornerchartparser (class in nltk.parse.chart)": [[162, "nltk.parse.chart.LeftCornerChartParser", false]], "leftcorners() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.leftcorners", false]], "legalitysyllabletokenizer (class in nltk.tokenize.legality_principle)": [[240, "nltk.tokenize.legality_principle.LegalitySyllableTokenizer", false]], "lemma (class in nltk.corpus.reader.wordnet)": [[107, "nltk.corpus.reader.wordnet.Lemma", false]], "lemma() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.lemma", false]], "lemma() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.lemma", false]], "lemma_count() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.lemma_count", false]], "lemma_count() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.lemma_count", false]], "lemma_from_key() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.lemma_from_key", false]], "lemma_from_key() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.lemma_from_key", false]], "lemma_names() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.lemma_names", false]], "lemma_paras() (nltk.corpus.reader.mte.mtecorpusreader method)": [[79, "nltk.corpus.reader.mte.MTECorpusReader.lemma_paras", false]], "lemma_paras() (nltk.corpus.reader.mte.mtefilereader method)": [[79, "nltk.corpus.reader.mte.MTEFileReader.lemma_paras", false]], "lemma_paras() (nltk.corpus.reader.mtecorpusreader method)": [[57, "nltk.corpus.reader.MTECorpusReader.lemma_paras", false]], "lemma_sents() (nltk.corpus.reader.mte.mtecorpusreader method)": [[79, "nltk.corpus.reader.mte.MTECorpusReader.lemma_sents", false]], "lemma_sents() (nltk.corpus.reader.mte.mtefilereader method)": [[79, "nltk.corpus.reader.mte.MTEFileReader.lemma_sents", false]], "lemma_sents() (nltk.corpus.reader.mtecorpusreader method)": [[57, "nltk.corpus.reader.MTECorpusReader.lemma_sents", false]], "lemma_words() (nltk.corpus.reader.mte.mtecorpusreader method)": [[79, "nltk.corpus.reader.mte.MTECorpusReader.lemma_words", false]], "lemma_words() (nltk.corpus.reader.mte.mtefilereader method)": [[79, "nltk.corpus.reader.mte.MTEFileReader.lemma_words", false]], "lemma_words() (nltk.corpus.reader.mtecorpusreader method)": [[57, "nltk.corpus.reader.MTECorpusReader.lemma_words", false]], "lemmas() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.lemmas", false]], "lemmas() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.lemmas", false]], "lemmas() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.lemmas", false]], "lemmas() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.lemmas", false]], "lemmas() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.lemmas", false]], "lemmatize() (nltk.stem.wordnet.wordnetlemmatizer method)": [[211, "nltk.stem.wordnet.WordNetLemmatizer.lemmatize", false]], "length() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.length", false]], "length() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.length", false]], "length() (nltk.classify.maxent.binarymaxentfeatureencoding method)": [[33, "nltk.classify.maxent.BinaryMaxentFeatureEncoding.length", false]], "length() (nltk.classify.maxent.functionbackedmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.FunctionBackedMaxentFeatureEncoding.length", false]], "length() (nltk.classify.maxent.gisencoding method)": [[33, "nltk.classify.maxent.GISEncoding.length", false]], "length() (nltk.classify.maxent.maxentfeatureencodingi method)": [[33, "nltk.classify.maxent.MaxentFeatureEncodingI.length", false]], "length() (nltk.classify.maxent.tadmeventmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.TadmEventMaxentFeatureEncoding.length", false]], "length() (nltk.classify.maxent.typedmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.TypedMaxentFeatureEncoding.length", false]], "length() (nltk.parse.chart.edgei method)": [[162, "nltk.parse.chart.EdgeI.length", false]], "length() (nltk.parse.chart.leafedge method)": [[162, "nltk.parse.chart.LeafEdge.length", false]], "length() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.length", false]], "leq (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.LEQ", false]], "lesk() (in module nltk.wsd)": [[292, "nltk.wsd.lesk", false]], "lexicon() (nltk.ccg.chart.ccgchartparser method)": [[14, "nltk.ccg.chart.CCGChartParser.lexicon", false]], "lexname() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.lexname", false]], "lhs() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.lhs", false]], "lhs() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.lhs", false]], "lhs() (nltk.grammar.production method)": [[121, "nltk.grammar.Production.lhs", false]], "lhs() (nltk.parse.chart.edgei method)": [[162, "nltk.parse.chart.EdgeI.lhs", false]], "lhs() (nltk.parse.chart.leafedge method)": [[162, "nltk.parse.chart.LeafEdge.lhs", false]], "lhs() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.lhs", false]], "license (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.license", false]], "license() (nltk.corpus.reader.api.corpusreader method)": [[59, "nltk.corpus.reader.api.CorpusReader.license", false]], "license() (nltk.corpus.reader.corpusreader method)": [[57, "nltk.corpus.reader.CorpusReader.license", false]], "license() (nltk.corpus.reader.panlex_swadesh.panlexswadeshcorpusreader method)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexSwadeshCorpusReader.license", false]], "license() (nltk.corpus.reader.panlexswadeshcorpusreader method)": [[57, "nltk.corpus.reader.PanlexSwadeshCorpusReader.license", false]], "license() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.license", false]], "license() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.license", false]], "lidstone (class in nltk.lm)": [[135, "nltk.lm.Lidstone", false]], "lidstone (class in nltk.lm.models)": [[138, "nltk.lm.models.Lidstone", false]], "lidstoneprobdist (class in nltk.probability)": [[179, "nltk.probability.LidstoneProbDist", false]], "likelihood() (nltk.cluster.api.clusteri method)": [[47, "nltk.cluster.api.ClusterI.likelihood", false]], "likelihood() (nltk.cluster.util.vectorspaceclusterer method)": [[51, "nltk.cluster.util.VectorSpaceClusterer.likelihood", false]], "likelihood_ratio() (nltk.metrics.association.ngramassocmeasures class method)": [[146, "nltk.metrics.association.NgramAssocMeasures.likelihood_ratio", false]], "likelihood_vectorspace() (nltk.cluster.em.emclusterer method)": [[48, "nltk.cluster.em.EMClusterer.likelihood_vectorspace", false]], "likelihood_vectorspace() (nltk.cluster.util.vectorspaceclusterer method)": [[51, "nltk.cluster.util.VectorSpaceClusterer.likelihood_vectorspace", false]], "limit_by_time_demo() (in module nltk.twitter.twitter_demo)": [[288, "nltk.twitter.twitter_demo.limit_by_time_demo", false]], "lin_similarity() (in module nltk.corpus.reader.wordnet)": [[107, "nltk.corpus.reader.wordnet.lin_similarity", false]], "lin_similarity() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.lin_similarity", false]], "lin_similarity() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.lin_similarity", false]], "lin_similarity() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.lin_similarity", false]], "line() (nltk.inference.resolution.debugobject method)": [[129, "nltk.inference.resolution.DebugObject.line", false]], "line() (nltk.inference.tableau.debug method)": [[130, "nltk.inference.tableau.Debug.line", false]], "line_tokenize() (in module nltk.tokenize.simple)": [[247, "nltk.tokenize.simple.line_tokenize", false]], "linearlogicapplicationexception": [[190, "nltk.sem.linearlogic.LinearLogicApplicationException", false]], "linearlogicparser (class in nltk.sem.linearlogic)": [[190, "nltk.sem.linearlogic.LinearLogicParser", false]], "linebuffer (nltk.data.seekableunicodestreamreader attribute)": [[111, "nltk.data.SeekableUnicodeStreamReader.linebuffer", false]], "lines (nltk.corpus.reader.markdown.codeblock property)": [[78, "nltk.corpus.reader.markdown.CodeBlock.lines", false]], "lines() (nltk.corpus.reader.nombank.nombankcorpusreader method)": [[81, "nltk.corpus.reader.nombank.NombankCorpusReader.lines", false]], "lines() (nltk.corpus.reader.nombankcorpusreader method)": [[57, "nltk.corpus.reader.NombankCorpusReader.lines", false]], "lines() (nltk.corpus.reader.propbank.propbankcorpusreader method)": [[89, "nltk.corpus.reader.propbank.PropbankCorpusReader.lines", false]], "lines() (nltk.corpus.reader.propbankcorpusreader method)": [[57, "nltk.corpus.reader.PropbankCorpusReader.lines", false]], "linestart (nltk.tokenize.punkt.punkttoken attribute)": [[243, "nltk.tokenize.punkt.PunktToken.linestart", false]], "linetokenizer (class in nltk.tokenize.simple)": [[247, "nltk.tokenize.simple.LineTokenizer", false]], "link (class in nltk.corpus.reader.markdown)": [[78, "nltk.corpus.reader.markdown.Link", false]], "link_reader() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.link_reader", false]], "links() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.links", false]], "linthesauruscorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.LinThesaurusCorpusReader", false]], "linthesauruscorpusreader (class in nltk.corpus.reader.lin)": [[77, "nltk.corpus.reader.lin.LinThesaurusCorpusReader", false]], "list (class in nltk.corpus.reader.markdown)": [[78, "nltk.corpus.reader.markdown.List", false]], "list() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.list", false]], "list2sym() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.list2sym", false]], "list2txt() (nltk.tabdata.tabencoder method)": [[212, "nltk.tabdata.TabEncoder.list2txt", false]], "list_reader() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.list_reader", false]], "listbox_config (nltk.draw.table.multilistbox attribute)": [[117, "nltk.draw.table.MultiListbox.LISTBOX_CONFIG", false]], "listboxes (nltk.draw.table.multilistbox property)": [[117, "nltk.draw.table.MultiListbox.listboxes", false]], "lists() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.lists", false]], "load() (in module nltk.data)": [[111, "nltk.data.load", false]], "load() (nltk.parse.dependencygraph.dependencygraph static method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.load", false]], "load() (nltk.tag.perceptron.averagedperceptron method)": [[221, "nltk.tag.perceptron.AveragedPerceptron.load", false]], "load_ace_data() (in module nltk.chunk.named_entity)": [[27, "nltk.chunk.named_entity.load_ace_data", false]], "load_ace_file() (in module nltk.chunk.named_entity)": [[27, "nltk.chunk.named_entity.load_ace_file", false]], "load_array() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.load_array", false]], "load_creds() (nltk.twitter.util.authenticate method)": [[290, "nltk.twitter.util.Authenticate.load_creds", false]], "load_fol() (in module nltk.inference.discourse)": [[125, "nltk.inference.discourse.load_fol", false]], "load_from_json() (nltk.tag.perceptron.perceptrontagger method)": [[221, "nltk.tag.perceptron.PerceptronTagger.load_from_json", false]], "load_lang() (nltk.tokenize.punkt.punkttokenizer method)": [[243, "nltk.tokenize.punkt.PunktTokenizer.load_lang", false]], "load_maxent_params() (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.load_maxent_params", false]], "load_params() (nltk.chunk.named_entity.maxent_ne_chunker method)": [[27, "nltk.chunk.named_entity.Maxent_NE_Chunker.load_params", false]], "load_parser() (in module nltk.parse.util)": [[177, "nltk.parse.util.load_parser", false]], "load_pos() (in module nltk.tag.hmm)": [[218, "nltk.tag.hmm.load_pos", false]], "load_punkt_params() (in module nltk.tokenize.punkt)": [[243, "nltk.tokenize.punkt.load_punkt_params", false]], "load_wiki_q() (nltk.corpus.reader.bcp47.bcp47corpusreader method)": [[60, "nltk.corpus.reader.bcp47.BCP47CorpusReader.load_wiki_q", false]], "load_wiki_q() (nltk.corpus.reader.bcp47corpusreader method)": [[57, "nltk.corpus.reader.BCP47CorpusReader.load_wiki_q", false]], "localtimezoneoffsetwithutc (class in nltk.twitter.api)": [[286, "nltk.twitter.api.LocalTimezoneOffsetWithUTC", false]], "log_base2() (in module nltk.lm.util)": [[141, "nltk.lm.util.log_base2", false]], "log_likelihood() (in module nltk.classify.util)": [[43, "nltk.classify.util.log_likelihood", false]], "log_likelihood() (in module nltk.metrics.scores)": [[150, "nltk.metrics.scores.log_likelihood", false]], "log_likelihood() (in module nltk.probability)": [[179, "nltk.probability.log_likelihood", false]], "log_prob (nltk.translate.api.phrasetableentry attribute)": [[257, "nltk.translate.api.PhraseTableEntry.log_prob", false]], "log_probability() (nltk.tag.hmm.hiddenmarkovmodeltagger method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.log_probability", false]], "logicalexpressionexception": [[191, "nltk.sem.logic.LogicalExpressionException", false]], "logicparser (class in nltk.sem.logic)": [[191, "nltk.sem.logic.LogicParser", false]], "logprob() (nltk.probability.dictionaryprobdist method)": [[179, "nltk.probability.DictionaryProbDist.logprob", false]], "logprob() (nltk.probability.mutableprobdist method)": [[179, "nltk.probability.MutableProbDist.logprob", false]], "logprob() (nltk.probability.probabilisticmixin method)": [[179, "nltk.probability.ProbabilisticMixIn.logprob", false]], "logprob() (nltk.probability.probdisti method)": [[179, "nltk.probability.ProbDistI.logprob", false]], "logscore() (nltk.lm.api.languagemodel method)": [[136, "nltk.lm.api.LanguageModel.logscore", false]], "logsumexp2() (in module nltk.tag.hmm)": [[218, "nltk.tag.hmm.logsumexp2", false]], "longest_target_sentence_length() (in module nltk.translate.ibm_model)": [[268, "nltk.translate.ibm_model.longest_target_sentence_length", false]], "longestchartparser (class in nltk.parse.pchart)": [[171, "nltk.parse.pchart.LongestChartParser", false]], "longid() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.longid", false]], "longid() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.longid", false]], "lookup() (nltk.lm.vocabulary method)": [[135, "nltk.lm.Vocabulary.lookup", false]], "lookup() (nltk.lm.vocabulary.vocabulary method)": [[142, "nltk.lm.vocabulary.Vocabulary.lookup", false]], "lookup() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.lookup", false]], "lookup_by_userid_demo() (in module nltk.twitter.twitter_demo)": [[288, "nltk.twitter.twitter_demo.lookup_by_userid_demo", false]], "lookup_unique() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.lookup_unique", false]], "lowest_common_hypernyms() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.lowest_common_hypernyms", false]], "lstrip (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.LSTRIP", false]], "lu() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.lu", false]], "lu() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.lu", false]], "lu_basic() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.lu_basic", false]], "lu_basic() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.lu_basic", false]], "lu_ids_and_names() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.lu_ids_and_names", false]], "lu_ids_and_names() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.lu_ids_and_names", false]], "lus() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.lus", false]], "lus() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.lus", false]], "mace (class in nltk.inference.mace)": [[126, "nltk.inference.mace.Mace", false]], "macecommand (class in nltk.inference.mace)": [[126, "nltk.inference.mace.MaceCommand", false]], "macintyrecontractions (class in nltk.tokenize.destructive)": [[239, "nltk.tokenize.destructive.MacIntyreContractions", false]], "macmorphocorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.MacMorphoCorpusReader", false]], "macmorphocorpusreader (class in nltk.corpus.reader.tagged)": [[99, "nltk.corpus.reader.tagged.MacMorphoCorpusReader", false]], "main() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.main", false]], "mainloop() (nltk.downloader.downloadergui method)": [[113, "nltk.downloader.DownloaderGUI.mainloop", false]], "mainloop() (nltk.draw.cfg.cfgdemo method)": [[115, "nltk.draw.cfg.CFGDemo.mainloop", false]], "mainloop() (nltk.draw.tree.treeview method)": [[118, "nltk.draw.tree.TreeView.mainloop", false]], "mainloop() (nltk.draw.util.canvasframe method)": [[119, "nltk.draw.util.CanvasFrame.mainloop", false]], "mainloop() (nltk.draw.util.showtext method)": [[119, "nltk.draw.util.ShowText.mainloop", false]], "mainloop() (nltk.sem.drt_glue_demo.drtgluedemo method)": [[185, "nltk.sem.drt_glue_demo.DrtGlueDemo.mainloop", false]], "make_applicationexpression() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.make_ApplicationExpression", false]], "make_applicationexpression() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.make_ApplicationExpression", false]], "make_booleanexpression() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.make_BooleanExpression", false]], "make_booleanexpression() (nltk.sem.linearlogic.linearlogicparser method)": [[190, "nltk.sem.linearlogic.LinearLogicParser.make_BooleanExpression", false]], "make_booleanexpression() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.make_BooleanExpression", false]], "make_equalityexpression() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.make_EqualityExpression", false]], "make_equalityexpression() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.make_EqualityExpression", false]], "make_equalityexpression() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.make_EqualityExpression", false]], "make_lambdaexpression() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.make_LambdaExpression", false]], "make_lambdaexpression() (nltk.sem.glue.drtglueformula method)": [[187, "nltk.sem.glue.DrtGlueFormula.make_LambdaExpression", false]], "make_lambdaexpression() (nltk.sem.glue.glueformula method)": [[187, "nltk.sem.glue.GlueFormula.make_LambdaExpression", false]], "make_lambdaexpression() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.make_LambdaExpression", false]], "make_lex() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.make_lex", false]], "make_lex_dict() (nltk.sentiment.vader.sentimentintensityanalyzer method)": [[198, "nltk.sentiment.vader.SentimentIntensityAnalyzer.make_lex_dict", false]], "make_negatedexpression() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.make_NegatedExpression", false]], "make_negatedexpression() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.make_NegatedExpression", false]], "make_quanifiedexpression() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.make_QuanifiedExpression", false]], "make_tree() (nltk.parse.corenlp.corenlpdependencyparser method)": [[163, "nltk.parse.corenlp.CoreNLPDependencyParser.make_tree", false]], "make_tree() (nltk.parse.corenlp.corenlpparser method)": [[163, "nltk.parse.corenlp.CoreNLPParser.make_tree", false]], "make_valuation() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.make_valuation", false]], "make_variableexpression() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.make_VariableExpression", false]], "make_variableexpression() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.make_VariableExpression", false]], "make_variableexpression() (nltk.sem.glue.drtglueformula method)": [[187, "nltk.sem.glue.DrtGlueFormula.make_VariableExpression", false]], "make_variableexpression() (nltk.sem.glue.glueformula method)": [[187, "nltk.sem.glue.GlueFormula.make_VariableExpression", false]], "make_variableexpression() (nltk.sem.linearlogic.linearlogicparser method)": [[190, "nltk.sem.linearlogic.LinearLogicParser.make_VariableExpression", false]], "make_variableexpression() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.make_VariableExpression", false]], "make_variableexpression() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.make_VariableExpression", false]], "makeelement() (nltk.internals.elementwrapper method)": [[131, "nltk.internals.ElementWrapper.makeelement", false]], "malt_demo() (in module nltk.parse.dependencygraph)": [[164, "nltk.parse.dependencygraph.malt_demo", false]], "malt_regex_tagger() (in module nltk.parse.malt)": [[169, "nltk.parse.malt.malt_regex_tagger", false]], "maltparser (class in nltk.parse.malt)": [[169, "nltk.parse.malt.MaltParser", false]], "manage() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.manage", false]], "map (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.MAP", false]], "map_tag() (in module nltk.tag.mapping)": [[220, "nltk.tag.mapping.map_tag", false]], "map_to_many() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.map_to_many", false]], "map_to_many() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.map_to_many", false]], "map_to_one() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.map_to_one", false]], "map_to_one() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.map_to_one", false]], "map_wn() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.map_wn", false]], "map_wn() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.map_wn", false]], "mapping_msd_universal (nltk.corpus.reader.mte.mtetagconverter attribute)": [[79, "nltk.corpus.reader.mte.MTETagConverter.mapping_msd_universal", false]], "mark() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.mark", false]], "mark_alls_fresh() (nltk.inference.tableau.agenda method)": [[130, "nltk.inference.tableau.Agenda.mark_alls_fresh", false]], "mark_negation() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.mark_negation", false]], "mark_neqs_fresh() (nltk.inference.tableau.agenda method)": [[130, "nltk.inference.tableau.Agenda.mark_neqs_fresh", false]], "markdownblock (class in nltk.corpus.reader.markdown)": [[78, "nltk.corpus.reader.markdown.MarkdownBlock", false]], "markdowncorpusreader (class in nltk.corpus.reader.markdown)": [[78, "nltk.corpus.reader.markdown.MarkdownCorpusReader", false]], "markdownsection (class in nltk.corpus.reader.markdown)": [[78, "nltk.corpus.reader.markdown.MarkdownSection", false]], "markonly() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.markonly", false]], "martin_extensions (nltk.stem.porter.porterstemmer attribute)": [[206, "nltk.stem.porter.PorterStemmer.MARTIN_EXTENSIONS", false]], "masi_distance() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.masi_distance", false]], "match() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.match", false]], "matchbrackets() (in module nltk.ccg.lexicon)": [[16, "nltk.ccg.lexicon.matchBrackets", false]], "matches() (nltk.sem.logic.anytype method)": [[191, "nltk.sem.logic.AnyType.matches", false]], "matches() (nltk.sem.logic.basictype method)": [[191, "nltk.sem.logic.BasicType.matches", false]], "matches() (nltk.sem.logic.complextype method)": [[191, "nltk.sem.logic.ComplexType.matches", false]], "max() (nltk.probability.dictionaryprobdist method)": [[179, "nltk.probability.DictionaryProbDist.max", false]], "max() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.max", false]], "max() (nltk.probability.heldoutprobdist method)": [[179, "nltk.probability.HeldoutProbDist.max", false]], "max() (nltk.probability.kneserneyprobdist method)": [[179, "nltk.probability.KneserNeyProbDist.max", false]], "max() (nltk.probability.lidstoneprobdist method)": [[179, "nltk.probability.LidstoneProbDist.max", false]], "max() (nltk.probability.mleprobdist method)": [[179, "nltk.probability.MLEProbDist.max", false]], "max() (nltk.probability.mutableprobdist method)": [[179, "nltk.probability.MutableProbDist.max", false]], "max() (nltk.probability.probdisti method)": [[179, "nltk.probability.ProbDistI.max", false]], "max() (nltk.probability.simplegoodturingprobdist method)": [[179, "nltk.probability.SimpleGoodTuringProbDist.max", false]], "max() (nltk.probability.uniformprobdist method)": [[179, "nltk.probability.UniformProbDist.max", false]], "max() (nltk.probability.wittenbellprobdist method)": [[179, "nltk.probability.WittenBellProbDist.max", false]], "max_depth() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.max_depth", false]], "max_len() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.max_len", false]], "maxent_ne_chunker (class in nltk.chunk.named_entity)": [[27, "nltk.chunk.named_entity.Maxent_NE_Chunker", false]], "maxent_pos_tagger() (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.maxent_pos_tagger", false]], "maxentclassifier (class in nltk.classify.maxent)": [[33, "nltk.classify.maxent.MaxentClassifier", false]], "maxentdecoder (class in nltk.tabdata)": [[212, "nltk.tabdata.MaxentDecoder", false]], "maxentencoder (class in nltk.tabdata)": [[212, "nltk.tabdata.MaxentEncoder", false]], "maxentfeatureencodingi (class in nltk.classify.maxent)": [[33, "nltk.classify.maxent.MaxentFeatureEncodingI", false]], "maximize_alignment_probabilities() (nltk.translate.ibm2.ibmmodel2 method)": [[264, "nltk.translate.ibm2.IBMModel2.maximize_alignment_probabilities", false]], "maximize_distortion_probabilities() (nltk.translate.ibm3.ibmmodel3 method)": [[265, "nltk.translate.ibm3.IBMModel3.maximize_distortion_probabilities", false]], "maximize_distortion_probabilities() (nltk.translate.ibm4.ibmmodel4 method)": [[266, "nltk.translate.ibm4.IBMModel4.maximize_distortion_probabilities", false]], "maximize_fertility_probabilities() (nltk.translate.ibm_model.ibmmodel method)": [[268, "nltk.translate.ibm_model.IBMModel.maximize_fertility_probabilities", false]], "maximize_lexical_translation_probabilities() (nltk.translate.ibm_model.ibmmodel method)": [[268, "nltk.translate.ibm_model.IBMModel.maximize_lexical_translation_probabilities", false]], "maximize_null_generation_probabilities() (nltk.translate.ibm_model.ibmmodel method)": [[268, "nltk.translate.ibm_model.IBMModel.maximize_null_generation_probabilities", false]], "maximize_vacancy_probabilities() (nltk.translate.ibm5.ibmmodel5 method)": [[267, "nltk.translate.ibm5.IBMModel5.maximize_vacancy_probabilities", false]], "md5_hexdigest() (in module nltk.downloader)": [[113, "nltk.downloader.md5_hexdigest", false]], "meaning (class in nltk.corpus.reader.panlex_lite)": [[84, "nltk.corpus.reader.panlex_lite.Meaning", false]], "meaning_q (nltk.corpus.reader.panlex_lite.panlexlitecorpusreader attribute)": [[84, "nltk.corpus.reader.panlex_lite.PanLexLiteCorpusReader.MEANING_Q", false]], "meaning_q (nltk.corpus.reader.panlexlitecorpusreader attribute)": [[57, "nltk.corpus.reader.PanLexLiteCorpusReader.MEANING_Q", false]], "meanings() (nltk.corpus.reader.panlex_lite.panlexlitecorpusreader method)": [[84, "nltk.corpus.reader.panlex_lite.PanLexLiteCorpusReader.meanings", false]], "meanings() (nltk.corpus.reader.panlexlitecorpusreader method)": [[57, "nltk.corpus.reader.PanLexLiteCorpusReader.meanings", false]], "means() (nltk.cluster.kmeans.kmeansclusterer method)": [[50, "nltk.cluster.kmeans.KMeansClusterer.means", false]], "merge() (in module nltk.misc.sort)": [[157, "nltk.misc.sort.merge", false]], "merge() (nltk.cluster.util.dendrogram method)": [[51, "nltk.cluster.util.Dendrogram.merge", false]], "merged_synsets() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.merged_synsets", false]], "merged_synsets() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.merged_synsets", false]], "mergerule (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.MergeRule", false]], "metadata() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.metadata", false]], "metadata_reader() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.metadata_reader", false]], "meteor_score() (in module nltk.translate.meteor_score)": [[269, "nltk.translate.meteor_score.meteor_score", false]], "method0() (nltk.translate.bleu_score.smoothingfunction method)": [[258, "nltk.translate.bleu_score.SmoothingFunction.method0", false]], "method1() (nltk.translate.bleu_score.smoothingfunction method)": [[258, "nltk.translate.bleu_score.SmoothingFunction.method1", false]], "method2() (nltk.translate.bleu_score.smoothingfunction method)": [[258, "nltk.translate.bleu_score.SmoothingFunction.method2", false]], "method3() (nltk.translate.bleu_score.smoothingfunction method)": [[258, "nltk.translate.bleu_score.SmoothingFunction.method3", false]], "method4() (nltk.translate.bleu_score.smoothingfunction method)": [[258, "nltk.translate.bleu_score.SmoothingFunction.method4", false]], "method5() (nltk.translate.bleu_score.smoothingfunction method)": [[258, "nltk.translate.bleu_score.SmoothingFunction.method5", false]], "method6() (nltk.translate.bleu_score.smoothingfunction method)": [[258, "nltk.translate.bleu_score.SmoothingFunction.method6", false]], "method7() (nltk.translate.bleu_score.smoothingfunction method)": [[258, "nltk.translate.bleu_score.SmoothingFunction.method7", false]], "mi_like() (nltk.metrics.association.ngramassocmeasures static method)": [[146, "nltk.metrics.association.NgramAssocMeasures.mi_like", false]], "mimic_wrap() (in module nltk.corpus.reader.framenet)": [[72, "nltk.corpus.reader.framenet.mimic_wrap", false]], "min_colloc_freq (nltk.tokenize.punkt.punkttrainer attribute)": [[243, "nltk.tokenize.punkt.PunktTrainer.MIN_COLLOC_FREQ", false]], "min_depth() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.min_depth", false]], "min_len() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.min_len", false]], "min_prob (nltk.translate.ibm_model.ibmmodel attribute)": [[268, "nltk.translate.ibm_model.IBMModel.MIN_PROB", false]], "min_score_factor (nltk.translate.ibm5.ibmmodel5 attribute)": [[267, "nltk.translate.ibm5.IBMModel5.MIN_SCORE_FACTOR", false]], "min_size (nltk.collections.lazysubsequence attribute)": [[52, "nltk.collections.LazySubsequence.MIN_SIZE", false]], "minimalset (class in nltk.misc.minimalset)": [[156, "nltk.misc.minimalset.MinimalSet", false]], "missed() (nltk.chunk.util.chunkscore method)": [[29, "nltk.chunk.util.ChunkScore.missed", false]], "mle (class in nltk.lm)": [[135, "nltk.lm.MLE", false]], "mle (class in nltk.lm.models)": [[138, "nltk.lm.models.MLE", false]], "mleprobdist (class in nltk.probability)": [[179, "nltk.probability.MLEProbDist", false]], "mlu() (nltk.corpus.reader.childes.childescorpusreader method)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.MLU", false]], "mlu() (nltk.corpus.reader.childescorpusreader method)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.MLU", false]], "mode (nltk.data.seekableunicodestreamreader property)": [[111, "nltk.data.SeekableUnicodeStreamReader.mode", false]], "model (class in nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.Model", false]], "model() (nltk.inference.api.basemodelbuildercommand method)": [[124, "nltk.inference.api.BaseModelBuilderCommand.model", false]], "model() (nltk.inference.api.modelbuildercommand method)": [[124, "nltk.inference.api.ModelBuilderCommand.model", false]], "model() (nltk.inference.api.modelbuildercommanddecorator method)": [[124, "nltk.inference.api.ModelBuilderCommandDecorator.model", false]], "model2counts (class in nltk.translate.ibm2)": [[264, "nltk.translate.ibm2.Model2Counts", false]], "model3counts (class in nltk.translate.ibm3)": [[265, "nltk.translate.ibm3.Model3Counts", false]], "model4_prob_t_a_given_s() (nltk.translate.ibm4.ibmmodel4 static method)": [[266, "nltk.translate.ibm4.IBMModel4.model4_prob_t_a_given_s", false]], "model4counts (class in nltk.translate.ibm4)": [[266, "nltk.translate.ibm4.Model4Counts", false]], "model5counts (class in nltk.translate.ibm5)": [[267, "nltk.translate.ibm5.Model5Counts", false]], "modelbuilder (class in nltk.inference.api)": [[124, "nltk.inference.api.ModelBuilder", false]], "modelbuildercommand (class in nltk.inference.api)": [[124, "nltk.inference.api.ModelBuilderCommand", false]], "modelbuildercommanddecorator (class in nltk.inference.api)": [[124, "nltk.inference.api.ModelBuilderCommandDecorator", false]], "models() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.models", false]], "models() (nltk.inference.discourse.discoursetester method)": [[125, "nltk.inference.discourse.DiscourseTester.models", false]], "modified_precision() (in module nltk.translate.bleu_score)": [[258, "nltk.translate.bleu_score.modified_precision", false]], "module": [[0, "module-nltk", false], [1, "module-nltk.app", false], [2, "module-nltk.app.chartparser_app", false], [3, "module-nltk.app.chunkparser_app", false], [4, "module-nltk.app.collocations_app", false], [5, "module-nltk.app.concordance_app", false], [6, "module-nltk.app.nemo_app", false], [7, "module-nltk.app.rdparser_app", false], [8, "module-nltk.app.srparser_app", false], [9, "module-nltk.app.wordfreq_app", false], [10, "module-nltk.app.wordnet_app", false], [11, "module-nltk.book", false], [12, "module-nltk.ccg", false], [13, "module-nltk.ccg.api", false], [14, "module-nltk.ccg.chart", false], [15, "module-nltk.ccg.combinator", false], [16, "module-nltk.ccg.lexicon", false], [17, "module-nltk.ccg.logic", false], [18, "module-nltk.chat", false], [19, "module-nltk.chat.eliza", false], [20, "module-nltk.chat.iesha", false], [21, "module-nltk.chat.rude", false], [22, "module-nltk.chat.suntsu", false], [23, "module-nltk.chat.util", false], [24, "module-nltk.chat.zen", false], [25, "module-nltk.chunk", false], [26, "module-nltk.chunk.api", false], [27, "module-nltk.chunk.named_entity", false], [28, "module-nltk.chunk.regexp", false], [29, "module-nltk.chunk.util", false], [30, "module-nltk.classify", false], [31, "module-nltk.classify.api", false], [32, "module-nltk.classify.decisiontree", false], [33, "module-nltk.classify.maxent", false], [34, "module-nltk.classify.megam", false], [35, "module-nltk.classify.naivebayes", false], [36, "module-nltk.classify.positivenaivebayes", false], [37, "module-nltk.classify.rte_classify", false], [38, "module-nltk.classify.scikitlearn", false], [39, "module-nltk.classify.senna", false], [40, "module-nltk.classify.svm", false], [41, "module-nltk.classify.tadm", false], [42, "module-nltk.classify.textcat", false], [43, "module-nltk.classify.util", false], [44, "module-nltk.classify.weka", false], [45, "module-nltk.cli", false], [46, "module-nltk.cluster", false], [47, "module-nltk.cluster.api", false], [48, "module-nltk.cluster.em", false], [49, "module-nltk.cluster.gaac", false], [50, "module-nltk.cluster.kmeans", false], [51, "module-nltk.cluster.util", false], [52, "module-nltk.collections", false], [53, "module-nltk.collocations", false], [54, "module-nltk.compat", false], [55, "module-nltk.corpus", false], [56, "module-nltk.corpus.europarl_raw", false], [57, "module-nltk.corpus.reader", false], [58, "module-nltk.corpus.reader.aligned", false], [59, "module-nltk.corpus.reader.api", false], [60, "module-nltk.corpus.reader.bcp47", false], [61, "module-nltk.corpus.reader.bnc", false], [62, "module-nltk.corpus.reader.bracket_parse", false], [63, "module-nltk.corpus.reader.categorized_sents", false], [64, "module-nltk.corpus.reader.chasen", false], [65, "module-nltk.corpus.reader.childes", false], [66, "module-nltk.corpus.reader.chunked", false], [67, "module-nltk.corpus.reader.cmudict", false], [68, "module-nltk.corpus.reader.comparative_sents", false], [69, "module-nltk.corpus.reader.conll", false], [70, "module-nltk.corpus.reader.crubadan", false], [71, "module-nltk.corpus.reader.dependency", false], [72, "module-nltk.corpus.reader.framenet", false], [73, "module-nltk.corpus.reader.ieer", false], [74, "module-nltk.corpus.reader.indian", false], [75, "module-nltk.corpus.reader.ipipan", false], [76, "module-nltk.corpus.reader.knbc", false], [77, "module-nltk.corpus.reader.lin", false], [78, "module-nltk.corpus.reader.markdown", false], [79, "module-nltk.corpus.reader.mte", false], [80, "module-nltk.corpus.reader.nkjp", false], [81, "module-nltk.corpus.reader.nombank", false], [82, "module-nltk.corpus.reader.nps_chat", false], [83, "module-nltk.corpus.reader.opinion_lexicon", false], [84, "module-nltk.corpus.reader.panlex_lite", false], [85, "module-nltk.corpus.reader.panlex_swadesh", false], [86, "module-nltk.corpus.reader.pl196x", false], [87, "module-nltk.corpus.reader.plaintext", false], [88, "module-nltk.corpus.reader.ppattach", false], [89, "module-nltk.corpus.reader.propbank", false], [90, "module-nltk.corpus.reader.pros_cons", false], [91, "module-nltk.corpus.reader.reviews", false], [92, "module-nltk.corpus.reader.rte", false], [93, "module-nltk.corpus.reader.semcor", false], [94, "module-nltk.corpus.reader.senseval", false], [95, "module-nltk.corpus.reader.sentiwordnet", false], [96, "module-nltk.corpus.reader.sinica_treebank", false], [97, "module-nltk.corpus.reader.string_category", false], [98, "module-nltk.corpus.reader.switchboard", false], [99, "module-nltk.corpus.reader.tagged", false], [100, "module-nltk.corpus.reader.timit", false], [101, "module-nltk.corpus.reader.toolbox", false], [102, "module-nltk.corpus.reader.twitter", false], [103, "module-nltk.corpus.reader.udhr", false], [104, "module-nltk.corpus.reader.util", false], [105, "module-nltk.corpus.reader.verbnet", false], [106, "module-nltk.corpus.reader.wordlist", false], [107, "module-nltk.corpus.reader.wordnet", false], [108, "module-nltk.corpus.reader.xmldocs", false], [109, "module-nltk.corpus.reader.ycoe", false], [110, "module-nltk.corpus.util", false], [111, "module-nltk.data", false], [112, "module-nltk.decorators", false], [113, "module-nltk.downloader", false], [114, "module-nltk.draw", false], [115, "module-nltk.draw.cfg", false], [116, "module-nltk.draw.dispersion", false], [117, "module-nltk.draw.table", false], [118, "module-nltk.draw.tree", false], [119, "module-nltk.draw.util", false], [120, "module-nltk.featstruct", false], [121, "module-nltk.grammar", false], [122, "module-nltk.help", false], [123, "module-nltk.inference", false], [124, "module-nltk.inference.api", false], [125, "module-nltk.inference.discourse", false], [126, "module-nltk.inference.mace", false], [127, "module-nltk.inference.nonmonotonic", false], [128, "module-nltk.inference.prover9", false], [129, "module-nltk.inference.resolution", false], [130, "module-nltk.inference.tableau", false], [131, "module-nltk.internals", false], [132, "module-nltk.jsontags", false], [133, "module-nltk.langnames", false], [134, "module-nltk.lazyimport", false], [135, "module-nltk.lm", false], [136, "module-nltk.lm.api", false], [137, "module-nltk.lm.counter", false], [138, "module-nltk.lm.models", false], [139, "module-nltk.lm.preprocessing", false], [140, "module-nltk.lm.smoothing", false], [141, "module-nltk.lm.util", false], [142, "module-nltk.lm.vocabulary", false], [143, "module-nltk.metrics", false], [144, "module-nltk.metrics.agreement", false], [145, "module-nltk.metrics.aline", false], [146, "module-nltk.metrics.association", false], [147, "module-nltk.metrics.confusionmatrix", false], [148, "module-nltk.metrics.distance", false], [149, "module-nltk.metrics.paice", false], [150, "module-nltk.metrics.scores", false], [151, "module-nltk.metrics.segmentation", false], [152, "module-nltk.metrics.spearman", false], [153, "module-nltk.misc", false], [154, "module-nltk.misc.babelfish", false], [155, "module-nltk.misc.chomsky", false], [156, "module-nltk.misc.minimalset", false], [157, "module-nltk.misc.sort", false], [158, "module-nltk.misc.wordfinder", false], [159, "module-nltk.parse", false], [160, "module-nltk.parse.api", false], [161, "module-nltk.parse.bllip", false], [162, "module-nltk.parse.chart", false], [163, "module-nltk.parse.corenlp", false], [164, "module-nltk.parse.dependencygraph", false], [165, "module-nltk.parse.earleychart", false], [166, "module-nltk.parse.evaluate", false], [167, "module-nltk.parse.featurechart", false], [168, "module-nltk.parse.generate", false], [169, "module-nltk.parse.malt", false], [170, "module-nltk.parse.nonprojectivedependencyparser", false], [171, "module-nltk.parse.pchart", false], [172, "module-nltk.parse.projectivedependencyparser", false], [173, "module-nltk.parse.recursivedescent", false], [174, "module-nltk.parse.shiftreduce", false], [175, "module-nltk.parse.stanford", false], [176, "module-nltk.parse.transitionparser", false], [177, "module-nltk.parse.util", false], [178, "module-nltk.parse.viterbi", false], [179, "module-nltk.probability", false], [180, "module-nltk.sem", false], [181, "module-nltk.sem.boxer", false], [182, "module-nltk.sem.chat80", false], [183, "module-nltk.sem.cooper_storage", false], [184, "module-nltk.sem.drt", false], [185, "module-nltk.sem.drt_glue_demo", false], [186, "module-nltk.sem.evaluate", false], [187, "module-nltk.sem.glue", false], [188, "module-nltk.sem.hole", false], [189, "module-nltk.sem.lfg", false], [190, "module-nltk.sem.linearlogic", false], [191, "module-nltk.sem.logic", false], [192, "module-nltk.sem.relextract", false], [193, "module-nltk.sem.skolemize", false], [194, "module-nltk.sem.util", false], [195, "module-nltk.sentiment", false], [196, "module-nltk.sentiment.sentiment_analyzer", false], [197, "module-nltk.sentiment.util", false], [198, "module-nltk.sentiment.vader", false], [199, "module-nltk.stem", false], [200, "module-nltk.stem.api", false], [201, "module-nltk.stem.arlstem", false], [202, "module-nltk.stem.arlstem2", false], [203, "module-nltk.stem.cistem", false], [204, "module-nltk.stem.isri", false], [205, "module-nltk.stem.lancaster", false], [206, "module-nltk.stem.porter", false], [207, "module-nltk.stem.regexp", false], [208, "module-nltk.stem.rslp", false], [209, "module-nltk.stem.snowball", false], [210, "module-nltk.stem.util", false], [211, "module-nltk.stem.wordnet", false], [212, "module-nltk.tabdata", false], [213, "module-nltk.tag", false], [214, "module-nltk.tag.api", false], [215, "module-nltk.tag.brill", false], [216, "module-nltk.tag.brill_trainer", false], [217, "module-nltk.tag.crf", false], [218, "module-nltk.tag.hmm", false], [219, "module-nltk.tag.hunpos", false], [220, "module-nltk.tag.mapping", false], [221, "module-nltk.tag.perceptron", false], [222, "module-nltk.tag.senna", false], [223, "module-nltk.tag.sequential", false], [224, "module-nltk.tag.stanford", false], [225, "module-nltk.tag.tnt", false], [226, "module-nltk.tag.util", false], [227, "module-nltk.tbl", false], [228, "module-nltk.tbl.api", false], [229, "module-nltk.tbl.demo", false], [230, "module-nltk.tbl.erroranalysis", false], [231, "module-nltk.tbl.feature", false], [232, "module-nltk.tbl.rule", false], [233, "module-nltk.tbl.template", false], [234, "module-nltk.text", false], [235, "module-nltk.tgrep", false], [236, "module-nltk.tokenize", false], [237, "module-nltk.tokenize.api", false], [238, "module-nltk.tokenize.casual", false], [239, "module-nltk.tokenize.destructive", false], [240, "module-nltk.tokenize.legality_principle", false], [241, "module-nltk.tokenize.mwe", false], [242, "module-nltk.tokenize.nist", false], [243, "module-nltk.tokenize.punkt", false], [244, "module-nltk.tokenize.regexp", false], [245, "module-nltk.tokenize.repp", false], [246, "module-nltk.tokenize.sexpr", false], [247, "module-nltk.tokenize.simple", false], [248, "module-nltk.tokenize.sonority_sequencing", false], [249, "module-nltk.tokenize.stanford", false], [250, "module-nltk.tokenize.stanford_segmenter", false], [251, "module-nltk.tokenize.texttiling", false], [252, "module-nltk.tokenize.toktok", false], [253, "module-nltk.tokenize.treebank", false], [254, "module-nltk.tokenize.util", false], [255, "module-nltk.toolbox", false], [256, "module-nltk.translate", false], [257, "module-nltk.translate.api", false], [258, "module-nltk.translate.bleu_score", false], [259, "module-nltk.translate.chrf_score", false], [260, "module-nltk.translate.gale_church", false], [261, "module-nltk.translate.gdfa", false], [262, "module-nltk.translate.gleu_score", false], [263, "module-nltk.translate.ibm1", false], [264, "module-nltk.translate.ibm2", false], [265, "module-nltk.translate.ibm3", false], [266, "module-nltk.translate.ibm4", false], [267, "module-nltk.translate.ibm5", false], [268, "module-nltk.translate.ibm_model", false], [269, "module-nltk.translate.meteor_score", false], [270, "module-nltk.translate.metrics", false], [271, "module-nltk.translate.nist_score", false], [272, "module-nltk.translate.phrase_based", false], [273, "module-nltk.translate.ribes_score", false], [274, "module-nltk.translate.stack_decoder", false], [275, "module-nltk.tree", false], [276, "module-nltk.tree.immutable", false], [277, "module-nltk.tree.parented", false], [278, "module-nltk.tree.parsing", false], [279, "module-nltk.tree.prettyprinter", false], [280, "module-nltk.tree.probabilistic", false], [281, "module-nltk.tree.transforms", false], [282, "module-nltk.tree.tree", false], [283, "module-nltk.treeprettyprinter", false], [284, "module-nltk.treetransforms", false], [285, "module-nltk.twitter", false], [286, "module-nltk.twitter.api", false], [287, "module-nltk.twitter.common", false], [288, "module-nltk.twitter.twitter_demo", false], [289, "module-nltk.twitter.twitterclient", false], [290, "module-nltk.twitter.util", false], [291, "module-nltk.util", false], [292, "module-nltk.wsd", false]], "morphological_substitutions (nltk.corpus.reader.wordnet.wordnetcorpusreader attribute)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.MORPHOLOGICAL_SUBSTITUTIONS", false]], "morphological_substitutions (nltk.corpus.reader.wordnetcorpusreader attribute)": [[57, "nltk.corpus.reader.WordNetCorpusReader.MORPHOLOGICAL_SUBSTITUTIONS", false]], "morphology() (nltk.corpus.reader.bcp47.bcp47corpusreader method)": [[60, "nltk.corpus.reader.bcp47.BCP47CorpusReader.morphology", false]], "morphology() (nltk.corpus.reader.bcp47corpusreader method)": [[57, "nltk.corpus.reader.BCP47CorpusReader.morphology", false]], "morphy() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.morphy", false]], "morphy() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.morphy", false]], "most_general_unification() (in module nltk.inference.resolution)": [[129, "nltk.inference.resolution.most_general_unification", false]], "most_informative_features() (nltk.classify.maxent.maxentclassifier method)": [[33, "nltk.classify.maxent.MaxentClassifier.most_informative_features", false]], "most_informative_features() (nltk.classify.naivebayes.naivebayesclassifier method)": [[35, "nltk.classify.naivebayes.NaiveBayesClassifier.most_informative_features", false]], "mots (nltk.translate.api.alignedsent property)": [[257, "nltk.translate.api.AlignedSent.mots", false]], "move() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.move", false]], "move_dot_forward() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.move_dot_forward", false]], "move_dot_forward() (nltk.parse.featurechart.featuretreeedge method)": [[167, "nltk.parse.featurechart.FeatureTreeEdge.move_dot_forward", false]], "moveto() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.moveto", false]], "msd_to_universal() (nltk.corpus.reader.mte.mtetagconverter static method)": [[79, "nltk.corpus.reader.mte.MTETagConverter.msd_to_universal", false]], "mst() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.mst", false]], "mtecorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.MTECorpusReader", false]], "mtecorpusreader (class in nltk.corpus.reader.mte)": [[79, "nltk.corpus.reader.mte.MTECorpusReader", false]], "mtecorpusview (class in nltk.corpus.reader.mte)": [[79, "nltk.corpus.reader.mte.MTECorpusView", false]], "mtefilereader (class in nltk.corpus.reader.mte)": [[79, "nltk.corpus.reader.mte.MTEFileReader", false]], "mtetagconverter (class in nltk.corpus.reader.mte)": [[79, "nltk.corpus.reader.mte.MTETagConverter", false]], "multi_commas (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.MULTI_COMMAS", false]], "multi_dashes (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.MULTI_DASHES", false]], "multi_dots (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.MULTI_DOTS", false]], "multi_kappa() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.multi_kappa", false]], "multiclassifieri (class in nltk.classify.api)": [[31, "nltk.classify.api.MultiClassifierI", false]], "multilistbox (class in nltk.draw.table)": [[117, "nltk.draw.table.MultiListbox", false]], "multiparentedtree (class in nltk.tree)": [[275, "nltk.tree.MultiParentedTree", false]], "multiparentedtree (class in nltk.tree.parented)": [[277, "nltk.tree.parented.MultiParentedTree", false]], "multiply() (nltk.inference.discourse.discoursetester static method)": [[125, "nltk.inference.discourse.DiscourseTester.multiply", false]], "mutableoptionmenu (class in nltk.draw.util)": [[119, "nltk.draw.util.MutableOptionMenu", false]], "mutableprobdist (class in nltk.probability)": [[179, "nltk.probability.MutableProbDist", false]], "mwa_ppdb_xxxl_file (nltk.corpus.reader.mwappdbcorpusreader attribute)": [[57, "nltk.corpus.reader.MWAPPDBCorpusReader.mwa_ppdb_xxxl_file", false]], "mwa_ppdb_xxxl_file (nltk.corpus.reader.wordlist.mwappdbcorpusreader attribute)": [[106, "nltk.corpus.reader.wordlist.MWAPPDBCorpusReader.mwa_ppdb_xxxl_file", false]], "mwappdbcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.MWAPPDBCorpusReader", false]], "mwappdbcorpusreader (class in nltk.corpus.reader.wordlist)": [[106, "nltk.corpus.reader.wordlist.MWAPPDBCorpusReader", false]], "mwetokenizer (class in nltk.tokenize.mwe)": [[241, "nltk.tokenize.mwe.MWETokenizer", false]], "n() (nltk.lm.counter.ngramcounter method)": [[137, "nltk.lm.counter.NgramCounter.N", false]], "n() (nltk.lm.ngramcounter method)": [[135, "nltk.lm.NgramCounter.N", false]], "n() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.N", false]], "n() (nltk.probability.conditionalfreqdist method)": [[179, "nltk.probability.ConditionalFreqDist.N", false]], "n() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.N", false]], "n_all (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.N_ALL", false]], "n_and (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.N_AND", false]], "n_app (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.N_APP", false]], "n_atom (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.N_ATOM", false]], "n_eq (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.N_EQ", false]], "n_exists (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.N_EXISTS", false]], "n_iff (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.N_IFF", false]], "n_imp (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.N_IMP", false]], "n_or (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.N_OR", false]], "n_prop (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.N_PROP", false]], "n_scalar (nltk.sentiment.vader.vaderconstants attribute)": [[198, "nltk.sentiment.vader.VaderConstants.N_SCALAR", false]], "naivebayesclassifier (class in nltk.classify.naivebayes)": [[35, "nltk.classify.naivebayes.NaiveBayesClassifier", false]], "naivebayesdependencyscorer (class in nltk.parse.nonprojectivedependencyparser)": [[170, "nltk.parse.nonprojectivedependencyparser.NaiveBayesDependencyScorer", false]], "name (nltk.corpus.reader.panlex_swadesh.panlexlanguage attribute)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexLanguage.name", false]], "name (nltk.data.seekableunicodestreamreader property)": [[111, "nltk.data.SeekableUnicodeStreamReader.name", false]], "name (nltk.downloader.collection attribute)": [[113, "nltk.downloader.Collection.name", false]], "name (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.name", false]], "name (nltk.featstruct.feature property)": [[120, "nltk.featstruct.Feature.name", false]], "name() (nltk.corpus.reader.bcp47.bcp47corpusreader method)": [[60, "nltk.corpus.reader.bcp47.BCP47CorpusReader.name", false]], "name() (nltk.corpus.reader.bcp47corpusreader method)": [[57, "nltk.corpus.reader.BCP47CorpusReader.name", false]], "name() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.name", false]], "name() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.name", false]], "names_demo() (in module nltk.classify.tadm)": [[41, "nltk.classify.tadm.names_demo", false]], "names_demo() (in module nltk.classify.util)": [[43, "nltk.classify.util.names_demo", false]], "names_demo_features() (in module nltk.classify.util)": [[43, "nltk.classify.util.names_demo_features", false]], "nck() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.Nck", false]], "ne (nltk.corpus.reader.conll.conllcorpusreader attribute)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.NE", false]], "ne (nltk.corpus.reader.conllcorpusreader attribute)": [[57, "nltk.corpus.reader.ConllCorpusReader.NE", false]], "ne_chunk() (in module nltk.chunk)": [[25, "nltk.chunk.ne_chunk", false]], "ne_chunk_sents() (in module nltk.chunk)": [[25, "nltk.chunk.ne_chunk_sents", false]], "ne_chunked() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.ne_chunked", false]], "ne_chunker() (in module nltk.chunk)": [[25, "nltk.chunk.ne_chunker", false]], "nearest() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.nearest", false]], "nechunkparser (class in nltk.chunk.named_entity)": [[27, "nltk.chunk.named_entity.NEChunkParser", false]], "nechunkparsertagger (class in nltk.chunk.named_entity)": [[27, "nltk.chunk.named_entity.NEChunkParserTagger", false]], "neg_score() (nltk.corpus.reader.sentisynset method)": [[57, "nltk.corpus.reader.SentiSynset.neg_score", false]], "neg_score() (nltk.corpus.reader.sentiwordnet.sentisynset method)": [[95, "nltk.corpus.reader.sentiwordnet.SentiSynset.neg_score", false]], "negate (nltk.sentiment.vader.vaderconstants attribute)": [[198, "nltk.sentiment.vader.VaderConstants.NEGATE", false]], "negate() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.negate", false]], "negate() (nltk.sem.logic.negatedexpression method)": [[191, "nltk.sem.logic.NegatedExpression.negate", false]], "negated() (nltk.sentiment.vader.vaderconstants method)": [[198, "nltk.sentiment.vader.VaderConstants.negated", false]], "negatedexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.NegatedExpression", false]], "negative() (nltk.corpus.reader.opinion_lexicon.opinionlexiconcorpusreader method)": [[83, "nltk.corpus.reader.opinion_lexicon.OpinionLexiconCorpusReader.negative", false]], "negative() (nltk.corpus.reader.opinionlexiconcorpusreader method)": [[57, "nltk.corpus.reader.OpinionLexiconCorpusReader.negative", false]], "neighboring() (nltk.translate.ibm_model.ibmmodel method)": [[268, "nltk.translate.ibm_model.IBMModel.neighboring", false]], "neq (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.NEQ", false]], "neq_list (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.NEQ_LIST", false]], "new_id() (nltk.ccg.api.ccgvar class method)": [[13, "nltk.ccg.api.CCGVar.new_id", false]], "new_wrapper() (in module nltk.decorators)": [[112, "nltk.decorators.new_wrapper", false]], "next() (nltk.data.seekableunicodestreamreader method)": [[111, "nltk.data.SeekableUnicodeStreamReader.next", false]], "next() (nltk.sem.drt_glue_demo.drtgluedemo method)": [[185, "nltk.sem.drt_glue_demo.DrtGlueDemo.next", false]], "next_with_bindings() (nltk.parse.featurechart.featuretreeedge method)": [[167, "nltk.parse.featurechart.FeatureTreeEdge.next_with_bindings", false]], "nextcategory() (in module nltk.ccg.lexicon)": [[16, "nltk.ccg.lexicon.nextCategory", false]], "nextsym() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.nextsym", false]], "nextsym() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.nextsym", false]], "nextsym() (nltk.parse.chart.edgei method)": [[162, "nltk.parse.chart.EdgeI.nextsym", false]], "nextsym() (nltk.parse.chart.leafedge method)": [[162, "nltk.parse.chart.LeafEdge.nextsym", false]], "nextsym() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.nextsym", false]], "ngram (in module nltk.metrics.association)": [[146, "nltk.metrics.association.NGRAM", false]], "ngramassocmeasures (class in nltk.metrics.association)": [[146, "nltk.metrics.association.NgramAssocMeasures", false]], "ngramcounter (class in nltk.lm)": [[135, "nltk.lm.NgramCounter", false]], "ngramcounter (class in nltk.lm.counter)": [[137, "nltk.lm.counter.NgramCounter", false]], "ngrams() (in module nltk.util)": [[291, "nltk.util.ngrams", false]], "ngramtagger (class in nltk.tag.sequential)": [[223, "nltk.tag.sequential.NgramTagger", false]], "nik() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.Nik", false]], "nist_length_penalty() (in module nltk.translate.nist_score)": [[271, "nltk.translate.nist_score.nist_length_penalty", false]], "nisttokenizer (class in nltk.tokenize.nist)": [[242, "nltk.tokenize.nist.NISTTokenizer", false]], "nk() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.Nk", false]], "nkjpcorpus_header_view (class in nltk.corpus.reader.nkjp)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Header_View", false]], "nkjpcorpus_morph_view (class in nltk.corpus.reader.nkjp)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Morph_View", false]], "nkjpcorpus_segmentation_view (class in nltk.corpus.reader.nkjp)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Segmentation_View", false]], "nkjpcorpus_text_view (class in nltk.corpus.reader.nkjp)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Text_View", false]], "nkjpcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.NKJPCorpusReader", false]], "nkjpcorpusreader (class in nltk.corpus.reader.nkjp)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader", false]], "nltk": [[0, "module-nltk", false]], "nltk.app": [[1, "module-nltk.app", false]], "nltk.app.chartparser_app": [[2, "module-nltk.app.chartparser_app", false]], "nltk.app.chunkparser_app": [[3, "module-nltk.app.chunkparser_app", false]], "nltk.app.collocations_app": [[4, "module-nltk.app.collocations_app", false]], "nltk.app.concordance_app": [[5, "module-nltk.app.concordance_app", false]], "nltk.app.nemo_app": [[6, "module-nltk.app.nemo_app", false]], "nltk.app.rdparser_app": [[7, "module-nltk.app.rdparser_app", false]], "nltk.app.srparser_app": [[8, "module-nltk.app.srparser_app", false]], "nltk.app.wordfreq_app": [[9, "module-nltk.app.wordfreq_app", false]], "nltk.app.wordnet_app": [[10, "module-nltk.app.wordnet_app", false]], "nltk.book": [[11, "module-nltk.book", false]], "nltk.ccg": [[12, "module-nltk.ccg", false]], "nltk.ccg.api": [[13, "module-nltk.ccg.api", false]], "nltk.ccg.chart": [[14, "module-nltk.ccg.chart", false]], "nltk.ccg.combinator": [[15, "module-nltk.ccg.combinator", false]], "nltk.ccg.lexicon": [[16, "module-nltk.ccg.lexicon", false]], "nltk.ccg.logic": [[17, "module-nltk.ccg.logic", false]], "nltk.chat": [[18, "module-nltk.chat", false]], "nltk.chat.eliza": [[19, "module-nltk.chat.eliza", false]], "nltk.chat.iesha": [[20, "module-nltk.chat.iesha", false]], "nltk.chat.rude": [[21, "module-nltk.chat.rude", false]], "nltk.chat.suntsu": [[22, "module-nltk.chat.suntsu", false]], "nltk.chat.util": [[23, "module-nltk.chat.util", false]], "nltk.chat.zen": [[24, "module-nltk.chat.zen", false]], "nltk.chunk": [[25, "module-nltk.chunk", false]], "nltk.chunk.api": [[26, "module-nltk.chunk.api", false]], "nltk.chunk.named_entity": [[27, "module-nltk.chunk.named_entity", false]], "nltk.chunk.regexp": [[28, "module-nltk.chunk.regexp", false]], "nltk.chunk.util": [[29, "module-nltk.chunk.util", false]], "nltk.classify": [[30, "module-nltk.classify", false]], "nltk.classify.api": [[31, "module-nltk.classify.api", false]], "nltk.classify.decisiontree": [[32, "module-nltk.classify.decisiontree", false]], "nltk.classify.maxent": [[33, "module-nltk.classify.maxent", false]], "nltk.classify.megam": [[34, "module-nltk.classify.megam", false]], "nltk.classify.naivebayes": [[35, "module-nltk.classify.naivebayes", false]], "nltk.classify.positivenaivebayes": [[36, "module-nltk.classify.positivenaivebayes", false]], "nltk.classify.rte_classify": [[37, "module-nltk.classify.rte_classify", false]], "nltk.classify.scikitlearn": [[38, "module-nltk.classify.scikitlearn", false]], "nltk.classify.senna": [[39, "module-nltk.classify.senna", false]], "nltk.classify.svm": [[40, "module-nltk.classify.svm", false]], "nltk.classify.tadm": [[41, "module-nltk.classify.tadm", false]], "nltk.classify.textcat": [[42, "module-nltk.classify.textcat", false]], "nltk.classify.util": [[43, "module-nltk.classify.util", false]], "nltk.classify.weka": [[44, "module-nltk.classify.weka", false]], "nltk.cli": [[45, "module-nltk.cli", false]], "nltk.cluster": [[46, "module-nltk.cluster", false]], "nltk.cluster.api": [[47, "module-nltk.cluster.api", false]], "nltk.cluster.em": [[48, "module-nltk.cluster.em", false]], "nltk.cluster.gaac": [[49, "module-nltk.cluster.gaac", false]], "nltk.cluster.kmeans": [[50, "module-nltk.cluster.kmeans", false]], "nltk.cluster.util": [[51, "module-nltk.cluster.util", false]], "nltk.collections": [[52, "module-nltk.collections", false]], "nltk.collocations": [[53, "module-nltk.collocations", false]], "nltk.compat": [[54, "module-nltk.compat", false]], "nltk.corpus": [[55, "module-nltk.corpus", false]], "nltk.corpus.europarl_raw": [[56, "module-nltk.corpus.europarl_raw", false]], "nltk.corpus.reader": [[57, "module-nltk.corpus.reader", false]], "nltk.corpus.reader.aligned": [[58, "module-nltk.corpus.reader.aligned", false]], "nltk.corpus.reader.api": [[59, "module-nltk.corpus.reader.api", false]], "nltk.corpus.reader.bcp47": [[60, "module-nltk.corpus.reader.bcp47", false]], "nltk.corpus.reader.bnc": [[61, "module-nltk.corpus.reader.bnc", false]], "nltk.corpus.reader.bracket_parse": [[62, "module-nltk.corpus.reader.bracket_parse", false]], "nltk.corpus.reader.categorized_sents": [[63, "module-nltk.corpus.reader.categorized_sents", false]], "nltk.corpus.reader.chasen": [[64, "module-nltk.corpus.reader.chasen", false]], "nltk.corpus.reader.childes": [[65, "module-nltk.corpus.reader.childes", false]], "nltk.corpus.reader.chunked": [[66, "module-nltk.corpus.reader.chunked", false]], "nltk.corpus.reader.cmudict": [[67, "module-nltk.corpus.reader.cmudict", false]], "nltk.corpus.reader.comparative_sents": [[68, "module-nltk.corpus.reader.comparative_sents", false]], "nltk.corpus.reader.conll": [[69, "module-nltk.corpus.reader.conll", false]], "nltk.corpus.reader.crubadan": [[70, "module-nltk.corpus.reader.crubadan", false]], "nltk.corpus.reader.dependency": [[71, "module-nltk.corpus.reader.dependency", false]], "nltk.corpus.reader.framenet": [[72, "module-nltk.corpus.reader.framenet", false]], "nltk.corpus.reader.ieer": [[73, "module-nltk.corpus.reader.ieer", false]], "nltk.corpus.reader.indian": [[74, "module-nltk.corpus.reader.indian", false]], "nltk.corpus.reader.ipipan": [[75, "module-nltk.corpus.reader.ipipan", false]], "nltk.corpus.reader.knbc": [[76, "module-nltk.corpus.reader.knbc", false]], "nltk.corpus.reader.lin": [[77, "module-nltk.corpus.reader.lin", false]], "nltk.corpus.reader.markdown": [[78, "module-nltk.corpus.reader.markdown", false]], "nltk.corpus.reader.mte": [[79, "module-nltk.corpus.reader.mte", false]], "nltk.corpus.reader.nkjp": [[80, "module-nltk.corpus.reader.nkjp", false]], "nltk.corpus.reader.nombank": [[81, "module-nltk.corpus.reader.nombank", false]], "nltk.corpus.reader.nps_chat": [[82, "module-nltk.corpus.reader.nps_chat", false]], "nltk.corpus.reader.opinion_lexicon": [[83, "module-nltk.corpus.reader.opinion_lexicon", false]], "nltk.corpus.reader.panlex_lite": [[84, "module-nltk.corpus.reader.panlex_lite", false]], "nltk.corpus.reader.panlex_swadesh": [[85, "module-nltk.corpus.reader.panlex_swadesh", false]], "nltk.corpus.reader.pl196x": [[86, "module-nltk.corpus.reader.pl196x", false]], "nltk.corpus.reader.plaintext": [[87, "module-nltk.corpus.reader.plaintext", false]], "nltk.corpus.reader.ppattach": [[88, "module-nltk.corpus.reader.ppattach", false]], "nltk.corpus.reader.propbank": [[89, "module-nltk.corpus.reader.propbank", false]], "nltk.corpus.reader.pros_cons": [[90, "module-nltk.corpus.reader.pros_cons", false]], "nltk.corpus.reader.reviews": [[91, "module-nltk.corpus.reader.reviews", false]], "nltk.corpus.reader.rte": [[92, "module-nltk.corpus.reader.rte", false]], "nltk.corpus.reader.semcor": [[93, "module-nltk.corpus.reader.semcor", false]], "nltk.corpus.reader.senseval": [[94, "module-nltk.corpus.reader.senseval", false]], "nltk.corpus.reader.sentiwordnet": [[95, "module-nltk.corpus.reader.sentiwordnet", false]], "nltk.corpus.reader.sinica_treebank": [[96, "module-nltk.corpus.reader.sinica_treebank", false]], "nltk.corpus.reader.string_category": [[97, "module-nltk.corpus.reader.string_category", false]], "nltk.corpus.reader.switchboard": [[98, "module-nltk.corpus.reader.switchboard", false]], "nltk.corpus.reader.tagged": [[99, "module-nltk.corpus.reader.tagged", false]], "nltk.corpus.reader.timit": [[100, "module-nltk.corpus.reader.timit", false]], "nltk.corpus.reader.toolbox": [[101, "module-nltk.corpus.reader.toolbox", false]], "nltk.corpus.reader.twitter": [[102, "module-nltk.corpus.reader.twitter", false]], "nltk.corpus.reader.udhr": [[103, "module-nltk.corpus.reader.udhr", false]], "nltk.corpus.reader.util": [[104, "module-nltk.corpus.reader.util", false]], "nltk.corpus.reader.verbnet": [[105, "module-nltk.corpus.reader.verbnet", false]], "nltk.corpus.reader.wordlist": [[106, "module-nltk.corpus.reader.wordlist", false]], "nltk.corpus.reader.wordnet": [[107, "module-nltk.corpus.reader.wordnet", false]], "nltk.corpus.reader.xmldocs": [[108, "module-nltk.corpus.reader.xmldocs", false]], "nltk.corpus.reader.ycoe": [[109, "module-nltk.corpus.reader.ycoe", false]], "nltk.corpus.util": [[110, "module-nltk.corpus.util", false]], "nltk.data": [[111, "module-nltk.data", false]], "nltk.decorators": [[112, "module-nltk.decorators", false]], "nltk.downloader": [[113, "module-nltk.downloader", false]], "nltk.draw": [[114, "module-nltk.draw", false]], "nltk.draw.cfg": [[115, "module-nltk.draw.cfg", false]], "nltk.draw.dispersion": [[116, "module-nltk.draw.dispersion", false]], "nltk.draw.table": [[117, "module-nltk.draw.table", false]], "nltk.draw.tree": [[118, "module-nltk.draw.tree", false]], "nltk.draw.util": [[119, "module-nltk.draw.util", false]], "nltk.featstruct": [[120, "module-nltk.featstruct", false]], "nltk.grammar": [[121, "module-nltk.grammar", false]], "nltk.help": [[122, "module-nltk.help", false]], "nltk.inference": [[123, "module-nltk.inference", false]], "nltk.inference.api": [[124, "module-nltk.inference.api", false]], "nltk.inference.discourse": [[125, "module-nltk.inference.discourse", false]], "nltk.inference.mace": [[126, "module-nltk.inference.mace", false]], "nltk.inference.nonmonotonic": [[127, "module-nltk.inference.nonmonotonic", false]], "nltk.inference.prover9": [[128, "module-nltk.inference.prover9", false]], "nltk.inference.resolution": [[129, "module-nltk.inference.resolution", false]], "nltk.inference.tableau": [[130, "module-nltk.inference.tableau", false]], "nltk.internals": [[131, "module-nltk.internals", false]], "nltk.jsontags": [[132, "module-nltk.jsontags", false]], "nltk.langnames": [[133, "module-nltk.langnames", false]], "nltk.lazyimport": [[134, "module-nltk.lazyimport", false]], "nltk.lm": [[135, "module-nltk.lm", false]], "nltk.lm.api": [[136, "module-nltk.lm.api", false]], "nltk.lm.counter": [[137, "module-nltk.lm.counter", false]], "nltk.lm.models": [[138, "module-nltk.lm.models", false]], "nltk.lm.preprocessing": [[139, "module-nltk.lm.preprocessing", false]], "nltk.lm.smoothing": [[140, "module-nltk.lm.smoothing", false]], "nltk.lm.util": [[141, "module-nltk.lm.util", false]], "nltk.lm.vocabulary": [[142, "module-nltk.lm.vocabulary", false]], "nltk.metrics": [[143, "module-nltk.metrics", false]], "nltk.metrics.agreement": [[144, "module-nltk.metrics.agreement", false]], "nltk.metrics.aline": [[145, "module-nltk.metrics.aline", false]], "nltk.metrics.association": [[146, "module-nltk.metrics.association", false]], "nltk.metrics.confusionmatrix": [[147, "module-nltk.metrics.confusionmatrix", false]], "nltk.metrics.distance": [[148, "module-nltk.metrics.distance", false]], "nltk.metrics.paice": [[149, "module-nltk.metrics.paice", false]], "nltk.metrics.scores": [[150, "module-nltk.metrics.scores", false]], "nltk.metrics.segmentation": [[151, "module-nltk.metrics.segmentation", false]], "nltk.metrics.spearman": [[152, "module-nltk.metrics.spearman", false]], "nltk.misc": [[153, "module-nltk.misc", false]], "nltk.misc.babelfish": [[154, "module-nltk.misc.babelfish", false]], "nltk.misc.chomsky": [[155, "module-nltk.misc.chomsky", false]], "nltk.misc.minimalset": [[156, "module-nltk.misc.minimalset", false]], "nltk.misc.sort": [[157, "module-nltk.misc.sort", false]], "nltk.misc.wordfinder": [[158, "module-nltk.misc.wordfinder", false]], "nltk.parse": [[159, "module-nltk.parse", false]], "nltk.parse.api": [[160, "module-nltk.parse.api", false]], "nltk.parse.bllip": [[161, "module-nltk.parse.bllip", false]], "nltk.parse.chart": [[162, "module-nltk.parse.chart", false]], "nltk.parse.corenlp": [[163, "module-nltk.parse.corenlp", false]], "nltk.parse.dependencygraph": [[164, "module-nltk.parse.dependencygraph", false]], "nltk.parse.earleychart": [[165, "module-nltk.parse.earleychart", false]], "nltk.parse.evaluate": [[166, "module-nltk.parse.evaluate", false]], "nltk.parse.featurechart": [[167, "module-nltk.parse.featurechart", false]], "nltk.parse.generate": [[168, "module-nltk.parse.generate", false]], "nltk.parse.malt": [[169, "module-nltk.parse.malt", false]], "nltk.parse.nonprojectivedependencyparser": [[170, "module-nltk.parse.nonprojectivedependencyparser", false]], "nltk.parse.pchart": [[171, "module-nltk.parse.pchart", false]], "nltk.parse.projectivedependencyparser": [[172, "module-nltk.parse.projectivedependencyparser", false]], "nltk.parse.recursivedescent": [[173, "module-nltk.parse.recursivedescent", false]], "nltk.parse.shiftreduce": [[174, "module-nltk.parse.shiftreduce", false]], "nltk.parse.stanford": [[175, "module-nltk.parse.stanford", false]], "nltk.parse.transitionparser": [[176, "module-nltk.parse.transitionparser", false]], "nltk.parse.util": [[177, "module-nltk.parse.util", false]], "nltk.parse.viterbi": [[178, "module-nltk.parse.viterbi", false]], "nltk.probability": [[179, "module-nltk.probability", false]], "nltk.sem": [[180, "module-nltk.sem", false]], "nltk.sem.boxer": [[181, "module-nltk.sem.boxer", false]], "nltk.sem.chat80": [[182, "module-nltk.sem.chat80", false]], "nltk.sem.cooper_storage": [[183, "module-nltk.sem.cooper_storage", false]], "nltk.sem.drt": [[184, "module-nltk.sem.drt", false]], "nltk.sem.drt_glue_demo": [[185, "module-nltk.sem.drt_glue_demo", false]], "nltk.sem.evaluate": [[186, "module-nltk.sem.evaluate", false]], "nltk.sem.glue": [[187, "module-nltk.sem.glue", false]], "nltk.sem.hole": [[188, "module-nltk.sem.hole", false]], "nltk.sem.lfg": [[189, "module-nltk.sem.lfg", false]], "nltk.sem.linearlogic": [[190, "module-nltk.sem.linearlogic", false]], "nltk.sem.logic": [[191, "module-nltk.sem.logic", false]], "nltk.sem.relextract": [[192, "module-nltk.sem.relextract", false]], "nltk.sem.skolemize": [[193, "module-nltk.sem.skolemize", false]], "nltk.sem.util": [[194, "module-nltk.sem.util", false]], "nltk.sentiment": [[195, "module-nltk.sentiment", false]], "nltk.sentiment.sentiment_analyzer": [[196, "module-nltk.sentiment.sentiment_analyzer", false]], "nltk.sentiment.util": [[197, "module-nltk.sentiment.util", false]], "nltk.sentiment.vader": [[198, "module-nltk.sentiment.vader", false]], "nltk.stem": [[199, "module-nltk.stem", false]], "nltk.stem.api": [[200, "module-nltk.stem.api", false]], "nltk.stem.arlstem": [[201, "module-nltk.stem.arlstem", false]], "nltk.stem.arlstem2": [[202, "module-nltk.stem.arlstem2", false]], "nltk.stem.cistem": [[203, "module-nltk.stem.cistem", false]], "nltk.stem.isri": [[204, "module-nltk.stem.isri", false]], "nltk.stem.lancaster": [[205, "module-nltk.stem.lancaster", false]], "nltk.stem.porter": [[206, "module-nltk.stem.porter", false]], "nltk.stem.regexp": [[207, "module-nltk.stem.regexp", false]], "nltk.stem.rslp": [[208, "module-nltk.stem.rslp", false]], "nltk.stem.snowball": [[209, "module-nltk.stem.snowball", false]], "nltk.stem.util": [[210, "module-nltk.stem.util", false]], "nltk.stem.wordnet": [[211, "module-nltk.stem.wordnet", false]], "nltk.tabdata": [[212, "module-nltk.tabdata", false]], "nltk.tag": [[213, "module-nltk.tag", false]], "nltk.tag.api": [[214, "module-nltk.tag.api", false]], "nltk.tag.brill": [[215, "module-nltk.tag.brill", false]], "nltk.tag.brill_trainer": [[216, "module-nltk.tag.brill_trainer", false]], "nltk.tag.crf": [[217, "module-nltk.tag.crf", false]], "nltk.tag.hmm": [[218, "module-nltk.tag.hmm", false]], "nltk.tag.hunpos": [[219, "module-nltk.tag.hunpos", false]], "nltk.tag.mapping": [[220, "module-nltk.tag.mapping", false]], "nltk.tag.perceptron": [[221, "module-nltk.tag.perceptron", false]], "nltk.tag.senna": [[222, "module-nltk.tag.senna", false]], "nltk.tag.sequential": [[223, "module-nltk.tag.sequential", false]], "nltk.tag.stanford": [[224, "module-nltk.tag.stanford", false]], "nltk.tag.tnt": [[225, "module-nltk.tag.tnt", false]], "nltk.tag.util": [[226, "module-nltk.tag.util", false]], "nltk.tbl": [[227, "module-nltk.tbl", false]], "nltk.tbl.api": [[228, "module-nltk.tbl.api", false]], "nltk.tbl.demo": [[229, "module-nltk.tbl.demo", false]], "nltk.tbl.erroranalysis": [[230, "module-nltk.tbl.erroranalysis", false]], "nltk.tbl.feature": [[231, "module-nltk.tbl.feature", false]], "nltk.tbl.rule": [[232, "module-nltk.tbl.rule", false]], "nltk.tbl.template": [[233, "module-nltk.tbl.template", false]], "nltk.text": [[234, "module-nltk.text", false]], "nltk.tgrep": [[235, "module-nltk.tgrep", false]], "nltk.tokenize": [[236, "module-nltk.tokenize", false]], "nltk.tokenize.api": [[237, "module-nltk.tokenize.api", false]], "nltk.tokenize.casual": [[238, "module-nltk.tokenize.casual", false]], "nltk.tokenize.destructive": [[239, "module-nltk.tokenize.destructive", false]], "nltk.tokenize.legality_principle": [[240, "module-nltk.tokenize.legality_principle", false]], "nltk.tokenize.mwe": [[241, "module-nltk.tokenize.mwe", false]], "nltk.tokenize.nist": [[242, "module-nltk.tokenize.nist", false]], "nltk.tokenize.punkt": [[243, "module-nltk.tokenize.punkt", false]], "nltk.tokenize.regexp": [[244, "module-nltk.tokenize.regexp", false]], "nltk.tokenize.repp": [[245, "module-nltk.tokenize.repp", false]], "nltk.tokenize.sexpr": [[246, "module-nltk.tokenize.sexpr", false]], "nltk.tokenize.simple": [[247, "module-nltk.tokenize.simple", false]], "nltk.tokenize.sonority_sequencing": [[248, "module-nltk.tokenize.sonority_sequencing", false]], "nltk.tokenize.stanford": [[249, "module-nltk.tokenize.stanford", false]], "nltk.tokenize.stanford_segmenter": [[250, "module-nltk.tokenize.stanford_segmenter", false]], "nltk.tokenize.texttiling": [[251, "module-nltk.tokenize.texttiling", false]], "nltk.tokenize.toktok": [[252, "module-nltk.tokenize.toktok", false]], "nltk.tokenize.treebank": [[253, "module-nltk.tokenize.treebank", false]], "nltk.tokenize.util": [[254, "module-nltk.tokenize.util", false]], "nltk.toolbox": [[255, "module-nltk.toolbox", false]], "nltk.translate": [[256, "module-nltk.translate", false]], "nltk.translate.api": [[257, "module-nltk.translate.api", false]], "nltk.translate.bleu_score": [[258, "module-nltk.translate.bleu_score", false]], "nltk.translate.chrf_score": [[259, "module-nltk.translate.chrf_score", false]], "nltk.translate.gale_church": [[260, "module-nltk.translate.gale_church", false]], "nltk.translate.gdfa": [[261, "module-nltk.translate.gdfa", false]], "nltk.translate.gleu_score": [[262, "module-nltk.translate.gleu_score", false]], "nltk.translate.ibm1": [[263, "module-nltk.translate.ibm1", false]], "nltk.translate.ibm2": [[264, "module-nltk.translate.ibm2", false]], "nltk.translate.ibm3": [[265, "module-nltk.translate.ibm3", false]], "nltk.translate.ibm4": [[266, "module-nltk.translate.ibm4", false]], "nltk.translate.ibm5": [[267, "module-nltk.translate.ibm5", false]], "nltk.translate.ibm_model": [[268, "module-nltk.translate.ibm_model", false]], "nltk.translate.meteor_score": [[269, "module-nltk.translate.meteor_score", false]], "nltk.translate.metrics": [[270, "module-nltk.translate.metrics", false]], "nltk.translate.nist_score": [[271, "module-nltk.translate.nist_score", false]], "nltk.translate.phrase_based": [[272, "module-nltk.translate.phrase_based", false]], "nltk.translate.ribes_score": [[273, "module-nltk.translate.ribes_score", false]], "nltk.translate.stack_decoder": [[274, "module-nltk.translate.stack_decoder", false]], "nltk.tree": [[275, "module-nltk.tree", false]], "nltk.tree.immutable": [[276, "module-nltk.tree.immutable", false]], "nltk.tree.parented": [[277, "module-nltk.tree.parented", false]], "nltk.tree.parsing": [[278, "module-nltk.tree.parsing", false]], "nltk.tree.prettyprinter": [[279, "module-nltk.tree.prettyprinter", false]], "nltk.tree.probabilistic": [[280, "module-nltk.tree.probabilistic", false]], "nltk.tree.transforms": [[281, "module-nltk.tree.transforms", false]], "nltk.tree.tree": [[282, "module-nltk.tree.tree", false]], "nltk.treeprettyprinter": [[283, "module-nltk.treeprettyprinter", false]], "nltk.treetransforms": [[284, "module-nltk.treetransforms", false]], "nltk.twitter": [[285, "module-nltk.twitter", false]], "nltk.twitter.api": [[286, "module-nltk.twitter.api", false]], "nltk.twitter.common": [[287, "module-nltk.twitter.common", false]], "nltk.twitter.twitter_demo": [[288, "module-nltk.twitter.twitter_demo", false]], "nltk.twitter.twitterclient": [[289, "module-nltk.twitter.twitterclient", false]], "nltk.twitter.util": [[290, "module-nltk.twitter.util", false]], "nltk.util": [[291, "module-nltk.util", false]], "nltk.wsd": [[292, "module-nltk.wsd", false]], "nltk_extensions (nltk.stem.porter.porterstemmer attribute)": [[206, "nltk.stem.porter.PorterStemmer.NLTK_EXTENSIONS", false]], "nltkdemo18() (in module nltk.tag.brill)": [[215, "nltk.tag.brill.nltkdemo18", false]], "nltkdemo18plus() (in module nltk.tag.brill)": [[215, "nltk.tag.brill.nltkdemo18plus", false]], "nltkdrtboxerdrsinterpreter (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.NltkDrtBoxerDrsInterpreter", false]], "nltkwordtokenizer (class in nltk.tokenize.destructive)": [[239, "nltk.tokenize.destructive.NLTKWordTokenizer", false]], "node (nltk.tree.tree property)": [[275, "nltk.tree.Tree.node", false]], "node (nltk.tree.tree.tree property)": [[282, "nltk.tree.tree.Tree.node", false]], "nodecoords() (nltk.tree.prettyprinter.treeprettyprinter static method)": [[279, "nltk.tree.prettyprinter.TreePrettyPrinter.nodecoords", false]], "nodecoords() (nltk.tree.treeprettyprinter static method)": [[275, "nltk.tree.TreePrettyPrinter.nodecoords", false]], "nombankchaintreepointer (class in nltk.corpus.reader.nombank)": [[81, "nltk.corpus.reader.nombank.NombankChainTreePointer", false]], "nombankcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.NombankCorpusReader", false]], "nombankcorpusreader (class in nltk.corpus.reader.nombank)": [[81, "nltk.corpus.reader.nombank.NombankCorpusReader", false]], "nombankinstance (class in nltk.corpus.reader.nombank)": [[81, "nltk.corpus.reader.nombank.NombankInstance", false]], "nombankpointer (class in nltk.corpus.reader.nombank)": [[81, "nltk.corpus.reader.nombank.NombankPointer", false]], "nombanksplittreepointer (class in nltk.corpus.reader.nombank)": [[81, "nltk.corpus.reader.nombank.NombankSplitTreePointer", false]], "nombanktreepointer (class in nltk.corpus.reader.nombank)": [[81, "nltk.corpus.reader.nombank.NombankTreePointer", false]], "non_breaking (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.NON_BREAKING", false]], "nonascii (nltk.tokenize.nist.nisttokenizer attribute)": [[242, "nltk.tokenize.nist.NISTTokenizer.NONASCII", false]], "nonbreakingprefixescorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.NonbreakingPrefixesCorpusReader", false]], "nonbreakingprefixescorpusreader (class in nltk.corpus.reader.wordlist)": [[106, "nltk.corpus.reader.wordlist.NonbreakingPrefixesCorpusReader", false]], "none (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.NONE", false]], "nonprojective_conll_parse_demo() (in module nltk.parse.nonprojectivedependencyparser)": [[170, "nltk.parse.nonprojectivedependencyparser.nonprojective_conll_parse_demo", false]], "nonprojectivedependencyparser (class in nltk.parse.nonprojectivedependencyparser)": [[170, "nltk.parse.nonprojectivedependencyparser.NonprojectiveDependencyParser", false]], "nonterminal (class in nltk.grammar)": [[121, "nltk.grammar.Nonterminal", false]], "nonterminals() (in module nltk.grammar)": [[121, "nltk.grammar.nonterminals", false]], "norm() (in module nltk.corpus.reader.rte)": [[92, "nltk.corpus.reader.rte.norm", false]], "norm() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.norm", false]], "norm() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.norm", false]], "norm() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.norm", false]], "norm_cdf() (in module nltk.translate.gale_church)": [[260, "nltk.translate.gale_church.norm_cdf", false]], "norm_logsf() (in module nltk.translate.gale_church)": [[260, "nltk.translate.gale_church.norm_logsf", false]], "normalize() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.normalize", false]], "normalize() (nltk.sentiment.vader.vaderconstants method)": [[198, "nltk.sentiment.vader.VaderConstants.normalize", false]], "normalize() (nltk.tag.perceptron.perceptrontagger method)": [[221, "nltk.tag.perceptron.PerceptronTagger.normalize", false]], "norwegianstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.NorwegianStemmer", false]], "not (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.NOT", false]], "not (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.NOT", false]], "not_installed (nltk.downloader.downloader attribute)": [[113, "nltk.downloader.Downloader.NOT_INSTALLED", false]], "not_list (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.NOT_LIST", false]], "noun (nltk.corpus.reader.wordnet.wordnetcorpusreader attribute)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.NOUN", false]], "noun (nltk.corpus.reader.wordnetcorpusreader attribute)": [[57, "nltk.corpus.reader.WordNetCorpusReader.NOUN", false]], "nouns() (nltk.corpus.reader.nombank.nombankcorpusreader method)": [[81, "nltk.corpus.reader.nombank.NombankCorpusReader.nouns", false]], "nouns() (nltk.corpus.reader.nombankcorpusreader method)": [[57, "nltk.corpus.reader.NombankCorpusReader.nouns", false]], "npschatcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.NPSChatCorpusReader", false]], "npschatcorpusreader (class in nltk.corpus.reader.nps_chat)": [[82, "nltk.corpus.reader.nps_chat.NPSChatCorpusReader", false]], "nr() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.Nr", false]], "ns (nltk.corpus.reader.mte.mtefilereader attribute)": [[79, "nltk.corpus.reader.mte.MTEFileReader.ns", false]], "nullableinttoken() (nltk.sem.boxer.boxerdrsparser method)": [[181, "nltk.sem.boxer.BoxerDrsParser.nullableIntToken", false]], "num_clusters() (nltk.cluster.api.clusteri method)": [[47, "nltk.cluster.api.ClusterI.num_clusters", false]], "num_clusters() (nltk.cluster.em.emclusterer method)": [[48, "nltk.cluster.em.EMClusterer.num_clusters", false]], "num_clusters() (nltk.cluster.gaac.gaaclusterer method)": [[49, "nltk.cluster.gaac.GAAClusterer.num_clusters", false]], "num_clusters() (nltk.cluster.kmeans.kmeansclusterer method)": [[50, "nltk.cluster.kmeans.KMeansClusterer.num_clusters", false]], "num_edges (nltk.parse.chart.bottomuppredictcombinerule attribute)": [[162, "nltk.parse.chart.BottomUpPredictCombineRule.NUM_EDGES", false]], "num_edges (nltk.parse.chart.bottomuppredictrule attribute)": [[162, "nltk.parse.chart.BottomUpPredictRule.NUM_EDGES", false]], "num_edges (nltk.parse.chart.emptypredictrule attribute)": [[162, "nltk.parse.chart.EmptyPredictRule.NUM_EDGES", false]], "num_edges (nltk.parse.chart.fundamentalrule attribute)": [[162, "nltk.parse.chart.FundamentalRule.NUM_EDGES", false]], "num_edges (nltk.parse.chart.leafinitrule attribute)": [[162, "nltk.parse.chart.LeafInitRule.NUM_EDGES", false]], "num_edges (nltk.parse.chart.singleedgefundamentalrule attribute)": [[162, "nltk.parse.chart.SingleEdgeFundamentalRule.NUM_EDGES", false]], "num_edges (nltk.parse.chart.topdowninitrule attribute)": [[162, "nltk.parse.chart.TopDownInitRule.NUM_EDGES", false]], "num_edges (nltk.parse.chart.topdownpredictrule attribute)": [[162, "nltk.parse.chart.TopDownPredictRule.NUM_EDGES", false]], "num_edges (nltk.parse.pchart.probabilisticbottomupinitrule attribute)": [[171, "nltk.parse.pchart.ProbabilisticBottomUpInitRule.NUM_EDGES", false]], "num_edges (nltk.parse.pchart.probabilisticbottomuppredictrule attribute)": [[171, "nltk.parse.pchart.ProbabilisticBottomUpPredictRule.NUM_EDGES", false]], "num_edges (nltk.parse.pchart.probabilisticfundamentalrule attribute)": [[171, "nltk.parse.pchart.ProbabilisticFundamentalRule.NUM_EDGES", false]], "num_edges (nltk.parse.pchart.singleedgeprobabilisticfundamentalrule attribute)": [[171, "nltk.parse.pchart.SingleEdgeProbabilisticFundamentalRule.NUM_EDGES", false]], "num_edges() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.num_edges", false]], "num_leaves() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.num_leaves", false]], "number_regex (nltk.tokenize.nist.nisttokenizer attribute)": [[242, "nltk.tokenize.nist.NISTTokenizer.number_regex", false]], "numedges (nltk.ccg.chart.backwardtyperaiserule attribute)": [[14, "nltk.ccg.chart.BackwardTypeRaiseRule.NUMEDGES", false]], "numedges (nltk.ccg.chart.binarycombinatorrule attribute)": [[14, "nltk.ccg.chart.BinaryCombinatorRule.NUMEDGES", false]], "numedges (nltk.ccg.chart.forwardtyperaiserule attribute)": [[14, "nltk.ccg.chart.ForwardTypeRaiseRule.NUMEDGES", false]], "numerator (nltk.translate.bleu_score.fraction property)": [[258, "nltk.translate.bleu_score.Fraction.numerator", false]], "nx_graph() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.nx_graph", false]], "obj_score() (nltk.corpus.reader.sentisynset method)": [[57, "nltk.corpus.reader.SentiSynset.obj_score", false]], "obj_score() (nltk.corpus.reader.sentiwordnet.sentisynset method)": [[95, "nltk.corpus.reader.sentiwordnet.SentiSynset.obj_score", false]], "occupy() (nltk.translate.ibm5.slots method)": [[267, "nltk.translate.ibm5.Slots.occupy", false]], "of2ss() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.of2ss", false]], "of2ss() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.of2ss", false]], "offset() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.offset", false]], "offsets() (nltk.text.concordanceindex method)": [[234, "nltk.text.ConcordanceIndex.offsets", false]], "on_error() (nltk.twitter.twitterclient.streamer method)": [[289, "nltk.twitter.twitterclient.Streamer.on_error", false]], "on_finish() (nltk.twitter.api.tweethandleri method)": [[286, "nltk.twitter.api.TweetHandlerI.on_finish", false]], "on_finish() (nltk.twitter.twitterclient.tweetviewer method)": [[289, "nltk.twitter.twitterclient.TweetViewer.on_finish", false]], "on_finish() (nltk.twitter.twitterclient.tweetwriter method)": [[289, "nltk.twitter.twitterclient.TweetWriter.on_finish", false]], "on_success() (nltk.twitter.twitterclient.streamer method)": [[289, "nltk.twitter.twitterclient.Streamer.on_success", false]], "one_space (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.ONE_SPACE", false]], "onset() (nltk.tokenize.legality_principle.legalitysyllabletokenizer method)": [[240, "nltk.tokenize.legality_principle.LegalitySyllableTokenizer.onset", false]], "open (nltk.sem.linearlogic.tokens attribute)": [[190, "nltk.sem.linearlogic.Tokens.OPEN", false]], "open (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.OPEN", false]], "open() (nltk.corpus.reader.api.corpusreader method)": [[59, "nltk.corpus.reader.api.CorpusReader.open", false]], "open() (nltk.corpus.reader.corpusreader method)": [[57, "nltk.corpus.reader.CorpusReader.open", false]], "open() (nltk.data.filesystempathpointer method)": [[111, "nltk.data.FileSystemPathPointer.open", false]], "open() (nltk.data.gzipfilesystempathpointer method)": [[111, "nltk.data.GzipFileSystemPathPointer.open", false]], "open() (nltk.data.pathpointer method)": [[111, "nltk.data.PathPointer.open", false]], "open() (nltk.toolbox.standardformat method)": [[255, "nltk.toolbox.StandardFormat.open", false]], "open_bracket (nltk.sem.drt.drttokens attribute)": [[184, "nltk.sem.drt.DrtTokens.OPEN_BRACKET", false]], "open_punct (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.OPEN_PUNCT", false]], "open_punct_re (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.OPEN_PUNCT_RE", false]], "open_string() (nltk.toolbox.standardformat method)": [[255, "nltk.toolbox.StandardFormat.open_string", false]], "openondemandzipfile (class in nltk.data)": [[111, "nltk.data.OpenOnDemandZipFile", false]], "opinionlexiconcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.OpinionLexiconCorpusReader", false]], "opinionlexiconcorpusreader (class in nltk.corpus.reader.opinion_lexicon)": [[83, "nltk.corpus.reader.opinion_lexicon.OpinionLexiconCorpusReader", false]], "or (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.OR", false]], "or (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.OR", false]], "or (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.OR", false]], "or_list (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.OR_LIST", false]], "ordereddict (class in nltk.collections)": [[52, "nltk.collections.OrderedDict", false]], "orexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.OrExpression", false]], "original_algorithm (nltk.stem.porter.porterstemmer attribute)": [[206, "nltk.stem.porter.PorterStemmer.ORIGINAL_ALGORITHM", false]], "original_best_arc() (nltk.parse.nonprojectivedependencyparser.probabilisticnonprojectiveparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser.original_best_arc", false]], "original_tag (nltk.tbl.rule.tagrule attribute)": [[232, "nltk.tbl.rule.TagRule.original_tag", false]], "ortho_context (nltk.tokenize.punkt.punktparameters attribute)": [[243, "nltk.tokenize.punkt.PunktParameters.ortho_context", false]], "outerspace (nltk.sem.drt.drsdrawer attribute)": [[184, "nltk.sem.drt.DrsDrawer.OUTERSPACE", false]], "output_markdown() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.output_markdown", false]], "ovalwidget (class in nltk.draw.util)": [[119, "nltk.draw.util.OvalWidget", false]], "overlap() (nltk.classify.rte_classify.rtefeatureextractor method)": [[37, "nltk.classify.rte_classify.RTEFeatureExtractor.overlap", false]], "overridden() (in module nltk.internals)": [[131, "nltk.internals.overridden", false]], "pack() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.pack", false]], "pack() (nltk.draw.util.canvasframe method)": [[119, "nltk.draw.util.CanvasFrame.pack", false]], "pack() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.pack", false]], "package (class in nltk.downloader)": [[113, "nltk.downloader.Package", false]], "packages (nltk.downloader.collection attribute)": [[113, "nltk.downloader.Collection.packages", false]], "packages() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.packages", false]], "pad_sequence() (in module nltk.util)": [[291, "nltk.util.pad_sequence", false]], "padded_everygram_pipeline() (in module nltk.lm.preprocessing)": [[139, "nltk.lm.preprocessing.padded_everygram_pipeline", false]], "padded_everygrams() (in module nltk.lm.preprocessing)": [[139, "nltk.lm.preprocessing.padded_everygrams", false]], "paice (class in nltk.metrics.paice)": [[149, "nltk.metrics.paice.Paice", false]], "pairs() (nltk.corpus.reader.rte.rtecorpusreader method)": [[92, "nltk.corpus.reader.rte.RTECorpusReader.pairs", false]], "pairs() (nltk.corpus.reader.rtecorpusreader method)": [[57, "nltk.corpus.reader.RTECorpusReader.pairs", false]], "pairwise() (in module nltk.util)": [[291, "nltk.util.pairwise", false]], "panlex_uid (nltk.corpus.reader.panlex_swadesh.panlexlanguage attribute)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexLanguage.panlex_uid", false]], "panlexlanguage (class in nltk.corpus.reader.panlex_swadesh)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexLanguage", false]], "panlexlitecorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.PanLexLiteCorpusReader", false]], "panlexlitecorpusreader (class in nltk.corpus.reader.panlex_lite)": [[84, "nltk.corpus.reader.panlex_lite.PanLexLiteCorpusReader", false]], "panlexswadeshcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.PanlexSwadeshCorpusReader", false]], "panlexswadeshcorpusreader (class in nltk.corpus.reader.panlex_swadesh)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexSwadeshCorpusReader", false]], "para_path (nltk.corpus.reader.mte.mtefilereader attribute)": [[79, "nltk.corpus.reader.mte.MTEFileReader.para_path", false]], "parallelize_preprocess() (in module nltk.util)": [[291, "nltk.util.parallelize_preprocess", false]], "parallelproverbuilder (class in nltk.inference.api)": [[124, "nltk.inference.api.ParallelProverBuilder", false]], "parallelproverbuildercommand (class in nltk.inference.api)": [[124, "nltk.inference.api.ParallelProverBuilderCommand", false]], "paras (nltk.corpus.reader.markdown.codeblock property)": [[78, "nltk.corpus.reader.markdown.CodeBlock.paras", false]], "paras (nltk.corpus.reader.markdown.markdownblock property)": [[78, "nltk.corpus.reader.markdown.MarkdownBlock.paras", false]], "paras() (nltk.corpus.reader.api.categorizedcorpusreader method)": [[59, "nltk.corpus.reader.api.CategorizedCorpusReader.paras", false]], "paras() (nltk.corpus.reader.categorizedcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedCorpusReader.paras", false]], "paras() (nltk.corpus.reader.chasen.chasencorpusreader method)": [[64, "nltk.corpus.reader.chasen.ChasenCorpusReader.paras", false]], "paras() (nltk.corpus.reader.chasencorpusreader method)": [[57, "nltk.corpus.reader.ChasenCorpusReader.paras", false]], "paras() (nltk.corpus.reader.chunked.chunkedcorpusreader method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusReader.paras", false]], "paras() (nltk.corpus.reader.chunkedcorpusreader method)": [[57, "nltk.corpus.reader.ChunkedCorpusReader.paras", false]], "paras() (nltk.corpus.reader.europarlcorpusreader method)": [[57, "nltk.corpus.reader.EuroparlCorpusReader.paras", false]], "paras() (nltk.corpus.reader.ipipan.ipipancorpusreader method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader.paras", false]], "paras() (nltk.corpus.reader.ipipancorpusreader method)": [[57, "nltk.corpus.reader.IPIPANCorpusReader.paras", false]], "paras() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.paras", false]], "paras() (nltk.corpus.reader.mte.mtecorpusreader method)": [[79, "nltk.corpus.reader.mte.MTECorpusReader.paras", false]], "paras() (nltk.corpus.reader.mte.mtefilereader method)": [[79, "nltk.corpus.reader.mte.MTEFileReader.paras", false]], "paras() (nltk.corpus.reader.mtecorpusreader method)": [[57, "nltk.corpus.reader.MTECorpusReader.paras", false]], "paras() (nltk.corpus.reader.pl196x.pl196xcorpusreader method)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader.paras", false]], "paras() (nltk.corpus.reader.pl196xcorpusreader method)": [[57, "nltk.corpus.reader.Pl196xCorpusReader.paras", false]], "paras() (nltk.corpus.reader.plaintext.europarlcorpusreader method)": [[87, "nltk.corpus.reader.plaintext.EuroparlCorpusReader.paras", false]], "paras() (nltk.corpus.reader.plaintext.plaintextcorpusreader method)": [[87, "nltk.corpus.reader.plaintext.PlaintextCorpusReader.paras", false]], "paras() (nltk.corpus.reader.plaintextcorpusreader method)": [[57, "nltk.corpus.reader.PlaintextCorpusReader.paras", false]], "paras() (nltk.corpus.reader.tagged.taggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.TaggedCorpusReader.paras", false]], "paras() (nltk.corpus.reader.tagged.timittaggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.TimitTaggedCorpusReader.paras", false]], "paras() (nltk.corpus.reader.taggedcorpusreader method)": [[57, "nltk.corpus.reader.TaggedCorpusReader.paras", false]], "paras() (nltk.corpus.reader.timittaggedcorpusreader method)": [[57, "nltk.corpus.reader.TimitTaggedCorpusReader.paras", false]], "paras() (nltk.corpus.reader.ycoe.ycoecorpusreader method)": [[109, "nltk.corpus.reader.ycoe.YCOECorpusReader.paras", false]], "paras() (nltk.corpus.reader.ycoecorpusreader method)": [[57, "nltk.corpus.reader.YCOECorpusReader.paras", false]], "paras_mode (nltk.corpus.reader.ipipan.ipipancorpusview attribute)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusView.PARAS_MODE", false]], "parastart (nltk.tokenize.punkt.punkttoken attribute)": [[243, "nltk.tokenize.punkt.PunktToken.parastart", false]], "parens_brackets (nltk.tokenize.destructive.nltkwordtokenizer attribute)": [[239, "nltk.tokenize.destructive.NLTKWordTokenizer.PARENS_BRACKETS", false]], "parens_brackets (nltk.tokenize.treebank.treebankworddetokenizer attribute)": [[253, "nltk.tokenize.treebank.TreebankWordDetokenizer.PARENS_BRACKETS", false]], "parens_brackets (nltk.tokenize.treebank.treebankwordtokenizer attribute)": [[253, "nltk.tokenize.treebank.TreebankWordTokenizer.PARENS_BRACKETS", false]], "parent() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.parent", false]], "parent() (nltk.tree.parented.parentedtree method)": [[277, "nltk.tree.parented.ParentedTree.parent", false]], "parent() (nltk.tree.parentedtree method)": [[275, "nltk.tree.ParentedTree.parent", false]], "parent_index() (nltk.tree.parented.parentedtree method)": [[277, "nltk.tree.parented.ParentedTree.parent_index", false]], "parent_index() (nltk.tree.parentedtree method)": [[275, "nltk.tree.ParentedTree.parent_index", false]], "parent_indices() (nltk.tree.multiparentedtree method)": [[275, "nltk.tree.MultiParentedTree.parent_indices", false]], "parent_indices() (nltk.tree.parented.multiparentedtree method)": [[277, "nltk.tree.parented.MultiParentedTree.parent_indices", false]], "parentedtree (class in nltk.tree)": [[275, "nltk.tree.ParentedTree", false]], "parentedtree (class in nltk.tree.parented)": [[277, "nltk.tree.parented.ParentedTree", false]], "parents() (nltk.tree.multiparentedtree method)": [[275, "nltk.tree.MultiParentedTree.parents", false]], "parents() (nltk.tree.parented.multiparentedtree method)": [[277, "nltk.tree.parented.MultiParentedTree.parents", false]], "parenwidget (class in nltk.draw.util)": [[119, "nltk.draw.util.ParenWidget", false]], "parse() (nltk.ccg.chart.ccgchartparser method)": [[14, "nltk.ccg.chart.CCGChartParser.parse", false]], "parse() (nltk.chunk.api.chunkparseri method)": [[26, "nltk.chunk.api.ChunkParserI.parse", false]], "parse() (nltk.chunk.named_entity.nechunkparser method)": [[27, "nltk.chunk.named_entity.NEChunkParser.parse", false]], "parse() (nltk.chunk.regexp.regexpchunkparser method)": [[28, "nltk.chunk.regexp.RegexpChunkParser.parse", false]], "parse() (nltk.chunk.regexp.regexpparser method)": [[28, "nltk.chunk.regexp.RegexpParser.parse", false]], "parse() (nltk.corpus.reader.nombank.nombankinstance static method)": [[81, "nltk.corpus.reader.nombank.NombankInstance.parse", false]], "parse() (nltk.corpus.reader.nombank.nombanktreepointer static method)": [[81, "nltk.corpus.reader.nombank.NombankTreePointer.parse", false]], "parse() (nltk.corpus.reader.propbank.propbankinflection static method)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.parse", false]], "parse() (nltk.corpus.reader.propbank.propbankinstance static method)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.parse", false]], "parse() (nltk.corpus.reader.propbank.propbanktreepointer static method)": [[89, "nltk.corpus.reader.propbank.PropbankTreePointer.parse", false]], "parse() (nltk.parse.api.parseri method)": [[160, "nltk.parse.api.ParserI.parse", false]], "parse() (nltk.parse.bllip.bllipparser method)": [[161, "nltk.parse.bllip.BllipParser.parse", false]], "parse() (nltk.parse.chart.chartparser method)": [[162, "nltk.parse.chart.ChartParser.parse", false]], "parse() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.parse", false]], "parse() (nltk.parse.nonprojectivedependencyparser.nonprojectivedependencyparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.NonprojectiveDependencyParser.parse", false]], "parse() (nltk.parse.nonprojectivedependencyparser.probabilisticnonprojectiveparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser.parse", false]], "parse() (nltk.parse.pchart.bottomupprobabilisticchartparser method)": [[171, "nltk.parse.pchart.BottomUpProbabilisticChartParser.parse", false]], "parse() (nltk.parse.projectivedependencyparser.probabilisticprojectivedependencyparser method)": [[172, "nltk.parse.projectivedependencyparser.ProbabilisticProjectiveDependencyParser.parse", false]], "parse() (nltk.parse.projectivedependencyparser.projectivedependencyparser method)": [[172, "nltk.parse.projectivedependencyparser.ProjectiveDependencyParser.parse", false]], "parse() (nltk.parse.recursivedescent.recursivedescentparser method)": [[173, "nltk.parse.recursivedescent.RecursiveDescentParser.parse", false]], "parse() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.parse", false]], "parse() (nltk.parse.shiftreduce.shiftreduceparser method)": [[174, "nltk.parse.shiftreduce.ShiftReduceParser.parse", false]], "parse() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.parse", false]], "parse() (nltk.parse.transitionparser.transitionparser method)": [[176, "nltk.parse.transitionparser.TransitionParser.parse", false]], "parse() (nltk.parse.viterbi.viterbiparser method)": [[178, "nltk.parse.viterbi.ViterbiParser.parse", false]], "parse() (nltk.sem.boxer.boxeroutputdrsparser method)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser.parse", false]], "parse() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.parse", false]], "parse() (nltk.toolbox.toolboxdata method)": [[255, "nltk.toolbox.ToolboxData.parse", false]], "parse() (nltk.toolbox.toolboxsettings method)": [[255, "nltk.toolbox.ToolboxSettings.parse", false]], "parse_all() (nltk.parse.api.parseri method)": [[160, "nltk.parse.api.ParserI.parse_all", false]], "parse_condition() (nltk.sem.boxer.boxeroutputdrsparser method)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser.parse_condition", false]], "parse_corpus (nltk.corpus.reader.nombank.nombankinstance attribute)": [[81, "nltk.corpus.reader.nombank.NombankInstance.parse_corpus", false]], "parse_corpus (nltk.corpus.reader.propbank.propbankinstance attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.parse_corpus", false]], "parse_drs() (nltk.sem.boxer.boxeroutputdrsparser method)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser.parse_drs", false]], "parse_index() (nltk.sem.boxer.boxeroutputdrsparser method)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser.parse_index", false]], "parse_megam_weights() (in module nltk.classify.megam)": [[34, "nltk.classify.megam.parse_megam_weights", false]], "parse_one() (nltk.parse.api.parseri method)": [[160, "nltk.parse.api.ParserI.parse_one", false]], "parse_output() (nltk.tag.stanford.stanfordnertagger method)": [[224, "nltk.tag.stanford.StanfordNERTagger.parse_output", false]], "parse_output() (nltk.tag.stanford.stanfordtagger method)": [[224, "nltk.tag.stanford.StanfordTagger.parse_output", false]], "parse_repp_outputs() (nltk.tokenize.repp.repptokenizer static method)": [[245, "nltk.tokenize.repp.ReppTokenizer.parse_repp_outputs", false]], "parse_sents() (in module nltk.sem.util)": [[194, "nltk.sem.util.parse_sents", false]], "parse_sents() (nltk.parse.api.parseri method)": [[160, "nltk.parse.api.ParserI.parse_sents", false]], "parse_sents() (nltk.parse.corenlp.genericcorenlpparser method)": [[163, "nltk.parse.corenlp.GenericCoreNLPParser.parse_sents", false]], "parse_sents() (nltk.parse.malt.maltparser method)": [[169, "nltk.parse.malt.MaltParser.parse_sents", false]], "parse_sents() (nltk.parse.stanford.genericstanfordparser method)": [[175, "nltk.parse.stanford.GenericStanfordParser.parse_sents", false]], "parse_tadm_weights() (in module nltk.classify.tadm)": [[41, "nltk.classify.tadm.parse_tadm_weights", false]], "parse_tag() (nltk.corpus.reader.bcp47.bcp47corpusreader method)": [[60, "nltk.corpus.reader.bcp47.BCP47CorpusReader.parse_tag", false]], "parse_tag() (nltk.corpus.reader.bcp47corpusreader method)": [[57, "nltk.corpus.reader.BCP47CorpusReader.parse_tag", false]], "parse_tagged_sents() (nltk.parse.malt.maltparser method)": [[169, "nltk.parse.malt.MaltParser.parse_tagged_sents", false]], "parse_text() (nltk.parse.corenlp.genericcorenlpparser method)": [[163, "nltk.parse.corenlp.GenericCoreNLPParser.parse_text", false]], "parse_to_compiled() (nltk.sem.glue.glue method)": [[187, "nltk.sem.glue.Glue.parse_to_compiled", false]], "parse_to_meaning() (nltk.sem.glue.glue method)": [[187, "nltk.sem.glue.Glue.parse_to_meaning", false]], "parse_to_readings() (nltk.inference.discourse.cfgreadingcommand method)": [[125, "nltk.inference.discourse.CfgReadingCommand.parse_to_readings", false]], "parse_to_readings() (nltk.inference.discourse.drtgluereadingcommand method)": [[125, "nltk.inference.discourse.DrtGlueReadingCommand.parse_to_readings", false]], "parse_to_readings() (nltk.inference.discourse.readingcommand method)": [[125, "nltk.inference.discourse.ReadingCommand.parse_to_readings", false]], "parse_token_stream() (in module nltk.translate.gale_church)": [[260, "nltk.translate.gale_church.parse_token_stream", false]], "parse_tweets_set() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.parse_tweets_set", false]], "parse_variable() (nltk.sem.boxer.boxeroutputdrsparser method)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser.parse_variable", false]], "parse_weka_distribution() (nltk.classify.weka.wekaclassifier method)": [[44, "nltk.classify.weka.WekaClassifier.parse_weka_distribution", false]], "parse_weka_output() (nltk.classify.weka.wekaclassifier method)": [[44, "nltk.classify.weka.WekaClassifier.parse_weka_output", false]], "parse_with_bindops() (in module nltk.sem.cooper_storage)": [[183, "nltk.sem.cooper_storage.parse_with_bindops", false]], "parseapplication() (in module nltk.ccg.lexicon)": [[16, "nltk.ccg.lexicon.parseApplication", false]], "parsed_docs() (nltk.corpus.reader.ieer.ieercorpusreader method)": [[73, "nltk.corpus.reader.ieer.IEERCorpusReader.parsed_docs", false]], "parsed_docs() (nltk.corpus.reader.ieercorpusreader method)": [[57, "nltk.corpus.reader.IEERCorpusReader.parsed_docs", false]], "parsed_paras() (nltk.corpus.reader.bracket_parse.categorizedbracketparsecorpusreader method)": [[62, "nltk.corpus.reader.bracket_parse.CategorizedBracketParseCorpusReader.parsed_paras", false]], "parsed_paras() (nltk.corpus.reader.categorizedbracketparsecorpusreader method)": [[57, "nltk.corpus.reader.CategorizedBracketParseCorpusReader.parsed_paras", false]], "parsed_sents() (nltk.corpus.reader.api.syntaxcorpusreader method)": [[59, "nltk.corpus.reader.api.SyntaxCorpusReader.parsed_sents", false]], "parsed_sents() (nltk.corpus.reader.bracket_parse.categorizedbracketparsecorpusreader method)": [[62, "nltk.corpus.reader.bracket_parse.CategorizedBracketParseCorpusReader.parsed_sents", false]], "parsed_sents() (nltk.corpus.reader.categorizedbracketparsecorpusreader method)": [[57, "nltk.corpus.reader.CategorizedBracketParseCorpusReader.parsed_sents", false]], "parsed_sents() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.parsed_sents", false]], "parsed_sents() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.parsed_sents", false]], "parsed_sents() (nltk.corpus.reader.dependency.dependencycorpusreader method)": [[71, "nltk.corpus.reader.dependency.DependencyCorpusReader.parsed_sents", false]], "parsed_sents() (nltk.corpus.reader.dependencycorpusreader method)": [[57, "nltk.corpus.reader.DependencyCorpusReader.parsed_sents", false]], "parsed_sents() (nltk.corpus.reader.syntaxcorpusreader method)": [[57, "nltk.corpus.reader.SyntaxCorpusReader.parsed_sents", false]], "parsed_sents() (nltk.corpus.reader.ycoe.ycoecorpusreader method)": [[109, "nltk.corpus.reader.ycoe.YCOECorpusReader.parsed_sents", false]], "parsed_sents() (nltk.corpus.reader.ycoecorpusreader method)": [[57, "nltk.corpus.reader.YCOECorpusReader.parsed_sents", false]], "parsed_words() (nltk.corpus.reader.bracket_parse.categorizedbracketparsecorpusreader method)": [[62, "nltk.corpus.reader.bracket_parse.CategorizedBracketParseCorpusReader.parsed_words", false]], "parsed_words() (nltk.corpus.reader.categorizedbracketparsecorpusreader method)": [[57, "nltk.corpus.reader.CategorizedBracketParseCorpusReader.parsed_words", false]], "parseprimitivecategory() (in module nltk.ccg.lexicon)": [[16, "nltk.ccg.lexicon.parsePrimitiveCategory", false]], "parser_annotator (nltk.parse.corenlp.corenlpdependencyparser attribute)": [[163, "nltk.parse.corenlp.CoreNLPDependencyParser.parser_annotator", false]], "parser_annotator (nltk.parse.corenlp.corenlpparser attribute)": [[163, "nltk.parse.corenlp.CoreNLPParser.parser_annotator", false]], "parseri (class in nltk.parse.api)": [[160, "nltk.parse.api.ParserI", false]], "parserules() (nltk.stem.lancaster.lancasterstemmer method)": [[205, "nltk.stem.lancaster.LancasterStemmer.parseRules", false]], "parses() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.parses", false]], "parses() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.parses", false]], "parses() (nltk.parse.featurechart.featurechart method)": [[167, "nltk.parse.featurechart.FeatureChart.parses", false]], "parses() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.parses", false]], "parses() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.parses", false]], "parsesubscripts() (in module nltk.ccg.lexicon)": [[16, "nltk.ccg.lexicon.parseSubscripts", false]], "partial (nltk.downloader.downloader attribute)": [[113, "nltk.downloader.Downloader.PARTIAL", false]], "partial_names_demo() (in module nltk.classify.util)": [[43, "nltk.classify.util.partial_names_demo", false]], "participants() (nltk.corpus.reader.childes.childescorpusreader method)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.participants", false]], "participants() (nltk.corpus.reader.childescorpusreader method)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.participants", false]], "participle (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.PARTICIPLE", false]], "passive (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.PASSIVE", false]], "passthroughboxerdrsinterpreter (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.PassthroughBoxerDrsInterpreter", false]], "past (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.PAST", false]], "path (in module nltk.data)": [[111, "nltk.data.path", false]], "path (nltk.data.filesystempathpointer property)": [[111, "nltk.data.FileSystemPathPointer.path", false]], "path_similarity() (in module nltk.corpus.reader.wordnet)": [[107, "nltk.corpus.reader.wordnet.path_similarity", false]], "path_similarity() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.path_similarity", false]], "path_similarity() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.path_similarity", false]], "path_similarity() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.path_similarity", false]], "pathpointer (class in nltk.data)": [[111, "nltk.data.PathPointer", false]], "pcfg (class in nltk.grammar)": [[121, "nltk.grammar.PCFG", false]], "perceptrontagger (class in nltk.tag.perceptron)": [[221, "nltk.tag.perceptron.PerceptronTagger", false]], "perfect (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.PERFECT", false]], "perfect_and_progressive (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.PERFECT_AND_PROGRESSIVE", false]], "period_comma_follow (nltk.tokenize.nist.nisttokenizer attribute)": [[242, "nltk.tokenize.nist.NISTTokenizer.PERIOD_COMMA_FOLLOW", false]], "period_comma_preceed (nltk.tokenize.nist.nisttokenizer attribute)": [[242, "nltk.tokenize.nist.NISTTokenizer.PERIOD_COMMA_PRECEED", false]], "period_context_re() (nltk.tokenize.punkt.punktlanguagevars method)": [[243, "nltk.tokenize.punkt.PunktLanguageVars.period_context_re", false]], "period_final (nltk.tokenize.punkt.punkttoken attribute)": [[243, "nltk.tokenize.punkt.PunktToken.period_final", false]], "perplexity() (nltk.lm.api.languagemodel method)": [[136, "nltk.lm.api.LanguageModel.perplexity", false]], "pertainyms() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.pertainyms", false]], "pformat() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.pformat", false]], "pformat() (nltk.tree.tree method)": [[275, "nltk.tree.Tree.pformat", false]], "pformat() (nltk.tree.tree.tree method)": [[282, "nltk.tree.tree.Tree.pformat", false]], "pformat_latex_qtree() (nltk.tree.tree method)": [[275, "nltk.tree.Tree.pformat_latex_qtree", false]], "pformat_latex_qtree() (nltk.tree.tree.tree method)": [[282, "nltk.tree.tree.Tree.pformat_latex_qtree", false]], "phags_pa (nltk.tokenize.util.cjkchars attribute)": [[254, "nltk.tokenize.util.CJKChars.Phags_Pa", false]], "phi_sq() (nltk.metrics.association.bigramassocmeasures class method)": [[146, "nltk.metrics.association.BigramAssocMeasures.phi_sq", false]], "phone_times() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.phone_times", false]], "phone_times() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.phone_times", false]], "phone_trees() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.phone_trees", false]], "phone_trees() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.phone_trees", false]], "phone_word_re (nltk.tokenize.casual.tweettokenizer property)": [[238, "nltk.tokenize.casual.TweetTokenizer.PHONE_WORD_RE", false]], "phones() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.phones", false]], "phones() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.phones", false]], "phrase_extraction() (in module nltk.translate.phrase_based)": [[272, "nltk.translate.phrase_based.phrase_extraction", false]], "phrasetable (class in nltk.translate.api)": [[257, "nltk.translate.api.PhraseTable", false]], "phrasetableentry (class in nltk.translate.api)": [[257, "nltk.translate.api.PhraseTableEntry", false]], "pi() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.pi", false]], "pieces (nltk.corpus.reader.nombank.nombankchaintreepointer attribute)": [[81, "nltk.corpus.reader.nombank.NombankChainTreePointer.pieces", false]], "pieces (nltk.corpus.reader.nombank.nombanksplittreepointer attribute)": [[81, "nltk.corpus.reader.nombank.NombankSplitTreePointer.pieces", false]], "pieces (nltk.corpus.reader.propbank.propbankchaintreepointer attribute)": [[89, "nltk.corpus.reader.propbank.PropbankChainTreePointer.pieces", false]], "pieces (nltk.corpus.reader.propbank.propbanksplittreepointer attribute)": [[89, "nltk.corpus.reader.propbank.PropbankSplitTreePointer.pieces", false]], "pipe (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.PIPE", false]], "pk() (in module nltk.metrics.segmentation)": [[151, "nltk.metrics.segmentation.pk", false]], "pl196xcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.Pl196xCorpusReader", false]], "pl196xcorpusreader (class in nltk.corpus.reader.pl196x)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader", false]], "plaintextcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.PlaintextCorpusReader", false]], "plaintextcorpusreader (class in nltk.corpus.reader.plaintext)": [[87, "nltk.corpus.reader.plaintext.PlaintextCorpusReader", false]], "play() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.play", false]], "play() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.play", false]], "plot() (nltk.probability.conditionalfreqdist method)": [[179, "nltk.probability.ConditionalFreqDist.plot", false]], "plot() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.plot", false]], "plot() (nltk.text.text method)": [[234, "nltk.text.Text.plot", false]], "pluggings() (nltk.sem.hole.holesemantics method)": [[188, "nltk.sem.hole.HoleSemantics.pluggings", false]], "plur2sing() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.plur2sing", false]], "plur2sing() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.plur2sing", false]], "pmi() (nltk.metrics.association.ngramassocmeasures class method)": [[146, "nltk.metrics.association.NgramAssocMeasures.pmi", false]], "point_entropy() (nltk.tag.hmm.hiddenmarkovmodeltagger method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.point_entropy", false]], "poisson_stirling() (nltk.metrics.association.ngramassocmeasures class method)": [[146, "nltk.metrics.association.NgramAssocMeasures.poisson_stirling", false]], "polarity_scores() (nltk.sentiment.vader.sentimentintensityanalyzer method)": [[198, "nltk.sentiment.vader.SentimentIntensityAnalyzer.polarity_scores", false]], "pop() (nltk.featstruct.featdict method)": [[120, "nltk.featstruct.FeatDict.pop", false]], "pop() (nltk.featstruct.featlist method)": [[120, "nltk.featstruct.FeatList.pop", false]], "pop() (nltk.tree.immutable.immutabletree method)": [[276, "nltk.tree.immutable.ImmutableTree.pop", false]], "pop() (nltk.tree.immutabletree method)": [[275, "nltk.tree.ImmutableTree.pop", false]], "pop_first() (nltk.inference.tableau.agenda method)": [[130, "nltk.inference.tableau.Agenda.pop_first", false]], "popitem() (nltk.collections.ordereddict method)": [[52, "nltk.collections.OrderedDict.popitem", false]], "popitem() (nltk.featstruct.featdict method)": [[120, "nltk.featstruct.FeatDict.popitem", false]], "porterstemmer (class in nltk.stem.porter)": [[206, "nltk.stem.porter.PorterStemmer", false]], "porterstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.PorterStemmer", false]], "portuguesecategorizedplaintextcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.PortugueseCategorizedPlaintextCorpusReader", false]], "portuguesecategorizedplaintextcorpusreader (class in nltk.corpus.reader.plaintext)": [[87, "nltk.corpus.reader.plaintext.PortugueseCategorizedPlaintextCorpusReader", false]], "portuguesestemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.PortugueseStemmer", false]], "pos (class in nltk.tag.brill)": [[215, "nltk.tag.brill.Pos", false]], "pos (nltk.corpus.reader.conll.conllcorpusreader attribute)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.POS", false]], "pos (nltk.corpus.reader.conllcorpusreader attribute)": [[57, "nltk.corpus.reader.ConllCorpusReader.POS", false]], "pos() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.pos", false]], "pos() (nltk.tree.tree method)": [[275, "nltk.tree.Tree.pos", false]], "pos() (nltk.tree.tree.tree method)": [[282, "nltk.tree.tree.Tree.pos", false]], "pos_score() (nltk.corpus.reader.sentisynset method)": [[57, "nltk.corpus.reader.SentiSynset.pos_score", false]], "pos_score() (nltk.corpus.reader.sentiwordnet.sentisynset method)": [[95, "nltk.corpus.reader.sentiwordnet.SentiSynset.pos_score", false]], "pos_tag() (in module nltk.tag)": [[213, "nltk.tag.pos_tag", false]], "pos_tag_sents() (in module nltk.tag)": [[213, "nltk.tag.pos_tag_sents", false]], "position_of_ngram() (in module nltk.translate.ribes_score)": [[273, "nltk.translate.ribes_score.position_of_ngram", false]], "positive() (nltk.corpus.reader.opinion_lexicon.opinionlexiconcorpusreader method)": [[83, "nltk.corpus.reader.opinion_lexicon.OpinionLexiconCorpusReader.positive", false]], "positive() (nltk.corpus.reader.opinionlexiconcorpusreader method)": [[57, "nltk.corpus.reader.OpinionLexiconCorpusReader.positive", false]], "positivenaivebayesclassifier (class in nltk.classify.positivenaivebayes)": [[36, "nltk.classify.positivenaivebayes.PositiveNaiveBayesClassifier", false]], "possibleantecedents (class in nltk.sem.drt)": [[184, "nltk.sem.drt.PossibleAntecedents", false]], "postag() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.postag", false]], "postag_tree() (in module nltk.chunk.named_entity)": [[27, "nltk.chunk.named_entity.postag_tree", false]], "posts() (nltk.corpus.reader.nps_chat.npschatcorpusreader method)": [[82, "nltk.corpus.reader.nps_chat.NPSChatCorpusReader.posts", false]], "posts() (nltk.corpus.reader.npschatcorpusreader method)": [[57, "nltk.corpus.reader.NPSChatCorpusReader.posts", false]], "postscript() (nltk.sem.drt_glue_demo.drtgluedemo method)": [[185, "nltk.sem.drt_glue_demo.DrtGlueDemo.postscript", false]], "ppattachment (class in nltk.corpus.reader.ppattach)": [[88, "nltk.corpus.reader.ppattach.PPAttachment", false]], "ppattachmentcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.PPAttachmentCorpusReader", false]], "ppattachmentcorpusreader (class in nltk.corpus.reader.ppattach)": [[88, "nltk.corpus.reader.ppattach.PPAttachmentCorpusReader", false]], "pprint() (nltk.corpus.reader.conll.conllsrlinstance method)": [[69, "nltk.corpus.reader.conll.ConllSRLInstance.pprint", false]], "pprint() (nltk.corpus.reader.conll.conllsrlinstancelist method)": [[69, "nltk.corpus.reader.conll.ConllSRLInstanceList.pprint", false]], "pprint() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.pprint", false]], "pprint() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.pprint", false]], "pprint() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.pprint", false]], "pprint() (nltk.tree.tree method)": [[275, "nltk.tree.Tree.pprint", false]], "pprint() (nltk.tree.tree.tree method)": [[282, "nltk.tree.tree.Tree.pprint", false]], "pprint_frames() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.pprint_frames", false]], "pprint_frames() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.pprint_frames", false]], "pprint_members() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.pprint_members", false]], "pprint_members() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.pprint_members", false]], "pprint_subclasses() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.pprint_subclasses", false]], "pprint_subclasses() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.pprint_subclasses", false]], "pprint_themroles() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.pprint_themroles", false]], "pprint_themroles() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.pprint_themroles", false]], "pr() (in module nltk.util)": [[291, "nltk.util.pr", false]], "pre1() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.pre1", false]], "pre32() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.pre32", false]], "precision() (in module nltk.metrics.scores)": [[150, "nltk.metrics.scores.precision", false]], "precision() (nltk.chunk.util.chunkscore method)": [[29, "nltk.chunk.util.ChunkScore.precision", false]], "precision() (nltk.metrics.confusionmatrix.confusionmatrix method)": [[147, "nltk.metrics.confusionmatrix.ConfusionMatrix.precision", false]], "precision() (nltk.tag.api.taggeri method)": [[214, "nltk.tag.api.TaggerI.precision", false]], "pred (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.PRED", false]], "pred (nltk.sem.logic.applicationexpression property)": [[191, "nltk.sem.logic.ApplicationExpression.pred", false]], "predholder (class in nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.PredHolder", false]], "predicate (nltk.corpus.reader.nombank.nombankinstance attribute)": [[81, "nltk.corpus.reader.nombank.NombankInstance.predicate", false]], "predicate (nltk.corpus.reader.propbank.propbankinstance attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.predicate", false]], "predicates() (nltk.sem.logic.abstractvariableexpression method)": [[191, "nltk.sem.logic.AbstractVariableExpression.predicates", false]], "predicates() (nltk.sem.logic.applicationexpression method)": [[191, "nltk.sem.logic.ApplicationExpression.predicates", false]], "predicates() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.predicates", false]], "predict() (nltk.tag.perceptron.averagedperceptron method)": [[221, "nltk.tag.perceptron.AveragedPerceptron.predict", false]], "predictorrule (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.PredictorRule", false]], "predid (nltk.corpus.reader.nombank.nombankinstance attribute)": [[81, "nltk.corpus.reader.nombank.NombankInstance.predid", false]], "predid (nltk.corpus.reader.propbank.propbankinstance property)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.predid", false]], "pref() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.pref", false]], "pref() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.pref", false]], "prefix_replace() (in module nltk.stem.util)": [[210, "nltk.stem.util.prefix_replace", false]], "prefix_step2a_success (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.prefix_step2a_success", false]], "prefix_step3a_noun_success (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.prefix_step3a_noun_success", false]], "prefix_step3b_noun_success (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.prefix_step3b_noun_success", false]], "presence() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.presence", false]], "present (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.PRESENT", false]], "pretty_format() (nltk.classify.decisiontree.decisiontreeclassifier method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.pretty_format", false]], "pretty_format() (nltk.metrics.confusionmatrix.confusionmatrix method)": [[147, "nltk.metrics.confusionmatrix.ConfusionMatrix.pretty_format", false]], "pretty_format() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.pretty_format", false]], "pretty_format() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.pretty_format", false]], "pretty_format() (nltk.sem.lfg.fstructure method)": [[189, "nltk.sem.lfg.FStructure.pretty_format", false]], "pretty_format_edge() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.pretty_format_edge", false]], "pretty_format_leaves() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.pretty_format_leaves", false]], "pretty_print() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.pretty_print", false]], "pretty_print() (nltk.tree.tree method)": [[275, "nltk.tree.Tree.pretty_print", false]], "pretty_print() (nltk.tree.tree.tree method)": [[282, "nltk.tree.tree.Tree.pretty_print", false]], "prettydict (class in nltk.corpus.reader.framenet)": [[72, "nltk.corpus.reader.framenet.PrettyDict", false]], "prettylazyconcatenation (class in nltk.corpus.reader.framenet)": [[72, "nltk.corpus.reader.framenet.PrettyLazyConcatenation", false]], "prettylazyiteratorlist (class in nltk.corpus.reader.framenet)": [[72, "nltk.corpus.reader.framenet.PrettyLazyIteratorList", false]], "prettylazymap (class in nltk.corpus.reader.framenet)": [[72, "nltk.corpus.reader.framenet.PrettyLazyMap", false]], "prettylist (class in nltk.corpus.reader.framenet)": [[72, "nltk.corpus.reader.framenet.PrettyList", false]], "prev() (nltk.sem.drt_glue_demo.drtgluedemo method)": [[185, "nltk.sem.drt_glue_demo.DrtGlueDemo.prev", false]], "previous_cept() (nltk.translate.ibm_model.alignmentinfo method)": [[268, "nltk.translate.ibm_model.AlignmentInfo.previous_cept", false]], "previous_in_tablet() (nltk.translate.ibm_model.alignmentinfo method)": [[268, "nltk.translate.ibm_model.AlignmentInfo.previous_in_tablet", false]], "primitivecategory (class in nltk.ccg.api)": [[13, "nltk.ccg.api.PrimitiveCategory", false]], "print_assumptions() (nltk.inference.api.basetheoremtoolcommand method)": [[124, "nltk.inference.api.BaseTheoremToolCommand.print_assumptions", false]], "print_assumptions() (nltk.inference.api.theoremtoolcommand method)": [[124, "nltk.inference.api.TheoremToolCommand.print_assumptions", false]], "print_assumptions() (nltk.inference.api.theoremtoolcommanddecorator method)": [[124, "nltk.inference.api.TheoremToolCommandDecorator.print_assumptions", false]], "print_assumptions() (nltk.inference.prover9.prover9commandparent method)": [[128, "nltk.inference.prover9.Prover9CommandParent.print_assumptions", false]], "print_concordance() (nltk.text.concordanceindex method)": [[234, "nltk.text.ConcordanceIndex.print_concordance", false]], "print_proof() (in module nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.print_proof", false]], "print_string() (in module nltk.util)": [[291, "nltk.util.print_string", false]], "print_template_statistics() (nltk.tag.brill.brilltagger method)": [[215, "nltk.tag.brill.BrillTagger.print_template_statistics", false]], "print_to_file() (nltk.draw.util.canvasframe method)": [[119, "nltk.draw.util.CanvasFrame.print_to_file", false]], "printccgderivation() (in module nltk.ccg.chart)": [[14, "nltk.ccg.chart.printCCGDerivation", false]], "printccgtree() (in module nltk.ccg.chart)": [[14, "nltk.ccg.chart.printCCGTree", false]], "printtype() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.printtype", false]], "priors (nltk.translate.gale_church.languageindependent attribute)": [[260, "nltk.translate.gale_church.LanguageIndependent.PRIORS", false]], "pro_w4() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.pro_w4", false]], "pro_w53() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.pro_w53", false]], "pro_w54() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.pro_w54", false]], "pro_w6() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.pro_w6", false]], "pro_w64() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.pro_w64", false]], "prob() (nltk.parse.pchart.probabilisticleafedge method)": [[171, "nltk.parse.pchart.ProbabilisticLeafEdge.prob", false]], "prob() (nltk.parse.pchart.probabilistictreeedge method)": [[171, "nltk.parse.pchart.ProbabilisticTreeEdge.prob", false]], "prob() (nltk.probability.crossvalidationprobdist method)": [[179, "nltk.probability.CrossValidationProbDist.prob", false]], "prob() (nltk.probability.dictionaryprobdist method)": [[179, "nltk.probability.DictionaryProbDist.prob", false]], "prob() (nltk.probability.heldoutprobdist method)": [[179, "nltk.probability.HeldoutProbDist.prob", false]], "prob() (nltk.probability.kneserneyprobdist method)": [[179, "nltk.probability.KneserNeyProbDist.prob", false]], "prob() (nltk.probability.lidstoneprobdist method)": [[179, "nltk.probability.LidstoneProbDist.prob", false]], "prob() (nltk.probability.mleprobdist method)": [[179, "nltk.probability.MLEProbDist.prob", false]], "prob() (nltk.probability.mutableprobdist method)": [[179, "nltk.probability.MutableProbDist.prob", false]], "prob() (nltk.probability.probabilisticmixin method)": [[179, "nltk.probability.ProbabilisticMixIn.prob", false]], "prob() (nltk.probability.probdisti method)": [[179, "nltk.probability.ProbDistI.prob", false]], "prob() (nltk.probability.simplegoodturingprobdist method)": [[179, "nltk.probability.SimpleGoodTuringProbDist.prob", false]], "prob() (nltk.probability.uniformprobdist method)": [[179, "nltk.probability.UniformProbDist.prob", false]], "prob() (nltk.probability.wittenbellprobdist method)": [[179, "nltk.probability.WittenBellProbDist.prob", false]], "prob_alignment_point() (nltk.translate.ibm1.ibmmodel1 method)": [[263, "nltk.translate.ibm1.IBMModel1.prob_alignment_point", false]], "prob_alignment_point() (nltk.translate.ibm2.ibmmodel2 method)": [[264, "nltk.translate.ibm2.IBMModel2.prob_alignment_point", false]], "prob_all_alignments() (nltk.translate.ibm1.ibmmodel1 method)": [[263, "nltk.translate.ibm1.IBMModel1.prob_all_alignments", false]], "prob_all_alignments() (nltk.translate.ibm2.ibmmodel2 method)": [[264, "nltk.translate.ibm2.IBMModel2.prob_all_alignments", false]], "prob_classify() (nltk.classify.api.classifieri method)": [[31, "nltk.classify.api.ClassifierI.prob_classify", false]], "prob_classify() (nltk.classify.api.multiclassifieri method)": [[31, "nltk.classify.api.MultiClassifierI.prob_classify", false]], "prob_classify() (nltk.classify.maxent.maxentclassifier method)": [[33, "nltk.classify.maxent.MaxentClassifier.prob_classify", false]], "prob_classify() (nltk.classify.naivebayes.naivebayesclassifier method)": [[35, "nltk.classify.naivebayes.NaiveBayesClassifier.prob_classify", false]], "prob_classify_many() (nltk.classify.api.classifieri method)": [[31, "nltk.classify.api.ClassifierI.prob_classify_many", false]], "prob_classify_many() (nltk.classify.api.multiclassifieri method)": [[31, "nltk.classify.api.MultiClassifierI.prob_classify_many", false]], "prob_classify_many() (nltk.classify.scikitlearn.sklearnclassifier method)": [[38, "nltk.classify.scikitlearn.SklearnClassifier.prob_classify_many", false]], "prob_classify_many() (nltk.classify.weka.wekaclassifier method)": [[44, "nltk.classify.weka.WekaClassifier.prob_classify_many", false]], "prob_of_alignments() (nltk.translate.ibm_model.ibmmodel method)": [[268, "nltk.translate.ibm_model.IBMModel.prob_of_alignments", false]], "prob_single_quotes (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.PROB_SINGLE_QUOTES", false]], "prob_t_a_given_s() (nltk.translate.ibm1.ibmmodel1 method)": [[263, "nltk.translate.ibm1.IBMModel1.prob_t_a_given_s", false]], "prob_t_a_given_s() (nltk.translate.ibm2.ibmmodel2 method)": [[264, "nltk.translate.ibm2.IBMModel2.prob_t_a_given_s", false]], "prob_t_a_given_s() (nltk.translate.ibm3.ibmmodel3 method)": [[265, "nltk.translate.ibm3.IBMModel3.prob_t_a_given_s", false]], "prob_t_a_given_s() (nltk.translate.ibm4.ibmmodel4 method)": [[266, "nltk.translate.ibm4.IBMModel4.prob_t_a_given_s", false]], "prob_t_a_given_s() (nltk.translate.ibm5.ibmmodel5 method)": [[267, "nltk.translate.ibm5.IBMModel5.prob_t_a_given_s", false]], "prob_t_a_given_s() (nltk.translate.ibm_model.ibmmodel method)": [[268, "nltk.translate.ibm_model.IBMModel.prob_t_a_given_s", false]], "probabilisticbottomupinitrule (class in nltk.parse.pchart)": [[171, "nltk.parse.pchart.ProbabilisticBottomUpInitRule", false]], "probabilisticbottomuppredictrule (class in nltk.parse.pchart)": [[171, "nltk.parse.pchart.ProbabilisticBottomUpPredictRule", false]], "probabilisticdependencygrammar (class in nltk.grammar)": [[121, "nltk.grammar.ProbabilisticDependencyGrammar", false]], "probabilisticfundamentalrule (class in nltk.parse.pchart)": [[171, "nltk.parse.pchart.ProbabilisticFundamentalRule", false]], "probabilisticleafedge (class in nltk.parse.pchart)": [[171, "nltk.parse.pchart.ProbabilisticLeafEdge", false]], "probabilisticmixin (class in nltk.probability)": [[179, "nltk.probability.ProbabilisticMixIn", false]], "probabilisticnonprojectiveparser (class in nltk.parse.nonprojectivedependencyparser)": [[170, "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser", false]], "probabilisticproduction (class in nltk.grammar)": [[121, "nltk.grammar.ProbabilisticProduction", false]], "probabilisticprojectivedependencyparser (class in nltk.parse.projectivedependencyparser)": [[172, "nltk.parse.projectivedependencyparser.ProbabilisticProjectiveDependencyParser", false]], "probabilistictree (class in nltk.tree)": [[275, "nltk.tree.ProbabilisticTree", false]], "probabilistictree (class in nltk.tree.probabilistic)": [[280, "nltk.tree.probabilistic.ProbabilisticTree", false]], "probabilistictreeedge (class in nltk.parse.pchart)": [[171, "nltk.parse.pchart.ProbabilisticTreeEdge", false]], "probability() (nltk.tag.hmm.hiddenmarkovmodeltagger method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.probability", false]], "probdisti (class in nltk.probability)": [[179, "nltk.probability.ProbDistI", false]], "process() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.process", false]], "process_bundle() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.process_bundle", false]], "process_next_expression() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.process_next_expression", false]], "process_quoted_token() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.process_quoted_token", false]], "process_thread() (nltk.inference.discourse.drtgluereadingcommand method)": [[125, "nltk.inference.discourse.DrtGlueReadingCommand.process_thread", false]], "process_thread() (nltk.inference.discourse.readingcommand method)": [[125, "nltk.inference.discourse.ReadingCommand.process_thread", false]], "production (class in nltk.grammar)": [[121, "nltk.grammar.Production", false]], "productionlist (class in nltk.draw.cfg)": [[115, "nltk.draw.cfg.ProductionList", false]], "productions() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.productions", false]], "productions() (nltk.tree.tree method)": [[275, "nltk.tree.Tree.productions", false]], "productions() (nltk.tree.tree.tree method)": [[282, "nltk.tree.tree.Tree.productions", false]], "profile() (nltk.classify.textcat.textcat method)": [[42, "nltk.classify.textcat.TextCat.profile", false]], "progressive (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.PROGRESSIVE", false]], "progressmessage (class in nltk.downloader)": [[113, "nltk.downloader.ProgressMessage", false]], "projective_prob_parse_demo() (in module nltk.parse.projectivedependencyparser)": [[172, "nltk.parse.projectivedependencyparser.projective_prob_parse_demo", false]], "projective_rule_parse_demo() (in module nltk.parse.projectivedependencyparser)": [[172, "nltk.parse.projectivedependencyparser.projective_rule_parse_demo", false]], "projectivedependencyparser (class in nltk.parse.projectivedependencyparser)": [[172, "nltk.parse.projectivedependencyparser.ProjectiveDependencyParser", false]], "pronoun (nltk.sem.drt.drttokens attribute)": [[184, "nltk.sem.drt.DrtTokens.PRONOUN", false]], "proof() (nltk.inference.api.baseprovercommand method)": [[124, "nltk.inference.api.BaseProverCommand.proof", false]], "proof() (nltk.inference.api.provercommand method)": [[124, "nltk.inference.api.ProverCommand.proof", false]], "proof() (nltk.inference.api.provercommanddecorator method)": [[124, "nltk.inference.api.ProverCommandDecorator.proof", false]], "prop (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.PROP", false]], "propagate_semtypes() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.propagate_semtypes", false]], "propagate_semtypes() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.propagate_semtypes", false]], "propbankchaintreepointer (class in nltk.corpus.reader.propbank)": [[89, "nltk.corpus.reader.propbank.PropbankChainTreePointer", false]], "propbankcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.PropbankCorpusReader", false]], "propbankcorpusreader (class in nltk.corpus.reader.propbank)": [[89, "nltk.corpus.reader.propbank.PropbankCorpusReader", false]], "propbankinflection (class in nltk.corpus.reader.propbank)": [[89, "nltk.corpus.reader.propbank.PropbankInflection", false]], "propbankinstance (class in nltk.corpus.reader.propbank)": [[89, "nltk.corpus.reader.propbank.PropbankInstance", false]], "propbankpointer (class in nltk.corpus.reader.propbank)": [[89, "nltk.corpus.reader.propbank.PropbankPointer", false]], "propbanksplittreepointer (class in nltk.corpus.reader.propbank)": [[89, "nltk.corpus.reader.propbank.PropbankSplitTreePointer", false]], "propbanktreepointer (class in nltk.corpus.reader.propbank)": [[89, "nltk.corpus.reader.propbank.PropbankTreePointer", false]], "propdemo() (in module nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.propdemo", false]], "property_name (nltk.tbl.feature.feature attribute)": [[231, "nltk.tbl.feature.Feature.PROPERTY_NAME", false]], "prosconscorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.ProsConsCorpusReader", false]], "prosconscorpusreader (class in nltk.corpus.reader.pros_cons)": [[90, "nltk.corpus.reader.pros_cons.ProsConsCorpusReader", false]], "prove() (nltk.inference.api.baseprovercommand method)": [[124, "nltk.inference.api.BaseProverCommand.prove", false]], "prove() (nltk.inference.api.parallelproverbuildercommand method)": [[124, "nltk.inference.api.ParallelProverBuilderCommand.prove", false]], "prove() (nltk.inference.api.prover method)": [[124, "nltk.inference.api.Prover.prove", false]], "prove() (nltk.inference.api.provercommand method)": [[124, "nltk.inference.api.ProverCommand.prove", false]], "prove() (nltk.inference.api.provercommanddecorator method)": [[124, "nltk.inference.api.ProverCommandDecorator.prove", false]], "prove() (nltk.inference.resolution.resolutionprovercommand method)": [[129, "nltk.inference.resolution.ResolutionProverCommand.prove", false]], "prover (class in nltk.inference.api)": [[124, "nltk.inference.api.Prover", false]], "prover9 (class in nltk.inference.prover9)": [[128, "nltk.inference.prover9.Prover9", false]], "prover9_input() (nltk.inference.prover9.prover9 method)": [[128, "nltk.inference.prover9.Prover9.prover9_input", false]], "prover9_input() (nltk.inference.prover9.prover9parent method)": [[128, "nltk.inference.prover9.Prover9Parent.prover9_input", false]], "prover9command (class in nltk.inference.prover9)": [[128, "nltk.inference.prover9.Prover9Command", false]], "prover9commandparent (class in nltk.inference.prover9)": [[128, "nltk.inference.prover9.Prover9CommandParent", false]], "prover9exception": [[128, "nltk.inference.prover9.Prover9Exception", false]], "prover9fatalexception": [[128, "nltk.inference.prover9.Prover9FatalException", false]], "prover9limitexceededexception": [[128, "nltk.inference.prover9.Prover9LimitExceededException", false]], "prover9parent (class in nltk.inference.prover9)": [[128, "nltk.inference.prover9.Prover9Parent", false]], "provercommand (class in nltk.inference.api)": [[124, "nltk.inference.api.ProverCommand", false]], "provercommanddecorator (class in nltk.inference.api)": [[124, "nltk.inference.api.ProverCommandDecorator", false]], "proverparseerror": [[127, "nltk.inference.nonmonotonic.ProverParseError", false], [129, "nltk.inference.resolution.ProverParseError", false], [130, "nltk.inference.tableau.ProverParseError", false]], "prune() (nltk.translate.ibm5.ibmmodel5 method)": [[267, "nltk.translate.ibm5.IBMModel5.prune", false]], "pseudocode() (nltk.classify.decisiontree.decisiontreeclassifier method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.pseudocode", false]], "punc_list (nltk.sentiment.vader.vaderconstants attribute)": [[198, "nltk.sentiment.vader.VaderConstants.PUNC_LIST", false]], "punct (nltk.sem.drt.drttokens attribute)": [[184, "nltk.sem.drt.DrtTokens.PUNCT", false]], "punct (nltk.sem.linearlogic.tokens attribute)": [[190, "nltk.sem.linearlogic.Tokens.PUNCT", false]], "punct (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.PUNCT", false]], "punct (nltk.tokenize.nist.nisttokenizer attribute)": [[242, "nltk.tokenize.nist.NISTTokenizer.PUNCT", false]], "punct_1 (nltk.tokenize.nist.nisttokenizer attribute)": [[242, "nltk.tokenize.nist.NISTTokenizer.PUNCT_1", false]], "punct_2 (nltk.tokenize.nist.nisttokenizer attribute)": [[242, "nltk.tokenize.nist.NISTTokenizer.PUNCT_2", false]], "punct_regex (nltk.tokenize.nist.nisttokenizer attribute)": [[242, "nltk.tokenize.nist.NISTTokenizer.punct_regex", false]], "punctuation (nltk.tokenize.destructive.nltkwordtokenizer attribute)": [[239, "nltk.tokenize.destructive.NLTKWordTokenizer.PUNCTUATION", false]], "punctuation (nltk.tokenize.punkt.punktsentencetokenizer attribute)": [[243, "nltk.tokenize.punkt.PunktSentenceTokenizer.PUNCTUATION", false]], "punctuation (nltk.tokenize.treebank.treebankworddetokenizer attribute)": [[253, "nltk.tokenize.treebank.TreebankWordDetokenizer.PUNCTUATION", false]], "punctuation (nltk.tokenize.treebank.treebankwordtokenizer attribute)": [[253, "nltk.tokenize.treebank.TreebankWordTokenizer.PUNCTUATION", false]], "punktbaseclass (class in nltk.tokenize.punkt)": [[243, "nltk.tokenize.punkt.PunktBaseClass", false]], "punktdecoder (class in nltk.tabdata)": [[212, "nltk.tabdata.PunktDecoder", false]], "punktlanguagevars (class in nltk.tokenize.punkt)": [[243, "nltk.tokenize.punkt.PunktLanguageVars", false]], "punktparameters (class in nltk.tokenize.punkt)": [[243, "nltk.tokenize.punkt.PunktParameters", false]], "punktsentencetokenizer (class in nltk.tokenize.punkt)": [[243, "nltk.tokenize.punkt.PunktSentenceTokenizer", false]], "punkttoken (class in nltk.tokenize.punkt)": [[243, "nltk.tokenize.punkt.PunktToken", false]], "punkttokenizer (class in nltk.tokenize.punkt)": [[243, "nltk.tokenize.punkt.PunktTokenizer", false]], "punkttrainer (class in nltk.tokenize.punkt)": [[243, "nltk.tokenize.punkt.PunktTrainer", false]], "pup_number (nltk.tokenize.nist.nisttokenizer attribute)": [[242, "nltk.tokenize.nist.NISTTokenizer.pup_number", false]], "pup_punct (nltk.tokenize.nist.nisttokenizer attribute)": [[242, "nltk.tokenize.nist.NISTTokenizer.pup_punct", false]], "pup_symbol (nltk.tokenize.nist.nisttokenizer attribute)": [[242, "nltk.tokenize.nist.NISTTokenizer.pup_symbol", false]], "purge() (nltk.sem.evaluate.assignment method)": [[186, "nltk.sem.evaluate.Assignment.purge", false]], "put() (nltk.inference.tableau.agenda method)": [[130, "nltk.inference.tableau.Agenda.put", false]], "put_all() (nltk.inference.tableau.agenda method)": [[130, "nltk.inference.tableau.Agenda.put_all", false]], "put_atoms() (nltk.inference.tableau.agenda method)": [[130, "nltk.inference.tableau.Agenda.put_atoms", false]], "py3_data() (in module nltk.compat)": [[54, "nltk.compat.py3_data", false]], "q2name() (in module nltk.langnames)": [[133, "nltk.langnames.q2name", false]], "q2tag() (in module nltk.langnames)": [[133, "nltk.langnames.q2tag", false]], "quadgramassocmeasures (class in nltk.metrics.association)": [[146, "nltk.metrics.association.QuadgramAssocMeasures", false]], "quadgramcollocationfinder (class in nltk.collocations)": [[53, "nltk.collocations.QuadgramCollocationFinder", false]], "quality() (nltk.corpus.reader.panlex_lite.meaning method)": [[84, "nltk.corpus.reader.panlex_lite.Meaning.quality", false]], "quantifiedexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.QuantifiedExpression", false]], "quants (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.QUANTS", false]], "query (class in nltk.twitter.twitterclient)": [[289, "nltk.twitter.twitterclient.Query", false]], "quick() (in module nltk.misc.sort)": [[157, "nltk.misc.sort.quick", false]], "r() (in module nltk.metrics.aline)": [[145, "nltk.metrics.aline.R", false]], "r_nr() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.r_Nr", false]], "raise_unorderable_types() (in module nltk.internals)": [[131, "nltk.internals.raise_unorderable_types", false]], "random_sample() (nltk.tag.hmm.hiddenmarkovmodeltagger method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.random_sample", false]], "randomchartparser (class in nltk.parse.pchart)": [[171, "nltk.parse.pchart.RandomChartParser", false]], "range() (nltk.translate.api.alignment method)": [[257, "nltk.translate.api.Alignment.range", false]], "range_re (nltk.featstruct.rangefeature attribute)": [[120, "nltk.featstruct.RangeFeature.RANGE_RE", false]], "rangefeature (class in nltk.featstruct)": [[120, "nltk.featstruct.RangeFeature", false]], "ranges (nltk.tokenize.util.cjkchars attribute)": [[254, "nltk.tokenize.util.CJKChars.ranges", false]], "ranks_from_scores() (in module nltk.metrics.spearman)": [[152, "nltk.metrics.spearman.ranks_from_scores", false]], "ranks_from_sequence() (in module nltk.metrics.spearman)": [[152, "nltk.metrics.spearman.ranks_from_sequence", false]], "ratio (nltk.draw.util.ovalwidget attribute)": [[119, "nltk.draw.util.OvalWidget.RATIO", false]], "raw (nltk.corpus.reader.markdown.markdownblock property)": [[78, "nltk.corpus.reader.markdown.MarkdownBlock.raw", false]], "raw() (nltk.corpus.reader.api.categorizedcorpusreader method)": [[59, "nltk.corpus.reader.api.CategorizedCorpusReader.raw", false]], "raw() (nltk.corpus.reader.api.corpusreader method)": [[59, "nltk.corpus.reader.api.CorpusReader.raw", false]], "raw() (nltk.corpus.reader.categorizedcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedCorpusReader.raw", false]], "raw() (nltk.corpus.reader.corpusreader method)": [[57, "nltk.corpus.reader.CorpusReader.raw", false]], "raw() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.raw", false]], "raw() (nltk.corpus.reader.nkjp.nkjpcorpusreader method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.raw", false]], "raw() (nltk.corpus.reader.nkjpcorpusreader method)": [[57, "nltk.corpus.reader.NKJPCorpusReader.raw", false]], "raw_fields() (nltk.toolbox.standardformat method)": [[255, "nltk.toolbox.StandardFormat.raw_fields", false]], "raw_freq() (nltk.metrics.association.ngramassocmeasures static method)": [[146, "nltk.metrics.association.NgramAssocMeasures.raw_freq", false]], "raw_mode (nltk.corpus.reader.nkjp.nkjpcorpus_text_view attribute)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Text_View.RAW_MODE", false]], "raw_mode (nltk.corpus.reader.nkjp.nkjpcorpusreader attribute)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.RAW_MODE", false]], "raw_mode (nltk.corpus.reader.nkjpcorpusreader attribute)": [[57, "nltk.corpus.reader.NKJPCorpusReader.RAW_MODE", false]], "raw_parse() (nltk.parse.corenlp.genericcorenlpparser method)": [[163, "nltk.parse.corenlp.GenericCoreNLPParser.raw_parse", false]], "raw_parse() (nltk.parse.stanford.genericstanfordparser method)": [[175, "nltk.parse.stanford.GenericStanfordParser.raw_parse", false]], "raw_parse_sents() (nltk.parse.corenlp.genericcorenlpparser method)": [[163, "nltk.parse.corenlp.GenericCoreNLPParser.raw_parse_sents", false]], "raw_parse_sents() (nltk.parse.stanford.genericstanfordparser method)": [[175, "nltk.parse.stanford.GenericStanfordParser.raw_parse_sents", false]], "raw_tag_sents() (nltk.parse.corenlp.genericcorenlpparser method)": [[163, "nltk.parse.corenlp.GenericCoreNLPParser.raw_tag_sents", false]], "re_boundary_realignment (nltk.tokenize.punkt.punktlanguagevars attribute)": [[243, "nltk.tokenize.punkt.PunktLanguageVars.re_boundary_realignment", false]], "re_show() (in module nltk.util)": [[291, "nltk.util.re_show", false]], "read() (nltk.data.openondemandzipfile method)": [[111, "nltk.data.OpenOnDemandZipFile.read", false]], "read() (nltk.data.seekableunicodestreamreader method)": [[111, "nltk.data.SeekableUnicodeStreamReader.read", false]], "read_alignedsent_block() (in module nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.read_alignedsent_block", false]], "read_app_value() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.read_app_value", false]], "read_blankline_block() (in module nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.read_blankline_block", false]], "read_block() (nltk.corpus.reader.aligned.alignedsentcorpusview method)": [[58, "nltk.corpus.reader.aligned.AlignedSentCorpusView.read_block", false]], "read_block() (nltk.corpus.reader.chasen.chasencorpusview method)": [[64, "nltk.corpus.reader.chasen.ChasenCorpusView.read_block", false]], "read_block() (nltk.corpus.reader.chunked.chunkedcorpusview method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusView.read_block", false]], "read_block() (nltk.corpus.reader.dependency.dependencycorpusview method)": [[71, "nltk.corpus.reader.dependency.DependencyCorpusView.read_block", false]], "read_block() (nltk.corpus.reader.indian.indiancorpusview method)": [[74, "nltk.corpus.reader.indian.IndianCorpusView.read_block", false]], "read_block() (nltk.corpus.reader.ipipan.ipipancorpusview method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusView.read_block", false]], "read_block() (nltk.corpus.reader.mte.mtecorpusview method)": [[79, "nltk.corpus.reader.mte.MTECorpusView.read_block", false]], "read_block() (nltk.corpus.reader.nkjp.nkjpcorpus_text_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Text_View.read_block", false]], "read_block() (nltk.corpus.reader.pl196x.teicorpusview method)": [[86, "nltk.corpus.reader.pl196x.TEICorpusView.read_block", false]], "read_block() (nltk.corpus.reader.senseval.sensevalcorpusview method)": [[94, "nltk.corpus.reader.senseval.SensevalCorpusView.read_block", false]], "read_block() (nltk.corpus.reader.tagged.taggedcorpusview method)": [[99, "nltk.corpus.reader.tagged.TaggedCorpusView.read_block", false]], "read_block() (nltk.corpus.reader.teicorpusview method)": [[57, "nltk.corpus.reader.TEICorpusView.read_block", false]], "read_block() (nltk.corpus.reader.util.streambackedcorpusview method)": [[104, "nltk.corpus.reader.util.StreamBackedCorpusView.read_block", false]], "read_block() (nltk.corpus.reader.xmldocs.xmlcorpusview method)": [[108, "nltk.corpus.reader.xmldocs.XMLCorpusView.read_block", false]], "read_cmudict_block() (in module nltk.corpus.reader.cmudict)": [[67, "nltk.corpus.reader.cmudict.read_cmudict_block", false]], "read_depgraph() (nltk.sem.lfg.fstructure static method)": [[189, "nltk.sem.lfg.FStructure.read_depgraph", false]], "read_file() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.read_file", false]], "read_fstruct_value() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.read_fstruct_value", false]], "read_grammar() (in module nltk.grammar)": [[121, "nltk.grammar.read_grammar", false]], "read_int() (in module nltk.internals)": [[131, "nltk.internals.read_int", false]], "read_int_value() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.read_int_value", false]], "read_line_block() (in module nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.read_line_block", false]], "read_logic() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.read_logic", false]], "read_logic_value() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.read_logic_value", false]], "read_number() (in module nltk.internals)": [[131, "nltk.internals.read_number", false]], "read_parse_blankline_block() (in module nltk.corpus.reader.markdown)": [[78, "nltk.corpus.reader.markdown.read_parse_blankline_block", false]], "read_partial() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.read_partial", false]], "read_regexp_block() (in module nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.read_regexp_block", false]], "read_rule() (nltk.stem.rslp.rslpstemmer method)": [[208, "nltk.stem.rslp.RSLPStemmer.read_rule", false]], "read_sents() (in module nltk.sem.util)": [[194, "nltk.sem.util.read_sents", false]], "read_set_value() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.read_set_value", false]], "read_sexpr_block() (in module nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.read_sexpr_block", false]], "read_str() (in module nltk.internals)": [[131, "nltk.internals.read_str", false]], "read_str_value() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.read_str_value", false]], "read_sym_value() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.read_sym_value", false]], "read_timit_block() (in module nltk.corpus.reader.timit)": [[100, "nltk.corpus.reader.timit.read_timit_block", false]], "read_tuple_value() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.read_tuple_value", false]], "read_type() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.read_type", false]], "read_valuation() (in module nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.read_valuation", false]], "read_value() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.read_value", false]], "read_value() (nltk.featstruct.feature method)": [[120, "nltk.featstruct.Feature.read_value", false]], "read_value() (nltk.featstruct.rangefeature method)": [[120, "nltk.featstruct.RangeFeature.read_value", false]], "read_value() (nltk.featstruct.slashfeature method)": [[120, "nltk.featstruct.SlashFeature.read_value", false]], "read_var_value() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.read_var_value", false]], "read_whitespace_block() (in module nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.read_whitespace_block", false]], "read_wordpunct_block() (in module nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.read_wordpunct_block", false]], "readability() (nltk.text.text method)": [[234, "nltk.text.Text.readability", false]], "readerror": [[131, "nltk.internals.ReadError", false]], "readingcommand (class in nltk.inference.discourse)": [[125, "nltk.inference.discourse.ReadingCommand", false]], "readings() (nltk.inference.discourse.discoursetester method)": [[125, "nltk.inference.discourse.DiscourseTester.readings", false]], "readline() (nltk.data.seekableunicodestreamreader method)": [[111, "nltk.data.SeekableUnicodeStreamReader.readline", false]], "readlines() (nltk.data.seekableunicodestreamreader method)": [[111, "nltk.data.SeekableUnicodeStreamReader.readlines", false]], "readme() (nltk.corpus.reader.api.corpusreader method)": [[59, "nltk.corpus.reader.api.CorpusReader.readme", false]], "readme() (nltk.corpus.reader.corpusreader method)": [[57, "nltk.corpus.reader.CorpusReader.readme", false]], "readme() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.readme", false]], "readme() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.readme", false]], "recall() (in module nltk.metrics.scores)": [[150, "nltk.metrics.scores.recall", false]], "recall() (nltk.chunk.util.chunkscore method)": [[29, "nltk.chunk.util.ChunkScore.recall", false]], "recall() (nltk.metrics.confusionmatrix.confusionmatrix method)": [[147, "nltk.metrics.confusionmatrix.ConfusionMatrix.recall", false]], "recall() (nltk.tag.api.taggeri method)": [[214, "nltk.tag.api.TaggerI.recall", false]], "recursivedescentparser (class in nltk.parse.recursivedescent)": [[173, "nltk.parse.recursivedescent.RecursiveDescentParser", false]], "redirect_arcs() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.redirect_arcs", false]], "reduce (nltk.parse.transitionparser.transition attribute)": [[176, "nltk.parse.transitionparser.Transition.REDUCE", false]], "reduce() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.reduce", false]], "reduce() (nltk.parse.transitionparser.transition method)": [[176, "nltk.parse.transitionparser.Transition.reduce", false]], "reduce_lengthening() (in module nltk.tokenize.casual)": [[238, "nltk.tokenize.casual.reduce_lengthening", false]], "reducible_productions() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.reducible_productions", false]], "referenced_labels() (nltk.sem.boxer.boxerprop method)": [[181, "nltk.sem.boxer.BoxerProp.referenced_labels", false]], "refine() (nltk.classify.decisiontree.decisiontreeclassifier method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.refine", false]], "regex_remove_punctuation (nltk.sentiment.vader.vaderconstants attribute)": [[198, "nltk.sentiment.vader.VaderConstants.REGEX_REMOVE_PUNCTUATION", false]], "regexp_span_tokenize() (in module nltk.tokenize.util)": [[254, "nltk.tokenize.util.regexp_span_tokenize", false]], "regexp_tokenize() (in module nltk.tokenize.regexp)": [[244, "nltk.tokenize.regexp.regexp_tokenize", false]], "regexpchunkparser (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.RegexpChunkParser", false]], "regexpchunkrule (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.RegexpChunkRule", false]], "regexpparser (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.RegexpParser", false]], "regexpstemmer (class in nltk.stem.regexp)": [[207, "nltk.stem.regexp.RegexpStemmer", false]], "regexptagger (class in nltk.tag.sequential)": [[223, "nltk.tag.sequential.RegexpTagger", false]], "regexptokenizer (class in nltk.tokenize.regexp)": [[244, "nltk.tokenize.regexp.RegexpTokenizer", false]], "register() (nltk.twitter.twitterclient.query method)": [[289, "nltk.twitter.twitterclient.Query.register", false]], "register() (nltk.twitter.twitterclient.streamer method)": [[289, "nltk.twitter.twitterclient.Streamer.register", false]], "register_tag() (in module nltk.jsontags)": [[132, "nltk.jsontags.register_tag", false]], "remaining_text() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.remaining_text", false]], "remaining_text() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.remaining_text", false]], "remove() (nltk.draw.util.mutableoptionmenu method)": [[119, "nltk.draw.util.MutableOptionMenu.remove", false]], "remove() (nltk.featstruct.featlist method)": [[120, "nltk.featstruct.FeatList.remove", false]], "remove() (nltk.tree.immutable.immutabletree method)": [[276, "nltk.tree.immutable.ImmutableTree.remove", false]], "remove() (nltk.tree.immutabletree method)": [[275, "nltk.tree.ImmutableTree.remove", false]], "remove_blanks() (in module nltk.toolbox)": [[255, "nltk.toolbox.remove_blanks", false]], "remove_by_address() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.remove_by_address", false]], "remove_callback() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.remove_callback", false]], "remove_child() (nltk.draw.tree.treesegmentwidget method)": [[118, "nltk.draw.tree.TreeSegmentWidget.remove_child", false]], "remove_child() (nltk.draw.util.scrollwatcherwidget method)": [[119, "nltk.draw.util.ScrollWatcherWidget.remove_child", false]], "remove_child() (nltk.draw.util.sequencewidget method)": [[119, "nltk.draw.util.SequenceWidget.remove_child", false]], "remove_child() (nltk.draw.util.stackwidget method)": [[119, "nltk.draw.util.StackWidget.remove_child", false]], "remove_choice() (nltk.corpus.reader.nkjp.nkjpcorpus_segmentation_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Segmentation_View.remove_choice", false]], "remove_handles() (in module nltk.tokenize.casual)": [[238, "nltk.tokenize.casual.remove_handles", false]], "remove_preprocessed_file() (nltk.corpus.reader.nkjp.xml_tool method)": [[80, "nltk.corpus.reader.nkjp.XML_Tool.remove_preprocessed_file", false]], "remove_punctuation() (nltk.classify.textcat.textcat method)": [[42, "nltk.classify.textcat.TextCat.remove_punctuation", false]], "remove_unitary_rules() (nltk.grammar.cfg class method)": [[121, "nltk.grammar.CFG.remove_unitary_rules", false]], "remove_variables() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.remove_variables", false]], "remove_widget() (nltk.draw.util.canvasframe method)": [[119, "nltk.draw.util.CanvasFrame.remove_widget", false]], "rename_variables() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.rename_variables", false]], "renumber_sentences() (nltk.sem.boxer.abstractboxerdrs method)": [[181, "nltk.sem.boxer.AbstractBoxerDrs.renumber_sentences", false]], "renumber_sentences() (nltk.sem.boxer.boxercard method)": [[181, "nltk.sem.boxer.BoxerCard.renumber_sentences", false]], "renumber_sentences() (nltk.sem.boxer.boxerdrs method)": [[181, "nltk.sem.boxer.BoxerDrs.renumber_sentences", false]], "renumber_sentences() (nltk.sem.boxer.boxereq method)": [[181, "nltk.sem.boxer.BoxerEq.renumber_sentences", false]], "renumber_sentences() (nltk.sem.boxer.boxernamed method)": [[181, "nltk.sem.boxer.BoxerNamed.renumber_sentences", false]], "renumber_sentences() (nltk.sem.boxer.boxernot method)": [[181, "nltk.sem.boxer.BoxerNot.renumber_sentences", false]], "renumber_sentences() (nltk.sem.boxer.boxeror method)": [[181, "nltk.sem.boxer.BoxerOr.renumber_sentences", false]], "renumber_sentences() (nltk.sem.boxer.boxerpred method)": [[181, "nltk.sem.boxer.BoxerPred.renumber_sentences", false]], "renumber_sentences() (nltk.sem.boxer.boxerprop method)": [[181, "nltk.sem.boxer.BoxerProp.renumber_sentences", false]], "renumber_sentences() (nltk.sem.boxer.boxerrel method)": [[181, "nltk.sem.boxer.BoxerRel.renumber_sentences", false]], "renumber_sentences() (nltk.sem.boxer.boxerwhq method)": [[181, "nltk.sem.boxer.BoxerWhq.renumber_sentences", false]], "repl_xx (nltk.stem.cistem.cistem attribute)": [[203, "nltk.stem.cistem.Cistem.repl_xx", false]], "repl_xx_back (nltk.stem.cistem.cistem attribute)": [[203, "nltk.stem.cistem.Cistem.repl_xx_back", false]], "replace() (nltk.inference.resolution.clause method)": [[129, "nltk.inference.resolution.Clause.replace", false]], "replace() (nltk.sem.drt.drs method)": [[184, "nltk.sem.drt.DRS.replace", false]], "replace() (nltk.sem.drt.drtconcatenation method)": [[184, "nltk.sem.drt.DrtConcatenation.replace", false]], "replace() (nltk.sem.drt.drtproposition method)": [[184, "nltk.sem.drt.DrtProposition.replace", false]], "replace() (nltk.sem.drt.possibleantecedents method)": [[184, "nltk.sem.drt.PossibleAntecedents.replace", false]], "replace() (nltk.sem.logic.abstractvariableexpression method)": [[191, "nltk.sem.logic.AbstractVariableExpression.replace", false]], "replace() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.replace", false]], "replace() (nltk.sem.logic.variablebinderexpression method)": [[191, "nltk.sem.logic.VariableBinderExpression.replace", false]], "replace_all() (nltk.inference.tableau.agenda method)": [[130, "nltk.inference.tableau.Agenda.replace_all", false]], "replace_back() (nltk.stem.cistem.cistem static method)": [[203, "nltk.stem.cistem.Cistem.replace_back", false]], "replace_child() (nltk.draw.tree.treesegmentwidget method)": [[118, "nltk.draw.tree.TreeSegmentWidget.replace_child", false]], "replace_child() (nltk.draw.util.sequencewidget method)": [[119, "nltk.draw.util.SequenceWidget.replace_child", false]], "replace_child() (nltk.draw.util.stackwidget method)": [[119, "nltk.draw.util.StackWidget.replace_child", false]], "replace_quants() (nltk.inference.nonmonotonic.closeddomainprover method)": [[127, "nltk.inference.nonmonotonic.ClosedDomainProver.replace_quants", false]], "replace_to() (nltk.stem.cistem.cistem static method)": [[203, "nltk.stem.cistem.Cistem.replace_to", false]], "replacement_tag (nltk.tbl.rule.tagrule attribute)": [[232, "nltk.tbl.rule.TagRule.replacement_tag", false]], "repptokenizer (class in nltk.tokenize.repp)": [[245, "nltk.tokenize.repp.ReppTokenizer", false]], "res() (nltk.ccg.api.functionalcategory method)": [[13, "nltk.ccg.api.FunctionalCategory.res", false]], "res_similarity() (in module nltk.corpus.reader.wordnet)": [[107, "nltk.corpus.reader.wordnet.res_similarity", false]], "res_similarity() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.res_similarity", false]], "res_similarity() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.res_similarity", false]], "res_similarity() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.res_similarity", false]], "reset_cache() (nltk.tag.hmm.hiddenmarkovmodeltagger method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.reset_cache", false]], "reset_id() (nltk.ccg.api.ccgvar class method)": [[13, "nltk.ccg.api.CCGVar.reset_id", false]], "reset_probabilities() (nltk.translate.ibm3.ibmmodel3 method)": [[265, "nltk.translate.ibm3.IBMModel3.reset_probabilities", false]], "reset_probabilities() (nltk.translate.ibm4.ibmmodel4 method)": [[266, "nltk.translate.ibm4.IBMModel4.reset_probabilities", false]], "reset_probabilities() (nltk.translate.ibm5.ibmmodel5 method)": [[267, "nltk.translate.ibm5.IBMModel5.reset_probabilities", false]], "reset_probabilities() (nltk.translate.ibm_model.ibmmodel method)": [[268, "nltk.translate.ibm_model.IBMModel.reset_probabilities", false]], "reset_workspace() (nltk.draw.cfg.cfgdemo method)": [[115, "nltk.draw.cfg.CFGDemo.reset_workspace", false]], "resize() (nltk.draw.tree.treeview method)": [[118, "nltk.draw.tree.TreeView.resize", false]], "resize() (nltk.sem.drt_glue_demo.drtgluedemo method)": [[185, "nltk.sem.drt_glue_demo.DrtGlueDemo.resize", false]], "resolution_test() (in module nltk.inference.resolution)": [[129, "nltk.inference.resolution.resolution_test", false]], "resolutionprover (class in nltk.inference.resolution)": [[129, "nltk.inference.resolution.ResolutionProver", false]], "resolutionprovercommand (class in nltk.inference.resolution)": [[129, "nltk.inference.resolution.ResolutionProverCommand", false]], "resolve() (nltk.sem.logic.anytype method)": [[191, "nltk.sem.logic.AnyType.resolve", false]], "resolve() (nltk.sem.logic.basictype method)": [[191, "nltk.sem.logic.BasicType.resolve", false]], "resolve() (nltk.sem.logic.complextype method)": [[191, "nltk.sem.logic.ComplexType.resolve", false]], "resolve_anaphora() (in module nltk.sem.drt)": [[184, "nltk.sem.drt.resolve_anaphora", false]], "resolve_anaphora() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.resolve_anaphora", false]], "respond() (nltk.chat.util.chat method)": [[23, "nltk.chat.util.Chat.respond", false]], "resps (nltk.corpus.reader.bnc.bncwordview attribute)": [[61, "nltk.corpus.reader.bnc.BNCWordView.resps", false]], "restrs() (nltk.ccg.api.direction method)": [[13, "nltk.ccg.api.Direction.restrs", false]], "restrs() (nltk.ccg.api.primitivecategory method)": [[13, "nltk.ccg.api.PrimitiveCategory.restrs", false]], "result (nltk.inference.api.theoremtoolthread property)": [[124, "nltk.inference.api.TheoremToolThread.result", false]], "retract_assumptions() (nltk.inference.api.basetheoremtoolcommand method)": [[124, "nltk.inference.api.BaseTheoremToolCommand.retract_assumptions", false]], "retract_assumptions() (nltk.inference.api.theoremtoolcommand method)": [[124, "nltk.inference.api.TheoremToolCommand.retract_assumptions", false]], "retract_assumptions() (nltk.inference.api.theoremtoolcommanddecorator method)": [[124, "nltk.inference.api.TheoremToolCommandDecorator.retract_assumptions", false]], "retract_bindings() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.retract_bindings", false]], "retract_sentence() (nltk.inference.discourse.discoursetester method)": [[125, "nltk.inference.discourse.DiscourseTester.retract_sentence", false]], "retrieve() (in module nltk.data)": [[111, "nltk.data.retrieve", false]], "reverse() (nltk.featstruct.featlist method)": [[120, "nltk.featstruct.FeatList.reverse", false]], "reverse() (nltk.tree.immutable.immutabletree method)": [[276, "nltk.tree.immutable.ImmutableTree.reverse", false]], "reverse() (nltk.tree.immutabletree method)": [[275, "nltk.tree.ImmutableTree.reverse", false]], "review (class in nltk.corpus.reader.reviews)": [[91, "nltk.corpus.reader.reviews.Review", false]], "reviewline (class in nltk.corpus.reader.reviews)": [[91, "nltk.corpus.reader.reviews.ReviewLine", false]], "reviews() (nltk.corpus.reader.reviews.reviewscorpusreader method)": [[91, "nltk.corpus.reader.reviews.ReviewsCorpusReader.reviews", false]], "reviews() (nltk.corpus.reader.reviewscorpusreader method)": [[57, "nltk.corpus.reader.ReviewsCorpusReader.reviews", false]], "reviewscorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.ReviewsCorpusReader", false]], "reviewscorpusreader (class in nltk.corpus.reader.reviews)": [[91, "nltk.corpus.reader.reviews.ReviewsCorpusReader", false]], "revword() (in module nltk.misc.wordfinder)": [[158, "nltk.misc.wordfinder.revword", false]], "rhs() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.rhs", false]], "rhs() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.rhs", false]], "rhs() (nltk.grammar.production method)": [[121, "nltk.grammar.Production.rhs", false]], "rhs() (nltk.parse.chart.edgei method)": [[162, "nltk.parse.chart.EdgeI.rhs", false]], "rhs() (nltk.parse.chart.leafedge method)": [[162, "nltk.parse.chart.LeafEdge.rhs", false]], "rhs() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.rhs", false]], "right_arc (nltk.parse.transitionparser.transition attribute)": [[176, "nltk.parse.transitionparser.Transition.RIGHT_ARC", false]], "right_arc() (nltk.parse.transitionparser.transition method)": [[176, "nltk.parse.transitionparser.Transition.right_arc", false]], "right_children() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.right_children", false]], "right_sibling() (nltk.tree.parented.parentedtree method)": [[277, "nltk.tree.parented.ParentedTree.right_sibling", false]], "right_sibling() (nltk.tree.parentedtree method)": [[275, "nltk.tree.ParentedTree.right_sibling", false]], "right_siblings() (nltk.tree.multiparentedtree method)": [[275, "nltk.tree.MultiParentedTree.right_siblings", false]], "right_siblings() (nltk.tree.parented.multiparentedtree method)": [[277, "nltk.tree.parented.MultiParentedTree.right_siblings", false]], "rm_nl() (in module nltk.tabdata)": [[212, "nltk.tabdata.rm_nl", false]], "roles_demo() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.roles_demo", false]], "roleset (nltk.corpus.reader.nombank.nombankinstance property)": [[81, "nltk.corpus.reader.nombank.NombankInstance.roleset", false]], "roleset (nltk.corpus.reader.propbank.propbankinstance attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.roleset", false]], "roleset() (nltk.corpus.reader.nombank.nombankcorpusreader method)": [[81, "nltk.corpus.reader.nombank.NombankCorpusReader.roleset", false]], "roleset() (nltk.corpus.reader.nombankcorpusreader method)": [[57, "nltk.corpus.reader.NombankCorpusReader.roleset", false]], "roleset() (nltk.corpus.reader.propbank.propbankcorpusreader method)": [[89, "nltk.corpus.reader.propbank.PropbankCorpusReader.roleset", false]], "roleset() (nltk.corpus.reader.propbankcorpusreader method)": [[57, "nltk.corpus.reader.PropbankCorpusReader.roleset", false]], "rolesets() (nltk.corpus.reader.nombank.nombankcorpusreader method)": [[81, "nltk.corpus.reader.nombank.NombankCorpusReader.rolesets", false]], "rolesets() (nltk.corpus.reader.nombankcorpusreader method)": [[57, "nltk.corpus.reader.NombankCorpusReader.rolesets", false]], "rolesets() (nltk.corpus.reader.propbank.propbankcorpusreader method)": [[89, "nltk.corpus.reader.propbank.PropbankCorpusReader.rolesets", false]], "rolesets() (nltk.corpus.reader.propbankcorpusreader method)": [[57, "nltk.corpus.reader.PropbankCorpusReader.rolesets", false]], "romanianstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.RomanianStemmer", false]], "root (nltk.corpus.reader.api.corpusreader property)": [[59, "nltk.corpus.reader.api.CorpusReader.root", false]], "root (nltk.corpus.reader.corpusreader property)": [[57, "nltk.corpus.reader.CorpusReader.root", false]], "root() (nltk.tree.parented.parentedtree method)": [[277, "nltk.tree.parented.ParentedTree.root", false]], "root() (nltk.tree.parentedtree method)": [[275, "nltk.tree.ParentedTree.root", false]], "root_hypernyms() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.root_hypernyms", false]], "root_semrep() (in module nltk.sem.util)": [[194, "nltk.sem.util.root_semrep", false]], "roots() (nltk.tree.multiparentedtree method)": [[275, "nltk.tree.MultiParentedTree.roots", false]], "roots() (nltk.tree.parented.multiparentedtree method)": [[277, "nltk.tree.parented.MultiParentedTree.roots", false]], "rowconfig() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.rowconfig", false]], "rowconfig() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.rowconfig", false]], "rowconfigure() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.rowconfigure", false]], "rowconfigure() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.rowconfigure", false]], "rslpstemmer (class in nltk.stem.rslp)": [[208, "nltk.stem.rslp.RSLPStemmer", false]], "rstrip (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.RSTRIP", false]], "rte_classifier() (in module nltk.classify.rte_classify)": [[37, "nltk.classify.rte_classify.rte_classifier", false]], "rte_features() (in module nltk.classify.rte_classify)": [[37, "nltk.classify.rte_classify.rte_features", false]], "rte_featurize() (in module nltk.classify.rte_classify)": [[37, "nltk.classify.rte_classify.rte_featurize", false]], "rtecorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.RTECorpusReader", false]], "rtecorpusreader (class in nltk.corpus.reader.rte)": [[92, "nltk.corpus.reader.rte.RTECorpusReader", false]], "rtefeatureextractor (class in nltk.classify.rte_classify)": [[37, "nltk.classify.rte_classify.RTEFeatureExtractor", false]], "rtepair (class in nltk.corpus.reader.rte)": [[92, "nltk.corpus.reader.rte.RTEPair", false]], "rtuple() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.rtuple", false]], "rude_chat() (in module nltk.chat.rude)": [[21, "nltk.chat.rude.rude_chat", false]], "rule (class in nltk.tbl.rule)": [[232, "nltk.tbl.rule.Rule", false]], "rule() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.rule", false]], "rule_based_demo() (in module nltk.parse.nonprojectivedependencyparser)": [[170, "nltk.parse.nonprojectivedependencyparser.rule_based_demo", false]], "rules() (nltk.chunk.regexp.regexpchunkparser method)": [[28, "nltk.chunk.regexp.RegexpChunkParser.rules", false]], "rules() (nltk.tag.brill.brilltagger method)": [[215, "nltk.tag.brill.BrillTagger.rules", false]], "run() (nltk.downloader.downloadershell method)": [[113, "nltk.downloader.DownloaderShell.run", false]], "run() (nltk.inference.api.theoremtoolthread method)": [[124, "nltk.inference.api.TheoremToolThread.run", false]], "run() (nltk.parse.util.testgrammar method)": [[177, "nltk.parse.util.TestGrammar.run", false]], "run_profile() (in module nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.run_profile", false]], "russianstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.RussianStemmer", false]], "s() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.S", false]], "s_retrieve() (nltk.sem.cooper_storage.cooperstore method)": [[183, "nltk.sem.cooper_storage.CooperStore.s_retrieve", false]], "safeappend() (nltk.sem.lfg.fstructure method)": [[189, "nltk.sem.lfg.FStructure.safeappend", false]], "sample() (nltk.translate.ibm5.ibmmodel5 method)": [[267, "nltk.translate.ibm5.IBMModel5.sample", false]], "sample() (nltk.translate.ibm_model.ibmmodel method)": [[268, "nltk.translate.ibm_model.IBMModel.sample", false]], "sample() (nltk.twitter.twitterclient.streamer method)": [[289, "nltk.twitter.twitterclient.Streamer.sample", false]], "samples() (nltk.probability.crossvalidationprobdist method)": [[179, "nltk.probability.CrossValidationProbDist.samples", false]], "samples() (nltk.probability.dictionaryprobdist method)": [[179, "nltk.probability.DictionaryProbDist.samples", false]], "samples() (nltk.probability.heldoutprobdist method)": [[179, "nltk.probability.HeldoutProbDist.samples", false]], "samples() (nltk.probability.kneserneyprobdist method)": [[179, "nltk.probability.KneserNeyProbDist.samples", false]], "samples() (nltk.probability.lidstoneprobdist method)": [[179, "nltk.probability.LidstoneProbDist.samples", false]], "samples() (nltk.probability.mleprobdist method)": [[179, "nltk.probability.MLEProbDist.samples", false]], "samples() (nltk.probability.mutableprobdist method)": [[179, "nltk.probability.MutableProbDist.samples", false]], "samples() (nltk.probability.probdisti method)": [[179, "nltk.probability.ProbDistI.samples", false]], "samples() (nltk.probability.simplegoodturingprobdist method)": [[179, "nltk.probability.SimpleGoodTuringProbDist.samples", false]], "samples() (nltk.probability.uniformprobdist method)": [[179, "nltk.probability.UniformProbDist.samples", false]], "samples() (nltk.probability.wittenbellprobdist method)": [[179, "nltk.probability.WittenBellProbDist.samples", false]], "sampletoscreen_demo() (in module nltk.twitter.twitter_demo)": [[288, "nltk.twitter.twitter_demo.sampletoscreen_demo", false]], "satdemo() (in module nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.satdemo", false]], "satisfiers() (nltk.sem.evaluate.model method)": [[186, "nltk.sem.evaluate.Model.satisfiers", false]], "satisfy() (nltk.sem.evaluate.model method)": [[186, "nltk.sem.evaluate.Model.satisfy", false]], "save() (nltk.tag.perceptron.averagedperceptron method)": [[221, "nltk.tag.perceptron.AveragedPerceptron.save", false]], "save_file() (nltk.sentiment.sentiment_analyzer.sentimentanalyzer method)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer.save_file", false]], "save_maxent_params() (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.save_maxent_params", false]], "save_params() (nltk.chunk.named_entity.maxent_ne_chunker method)": [[27, "nltk.chunk.named_entity.Maxent_NE_Chunker.save_params", false]], "save_params() (nltk.tokenize.punkt.punkttokenizer method)": [[243, "nltk.tokenize.punkt.PunktTokenizer.save_params", false]], "save_punkt_params() (in module nltk.tokenize.punkt)": [[243, "nltk.tokenize.punkt.save_punkt_params", false]], "save_to_json() (nltk.tag.perceptron.perceptrontagger method)": [[221, "nltk.tag.perceptron.PerceptronTagger.save_to_json", false]], "scalar_inc_dec() (nltk.sentiment.vader.vaderconstants method)": [[198, "nltk.sentiment.vader.VaderConstants.scalar_inc_dec", false]], "scan_dragto() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.scan_dragto", false]], "scan_mark() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.scan_mark", false]], "scannerrule (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.ScannerRule", false]], "score (nltk.translate.ibm_model.alignmentinfo attribute)": [[268, "nltk.translate.ibm_model.AlignmentInfo.score", false]], "score() (nltk.chunk.util.chunkscore method)": [[29, "nltk.chunk.util.ChunkScore.score", false]], "score() (nltk.lm.api.languagemodel method)": [[136, "nltk.lm.api.LanguageModel.score", false]], "score() (nltk.parse.nonprojectivedependencyparser.demoscorer method)": [[170, "nltk.parse.nonprojectivedependencyparser.DemoScorer.score", false]], "score() (nltk.parse.nonprojectivedependencyparser.dependencyscoreri method)": [[170, "nltk.parse.nonprojectivedependencyparser.DependencyScorerI.score", false]], "score() (nltk.parse.nonprojectivedependencyparser.naivebayesdependencyscorer method)": [[170, "nltk.parse.nonprojectivedependencyparser.NaiveBayesDependencyScorer.score", false]], "score_ngram() (nltk.collocations.bigramcollocationfinder method)": [[53, "nltk.collocations.BigramCollocationFinder.score_ngram", false]], "score_ngram() (nltk.collocations.quadgramcollocationfinder method)": [[53, "nltk.collocations.QuadgramCollocationFinder.score_ngram", false]], "score_ngram() (nltk.collocations.trigramcollocationfinder method)": [[53, "nltk.collocations.TrigramCollocationFinder.score_ngram", false]], "score_valence() (nltk.sentiment.vader.sentimentintensityanalyzer method)": [[198, "nltk.sentiment.vader.SentimentIntensityAnalyzer.score_valence", false]], "scored_synonyms() (nltk.corpus.reader.lin.linthesauruscorpusreader method)": [[77, "nltk.corpus.reader.lin.LinThesaurusCorpusReader.scored_synonyms", false]], "scored_synonyms() (nltk.corpus.reader.linthesauruscorpusreader method)": [[57, "nltk.corpus.reader.LinThesaurusCorpusReader.scored_synonyms", false]], "script (nltk.corpus.reader.panlex_swadesh.panlexlanguage attribute)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexLanguage.script", false]], "scrollregion() (nltk.draw.util.canvasframe method)": [[119, "nltk.draw.util.CanvasFrame.scrollregion", false]], "scrollwatcherwidget (class in nltk.draw.util)": [[119, "nltk.draw.util.ScrollWatcherWidget", false]], "search_demo() (in module nltk.twitter.twitter_demo)": [[288, "nltk.twitter.twitter_demo.search_demo", false]], "search_tweets() (nltk.twitter.twitterclient.query method)": [[289, "nltk.twitter.twitterclient.Query.search_tweets", false]], "second (nltk.sem.logic.anytype property)": [[191, "nltk.sem.logic.AnyType.second", false]], "section_reader() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.section_reader", false]], "sections() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.sections", false]], "see() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.see", false]], "seek() (nltk.data.seekableunicodestreamreader method)": [[111, "nltk.data.SeekableUnicodeStreamReader.seek", false]], "seekableunicodestreamreader (class in nltk.data)": [[111, "nltk.data.SeekableUnicodeStreamReader", false]], "segment() (nltk.stem.cistem.cistem method)": [[203, "nltk.stem.cistem.Cistem.segment", false]], "segment() (nltk.tokenize.stanford_segmenter.stanfordsegmenter method)": [[250, "nltk.tokenize.stanford_segmenter.StanfordSegmenter.segment", false]], "segment_file() (nltk.tokenize.stanford_segmenter.stanfordsegmenter method)": [[250, "nltk.tokenize.stanford_segmenter.StanfordSegmenter.segment_file", false]], "segment_sents() (nltk.tokenize.stanford_segmenter.stanfordsegmenter method)": [[250, "nltk.tokenize.stanford_segmenter.StanfordSegmenter.segment_sents", false]], "select() (nltk.corpus.reader.nombank.nombankchaintreepointer method)": [[81, "nltk.corpus.reader.nombank.NombankChainTreePointer.select", false]], "select() (nltk.corpus.reader.nombank.nombanksplittreepointer method)": [[81, "nltk.corpus.reader.nombank.NombankSplitTreePointer.select", false]], "select() (nltk.corpus.reader.nombank.nombanktreepointer method)": [[81, "nltk.corpus.reader.nombank.NombankTreePointer.select", false]], "select() (nltk.corpus.reader.propbank.propbankchaintreepointer method)": [[89, "nltk.corpus.reader.propbank.PropbankChainTreePointer.select", false]], "select() (nltk.corpus.reader.propbank.propbanksplittreepointer method)": [[89, "nltk.corpus.reader.propbank.PropbankSplitTreePointer.select", false]], "select() (nltk.corpus.reader.propbank.propbanktreepointer method)": [[89, "nltk.corpus.reader.propbank.PropbankTreePointer.select", false]], "select() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.select", false]], "select() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.select", false]], "select() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.select", false]], "select() (nltk.parse.earleychart.featureincrementalchart method)": [[165, "nltk.parse.earleychart.FeatureIncrementalChart.select", false]], "select() (nltk.parse.earleychart.incrementalchart method)": [[165, "nltk.parse.earleychart.IncrementalChart.select", false]], "select() (nltk.parse.featurechart.featurechart method)": [[167, "nltk.parse.featurechart.FeatureChart.select", false]], "select_anchor() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.select_anchor", false]], "select_clear() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.select_clear", false]], "select_includes() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.select_includes", false]], "select_set() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.select_set", false]], "selectdownloaddirmessage (class in nltk.downloader)": [[113, "nltk.downloader.SelectDownloadDirMessage", false]], "selected_row() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.selected_row", false]], "selection() (in module nltk.misc.sort)": [[157, "nltk.misc.sort.selection", false]], "selection_anchor() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.selection_anchor", false]], "selection_clear() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.selection_clear", false]], "selection_includes() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.selection_includes", false]], "selection_set() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.selection_set", false]], "semantics() (nltk.ccg.lexicon.token method)": [[16, "nltk.ccg.lexicon.Token.semantics", false]], "semcorcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.SemcorCorpusReader", false]], "semcorcorpusreader (class in nltk.corpus.reader.semcor)": [[93, "nltk.corpus.reader.semcor.SemcorCorpusReader", false]], "semcorsentence (class in nltk.corpus.reader.semcor)": [[93, "nltk.corpus.reader.semcor.SemcorSentence", false]], "semcorwordview (class in nltk.corpus.reader.semcor)": [[93, "nltk.corpus.reader.semcor.SemcorWordView", false]], "semi_rel2reldict() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.semi_rel2reldict", false]], "semtype() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.semtype", false]], "semtype() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.semtype", false]], "semtype_inherits() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.semtype_inherits", false]], "semtype_inherits() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.semtype_inherits", false]], "semtypes() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.semtypes", false]], "semtypes() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.semtypes", false]], "senna (class in nltk.classify.senna)": [[39, "nltk.classify.senna.Senna", false]], "sennachunktagger (class in nltk.tag.senna)": [[222, "nltk.tag.senna.SennaChunkTagger", false]], "sennanertagger (class in nltk.tag.senna)": [[222, "nltk.tag.senna.SennaNERTagger", false]], "sennatagger (class in nltk.tag.senna)": [[222, "nltk.tag.senna.SennaTagger", false]], "sensenumber (nltk.corpus.reader.nombank.nombankinstance attribute)": [[81, "nltk.corpus.reader.nombank.NombankInstance.sensenumber", false]], "sensenumber (nltk.corpus.reader.propbank.propbankinstance property)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.sensenumber", false]], "sensevalcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.SensevalCorpusReader", false]], "sensevalcorpusreader (class in nltk.corpus.reader.senseval)": [[94, "nltk.corpus.reader.senseval.SensevalCorpusReader", false]], "sensevalcorpusview (class in nltk.corpus.reader.senseval)": [[94, "nltk.corpus.reader.senseval.SensevalCorpusView", false]], "sensevalinstance (class in nltk.corpus.reader.senseval)": [[94, "nltk.corpus.reader.senseval.SensevalInstance", false]], "sent_end_chars (nltk.tokenize.punkt.punktlanguagevars attribute)": [[243, "nltk.tokenize.punkt.PunktLanguageVars.sent_end_chars", false]], "sent_path (nltk.corpus.reader.mte.mtefilereader attribute)": [[79, "nltk.corpus.reader.mte.MTEFileReader.sent_path", false]], "sent_starter (nltk.tokenize.punkt.punkttrainer attribute)": [[243, "nltk.tokenize.punkt.PunktTrainer.SENT_STARTER", false]], "sent_starters (nltk.tokenize.punkt.punktparameters attribute)": [[243, "nltk.tokenize.punkt.PunktParameters.sent_starters", false]], "sent_times() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.sent_times", false]], "sent_times() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.sent_times", false]], "sent_tokenize() (in module nltk.tokenize)": [[236, "nltk.tokenize.sent_tokenize", false]], "sentbreak (nltk.tokenize.punkt.punkttoken attribute)": [[243, "nltk.tokenize.punkt.PunktToken.sentbreak", false]], "sentence_bleu() (in module nltk.translate.bleu_score)": [[258, "nltk.translate.bleu_score.sentence_bleu", false]], "sentence_chrf() (in module nltk.translate.chrf_score)": [[259, "nltk.translate.chrf_score.sentence_chrf", false]], "sentence_gleu() (in module nltk.translate.gleu_score)": [[262, "nltk.translate.gleu_score.sentence_gleu", false]], "sentence_nist() (in module nltk.translate.nist_score)": [[271, "nltk.translate.nist_score.sentence_nist", false]], "sentence_ribes() (in module nltk.translate.ribes_score)": [[273, "nltk.translate.ribes_score.sentence_ribes", false]], "sentences() (nltk.inference.discourse.discoursetester method)": [[125, "nltk.inference.discourse.DiscourseTester.sentences", false]], "sentences_from_text() (nltk.tokenize.punkt.punktsentencetokenizer method)": [[243, "nltk.tokenize.punkt.PunktSentenceTokenizer.sentences_from_text", false]], "sentences_from_text_legacy() (nltk.tokenize.punkt.punktsentencetokenizer method)": [[243, "nltk.tokenize.punkt.PunktSentenceTokenizer.sentences_from_text_legacy", false]], "sentences_from_tokens() (nltk.tokenize.punkt.punktsentencetokenizer method)": [[243, "nltk.tokenize.punkt.PunktSentenceTokenizer.sentences_from_tokens", false]], "senti_synset() (nltk.corpus.reader.sentiwordnet.sentiwordnetcorpusreader method)": [[95, "nltk.corpus.reader.sentiwordnet.SentiWordNetCorpusReader.senti_synset", false]], "senti_synset() (nltk.corpus.reader.sentiwordnetcorpusreader method)": [[57, "nltk.corpus.reader.SentiWordNetCorpusReader.senti_synset", false]], "senti_synsets() (nltk.corpus.reader.sentiwordnet.sentiwordnetcorpusreader method)": [[95, "nltk.corpus.reader.sentiwordnet.SentiWordNetCorpusReader.senti_synsets", false]], "senti_synsets() (nltk.corpus.reader.sentiwordnetcorpusreader method)": [[57, "nltk.corpus.reader.SentiWordNetCorpusReader.senti_synsets", false]], "sentid() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.sentid", false]], "sentid() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.sentid", false]], "sentiment_valence() (nltk.sentiment.vader.sentimentintensityanalyzer method)": [[198, "nltk.sentiment.vader.SentimentIntensityAnalyzer.sentiment_valence", false]], "sentimentanalyzer (class in nltk.sentiment.sentiment_analyzer)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer", false]], "sentimentintensityanalyzer (class in nltk.sentiment.vader)": [[198, "nltk.sentiment.vader.SentimentIntensityAnalyzer", false]], "sentisynset (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.SentiSynset", false]], "sentisynset (class in nltk.corpus.reader.sentiwordnet)": [[95, "nltk.corpus.reader.sentiwordnet.SentiSynset", false]], "sentitext (class in nltk.sentiment.vader)": [[198, "nltk.sentiment.vader.SentiText", false]], "sentiwordnetcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.SentiWordNetCorpusReader", false]], "sentiwordnetcorpusreader (class in nltk.corpus.reader.sentiwordnet)": [[95, "nltk.corpus.reader.sentiwordnet.SentiWordNetCorpusReader", false]], "sentnum (nltk.corpus.reader.nombank.nombankinstance attribute)": [[81, "nltk.corpus.reader.nombank.NombankInstance.sentnum", false]], "sentnum (nltk.corpus.reader.propbank.propbankinstance attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.sentnum", false]], "sents (nltk.corpus.reader.markdown.codeblock property)": [[78, "nltk.corpus.reader.markdown.CodeBlock.sents", false]], "sents (nltk.corpus.reader.markdown.markdownblock property)": [[78, "nltk.corpus.reader.markdown.MarkdownBlock.sents", false]], "sents() (in module nltk.book)": [[11, "nltk.book.sents", false]], "sents() (nltk.corpus.reader.aligned.alignedcorpusreader method)": [[58, "nltk.corpus.reader.aligned.AlignedCorpusReader.sents", false]], "sents() (nltk.corpus.reader.alignedcorpusreader method)": [[57, "nltk.corpus.reader.AlignedCorpusReader.sents", false]], "sents() (nltk.corpus.reader.api.categorizedcorpusreader method)": [[59, "nltk.corpus.reader.api.CategorizedCorpusReader.sents", false]], "sents() (nltk.corpus.reader.api.syntaxcorpusreader method)": [[59, "nltk.corpus.reader.api.SyntaxCorpusReader.sents", false]], "sents() (nltk.corpus.reader.bnc.bnccorpusreader method)": [[61, "nltk.corpus.reader.bnc.BNCCorpusReader.sents", false]], "sents() (nltk.corpus.reader.bnccorpusreader method)": [[57, "nltk.corpus.reader.BNCCorpusReader.sents", false]], "sents() (nltk.corpus.reader.categorized_sents.categorizedsentencescorpusreader method)": [[63, "nltk.corpus.reader.categorized_sents.CategorizedSentencesCorpusReader.sents", false]], "sents() (nltk.corpus.reader.categorizedcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedCorpusReader.sents", false]], "sents() (nltk.corpus.reader.categorizedsentencescorpusreader method)": [[57, "nltk.corpus.reader.CategorizedSentencesCorpusReader.sents", false]], "sents() (nltk.corpus.reader.chasen.chasencorpusreader method)": [[64, "nltk.corpus.reader.chasen.ChasenCorpusReader.sents", false]], "sents() (nltk.corpus.reader.chasencorpusreader method)": [[57, "nltk.corpus.reader.ChasenCorpusReader.sents", false]], "sents() (nltk.corpus.reader.childes.childescorpusreader method)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.sents", false]], "sents() (nltk.corpus.reader.childescorpusreader method)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.sents", false]], "sents() (nltk.corpus.reader.chunked.chunkedcorpusreader method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusReader.sents", false]], "sents() (nltk.corpus.reader.chunkedcorpusreader method)": [[57, "nltk.corpus.reader.ChunkedCorpusReader.sents", false]], "sents() (nltk.corpus.reader.comparative_sents.comparativesentencescorpusreader method)": [[68, "nltk.corpus.reader.comparative_sents.ComparativeSentencesCorpusReader.sents", false]], "sents() (nltk.corpus.reader.comparativesentencescorpusreader method)": [[57, "nltk.corpus.reader.ComparativeSentencesCorpusReader.sents", false]], "sents() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.sents", false]], "sents() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.sents", false]], "sents() (nltk.corpus.reader.dependency.dependencycorpusreader method)": [[71, "nltk.corpus.reader.dependency.DependencyCorpusReader.sents", false]], "sents() (nltk.corpus.reader.dependencycorpusreader method)": [[57, "nltk.corpus.reader.DependencyCorpusReader.sents", false]], "sents() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.sents", false]], "sents() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.sents", false]], "sents() (nltk.corpus.reader.indian.indiancorpusreader method)": [[74, "nltk.corpus.reader.indian.IndianCorpusReader.sents", false]], "sents() (nltk.corpus.reader.indiancorpusreader method)": [[57, "nltk.corpus.reader.IndianCorpusReader.sents", false]], "sents() (nltk.corpus.reader.ipipan.ipipancorpusreader method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader.sents", false]], "sents() (nltk.corpus.reader.ipipancorpusreader method)": [[57, "nltk.corpus.reader.IPIPANCorpusReader.sents", false]], "sents() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.sents", false]], "sents() (nltk.corpus.reader.mte.mtecorpusreader method)": [[79, "nltk.corpus.reader.mte.MTECorpusReader.sents", false]], "sents() (nltk.corpus.reader.mte.mtefilereader method)": [[79, "nltk.corpus.reader.mte.MTEFileReader.sents", false]], "sents() (nltk.corpus.reader.mtecorpusreader method)": [[57, "nltk.corpus.reader.MTECorpusReader.sents", false]], "sents() (nltk.corpus.reader.nkjp.nkjpcorpusreader method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.sents", false]], "sents() (nltk.corpus.reader.nkjpcorpusreader method)": [[57, "nltk.corpus.reader.NKJPCorpusReader.sents", false]], "sents() (nltk.corpus.reader.pl196x.pl196xcorpusreader method)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader.sents", false]], "sents() (nltk.corpus.reader.pl196xcorpusreader method)": [[57, "nltk.corpus.reader.Pl196xCorpusReader.sents", false]], "sents() (nltk.corpus.reader.plaintext.plaintextcorpusreader method)": [[87, "nltk.corpus.reader.plaintext.PlaintextCorpusReader.sents", false]], "sents() (nltk.corpus.reader.plaintextcorpusreader method)": [[57, "nltk.corpus.reader.PlaintextCorpusReader.sents", false]], "sents() (nltk.corpus.reader.pros_cons.prosconscorpusreader method)": [[90, "nltk.corpus.reader.pros_cons.ProsConsCorpusReader.sents", false]], "sents() (nltk.corpus.reader.prosconscorpusreader method)": [[57, "nltk.corpus.reader.ProsConsCorpusReader.sents", false]], "sents() (nltk.corpus.reader.reviews.review method)": [[91, "nltk.corpus.reader.reviews.Review.sents", false]], "sents() (nltk.corpus.reader.reviews.reviewscorpusreader method)": [[91, "nltk.corpus.reader.reviews.ReviewsCorpusReader.sents", false]], "sents() (nltk.corpus.reader.reviewscorpusreader method)": [[57, "nltk.corpus.reader.ReviewsCorpusReader.sents", false]], "sents() (nltk.corpus.reader.semcor.semcorcorpusreader method)": [[93, "nltk.corpus.reader.semcor.SemcorCorpusReader.sents", false]], "sents() (nltk.corpus.reader.semcorcorpusreader method)": [[57, "nltk.corpus.reader.SemcorCorpusReader.sents", false]], "sents() (nltk.corpus.reader.syntaxcorpusreader method)": [[57, "nltk.corpus.reader.SyntaxCorpusReader.sents", false]], "sents() (nltk.corpus.reader.tagged.taggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.TaggedCorpusReader.sents", false]], "sents() (nltk.corpus.reader.taggedcorpusreader method)": [[57, "nltk.corpus.reader.TaggedCorpusReader.sents", false]], "sents() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.sents", false]], "sents() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.sents", false]], "sents() (nltk.corpus.reader.ycoe.ycoecorpusreader method)": [[109, "nltk.corpus.reader.ycoe.YCOECorpusReader.sents", false]], "sents() (nltk.corpus.reader.ycoecorpusreader method)": [[57, "nltk.corpus.reader.YCOECorpusReader.sents", false]], "sents_mode (nltk.corpus.reader.ipipan.ipipancorpusview attribute)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusView.SENTS_MODE", false]], "sents_mode (nltk.corpus.reader.nkjp.nkjpcorpus_text_view attribute)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Text_View.SENTS_MODE", false]], "sents_mode (nltk.corpus.reader.nkjp.nkjpcorpusreader attribute)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.SENTS_MODE", false]], "sents_mode (nltk.corpus.reader.nkjpcorpusreader attribute)": [[57, "nltk.corpus.reader.NKJPCorpusReader.SENTS_MODE", false]], "sequencewidget (class in nltk.draw.util)": [[119, "nltk.draw.util.SequenceWidget", false]], "sequentialbackofftagger (class in nltk.tag.sequential)": [[223, "nltk.tag.sequential.SequentialBackoffTagger", false]], "set() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.set", false]], "set() (nltk.draw.util.mutableoptionmenu method)": [[119, "nltk.draw.util.MutableOptionMenu.set", false]], "set2rel() (in module nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.set2rel", false]], "set2txt() (nltk.tabdata.tabencoder method)": [[212, "nltk.tabdata.TabEncoder.set2txt", false]], "set_bin_dir() (nltk.sem.boxer.boxer method)": [[181, "nltk.sem.boxer.Boxer.set_bin_dir", false]], "set_chart() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.set_chart", false]], "set_child() (nltk.draw.util.abstractcontainerwidget method)": [[119, "nltk.draw.util.AbstractContainerWidget.set_child", false]], "set_discount() (nltk.probability.kneserneyprobdist method)": [[179, "nltk.probability.KneserNeyProbDist.set_discount", false]], "set_grammar() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.set_grammar", false]], "set_grammar() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.set_grammar", false]], "set_grammar() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.set_grammar", false]], "set_height() (nltk.draw.util.spacewidget method)": [[119, "nltk.draw.util.SpaceWidget.set_height", false]], "set_label() (nltk.draw.tree.treesegmentwidget method)": [[118, "nltk.draw.tree.TreeSegmentWidget.set_label", false]], "set_label() (nltk.tree.immutable.immutabletree method)": [[276, "nltk.tree.immutable.ImmutableTree.set_label", false]], "set_label() (nltk.tree.immutabletree method)": [[275, "nltk.tree.ImmutableTree.set_label", false]], "set_label() (nltk.tree.tree method)": [[275, "nltk.tree.Tree.set_label", false]], "set_label() (nltk.tree.tree.tree method)": [[282, "nltk.tree.tree.Tree.set_label", false]], "set_logprob() (nltk.probability.immutableprobabilisticmixin method)": [[179, "nltk.probability.ImmutableProbabilisticMixIn.set_logprob", false]], "set_logprob() (nltk.probability.probabilisticmixin method)": [[179, "nltk.probability.ProbabilisticMixIn.set_logprob", false]], "set_model_file() (nltk.tag.crf.crftagger method)": [[217, "nltk.tag.crf.CRFTagger.set_model_file", false]], "set_prob() (nltk.probability.immutableprobabilisticmixin method)": [[179, "nltk.probability.ImmutableProbabilisticMixIn.set_prob", false]], "set_prob() (nltk.probability.probabilisticmixin method)": [[179, "nltk.probability.ProbabilisticMixIn.set_prob", false]], "set_proxy() (in module nltk.util)": [[291, "nltk.util.set_proxy", false]], "set_strategy() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.set_strategy", false]], "set_symbol() (nltk.draw.util.symbolwidget method)": [[119, "nltk.draw.util.SymbolWidget.set_symbol", false]], "set_text() (nltk.draw.util.textwidget method)": [[119, "nltk.draw.util.TextWidget.set_text", false]], "set_uniform_probabilities() (nltk.translate.ibm1.ibmmodel1 method)": [[263, "nltk.translate.ibm1.IBMModel1.set_uniform_probabilities", false]], "set_uniform_probabilities() (nltk.translate.ibm2.ibmmodel2 method)": [[264, "nltk.translate.ibm2.IBMModel2.set_uniform_probabilities", false]], "set_uniform_probabilities() (nltk.translate.ibm3.ibmmodel3 method)": [[265, "nltk.translate.ibm3.IBMModel3.set_uniform_probabilities", false]], "set_uniform_probabilities() (nltk.translate.ibm4.ibmmodel4 method)": [[266, "nltk.translate.ibm4.IBMModel4.set_uniform_probabilities", false]], "set_uniform_probabilities() (nltk.translate.ibm5.ibmmodel5 method)": [[267, "nltk.translate.ibm5.IBMModel5.set_uniform_probabilities", false]], "set_uniform_probabilities() (nltk.translate.ibm_model.ibmmodel method)": [[268, "nltk.translate.ibm_model.IBMModel.set_uniform_probabilities", false]], "set_weights() (nltk.classify.maxent.maxentclassifier method)": [[33, "nltk.classify.maxent.MaxentClassifier.set_weights", false]], "set_width() (nltk.draw.util.spacewidget method)": [[119, "nltk.draw.util.SpaceWidget.set_width", false]], "setdefault() (nltk.collections.ordereddict method)": [[52, "nltk.collections.OrderedDict.setdefault", false]], "setdefault() (nltk.featstruct.featdict method)": [[120, "nltk.featstruct.FeatDict.setdefault", false]], "setdefault() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.setdefault", false]], "setholder (class in nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.SetHolder", false]], "setup() (in module nltk.twitter.twitter_demo)": [[288, "nltk.twitter.twitter_demo.setup", false]], "sexpr_tokenize() (in module nltk.tokenize.sexpr)": [[246, "nltk.tokenize.sexpr.sexpr_tokenize", false]], "sexprtokenizer (class in nltk.tokenize.sexpr)": [[246, "nltk.tokenize.sexpr.SExprTokenizer", false]], "shape() (in module nltk.chunk.named_entity)": [[27, "nltk.chunk.named_entity.shape", false]], "shift (nltk.parse.transitionparser.transition attribute)": [[176, "nltk.parse.transitionparser.Transition.SHIFT", false]], "shift() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.shift", false]], "shift() (nltk.parse.transitionparser.transition method)": [[176, "nltk.parse.transitionparser.Transition.shift", false]], "shiftreduceparser (class in nltk.parse.shiftreduce)": [[174, "nltk.parse.shiftreduce.ShiftReduceParser", false]], "shortest_path_distance() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.shortest_path_distance", false]], "shortid() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.shortid", false]], "shortid() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.shortid", false]], "show() (nltk.cluster.util.dendrogram method)": [[51, "nltk.cluster.util.Dendrogram.show", false]], "show() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.show", false]], "show_cfg() (in module nltk.data)": [[111, "nltk.data.show_cfg", false]], "show_column() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.show_column", false]], "show_column() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.show_column", false]], "show_most_informative_features() (nltk.classify.maxent.maxentclassifier method)": [[33, "nltk.classify.maxent.MaxentClassifier.show_most_informative_features", false]], "show_most_informative_features() (nltk.classify.naivebayes.naivebayesclassifier method)": [[35, "nltk.classify.naivebayes.NaiveBayesClassifier.show_most_informative_features", false]], "showtext (class in nltk.draw.util)": [[119, "nltk.draw.util.ShowText", false]], "sigma_exp() (in module nltk.metrics.aline)": [[145, "nltk.metrics.aline.sigma_exp", false]], "sigma_skip() (in module nltk.metrics.aline)": [[145, "nltk.metrics.aline.sigma_skip", false]], "sigma_sub() (in module nltk.metrics.aline)": [[145, "nltk.metrics.aline.sigma_sub", false]], "similar() (nltk.text.text method)": [[234, "nltk.text.Text.similar", false]], "similar_words() (nltk.text.contextindex method)": [[234, "nltk.text.ContextIndex.similar_words", false]], "similarity() (nltk.corpus.reader.lin.linthesauruscorpusreader method)": [[77, "nltk.corpus.reader.lin.LinThesaurusCorpusReader.similarity", false]], "similarity() (nltk.corpus.reader.linthesauruscorpusreader method)": [[57, "nltk.corpus.reader.LinThesaurusCorpusReader.similarity", false]], "simplegoodturingprobdist (class in nltk.probability)": [[179, "nltk.probability.SimpleGoodTuringProbDist", false]], "simplify() (nltk.sem.drt.drtconcatenation method)": [[184, "nltk.sem.drt.DrtConcatenation.simplify", false]], "simplify() (nltk.sem.glue.glueformula method)": [[187, "nltk.sem.glue.GlueFormula.simplify", false]], "simplify() (nltk.sem.linearlogic.applicationexpression method)": [[190, "nltk.sem.linearlogic.ApplicationExpression.simplify", false]], "simplify() (nltk.sem.linearlogic.atomicexpression method)": [[190, "nltk.sem.linearlogic.AtomicExpression.simplify", false]], "simplify() (nltk.sem.linearlogic.impexpression method)": [[190, "nltk.sem.linearlogic.ImpExpression.simplify", false]], "simplify() (nltk.sem.logic.abstractvariableexpression method)": [[191, "nltk.sem.logic.AbstractVariableExpression.simplify", false]], "simplify() (nltk.sem.logic.applicationexpression method)": [[191, "nltk.sem.logic.ApplicationExpression.simplify", false]], "simplify() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.simplify", false]], "simplify_pos() (in module nltk.chunk.named_entity)": [[27, "nltk.chunk.named_entity.simplify_pos", false]], "single_meteor_score() (in module nltk.translate.meteor_score)": [[269, "nltk.translate.meteor_score.single_meteor_score", false]], "singleedgefundamentalrule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.SingleEdgeFundamentalRule", false]], "singleedgeprobabilisticfundamentalrule (class in nltk.parse.pchart)": [[171, "nltk.parse.pchart.SingleEdgeProbabilisticFundamentalRule", false]], "sinica_parse() (in module nltk.tree)": [[275, "nltk.tree.sinica_parse", false]], "sinica_parse() (in module nltk.tree.parsing)": [[278, "nltk.tree.parsing.sinica_parse", false]], "sinicatreebankcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.SinicaTreebankCorpusReader", false]], "sinicatreebankcorpusreader (class in nltk.corpus.reader.sinica_treebank)": [[96, "nltk.corpus.reader.sinica_treebank.SinicaTreebankCorpusReader", false]], "size (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.size", false]], "size() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.size", false]], "size() (nltk.tag.sequential.contexttagger method)": [[223, "nltk.tag.sequential.ContextTagger.size", false]], "skip (nltk.corpus.reader.udhr.udhrcorpusreader attribute)": [[103, "nltk.corpus.reader.udhr.UdhrCorpusReader.SKIP", false]], "skip (nltk.corpus.reader.udhrcorpusreader attribute)": [[57, "nltk.corpus.reader.UdhrCorpusReader.SKIP", false]], "skipgrams() (in module nltk.util)": [[291, "nltk.util.skipgrams", false]], "sklearnclassifier (class in nltk.classify.scikitlearn)": [[38, "nltk.classify.scikitlearn.SklearnClassifier", false]], "skolem_function() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.skolem_function", false]], "skolemize() (in module nltk.sem.skolemize)": [[193, "nltk.sem.skolemize.skolemize", false]], "slashfeature (class in nltk.featstruct)": [[120, "nltk.featstruct.SlashFeature", false]], "slice_bounds() (in module nltk.internals)": [[131, "nltk.internals.slice_bounds", false]], "slots (class in nltk.translate.ibm5)": [[267, "nltk.translate.ibm5.Slots", false]], "smooth() (in module nltk.tokenize.texttiling)": [[251, "nltk.tokenize.texttiling.smooth", false]], "smoothednr() (nltk.probability.simplegoodturingprobdist method)": [[179, "nltk.probability.SimpleGoodTuringProbDist.smoothedNr", false]], "smoothing (class in nltk.lm.api)": [[136, "nltk.lm.api.Smoothing", false]], "smoothingfunction (class in nltk.translate.bleu_score)": [[258, "nltk.translate.bleu_score.SmoothingFunction", false]], "snowballstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.SnowballStemmer", false]], "sort() (nltk.featstruct.featlist method)": [[120, "nltk.featstruct.FeatList.sort", false]], "sort() (nltk.tree.immutable.immutabletree method)": [[276, "nltk.tree.immutable.ImmutableTree.sort", false]], "sort() (nltk.tree.immutabletree method)": [[275, "nltk.tree.ImmutableTree.sort", false]], "sort_by() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.sort_by", false]], "sort_fields() (in module nltk.toolbox)": [[255, "nltk.toolbox.sort_fields", false]], "sort_queue() (nltk.parse.pchart.bottomupprobabilisticchartparser method)": [[171, "nltk.parse.pchart.BottomUpProbabilisticChartParser.sort_queue", false]], "sort_queue() (nltk.parse.pchart.insidechartparser method)": [[171, "nltk.parse.pchart.InsideChartParser.sort_queue", false]], "sort_queue() (nltk.parse.pchart.longestchartparser method)": [[171, "nltk.parse.pchart.LongestChartParser.sort_queue", false]], "sort_queue() (nltk.parse.pchart.randomchartparser method)": [[171, "nltk.parse.pchart.RandomChartParser.sort_queue", false]], "sort_queue() (nltk.parse.pchart.unsortedchartparser method)": [[171, "nltk.parse.pchart.UnsortedChartParser.sort_queue", false]], "source() (nltk.corpus.reader.panlex_lite.meaning method)": [[84, "nltk.corpus.reader.panlex_lite.Meaning.source", false]], "source_group() (nltk.corpus.reader.panlex_lite.meaning method)": [[84, "nltk.corpus.reader.panlex_lite.Meaning.source_group", false]], "spacer() (in module nltk.inference.discourse)": [[125, "nltk.inference.discourse.spacer", false]], "spacer() (in module nltk.inference.mace)": [[126, "nltk.inference.mace.spacer", false]], "spacer() (in module nltk.inference.prover9)": [[128, "nltk.inference.prover9.spacer", false]], "spacetokenizer (class in nltk.tokenize.simple)": [[247, "nltk.tokenize.simple.SpaceTokenizer", false]], "spacewidget (class in nltk.draw.util)": [[119, "nltk.draw.util.SpaceWidget", false]], "span() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.span", false]], "span() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.span", false]], "span() (nltk.parse.chart.edgei method)": [[162, "nltk.parse.chart.EdgeI.span", false]], "span() (nltk.parse.chart.leafedge method)": [[162, "nltk.parse.chart.LeafEdge.span", false]], "span() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.span", false]], "span_tokenize() (nltk.tokenize.api.stringtokenizer method)": [[237, "nltk.tokenize.api.StringTokenizer.span_tokenize", false]], "span_tokenize() (nltk.tokenize.api.tokenizeri method)": [[237, "nltk.tokenize.api.TokenizerI.span_tokenize", false]], "span_tokenize() (nltk.tokenize.destructive.nltkwordtokenizer method)": [[239, "nltk.tokenize.destructive.NLTKWordTokenizer.span_tokenize", false]], "span_tokenize() (nltk.tokenize.punkt.punktsentencetokenizer method)": [[243, "nltk.tokenize.punkt.PunktSentenceTokenizer.span_tokenize", false]], "span_tokenize() (nltk.tokenize.regexp.regexptokenizer method)": [[244, "nltk.tokenize.regexp.RegexpTokenizer.span_tokenize", false]], "span_tokenize() (nltk.tokenize.simple.chartokenizer method)": [[247, "nltk.tokenize.simple.CharTokenizer.span_tokenize", false]], "span_tokenize() (nltk.tokenize.simple.linetokenizer method)": [[247, "nltk.tokenize.simple.LineTokenizer.span_tokenize", false]], "span_tokenize() (nltk.tokenize.treebank.treebankwordtokenizer method)": [[253, "nltk.tokenize.treebank.TreebankWordTokenizer.span_tokenize", false]], "span_tokenize_sents() (nltk.tokenize.api.tokenizeri method)": [[237, "nltk.tokenize.api.TokenizerI.span_tokenize_sents", false]], "spanishstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.SpanishStemmer", false]], "spans_to_relative() (in module nltk.tokenize.util)": [[254, "nltk.tokenize.util.spans_to_relative", false]], "speakerinfo (class in nltk.corpus.reader.timit)": [[100, "nltk.corpus.reader.timit.SpeakerInfo", false]], "spearman_correlation() (in module nltk.metrics.spearman)": [[152, "nltk.metrics.spearman.spearman_correlation", false]], "spearman_rho() (in module nltk.translate.ribes_score)": [[273, "nltk.translate.ribes_score.spearman_rho", false]], "special_case_idioms (nltk.sentiment.vader.vaderconstants attribute)": [[198, "nltk.sentiment.vader.VaderConstants.SPECIAL_CASE_IDIOMS", false]], "speciallist (class in nltk.corpus.reader.framenet)": [[72, "nltk.corpus.reader.framenet.SpecialList", false]], "spkrid() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.spkrid", false]], "spkrid() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.spkrid", false]], "spkrinfo() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.spkrinfo", false]], "spkrinfo() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.spkrinfo", false]], "spkrutteranceids() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.spkrutteranceids", false]], "spkrutteranceids() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.spkrutteranceids", false]], "split_at() (in module nltk.translate.gale_church)": [[260, "nltk.translate.gale_church.split_at", false]], "split_synsets() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.split_synsets", false]], "split_synsets() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.split_synsets", false]], "split_train_test() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.split_train_test", false]], "splitrule (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.SplitRule", false]], "sql_demo() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.sql_demo", false]], "sql_query() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.sql_query", false]], "src (nltk.corpus.reader.markdown.image attribute)": [[78, "nltk.corpus.reader.markdown.Image.src", false]], "src_sentence (nltk.translate.ibm_model.alignmentinfo attribute)": [[268, "nltk.translate.ibm_model.AlignmentInfo.src_sentence", false]], "srl (nltk.corpus.reader.conll.conllcorpusreader attribute)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.SRL", false]], "srl (nltk.corpus.reader.conllcorpusreader attribute)": [[57, "nltk.corpus.reader.ConllCorpusReader.SRL", false]], "srl_instances() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.srl_instances", false]], "srl_instances() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.srl_instances", false]], "srl_spans() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.srl_spans", false]], "srl_spans() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.srl_spans", false]], "ss2of() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.ss2of", false]], "ss2of() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.ss2of", false]], "stack() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.stack", false]], "stack_size (nltk.translate.stack_decoder.stackdecoder attribute)": [[274, "nltk.translate.stack_decoder.StackDecoder.stack_size", false]], "stackdecoder (class in nltk.translate.stack_decoder)": [[274, "nltk.translate.stack_decoder.StackDecoder", false]], "stackwidget (class in nltk.draw.util)": [[119, "nltk.draw.util.StackWidget", false]], "stale (nltk.downloader.downloader attribute)": [[113, "nltk.downloader.Downloader.STALE", false]], "stalemessage (class in nltk.downloader)": [[113, "nltk.downloader.StaleMessage", false]], "standardformat (class in nltk.toolbox)": [[255, "nltk.toolbox.StandardFormat", false]], "stanforddependencyparser (class in nltk.parse.stanford)": [[175, "nltk.parse.stanford.StanfordDependencyParser", false]], "stanfordnertagger (class in nltk.tag.stanford)": [[224, "nltk.tag.stanford.StanfordNERTagger", false]], "stanfordneuraldependencyparser (class in nltk.parse.stanford)": [[175, "nltk.parse.stanford.StanfordNeuralDependencyParser", false]], "stanfordparser (class in nltk.parse.stanford)": [[175, "nltk.parse.stanford.StanfordParser", false]], "stanfordpostagger (class in nltk.tag.stanford)": [[224, "nltk.tag.stanford.StanfordPOSTagger", false]], "stanfordsegmenter (class in nltk.tokenize.stanford_segmenter)": [[250, "nltk.tokenize.stanford_segmenter.StanfordSegmenter", false]], "stanfordtagger (class in nltk.tag.stanford)": [[224, "nltk.tag.stanford.StanfordTagger", false]], "stanfordtokenizer (class in nltk.tokenize.stanford)": [[249, "nltk.tokenize.stanford.StanfordTokenizer", false]], "start (nltk.tag.perceptron.perceptrontagger attribute)": [[221, "nltk.tag.perceptron.PerceptronTagger.START", false]], "start() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.start", false]], "start() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.start", false]], "start() (nltk.ccg.lexicon.ccglexicon method)": [[16, "nltk.ccg.lexicon.CCGLexicon.start", false]], "start() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.start", false]], "start() (nltk.parse.chart.edgei method)": [[162, "nltk.parse.chart.EdgeI.start", false]], "start() (nltk.parse.chart.leafedge method)": [[162, "nltk.parse.chart.LeafEdge.start", false]], "start() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.start", false]], "start() (nltk.parse.corenlp.corenlpserver method)": [[163, "nltk.parse.corenlp.CoreNLPServer.start", false]], "startcollectionmessage (class in nltk.downloader)": [[113, "nltk.downloader.StartCollectionMessage", false]], "startdownloadmessage (class in nltk.downloader)": [[113, "nltk.downloader.StartDownloadMessage", false]], "starting_quotes (nltk.tokenize.destructive.nltkwordtokenizer attribute)": [[239, "nltk.tokenize.destructive.NLTKWordTokenizer.STARTING_QUOTES", false]], "starting_quotes (nltk.tokenize.treebank.treebankworddetokenizer attribute)": [[253, "nltk.tokenize.treebank.TreebankWordDetokenizer.STARTING_QUOTES", false]], "starting_quotes (nltk.tokenize.treebank.treebankwordtokenizer attribute)": [[253, "nltk.tokenize.treebank.TreebankWordTokenizer.STARTING_QUOTES", false]], "startpackagemessage (class in nltk.downloader)": [[113, "nltk.downloader.StartPackageMessage", false]], "startunzipmessage (class in nltk.downloader)": [[113, "nltk.downloader.StartUnzipMessage", false]], "status() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.status", false]], "stdoffset (nltk.twitter.api.localtimezoneoffsetwithutc attribute)": [[286, "nltk.twitter.api.LocalTimezoneOffsetWithUTC.STDOFFSET", false]], "stem() (nltk.stem.api.stemmeri method)": [[200, "nltk.stem.api.StemmerI.stem", false]], "stem() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.stem", false]], "stem() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.stem", false]], "stem() (nltk.stem.cistem.cistem method)": [[203, "nltk.stem.cistem.Cistem.stem", false]], "stem() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.stem", false]], "stem() (nltk.stem.lancaster.lancasterstemmer method)": [[205, "nltk.stem.lancaster.LancasterStemmer.stem", false]], "stem() (nltk.stem.porter.porterstemmer method)": [[206, "nltk.stem.porter.PorterStemmer.stem", false]], "stem() (nltk.stem.regexp.regexpstemmer method)": [[207, "nltk.stem.regexp.RegexpStemmer.stem", false]], "stem() (nltk.stem.rslp.rslpstemmer method)": [[208, "nltk.stem.rslp.RSLPStemmer.stem", false]], "stem() (nltk.stem.snowball.arabicstemmer method)": [[209, "nltk.stem.snowball.ArabicStemmer.stem", false]], "stem() (nltk.stem.snowball.danishstemmer method)": [[209, "nltk.stem.snowball.DanishStemmer.stem", false]], "stem() (nltk.stem.snowball.dutchstemmer method)": [[209, "nltk.stem.snowball.DutchStemmer.stem", false]], "stem() (nltk.stem.snowball.englishstemmer method)": [[209, "nltk.stem.snowball.EnglishStemmer.stem", false]], "stem() (nltk.stem.snowball.finnishstemmer method)": [[209, "nltk.stem.snowball.FinnishStemmer.stem", false]], "stem() (nltk.stem.snowball.frenchstemmer method)": [[209, "nltk.stem.snowball.FrenchStemmer.stem", false]], "stem() (nltk.stem.snowball.germanstemmer method)": [[209, "nltk.stem.snowball.GermanStemmer.stem", false]], "stem() (nltk.stem.snowball.hungarianstemmer method)": [[209, "nltk.stem.snowball.HungarianStemmer.stem", false]], "stem() (nltk.stem.snowball.italianstemmer method)": [[209, "nltk.stem.snowball.ItalianStemmer.stem", false]], "stem() (nltk.stem.snowball.norwegianstemmer method)": [[209, "nltk.stem.snowball.NorwegianStemmer.stem", false]], "stem() (nltk.stem.snowball.portuguesestemmer method)": [[209, "nltk.stem.snowball.PortugueseStemmer.stem", false]], "stem() (nltk.stem.snowball.romanianstemmer method)": [[209, "nltk.stem.snowball.RomanianStemmer.stem", false]], "stem() (nltk.stem.snowball.russianstemmer method)": [[209, "nltk.stem.snowball.RussianStemmer.stem", false]], "stem() (nltk.stem.snowball.snowballstemmer method)": [[209, "nltk.stem.snowball.SnowballStemmer.stem", false]], "stem() (nltk.stem.snowball.spanishstemmer method)": [[209, "nltk.stem.snowball.SpanishStemmer.stem", false]], "stem() (nltk.stem.snowball.swedishstemmer method)": [[209, "nltk.stem.snowball.SwedishStemmer.stem", false]], "stem1() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.stem1", false]], "stem_match() (in module nltk.translate.meteor_score)": [[269, "nltk.translate.meteor_score.stem_match", false]], "stemmeri (class in nltk.stem.api)": [[200, "nltk.stem.api.StemmerI", false]], "step() (in module nltk.misc.wordfinder)": [[158, "nltk.misc.wordfinder.step", false]], "step() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.step", false]], "step() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.step", false]], "step() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.step", false]], "steppingchartparser (class in nltk.parse.chart)": [[162, "nltk.parse.chart.SteppingChartParser", false]], "steppingrecursivedescentparser (class in nltk.parse.recursivedescent)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser", false]], "steppingshiftreduceparser (class in nltk.parse.shiftreduce)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser", false]], "stop() (nltk.parse.corenlp.corenlpserver method)": [[163, "nltk.parse.corenlp.CoreNLPServer.stop", false]], "str() (nltk.sem.logic.anytype method)": [[191, "nltk.sem.logic.AnyType.str", false]], "str() (nltk.sem.logic.complextype method)": [[191, "nltk.sem.logic.ComplexType.str", false]], "str() (nltk.sem.logic.entitytype method)": [[191, "nltk.sem.logic.EntityType.str", false]], "str() (nltk.sem.logic.eventtype method)": [[191, "nltk.sem.logic.EventType.str", false]], "str() (nltk.sem.logic.truthvaluetype method)": [[191, "nltk.sem.logic.TruthValueType.str", false]], "str2tuple() (in module nltk.tag.util)": [[226, "nltk.tag.util.str2tuple", false]], "strategy() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.strategy", false]], "stream (nltk.data.seekableunicodestreamreader attribute)": [[111, "nltk.data.SeekableUnicodeStreamReader.stream", false]], "streambackedcorpusview (class in nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.StreamBackedCorpusView", false]], "streamer (class in nltk.twitter.twitterclient)": [[289, "nltk.twitter.twitterclient.Streamer", false]], "streamtofile_demo() (in module nltk.twitter.twitter_demo)": [[288, "nltk.twitter.twitter_demo.streamtofile_demo", false]], "string_span_tokenize() (in module nltk.tokenize.util)": [[254, "nltk.tokenize.util.string_span_tokenize", false]], "stringcategorycorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.StringCategoryCorpusReader", false]], "stringcategorycorpusreader (class in nltk.corpus.reader.string_category)": [[97, "nltk.corpus.reader.string_category.StringCategoryCorpusReader", false]], "strings() (nltk.corpus.reader.twitter.twittercorpusreader method)": [[102, "nltk.corpus.reader.twitter.TwitterCorpusReader.strings", false]], "strings() (nltk.corpus.reader.twittercorpusreader method)": [[57, "nltk.corpus.reader.TwitterCorpusReader.strings", false]], "stringtokenizer (class in nltk.tokenize.api)": [[237, "nltk.tokenize.api.StringTokenizer", false]], "strip_emr (nltk.stem.cistem.cistem attribute)": [[203, "nltk.stem.cistem.Cistem.strip_emr", false]], "strip_eol_hyphen (nltk.tokenize.nist.nisttokenizer attribute)": [[242, "nltk.tokenize.nist.NISTTokenizer.STRIP_EOL_HYPHEN", false]], "strip_esn (nltk.stem.cistem.cistem attribute)": [[203, "nltk.stem.cistem.Cistem.strip_esn", false]], "strip_ge (nltk.stem.cistem.cistem attribute)": [[203, "nltk.stem.cistem.Cistem.strip_ge", false]], "strip_nd (nltk.stem.cistem.cistem attribute)": [[203, "nltk.stem.cistem.Cistem.strip_nd", false]], "strip_skip (nltk.tokenize.nist.nisttokenizer attribute)": [[242, "nltk.tokenize.nist.NISTTokenizer.STRIP_SKIP", false]], "strip_t (nltk.stem.cistem.cistem attribute)": [[203, "nltk.stem.cistem.Cistem.strip_t", false]], "striprule (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.StripRule", false]], "student_t() (nltk.metrics.association.ngramassocmeasures class method)": [[146, "nltk.metrics.association.NgramAssocMeasures.student_t", false]], "stump() (nltk.classify.decisiontree.decisiontreeclassifier static method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.stump", false]], "stupid_quotes_1 (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.STUPID_QUOTES_1", false]], "stupid_quotes_2 (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.STUPID_QUOTES_2", false]], "stupidbackoff (class in nltk.lm)": [[135, "nltk.lm.StupidBackoff", false]], "stupidbackoff (class in nltk.lm.models)": [[138, "nltk.lm.models.StupidBackoff", false]], "subclasses() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.subclasses", false]], "subclasses() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.subclasses", false]], "subdir (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.subdir", false]], "subdiv_dict() (nltk.corpus.reader.bcp47.bcp47corpusreader method)": [[60, "nltk.corpus.reader.bcp47.BCP47CorpusReader.subdiv_dict", false]], "subdiv_dict() (nltk.corpus.reader.bcp47corpusreader method)": [[57, "nltk.corpus.reader.BCP47CorpusReader.subdiv_dict", false]], "substitute() (nltk.ccg.api.abstractccgcategory method)": [[13, "nltk.ccg.api.AbstractCCGCategory.substitute", false]], "substitute() (nltk.ccg.api.ccgvar method)": [[13, "nltk.ccg.api.CCGVar.substitute", false]], "substitute() (nltk.ccg.api.direction method)": [[13, "nltk.ccg.api.Direction.substitute", false]], "substitute() (nltk.ccg.api.functionalcategory method)": [[13, "nltk.ccg.api.FunctionalCategory.substitute", false]], "substitute() (nltk.ccg.api.primitivecategory method)": [[13, "nltk.ccg.api.PrimitiveCategory.substitute", false]], "substitute_bindings() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.substitute_bindings", false]], "substitute_bindings() (nltk.inference.resolution.clause method)": [[129, "nltk.inference.resolution.Clause.substitute_bindings", false]], "substitute_bindings() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.substitute_bindings", false]], "substitute_bindings() (nltk.sem.logic.substitutebindingsi method)": [[191, "nltk.sem.logic.SubstituteBindingsI.substitute_bindings", false]], "substitute_bindings() (nltk.sem.logic.variable method)": [[191, "nltk.sem.logic.Variable.substitute_bindings", false]], "substitutebindingsi (class in nltk.sem.logic)": [[191, "nltk.sem.logic.SubstituteBindingsI", false]], "subsumes() (in module nltk.featstruct)": [[120, "nltk.featstruct.subsumes", false]], "subsumes() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.subsumes", false]], "subsumes() (nltk.inference.resolution.clause method)": [[129, "nltk.inference.resolution.Clause.subsumes", false]], "subtrees() (nltk.draw.tree.treesegmentwidget method)": [[118, "nltk.draw.tree.TreeSegmentWidget.subtrees", false]], "subtrees() (nltk.tree.tree method)": [[275, "nltk.tree.Tree.subtrees", false]], "subtrees() (nltk.tree.tree.tree method)": [[282, "nltk.tree.tree.Tree.subtrees", false]], "suf1() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.suf1", false]], "suf32() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.suf32", false]], "suff() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.suff", false]], "suff() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.suff", false]], "suffix_noun_step1a_success (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.suffix_noun_step1a_success", false]], "suffix_noun_step2a_success (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.suffix_noun_step2a_success", false]], "suffix_noun_step2b_success (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.suffix_noun_step2b_success", false]], "suffix_noun_step2c2_success (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.suffix_noun_step2c2_success", false]], "suffix_replace() (in module nltk.stem.util)": [[210, "nltk.stem.util.suffix_replace", false]], "suffix_verb_step2a_success (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.suffix_verb_step2a_success", false]], "suffix_verb_step2b_success (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.suffix_verb_step2b_success", false]], "suffixe_noun_step1b_success (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.suffixe_noun_step1b_success", false]], "suffixes_verb_step1_success (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.suffixes_verb_step1_success", false]], "sum_logs() (in module nltk.probability)": [[179, "nltk.probability.sum_logs", false]], "sum_to_one (nltk.probability.crossvalidationprobdist attribute)": [[179, "nltk.probability.CrossValidationProbDist.SUM_TO_ONE", false]], "sum_to_one (nltk.probability.heldoutprobdist attribute)": [[179, "nltk.probability.HeldoutProbDist.SUM_TO_ONE", false]], "sum_to_one (nltk.probability.lidstoneprobdist attribute)": [[179, "nltk.probability.LidstoneProbDist.SUM_TO_ONE", false]], "sum_to_one (nltk.probability.probdisti attribute)": [[179, "nltk.probability.ProbDistI.SUM_TO_ONE", false]], "sum_to_one (nltk.probability.simplegoodturingprobdist attribute)": [[179, "nltk.probability.SimpleGoodTuringProbDist.SUM_TO_ONE", false]], "suntsu_chat() (in module nltk.chat.suntsu)": [[22, "nltk.chat.suntsu.suntsu_chat", false]], "supplementary_ideographic_plane (nltk.tokenize.util.cjkchars attribute)": [[254, "nltk.tokenize.util.CJKChars.Supplementary_Ideographic_Plane", false]], "supported_operations (nltk.classify.senna.senna attribute)": [[39, "nltk.classify.senna.Senna.SUPPORTED_OPERATIONS", false]], "svg() (nltk.tree.prettyprinter.treeprettyprinter method)": [[279, "nltk.tree.prettyprinter.TreePrettyPrinter.svg", false]], "svg() (nltk.tree.treeprettyprinter method)": [[275, "nltk.tree.TreePrettyPrinter.svg", false]], "svmclassifier (class in nltk.classify.svm)": [[40, "nltk.classify.svm.SvmClassifier", false]], "svn_revision (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.svn_revision", false]], "swadeshcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.SwadeshCorpusReader", false]], "swadeshcorpusreader (class in nltk.corpus.reader.wordlist)": [[106, "nltk.corpus.reader.wordlist.SwadeshCorpusReader", false]], "swedishstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.SwedishStemmer", false]], "switchboardcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.SwitchboardCorpusReader", false]], "switchboardcorpusreader (class in nltk.corpus.reader.switchboard)": [[98, "nltk.corpus.reader.switchboard.SwitchboardCorpusReader", false]], "switchboardturn (class in nltk.corpus.reader.switchboard)": [[98, "nltk.corpus.reader.switchboard.SwitchboardTurn", false]], "syllabletokenizer (class in nltk.tokenize.sonority_sequencing)": [[248, "nltk.tokenize.sonority_sequencing.SyllableTokenizer", false]], "symbol() (nltk.draw.util.symbolwidget method)": [[119, "nltk.draw.util.SymbolWidget.symbol", false]], "symbol() (nltk.grammar.nonterminal method)": [[121, "nltk.grammar.Nonterminal.symbol", false]], "symbol_regex (nltk.tokenize.nist.nisttokenizer attribute)": [[242, "nltk.tokenize.nist.NISTTokenizer.symbol_regex", false]], "symbols (nltk.draw.util.symbolwidget attribute)": [[119, "nltk.draw.util.SymbolWidget.SYMBOLS", false]], "symbols (nltk.sem.drt.drttokens attribute)": [[184, "nltk.sem.drt.DrtTokens.SYMBOLS", false]], "symbols (nltk.sem.evaluate.valuation property)": [[186, "nltk.sem.evaluate.Valuation.symbols", false]], "symbols (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.SYMBOLS", false]], "symbols (nltk.tokenize.nist.nisttokenizer attribute)": [[242, "nltk.tokenize.nist.NISTTokenizer.SYMBOLS", false]], "symbolsheet() (nltk.draw.util.symbolwidget static method)": [[119, "nltk.draw.util.SymbolWidget.symbolsheet", false]], "symbolwidget (class in nltk.draw.util)": [[119, "nltk.draw.util.SymbolWidget", false]], "synonyms() (nltk.corpus.reader.lin.linthesauruscorpusreader method)": [[77, "nltk.corpus.reader.lin.LinThesaurusCorpusReader.synonyms", false]], "synonyms() (nltk.corpus.reader.linthesauruscorpusreader method)": [[57, "nltk.corpus.reader.LinThesaurusCorpusReader.synonyms", false]], "synonyms() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.synonyms", false]], "synonyms() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.synonyms", false]], "synset (class in nltk.corpus.reader.wordnet)": [[107, "nltk.corpus.reader.wordnet.Synset", false]], "synset() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.synset", false]], "synset() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.synset", false]], "synset() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.synset", false]], "synset_from_pos_and_offset() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.synset_from_pos_and_offset", false]], "synset_from_pos_and_offset() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.synset_from_pos_and_offset", false]], "synset_from_sense_key() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.synset_from_sense_key", false]], "synset_from_sense_key() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.synset_from_sense_key", false]], "synsets() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.synsets", false]], "synsets() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.synsets", false]], "syntactic_marker() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.syntactic_marker", false]], "syntaxcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.SyntaxCorpusReader", false]], "syntaxcorpusreader (class in nltk.corpus.reader.api)": [[59, "nltk.corpus.reader.api.SyntaxCorpusReader", false]], "tab (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.TAB", false]], "tab2dict() (nltk.tabdata.tabdecoder method)": [[212, "nltk.tabdata.TabDecoder.tab2dict", false]], "tab2intdict() (nltk.tabdata.punktdecoder method)": [[212, "nltk.tabdata.PunktDecoder.tab2intdict", false]], "tab2ivdict() (nltk.tabdata.tabdecoder method)": [[212, "nltk.tabdata.TabDecoder.tab2ivdict", false]], "tab2tup() (nltk.tabdata.tabdecoder method)": [[212, "nltk.tabdata.TabDecoder.tab2tup", false]], "tab2tups() (nltk.tabdata.tabdecoder method)": [[212, "nltk.tabdata.TabDecoder.tab2tups", false]], "tabdecoder (class in nltk.tabdata)": [[212, "nltk.tabdata.TabDecoder", false]], "tabencoder (class in nltk.tabdata)": [[212, "nltk.tabdata.TabEncoder", false]], "table (class in nltk.draw.table)": [[117, "nltk.draw.table.Table", false]], "tableau_test() (in module nltk.inference.tableau)": [[130, "nltk.inference.tableau.tableau_test", false]], "tableauprover (class in nltk.inference.tableau)": [[130, "nltk.inference.tableau.TableauProver", false]], "tableauprovercommand (class in nltk.inference.tableau)": [[130, "nltk.inference.tableau.TableauProverCommand", false]], "tabtokenizer (class in nltk.tokenize.simple)": [[247, "nltk.tokenize.simple.TabTokenizer", false]], "tabulate() (nltk.probability.conditionalfreqdist method)": [[179, "nltk.probability.ConditionalFreqDist.tabulate", false]], "tabulate() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.tabulate", false]], "tadmeventmaxentfeatureencoding (class in nltk.classify.maxent)": [[33, "nltk.classify.maxent.TadmEventMaxentFeatureEncoding", false]], "tadmmaxentclassifier (class in nltk.classify.maxent)": [[33, "nltk.classify.maxent.TadmMaxentClassifier", false]], "tag() (nltk.classify.senna.senna method)": [[39, "nltk.classify.senna.Senna.tag", false]], "tag() (nltk.parse.corenlp.genericcorenlpparser method)": [[163, "nltk.parse.corenlp.GenericCoreNLPParser.tag", false]], "tag() (nltk.tag.api.taggeri method)": [[214, "nltk.tag.api.TaggerI.tag", false]], "tag() (nltk.tag.brill.brilltagger method)": [[215, "nltk.tag.brill.BrillTagger.tag", false]], "tag() (nltk.tag.crf.crftagger method)": [[217, "nltk.tag.crf.CRFTagger.tag", false]], "tag() (nltk.tag.hmm.hiddenmarkovmodeltagger method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.tag", false]], "tag() (nltk.tag.hunpos.hunpostagger method)": [[219, "nltk.tag.hunpos.HunposTagger.tag", false]], "tag() (nltk.tag.perceptron.perceptrontagger method)": [[221, "nltk.tag.perceptron.PerceptronTagger.tag", false]], "tag() (nltk.tag.sequential.sequentialbackofftagger method)": [[223, "nltk.tag.sequential.SequentialBackoffTagger.tag", false]], "tag() (nltk.tag.stanford.stanfordtagger method)": [[224, "nltk.tag.stanford.StanfordTagger.tag", false]], "tag() (nltk.tag.tnt.tnt method)": [[225, "nltk.tag.tnt.TnT.tag", false]], "tag2q() (in module nltk.langnames)": [[133, "nltk.langnames.tag2q", false]], "tag_ns (nltk.corpus.reader.mte.mtefilereader attribute)": [[79, "nltk.corpus.reader.mte.MTEFileReader.tag_ns", false]], "tag_one() (nltk.tag.sequential.sequentialbackofftagger method)": [[223, "nltk.tag.sequential.SequentialBackoffTagger.tag_one", false]], "tag_pattern2re_pattern() (in module nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.tag_pattern2re_pattern", false]], "tag_sents() (nltk.classify.senna.senna method)": [[39, "nltk.classify.senna.Senna.tag_sents", false]], "tag_sents() (nltk.parse.corenlp.genericcorenlpparser method)": [[163, "nltk.parse.corenlp.GenericCoreNLPParser.tag_sents", false]], "tag_sents() (nltk.tag.api.taggeri method)": [[214, "nltk.tag.api.TaggerI.tag_sents", false]], "tag_sents() (nltk.tag.crf.crftagger method)": [[217, "nltk.tag.crf.CRFTagger.tag_sents", false]], "tag_sents() (nltk.tag.senna.sennachunktagger method)": [[222, "nltk.tag.senna.SennaChunkTagger.tag_sents", false]], "tag_sents() (nltk.tag.senna.sennanertagger method)": [[222, "nltk.tag.senna.SennaNERTagger.tag_sents", false]], "tag_sents() (nltk.tag.senna.sennatagger method)": [[222, "nltk.tag.senna.SennaTagger.tag_sents", false]], "tag_sents() (nltk.tag.stanford.stanfordtagger method)": [[224, "nltk.tag.stanford.StanfordTagger.tag_sents", false]], "tagdata() (nltk.tag.tnt.tnt method)": [[225, "nltk.tag.tnt.TnT.tagdata", false]], "tagged_chunks() (nltk.corpus.reader.semcor.semcorcorpusreader method)": [[93, "nltk.corpus.reader.semcor.SemcorCorpusReader.tagged_chunks", false]], "tagged_chunks() (nltk.corpus.reader.semcorcorpusreader method)": [[57, "nltk.corpus.reader.SemcorCorpusReader.tagged_chunks", false]], "tagged_discourses() (nltk.corpus.reader.switchboard.switchboardcorpusreader method)": [[98, "nltk.corpus.reader.switchboard.SwitchboardCorpusReader.tagged_discourses", false]], "tagged_discourses() (nltk.corpus.reader.switchboardcorpusreader method)": [[57, "nltk.corpus.reader.SwitchboardCorpusReader.tagged_discourses", false]], "tagged_paras() (nltk.corpus.reader.bracket_parse.categorizedbracketparsecorpusreader method)": [[62, "nltk.corpus.reader.bracket_parse.CategorizedBracketParseCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.categorizedbracketparsecorpusreader method)": [[57, "nltk.corpus.reader.CategorizedBracketParseCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.categorizedtaggedcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedTaggedCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.chasen.chasencorpusreader method)": [[64, "nltk.corpus.reader.chasen.ChasenCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.chasencorpusreader method)": [[57, "nltk.corpus.reader.ChasenCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.chunked.chunkedcorpusreader method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.chunkedcorpusreader method)": [[57, "nltk.corpus.reader.ChunkedCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.ipipan.ipipancorpusreader method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.ipipancorpusreader method)": [[57, "nltk.corpus.reader.IPIPANCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.mte.mtecorpusreader method)": [[79, "nltk.corpus.reader.mte.MTECorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.mte.mtefilereader method)": [[79, "nltk.corpus.reader.mte.MTEFileReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.mtecorpusreader method)": [[57, "nltk.corpus.reader.MTECorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.pl196x.pl196xcorpusreader method)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.pl196xcorpusreader method)": [[57, "nltk.corpus.reader.Pl196xCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.tagged.categorizedtaggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.CategorizedTaggedCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.tagged.taggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.TaggedCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.tagged.timittaggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.TimitTaggedCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.taggedcorpusreader method)": [[57, "nltk.corpus.reader.TaggedCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.timittaggedcorpusreader method)": [[57, "nltk.corpus.reader.TimitTaggedCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.ycoe.ycoecorpusreader method)": [[109, "nltk.corpus.reader.ycoe.YCOECorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.ycoecorpusreader method)": [[57, "nltk.corpus.reader.YCOECorpusReader.tagged_paras", false]], "tagged_parse() (nltk.parse.bllip.bllipparser method)": [[161, "nltk.parse.bllip.BllipParser.tagged_parse", false]], "tagged_parse() (nltk.parse.stanford.genericstanfordparser method)": [[175, "nltk.parse.stanford.GenericStanfordParser.tagged_parse", false]], "tagged_parse_sents() (nltk.parse.stanford.genericstanfordparser method)": [[175, "nltk.parse.stanford.GenericStanfordParser.tagged_parse_sents", false]], "tagged_parse_sents() (nltk.parse.stanford.stanfordneuraldependencyparser method)": [[175, "nltk.parse.stanford.StanfordNeuralDependencyParser.tagged_parse_sents", false]], "tagged_posts() (nltk.corpus.reader.nps_chat.npschatcorpusreader method)": [[82, "nltk.corpus.reader.nps_chat.NPSChatCorpusReader.tagged_posts", false]], "tagged_posts() (nltk.corpus.reader.npschatcorpusreader method)": [[57, "nltk.corpus.reader.NPSChatCorpusReader.tagged_posts", false]], "tagged_sents() (nltk.corpus.reader.api.syntaxcorpusreader method)": [[59, "nltk.corpus.reader.api.SyntaxCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.bnc.bnccorpusreader method)": [[61, "nltk.corpus.reader.bnc.BNCCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.bnccorpusreader method)": [[57, "nltk.corpus.reader.BNCCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.bracket_parse.categorizedbracketparsecorpusreader method)": [[62, "nltk.corpus.reader.bracket_parse.CategorizedBracketParseCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.categorizedbracketparsecorpusreader method)": [[57, "nltk.corpus.reader.CategorizedBracketParseCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.categorizedtaggedcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedTaggedCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.chasen.chasencorpusreader method)": [[64, "nltk.corpus.reader.chasen.ChasenCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.chasencorpusreader method)": [[57, "nltk.corpus.reader.ChasenCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.childes.childescorpusreader method)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.childescorpusreader method)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.chunked.chunkedcorpusreader method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.chunkedcorpusreader method)": [[57, "nltk.corpus.reader.ChunkedCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.dependency.dependencycorpusreader method)": [[71, "nltk.corpus.reader.dependency.DependencyCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.dependencycorpusreader method)": [[57, "nltk.corpus.reader.DependencyCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.indian.indiancorpusreader method)": [[74, "nltk.corpus.reader.indian.IndianCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.indiancorpusreader method)": [[57, "nltk.corpus.reader.IndianCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.ipipan.ipipancorpusreader method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.ipipancorpusreader method)": [[57, "nltk.corpus.reader.IPIPANCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.mte.mtecorpusreader method)": [[79, "nltk.corpus.reader.mte.MTECorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.mte.mtefilereader method)": [[79, "nltk.corpus.reader.mte.MTEFileReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.mtecorpusreader method)": [[57, "nltk.corpus.reader.MTECorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.pl196x.pl196xcorpusreader method)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.pl196xcorpusreader method)": [[57, "nltk.corpus.reader.Pl196xCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.semcor.semcorcorpusreader method)": [[93, "nltk.corpus.reader.semcor.SemcorCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.semcorcorpusreader method)": [[57, "nltk.corpus.reader.SemcorCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.syntaxcorpusreader method)": [[57, "nltk.corpus.reader.SyntaxCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.tagged.categorizedtaggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.CategorizedTaggedCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.tagged.taggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.TaggedCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.taggedcorpusreader method)": [[57, "nltk.corpus.reader.TaggedCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.ycoe.ycoecorpusreader method)": [[109, "nltk.corpus.reader.ycoe.YCOECorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.ycoecorpusreader method)": [[57, "nltk.corpus.reader.YCOECorpusReader.tagged_sents", false]], "tagged_spans (nltk.corpus.reader.conll.conllsrlinstance attribute)": [[69, "nltk.corpus.reader.conll.ConllSRLInstance.tagged_spans", false]], "tagged_treebank_para_block_reader() (in module nltk.corpus.reader)": [[57, "nltk.corpus.reader.tagged_treebank_para_block_reader", false]], "tagged_treebank_para_block_reader() (in module nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.tagged_treebank_para_block_reader", false]], "tagged_turns() (nltk.corpus.reader.switchboard.switchboardcorpusreader method)": [[98, "nltk.corpus.reader.switchboard.SwitchboardCorpusReader.tagged_turns", false]], "tagged_turns() (nltk.corpus.reader.switchboardcorpusreader method)": [[57, "nltk.corpus.reader.SwitchboardCorpusReader.tagged_turns", false]], "tagged_words() (nltk.corpus.reader.api.syntaxcorpusreader method)": [[59, "nltk.corpus.reader.api.SyntaxCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.bnc.bnccorpusreader method)": [[61, "nltk.corpus.reader.bnc.BNCCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.bnccorpusreader method)": [[57, "nltk.corpus.reader.BNCCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.bracket_parse.categorizedbracketparsecorpusreader method)": [[62, "nltk.corpus.reader.bracket_parse.CategorizedBracketParseCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.categorizedbracketparsecorpusreader method)": [[57, "nltk.corpus.reader.CategorizedBracketParseCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.categorizedtaggedcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedTaggedCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.chasen.chasencorpusreader method)": [[64, "nltk.corpus.reader.chasen.ChasenCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.chasencorpusreader method)": [[57, "nltk.corpus.reader.ChasenCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.childes.childescorpusreader method)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.childescorpusreader method)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.chunked.chunkedcorpusreader method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.chunkedcorpusreader method)": [[57, "nltk.corpus.reader.ChunkedCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.dependency.dependencycorpusreader method)": [[71, "nltk.corpus.reader.dependency.DependencyCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.dependencycorpusreader method)": [[57, "nltk.corpus.reader.DependencyCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.indian.indiancorpusreader method)": [[74, "nltk.corpus.reader.indian.IndianCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.indiancorpusreader method)": [[57, "nltk.corpus.reader.IndianCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.ipipan.ipipancorpusreader method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.ipipancorpusreader method)": [[57, "nltk.corpus.reader.IPIPANCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.mte.mtecorpusreader method)": [[79, "nltk.corpus.reader.mte.MTECorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.mte.mtefilereader method)": [[79, "nltk.corpus.reader.mte.MTEFileReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.mtecorpusreader method)": [[57, "nltk.corpus.reader.MTECorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.nkjp.nkjpcorpusreader method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.nkjpcorpusreader method)": [[57, "nltk.corpus.reader.NKJPCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.nps_chat.npschatcorpusreader method)": [[82, "nltk.corpus.reader.nps_chat.NPSChatCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.npschatcorpusreader method)": [[57, "nltk.corpus.reader.NPSChatCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.pl196x.pl196xcorpusreader method)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.pl196xcorpusreader method)": [[57, "nltk.corpus.reader.Pl196xCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.switchboard.switchboardcorpusreader method)": [[98, "nltk.corpus.reader.switchboard.SwitchboardCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.switchboardcorpusreader method)": [[57, "nltk.corpus.reader.SwitchboardCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.syntaxcorpusreader method)": [[57, "nltk.corpus.reader.SyntaxCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.tagged.categorizedtaggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.CategorizedTaggedCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.tagged.taggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.TaggedCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.taggedcorpusreader method)": [[57, "nltk.corpus.reader.TaggedCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.ycoe.ycoecorpusreader method)": [[109, "nltk.corpus.reader.ycoe.YCOECorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.ycoecorpusreader method)": [[57, "nltk.corpus.reader.YCOECorpusReader.tagged_words", false]], "taggedcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.TaggedCorpusReader", false]], "taggedcorpusreader (class in nltk.corpus.reader.tagged)": [[99, "nltk.corpus.reader.tagged.TaggedCorpusReader", false]], "taggedcorpusview (class in nltk.corpus.reader.tagged)": [[99, "nltk.corpus.reader.tagged.TaggedCorpusView", false]], "taggedsent_to_conll() (in module nltk.parse.util)": [[177, "nltk.parse.util.taggedsent_to_conll", false]], "taggedsents_to_conll() (in module nltk.parse.util)": [[177, "nltk.parse.util.taggedsents_to_conll", false]], "tagger (nltk.corpus.reader.propbank.propbankinstance attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.tagger", false]], "taggeri (class in nltk.tag.api)": [[214, "nltk.tag.api.TaggerI", false]], "tagrule (class in nltk.tbl.rule)": [[232, "nltk.tbl.rule.TagRule", false]], "tags() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.tags", false]], "tags_to_ignore (nltk.corpus.reader.bnc.bncwordview attribute)": [[61, "nltk.corpus.reader.bnc.BNCWordView.tags_to_ignore", false]], "tagset_mapping() (in module nltk.tag.mapping)": [[220, "nltk.tag.mapping.tagset_mapping", false]], "tagstr2tree() (in module nltk.chunk.util)": [[29, "nltk.chunk.util.tagstr2tree", false]], "targets() (nltk.misc.minimalset.minimalset method)": [[156, "nltk.misc.minimalset.MinimalSet.targets", false]], "teicorpusview (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.TEICorpusView", false]], "teicorpusview (class in nltk.corpus.reader.pl196x)": [[86, "nltk.corpus.reader.pl196x.TEICorpusView", false]], "tell() (nltk.data.seekableunicodestreamreader method)": [[111, "nltk.data.SeekableUnicodeStreamReader.tell", false]], "template (class in nltk.tbl.template)": [[233, "nltk.tbl.template.Template", false]], "test() (in module nltk.corpus.reader.chasen)": [[64, "nltk.corpus.reader.chasen.test", false]], "test() (in module nltk.corpus.reader.knbc)": [[76, "nltk.corpus.reader.knbc.test", false]], "test() (nltk.tag.hmm.hiddenmarkovmodeltagger method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.test", false]], "test_build_model() (in module nltk.inference.mace)": [[126, "nltk.inference.mace.test_build_model", false]], "test_clausify() (in module nltk.inference.resolution)": [[129, "nltk.inference.resolution.test_clausify", false]], "test_config() (in module nltk.inference.prover9)": [[128, "nltk.inference.prover9.test_config", false]], "test_convert_to_prover9() (in module nltk.inference.prover9)": [[128, "nltk.inference.prover9.test_convert_to_prover9", false]], "test_draw() (in module nltk.sem.drt)": [[184, "nltk.sem.drt.test_draw", false]], "test_make_relation_set() (in module nltk.inference.mace)": [[126, "nltk.inference.mace.test_make_relation_set", false]], "test_model_found() (in module nltk.inference.mace)": [[126, "nltk.inference.mace.test_model_found", false]], "test_prove() (in module nltk.inference.prover9)": [[128, "nltk.inference.prover9.test_prove", false]], "test_transform_output() (in module nltk.inference.mace)": [[126, "nltk.inference.mace.test_transform_output", false]], "testgrammar (class in nltk.parse.util)": [[177, "nltk.parse.util.TestGrammar", false]], "testhigherordertableauprover() (in module nltk.inference.tableau)": [[130, "nltk.inference.tableau.testHigherOrderTableauProver", false]], "testresolutionprover() (in module nltk.inference.resolution)": [[129, "nltk.inference.resolution.testResolutionProver", false]], "testtableauprover() (in module nltk.inference.tableau)": [[130, "nltk.inference.tableau.testTableauProver", false]], "text (class in nltk.text)": [[234, "nltk.text.Text", false]], "text() (nltk.draw.util.textwidget method)": [[119, "nltk.draw.util.TextWidget.text", false]], "text() (nltk.tree.prettyprinter.treeprettyprinter method)": [[279, "nltk.tree.prettyprinter.TreePrettyPrinter.text", false]], "text() (nltk.tree.treeprettyprinter method)": [[275, "nltk.tree.TreePrettyPrinter.text", false]], "text_contains_sentbreak() (nltk.tokenize.punkt.punktsentencetokenizer method)": [[243, "nltk.tokenize.punkt.PunktSentenceTokenizer.text_contains_sentbreak", false]], "textcat (class in nltk.classify.textcat)": [[42, "nltk.classify.textcat.TextCat", false]], "textcollection (class in nltk.text)": [[234, "nltk.text.TextCollection", false]], "textids() (nltk.corpus.reader.pl196x.pl196xcorpusreader method)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader.textids", false]], "textids() (nltk.corpus.reader.pl196xcorpusreader method)": [[57, "nltk.corpus.reader.Pl196xCorpusReader.textids", false]], "texts() (in module nltk.book)": [[11, "nltk.book.texts", false]], "texttilingtokenizer (class in nltk.tokenize.texttiling)": [[251, "nltk.tokenize.texttiling.TextTilingTokenizer", false]], "textwidget (class in nltk.draw.util)": [[119, "nltk.draw.util.TextWidget", false]], "tf() (nltk.text.textcollection method)": [[234, "nltk.text.TextCollection.tf", false]], "tf_idf() (nltk.text.textcollection method)": [[234, "nltk.text.TextCollection.tf_idf", false]], "tgrep_compile() (in module nltk.tgrep)": [[235, "nltk.tgrep.tgrep_compile", false]], "tgrep_nodes() (in module nltk.tgrep)": [[235, "nltk.tgrep.tgrep_nodes", false]], "tgrep_positions() (in module nltk.tgrep)": [[235, "nltk.tgrep.tgrep_positions", false]], "tgrep_tokenize() (in module nltk.tgrep)": [[235, "nltk.tgrep.tgrep_tokenize", false]], "tgrepexception": [[235, "nltk.tgrep.TgrepException", false]], "themroles() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.themroles", false]], "themroles() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.themroles", false]], "theoremtoolcommand (class in nltk.inference.api)": [[124, "nltk.inference.api.TheoremToolCommand", false]], "theoremtoolcommanddecorator (class in nltk.inference.api)": [[124, "nltk.inference.api.TheoremToolCommandDecorator", false]], "theoremtoolthread (class in nltk.inference.api)": [[124, "nltk.inference.api.TheoremToolThread", false]], "third_person (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.THIRD_PERSON", false]], "timer() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.timer", false]], "timestamped_file() (nltk.twitter.twitterclient.tweetwriter method)": [[289, "nltk.twitter.twitterclient.TweetWriter.timestamped_file", false]], "timitcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.TimitCorpusReader", false]], "timitcorpusreader (class in nltk.corpus.reader.timit)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader", false]], "timittaggedcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.TimitTaggedCorpusReader", false]], "timittaggedcorpusreader (class in nltk.corpus.reader.tagged)": [[99, "nltk.corpus.reader.tagged.TimitTaggedCorpusReader", false]], "title (nltk.corpus.reader.bnc.bncwordview attribute)": [[61, "nltk.corpus.reader.bnc.BNCWordView.title", false]], "title (nltk.corpus.reader.markdown.image attribute)": [[78, "nltk.corpus.reader.markdown.Image.title", false]], "title (nltk.corpus.reader.markdown.link attribute)": [[78, "nltk.corpus.reader.markdown.Link.title", false]], "titles (in module nltk.corpus.reader.ieer)": [[73, "nltk.corpus.reader.ieer.titles", false]], "tnt (class in nltk.tag.tnt)": [[225, "nltk.tag.tnt.TnT", false]], "to_chunkstruct() (nltk.chunk.regexp.chunkstring method)": [[28, "nltk.chunk.regexp.ChunkString.to_chunkstruct", false]], "to_cnf() (in module nltk.sem.skolemize)": [[193, "nltk.sem.skolemize.to_cnf", false]], "to_conll() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.to_conll", false]], "to_depgraph() (nltk.sem.lfg.fstructure method)": [[189, "nltk.sem.lfg.FStructure.to_depgraph", false]], "to_dot() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.to_dot", false]], "to_fol() (nltk.inference.discourse.cfgreadingcommand method)": [[125, "nltk.inference.discourse.CfgReadingCommand.to_fol", false]], "to_fol() (nltk.inference.discourse.drtgluereadingcommand method)": [[125, "nltk.inference.discourse.DrtGlueReadingCommand.to_fol", false]], "to_fol() (nltk.inference.discourse.readingcommand method)": [[125, "nltk.inference.discourse.ReadingCommand.to_fol", false]], "to_glueformula_list() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.to_glueformula_list", false]], "to_glueformula_list() (nltk.sem.lfg.fstructure method)": [[189, "nltk.sem.lfg.FStructure.to_glueformula_list", false]], "to_settings_string() (in module nltk.toolbox)": [[255, "nltk.toolbox.to_settings_string", false]], "to_sfm_string() (in module nltk.toolbox)": [[255, "nltk.toolbox.to_sfm_string", false]], "toggle_collapsed() (nltk.draw.tree.treewidget method)": [[118, "nltk.draw.tree.TreeWidget.toggle_collapsed", false]], "tok (nltk.tokenize.punkt.punkttoken attribute)": [[243, "nltk.tokenize.punkt.PunktToken.tok", false]], "token (class in nltk.ccg.lexicon)": [[16, "nltk.ccg.lexicon.Token", false]], "token() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.token", false]], "token() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.token", false]], "tokenize() (nltk.parse.corenlp.genericcorenlpparser method)": [[163, "nltk.parse.corenlp.GenericCoreNLPParser.tokenize", false]], "tokenize() (nltk.tokenize.api.stringtokenizer method)": [[237, "nltk.tokenize.api.StringTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.api.tokenizeri method)": [[237, "nltk.tokenize.api.TokenizerI.tokenize", false]], "tokenize() (nltk.tokenize.casual.tweettokenizer method)": [[238, "nltk.tokenize.casual.TweetTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.destructive.nltkwordtokenizer method)": [[239, "nltk.tokenize.destructive.NLTKWordTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.legality_principle.legalitysyllabletokenizer method)": [[240, "nltk.tokenize.legality_principle.LegalitySyllableTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.mwe.mwetokenizer method)": [[241, "nltk.tokenize.mwe.MWETokenizer.tokenize", false]], "tokenize() (nltk.tokenize.nist.nisttokenizer method)": [[242, "nltk.tokenize.nist.NISTTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.punkt.punktsentencetokenizer method)": [[243, "nltk.tokenize.punkt.PunktSentenceTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.regexp.regexptokenizer method)": [[244, "nltk.tokenize.regexp.RegexpTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.repp.repptokenizer method)": [[245, "nltk.tokenize.repp.ReppTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.sexpr.sexprtokenizer method)": [[246, "nltk.tokenize.sexpr.SExprTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.simple.chartokenizer method)": [[247, "nltk.tokenize.simple.CharTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.simple.linetokenizer method)": [[247, "nltk.tokenize.simple.LineTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.sonority_sequencing.syllabletokenizer method)": [[248, "nltk.tokenize.sonority_sequencing.SyllableTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.stanford.stanfordtokenizer method)": [[249, "nltk.tokenize.stanford.StanfordTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.stanford_segmenter.stanfordsegmenter method)": [[250, "nltk.tokenize.stanford_segmenter.StanfordSegmenter.tokenize", false]], "tokenize() (nltk.tokenize.texttiling.texttilingtokenizer method)": [[251, "nltk.tokenize.texttiling.TextTilingTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.toktok.toktoktokenizer method)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.treebank.treebankworddetokenizer method)": [[253, "nltk.tokenize.treebank.TreebankWordDetokenizer.tokenize", false]], "tokenize() (nltk.tokenize.treebank.treebankwordtokenizer method)": [[253, "nltk.tokenize.treebank.TreebankWordTokenizer.tokenize", false]], "tokenize_sents() (nltk.tokenize.api.tokenizeri method)": [[237, "nltk.tokenize.api.TokenizerI.tokenize_sents", false]], "tokenize_sents() (nltk.tokenize.repp.repptokenizer method)": [[245, "nltk.tokenize.repp.ReppTokenizer.tokenize_sents", false]], "tokenized() (nltk.corpus.reader.twitter.twittercorpusreader method)": [[102, "nltk.corpus.reader.twitter.TwitterCorpusReader.tokenized", false]], "tokenized() (nltk.corpus.reader.twittercorpusreader method)": [[57, "nltk.corpus.reader.TwitterCorpusReader.tokenized", false]], "tokenizeri (class in nltk.tokenize.api)": [[237, "nltk.tokenize.api.TokenizerI", false]], "tokens (class in nltk.sem.linearlogic)": [[190, "nltk.sem.linearlogic.Tokens", false]], "tokens (class in nltk.sem.logic)": [[191, "nltk.sem.logic.Tokens", false]], "tokens (nltk.sem.drt.drttokens attribute)": [[184, "nltk.sem.drt.DrtTokens.TOKENS", false]], "tokens (nltk.sem.linearlogic.tokens attribute)": [[190, "nltk.sem.linearlogic.Tokens.TOKENS", false]], "tokens (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.TOKENS", false]], "tokens() (nltk.text.concordanceindex method)": [[234, "nltk.text.ConcordanceIndex.tokens", false]], "tokens() (nltk.text.contextindex method)": [[234, "nltk.text.ContextIndex.tokens", false]], "tokensearcher (class in nltk.text)": [[234, "nltk.text.TokenSearcher", false]], "tokensequence (class in nltk.tokenize.texttiling)": [[251, "nltk.tokenize.texttiling.TokenSequence", false]], "tokentablefield (class in nltk.tokenize.texttiling)": [[251, "nltk.tokenize.texttiling.TokenTableField", false]], "tokenwrap() (in module nltk.util)": [[291, "nltk.util.tokenwrap", false]], "toktok_regexes (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.TOKTOK_REGEXES", false]], "toktoktokenizer (class in nltk.tokenize.toktok)": [[252, "nltk.tokenize.toktok.ToktokTokenizer", false]], "toolboxcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.ToolboxCorpusReader", false]], "toolboxcorpusreader (class in nltk.corpus.reader.toolbox)": [[101, "nltk.corpus.reader.toolbox.ToolboxCorpusReader", false]], "toolboxdata (class in nltk.toolbox)": [[255, "nltk.toolbox.ToolboxData", false]], "toolboxsettings (class in nltk.toolbox)": [[255, "nltk.toolbox.ToolboxSettings", false]], "topdownchartparser (class in nltk.parse.chart)": [[162, "nltk.parse.chart.TopDownChartParser", false]], "topdowninitrule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.TopDownInitRule", false]], "topdownpredictrule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.TopDownPredictRule", false]], "topspace (nltk.sem.drt.drsdrawer attribute)": [[184, "nltk.sem.drt.DrsDrawer.TOPSPACE", false]], "total (in module nltk.metrics.association)": [[146, "nltk.metrics.association.TOTAL", false]], "trace() (in module nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.trace", false]], "trace() (in module nltk.translate.gale_church)": [[260, "nltk.translate.gale_church.trace", false]], "trace() (nltk.parse.pchart.bottomupprobabilisticchartparser method)": [[171, "nltk.parse.pchart.BottomUpProbabilisticChartParser.trace", false]], "trace() (nltk.parse.recursivedescent.recursivedescentparser method)": [[173, "nltk.parse.recursivedescent.RecursiveDescentParser.trace", false]], "trace() (nltk.parse.shiftreduce.shiftreduceparser method)": [[174, "nltk.parse.shiftreduce.ShiftReduceParser.trace", false]], "trace() (nltk.parse.viterbi.viterbiparser method)": [[178, "nltk.parse.viterbi.ViterbiParser.trace", false]], "tracktoscreen_demo() (in module nltk.twitter.twitter_demo)": [[288, "nltk.twitter.twitter_demo.tracktoscreen_demo", false]], "train() (nltk.classify.decisiontree.decisiontreeclassifier static method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.train", false]], "train() (nltk.classify.maxent.binarymaxentfeatureencoding class method)": [[33, "nltk.classify.maxent.BinaryMaxentFeatureEncoding.train", false]], "train() (nltk.classify.maxent.maxentclassifier class method)": [[33, "nltk.classify.maxent.MaxentClassifier.train", false]], "train() (nltk.classify.maxent.maxentfeatureencodingi method)": [[33, "nltk.classify.maxent.MaxentFeatureEncodingI.train", false]], "train() (nltk.classify.maxent.tadmeventmaxentfeatureencoding class method)": [[33, "nltk.classify.maxent.TadmEventMaxentFeatureEncoding.train", false]], "train() (nltk.classify.maxent.tadmmaxentclassifier class method)": [[33, "nltk.classify.maxent.TadmMaxentClassifier.train", false]], "train() (nltk.classify.maxent.typedmaxentfeatureencoding class method)": [[33, "nltk.classify.maxent.TypedMaxentFeatureEncoding.train", false]], "train() (nltk.classify.naivebayes.naivebayesclassifier class method)": [[35, "nltk.classify.naivebayes.NaiveBayesClassifier.train", false]], "train() (nltk.classify.positivenaivebayes.positivenaivebayesclassifier static method)": [[36, "nltk.classify.positivenaivebayes.PositiveNaiveBayesClassifier.train", false]], "train() (nltk.classify.scikitlearn.sklearnclassifier method)": [[38, "nltk.classify.scikitlearn.SklearnClassifier.train", false]], "train() (nltk.classify.weka.wekaclassifier class method)": [[44, "nltk.classify.weka.WekaClassifier.train", false]], "train() (nltk.parse.malt.maltparser method)": [[169, "nltk.parse.malt.MaltParser.train", false]], "train() (nltk.parse.nonprojectivedependencyparser.demoscorer method)": [[170, "nltk.parse.nonprojectivedependencyparser.DemoScorer.train", false]], "train() (nltk.parse.nonprojectivedependencyparser.dependencyscoreri method)": [[170, "nltk.parse.nonprojectivedependencyparser.DependencyScorerI.train", false]], "train() (nltk.parse.nonprojectivedependencyparser.naivebayesdependencyscorer method)": [[170, "nltk.parse.nonprojectivedependencyparser.NaiveBayesDependencyScorer.train", false]], "train() (nltk.parse.nonprojectivedependencyparser.probabilisticnonprojectiveparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser.train", false]], "train() (nltk.parse.projectivedependencyparser.probabilisticprojectivedependencyparser method)": [[172, "nltk.parse.projectivedependencyparser.ProbabilisticProjectiveDependencyParser.train", false]], "train() (nltk.parse.transitionparser.transitionparser method)": [[176, "nltk.parse.transitionparser.TransitionParser.train", false]], "train() (nltk.sentiment.sentiment_analyzer.sentimentanalyzer method)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer.train", false]], "train() (nltk.tag.brill_trainer.brilltaggertrainer method)": [[216, "nltk.tag.brill_trainer.BrillTaggerTrainer.train", false]], "train() (nltk.tag.crf.crftagger method)": [[217, "nltk.tag.crf.CRFTagger.train", false]], "train() (nltk.tag.hmm.hiddenmarkovmodeltagger class method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.train", false]], "train() (nltk.tag.hmm.hiddenmarkovmodeltrainer method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTrainer.train", false]], "train() (nltk.tag.perceptron.perceptrontagger method)": [[221, "nltk.tag.perceptron.PerceptronTagger.train", false]], "train() (nltk.tag.tnt.tnt method)": [[225, "nltk.tag.tnt.TnT.train", false]], "train() (nltk.tokenize.punkt.punktsentencetokenizer method)": [[243, "nltk.tokenize.punkt.PunktSentenceTokenizer.train", false]], "train() (nltk.tokenize.punkt.punkttrainer method)": [[243, "nltk.tokenize.punkt.PunktTrainer.train", false]], "train() (nltk.translate.ibm1.ibmmodel1 method)": [[263, "nltk.translate.ibm1.IBMModel1.train", false]], "train() (nltk.translate.ibm2.ibmmodel2 method)": [[264, "nltk.translate.ibm2.IBMModel2.train", false]], "train() (nltk.translate.ibm3.ibmmodel3 method)": [[265, "nltk.translate.ibm3.IBMModel3.train", false]], "train() (nltk.translate.ibm4.ibmmodel4 method)": [[266, "nltk.translate.ibm4.IBMModel4.train", false]], "train() (nltk.translate.ibm5.ibmmodel5 method)": [[267, "nltk.translate.ibm5.IBMModel5.train", false]], "train_depparser() (nltk.sem.glue.glue method)": [[187, "nltk.sem.glue.Glue.train_depparser", false]], "train_from_file() (nltk.parse.malt.maltparser method)": [[169, "nltk.parse.malt.MaltParser.train_from_file", false]], "train_maxent_classifier_with_gis() (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.train_maxent_classifier_with_gis", false]], "train_maxent_classifier_with_iis() (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.train_maxent_classifier_with_iis", false]], "train_maxent_classifier_with_megam() (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.train_maxent_classifier_with_megam", false]], "train_stats() (nltk.tag.brill.brilltagger method)": [[215, "nltk.tag.brill.BrillTagger.train_stats", false]], "train_supervised() (nltk.tag.hmm.hiddenmarkovmodeltrainer method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTrainer.train_supervised", false]], "train_tokens() (nltk.tokenize.punkt.punkttrainer method)": [[243, "nltk.tokenize.punkt.PunktTrainer.train_tokens", false]], "train_unsupervised() (nltk.tag.hmm.hiddenmarkovmodeltrainer method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTrainer.train_unsupervised", false]], "transcription_dict() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.transcription_dict", false]], "transcription_dict() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.transcription_dict", false]], "transform() (in module nltk.parse.corenlp)": [[163, "nltk.parse.corenlp.transform", false]], "transition (class in nltk.parse.transitionparser)": [[176, "nltk.parse.transitionparser.Transition", false]], "transitionparser (class in nltk.parse.transitionparser)": [[176, "nltk.parse.transitionparser.TransitionParser", false]], "transitive_closure() (in module nltk.util)": [[291, "nltk.util.transitive_closure", false]], "translate() (nltk.translate.stack_decoder.stackdecoder method)": [[274, "nltk.translate.stack_decoder.StackDecoder.translate", false]], "translation_q (nltk.corpus.reader.panlex_lite.panlexlitecorpusreader attribute)": [[84, "nltk.corpus.reader.panlex_lite.PanLexLiteCorpusReader.TRANSLATION_Q", false]], "translation_q (nltk.corpus.reader.panlexlitecorpusreader attribute)": [[57, "nltk.corpus.reader.PanLexLiteCorpusReader.TRANSLATION_Q", false]], "translations() (nltk.corpus.reader.panlex_lite.panlexlitecorpusreader method)": [[84, "nltk.corpus.reader.panlex_lite.PanLexLiteCorpusReader.translations", false]], "translations() (nltk.corpus.reader.panlexlitecorpusreader method)": [[57, "nltk.corpus.reader.PanLexLiteCorpusReader.translations", false]], "translations_for() (nltk.translate.api.phrasetable method)": [[257, "nltk.translate.api.PhraseTable.translations_for", false]], "tree (class in nltk.tree)": [[275, "nltk.tree.Tree", false]], "tree (class in nltk.tree.tree)": [[282, "nltk.tree.tree.Tree", false]], "tree (nltk.corpus.reader.conll.conllcorpusreader attribute)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.TREE", false]], "tree (nltk.corpus.reader.conll.conllsrlinstance attribute)": [[69, "nltk.corpus.reader.conll.ConllSRLInstance.tree", false]], "tree (nltk.corpus.reader.conllcorpusreader attribute)": [[57, "nltk.corpus.reader.ConllCorpusReader.TREE", false]], "tree (nltk.corpus.reader.nombank.nombankinstance property)": [[81, "nltk.corpus.reader.nombank.NombankInstance.tree", false]], "tree (nltk.corpus.reader.propbank.propbankinstance property)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.tree", false]], "tree() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.tree", false]], "tree() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.tree", false]], "tree() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.tree", false]], "tree2conllstr() (in module nltk.chunk.util)": [[29, "nltk.chunk.util.tree2conllstr", false]], "tree2conlltags() (in module nltk.chunk.util)": [[29, "nltk.chunk.util.tree2conlltags", false]], "tree2semi_rel() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.tree2semi_rel", false]], "tree_to_treesegment() (in module nltk.draw.tree)": [[118, "nltk.draw.tree.tree_to_treesegment", false]], "treebankworddetokenizer (class in nltk.tokenize.treebank)": [[253, "nltk.tokenize.treebank.TreebankWordDetokenizer", false]], "treebankwordtokenizer (class in nltk.tokenize.treebank)": [[253, "nltk.tokenize.treebank.TreebankWordTokenizer", false]], "treeedge (class in nltk.parse.chart)": [[162, "nltk.parse.chart.TreeEdge", false]], "treepos() (nltk.corpus.reader.nombank.nombanktreepointer method)": [[81, "nltk.corpus.reader.nombank.NombankTreePointer.treepos", false]], "treepos() (nltk.corpus.reader.propbank.propbanktreepointer method)": [[89, "nltk.corpus.reader.propbank.PropbankTreePointer.treepos", false]], "treeposition() (nltk.tree.parented.parentedtree method)": [[277, "nltk.tree.parented.ParentedTree.treeposition", false]], "treeposition() (nltk.tree.parentedtree method)": [[275, "nltk.tree.ParentedTree.treeposition", false]], "treeposition_spanning_leaves() (nltk.tree.tree method)": [[275, "nltk.tree.Tree.treeposition_spanning_leaves", false]], "treeposition_spanning_leaves() (nltk.tree.tree.tree method)": [[282, "nltk.tree.tree.Tree.treeposition_spanning_leaves", false]], "treepositions() (nltk.tree.multiparentedtree method)": [[275, "nltk.tree.MultiParentedTree.treepositions", false]], "treepositions() (nltk.tree.parented.multiparentedtree method)": [[277, "nltk.tree.parented.MultiParentedTree.treepositions", false]], "treepositions() (nltk.tree.tree method)": [[275, "nltk.tree.Tree.treepositions", false]], "treepositions() (nltk.tree.tree.tree method)": [[282, "nltk.tree.tree.Tree.treepositions", false]], "treepositions_no_leaves() (in module nltk.tgrep)": [[235, "nltk.tgrep.treepositions_no_leaves", false]], "treeprettyprinter (class in nltk.tree)": [[275, "nltk.tree.TreePrettyPrinter", false]], "treeprettyprinter (class in nltk.tree.prettyprinter)": [[279, "nltk.tree.prettyprinter.TreePrettyPrinter", false]], "treeprettyprinter (class in nltk.treeprettyprinter)": [[283, "nltk.treeprettyprinter.TreePrettyPrinter", false]], "trees() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.trees", false]], "treesegmentwidget (class in nltk.draw.tree)": [[118, "nltk.draw.tree.TreeSegmentWidget", false]], "treeview (class in nltk.draw.tree)": [[118, "nltk.draw.tree.TreeView", false]], "treewidget (class in nltk.draw.tree)": [[118, "nltk.draw.tree.TreeWidget", false]], "trg_phrase (nltk.translate.api.phrasetableentry attribute)": [[257, "nltk.translate.api.PhraseTableEntry.trg_phrase", false]], "trg_sentence (nltk.translate.ibm_model.alignmentinfo attribute)": [[268, "nltk.translate.ibm_model.AlignmentInfo.trg_sentence", false]], "trie (class in nltk.collections)": [[52, "nltk.collections.Trie", false]], "trigramassocmeasures (class in nltk.metrics.association)": [[146, "nltk.metrics.association.TrigramAssocMeasures", false]], "trigramcollocationfinder (class in nltk.collocations)": [[53, "nltk.collocations.TrigramCollocationFinder", false]], "trigrams() (in module nltk.util)": [[291, "nltk.util.trigrams", false]], "trigramtagger (class in nltk.tag.sequential)": [[223, "nltk.tag.sequential.TrigramTagger", false]], "triples() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.triples", false]], "truthvaluetype (class in nltk.sem.logic)": [[191, "nltk.sem.logic.TruthValueType", false]], "try_port() (in module nltk.parse.corenlp)": [[163, "nltk.parse.corenlp.try_port", false]], "tup2tab() (nltk.tabdata.tabencoder method)": [[212, "nltk.tabdata.TabEncoder.tup2tab", false]], "tupdict2tab() (nltk.tabdata.maxentencoder method)": [[212, "nltk.tabdata.MaxentEncoder.tupdict2tab", false]], "tupkey2dict() (nltk.tabdata.maxentdecoder method)": [[212, "nltk.tabdata.MaxentDecoder.tupkey2dict", false]], "tuple2str() (in module nltk.tag.util)": [[226, "nltk.tag.util.tuple2str", false]], "tuples() (nltk.corpus.reader.ppattach.ppattachmentcorpusreader method)": [[88, "nltk.corpus.reader.ppattach.PPAttachmentCorpusReader.tuples", false]], "tuples() (nltk.corpus.reader.ppattachmentcorpusreader method)": [[57, "nltk.corpus.reader.PPAttachmentCorpusReader.tuples", false]], "tuples() (nltk.corpus.reader.string_category.stringcategorycorpusreader method)": [[97, "nltk.corpus.reader.string_category.StringCategoryCorpusReader.tuples", false]], "tuples() (nltk.corpus.reader.stringcategorycorpusreader method)": [[57, "nltk.corpus.reader.StringCategoryCorpusReader.tuples", false]], "tups2tab() (nltk.tabdata.tabencoder method)": [[212, "nltk.tabdata.TabEncoder.tups2tab", false]], "turns() (nltk.corpus.reader.switchboard.switchboardcorpusreader method)": [[98, "nltk.corpus.reader.switchboard.SwitchboardCorpusReader.turns", false]], "turns() (nltk.corpus.reader.switchboardcorpusreader method)": [[57, "nltk.corpus.reader.SwitchboardCorpusReader.turns", false]], "tweethandleri (class in nltk.twitter.api)": [[286, "nltk.twitter.api.TweetHandlerI", false]], "tweets() (nltk.twitter.twitterclient.twitter method)": [[289, "nltk.twitter.twitterclient.Twitter.tweets", false]], "tweets_by_user_demo() (in module nltk.twitter.twitter_demo)": [[288, "nltk.twitter.twitter_demo.tweets_by_user_demo", false]], "tweettokenizer (class in nltk.tokenize.casual)": [[238, "nltk.tokenize.casual.TweetTokenizer", false]], "tweetviewer (class in nltk.twitter.twitterclient)": [[289, "nltk.twitter.twitterclient.TweetViewer", false]], "tweetwriter (class in nltk.twitter.twitterclient)": [[289, "nltk.twitter.twitterclient.TweetWriter", false]], "twitter (class in nltk.twitter.twitterclient)": [[289, "nltk.twitter.twitterclient.Twitter", false]], "twitterclass_demo() (in module nltk.twitter.twitter_demo)": [[288, "nltk.twitter.twitter_demo.twitterclass_demo", false]], "twittercorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.TwitterCorpusReader", false]], "twittercorpusreader (class in nltk.corpus.reader.twitter)": [[102, "nltk.corpus.reader.twitter.TwitterCorpusReader", false]], "txt2list() (nltk.tabdata.tabdecoder method)": [[212, "nltk.tabdata.TabDecoder.txt2list", false]], "txt2set() (nltk.tabdata.tabdecoder method)": [[212, "nltk.tabdata.TabDecoder.txt2set", false]], "type (class in nltk.sem.logic)": [[191, "nltk.sem.logic.Type", false]], "type (nltk.sem.drt.drtexpression property)": [[184, "nltk.sem.drt.DrtExpression.type", false]], "type (nltk.sem.logic.applicationexpression property)": [[191, "nltk.sem.logic.ApplicationExpression.type", false]], "type (nltk.sem.logic.binaryexpression property)": [[191, "nltk.sem.logic.BinaryExpression.type", false]], "type (nltk.sem.logic.constantexpression attribute)": [[191, "nltk.sem.logic.ConstantExpression.type", false]], "type (nltk.sem.logic.eventvariableexpression attribute)": [[191, "nltk.sem.logic.EventVariableExpression.type", false]], "type (nltk.sem.logic.functionvariableexpression attribute)": [[191, "nltk.sem.logic.FunctionVariableExpression.type", false]], "type (nltk.sem.logic.individualvariableexpression property)": [[191, "nltk.sem.logic.IndividualVariableExpression.type", false]], "type (nltk.sem.logic.lambdaexpression property)": [[191, "nltk.sem.logic.LambdaExpression.type", false]], "type (nltk.sem.logic.negatedexpression property)": [[191, "nltk.sem.logic.NegatedExpression.type", false]], "type (nltk.sem.logic.quantifiedexpression property)": [[191, "nltk.sem.logic.QuantifiedExpression.type", false]], "type (nltk.tokenize.punkt.punkttoken attribute)": [[243, "nltk.tokenize.punkt.PunktToken.type", false]], "type_check (nltk.sem.logic.logicparser attribute)": [[191, "nltk.sem.logic.LogicParser.type_check", false]], "type_no_period (nltk.tokenize.punkt.punkttoken property)": [[243, "nltk.tokenize.punkt.PunktToken.type_no_period", false]], "type_no_sentperiod (nltk.tokenize.punkt.punkttoken property)": [[243, "nltk.tokenize.punkt.PunktToken.type_no_sentperiod", false]], "typecheck() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.typecheck", false]], "typecheck() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.typecheck", false]], "typecheck() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.typecheck", false]], "typedmaxentfeatureencoding (class in nltk.classify.maxent)": [[33, "nltk.classify.maxent.TypedMaxentFeatureEncoding", false]], "typeexception": [[191, "nltk.sem.logic.TypeException", false]], "typeresolutionexception": [[191, "nltk.sem.logic.TypeResolutionException", false]], "udhrcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.UdhrCorpusReader", false]], "udhrcorpusreader (class in nltk.corpus.reader.udhr)": [[103, "nltk.corpus.reader.udhr.UdhrCorpusReader", false]], "un_chomsky_normal_form() (in module nltk.tree)": [[275, "nltk.tree.un_chomsky_normal_form", false]], "un_chomsky_normal_form() (in module nltk.tree.transforms)": [[281, "nltk.tree.transforms.un_chomsky_normal_form", false]], "un_chomsky_normal_form() (in module nltk.treetransforms)": [[284, "nltk.treetransforms.un_chomsky_normal_form", false]], "un_chomsky_normal_form() (nltk.tree.tree method)": [[275, "nltk.tree.Tree.un_chomsky_normal_form", false]], "un_chomsky_normal_form() (nltk.tree.tree.tree method)": [[282, "nltk.tree.tree.Tree.un_chomsky_normal_form", false]], "unary_concept() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.unary_concept", false]], "unbind_click() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.unbind_click", false]], "unbind_drag() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.unbind_drag", false]], "unchunkrule (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.UnChunkRule", false]], "uncurry() (nltk.sem.logic.applicationexpression method)": [[191, "nltk.sem.logic.ApplicationExpression.uncurry", false]], "undefined": [[186, "nltk.sem.evaluate.Undefined", false]], "undirectedbinarycombinator (class in nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.UndirectedBinaryCombinator", false]], "undirectedcomposition (class in nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.UndirectedComposition", false]], "undirectedfunctionapplication (class in nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.UndirectedFunctionApplication", false]], "undirectedsubstitution (class in nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.UndirectedSubstitution", false]], "undirectedtyperaise (class in nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.UndirectedTypeRaise", false]], "undo() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.undo", false]], "unexpectedtokenexception": [[191, "nltk.sem.logic.UnexpectedTokenException", false]], "unicharscorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.UnicharsCorpusReader", false]], "unicharscorpusreader (class in nltk.corpus.reader.wordlist)": [[106, "nltk.corpus.reader.wordlist.UnicharsCorpusReader", false]], "unificationexception": [[129, "nltk.inference.resolution.UnificationException", false], [190, "nltk.sem.linearlogic.UnificationException", false]], "uniformprobdist (class in nltk.probability)": [[179, "nltk.probability.UniformProbDist", false]], "unify() (in module nltk.featstruct)": [[120, "nltk.featstruct.unify", false]], "unify() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.unify", false]], "unify() (nltk.inference.resolution.clause method)": [[129, "nltk.inference.resolution.Clause.unify", false]], "unify() (nltk.sem.linearlogic.constantexpression method)": [[190, "nltk.sem.linearlogic.ConstantExpression.unify", false]], "unify() (nltk.sem.linearlogic.impexpression method)": [[190, "nltk.sem.linearlogic.ImpExpression.unify", false]], "unify() (nltk.sem.linearlogic.variableexpression method)": [[190, "nltk.sem.linearlogic.VariableExpression.unify", false]], "unify_base_values() (nltk.featstruct.feature method)": [[120, "nltk.featstruct.Feature.unify_base_values", false]], "unify_base_values() (nltk.featstruct.rangefeature method)": [[120, "nltk.featstruct.RangeFeature.unify_base_values", false]], "unigram_score() (nltk.lm.api.smoothing method)": [[136, "nltk.lm.api.Smoothing.unigram_score", false]], "unigram_score() (nltk.lm.smoothing.absolutediscounting method)": [[140, "nltk.lm.smoothing.AbsoluteDiscounting.unigram_score", false]], "unigram_score() (nltk.lm.smoothing.kneserney method)": [[140, "nltk.lm.smoothing.KneserNey.unigram_score", false]], "unigram_score() (nltk.lm.smoothing.wittenbell method)": [[140, "nltk.lm.smoothing.WittenBell.unigram_score", false]], "unigram_word_feats() (nltk.sentiment.sentiment_analyzer.sentimentanalyzer method)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer.unigram_word_feats", false]], "unigrams (in module nltk.metrics.association)": [[146, "nltk.metrics.association.UNIGRAMS", false]], "unigramtagger (class in nltk.tag.sequential)": [[223, "nltk.tag.sequential.UnigramTagger", false]], "unique_ancestors() (in module nltk.tgrep)": [[235, "nltk.tgrep.unique_ancestors", false]], "unique_list() (in module nltk.util)": [[291, "nltk.util.unique_list", false]], "unique_names_demo() (in module nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.unique_names_demo", false]], "unique_variable() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.unique_variable", false]], "uniquenamesprover (class in nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.UniqueNamesProver", false]], "unmark() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.unmark", false]], "unmasked_score() (nltk.lm.api.languagemodel method)": [[136, "nltk.lm.api.LanguageModel.unmasked_score", false]], "unmasked_score() (nltk.lm.lidstone method)": [[135, "nltk.lm.Lidstone.unmasked_score", false]], "unmasked_score() (nltk.lm.mle method)": [[135, "nltk.lm.MLE.unmasked_score", false]], "unmasked_score() (nltk.lm.models.interpolatedlanguagemodel method)": [[138, "nltk.lm.models.InterpolatedLanguageModel.unmasked_score", false]], "unmasked_score() (nltk.lm.models.lidstone method)": [[138, "nltk.lm.models.Lidstone.unmasked_score", false]], "unmasked_score() (nltk.lm.models.mle method)": [[138, "nltk.lm.models.MLE.unmasked_score", false]], "unmasked_score() (nltk.lm.models.stupidbackoff method)": [[138, "nltk.lm.models.StupidBackoff.unmasked_score", false]], "unmasked_score() (nltk.lm.stupidbackoff method)": [[135, "nltk.lm.StupidBackoff.unmasked_score", false]], "unparseableinputexception": [[181, "nltk.sem.boxer.UnparseableInputException", false]], "unsortedchartparser (class in nltk.parse.pchart)": [[171, "nltk.parse.pchart.UnsortedChartParser", false]], "untag() (in module nltk.tag.util)": [[226, "nltk.tag.util.untag", false]], "untried_expandable_productions() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.untried_expandable_productions", false]], "untried_match() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.untried_match", false]], "unweighted_minimum_spanning_dict() (in module nltk.util)": [[291, "nltk.util.unweighted_minimum_spanning_dict", false]], "unweighted_minimum_spanning_digraph() (in module nltk.util)": [[291, "nltk.util.unweighted_minimum_spanning_digraph", false]], "unweighted_minimum_spanning_tree() (in module nltk.util)": [[291, "nltk.util.unweighted_minimum_spanning_tree", false]], "unwrap() (nltk.internals.elementwrapper method)": [[131, "nltk.internals.ElementWrapper.unwrap", false]], "unzip (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.unzip", false]], "unzip() (in module nltk.downloader)": [[113, "nltk.downloader.unzip", false]], "unzipped_size (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.unzipped_size", false]], "update() (in module nltk.downloader)": [[113, "nltk.downloader.update", false]], "update() (nltk.collections.ordereddict method)": [[52, "nltk.collections.OrderedDict.update", false]], "update() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.update", false]], "update() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.update", false]], "update() (nltk.featstruct.featdict method)": [[120, "nltk.featstruct.FeatDict.update", false]], "update() (nltk.lm.counter.ngramcounter method)": [[137, "nltk.lm.counter.NgramCounter.update", false]], "update() (nltk.lm.ngramcounter method)": [[135, "nltk.lm.NgramCounter.update", false]], "update() (nltk.lm.vocabulary method)": [[135, "nltk.lm.Vocabulary.update", false]], "update() (nltk.lm.vocabulary.vocabulary method)": [[142, "nltk.lm.vocabulary.Vocabulary.update", false]], "update() (nltk.metrics.paice.paice method)": [[149, "nltk.metrics.paice.Paice.update", false]], "update() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.update", false]], "update() (nltk.probability.mutableprobdist method)": [[179, "nltk.probability.MutableProbDist.update", false]], "update() (nltk.tag.perceptron.averagedperceptron method)": [[221, "nltk.tag.perceptron.AveragedPerceptron.update", false]], "update_alignment() (nltk.translate.ibm2.model2counts method)": [[264, "nltk.translate.ibm2.Model2Counts.update_alignment", false]], "update_clusters() (nltk.cluster.gaac.gaaclusterer method)": [[49, "nltk.cluster.gaac.GAAClusterer.update_clusters", false]], "update_distortion() (nltk.translate.ibm3.model3counts method)": [[265, "nltk.translate.ibm3.Model3Counts.update_distortion", false]], "update_distortion() (nltk.translate.ibm4.model4counts method)": [[266, "nltk.translate.ibm4.Model4Counts.update_distortion", false]], "update_edge_scores() (nltk.parse.nonprojectivedependencyparser.probabilisticnonprojectiveparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser.update_edge_scores", false]], "update_fertility() (nltk.translate.ibm_model.counts method)": [[268, "nltk.translate.ibm_model.Counts.update_fertility", false]], "update_lexical_translation() (nltk.translate.ibm2.model2counts method)": [[264, "nltk.translate.ibm2.Model2Counts.update_lexical_translation", false]], "update_lexical_translation() (nltk.translate.ibm_model.counts method)": [[268, "nltk.translate.ibm_model.Counts.update_lexical_translation", false]], "update_null_generation() (nltk.translate.ibm_model.counts method)": [[268, "nltk.translate.ibm_model.Counts.update_null_generation", false]], "update_vacancy() (nltk.translate.ibm5.model5counts method)": [[267, "nltk.translate.ibm5.Model5Counts.update_vacancy", false]], "upenn_tagset() (in module nltk.help)": [[122, "nltk.help.upenn_tagset", false]], "uptodatemessage (class in nltk.downloader)": [[113, "nltk.downloader.UpToDateMessage", false]], "url (nltk.downloader.downloader property)": [[113, "nltk.downloader.Downloader.url", false]], "url (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.url", false]], "url_foe_1 (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.URL_FOE_1", false]], "url_foe_2 (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.URL_FOE_2", false]], "url_foe_3 (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.URL_FOE_3", false]], "url_foe_4 (nltk.tokenize.toktok.toktoktokenizer attribute)": [[252, "nltk.tokenize.toktok.ToktokTokenizer.URL_FOE_4", false]], "user_info_from_id() (nltk.twitter.twitterclient.query method)": [[289, "nltk.twitter.twitterclient.Query.user_info_from_id", false]], "user_tweets() (nltk.twitter.twitterclient.query method)": [[289, "nltk.twitter.twitterclient.Query.user_tweets", false]], "utcoffset() (nltk.twitter.api.localtimezoneoffsetwithutc method)": [[286, "nltk.twitter.api.LocalTimezoneOffsetWithUTC.utcoffset", false]], "utterance() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.utterance", false]], "utterance() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.utterance", false]], "utteranceids() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.utteranceids", false]], "utteranceids() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.utteranceids", false]], "v() (in module nltk.metrics.aline)": [[145, "nltk.metrics.aline.V", false]], "vacancies_at() (nltk.translate.ibm5.slots method)": [[267, "nltk.translate.ibm5.Slots.vacancies_at", false]], "vaderconstants (class in nltk.sentiment.vader)": [[198, "nltk.sentiment.vader.VaderConstants", false]], "val2str() (nltk.corpus.reader.bcp47.bcp47corpusreader method)": [[60, "nltk.corpus.reader.bcp47.BCP47CorpusReader.val2str", false]], "val2str() (nltk.corpus.reader.bcp47corpusreader method)": [[57, "nltk.corpus.reader.BCP47CorpusReader.val2str", false]], "val_dump() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.val_dump", false]], "val_load() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.val_load", false]], "valid_phrases() (nltk.translate.stack_decoder.stackdecoder static method)": [[274, "nltk.translate.stack_decoder.StackDecoder.valid_phrases", false]], "validate_sig_len() (nltk.inference.nonmonotonic.predholder method)": [[127, "nltk.inference.nonmonotonic.PredHolder.validate_sig_len", false]], "validate_syllables() (nltk.tokenize.sonority_sequencing.syllabletokenizer method)": [[248, "nltk.tokenize.sonority_sequencing.SyllableTokenizer.validate_syllables", false]], "valuation (class in nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.Valuation", false]], "valuation (nltk.inference.mace.macecommand property)": [[126, "nltk.inference.mace.MaceCommand.valuation", false]], "value_handlers (nltk.featstruct.featstructreader attribute)": [[120, "nltk.featstruct.FeatStructReader.VALUE_HANDLERS", false]], "values() (nltk.collections.ordereddict method)": [[52, "nltk.collections.OrderedDict.values", false]], "variable (class in nltk.sem.logic)": [[191, "nltk.sem.logic.Variable", false]], "variable_types() (nltk.sem.boxer.abstractboxerdrs method)": [[181, "nltk.sem.boxer.AbstractBoxerDrs.variable_types", false]], "variablebinderexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.VariableBinderExpression", false]], "variablebindingexception": [[190, "nltk.sem.linearlogic.VariableBindingException", false]], "variableexpression (class in nltk.sem.linearlogic)": [[190, "nltk.sem.linearlogic.VariableExpression", false]], "variableexpression() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.VariableExpression", false]], "variables() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.variables", false]], "variables() (nltk.parse.featurechart.featuretreeedge method)": [[167, "nltk.parse.featurechart.FeatureTreeEdge.variables", false]], "variables() (nltk.sem.boxer.abstractboxerdrs method)": [[181, "nltk.sem.boxer.AbstractBoxerDrs.variables", false]], "variables() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.variables", false]], "variables() (nltk.sem.logic.substitutebindingsi method)": [[191, "nltk.sem.logic.SubstituteBindingsI.variables", false]], "variance_characters (nltk.translate.gale_church.languageindependent attribute)": [[260, "nltk.translate.gale_church.LanguageIndependent.VARIANCE_CHARACTERS", false]], "vector() (nltk.cluster.util.vectorspaceclusterer method)": [[51, "nltk.cluster.util.VectorSpaceClusterer.vector", false]], "vectorspaceclusterer (class in nltk.cluster.util)": [[51, "nltk.cluster.util.VectorSpaceClusterer", false]], "verb (nltk.corpus.reader.conll.conllsrlinstance attribute)": [[69, "nltk.corpus.reader.conll.ConllSRLInstance.verb", false]], "verb (nltk.corpus.reader.wordnet.wordnetcorpusreader attribute)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.VERB", false]], "verb (nltk.corpus.reader.wordnetcorpusreader attribute)": [[57, "nltk.corpus.reader.WordNetCorpusReader.VERB", false]], "verb() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.verb", false]], "verb() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.verb", false]], "verb_head (nltk.corpus.reader.conll.conllsrlinstance attribute)": [[69, "nltk.corpus.reader.conll.ConllSRLInstance.verb_head", false]], "verb_t1() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.verb_t1", false]], "verb_t1() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.verb_t1", false]], "verb_t2() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.verb_t2", false]], "verb_t2() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.verb_t2", false]], "verb_t3() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.verb_t3", false]], "verb_t3() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.verb_t3", false]], "verb_t4() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.verb_t4", false]], "verb_t4() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.verb_t4", false]], "verb_t5() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.verb_t5", false]], "verb_t5() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.verb_t5", false]], "verb_t6() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.verb_t6", false]], "verb_t6() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.verb_t6", false]], "verbnetcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.VerbnetCorpusReader", false]], "verbnetcorpusreader (class in nltk.corpus.reader.verbnet)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader", false]], "verbose() (in module nltk.twitter.twitter_demo)": [[288, "nltk.twitter.twitter_demo.verbose", false]], "verbs() (nltk.corpus.reader.propbank.propbankcorpusreader method)": [[89, "nltk.corpus.reader.propbank.PropbankCorpusReader.verbs", false]], "verbs() (nltk.corpus.reader.propbankcorpusreader method)": [[57, "nltk.corpus.reader.PropbankCorpusReader.verbs", false]], "view() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.view", false]], "visit() (nltk.sem.drt.drs method)": [[184, "nltk.sem.drt.DRS.visit", false]], "visit() (nltk.sem.drt.drtconcatenation method)": [[184, "nltk.sem.drt.DrtConcatenation.visit", false]], "visit() (nltk.sem.drt.drtproposition method)": [[184, "nltk.sem.drt.DrtProposition.visit", false]], "visit() (nltk.sem.logic.applicationexpression method)": [[191, "nltk.sem.logic.ApplicationExpression.visit", false]], "visit() (nltk.sem.logic.binaryexpression method)": [[191, "nltk.sem.logic.BinaryExpression.visit", false]], "visit() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.visit", false]], "visit() (nltk.sem.logic.negatedexpression method)": [[191, "nltk.sem.logic.NegatedExpression.visit", false]], "visit() (nltk.sem.logic.variablebinderexpression method)": [[191, "nltk.sem.logic.VariableBinderExpression.visit", false]], "visit_structured() (nltk.sem.drt.drs method)": [[184, "nltk.sem.drt.DRS.visit_structured", false]], "visit_structured() (nltk.sem.drt.drtproposition method)": [[184, "nltk.sem.drt.DrtProposition.visit_structured", false]], "visit_structured() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.visit_structured", false]], "visit_structured() (nltk.sem.logic.variablebinderexpression method)": [[191, "nltk.sem.logic.VariableBinderExpression.visit_structured", false]], "viterbiparser (class in nltk.parse.viterbi)": [[178, "nltk.parse.viterbi.ViterbiParser", false]], "vnclass() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.vnclass", false]], "vnclass() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.vnclass", false]], "vocab() (nltk.text.text method)": [[234, "nltk.text.Text.vocab", false]], "vocabulary (class in nltk.lm)": [[135, "nltk.lm.Vocabulary", false]], "vocabulary (class in nltk.lm.vocabulary)": [[142, "nltk.lm.vocabulary.Vocabulary", false]], "walk() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.walk", false]], "warnings() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.warnings", false]], "warnings() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.warnings", false]], "wav() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.wav", false]], "wav() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.wav", false]], "waw() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.waw", false]], "webview_file() (nltk.corpus.reader.childes.childescorpusreader method)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.webview_file", false]], "webview_file() (nltk.corpus.reader.childescorpusreader method)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.webview_file", false]], "weighted_kappa() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.weighted_kappa", false]], "weighted_kappa_pairwise() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.weighted_kappa_pairwise", false]], "weights() (nltk.classify.maxent.maxentclassifier method)": [[33, "nltk.classify.maxent.MaxentClassifier.weights", false]], "wekaclassifier (class in nltk.classify.weka)": [[44, "nltk.classify.weka.WekaClassifier", false]], "whitespacetokenizer (class in nltk.tokenize.regexp)": [[244, "nltk.tokenize.regexp.WhitespaceTokenizer", false]], "width() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.width", false]], "wiki_dict() (nltk.corpus.reader.bcp47.bcp47corpusreader method)": [[60, "nltk.corpus.reader.bcp47.BCP47CorpusReader.wiki_dict", false]], "wiki_dict() (nltk.corpus.reader.bcp47corpusreader method)": [[57, "nltk.corpus.reader.BCP47CorpusReader.wiki_dict", false]], "windowdiff() (in module nltk.metrics.segmentation)": [[151, "nltk.metrics.segmentation.windowdiff", false]], "wittenbell (class in nltk.lm.smoothing)": [[140, "nltk.lm.smoothing.WittenBell", false]], "wittenbellinterpolated (class in nltk.lm)": [[135, "nltk.lm.WittenBellInterpolated", false]], "wittenbellinterpolated (class in nltk.lm.models)": [[138, "nltk.lm.models.WittenBellInterpolated", false]], "wittenbellprobdist (class in nltk.probability)": [[179, "nltk.probability.WittenBellProbDist", false]], "word (class in nltk.tag.brill)": [[215, "nltk.tag.brill.Word", false]], "word_finder() (in module nltk.misc.wordfinder)": [[158, "nltk.misc.wordfinder.word_finder", false]], "word_path (nltk.corpus.reader.mte.mtefilereader attribute)": [[79, "nltk.corpus.reader.mte.MTEFileReader.word_path", false]], "word_penalty (nltk.translate.stack_decoder.stackdecoder attribute)": [[274, "nltk.translate.stack_decoder.StackDecoder.word_penalty", false]], "word_rank_alignment() (in module nltk.translate.ribes_score)": [[273, "nltk.translate.ribes_score.word_rank_alignment", false]], "word_re (nltk.tokenize.casual.tweettokenizer property)": [[238, "nltk.tokenize.casual.TweetTokenizer.WORD_RE", false]], "word_similarity_dict() (nltk.text.contextindex method)": [[234, "nltk.text.ContextIndex.word_similarity_dict", false]], "word_times() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.word_times", false]], "word_times() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.word_times", false]], "word_tokenize() (in module nltk.tokenize)": [[236, "nltk.tokenize.word_tokenize", false]], "word_tokenize() (nltk.tokenize.punkt.punktlanguagevars method)": [[243, "nltk.tokenize.punkt.PunktLanguageVars.word_tokenize", false]], "wordfinder() (in module nltk.misc.wordfinder)": [[158, "nltk.misc.wordfinder.wordfinder", false]], "wordlistcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.WordListCorpusReader", false]], "wordlistcorpusreader (class in nltk.corpus.reader.wordlist)": [[106, "nltk.corpus.reader.wordlist.WordListCorpusReader", false]], "wordnetcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.WordNetCorpusReader", false]], "wordnetcorpusreader (class in nltk.corpus.reader.wordnet)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader", false]], "wordneterror": [[107, "nltk.corpus.reader.wordnet.WordNetError", false]], "wordneticcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.WordNetICCorpusReader", false]], "wordneticcorpusreader (class in nltk.corpus.reader.wordnet)": [[107, "nltk.corpus.reader.wordnet.WordNetICCorpusReader", false]], "wordnetids() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.wordnetids", false]], "wordnetids() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.wordnetids", false]], "wordnetlemmatizer (class in nltk.stem.wordnet)": [[211, "nltk.stem.wordnet.WordNetLemmatizer", false]], "wordnetsyn_match() (in module nltk.translate.meteor_score)": [[269, "nltk.translate.meteor_score.wordnetsyn_match", false]], "wordnum (nltk.corpus.reader.nombank.nombankinstance attribute)": [[81, "nltk.corpus.reader.nombank.NombankInstance.wordnum", false]], "wordnum (nltk.corpus.reader.propbank.propbankinstance attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.wordnum", false]], "wordpunct_tokenize() (in module nltk.tokenize.regexp)": [[244, "nltk.tokenize.regexp.wordpunct_tokenize", false]], "wordpuncttokenizer (class in nltk.tokenize.regexp)": [[244, "nltk.tokenize.regexp.WordPunctTokenizer", false]], "words (nltk.corpus.reader.conll.conllcorpusreader attribute)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.WORDS", false]], "words (nltk.corpus.reader.conll.conllsrlinstance attribute)": [[69, "nltk.corpus.reader.conll.ConllSRLInstance.words", false]], "words (nltk.corpus.reader.conllcorpusreader attribute)": [[57, "nltk.corpus.reader.ConllCorpusReader.WORDS", false]], "words (nltk.corpus.reader.markdown.markdownblock property)": [[78, "nltk.corpus.reader.markdown.MarkdownBlock.words", false]], "words (nltk.translate.api.alignedsent property)": [[257, "nltk.translate.api.AlignedSent.words", false]], "words() (nltk.corpus.reader.aligned.alignedcorpusreader method)": [[58, "nltk.corpus.reader.aligned.AlignedCorpusReader.words", false]], "words() (nltk.corpus.reader.alignedcorpusreader method)": [[57, "nltk.corpus.reader.AlignedCorpusReader.words", false]], "words() (nltk.corpus.reader.api.categorizedcorpusreader method)": [[59, "nltk.corpus.reader.api.CategorizedCorpusReader.words", false]], "words() (nltk.corpus.reader.api.syntaxcorpusreader method)": [[59, "nltk.corpus.reader.api.SyntaxCorpusReader.words", false]], "words() (nltk.corpus.reader.bnc.bnccorpusreader method)": [[61, "nltk.corpus.reader.bnc.BNCCorpusReader.words", false]], "words() (nltk.corpus.reader.bnccorpusreader method)": [[57, "nltk.corpus.reader.BNCCorpusReader.words", false]], "words() (nltk.corpus.reader.categorized_sents.categorizedsentencescorpusreader method)": [[63, "nltk.corpus.reader.categorized_sents.CategorizedSentencesCorpusReader.words", false]], "words() (nltk.corpus.reader.categorizedcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedCorpusReader.words", false]], "words() (nltk.corpus.reader.categorizedsentencescorpusreader method)": [[57, "nltk.corpus.reader.CategorizedSentencesCorpusReader.words", false]], "words() (nltk.corpus.reader.chasen.chasencorpusreader method)": [[64, "nltk.corpus.reader.chasen.ChasenCorpusReader.words", false]], "words() (nltk.corpus.reader.chasencorpusreader method)": [[57, "nltk.corpus.reader.ChasenCorpusReader.words", false]], "words() (nltk.corpus.reader.childes.childescorpusreader method)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.words", false]], "words() (nltk.corpus.reader.childescorpusreader method)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.words", false]], "words() (nltk.corpus.reader.chunked.chunkedcorpusreader method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusReader.words", false]], "words() (nltk.corpus.reader.chunkedcorpusreader method)": [[57, "nltk.corpus.reader.ChunkedCorpusReader.words", false]], "words() (nltk.corpus.reader.cmudict.cmudictcorpusreader method)": [[67, "nltk.corpus.reader.cmudict.CMUDictCorpusReader.words", false]], "words() (nltk.corpus.reader.cmudictcorpusreader method)": [[57, "nltk.corpus.reader.CMUDictCorpusReader.words", false]], "words() (nltk.corpus.reader.comparative_sents.comparativesentencescorpusreader method)": [[68, "nltk.corpus.reader.comparative_sents.ComparativeSentencesCorpusReader.words", false]], "words() (nltk.corpus.reader.comparativesentencescorpusreader method)": [[57, "nltk.corpus.reader.ComparativeSentencesCorpusReader.words", false]], "words() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.words", false]], "words() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.words", false]], "words() (nltk.corpus.reader.dependency.dependencycorpusreader method)": [[71, "nltk.corpus.reader.dependency.DependencyCorpusReader.words", false]], "words() (nltk.corpus.reader.dependencycorpusreader method)": [[57, "nltk.corpus.reader.DependencyCorpusReader.words", false]], "words() (nltk.corpus.reader.indian.indiancorpusreader method)": [[74, "nltk.corpus.reader.indian.IndianCorpusReader.words", false]], "words() (nltk.corpus.reader.indiancorpusreader method)": [[57, "nltk.corpus.reader.IndianCorpusReader.words", false]], "words() (nltk.corpus.reader.ipipan.ipipancorpusreader method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader.words", false]], "words() (nltk.corpus.reader.ipipancorpusreader method)": [[57, "nltk.corpus.reader.IPIPANCorpusReader.words", false]], "words() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.words", false]], "words() (nltk.corpus.reader.mte.mtecorpusreader method)": [[79, "nltk.corpus.reader.mte.MTECorpusReader.words", false]], "words() (nltk.corpus.reader.mte.mtefilereader method)": [[79, "nltk.corpus.reader.mte.MTEFileReader.words", false]], "words() (nltk.corpus.reader.mtecorpusreader method)": [[57, "nltk.corpus.reader.MTECorpusReader.words", false]], "words() (nltk.corpus.reader.nkjp.nkjpcorpusreader method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.words", false]], "words() (nltk.corpus.reader.nkjpcorpusreader method)": [[57, "nltk.corpus.reader.NKJPCorpusReader.words", false]], "words() (nltk.corpus.reader.nonbreakingprefixescorpusreader method)": [[57, "nltk.corpus.reader.NonbreakingPrefixesCorpusReader.words", false]], "words() (nltk.corpus.reader.nps_chat.npschatcorpusreader method)": [[82, "nltk.corpus.reader.nps_chat.NPSChatCorpusReader.words", false]], "words() (nltk.corpus.reader.npschatcorpusreader method)": [[57, "nltk.corpus.reader.NPSChatCorpusReader.words", false]], "words() (nltk.corpus.reader.opinion_lexicon.opinionlexiconcorpusreader method)": [[83, "nltk.corpus.reader.opinion_lexicon.OpinionLexiconCorpusReader.words", false]], "words() (nltk.corpus.reader.opinionlexiconcorpusreader method)": [[57, "nltk.corpus.reader.OpinionLexiconCorpusReader.words", false]], "words() (nltk.corpus.reader.pl196x.pl196xcorpusreader method)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader.words", false]], "words() (nltk.corpus.reader.pl196xcorpusreader method)": [[57, "nltk.corpus.reader.Pl196xCorpusReader.words", false]], "words() (nltk.corpus.reader.plaintext.plaintextcorpusreader method)": [[87, "nltk.corpus.reader.plaintext.PlaintextCorpusReader.words", false]], "words() (nltk.corpus.reader.plaintextcorpusreader method)": [[57, "nltk.corpus.reader.PlaintextCorpusReader.words", false]], "words() (nltk.corpus.reader.pros_cons.prosconscorpusreader method)": [[90, "nltk.corpus.reader.pros_cons.ProsConsCorpusReader.words", false]], "words() (nltk.corpus.reader.prosconscorpusreader method)": [[57, "nltk.corpus.reader.ProsConsCorpusReader.words", false]], "words() (nltk.corpus.reader.reviews.reviewscorpusreader method)": [[91, "nltk.corpus.reader.reviews.ReviewsCorpusReader.words", false]], "words() (nltk.corpus.reader.reviewscorpusreader method)": [[57, "nltk.corpus.reader.ReviewsCorpusReader.words", false]], "words() (nltk.corpus.reader.semcor.semcorcorpusreader method)": [[93, "nltk.corpus.reader.semcor.SemcorCorpusReader.words", false]], "words() (nltk.corpus.reader.semcorcorpusreader method)": [[57, "nltk.corpus.reader.SemcorCorpusReader.words", false]], "words() (nltk.corpus.reader.switchboard.switchboardcorpusreader method)": [[98, "nltk.corpus.reader.switchboard.SwitchboardCorpusReader.words", false]], "words() (nltk.corpus.reader.switchboardcorpusreader method)": [[57, "nltk.corpus.reader.SwitchboardCorpusReader.words", false]], "words() (nltk.corpus.reader.syntaxcorpusreader method)": [[57, "nltk.corpus.reader.SyntaxCorpusReader.words", false]], "words() (nltk.corpus.reader.tagged.taggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.TaggedCorpusReader.words", false]], "words() (nltk.corpus.reader.taggedcorpusreader method)": [[57, "nltk.corpus.reader.TaggedCorpusReader.words", false]], "words() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.words", false]], "words() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.words", false]], "words() (nltk.corpus.reader.toolbox.toolboxcorpusreader method)": [[101, "nltk.corpus.reader.toolbox.ToolboxCorpusReader.words", false]], "words() (nltk.corpus.reader.toolboxcorpusreader method)": [[57, "nltk.corpus.reader.ToolboxCorpusReader.words", false]], "words() (nltk.corpus.reader.wordlist.nonbreakingprefixescorpusreader method)": [[106, "nltk.corpus.reader.wordlist.NonbreakingPrefixesCorpusReader.words", false]], "words() (nltk.corpus.reader.wordlist.wordlistcorpusreader method)": [[106, "nltk.corpus.reader.wordlist.WordListCorpusReader.words", false]], "words() (nltk.corpus.reader.wordlistcorpusreader method)": [[57, "nltk.corpus.reader.WordListCorpusReader.words", false]], "words() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.words", false]], "words() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.words", false]], "words() (nltk.corpus.reader.xmlcorpusreader method)": [[57, "nltk.corpus.reader.XMLCorpusReader.words", false]], "words() (nltk.corpus.reader.xmldocs.xmlcorpusreader method)": [[108, "nltk.corpus.reader.xmldocs.XMLCorpusReader.words", false]], "words() (nltk.corpus.reader.ycoe.ycoecorpusreader method)": [[109, "nltk.corpus.reader.ycoe.YCOECorpusReader.words", false]], "words() (nltk.corpus.reader.ycoecorpusreader method)": [[57, "nltk.corpus.reader.YCOECorpusReader.words", false]], "words_by_iso639() (nltk.corpus.reader.panlex_swadesh.panlexswadeshcorpusreader method)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexSwadeshCorpusReader.words_by_iso639", false]], "words_by_iso639() (nltk.corpus.reader.panlexswadeshcorpusreader method)": [[57, "nltk.corpus.reader.PanlexSwadeshCorpusReader.words_by_iso639", false]], "words_by_lang() (nltk.corpus.reader.panlex_swadesh.panlexswadeshcorpusreader method)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexSwadeshCorpusReader.words_by_lang", false]], "words_by_lang() (nltk.corpus.reader.panlexswadeshcorpusreader method)": [[57, "nltk.corpus.reader.PanlexSwadeshCorpusReader.words_by_lang", false]], "words_mode (nltk.corpus.reader.ipipan.ipipancorpusview attribute)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusView.WORDS_MODE", false]], "words_mode (nltk.corpus.reader.nkjp.nkjpcorpusreader attribute)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.WORDS_MODE", false]], "words_mode (nltk.corpus.reader.nkjpcorpusreader attribute)": [[57, "nltk.corpus.reader.NKJPCorpusReader.WORDS_MODE", false]], "workspace_markprod() (nltk.draw.cfg.cfgdemo method)": [[115, "nltk.draw.cfg.CFGDemo.workspace_markprod", false]], "write() (nltk.classify.weka.arff_formatter method)": [[44, "nltk.classify.weka.ARFF_Formatter.write", false]], "write() (nltk.data.openondemandzipfile method)": [[111, "nltk.data.OpenOnDemandZipFile.write", false]], "write_megam_file() (in module nltk.classify.megam)": [[34, "nltk.classify.megam.write_megam_file", false]], "write_tadm_file() (in module nltk.classify.tadm)": [[41, "nltk.classify.tadm.write_tadm_file", false]], "writestr() (nltk.data.openondemandzipfile method)": [[111, "nltk.data.OpenOnDemandZipFile.writestr", false]], "wsd_demo() (in module nltk.classify.util)": [[43, "nltk.classify.util.wsd_demo", false]], "wup_similarity() (in module nltk.corpus.reader.wordnet)": [[107, "nltk.corpus.reader.wordnet.wup_similarity", false]], "wup_similarity() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.wup_similarity", false]], "wup_similarity() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.wup_similarity", false]], "wup_similarity() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.wup_similarity", false]], "xform() (nltk.chunk.regexp.chunkstring method)": [[28, "nltk.chunk.regexp.ChunkString.xform", false]], "xml() (nltk.corpus.reader.pl196x.pl196xcorpusreader method)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader.xml", false]], "xml() (nltk.corpus.reader.pl196xcorpusreader method)": [[57, "nltk.corpus.reader.Pl196xCorpusReader.xml", false]], "xml() (nltk.corpus.reader.toolbox.toolboxcorpusreader method)": [[101, "nltk.corpus.reader.toolbox.ToolboxCorpusReader.xml", false]], "xml() (nltk.corpus.reader.toolboxcorpusreader method)": [[57, "nltk.corpus.reader.ToolboxCorpusReader.xml", false]], "xml() (nltk.corpus.reader.xmlcorpusreader method)": [[57, "nltk.corpus.reader.XMLCorpusReader.xml", false]], "xml() (nltk.corpus.reader.xmldocs.xmlcorpusreader method)": [[108, "nltk.corpus.reader.xmldocs.XMLCorpusReader.xml", false]], "xml_escape() (in module nltk.tokenize.util)": [[254, "nltk.tokenize.util.xml_escape", false]], "xml_ns (nltk.corpus.reader.mte.mtefilereader attribute)": [[79, "nltk.corpus.reader.mte.MTEFileReader.xml_ns", false]], "xml_posts() (nltk.corpus.reader.nps_chat.npschatcorpusreader method)": [[82, "nltk.corpus.reader.nps_chat.NPSChatCorpusReader.xml_posts", false]], "xml_posts() (nltk.corpus.reader.npschatcorpusreader method)": [[57, "nltk.corpus.reader.NPSChatCorpusReader.xml_posts", false]], "xml_tool (class in nltk.corpus.reader.nkjp)": [[80, "nltk.corpus.reader.nkjp.XML_Tool", false]], "xml_unescape() (in module nltk.tokenize.util)": [[254, "nltk.tokenize.util.xml_unescape", false]], "xmlcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.XMLCorpusReader", false]], "xmlcorpusreader (class in nltk.corpus.reader.xmldocs)": [[108, "nltk.corpus.reader.xmldocs.XMLCorpusReader", false]], "xmlcorpusview (class in nltk.corpus.reader.xmldocs)": [[108, "nltk.corpus.reader.xmldocs.XMLCorpusView", false]], "xmlinfo() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.xmlinfo", false]], "xpath() (in module nltk.corpus.reader.mte)": [[79, "nltk.corpus.reader.mte.xpath", false]], "xreadlines() (nltk.data.seekableunicodestreamreader method)": [[111, "nltk.data.SeekableUnicodeStreamReader.xreadlines", false]], "ycoecorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.YCOECorpusReader", false]], "ycoecorpusreader (class in nltk.corpus.reader.ycoe)": [[109, "nltk.corpus.reader.ycoe.YCOECorpusReader", false]], "ycoeparsecorpusreader (class in nltk.corpus.reader.ycoe)": [[109, "nltk.corpus.reader.ycoe.YCOEParseCorpusReader", false]], "ycoetaggedcorpusreader (class in nltk.corpus.reader.ycoe)": [[109, "nltk.corpus.reader.ycoe.YCOETaggedCorpusReader", false]], "yesterday() (in module nltk.twitter.twitter_demo)": [[288, "nltk.twitter.twitter_demo.yesterday", false]], "yview() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.yview", false]], "yview_moveto() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.yview_moveto", false]], "yview_scroll() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.yview_scroll", false]], "zen_chat() (in module nltk.chat.zen)": [[24, "nltk.chat.zen.zen_chat", false]], "zero_indexed_alignment() (nltk.translate.ibm_model.alignmentinfo method)": [[268, "nltk.translate.ibm_model.AlignmentInfo.zero_indexed_alignment", false]]}, "objects": {"": [[0, 0, 0, "-", "nltk"]], "nltk": [[1, 0, 0, "-", "app"], [11, 0, 0, "-", "book"], [12, 0, 0, "-", "ccg"], [18, 0, 0, "-", "chat"], [25, 0, 0, "-", "chunk"], [30, 0, 0, "-", "classify"], [45, 0, 0, "-", "cli"], [46, 0, 0, "-", "cluster"], [52, 0, 0, "-", "collections"], [53, 0, 0, "-", "collocations"], [54, 0, 0, "-", "compat"], [55, 0, 0, "-", "corpus"], [111, 0, 0, "-", "data"], [112, 0, 0, "-", "decorators"], [0, 1, 1, "", "demo"], [113, 0, 0, "-", "downloader"], [114, 0, 0, "-", "draw"], [120, 0, 0, "-", "featstruct"], [121, 0, 0, "-", "grammar"], [122, 0, 0, "-", "help"], [123, 0, 0, "-", "inference"], [131, 0, 0, "-", "internals"], [132, 0, 0, "-", "jsontags"], [133, 0, 0, "-", "langnames"], [134, 0, 0, "-", "lazyimport"], [135, 0, 0, "-", "lm"], [143, 0, 0, "-", "metrics"], [153, 0, 0, "-", "misc"], [159, 0, 0, "-", "parse"], [179, 0, 0, "-", "probability"], [180, 0, 0, "-", "sem"], [195, 0, 0, "-", "sentiment"], [199, 0, 0, "-", "stem"], [212, 0, 0, "-", "tabdata"], [213, 0, 0, "-", "tag"], [227, 0, 0, "-", "tbl"], [234, 0, 0, "-", "text"], [235, 0, 0, "-", "tgrep"], [236, 0, 0, "-", "tokenize"], [255, 0, 0, "-", "toolbox"], [256, 0, 0, "-", "translate"], [275, 0, 0, "-", "tree"], [283, 0, 0, "-", "treeprettyprinter"], [284, 0, 0, "-", "treetransforms"], [285, 0, 0, "-", "twitter"], [291, 0, 0, "-", "util"], [292, 0, 0, "-", "wsd"]], "nltk.app": [[2, 0, 0, "-", "chartparser_app"], [3, 0, 0, "-", "chunkparser_app"], [4, 0, 0, "-", "collocations_app"], [5, 0, 0, "-", "concordance_app"], [6, 0, 0, "-", "nemo_app"], [7, 0, 0, "-", "rdparser_app"], [8, 0, 0, "-", "srparser_app"], [9, 0, 0, "-", "wordfreq_app"], [10, 0, 0, "-", "wordnet_app"]], "nltk.app.chartparser_app": [[2, 1, 1, "", "app"]], "nltk.app.chunkparser_app": [[3, 1, 1, "", "app"]], "nltk.app.collocations_app": [[4, 1, 1, "", "app"]], "nltk.app.concordance_app": [[5, 1, 1, "", "app"]], "nltk.app.nemo_app": [[6, 1, 1, "", "app"]], "nltk.app.rdparser_app": [[7, 1, 1, "", "app"]], "nltk.app.srparser_app": [[8, 1, 1, "", "app"]], "nltk.app.wordfreq_app": [[9, 1, 1, "", "app"]], "nltk.app.wordnet_app": [[10, 1, 1, "", "app"]], "nltk.book": [[11, 1, 1, "", "sents"], [11, 1, 1, "", "texts"]], "nltk.ccg": [[13, 0, 0, "-", "api"], [14, 0, 0, "-", "chart"], [15, 0, 0, "-", "combinator"], [16, 0, 0, "-", "lexicon"], [17, 0, 0, "-", "logic"]], "nltk.ccg.api": [[13, 2, 1, "", "AbstractCCGCategory"], [13, 2, 1, "", "CCGVar"], [13, 2, 1, "", "Direction"], [13, 2, 1, "", "FunctionalCategory"], [13, 2, 1, "", "PrimitiveCategory"]], "nltk.ccg.api.AbstractCCGCategory": [[13, 3, 1, "", "can_unify"], [13, 3, 1, "", "is_function"], [13, 3, 1, "", "is_primitive"], [13, 3, 1, "", "is_var"], [13, 3, 1, "", "substitute"]], "nltk.ccg.api.CCGVar": [[13, 3, 1, "", "__init__"], [13, 3, 1, "", "can_unify"], [13, 3, 1, "", "id"], [13, 3, 1, "", "is_function"], [13, 3, 1, "", "is_primitive"], [13, 3, 1, "", "is_var"], [13, 3, 1, "", "new_id"], [13, 3, 1, "", "reset_id"], [13, 3, 1, "", "substitute"]], "nltk.ccg.api.Direction": [[13, 3, 1, "", "__init__"], [13, 3, 1, "", "can_compose"], [13, 3, 1, "", "can_cross"], [13, 3, 1, "", "can_unify"], [13, 3, 1, "", "dir"], [13, 3, 1, "", "is_backward"], [13, 3, 1, "", "is_forward"], [13, 3, 1, "", "is_variable"], [13, 3, 1, "", "restrs"], [13, 3, 1, "", "substitute"]], "nltk.ccg.api.FunctionalCategory": [[13, 3, 1, "", "__init__"], [13, 3, 1, "", "arg"], [13, 3, 1, "", "can_unify"], [13, 3, 1, "", "dir"], [13, 3, 1, "", "is_function"], [13, 3, 1, "", "is_primitive"], [13, 3, 1, "", "is_var"], [13, 3, 1, "", "res"], [13, 3, 1, "", "substitute"]], "nltk.ccg.api.PrimitiveCategory": [[13, 3, 1, "", "__init__"], [13, 3, 1, "", "can_unify"], [13, 3, 1, "", "categ"], [13, 3, 1, "", "is_function"], [13, 3, 1, "", "is_primitive"], [13, 3, 1, "", "is_var"], [13, 3, 1, "", "restrs"], [13, 3, 1, "", "substitute"]], "nltk.ccg.chart": [[14, 2, 1, "", "BackwardTypeRaiseRule"], [14, 2, 1, "", "BinaryCombinatorRule"], [14, 2, 1, "", "CCGChart"], [14, 2, 1, "", "CCGChartParser"], [14, 2, 1, "", "CCGEdge"], [14, 2, 1, "", "CCGLeafEdge"], [14, 2, 1, "", "ForwardTypeRaiseRule"], [14, 1, 1, "", "compute_semantics"], [14, 1, 1, "", "demo"], [14, 1, 1, "", "printCCGDerivation"], [14, 1, 1, "", "printCCGTree"]], "nltk.ccg.chart.BackwardTypeRaiseRule": [[14, 4, 1, "", "NUMEDGES"], [14, 3, 1, "", "__init__"], [14, 3, 1, "", "apply"]], "nltk.ccg.chart.BinaryCombinatorRule": [[14, 4, 1, "", "NUMEDGES"], [14, 3, 1, "", "__init__"], [14, 3, 1, "", "apply"]], "nltk.ccg.chart.CCGChart": [[14, 3, 1, "", "__init__"]], "nltk.ccg.chart.CCGChartParser": [[14, 3, 1, "", "__init__"], [14, 3, 1, "", "lexicon"], [14, 3, 1, "", "parse"]], "nltk.ccg.chart.CCGEdge": [[14, 3, 1, "", "__init__"], [14, 3, 1, "", "categ"], [14, 3, 1, "", "dot"], [14, 3, 1, "", "end"], [14, 3, 1, "", "is_complete"], [14, 3, 1, "", "is_incomplete"], [14, 3, 1, "", "length"], [14, 3, 1, "", "lhs"], [14, 3, 1, "", "nextsym"], [14, 3, 1, "", "rhs"], [14, 3, 1, "", "rule"], [14, 3, 1, "", "span"], [14, 3, 1, "", "start"]], "nltk.ccg.chart.CCGLeafEdge": [[14, 3, 1, "", "__init__"], [14, 3, 1, "", "categ"], [14, 3, 1, "", "dot"], [14, 3, 1, "", "end"], [14, 3, 1, "", "is_complete"], [14, 3, 1, "", "is_incomplete"], [14, 3, 1, "", "leaf"], [14, 3, 1, "", "length"], [14, 3, 1, "", "lhs"], [14, 3, 1, "", "nextsym"], [14, 3, 1, "", "rhs"], [14, 3, 1, "", "span"], [14, 3, 1, "", "start"], [14, 3, 1, "", "token"]], "nltk.ccg.chart.ForwardTypeRaiseRule": [[14, 4, 1, "", "NUMEDGES"], [14, 3, 1, "", "__init__"], [14, 3, 1, "", "apply"]], "nltk.ccg.combinator": [[15, 2, 1, "", "BackwardCombinator"], [15, 2, 1, "", "DirectedBinaryCombinator"], [15, 2, 1, "", "ForwardCombinator"], [15, 2, 1, "", "UndirectedBinaryCombinator"], [15, 2, 1, "", "UndirectedComposition"], [15, 2, 1, "", "UndirectedFunctionApplication"], [15, 2, 1, "", "UndirectedSubstitution"], [15, 2, 1, "", "UndirectedTypeRaise"], [15, 1, 1, "", "backwardBxConstraint"], [15, 1, 1, "", "backwardOnly"], [15, 1, 1, "", "backwardSxConstraint"], [15, 1, 1, "", "backwardTConstraint"], [15, 1, 1, "", "bothBackward"], [15, 1, 1, "", "bothForward"], [15, 1, 1, "", "crossedDirs"], [15, 1, 1, "", "forwardOnly"], [15, 1, 1, "", "forwardSConstraint"], [15, 1, 1, "", "forwardTConstraint"], [15, 1, 1, "", "innermostFunction"]], "nltk.ccg.combinator.BackwardCombinator": [[15, 3, 1, "", "__init__"], [15, 3, 1, "", "can_combine"], [15, 3, 1, "", "combine"]], "nltk.ccg.combinator.DirectedBinaryCombinator": [[15, 3, 1, "", "can_combine"], [15, 3, 1, "", "combine"]], "nltk.ccg.combinator.ForwardCombinator": [[15, 3, 1, "", "__init__"], [15, 3, 1, "", "can_combine"], [15, 3, 1, "", "combine"]], "nltk.ccg.combinator.UndirectedBinaryCombinator": [[15, 3, 1, "", "can_combine"], [15, 3, 1, "", "combine"]], "nltk.ccg.combinator.UndirectedComposition": [[15, 3, 1, "", "can_combine"], [15, 3, 1, "", "combine"]], "nltk.ccg.combinator.UndirectedFunctionApplication": [[15, 3, 1, "", "can_combine"], [15, 3, 1, "", "combine"]], "nltk.ccg.combinator.UndirectedSubstitution": [[15, 3, 1, "", "can_combine"], [15, 3, 1, "", "combine"]], "nltk.ccg.combinator.UndirectedTypeRaise": [[15, 3, 1, "", "can_combine"], [15, 3, 1, "", "combine"]], "nltk.ccg.lexicon": [[16, 2, 1, "", "CCGLexicon"], [16, 2, 1, "", "Token"], [16, 1, 1, "", "augParseCategory"], [16, 1, 1, "", "fromstring"], [16, 1, 1, "", "matchBrackets"], [16, 1, 1, "", "nextCategory"], [16, 1, 1, "", "parseApplication"], [16, 1, 1, "", "parsePrimitiveCategory"], [16, 1, 1, "", "parseSubscripts"]], "nltk.ccg.lexicon.CCGLexicon": [[16, 3, 1, "", "__init__"], [16, 3, 1, "", "categories"], [16, 3, 1, "", "start"]], "nltk.ccg.lexicon.Token": [[16, 3, 1, "", "__init__"], [16, 3, 1, "", "categ"], [16, 3, 1, "", "semantics"]], "nltk.ccg.logic": [[17, 1, 1, "", "compute_composition_semantics"], [17, 1, 1, "", "compute_function_semantics"], [17, 1, 1, "", "compute_substitution_semantics"], [17, 1, 1, "", "compute_type_raised_semantics"]], "nltk.chat": [[18, 1, 1, "", "chatbots"], [19, 0, 0, "-", "eliza"], [20, 0, 0, "-", "iesha"], [21, 0, 0, "-", "rude"], [22, 0, 0, "-", "suntsu"], [23, 0, 0, "-", "util"], [24, 0, 0, "-", "zen"]], "nltk.chat.eliza": [[19, 1, 1, "", "demo"], [19, 1, 1, "", "eliza_chat"]], "nltk.chat.iesha": [[20, 1, 1, "", "demo"], [20, 1, 1, "", "iesha_chat"]], "nltk.chat.rude": [[21, 1, 1, "", "demo"], [21, 1, 1, "", "rude_chat"]], "nltk.chat.suntsu": [[22, 1, 1, "", "demo"], [22, 1, 1, "", "suntsu_chat"]], "nltk.chat.util": [[23, 2, 1, "", "Chat"]], "nltk.chat.util.Chat": [[23, 3, 1, "", "__init__"], [23, 3, 1, "", "converse"], [23, 3, 1, "", "respond"]], "nltk.chat.zen": [[24, 1, 1, "", "demo"], [24, 1, 1, "", "zen_chat"]], "nltk.chunk": [[26, 0, 0, "-", "api"], [27, 0, 0, "-", "named_entity"], [25, 1, 1, "", "ne_chunk"], [25, 1, 1, "", "ne_chunk_sents"], [25, 1, 1, "", "ne_chunker"], [28, 0, 0, "-", "regexp"], [29, 0, 0, "-", "util"]], "nltk.chunk.api": [[26, 2, 1, "", "ChunkParserI"]], "nltk.chunk.api.ChunkParserI": [[26, 3, 1, "", "accuracy"], [26, 3, 1, "", "evaluate"], [26, 3, 1, "", "parse"]], "nltk.chunk.named_entity": [[27, 2, 1, "", "Maxent_NE_Chunker"], [27, 2, 1, "", "NEChunkParser"], [27, 2, 1, "", "NEChunkParserTagger"], [27, 1, 1, "", "build_model"], [27, 1, 1, "", "cmp_chunks"], [27, 1, 1, "", "load_ace_data"], [27, 1, 1, "", "load_ace_file"], [27, 1, 1, "", "postag_tree"], [27, 1, 1, "", "shape"], [27, 1, 1, "", "simplify_pos"]], "nltk.chunk.named_entity.Maxent_NE_Chunker": [[27, 3, 1, "", "__init__"], [27, 3, 1, "", "load_params"], [27, 3, 1, "", "save_params"]], "nltk.chunk.named_entity.NEChunkParser": [[27, 3, 1, "", "__init__"], [27, 3, 1, "", "parse"]], "nltk.chunk.named_entity.NEChunkParserTagger": [[27, 3, 1, "", "__init__"]], "nltk.chunk.regexp": [[28, 2, 1, "", "ChunkRule"], [28, 2, 1, "", "ChunkRuleWithContext"], [28, 2, 1, "", "ChunkString"], [28, 2, 1, "", "ExpandLeftRule"], [28, 2, 1, "", "ExpandRightRule"], [28, 2, 1, "", "MergeRule"], [28, 2, 1, "", "RegexpChunkParser"], [28, 2, 1, "", "RegexpChunkRule"], [28, 2, 1, "", "RegexpParser"], [28, 2, 1, "", "SplitRule"], [28, 2, 1, "", "StripRule"], [28, 2, 1, "", "UnChunkRule"], [28, 1, 1, "", "demo"], [28, 1, 1, "", "demo_eval"], [28, 1, 1, "", "tag_pattern2re_pattern"]], "nltk.chunk.regexp.ChunkRule": [[28, 3, 1, "", "__init__"]], "nltk.chunk.regexp.ChunkRuleWithContext": [[28, 3, 1, "", "__init__"]], "nltk.chunk.regexp.ChunkString": [[28, 4, 1, "", "CHUNK_TAG"], [28, 4, 1, "", "CHUNK_TAG_CHAR"], [28, 4, 1, "", "IN_CHUNK_PATTERN"], [28, 4, 1, "", "IN_STRIP_PATTERN"], [28, 3, 1, "", "__init__"], [28, 3, 1, "", "to_chunkstruct"], [28, 3, 1, "", "xform"]], "nltk.chunk.regexp.ExpandLeftRule": [[28, 3, 1, "", "__init__"]], "nltk.chunk.regexp.ExpandRightRule": [[28, 3, 1, "", "__init__"]], "nltk.chunk.regexp.MergeRule": [[28, 3, 1, "", "__init__"]], "nltk.chunk.regexp.RegexpChunkParser": [[28, 3, 1, "", "__init__"], [28, 3, 1, "", "parse"], [28, 3, 1, "", "rules"]], "nltk.chunk.regexp.RegexpChunkRule": [[28, 3, 1, "", "__init__"], [28, 3, 1, "", "apply"], [28, 3, 1, "", "descr"], [28, 3, 1, "", "fromstring"]], "nltk.chunk.regexp.RegexpParser": [[28, 3, 1, "", "__init__"], [28, 3, 1, "", "parse"]], "nltk.chunk.regexp.SplitRule": [[28, 3, 1, "", "__init__"]], "nltk.chunk.regexp.StripRule": [[28, 3, 1, "", "__init__"]], "nltk.chunk.regexp.UnChunkRule": [[28, 3, 1, "", "__init__"]], "nltk.chunk.util": [[29, 2, 1, "", "ChunkScore"], [29, 1, 1, "", "accuracy"], [29, 1, 1, "", "conllstr2tree"], [29, 1, 1, "", "conlltags2tree"], [29, 1, 1, "", "demo"], [29, 1, 1, "", "ieerstr2tree"], [29, 1, 1, "", "tagstr2tree"], [29, 1, 1, "", "tree2conllstr"], [29, 1, 1, "", "tree2conlltags"]], "nltk.chunk.util.ChunkScore": [[29, 3, 1, "", "__init__"], [29, 3, 1, "", "accuracy"], [29, 3, 1, "", "correct"], [29, 3, 1, "", "f_measure"], [29, 3, 1, "", "guessed"], [29, 3, 1, "", "incorrect"], [29, 3, 1, "", "missed"], [29, 3, 1, "", "precision"], [29, 3, 1, "", "recall"], [29, 3, 1, "", "score"]], "nltk.classify": [[31, 0, 0, "-", "api"], [32, 0, 0, "-", "decisiontree"], [33, 0, 0, "-", "maxent"], [34, 0, 0, "-", "megam"], [35, 0, 0, "-", "naivebayes"], [36, 0, 0, "-", "positivenaivebayes"], [37, 0, 0, "-", "rte_classify"], [38, 0, 0, "-", "scikitlearn"], [39, 0, 0, "-", "senna"], [40, 0, 0, "-", "svm"], [41, 0, 0, "-", "tadm"], [42, 0, 0, "-", "textcat"], [43, 0, 0, "-", "util"], [44, 0, 0, "-", "weka"]], "nltk.classify.api": [[31, 2, 1, "", "ClassifierI"], [31, 2, 1, "", "MultiClassifierI"]], "nltk.classify.api.ClassifierI": [[31, 3, 1, "", "classify"], [31, 3, 1, "", "classify_many"], [31, 3, 1, "", "labels"], [31, 3, 1, "", "prob_classify"], [31, 3, 1, "", "prob_classify_many"]], "nltk.classify.api.MultiClassifierI": [[31, 3, 1, "", "classify"], [31, 3, 1, "", "classify_many"], [31, 3, 1, "", "labels"], [31, 3, 1, "", "prob_classify"], [31, 3, 1, "", "prob_classify_many"]], "nltk.classify.decisiontree": [[32, 2, 1, "", "DecisionTreeClassifier"], [32, 1, 1, "", "demo"], [32, 1, 1, "", "f"]], "nltk.classify.decisiontree.DecisionTreeClassifier": [[32, 3, 1, "", "__init__"], [32, 3, 1, "", "best_binary_stump"], [32, 3, 1, "", "best_stump"], [32, 3, 1, "", "binary_stump"], [32, 3, 1, "", "classify"], [32, 3, 1, "", "error"], [32, 3, 1, "", "labels"], [32, 3, 1, "", "leaf"], [32, 3, 1, "", "pretty_format"], [32, 3, 1, "", "pseudocode"], [32, 3, 1, "", "refine"], [32, 3, 1, "", "stump"], [32, 3, 1, "", "train"]], "nltk.classify.maxent": [[33, 2, 1, "", "BinaryMaxentFeatureEncoding"], [33, 4, 1, "", "ConditionalExponentialClassifier"], [33, 2, 1, "", "FunctionBackedMaxentFeatureEncoding"], [33, 2, 1, "", "GISEncoding"], [33, 2, 1, "", "MaxentClassifier"], [33, 2, 1, "", "MaxentFeatureEncodingI"], [33, 2, 1, "", "TadmEventMaxentFeatureEncoding"], [33, 2, 1, "", "TadmMaxentClassifier"], [33, 2, 1, "", "TypedMaxentFeatureEncoding"], [33, 1, 1, "", "calculate_deltas"], [33, 1, 1, "", "calculate_empirical_fcount"], [33, 1, 1, "", "calculate_estimated_fcount"], [33, 1, 1, "", "calculate_nfmap"], [33, 1, 1, "", "demo"], [33, 1, 1, "", "load_maxent_params"], [33, 1, 1, "", "maxent_pos_tagger"], [33, 1, 1, "", "save_maxent_params"], [33, 1, 1, "", "train_maxent_classifier_with_gis"], [33, 1, 1, "", "train_maxent_classifier_with_iis"], [33, 1, 1, "", "train_maxent_classifier_with_megam"]], "nltk.classify.maxent.BinaryMaxentFeatureEncoding": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "describe"], [33, 3, 1, "", "encode"], [33, 3, 1, "", "labels"], [33, 3, 1, "", "length"], [33, 3, 1, "", "train"]], "nltk.classify.maxent.FunctionBackedMaxentFeatureEncoding": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "describe"], [33, 3, 1, "", "encode"], [33, 3, 1, "", "labels"], [33, 3, 1, "", "length"]], "nltk.classify.maxent.GISEncoding": [[33, 5, 1, "", "C"], [33, 3, 1, "", "__init__"], [33, 3, 1, "", "describe"], [33, 3, 1, "", "encode"], [33, 3, 1, "", "length"]], "nltk.classify.maxent.MaxentClassifier": [[33, 4, 1, "", "ALGORITHMS"], [33, 3, 1, "", "__init__"], [33, 3, 1, "", "classify"], [33, 3, 1, "", "explain"], [33, 3, 1, "", "labels"], [33, 3, 1, "", "most_informative_features"], [33, 3, 1, "", "prob_classify"], [33, 3, 1, "", "set_weights"], [33, 3, 1, "", "show_most_informative_features"], [33, 3, 1, "", "train"], [33, 3, 1, "", "weights"]], "nltk.classify.maxent.MaxentFeatureEncodingI": [[33, 3, 1, "", "describe"], [33, 3, 1, "", "encode"], [33, 3, 1, "", "labels"], [33, 3, 1, "", "length"], [33, 3, 1, "", "train"]], "nltk.classify.maxent.TadmEventMaxentFeatureEncoding": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "describe"], [33, 3, 1, "", "encode"], [33, 3, 1, "", "labels"], [33, 3, 1, "", "length"], [33, 3, 1, "", "train"]], "nltk.classify.maxent.TadmMaxentClassifier": [[33, 3, 1, "", "train"]], "nltk.classify.maxent.TypedMaxentFeatureEncoding": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "describe"], [33, 3, 1, "", "encode"], [33, 3, 1, "", "labels"], [33, 3, 1, "", "length"], [33, 3, 1, "", "train"]], "nltk.classify.megam": [[34, 1, 1, "", "call_megam"], [34, 1, 1, "", "config_megam"], [34, 1, 1, "", "parse_megam_weights"], [34, 1, 1, "", "write_megam_file"]], "nltk.classify.naivebayes": [[35, 2, 1, "", "NaiveBayesClassifier"], [35, 1, 1, "", "demo"]], "nltk.classify.naivebayes.NaiveBayesClassifier": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "classify"], [35, 3, 1, "", "labels"], [35, 3, 1, "", "most_informative_features"], [35, 3, 1, "", "prob_classify"], [35, 3, 1, "", "show_most_informative_features"], [35, 3, 1, "", "train"]], "nltk.classify.positivenaivebayes": [[36, 2, 1, "", "PositiveNaiveBayesClassifier"], [36, 1, 1, "", "demo"]], "nltk.classify.positivenaivebayes.PositiveNaiveBayesClassifier": [[36, 3, 1, "", "train"]], "nltk.classify.rte_classify": [[37, 2, 1, "", "RTEFeatureExtractor"], [37, 1, 1, "", "rte_classifier"], [37, 1, 1, "", "rte_features"], [37, 1, 1, "", "rte_featurize"]], "nltk.classify.rte_classify.RTEFeatureExtractor": [[37, 3, 1, "", "__init__"], [37, 3, 1, "", "hyp_extra"], [37, 3, 1, "", "overlap"]], "nltk.classify.scikitlearn": [[38, 2, 1, "", "SklearnClassifier"]], "nltk.classify.scikitlearn.SklearnClassifier": [[38, 3, 1, "", "__init__"], [38, 3, 1, "", "classify_many"], [38, 3, 1, "", "labels"], [38, 3, 1, "", "prob_classify_many"], [38, 3, 1, "", "train"]], "nltk.classify.senna": [[39, 2, 1, "", "Senna"]], "nltk.classify.senna.Senna": [[39, 4, 1, "", "SUPPORTED_OPERATIONS"], [39, 3, 1, "", "__init__"], [39, 3, 1, "", "executable"], [39, 3, 1, "", "tag"], [39, 3, 1, "", "tag_sents"]], "nltk.classify.svm": [[40, 2, 1, "", "SvmClassifier"]], "nltk.classify.svm.SvmClassifier": [[40, 3, 1, "", "__init__"]], "nltk.classify.tadm": [[41, 1, 1, "", "call_tadm"], [41, 1, 1, "", "config_tadm"], [41, 1, 1, "", "encoding_demo"], [41, 1, 1, "", "names_demo"], [41, 1, 1, "", "parse_tadm_weights"], [41, 1, 1, "", "write_tadm_file"]], "nltk.classify.textcat": [[42, 2, 1, "", "TextCat"], [42, 1, 1, "", "demo"]], "nltk.classify.textcat.TextCat": [[42, 3, 1, "", "__init__"], [42, 3, 1, "", "calc_dist"], [42, 4, 1, "", "fingerprints"], [42, 3, 1, "", "guess_language"], [42, 3, 1, "", "lang_dists"], [42, 4, 1, "", "last_distances"], [42, 3, 1, "", "profile"], [42, 3, 1, "", "remove_punctuation"]], "nltk.classify.util": [[43, 2, 1, "", "CutoffChecker"], [43, 1, 1, "", "accuracy"], [43, 1, 1, "", "apply_features"], [43, 1, 1, "", "attested_labels"], [43, 1, 1, "", "binary_names_demo_features"], [43, 1, 1, "", "check_megam_config"], [43, 1, 1, "", "log_likelihood"], [43, 1, 1, "", "names_demo"], [43, 1, 1, "", "names_demo_features"], [43, 1, 1, "", "partial_names_demo"], [43, 1, 1, "", "wsd_demo"]], "nltk.classify.util.CutoffChecker": [[43, 3, 1, "", "__init__"], [43, 3, 1, "", "check"]], "nltk.classify.weka": [[44, 2, 1, "", "ARFF_Formatter"], [44, 2, 1, "", "WekaClassifier"], [44, 1, 1, "", "config_weka"]], "nltk.classify.weka.ARFF_Formatter": [[44, 3, 1, "", "__init__"], [44, 3, 1, "", "data_section"], [44, 3, 1, "", "format"], [44, 3, 1, "", "from_train"], [44, 3, 1, "", "header_section"], [44, 3, 1, "", "labels"], [44, 3, 1, "", "write"]], "nltk.classify.weka.WekaClassifier": [[44, 3, 1, "", "__init__"], [44, 3, 1, "", "classify_many"], [44, 3, 1, "", "parse_weka_distribution"], [44, 3, 1, "", "parse_weka_output"], [44, 3, 1, "", "prob_classify_many"], [44, 3, 1, "", "train"]], "nltk.cluster": [[47, 0, 0, "-", "api"], [48, 0, 0, "-", "em"], [49, 0, 0, "-", "gaac"], [50, 0, 0, "-", "kmeans"], [51, 0, 0, "-", "util"]], "nltk.cluster.api": [[47, 2, 1, "", "ClusterI"]], "nltk.cluster.api.ClusterI": [[47, 3, 1, "", "classification_probdist"], [47, 3, 1, "", "classify"], [47, 3, 1, "", "cluster"], [47, 3, 1, "", "cluster_name"], [47, 3, 1, "", "cluster_names"], [47, 3, 1, "", "likelihood"], [47, 3, 1, "", "num_clusters"]], "nltk.cluster.em": [[48, 2, 1, "", "EMClusterer"], [48, 1, 1, "", "demo"]], "nltk.cluster.em.EMClusterer": [[48, 3, 1, "", "__init__"], [48, 3, 1, "", "classify_vectorspace"], [48, 3, 1, "", "cluster_vectorspace"], [48, 3, 1, "", "likelihood_vectorspace"], [48, 3, 1, "", "num_clusters"]], "nltk.cluster.gaac": [[49, 2, 1, "", "GAAClusterer"], [49, 1, 1, "", "demo"]], "nltk.cluster.gaac.GAAClusterer": [[49, 3, 1, "", "__init__"], [49, 3, 1, "", "classify_vectorspace"], [49, 3, 1, "", "cluster"], [49, 3, 1, "", "cluster_vectorspace"], [49, 3, 1, "", "dendrogram"], [49, 3, 1, "", "num_clusters"], [49, 3, 1, "", "update_clusters"]], "nltk.cluster.kmeans": [[50, 2, 1, "", "KMeansClusterer"], [50, 1, 1, "", "demo"]], "nltk.cluster.kmeans.KMeansClusterer": [[50, 3, 1, "", "__init__"], [50, 3, 1, "", "classify_vectorspace"], [50, 3, 1, "", "cluster_vectorspace"], [50, 3, 1, "", "means"], [50, 3, 1, "", "num_clusters"]], "nltk.cluster.util": [[51, 2, 1, "", "Dendrogram"], [51, 2, 1, "", "VectorSpaceClusterer"], [51, 1, 1, "", "cosine_distance"], [51, 1, 1, "", "euclidean_distance"]], "nltk.cluster.util.Dendrogram": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "groups"], [51, 3, 1, "", "merge"], [51, 3, 1, "", "show"]], "nltk.cluster.util.VectorSpaceClusterer": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "classify"], [51, 3, 1, "", "classify_vectorspace"], [51, 3, 1, "", "cluster"], [51, 3, 1, "", "cluster_vectorspace"], [51, 3, 1, "", "likelihood"], [51, 3, 1, "", "likelihood_vectorspace"], [51, 3, 1, "", "vector"]], "nltk.collections": [[52, 2, 1, "", "AbstractLazySequence"], [52, 2, 1, "", "LazyConcatenation"], [52, 2, 1, "", "LazyEnumerate"], [52, 2, 1, "", "LazyIteratorList"], [52, 2, 1, "", "LazyMap"], [52, 2, 1, "", "LazySubsequence"], [52, 2, 1, "", "LazyZip"], [52, 2, 1, "", "OrderedDict"], [52, 2, 1, "", "Trie"]], "nltk.collections.AbstractLazySequence": [[52, 3, 1, "", "count"], [52, 3, 1, "", "index"], [52, 3, 1, "", "iterate_from"]], "nltk.collections.LazyConcatenation": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "iterate_from"]], "nltk.collections.LazyEnumerate": [[52, 3, 1, "", "__init__"]], "nltk.collections.LazyIteratorList": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "iterate_from"]], "nltk.collections.LazyMap": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "iterate_from"]], "nltk.collections.LazySubsequence": [[52, 4, 1, "", "MIN_SIZE"], [52, 3, 1, "", "__init__"], [52, 3, 1, "", "__new__"], [52, 3, 1, "", "iterate_from"]], "nltk.collections.LazyZip": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "iterate_from"]], "nltk.collections.OrderedDict": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "clear"], [52, 3, 1, "", "copy"], [52, 3, 1, "", "items"], [52, 3, 1, "", "keys"], [52, 3, 1, "", "popitem"], [52, 3, 1, "", "setdefault"], [52, 3, 1, "", "update"], [52, 3, 1, "", "values"]], "nltk.collections.Trie": [[52, 4, 1, "", "LEAF"], [52, 3, 1, "", "__init__"], [52, 3, 1, "", "insert"]], "nltk.collocations": [[53, 2, 1, "", "BigramCollocationFinder"], [53, 2, 1, "", "QuadgramCollocationFinder"], [53, 2, 1, "", "TrigramCollocationFinder"]], "nltk.collocations.BigramCollocationFinder": [[53, 3, 1, "", "__init__"], [53, 4, 1, "", "default_ws"], [53, 3, 1, "", "from_words"], [53, 3, 1, "", "score_ngram"]], "nltk.collocations.QuadgramCollocationFinder": [[53, 3, 1, "", "__init__"], [53, 4, 1, "", "default_ws"], [53, 3, 1, "", "from_words"], [53, 3, 1, "", "score_ngram"]], "nltk.collocations.TrigramCollocationFinder": [[53, 3, 1, "", "__init__"], [53, 3, 1, "", "bigram_finder"], [53, 4, 1, "", "default_ws"], [53, 3, 1, "", "from_words"], [53, 3, 1, "", "score_ngram"]], "nltk.compat": [[54, 1, 1, "", "add_py3_data"], [54, 1, 1, "", "py3_data"]], "nltk.corpus": [[55, 1, 1, "", "demo"], [56, 0, 0, "-", "europarl_raw"], [57, 0, 0, "-", "reader"], [110, 0, 0, "-", "util"]], "nltk.corpus.reader": [[57, 2, 1, "", "AlignedCorpusReader"], [57, 2, 1, "", "AlpinoCorpusReader"], [57, 2, 1, "", "BCP47CorpusReader"], [57, 2, 1, "", "BNCCorpusReader"], [57, 2, 1, "", "BracketParseCorpusReader"], [57, 2, 1, "", "CHILDESCorpusReader"], [57, 2, 1, "", "CMUDictCorpusReader"], [57, 2, 1, "", "CategorizedBracketParseCorpusReader"], [57, 2, 1, "", "CategorizedCorpusReader"], [57, 2, 1, "", "CategorizedPlaintextCorpusReader"], [57, 2, 1, "", "CategorizedSentencesCorpusReader"], [57, 2, 1, "", "CategorizedTaggedCorpusReader"], [57, 2, 1, "", "ChasenCorpusReader"], [57, 2, 1, "", "ChunkedCorpusReader"], [57, 2, 1, "", "ComparativeSentencesCorpusReader"], [57, 2, 1, "", "ConllChunkCorpusReader"], [57, 2, 1, "", "ConllCorpusReader"], [57, 2, 1, "", "CorpusReader"], [57, 2, 1, "", "CrubadanCorpusReader"], [57, 2, 1, "", "DependencyCorpusReader"], [57, 2, 1, "", "EuroparlCorpusReader"], [57, 2, 1, "", "FramenetCorpusReader"], [57, 2, 1, "", "IEERCorpusReader"], [57, 2, 1, "", "IPIPANCorpusReader"], [57, 2, 1, "", "IndianCorpusReader"], [57, 2, 1, "", "KNBCorpusReader"], [57, 2, 1, "", "LinThesaurusCorpusReader"], [57, 2, 1, "", "MTECorpusReader"], [57, 2, 1, "", "MWAPPDBCorpusReader"], [57, 2, 1, "", "MacMorphoCorpusReader"], [57, 2, 1, "", "NKJPCorpusReader"], [57, 2, 1, "", "NPSChatCorpusReader"], [57, 2, 1, "", "NombankCorpusReader"], [57, 2, 1, "", "NonbreakingPrefixesCorpusReader"], [57, 2, 1, "", "OpinionLexiconCorpusReader"], [57, 2, 1, "", "PPAttachmentCorpusReader"], [57, 2, 1, "", "PanLexLiteCorpusReader"], [57, 2, 1, "", "PanlexSwadeshCorpusReader"], [57, 2, 1, "", "Pl196xCorpusReader"], [57, 2, 1, "", "PlaintextCorpusReader"], [57, 2, 1, "", "PortugueseCategorizedPlaintextCorpusReader"], [57, 2, 1, "", "PropbankCorpusReader"], [57, 2, 1, "", "ProsConsCorpusReader"], [57, 2, 1, "", "RTECorpusReader"], [57, 2, 1, "", "ReviewsCorpusReader"], [57, 2, 1, "", "SemcorCorpusReader"], [57, 2, 1, "", "SensevalCorpusReader"], [57, 2, 1, "", "SentiSynset"], [57, 2, 1, "", "SentiWordNetCorpusReader"], [57, 2, 1, "", "SinicaTreebankCorpusReader"], [57, 2, 1, "", "StringCategoryCorpusReader"], [57, 2, 1, "", "SwadeshCorpusReader"], [57, 2, 1, "", "SwitchboardCorpusReader"], [57, 2, 1, "", "SyntaxCorpusReader"], [57, 2, 1, "", "TEICorpusView"], [57, 2, 1, "", "TaggedCorpusReader"], [57, 2, 1, "", "TimitCorpusReader"], [57, 2, 1, "", "TimitTaggedCorpusReader"], [57, 2, 1, "", "ToolboxCorpusReader"], [57, 2, 1, "", "TwitterCorpusReader"], [57, 2, 1, "", "UdhrCorpusReader"], [57, 2, 1, "", "UnicharsCorpusReader"], [57, 2, 1, "", "VerbnetCorpusReader"], [57, 2, 1, "", "WordListCorpusReader"], [57, 2, 1, "", "WordNetCorpusReader"], [57, 2, 1, "", "WordNetICCorpusReader"], [57, 2, 1, "", "XMLCorpusReader"], [57, 2, 1, "", "YCOECorpusReader"], [58, 0, 0, "-", "aligned"], [59, 0, 0, "-", "api"], [60, 0, 0, "-", "bcp47"], [61, 0, 0, "-", "bnc"], [62, 0, 0, "-", "bracket_parse"], [63, 0, 0, "-", "categorized_sents"], [64, 0, 0, "-", "chasen"], [65, 0, 0, "-", "childes"], [66, 0, 0, "-", "chunked"], [67, 0, 0, "-", "cmudict"], [68, 0, 0, "-", "comparative_sents"], [69, 0, 0, "-", "conll"], [70, 0, 0, "-", "crubadan"], [71, 0, 0, "-", "dependency"], [57, 1, 1, "", "find_corpus_fileids"], [72, 0, 0, "-", "framenet"], [73, 0, 0, "-", "ieer"], [74, 0, 0, "-", "indian"], [75, 0, 0, "-", "ipipan"], [76, 0, 0, "-", "knbc"], [77, 0, 0, "-", "lin"], [78, 0, 0, "-", "markdown"], [79, 0, 0, "-", "mte"], [80, 0, 0, "-", "nkjp"], [81, 0, 0, "-", "nombank"], [82, 0, 0, "-", "nps_chat"], [83, 0, 0, "-", "opinion_lexicon"], [84, 0, 0, "-", "panlex_lite"], [85, 0, 0, "-", "panlex_swadesh"], [86, 0, 0, "-", "pl196x"], [87, 0, 0, "-", "plaintext"], [88, 0, 0, "-", "ppattach"], [89, 0, 0, "-", "propbank"], [90, 0, 0, "-", "pros_cons"], [91, 0, 0, "-", "reviews"], [92, 0, 0, "-", "rte"], [93, 0, 0, "-", "semcor"], [94, 0, 0, "-", "senseval"], [95, 0, 0, "-", "sentiwordnet"], [96, 0, 0, "-", "sinica_treebank"], [97, 0, 0, "-", "string_category"], [98, 0, 0, "-", "switchboard"], [99, 0, 0, "-", "tagged"], [57, 1, 1, "", "tagged_treebank_para_block_reader"], [100, 0, 0, "-", "timit"], [101, 0, 0, "-", "toolbox"], [102, 0, 0, "-", "twitter"], [103, 0, 0, "-", "udhr"], [104, 0, 0, "-", "util"], [105, 0, 0, "-", "verbnet"], [106, 0, 0, "-", "wordlist"], [107, 0, 0, "-", "wordnet"], [108, 0, 0, "-", "xmldocs"], [109, 0, 0, "-", "ycoe"]], "nltk.corpus.reader.AlignedCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "aligned_sents"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.AlpinoCorpusReader": [[57, 3, 1, "", "__init__"]], "nltk.corpus.reader.BCP47CorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "data_dict"], [57, 3, 1, "", "lang2str"], [57, 3, 1, "", "load_wiki_q"], [57, 3, 1, "", "morphology"], [57, 3, 1, "", "name"], [57, 3, 1, "", "parse_tag"], [57, 3, 1, "", "subdiv_dict"], [57, 3, 1, "", "val2str"], [57, 3, 1, "", "wiki_dict"]], "nltk.corpus.reader.BNCCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.BracketParseCorpusReader": [[57, 3, 1, "", "__init__"]], "nltk.corpus.reader.CHILDESCorpusReader": [[57, 3, 1, "", "MLU"], [57, 3, 1, "", "__init__"], [57, 3, 1, "", "age"], [57, 4, 1, "", "childes_url_base"], [57, 3, 1, "", "convert_age"], [57, 3, 1, "", "corpus"], [57, 3, 1, "", "participants"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "webview_file"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.CMUDictCorpusReader": [[57, 3, 1, "", "dict"], [57, 3, 1, "", "entries"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.CategorizedBracketParseCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "parsed_paras"], [57, 3, 1, "", "parsed_sents"], [57, 3, 1, "", "parsed_words"], [57, 3, 1, "", "tagged_paras"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"]], "nltk.corpus.reader.CategorizedCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "categories"], [57, 3, 1, "", "fileids"], [57, 3, 1, "", "paras"], [57, 3, 1, "", "raw"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.CategorizedPlaintextCorpusReader": [[57, 3, 1, "", "__init__"]], "nltk.corpus.reader.CategorizedSentencesCorpusReader": [[57, 4, 1, "", "CorpusView"], [57, 3, 1, "", "__init__"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.CategorizedTaggedCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "tagged_paras"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"]], "nltk.corpus.reader.ChasenCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "paras"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_paras"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.ChunkedCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "chunked_paras"], [57, 3, 1, "", "chunked_sents"], [57, 3, 1, "", "chunked_words"], [57, 3, 1, "", "paras"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_paras"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.ComparativeSentencesCorpusReader": [[57, 4, 1, "", "CorpusView"], [57, 3, 1, "", "__init__"], [57, 3, 1, "", "comparisons"], [57, 3, 1, "", "keywords"], [57, 3, 1, "", "keywords_readme"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.ConllChunkCorpusReader": [[57, 3, 1, "", "__init__"]], "nltk.corpus.reader.ConllCorpusReader": [[57, 4, 1, "", "CHUNK"], [57, 4, 1, "", "COLUMN_TYPES"], [57, 4, 1, "", "IGNORE"], [57, 4, 1, "", "NE"], [57, 4, 1, "", "POS"], [57, 4, 1, "", "SRL"], [57, 4, 1, "", "TREE"], [57, 4, 1, "", "WORDS"], [57, 3, 1, "", "__init__"], [57, 3, 1, "", "chunked_sents"], [57, 3, 1, "", "chunked_words"], [57, 3, 1, "", "iob_sents"], [57, 3, 1, "", "iob_words"], [57, 3, 1, "", "parsed_sents"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "srl_instances"], [57, 3, 1, "", "srl_spans"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.CorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "abspath"], [57, 3, 1, "", "abspaths"], [57, 3, 1, "", "citation"], [57, 3, 1, "", "encoding"], [57, 3, 1, "", "ensure_loaded"], [57, 3, 1, "", "fileids"], [57, 3, 1, "", "license"], [57, 3, 1, "", "open"], [57, 3, 1, "", "raw"], [57, 3, 1, "", "readme"], [57, 5, 1, "", "root"]], "nltk.corpus.reader.CrubadanCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "crubadan_to_iso"], [57, 3, 1, "", "iso_to_crubadan"], [57, 3, 1, "", "lang_freq"], [57, 3, 1, "", "langs"]], "nltk.corpus.reader.DependencyCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "parsed_sents"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.EuroparlCorpusReader": [[57, 3, 1, "", "chapters"], [57, 3, 1, "", "paras"]], "nltk.corpus.reader.FramenetCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "annotations"], [57, 3, 1, "", "buildindexes"], [57, 3, 1, "", "doc"], [57, 3, 1, "", "docs"], [57, 3, 1, "", "docs_metadata"], [57, 3, 1, "", "exemplars"], [57, 3, 1, "", "fe_relations"], [57, 3, 1, "", "fes"], [57, 3, 1, "", "frame"], [57, 3, 1, "", "frame_by_id"], [57, 3, 1, "", "frame_by_name"], [57, 3, 1, "", "frame_ids_and_names"], [57, 3, 1, "", "frame_relation_types"], [57, 3, 1, "", "frame_relations"], [57, 3, 1, "", "frames"], [57, 3, 1, "", "frames_by_lemma"], [57, 3, 1, "", "ft_sents"], [57, 3, 1, "", "help"], [57, 3, 1, "", "lu"], [57, 3, 1, "", "lu_basic"], [57, 3, 1, "", "lu_ids_and_names"], [57, 3, 1, "", "lus"], [57, 3, 1, "", "propagate_semtypes"], [57, 3, 1, "", "semtype"], [57, 3, 1, "", "semtype_inherits"], [57, 3, 1, "", "semtypes"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "warnings"]], "nltk.corpus.reader.IEERCorpusReader": [[57, 3, 1, "", "docs"], [57, 3, 1, "", "parsed_docs"]], "nltk.corpus.reader.IPIPANCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "categories"], [57, 3, 1, "", "channels"], [57, 3, 1, "", "domains"], [57, 3, 1, "", "fileids"], [57, 3, 1, "", "paras"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_paras"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.IndianCorpusReader": [[57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.KNBCorpusReader": [[57, 3, 1, "", "__init__"]], "nltk.corpus.reader.LinThesaurusCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "scored_synonyms"], [57, 3, 1, "", "similarity"], [57, 3, 1, "", "synonyms"]], "nltk.corpus.reader.MTECorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "lemma_paras"], [57, 3, 1, "", "lemma_sents"], [57, 3, 1, "", "lemma_words"], [57, 3, 1, "", "paras"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_paras"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.MWAPPDBCorpusReader": [[57, 3, 1, "", "entries"], [57, 4, 1, "", "mwa_ppdb_xxxl_file"]], "nltk.corpus.reader.MacMorphoCorpusReader": [[57, 3, 1, "", "__init__"]], "nltk.corpus.reader.NKJPCorpusReader": [[57, 4, 1, "", "HEADER_MODE"], [57, 4, 1, "", "RAW_MODE"], [57, 4, 1, "", "SENTS_MODE"], [57, 4, 1, "", "WORDS_MODE"], [57, 3, 1, "", "__init__"], [57, 3, 1, "", "add_root"], [57, 3, 1, "", "fileids"], [57, 3, 1, "", "get_paths"], [57, 3, 1, "", "header"], [57, 3, 1, "", "raw"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.NPSChatCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "posts"], [57, 3, 1, "", "tagged_posts"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"], [57, 3, 1, "", "xml_posts"]], "nltk.corpus.reader.NombankCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "instances"], [57, 3, 1, "", "lines"], [57, 3, 1, "", "nouns"], [57, 3, 1, "", "roleset"], [57, 3, 1, "", "rolesets"]], "nltk.corpus.reader.NonbreakingPrefixesCorpusReader": [[57, 4, 1, "", "available_langs"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.OpinionLexiconCorpusReader": [[57, 4, 1, "", "CorpusView"], [57, 3, 1, "", "negative"], [57, 3, 1, "", "positive"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.PPAttachmentCorpusReader": [[57, 3, 1, "", "attachments"], [57, 3, 1, "", "tuples"]], "nltk.corpus.reader.PanLexLiteCorpusReader": [[57, 4, 1, "", "MEANING_Q"], [57, 4, 1, "", "TRANSLATION_Q"], [57, 3, 1, "", "__init__"], [57, 3, 1, "", "language_varieties"], [57, 3, 1, "", "meanings"], [57, 3, 1, "", "translations"]], "nltk.corpus.reader.PanlexSwadeshCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "entries"], [57, 3, 1, "", "get_languages"], [57, 3, 1, "", "get_macrolanguages"], [57, 3, 1, "", "language_codes"], [57, 3, 1, "", "license"], [57, 3, 1, "", "words_by_iso639"], [57, 3, 1, "", "words_by_lang"]], "nltk.corpus.reader.Pl196xCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "decode_tag"], [57, 4, 1, "", "head_len"], [57, 3, 1, "", "paras"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_paras"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "textids"], [57, 3, 1, "", "words"], [57, 3, 1, "", "xml"]], "nltk.corpus.reader.PlaintextCorpusReader": [[57, 4, 1, "", "CorpusView"], [57, 3, 1, "", "__init__"], [57, 3, 1, "", "paras"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.PortugueseCategorizedPlaintextCorpusReader": [[57, 3, 1, "", "__init__"]], "nltk.corpus.reader.PropbankCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "instances"], [57, 3, 1, "", "lines"], [57, 3, 1, "", "roleset"], [57, 3, 1, "", "rolesets"], [57, 3, 1, "", "verbs"]], "nltk.corpus.reader.ProsConsCorpusReader": [[57, 4, 1, "", "CorpusView"], [57, 3, 1, "", "__init__"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.RTECorpusReader": [[57, 3, 1, "", "pairs"]], "nltk.corpus.reader.ReviewsCorpusReader": [[57, 4, 1, "", "CorpusView"], [57, 3, 1, "", "__init__"], [57, 3, 1, "", "features"], [57, 3, 1, "", "reviews"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.SemcorCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "chunk_sents"], [57, 3, 1, "", "chunks"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_chunks"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.SensevalCorpusReader": [[57, 3, 1, "", "instances"]], "nltk.corpus.reader.SentiSynset": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "neg_score"], [57, 3, 1, "", "obj_score"], [57, 3, 1, "", "pos_score"]], "nltk.corpus.reader.SentiWordNetCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "all_senti_synsets"], [57, 3, 1, "", "senti_synset"], [57, 3, 1, "", "senti_synsets"]], "nltk.corpus.reader.StringCategoryCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "tuples"]], "nltk.corpus.reader.SwadeshCorpusReader": [[57, 3, 1, "", "entries"]], "nltk.corpus.reader.SwitchboardCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "discourses"], [57, 3, 1, "", "tagged_discourses"], [57, 3, 1, "", "tagged_turns"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "turns"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.SyntaxCorpusReader": [[57, 3, 1, "", "parsed_sents"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.TEICorpusView": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "read_block"]], "nltk.corpus.reader.TaggedCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "paras"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_paras"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.TimitCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "audiodata"], [57, 3, 1, "", "fileids"], [57, 3, 1, "", "phone_times"], [57, 3, 1, "", "phone_trees"], [57, 3, 1, "", "phones"], [57, 3, 1, "", "play"], [57, 3, 1, "", "sent_times"], [57, 3, 1, "", "sentid"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "spkrid"], [57, 3, 1, "", "spkrinfo"], [57, 3, 1, "", "spkrutteranceids"], [57, 3, 1, "", "transcription_dict"], [57, 3, 1, "", "utterance"], [57, 3, 1, "", "utteranceids"], [57, 3, 1, "", "wav"], [57, 3, 1, "", "word_times"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.TimitTaggedCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "paras"], [57, 3, 1, "", "tagged_paras"]], "nltk.corpus.reader.ToolboxCorpusReader": [[57, 3, 1, "", "entries"], [57, 3, 1, "", "fields"], [57, 3, 1, "", "words"], [57, 3, 1, "", "xml"]], "nltk.corpus.reader.TwitterCorpusReader": [[57, 4, 1, "", "CorpusView"], [57, 3, 1, "", "__init__"], [57, 3, 1, "", "docs"], [57, 3, 1, "", "strings"], [57, 3, 1, "", "tokenized"]], "nltk.corpus.reader.UdhrCorpusReader": [[57, 4, 1, "", "ENCODINGS"], [57, 4, 1, "", "SKIP"], [57, 3, 1, "", "__init__"]], "nltk.corpus.reader.UnicharsCorpusReader": [[57, 4, 1, "", "available_categories"], [57, 3, 1, "", "chars"]], "nltk.corpus.reader.VerbnetCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "classids"], [57, 3, 1, "", "fileids"], [57, 3, 1, "", "frames"], [57, 3, 1, "", "lemmas"], [57, 3, 1, "", "longid"], [57, 3, 1, "", "pprint"], [57, 3, 1, "", "pprint_frames"], [57, 3, 1, "", "pprint_members"], [57, 3, 1, "", "pprint_subclasses"], [57, 3, 1, "", "pprint_themroles"], [57, 3, 1, "", "shortid"], [57, 3, 1, "", "subclasses"], [57, 3, 1, "", "themroles"], [57, 3, 1, "", "vnclass"], [57, 3, 1, "", "wordnetids"]], "nltk.corpus.reader.WordListCorpusReader": [[57, 3, 1, "", "words"]], "nltk.corpus.reader.WordNetCorpusReader": [[57, 4, 1, "", "ADJ"], [57, 4, 1, "", "ADJ_SAT"], [57, 4, 1, "", "ADV"], [57, 4, 1, "", "MORPHOLOGICAL_SUBSTITUTIONS"], [57, 4, 1, "", "NOUN"], [57, 4, 1, "", "VERB"], [57, 3, 1, "", "__init__"], [57, 3, 1, "", "add_exomw"], [57, 3, 1, "", "add_omw"], [57, 3, 1, "", "add_provs"], [57, 3, 1, "", "all_eng_synsets"], [57, 3, 1, "", "all_lemma_names"], [57, 3, 1, "", "all_omw_synsets"], [57, 3, 1, "", "all_synsets"], [57, 3, 1, "", "citation"], [57, 3, 1, "", "custom_lemmas"], [57, 3, 1, "", "digraph"], [57, 3, 1, "", "disable_custom_lemmas"], [57, 3, 1, "", "doc"], [57, 3, 1, "", "get_version"], [57, 3, 1, "", "ic"], [57, 3, 1, "", "index_sense"], [57, 3, 1, "", "jcn_similarity"], [57, 3, 1, "", "langs"], [57, 3, 1, "", "lch_similarity"], [57, 3, 1, "", "lemma"], [57, 3, 1, "", "lemma_count"], [57, 3, 1, "", "lemma_from_key"], [57, 3, 1, "", "lemmas"], [57, 3, 1, "", "license"], [57, 3, 1, "", "lin_similarity"], [57, 3, 1, "", "map_to_many"], [57, 3, 1, "", "map_to_one"], [57, 3, 1, "", "map_wn"], [57, 3, 1, "", "merged_synsets"], [57, 3, 1, "", "morphy"], [57, 3, 1, "", "of2ss"], [57, 3, 1, "", "path_similarity"], [57, 3, 1, "", "readme"], [57, 3, 1, "", "res_similarity"], [57, 3, 1, "", "split_synsets"], [57, 3, 1, "", "ss2of"], [57, 3, 1, "", "synonyms"], [57, 3, 1, "", "synset"], [57, 3, 1, "", "synset_from_pos_and_offset"], [57, 3, 1, "", "synset_from_sense_key"], [57, 3, 1, "", "synsets"], [57, 3, 1, "", "words"], [57, 3, 1, "", "wup_similarity"]], "nltk.corpus.reader.WordNetICCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "ic"]], "nltk.corpus.reader.XMLCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "words"], [57, 3, 1, "", "xml"]], "nltk.corpus.reader.YCOECorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "documents"], [57, 3, 1, "", "fileids"], [57, 3, 1, "", "paras"], [57, 3, 1, "", "parsed_sents"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_paras"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.aligned": [[58, 2, 1, "", "AlignedCorpusReader"], [58, 2, 1, "", "AlignedSentCorpusView"]], "nltk.corpus.reader.aligned.AlignedCorpusReader": [[58, 3, 1, "", "__init__"], [58, 3, 1, "", "aligned_sents"], [58, 3, 1, "", "sents"], [58, 3, 1, "", "words"]], "nltk.corpus.reader.aligned.AlignedSentCorpusView": [[58, 3, 1, "", "__init__"], [58, 3, 1, "", "read_block"]], "nltk.corpus.reader.api": [[59, 2, 1, "", "CategorizedCorpusReader"], [59, 2, 1, "", "CorpusReader"], [59, 2, 1, "", "SyntaxCorpusReader"]], "nltk.corpus.reader.api.CategorizedCorpusReader": [[59, 3, 1, "", "__init__"], [59, 3, 1, "", "categories"], [59, 3, 1, "", "fileids"], [59, 3, 1, "", "paras"], [59, 3, 1, "", "raw"], [59, 3, 1, "", "sents"], [59, 3, 1, "", "words"]], "nltk.corpus.reader.api.CorpusReader": [[59, 3, 1, "", "__init__"], [59, 3, 1, "", "abspath"], [59, 3, 1, "", "abspaths"], [59, 3, 1, "", "citation"], [59, 3, 1, "", "encoding"], [59, 3, 1, "", "ensure_loaded"], [59, 3, 1, "", "fileids"], [59, 3, 1, "", "license"], [59, 3, 1, "", "open"], [59, 3, 1, "", "raw"], [59, 3, 1, "", "readme"], [59, 5, 1, "", "root"]], "nltk.corpus.reader.api.SyntaxCorpusReader": [[59, 3, 1, "", "parsed_sents"], [59, 3, 1, "", "sents"], [59, 3, 1, "", "tagged_sents"], [59, 3, 1, "", "tagged_words"], [59, 3, 1, "", "words"]], "nltk.corpus.reader.bcp47": [[60, 2, 1, "", "BCP47CorpusReader"]], "nltk.corpus.reader.bcp47.BCP47CorpusReader": [[60, 3, 1, "", "__init__"], [60, 3, 1, "", "data_dict"], [60, 3, 1, "", "lang2str"], [60, 3, 1, "", "load_wiki_q"], [60, 3, 1, "", "morphology"], [60, 3, 1, "", "name"], [60, 3, 1, "", "parse_tag"], [60, 3, 1, "", "subdiv_dict"], [60, 3, 1, "", "val2str"], [60, 3, 1, "", "wiki_dict"]], "nltk.corpus.reader.bnc": [[61, 2, 1, "", "BNCCorpusReader"], [61, 2, 1, "", "BNCSentence"], [61, 2, 1, "", "BNCWordView"]], "nltk.corpus.reader.bnc.BNCCorpusReader": [[61, 3, 1, "", "__init__"], [61, 3, 1, "", "sents"], [61, 3, 1, "", "tagged_sents"], [61, 3, 1, "", "tagged_words"], [61, 3, 1, "", "words"]], "nltk.corpus.reader.bnc.BNCSentence": [[61, 3, 1, "", "__init__"]], "nltk.corpus.reader.bnc.BNCWordView": [[61, 3, 1, "", "__init__"], [61, 4, 1, "", "author"], [61, 4, 1, "", "editor"], [61, 3, 1, "", "handle_elt"], [61, 3, 1, "", "handle_header"], [61, 3, 1, "", "handle_sent"], [61, 3, 1, "", "handle_word"], [61, 4, 1, "", "resps"], [61, 4, 1, "", "tags_to_ignore"], [61, 4, 1, "", "title"]], "nltk.corpus.reader.bracket_parse": [[62, 2, 1, "", "AlpinoCorpusReader"], [62, 2, 1, "", "BracketParseCorpusReader"], [62, 2, 1, "", "CategorizedBracketParseCorpusReader"]], "nltk.corpus.reader.bracket_parse.AlpinoCorpusReader": [[62, 3, 1, "", "__init__"]], "nltk.corpus.reader.bracket_parse.BracketParseCorpusReader": [[62, 3, 1, "", "__init__"]], "nltk.corpus.reader.bracket_parse.CategorizedBracketParseCorpusReader": [[62, 3, 1, "", "__init__"], [62, 3, 1, "", "parsed_paras"], [62, 3, 1, "", "parsed_sents"], [62, 3, 1, "", "parsed_words"], [62, 3, 1, "", "tagged_paras"], [62, 3, 1, "", "tagged_sents"], [62, 3, 1, "", "tagged_words"]], "nltk.corpus.reader.categorized_sents": [[63, 2, 1, "", "CategorizedSentencesCorpusReader"]], "nltk.corpus.reader.categorized_sents.CategorizedSentencesCorpusReader": [[63, 4, 1, "", "CorpusView"], [63, 3, 1, "", "__init__"], [63, 3, 1, "", "sents"], [63, 3, 1, "", "words"]], "nltk.corpus.reader.chasen": [[64, 2, 1, "", "ChasenCorpusReader"], [64, 2, 1, "", "ChasenCorpusView"], [64, 1, 1, "", "demo"], [64, 1, 1, "", "test"]], "nltk.corpus.reader.chasen.ChasenCorpusReader": [[64, 3, 1, "", "__init__"], [64, 3, 1, "", "paras"], [64, 3, 1, "", "sents"], [64, 3, 1, "", "tagged_paras"], [64, 3, 1, "", "tagged_sents"], [64, 3, 1, "", "tagged_words"], [64, 3, 1, "", "words"]], "nltk.corpus.reader.chasen.ChasenCorpusView": [[64, 3, 1, "", "__init__"], [64, 3, 1, "", "read_block"]], "nltk.corpus.reader.childes": [[65, 2, 1, "", "CHILDESCorpusReader"], [65, 1, 1, "", "demo"]], "nltk.corpus.reader.childes.CHILDESCorpusReader": [[65, 3, 1, "", "MLU"], [65, 3, 1, "", "__init__"], [65, 3, 1, "", "age"], [65, 4, 1, "", "childes_url_base"], [65, 3, 1, "", "convert_age"], [65, 3, 1, "", "corpus"], [65, 3, 1, "", "participants"], [65, 3, 1, "", "sents"], [65, 3, 1, "", "tagged_sents"], [65, 3, 1, "", "tagged_words"], [65, 3, 1, "", "webview_file"], [65, 3, 1, "", "words"]], "nltk.corpus.reader.chunked": [[66, 2, 1, "", "ChunkedCorpusReader"], [66, 2, 1, "", "ChunkedCorpusView"]], "nltk.corpus.reader.chunked.ChunkedCorpusReader": [[66, 3, 1, "", "__init__"], [66, 3, 1, "", "chunked_paras"], [66, 3, 1, "", "chunked_sents"], [66, 3, 1, "", "chunked_words"], [66, 3, 1, "", "paras"], [66, 3, 1, "", "sents"], [66, 3, 1, "", "tagged_paras"], [66, 3, 1, "", "tagged_sents"], [66, 3, 1, "", "tagged_words"], [66, 3, 1, "", "words"]], "nltk.corpus.reader.chunked.ChunkedCorpusView": [[66, 3, 1, "", "__init__"], [66, 3, 1, "", "read_block"]], "nltk.corpus.reader.cmudict": [[67, 2, 1, "", "CMUDictCorpusReader"], [67, 1, 1, "", "read_cmudict_block"]], "nltk.corpus.reader.cmudict.CMUDictCorpusReader": [[67, 3, 1, "", "dict"], [67, 3, 1, "", "entries"], [67, 3, 1, "", "words"]], "nltk.corpus.reader.comparative_sents": [[68, 2, 1, "", "ComparativeSentencesCorpusReader"], [68, 2, 1, "", "Comparison"]], "nltk.corpus.reader.comparative_sents.ComparativeSentencesCorpusReader": [[68, 4, 1, "", "CorpusView"], [68, 3, 1, "", "__init__"], [68, 3, 1, "", "comparisons"], [68, 3, 1, "", "keywords"], [68, 3, 1, "", "keywords_readme"], [68, 3, 1, "", "sents"], [68, 3, 1, "", "words"]], "nltk.corpus.reader.comparative_sents.Comparison": [[68, 3, 1, "", "__init__"]], "nltk.corpus.reader.conll": [[69, 2, 1, "", "ConllChunkCorpusReader"], [69, 2, 1, "", "ConllCorpusReader"], [69, 2, 1, "", "ConllSRLInstance"], [69, 2, 1, "", "ConllSRLInstanceList"]], "nltk.corpus.reader.conll.ConllChunkCorpusReader": [[69, 3, 1, "", "__init__"]], "nltk.corpus.reader.conll.ConllCorpusReader": [[69, 4, 1, "", "CHUNK"], [69, 4, 1, "", "COLUMN_TYPES"], [69, 4, 1, "", "IGNORE"], [69, 4, 1, "", "NE"], [69, 4, 1, "", "POS"], [69, 4, 1, "", "SRL"], [69, 4, 1, "", "TREE"], [69, 4, 1, "", "WORDS"], [69, 3, 1, "", "__init__"], [69, 3, 1, "", "chunked_sents"], [69, 3, 1, "", "chunked_words"], [69, 3, 1, "", "iob_sents"], [69, 3, 1, "", "iob_words"], [69, 3, 1, "", "parsed_sents"], [69, 3, 1, "", "sents"], [69, 3, 1, "", "srl_instances"], [69, 3, 1, "", "srl_spans"], [69, 3, 1, "", "tagged_sents"], [69, 3, 1, "", "tagged_words"], [69, 3, 1, "", "words"]], "nltk.corpus.reader.conll.ConllSRLInstance": [[69, 3, 1, "", "__init__"], [69, 4, 1, "", "arguments"], [69, 3, 1, "", "pprint"], [69, 4, 1, "", "tagged_spans"], [69, 4, 1, "", "tree"], [69, 4, 1, "", "verb"], [69, 4, 1, "", "verb_head"], [69, 4, 1, "", "words"]], "nltk.corpus.reader.conll.ConllSRLInstanceList": [[69, 3, 1, "", "__init__"], [69, 3, 1, "", "pprint"]], "nltk.corpus.reader.crubadan": [[70, 2, 1, "", "CrubadanCorpusReader"]], "nltk.corpus.reader.crubadan.CrubadanCorpusReader": [[70, 3, 1, "", "__init__"], [70, 3, 1, "", "crubadan_to_iso"], [70, 3, 1, "", "iso_to_crubadan"], [70, 3, 1, "", "lang_freq"], [70, 3, 1, "", "langs"]], "nltk.corpus.reader.dependency": [[71, 2, 1, "", "DependencyCorpusReader"], [71, 2, 1, "", "DependencyCorpusView"]], "nltk.corpus.reader.dependency.DependencyCorpusReader": [[71, 3, 1, "", "__init__"], [71, 3, 1, "", "parsed_sents"], [71, 3, 1, "", "sents"], [71, 3, 1, "", "tagged_sents"], [71, 3, 1, "", "tagged_words"], [71, 3, 1, "", "words"]], "nltk.corpus.reader.dependency.DependencyCorpusView": [[71, 3, 1, "", "__init__"], [71, 3, 1, "", "read_block"]], "nltk.corpus.reader.framenet": [[72, 2, 1, "", "AttrDict"], [72, 2, 1, "", "FramenetCorpusReader"], [72, 6, 1, "", "FramenetError"], [72, 2, 1, "", "Future"], [72, 2, 1, "", "PrettyDict"], [72, 2, 1, "", "PrettyLazyConcatenation"], [72, 2, 1, "", "PrettyLazyIteratorList"], [72, 2, 1, "", "PrettyLazyMap"], [72, 2, 1, "", "PrettyList"], [72, 2, 1, "", "SpecialList"], [72, 1, 1, "", "demo"], [72, 1, 1, "", "mimic_wrap"]], "nltk.corpus.reader.framenet.AttrDict": [[72, 3, 1, "", "__init__"]], "nltk.corpus.reader.framenet.FramenetCorpusReader": [[72, 3, 1, "", "__init__"], [72, 3, 1, "", "annotations"], [72, 3, 1, "", "buildindexes"], [72, 3, 1, "", "doc"], [72, 3, 1, "", "docs"], [72, 3, 1, "", "docs_metadata"], [72, 3, 1, "", "exemplars"], [72, 3, 1, "", "fe_relations"], [72, 3, 1, "", "fes"], [72, 3, 1, "", "frame"], [72, 3, 1, "", "frame_by_id"], [72, 3, 1, "", "frame_by_name"], [72, 3, 1, "", "frame_ids_and_names"], [72, 3, 1, "", "frame_relation_types"], [72, 3, 1, "", "frame_relations"], [72, 3, 1, "", "frames"], [72, 3, 1, "", "frames_by_lemma"], [72, 3, 1, "", "ft_sents"], [72, 3, 1, "", "help"], [72, 3, 1, "", "lu"], [72, 3, 1, "", "lu_basic"], [72, 3, 1, "", "lu_ids_and_names"], [72, 3, 1, "", "lus"], [72, 3, 1, "", "propagate_semtypes"], [72, 3, 1, "", "semtype"], [72, 3, 1, "", "semtype_inherits"], [72, 3, 1, "", "semtypes"], [72, 3, 1, "", "sents"], [72, 3, 1, "", "warnings"]], "nltk.corpus.reader.framenet.Future": [[72, 3, 1, "", "__init__"]], "nltk.corpus.reader.framenet.PrettyDict": [[72, 3, 1, "", "__init__"]], "nltk.corpus.reader.framenet.PrettyList": [[72, 3, 1, "", "__init__"]], "nltk.corpus.reader.framenet.SpecialList": [[72, 3, 1, "", "__init__"]], "nltk.corpus.reader.ieer": [[73, 2, 1, "", "IEERCorpusReader"], [73, 2, 1, "", "IEERDocument"], [73, 7, 1, "", "documents"], [73, 7, 1, "", "titles"]], "nltk.corpus.reader.ieer.IEERCorpusReader": [[73, 3, 1, "", "docs"], [73, 3, 1, "", "parsed_docs"]], "nltk.corpus.reader.ieer.IEERDocument": [[73, 3, 1, "", "__init__"]], "nltk.corpus.reader.indian": [[74, 2, 1, "", "IndianCorpusReader"], [74, 2, 1, "", "IndianCorpusView"]], "nltk.corpus.reader.indian.IndianCorpusReader": [[74, 3, 1, "", "sents"], [74, 3, 1, "", "tagged_sents"], [74, 3, 1, "", "tagged_words"], [74, 3, 1, "", "words"]], "nltk.corpus.reader.indian.IndianCorpusView": [[74, 3, 1, "", "__init__"], [74, 3, 1, "", "read_block"]], "nltk.corpus.reader.ipipan": [[75, 2, 1, "", "IPIPANCorpusReader"], [75, 2, 1, "", "IPIPANCorpusView"]], "nltk.corpus.reader.ipipan.IPIPANCorpusReader": [[75, 3, 1, "", "__init__"], [75, 3, 1, "", "categories"], [75, 3, 1, "", "channels"], [75, 3, 1, "", "domains"], [75, 3, 1, "", "fileids"], [75, 3, 1, "", "paras"], [75, 3, 1, "", "sents"], [75, 3, 1, "", "tagged_paras"], [75, 3, 1, "", "tagged_sents"], [75, 3, 1, "", "tagged_words"], [75, 3, 1, "", "words"]], "nltk.corpus.reader.ipipan.IPIPANCorpusView": [[75, 4, 1, "", "PARAS_MODE"], [75, 4, 1, "", "SENTS_MODE"], [75, 4, 1, "", "WORDS_MODE"], [75, 3, 1, "", "__init__"], [75, 3, 1, "", "read_block"]], "nltk.corpus.reader.knbc": [[76, 2, 1, "", "KNBCorpusReader"], [76, 1, 1, "", "demo"], [76, 1, 1, "", "test"]], "nltk.corpus.reader.knbc.KNBCorpusReader": [[76, 3, 1, "", "__init__"]], "nltk.corpus.reader.lin": [[77, 2, 1, "", "LinThesaurusCorpusReader"], [77, 1, 1, "", "demo"]], "nltk.corpus.reader.lin.LinThesaurusCorpusReader": [[77, 3, 1, "", "__init__"], [77, 3, 1, "", "scored_synonyms"], [77, 3, 1, "", "similarity"], [77, 3, 1, "", "synonyms"]], "nltk.corpus.reader.markdown": [[78, 2, 1, "", "CategorizedMarkdownCorpusReader"], [78, 2, 1, "", "CodeBlock"], [78, 2, 1, "", "Image"], [78, 2, 1, "", "Link"], [78, 2, 1, "", "List"], [78, 2, 1, "", "MarkdownBlock"], [78, 2, 1, "", "MarkdownCorpusReader"], [78, 2, 1, "", "MarkdownSection"], [78, 1, 1, "", "comma_separated_string_args"], [78, 1, 1, "", "read_parse_blankline_block"]], "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader": [[78, 3, 1, "", "__init__"], [78, 3, 1, "", "blockquote_reader"], [78, 3, 1, "", "blockquotes"], [78, 3, 1, "", "categories"], [78, 3, 1, "", "code_block_reader"], [78, 3, 1, "", "code_blocks"], [78, 3, 1, "", "concatenated_view"], [78, 3, 1, "", "fileids"], [78, 3, 1, "", "image_reader"], [78, 3, 1, "", "images"], [78, 3, 1, "", "link_reader"], [78, 3, 1, "", "links"], [78, 3, 1, "", "list_reader"], [78, 3, 1, "", "lists"], [78, 3, 1, "", "metadata"], [78, 3, 1, "", "metadata_reader"], [78, 3, 1, "", "paras"], [78, 3, 1, "", "raw"], [78, 3, 1, "", "section_reader"], [78, 3, 1, "", "sections"], [78, 3, 1, "", "sents"], [78, 3, 1, "", "words"]], "nltk.corpus.reader.markdown.CodeBlock": [[78, 3, 1, "", "__init__"], [78, 5, 1, "", "lines"], [78, 5, 1, "", "paras"], [78, 5, 1, "", "sents"]], "nltk.corpus.reader.markdown.Image": [[78, 3, 1, "", "__new__"], [78, 4, 1, "", "label"], [78, 4, 1, "", "src"], [78, 4, 1, "", "title"]], "nltk.corpus.reader.markdown.Link": [[78, 3, 1, "", "__new__"], [78, 4, 1, "", "href"], [78, 4, 1, "", "label"], [78, 4, 1, "", "title"]], "nltk.corpus.reader.markdown.List": [[78, 3, 1, "", "__new__"], [78, 4, 1, "", "is_ordered"], [78, 4, 1, "", "items"]], "nltk.corpus.reader.markdown.MarkdownBlock": [[78, 3, 1, "", "__init__"], [78, 5, 1, "", "paras"], [78, 5, 1, "", "raw"], [78, 5, 1, "", "sents"], [78, 5, 1, "", "words"]], "nltk.corpus.reader.markdown.MarkdownCorpusReader": [[78, 3, 1, "", "__init__"]], "nltk.corpus.reader.markdown.MarkdownSection": [[78, 3, 1, "", "__init__"]], "nltk.corpus.reader.mte": [[79, 2, 1, "", "MTECorpusReader"], [79, 2, 1, "", "MTECorpusView"], [79, 2, 1, "", "MTEFileReader"], [79, 2, 1, "", "MTETagConverter"], [79, 1, 1, "", "xpath"]], "nltk.corpus.reader.mte.MTECorpusReader": [[79, 3, 1, "", "__init__"], [79, 3, 1, "", "lemma_paras"], [79, 3, 1, "", "lemma_sents"], [79, 3, 1, "", "lemma_words"], [79, 3, 1, "", "paras"], [79, 3, 1, "", "sents"], [79, 3, 1, "", "tagged_paras"], [79, 3, 1, "", "tagged_sents"], [79, 3, 1, "", "tagged_words"], [79, 3, 1, "", "words"]], "nltk.corpus.reader.mte.MTECorpusView": [[79, 3, 1, "", "__init__"], [79, 3, 1, "", "read_block"]], "nltk.corpus.reader.mte.MTEFileReader": [[79, 3, 1, "", "__init__"], [79, 3, 1, "", "lemma_paras"], [79, 3, 1, "", "lemma_sents"], [79, 3, 1, "", "lemma_words"], [79, 4, 1, "", "ns"], [79, 4, 1, "", "para_path"], [79, 3, 1, "", "paras"], [79, 4, 1, "", "sent_path"], [79, 3, 1, "", "sents"], [79, 4, 1, "", "tag_ns"], [79, 3, 1, "", "tagged_paras"], [79, 3, 1, "", "tagged_sents"], [79, 3, 1, "", "tagged_words"], [79, 4, 1, "", "word_path"], [79, 3, 1, "", "words"], [79, 4, 1, "", "xml_ns"]], "nltk.corpus.reader.mte.MTETagConverter": [[79, 4, 1, "", "mapping_msd_universal"], [79, 3, 1, "", "msd_to_universal"]], "nltk.corpus.reader.nkjp": [[80, 2, 1, "", "NKJPCorpusReader"], [80, 2, 1, "", "NKJPCorpus_Header_View"], [80, 2, 1, "", "NKJPCorpus_Morph_View"], [80, 2, 1, "", "NKJPCorpus_Segmentation_View"], [80, 2, 1, "", "NKJPCorpus_Text_View"], [80, 2, 1, "", "XML_Tool"]], "nltk.corpus.reader.nkjp.NKJPCorpusReader": [[80, 4, 1, "", "HEADER_MODE"], [80, 4, 1, "", "RAW_MODE"], [80, 4, 1, "", "SENTS_MODE"], [80, 4, 1, "", "WORDS_MODE"], [80, 3, 1, "", "__init__"], [80, 3, 1, "", "add_root"], [80, 3, 1, "", "fileids"], [80, 3, 1, "", "get_paths"], [80, 3, 1, "", "header"], [80, 3, 1, "", "raw"], [80, 3, 1, "", "sents"], [80, 3, 1, "", "tagged_words"], [80, 3, 1, "", "words"]], "nltk.corpus.reader.nkjp.NKJPCorpus_Header_View": [[80, 3, 1, "", "__init__"], [80, 3, 1, "", "handle_elt"], [80, 3, 1, "", "handle_query"]], "nltk.corpus.reader.nkjp.NKJPCorpus_Morph_View": [[80, 3, 1, "", "__init__"], [80, 3, 1, "", "handle_elt"], [80, 3, 1, "", "handle_query"]], "nltk.corpus.reader.nkjp.NKJPCorpus_Segmentation_View": [[80, 3, 1, "", "__init__"], [80, 3, 1, "", "get_segm_id"], [80, 3, 1, "", "get_sent_beg"], [80, 3, 1, "", "get_sent_end"], [80, 3, 1, "", "get_sentences"], [80, 3, 1, "", "handle_elt"], [80, 3, 1, "", "handle_query"], [80, 3, 1, "", "remove_choice"]], "nltk.corpus.reader.nkjp.NKJPCorpus_Text_View": [[80, 4, 1, "", "RAW_MODE"], [80, 4, 1, "", "SENTS_MODE"], [80, 3, 1, "", "__init__"], [80, 3, 1, "", "get_segm_id"], [80, 3, 1, "", "handle_elt"], [80, 3, 1, "", "handle_query"], [80, 3, 1, "", "read_block"]], "nltk.corpus.reader.nkjp.XML_Tool": [[80, 3, 1, "", "__init__"], [80, 3, 1, "", "build_preprocessed_file"], [80, 3, 1, "", "remove_preprocessed_file"]], "nltk.corpus.reader.nombank": [[81, 2, 1, "", "NombankChainTreePointer"], [81, 2, 1, "", "NombankCorpusReader"], [81, 2, 1, "", "NombankInstance"], [81, 2, 1, "", "NombankPointer"], [81, 2, 1, "", "NombankSplitTreePointer"], [81, 2, 1, "", "NombankTreePointer"]], "nltk.corpus.reader.nombank.NombankChainTreePointer": [[81, 3, 1, "", "__init__"], [81, 4, 1, "", "pieces"], [81, 3, 1, "", "select"]], "nltk.corpus.reader.nombank.NombankCorpusReader": [[81, 3, 1, "", "__init__"], [81, 3, 1, "", "instances"], [81, 3, 1, "", "lines"], [81, 3, 1, "", "nouns"], [81, 3, 1, "", "roleset"], [81, 3, 1, "", "rolesets"]], "nltk.corpus.reader.nombank.NombankInstance": [[81, 3, 1, "", "__init__"], [81, 4, 1, "", "arguments"], [81, 4, 1, "", "baseform"], [81, 4, 1, "", "fileid"], [81, 3, 1, "", "parse"], [81, 4, 1, "", "parse_corpus"], [81, 4, 1, "", "predicate"], [81, 4, 1, "", "predid"], [81, 5, 1, "", "roleset"], [81, 4, 1, "", "sensenumber"], [81, 4, 1, "", "sentnum"], [81, 5, 1, "", "tree"], [81, 4, 1, "", "wordnum"]], "nltk.corpus.reader.nombank.NombankPointer": [[81, 3, 1, "", "__init__"]], "nltk.corpus.reader.nombank.NombankSplitTreePointer": [[81, 3, 1, "", "__init__"], [81, 4, 1, "", "pieces"], [81, 3, 1, "", "select"]], "nltk.corpus.reader.nombank.NombankTreePointer": [[81, 3, 1, "", "__init__"], [81, 3, 1, "", "parse"], [81, 3, 1, "", "select"], [81, 3, 1, "", "treepos"]], "nltk.corpus.reader.nps_chat": [[82, 2, 1, "", "NPSChatCorpusReader"]], "nltk.corpus.reader.nps_chat.NPSChatCorpusReader": [[82, 3, 1, "", "__init__"], [82, 3, 1, "", "posts"], [82, 3, 1, "", "tagged_posts"], [82, 3, 1, "", "tagged_words"], [82, 3, 1, "", "words"], [82, 3, 1, "", "xml_posts"]], "nltk.corpus.reader.opinion_lexicon": [[83, 2, 1, "", "IgnoreReadmeCorpusView"], [83, 2, 1, "", "OpinionLexiconCorpusReader"]], "nltk.corpus.reader.opinion_lexicon.IgnoreReadmeCorpusView": [[83, 3, 1, "", "__init__"]], "nltk.corpus.reader.opinion_lexicon.OpinionLexiconCorpusReader": [[83, 4, 1, "", "CorpusView"], [83, 3, 1, "", "negative"], [83, 3, 1, "", "positive"], [83, 3, 1, "", "words"]], "nltk.corpus.reader.panlex_lite": [[84, 2, 1, "", "Meaning"], [84, 2, 1, "", "PanLexLiteCorpusReader"]], "nltk.corpus.reader.panlex_lite.Meaning": [[84, 3, 1, "", "__init__"], [84, 3, 1, "", "expressions"], [84, 3, 1, "", "id"], [84, 3, 1, "", "quality"], [84, 3, 1, "", "source"], [84, 3, 1, "", "source_group"]], "nltk.corpus.reader.panlex_lite.PanLexLiteCorpusReader": [[84, 4, 1, "", "MEANING_Q"], [84, 4, 1, "", "TRANSLATION_Q"], [84, 3, 1, "", "__init__"], [84, 3, 1, "", "language_varieties"], [84, 3, 1, "", "meanings"], [84, 3, 1, "", "translations"]], "nltk.corpus.reader.panlex_swadesh": [[85, 2, 1, "", "PanlexLanguage"], [85, 2, 1, "", "PanlexSwadeshCorpusReader"]], "nltk.corpus.reader.panlex_swadesh.PanlexLanguage": [[85, 3, 1, "", "__new__"], [85, 4, 1, "", "iso639"], [85, 4, 1, "", "iso639_type"], [85, 4, 1, "", "langvar_uid"], [85, 4, 1, "", "name"], [85, 4, 1, "", "panlex_uid"], [85, 4, 1, "", "script"]], "nltk.corpus.reader.panlex_swadesh.PanlexSwadeshCorpusReader": [[85, 3, 1, "", "__init__"], [85, 3, 1, "", "entries"], [85, 3, 1, "", "get_languages"], [85, 3, 1, "", "get_macrolanguages"], [85, 3, 1, "", "language_codes"], [85, 3, 1, "", "license"], [85, 3, 1, "", "words_by_iso639"], [85, 3, 1, "", "words_by_lang"]], "nltk.corpus.reader.pl196x": [[86, 2, 1, "", "Pl196xCorpusReader"], [86, 2, 1, "", "TEICorpusView"]], "nltk.corpus.reader.pl196x.Pl196xCorpusReader": [[86, 3, 1, "", "__init__"], [86, 3, 1, "", "decode_tag"], [86, 4, 1, "", "head_len"], [86, 3, 1, "", "paras"], [86, 3, 1, "", "sents"], [86, 3, 1, "", "tagged_paras"], [86, 3, 1, "", "tagged_sents"], [86, 3, 1, "", "tagged_words"], [86, 3, 1, "", "textids"], [86, 3, 1, "", "words"], [86, 3, 1, "", "xml"]], "nltk.corpus.reader.pl196x.TEICorpusView": [[86, 3, 1, "", "__init__"], [86, 3, 1, "", "read_block"]], "nltk.corpus.reader.plaintext": [[87, 2, 1, "", "CategorizedPlaintextCorpusReader"], [87, 2, 1, "", "EuroparlCorpusReader"], [87, 2, 1, "", "PlaintextCorpusReader"], [87, 2, 1, "", "PortugueseCategorizedPlaintextCorpusReader"]], "nltk.corpus.reader.plaintext.CategorizedPlaintextCorpusReader": [[87, 3, 1, "", "__init__"]], "nltk.corpus.reader.plaintext.EuroparlCorpusReader": [[87, 3, 1, "", "chapters"], [87, 3, 1, "", "paras"]], "nltk.corpus.reader.plaintext.PlaintextCorpusReader": [[87, 4, 1, "", "CorpusView"], [87, 3, 1, "", "__init__"], [87, 3, 1, "", "paras"], [87, 3, 1, "", "sents"], [87, 3, 1, "", "words"]], "nltk.corpus.reader.plaintext.PortugueseCategorizedPlaintextCorpusReader": [[87, 3, 1, "", "__init__"]], "nltk.corpus.reader.ppattach": [[88, 2, 1, "", "PPAttachment"], [88, 2, 1, "", "PPAttachmentCorpusReader"]], "nltk.corpus.reader.ppattach.PPAttachment": [[88, 3, 1, "", "__init__"]], "nltk.corpus.reader.ppattach.PPAttachmentCorpusReader": [[88, 3, 1, "", "attachments"], [88, 3, 1, "", "tuples"]], "nltk.corpus.reader.propbank": [[89, 2, 1, "", "PropbankChainTreePointer"], [89, 2, 1, "", "PropbankCorpusReader"], [89, 2, 1, "", "PropbankInflection"], [89, 2, 1, "", "PropbankInstance"], [89, 2, 1, "", "PropbankPointer"], [89, 2, 1, "", "PropbankSplitTreePointer"], [89, 2, 1, "", "PropbankTreePointer"]], "nltk.corpus.reader.propbank.PropbankChainTreePointer": [[89, 3, 1, "", "__init__"], [89, 4, 1, "", "pieces"], [89, 3, 1, "", "select"]], "nltk.corpus.reader.propbank.PropbankCorpusReader": [[89, 3, 1, "", "__init__"], [89, 3, 1, "", "instances"], [89, 3, 1, "", "lines"], [89, 3, 1, "", "roleset"], [89, 3, 1, "", "rolesets"], [89, 3, 1, "", "verbs"]], "nltk.corpus.reader.propbank.PropbankInflection": [[89, 4, 1, "", "ACTIVE"], [89, 4, 1, "", "FINITE"], [89, 4, 1, "", "FUTURE"], [89, 4, 1, "", "GERUND"], [89, 4, 1, "", "INFINITIVE"], [89, 4, 1, "", "NONE"], [89, 4, 1, "", "PARTICIPLE"], [89, 4, 1, "", "PASSIVE"], [89, 4, 1, "", "PAST"], [89, 4, 1, "", "PERFECT"], [89, 4, 1, "", "PERFECT_AND_PROGRESSIVE"], [89, 4, 1, "", "PRESENT"], [89, 4, 1, "", "PROGRESSIVE"], [89, 4, 1, "", "THIRD_PERSON"], [89, 3, 1, "", "__init__"], [89, 3, 1, "", "parse"]], "nltk.corpus.reader.propbank.PropbankInstance": [[89, 3, 1, "", "__init__"], [89, 4, 1, "", "arguments"], [89, 5, 1, "", "baseform"], [89, 4, 1, "", "fileid"], [89, 4, 1, "", "inflection"], [89, 3, 1, "", "parse"], [89, 4, 1, "", "parse_corpus"], [89, 4, 1, "", "predicate"], [89, 5, 1, "", "predid"], [89, 4, 1, "", "roleset"], [89, 5, 1, "", "sensenumber"], [89, 4, 1, "", "sentnum"], [89, 4, 1, "", "tagger"], [89, 5, 1, "", "tree"], [89, 4, 1, "", "wordnum"]], "nltk.corpus.reader.propbank.PropbankPointer": [[89, 3, 1, "", "__init__"]], "nltk.corpus.reader.propbank.PropbankSplitTreePointer": [[89, 3, 1, "", "__init__"], [89, 4, 1, "", "pieces"], [89, 3, 1, "", "select"]], "nltk.corpus.reader.propbank.PropbankTreePointer": [[89, 3, 1, "", "__init__"], [89, 3, 1, "", "parse"], [89, 3, 1, "", "select"], [89, 3, 1, "", "treepos"]], "nltk.corpus.reader.pros_cons": [[90, 2, 1, "", "ProsConsCorpusReader"]], "nltk.corpus.reader.pros_cons.ProsConsCorpusReader": [[90, 4, 1, "", "CorpusView"], [90, 3, 1, "", "__init__"], [90, 3, 1, "", "sents"], [90, 3, 1, "", "words"]], "nltk.corpus.reader.reviews": [[91, 2, 1, "", "Review"], [91, 2, 1, "", "ReviewLine"], [91, 2, 1, "", "ReviewsCorpusReader"]], "nltk.corpus.reader.reviews.Review": [[91, 3, 1, "", "__init__"], [91, 3, 1, "", "add_line"], [91, 3, 1, "", "features"], [91, 3, 1, "", "sents"]], "nltk.corpus.reader.reviews.ReviewLine": [[91, 3, 1, "", "__init__"]], "nltk.corpus.reader.reviews.ReviewsCorpusReader": [[91, 4, 1, "", "CorpusView"], [91, 3, 1, "", "__init__"], [91, 3, 1, "", "features"], [91, 3, 1, "", "reviews"], [91, 3, 1, "", "sents"], [91, 3, 1, "", "words"]], "nltk.corpus.reader.rte": [[92, 2, 1, "", "RTECorpusReader"], [92, 2, 1, "", "RTEPair"], [92, 1, 1, "", "norm"]], "nltk.corpus.reader.rte.RTECorpusReader": [[92, 3, 1, "", "pairs"]], "nltk.corpus.reader.rte.RTEPair": [[92, 3, 1, "", "__init__"]], "nltk.corpus.reader.semcor": [[93, 2, 1, "", "SemcorCorpusReader"], [93, 2, 1, "", "SemcorSentence"], [93, 2, 1, "", "SemcorWordView"]], "nltk.corpus.reader.semcor.SemcorCorpusReader": [[93, 3, 1, "", "__init__"], [93, 3, 1, "", "chunk_sents"], [93, 3, 1, "", "chunks"], [93, 3, 1, "", "sents"], [93, 3, 1, "", "tagged_chunks"], [93, 3, 1, "", "tagged_sents"], [93, 3, 1, "", "words"]], "nltk.corpus.reader.semcor.SemcorSentence": [[93, 3, 1, "", "__init__"]], "nltk.corpus.reader.semcor.SemcorWordView": [[93, 3, 1, "", "__init__"], [93, 3, 1, "", "handle_elt"], [93, 3, 1, "", "handle_sent"], [93, 3, 1, "", "handle_word"]], "nltk.corpus.reader.senseval": [[94, 2, 1, "", "SensevalCorpusReader"], [94, 2, 1, "", "SensevalCorpusView"], [94, 2, 1, "", "SensevalInstance"]], "nltk.corpus.reader.senseval.SensevalCorpusReader": [[94, 3, 1, "", "instances"]], "nltk.corpus.reader.senseval.SensevalCorpusView": [[94, 3, 1, "", "__init__"], [94, 3, 1, "", "read_block"]], "nltk.corpus.reader.senseval.SensevalInstance": [[94, 3, 1, "", "__init__"]], "nltk.corpus.reader.sentiwordnet": [[95, 2, 1, "", "SentiSynset"], [95, 2, 1, "", "SentiWordNetCorpusReader"]], "nltk.corpus.reader.sentiwordnet.SentiSynset": [[95, 3, 1, "", "__init__"], [95, 3, 1, "", "neg_score"], [95, 3, 1, "", "obj_score"], [95, 3, 1, "", "pos_score"]], "nltk.corpus.reader.sentiwordnet.SentiWordNetCorpusReader": [[95, 3, 1, "", "__init__"], [95, 3, 1, "", "all_senti_synsets"], [95, 3, 1, "", "senti_synset"], [95, 3, 1, "", "senti_synsets"]], "nltk.corpus.reader.sinica_treebank": [[96, 2, 1, "", "SinicaTreebankCorpusReader"]], "nltk.corpus.reader.string_category": [[97, 2, 1, "", "StringCategoryCorpusReader"]], "nltk.corpus.reader.string_category.StringCategoryCorpusReader": [[97, 3, 1, "", "__init__"], [97, 3, 1, "", "tuples"]], "nltk.corpus.reader.switchboard": [[98, 2, 1, "", "SwitchboardCorpusReader"], [98, 2, 1, "", "SwitchboardTurn"]], "nltk.corpus.reader.switchboard.SwitchboardCorpusReader": [[98, 3, 1, "", "__init__"], [98, 3, 1, "", "discourses"], [98, 3, 1, "", "tagged_discourses"], [98, 3, 1, "", "tagged_turns"], [98, 3, 1, "", "tagged_words"], [98, 3, 1, "", "turns"], [98, 3, 1, "", "words"]], "nltk.corpus.reader.switchboard.SwitchboardTurn": [[98, 3, 1, "", "__init__"]], "nltk.corpus.reader.tagged": [[99, 2, 1, "", "CategorizedTaggedCorpusReader"], [99, 2, 1, "", "MacMorphoCorpusReader"], [99, 2, 1, "", "TaggedCorpusReader"], [99, 2, 1, "", "TaggedCorpusView"], [99, 2, 1, "", "TimitTaggedCorpusReader"]], "nltk.corpus.reader.tagged.CategorizedTaggedCorpusReader": [[99, 3, 1, "", "__init__"], [99, 3, 1, "", "tagged_paras"], [99, 3, 1, "", "tagged_sents"], [99, 3, 1, "", "tagged_words"]], "nltk.corpus.reader.tagged.MacMorphoCorpusReader": [[99, 3, 1, "", "__init__"]], "nltk.corpus.reader.tagged.TaggedCorpusReader": [[99, 3, 1, "", "__init__"], [99, 3, 1, "", "paras"], [99, 3, 1, "", "sents"], [99, 3, 1, "", "tagged_paras"], [99, 3, 1, "", "tagged_sents"], [99, 3, 1, "", "tagged_words"], [99, 3, 1, "", "words"]], "nltk.corpus.reader.tagged.TaggedCorpusView": [[99, 3, 1, "", "__init__"], [99, 3, 1, "", "read_block"]], "nltk.corpus.reader.tagged.TimitTaggedCorpusReader": [[99, 3, 1, "", "__init__"], [99, 3, 1, "", "paras"], [99, 3, 1, "", "tagged_paras"]], "nltk.corpus.reader.timit": [[100, 2, 1, "", "SpeakerInfo"], [100, 2, 1, "", "TimitCorpusReader"], [100, 1, 1, "", "read_timit_block"]], "nltk.corpus.reader.timit.SpeakerInfo": [[100, 3, 1, "", "__init__"]], "nltk.corpus.reader.timit.TimitCorpusReader": [[100, 3, 1, "", "__init__"], [100, 3, 1, "", "audiodata"], [100, 3, 1, "", "fileids"], [100, 3, 1, "", "phone_times"], [100, 3, 1, "", "phone_trees"], [100, 3, 1, "", "phones"], [100, 3, 1, "", "play"], [100, 3, 1, "", "sent_times"], [100, 3, 1, "", "sentid"], [100, 3, 1, "", "sents"], [100, 3, 1, "", "spkrid"], [100, 3, 1, "", "spkrinfo"], [100, 3, 1, "", "spkrutteranceids"], [100, 3, 1, "", "transcription_dict"], [100, 3, 1, "", "utterance"], [100, 3, 1, "", "utteranceids"], [100, 3, 1, "", "wav"], [100, 3, 1, "", "word_times"], [100, 3, 1, "", "words"]], "nltk.corpus.reader.toolbox": [[101, 2, 1, "", "ToolboxCorpusReader"], [101, 1, 1, "", "demo"]], "nltk.corpus.reader.toolbox.ToolboxCorpusReader": [[101, 3, 1, "", "entries"], [101, 3, 1, "", "fields"], [101, 3, 1, "", "words"], [101, 3, 1, "", "xml"]], "nltk.corpus.reader.twitter": [[102, 2, 1, "", "TwitterCorpusReader"]], "nltk.corpus.reader.twitter.TwitterCorpusReader": [[102, 4, 1, "", "CorpusView"], [102, 3, 1, "", "__init__"], [102, 3, 1, "", "docs"], [102, 3, 1, "", "strings"], [102, 3, 1, "", "tokenized"]], "nltk.corpus.reader.udhr": [[103, 2, 1, "", "UdhrCorpusReader"]], "nltk.corpus.reader.udhr.UdhrCorpusReader": [[103, 4, 1, "", "ENCODINGS"], [103, 4, 1, "", "SKIP"], [103, 3, 1, "", "__init__"]], "nltk.corpus.reader.util": [[104, 2, 1, "", "ConcatenatedCorpusView"], [104, 2, 1, "", "StreamBackedCorpusView"], [104, 1, 1, "", "concat"], [104, 1, 1, "", "find_corpus_fileids"], [104, 1, 1, "", "read_alignedsent_block"], [104, 1, 1, "", "read_blankline_block"], [104, 1, 1, "", "read_line_block"], [104, 1, 1, "", "read_regexp_block"], [104, 1, 1, "", "read_sexpr_block"], [104, 1, 1, "", "read_whitespace_block"], [104, 1, 1, "", "read_wordpunct_block"], [104, 1, 1, "", "tagged_treebank_para_block_reader"]], "nltk.corpus.reader.util.ConcatenatedCorpusView": [[104, 3, 1, "", "__init__"], [104, 3, 1, "", "close"], [104, 3, 1, "", "iterate_from"]], "nltk.corpus.reader.util.StreamBackedCorpusView": [[104, 3, 1, "", "__init__"], [104, 3, 1, "", "close"], [104, 5, 1, "", "fileid"], [104, 3, 1, "", "iterate_from"], [104, 3, 1, "", "read_block"]], "nltk.corpus.reader.verbnet": [[105, 2, 1, "", "VerbnetCorpusReader"]], "nltk.corpus.reader.verbnet.VerbnetCorpusReader": [[105, 3, 1, "", "__init__"], [105, 3, 1, "", "classids"], [105, 3, 1, "", "fileids"], [105, 3, 1, "", "frames"], [105, 3, 1, "", "lemmas"], [105, 3, 1, "", "longid"], [105, 3, 1, "", "pprint"], [105, 3, 1, "", "pprint_frames"], [105, 3, 1, "", "pprint_members"], [105, 3, 1, "", "pprint_subclasses"], [105, 3, 1, "", "pprint_themroles"], [105, 3, 1, "", "shortid"], [105, 3, 1, "", "subclasses"], [105, 3, 1, "", "themroles"], [105, 3, 1, "", "vnclass"], [105, 3, 1, "", "wordnetids"]], "nltk.corpus.reader.wordlist": [[106, 2, 1, "", "MWAPPDBCorpusReader"], [106, 2, 1, "", "NonbreakingPrefixesCorpusReader"], [106, 2, 1, "", "SwadeshCorpusReader"], [106, 2, 1, "", "UnicharsCorpusReader"], [106, 2, 1, "", "WordListCorpusReader"]], "nltk.corpus.reader.wordlist.MWAPPDBCorpusReader": [[106, 3, 1, "", "entries"], [106, 4, 1, "", "mwa_ppdb_xxxl_file"]], "nltk.corpus.reader.wordlist.NonbreakingPrefixesCorpusReader": [[106, 4, 1, "", "available_langs"], [106, 3, 1, "", "words"]], "nltk.corpus.reader.wordlist.SwadeshCorpusReader": [[106, 3, 1, "", "entries"]], "nltk.corpus.reader.wordlist.UnicharsCorpusReader": [[106, 4, 1, "", "available_categories"], [106, 3, 1, "", "chars"]], "nltk.corpus.reader.wordlist.WordListCorpusReader": [[106, 3, 1, "", "words"]], "nltk.corpus.reader.wordnet": [[107, 2, 1, "", "Lemma"], [107, 2, 1, "", "Synset"], [107, 2, 1, "", "WordNetCorpusReader"], [107, 6, 1, "", "WordNetError"], [107, 2, 1, "", "WordNetICCorpusReader"], [107, 1, 1, "", "information_content"], [107, 1, 1, "", "jcn_similarity"], [107, 1, 1, "", "lch_similarity"], [107, 1, 1, "", "lin_similarity"], [107, 1, 1, "", "path_similarity"], [107, 1, 1, "", "res_similarity"], [107, 1, 1, "", "wup_similarity"]], "nltk.corpus.reader.wordnet.Lemma": [[107, 3, 1, "", "__init__"], [107, 3, 1, "", "antonyms"], [107, 3, 1, "", "count"], [107, 3, 1, "", "derivationally_related_forms"], [107, 3, 1, "", "frame_ids"], [107, 3, 1, "", "frame_strings"], [107, 3, 1, "", "key"], [107, 3, 1, "", "lang"], [107, 3, 1, "", "name"], [107, 3, 1, "", "pertainyms"], [107, 3, 1, "", "synset"], [107, 3, 1, "", "syntactic_marker"]], "nltk.corpus.reader.wordnet.Synset": [[107, 3, 1, "", "__init__"], [107, 3, 1, "", "acyclic_tree"], [107, 3, 1, "", "closure"], [107, 3, 1, "", "common_hypernyms"], [107, 3, 1, "", "definition"], [107, 3, 1, "", "examples"], [107, 3, 1, "", "frame_ids"], [107, 3, 1, "", "hypernym_distances"], [107, 3, 1, "", "hypernym_paths"], [107, 3, 1, "", "jcn_similarity"], [107, 3, 1, "", "lch_similarity"], [107, 3, 1, "", "lemma_names"], [107, 3, 1, "", "lemmas"], [107, 3, 1, "", "lexname"], [107, 3, 1, "", "lin_similarity"], [107, 3, 1, "", "lowest_common_hypernyms"], [107, 3, 1, "", "max_depth"], [107, 3, 1, "", "min_depth"], [107, 3, 1, "", "mst"], [107, 3, 1, "", "name"], [107, 3, 1, "", "offset"], [107, 3, 1, "", "path_similarity"], [107, 3, 1, "", "pos"], [107, 3, 1, "", "res_similarity"], [107, 3, 1, "", "root_hypernyms"], [107, 3, 1, "", "shortest_path_distance"], [107, 3, 1, "", "tree"], [107, 3, 1, "", "wup_similarity"]], "nltk.corpus.reader.wordnet.WordNetCorpusReader": [[107, 4, 1, "", "ADJ"], [107, 4, 1, "", "ADJ_SAT"], [107, 4, 1, "", "ADV"], [107, 4, 1, "", "MORPHOLOGICAL_SUBSTITUTIONS"], [107, 4, 1, "", "NOUN"], [107, 4, 1, "", "VERB"], [107, 3, 1, "", "__init__"], [107, 3, 1, "", "add_exomw"], [107, 3, 1, "", "add_omw"], [107, 3, 1, "", "add_provs"], [107, 3, 1, "", "all_eng_synsets"], [107, 3, 1, "", "all_lemma_names"], [107, 3, 1, "", "all_omw_synsets"], [107, 3, 1, "", "all_synsets"], [107, 3, 1, "", "citation"], [107, 3, 1, "", "custom_lemmas"], [107, 3, 1, "", "digraph"], [107, 3, 1, "", "disable_custom_lemmas"], [107, 3, 1, "", "doc"], [107, 3, 1, "", "get_version"], [107, 3, 1, "", "ic"], [107, 3, 1, "", "index_sense"], [107, 3, 1, "", "jcn_similarity"], [107, 3, 1, "", "langs"], [107, 3, 1, "", "lch_similarity"], [107, 3, 1, "", "lemma"], [107, 3, 1, "", "lemma_count"], [107, 3, 1, "", "lemma_from_key"], [107, 3, 1, "", "lemmas"], [107, 3, 1, "", "license"], [107, 3, 1, "", "lin_similarity"], [107, 3, 1, "", "map_to_many"], [107, 3, 1, "", "map_to_one"], [107, 3, 1, "", "map_wn"], [107, 3, 1, "", "merged_synsets"], [107, 3, 1, "", "morphy"], [107, 3, 1, "", "of2ss"], [107, 3, 1, "", "path_similarity"], [107, 3, 1, "", "readme"], [107, 3, 1, "", "res_similarity"], [107, 3, 1, "", "split_synsets"], [107, 3, 1, "", "ss2of"], [107, 3, 1, "", "synonyms"], [107, 3, 1, "", "synset"], [107, 3, 1, "", "synset_from_pos_and_offset"], [107, 3, 1, "", "synset_from_sense_key"], [107, 3, 1, "", "synsets"], [107, 3, 1, "", "words"], [107, 3, 1, "", "wup_similarity"]], "nltk.corpus.reader.wordnet.WordNetICCorpusReader": [[107, 3, 1, "", "__init__"], [107, 3, 1, "", "ic"]], "nltk.corpus.reader.xmldocs": [[108, 2, 1, "", "XMLCorpusReader"], [108, 2, 1, "", "XMLCorpusView"]], "nltk.corpus.reader.xmldocs.XMLCorpusReader": [[108, 3, 1, "", "__init__"], [108, 3, 1, "", "words"], [108, 3, 1, "", "xml"]], "nltk.corpus.reader.xmldocs.XMLCorpusView": [[108, 3, 1, "", "__init__"], [108, 3, 1, "", "handle_elt"], [108, 3, 1, "", "read_block"]], "nltk.corpus.reader.ycoe": [[109, 2, 1, "", "YCOECorpusReader"], [109, 2, 1, "", "YCOEParseCorpusReader"], [109, 2, 1, "", "YCOETaggedCorpusReader"], [109, 7, 1, "", "documents"]], "nltk.corpus.reader.ycoe.YCOECorpusReader": [[109, 3, 1, "", "__init__"], [109, 3, 1, "", "documents"], [109, 3, 1, "", "fileids"], [109, 3, 1, "", "paras"], [109, 3, 1, "", "parsed_sents"], [109, 3, 1, "", "sents"], [109, 3, 1, "", "tagged_paras"], [109, 3, 1, "", "tagged_sents"], [109, 3, 1, "", "tagged_words"], [109, 3, 1, "", "words"]], "nltk.corpus.reader.ycoe.YCOETaggedCorpusReader": [[109, 3, 1, "", "__init__"]], "nltk.corpus.util": [[110, 2, 1, "", "LazyCorpusLoader"]], "nltk.corpus.util.LazyCorpusLoader": [[110, 3, 1, "", "__init__"]], "nltk.data": [[111, 7, 1, "", "AUTO_FORMATS"], [111, 1, 1, "", "BufferedGzipFile"], [111, 7, 1, "", "FORMATS"], [111, 2, 1, "", "FileSystemPathPointer"], [111, 2, 1, "", "GzipFileSystemPathPointer"], [111, 2, 1, "", "LazyLoader"], [111, 2, 1, "", "OpenOnDemandZipFile"], [111, 2, 1, "", "PathPointer"], [111, 2, 1, "", "SeekableUnicodeStreamReader"], [111, 1, 1, "", "clear_cache"], [111, 1, 1, "", "find"], [111, 1, 1, "", "load"], [111, 7, 1, "", "path"], [111, 1, 1, "", "retrieve"], [111, 1, 1, "", "show_cfg"]], "nltk.data.FileSystemPathPointer": [[111, 3, 1, "", "__init__"], [111, 3, 1, "", "file_size"], [111, 3, 1, "", "join"], [111, 3, 1, "", "open"], [111, 5, 1, "", "path"]], "nltk.data.GzipFileSystemPathPointer": [[111, 3, 1, "", "open"]], "nltk.data.LazyLoader": [[111, 3, 1, "", "__init__"]], "nltk.data.OpenOnDemandZipFile": [[111, 3, 1, "", "__init__"], [111, 3, 1, "", "read"], [111, 3, 1, "", "write"], [111, 3, 1, "", "writestr"]], "nltk.data.PathPointer": [[111, 3, 1, "", "file_size"], [111, 3, 1, "", "join"], [111, 3, 1, "", "open"]], "nltk.data.SeekableUnicodeStreamReader": [[111, 4, 1, "", "DEBUG"], [111, 3, 1, "", "__init__"], [111, 4, 1, "", "bytebuffer"], [111, 3, 1, "", "char_seek_forward"], [111, 3, 1, "", "close"], [111, 5, 1, "", "closed"], [111, 4, 1, "", "decode"], [111, 3, 1, "", "discard_line"], [111, 4, 1, "", "encoding"], [111, 4, 1, "", "errors"], [111, 4, 1, "", "linebuffer"], [111, 5, 1, "", "mode"], [111, 5, 1, "", "name"], [111, 3, 1, "", "next"], [111, 3, 1, "", "read"], [111, 3, 1, "", "readline"], [111, 3, 1, "", "readlines"], [111, 3, 1, "", "seek"], [111, 4, 1, "", "stream"], [111, 3, 1, "", "tell"], [111, 3, 1, "", "xreadlines"]], "nltk.decorators": [[112, 1, 1, "", "decorator"], [112, 1, 1, "", "getinfo"], [112, 1, 1, "", "new_wrapper"]], "nltk.downloader": [[113, 2, 1, "", "Collection"], [113, 2, 1, "", "Downloader"], [113, 2, 1, "", "DownloaderGUI"], [113, 2, 1, "", "DownloaderMessage"], [113, 2, 1, "", "DownloaderShell"], [113, 2, 1, "", "ErrorMessage"], [113, 2, 1, "", "FinishCollectionMessage"], [113, 2, 1, "", "FinishDownloadMessage"], [113, 2, 1, "", "FinishPackageMessage"], [113, 2, 1, "", "FinishUnzipMessage"], [113, 2, 1, "", "Package"], [113, 2, 1, "", "ProgressMessage"], [113, 2, 1, "", "SelectDownloadDirMessage"], [113, 2, 1, "", "StaleMessage"], [113, 2, 1, "", "StartCollectionMessage"], [113, 2, 1, "", "StartDownloadMessage"], [113, 2, 1, "", "StartPackageMessage"], [113, 2, 1, "", "StartUnzipMessage"], [113, 2, 1, "", "UpToDateMessage"], [113, 1, 1, "", "build_index"], [113, 1, 1, "", "download"], [113, 1, 1, "", "download_gui"], [113, 1, 1, "", "download_shell"], [113, 1, 1, "", "md5_hexdigest"], [113, 1, 1, "", "unzip"], [113, 1, 1, "", "update"]], "nltk.downloader.Collection": [[113, 3, 1, "", "__init__"], [113, 4, 1, "", "children"], [113, 3, 1, "", "fromxml"], [113, 4, 1, "", "id"], [113, 4, 1, "", "name"], [113, 4, 1, "", "packages"]], "nltk.downloader.Downloader": [[113, 4, 1, "", "DEFAULT_URL"], [113, 4, 1, "", "INDEX_TIMEOUT"], [113, 4, 1, "", "INSTALLED"], [113, 4, 1, "", "NOT_INSTALLED"], [113, 4, 1, "", "PARTIAL"], [113, 4, 1, "", "STALE"], [113, 3, 1, "", "__init__"], [113, 3, 1, "", "clear_status_cache"], [113, 3, 1, "", "collections"], [113, 3, 1, "", "corpora"], [113, 3, 1, "", "default_download_dir"], [113, 3, 1, "", "download"], [113, 5, 1, "", "download_dir"], [113, 3, 1, "", "incr_download"], [113, 3, 1, "", "index"], [113, 3, 1, "", "info"], [113, 3, 1, "", "is_installed"], [113, 3, 1, "", "is_stale"], [113, 3, 1, "", "list"], [113, 3, 1, "", "models"], [113, 3, 1, "", "packages"], [113, 3, 1, "", "status"], [113, 3, 1, "", "update"], [113, 5, 1, "", "url"], [113, 3, 1, "", "xmlinfo"]], "nltk.downloader.DownloaderGUI": [[113, 4, 1, "", "COLUMNS"], [113, 4, 1, "", "COLUMN_WEIGHTS"], [113, 4, 1, "", "COLUMN_WIDTHS"], [113, 4, 1, "", "DEFAULT_COLUMN_WIDTH"], [113, 4, 1, "", "HELP"], [113, 4, 1, "", "INITIAL_COLUMNS"], [113, 3, 1, "", "__init__"], [113, 3, 1, "", "about"], [113, 4, 1, "", "c"], [113, 3, 1, "", "destroy"], [113, 3, 1, "", "help"], [113, 3, 1, "", "mainloop"]], "nltk.downloader.DownloaderShell": [[113, 3, 1, "", "__init__"], [113, 3, 1, "", "run"]], "nltk.downloader.ErrorMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.FinishCollectionMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.FinishDownloadMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.FinishPackageMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.FinishUnzipMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.Package": [[113, 3, 1, "", "__init__"], [113, 4, 1, "", "author"], [113, 4, 1, "", "checksum"], [113, 4, 1, "", "contact"], [113, 4, 1, "", "copyright"], [113, 4, 1, "", "filename"], [113, 3, 1, "", "fromxml"], [113, 4, 1, "", "id"], [113, 4, 1, "", "license"], [113, 4, 1, "", "name"], [113, 4, 1, "", "size"], [113, 4, 1, "", "subdir"], [113, 4, 1, "", "svn_revision"], [113, 4, 1, "", "unzip"], [113, 4, 1, "", "unzipped_size"], [113, 4, 1, "", "url"]], "nltk.downloader.ProgressMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.SelectDownloadDirMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.StaleMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.StartCollectionMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.StartDownloadMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.StartPackageMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.StartUnzipMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.UpToDateMessage": [[113, 3, 1, "", "__init__"]], "nltk.draw": [[115, 0, 0, "-", "cfg"], [116, 0, 0, "-", "dispersion"], [117, 0, 0, "-", "table"], [118, 0, 0, "-", "tree"], [119, 0, 0, "-", "util"]], "nltk.draw.cfg": [[115, 2, 1, "", "CFGDemo"], [115, 2, 1, "", "CFGEditor"], [115, 2, 1, "", "ProductionList"], [115, 1, 1, "", "demo"], [115, 1, 1, "", "demo2"], [115, 1, 1, "", "demo3"]], "nltk.draw.cfg.CFGDemo": [[115, 3, 1, "", "__init__"], [115, 3, 1, "", "destroy"], [115, 3, 1, "", "mainloop"], [115, 3, 1, "", "reset_workspace"], [115, 3, 1, "", "workspace_markprod"]], "nltk.draw.cfg.CFGEditor": [[115, 4, 1, "", "ARROW"], [115, 3, 1, "", "__init__"]], "nltk.draw.cfg.ProductionList": [[115, 4, 1, "", "ARROW"]], "nltk.draw.dispersion": [[116, 1, 1, "", "dispersion_plot"]], "nltk.draw.table": [[117, 2, 1, "", "MultiListbox"], [117, 2, 1, "", "Table"], [117, 1, 1, "", "demo"]], "nltk.draw.table.MultiListbox": [[117, 4, 1, "", "FRAME_CONFIG"], [117, 4, 1, "", "LABEL_CONFIG"], [117, 4, 1, "", "LISTBOX_CONFIG"], [117, 3, 1, "", "__init__"], [117, 3, 1, "", "activate"], [117, 3, 1, "", "bbox"], [117, 3, 1, "", "bind_to_columns"], [117, 3, 1, "", "bind_to_labels"], [117, 3, 1, "", "bind_to_listboxes"], [117, 5, 1, "", "column_labels"], [117, 5, 1, "", "column_names"], [117, 3, 1, "", "columnconfig"], [117, 3, 1, "", "columnconfigure"], [117, 3, 1, "", "configure"], [117, 3, 1, "", "curselection"], [117, 3, 1, "", "delete"], [117, 3, 1, "", "get"], [117, 3, 1, "", "hide_column"], [117, 3, 1, "", "index"], [117, 3, 1, "", "insert"], [117, 3, 1, "", "itemcget"], [117, 3, 1, "", "itemconfig"], [117, 3, 1, "", "itemconfigure"], [117, 5, 1, "", "listboxes"], [117, 3, 1, "", "nearest"], [117, 3, 1, "", "rowconfig"], [117, 3, 1, "", "rowconfigure"], [117, 3, 1, "", "scan_dragto"], [117, 3, 1, "", "scan_mark"], [117, 3, 1, "", "see"], [117, 3, 1, "", "select"], [117, 3, 1, "", "select_anchor"], [117, 3, 1, "", "select_clear"], [117, 3, 1, "", "select_includes"], [117, 3, 1, "", "select_set"], [117, 3, 1, "", "selection_anchor"], [117, 3, 1, "", "selection_clear"], [117, 3, 1, "", "selection_includes"], [117, 3, 1, "", "selection_set"], [117, 3, 1, "", "show_column"], [117, 3, 1, "", "size"], [117, 3, 1, "", "yview"], [117, 3, 1, "", "yview_moveto"], [117, 3, 1, "", "yview_scroll"]], "nltk.draw.table.Table": [[117, 3, 1, "", "__init__"], [117, 3, 1, "", "append"], [117, 3, 1, "", "bind"], [117, 3, 1, "", "bind_to_columns"], [117, 3, 1, "", "bind_to_labels"], [117, 3, 1, "", "bind_to_listboxes"], [117, 3, 1, "", "clear"], [117, 3, 1, "", "column_index"], [117, 5, 1, "", "column_names"], [117, 3, 1, "", "columnconfig"], [117, 3, 1, "", "columnconfigure"], [117, 3, 1, "", "extend"], [117, 3, 1, "", "focus"], [117, 3, 1, "", "grid"], [117, 3, 1, "", "hide_column"], [117, 3, 1, "", "insert"], [117, 3, 1, "", "itemconfig"], [117, 3, 1, "", "itemconfigure"], [117, 3, 1, "", "pack"], [117, 3, 1, "", "rowconfig"], [117, 3, 1, "", "rowconfigure"], [117, 3, 1, "", "select"], [117, 3, 1, "", "selected_row"], [117, 3, 1, "", "show_column"], [117, 3, 1, "", "sort_by"]], "nltk.draw.tree": [[118, 2, 1, "", "TreeSegmentWidget"], [118, 2, 1, "", "TreeView"], [118, 2, 1, "", "TreeWidget"], [118, 1, 1, "", "demo"], [118, 1, 1, "", "draw_trees"], [118, 1, 1, "", "tree_to_treesegment"]], "nltk.draw.tree.TreeSegmentWidget": [[118, 3, 1, "", "__init__"], [118, 3, 1, "", "insert_child"], [118, 3, 1, "", "label"], [118, 3, 1, "", "remove_child"], [118, 3, 1, "", "replace_child"], [118, 3, 1, "", "set_label"], [118, 3, 1, "", "subtrees"]], "nltk.draw.tree.TreeView": [[118, 3, 1, "", "__init__"], [118, 3, 1, "", "destroy"], [118, 3, 1, "", "mainloop"], [118, 3, 1, "", "resize"]], "nltk.draw.tree.TreeWidget": [[118, 3, 1, "", "__init__"], [118, 3, 1, "", "bind_click_leaves"], [118, 3, 1, "", "bind_click_nodes"], [118, 3, 1, "", "bind_click_trees"], [118, 3, 1, "", "bind_drag_leaves"], [118, 3, 1, "", "bind_drag_nodes"], [118, 3, 1, "", "bind_drag_trees"], [118, 3, 1, "", "collapsed_tree"], [118, 3, 1, "", "expanded_tree"], [118, 3, 1, "", "toggle_collapsed"]], "nltk.draw.util": [[119, 2, 1, "", "AbstractContainerWidget"], [119, 2, 1, "", "BoxWidget"], [119, 2, 1, "", "BracketWidget"], [119, 2, 1, "", "CanvasFrame"], [119, 2, 1, "", "CanvasWidget"], [119, 2, 1, "", "ColorizedList"], [119, 2, 1, "", "EntryDialog"], [119, 2, 1, "", "MutableOptionMenu"], [119, 2, 1, "", "OvalWidget"], [119, 2, 1, "", "ParenWidget"], [119, 2, 1, "", "ScrollWatcherWidget"], [119, 2, 1, "", "SequenceWidget"], [119, 2, 1, "", "ShowText"], [119, 2, 1, "", "SpaceWidget"], [119, 2, 1, "", "StackWidget"], [119, 2, 1, "", "SymbolWidget"], [119, 2, 1, "", "TextWidget"], [119, 1, 1, "", "demo"]], "nltk.draw.util.AbstractContainerWidget": [[119, 3, 1, "", "__init__"], [119, 3, 1, "", "child"], [119, 3, 1, "", "set_child"]], "nltk.draw.util.BoxWidget": [[119, 3, 1, "", "__init__"]], "nltk.draw.util.BracketWidget": [[119, 3, 1, "", "__init__"]], "nltk.draw.util.CanvasFrame": [[119, 3, 1, "", "__init__"], [119, 3, 1, "", "add_widget"], [119, 3, 1, "", "canvas"], [119, 3, 1, "", "destroy"], [119, 3, 1, "", "destroy_widget"], [119, 3, 1, "", "mainloop"], [119, 3, 1, "", "pack"], [119, 3, 1, "", "print_to_file"], [119, 3, 1, "", "remove_widget"], [119, 3, 1, "", "scrollregion"]], "nltk.draw.util.CanvasWidget": [[119, 3, 1, "", "__init__"], [119, 3, 1, "", "bbox"], [119, 3, 1, "", "bind_click"], [119, 3, 1, "", "bind_drag"], [119, 3, 1, "", "canvas"], [119, 3, 1, "", "child_widgets"], [119, 3, 1, "", "destroy"], [119, 3, 1, "", "height"], [119, 3, 1, "", "hidden"], [119, 3, 1, "", "hide"], [119, 3, 1, "", "manage"], [119, 3, 1, "", "move"], [119, 3, 1, "", "moveto"], [119, 3, 1, "", "parent"], [119, 3, 1, "", "show"], [119, 3, 1, "", "tags"], [119, 3, 1, "", "unbind_click"], [119, 3, 1, "", "unbind_drag"], [119, 3, 1, "", "update"], [119, 3, 1, "", "width"]], "nltk.draw.util.ColorizedList": [[119, 3, 1, "", "__init__"], [119, 3, 1, "", "add_callback"], [119, 3, 1, "", "focus"], [119, 3, 1, "", "get"], [119, 3, 1, "", "grid"], [119, 3, 1, "", "mark"], [119, 3, 1, "", "markonly"], [119, 3, 1, "", "pack"], [119, 3, 1, "", "remove_callback"], [119, 3, 1, "", "set"], [119, 3, 1, "", "unmark"], [119, 3, 1, "", "view"]], "nltk.draw.util.EntryDialog": [[119, 3, 1, "", "__init__"]], "nltk.draw.util.MutableOptionMenu": [[119, 3, 1, "", "__init__"], [119, 3, 1, "", "add"], [119, 3, 1, "", "destroy"], [119, 3, 1, "", "remove"], [119, 3, 1, "", "set"]], "nltk.draw.util.OvalWidget": [[119, 4, 1, "", "RATIO"], [119, 3, 1, "", "__init__"]], "nltk.draw.util.ParenWidget": [[119, 3, 1, "", "__init__"]], "nltk.draw.util.ScrollWatcherWidget": [[119, 3, 1, "", "__init__"], [119, 3, 1, "", "add_child"], [119, 3, 1, "", "remove_child"]], "nltk.draw.util.SequenceWidget": [[119, 3, 1, "", "__init__"], [119, 3, 1, "", "children"], [119, 3, 1, "", "insert_child"], [119, 3, 1, "", "remove_child"], [119, 3, 1, "", "replace_child"]], "nltk.draw.util.ShowText": [[119, 3, 1, "", "__init__"], [119, 3, 1, "", "destroy"], [119, 3, 1, "", "find_dimentions"], [119, 3, 1, "", "mainloop"]], "nltk.draw.util.SpaceWidget": [[119, 3, 1, "", "__init__"], [119, 3, 1, "", "set_height"], [119, 3, 1, "", "set_width"]], "nltk.draw.util.StackWidget": [[119, 3, 1, "", "__init__"], [119, 3, 1, "", "children"], [119, 3, 1, "", "insert_child"], [119, 3, 1, "", "remove_child"], [119, 3, 1, "", "replace_child"]], "nltk.draw.util.SymbolWidget": [[119, 4, 1, "", "SYMBOLS"], [119, 3, 1, "", "__init__"], [119, 3, 1, "", "set_symbol"], [119, 3, 1, "", "symbol"], [119, 3, 1, "", "symbolsheet"]], "nltk.draw.util.TextWidget": [[119, 3, 1, "", "__init__"], [119, 3, 1, "", "set_text"], [119, 3, 1, "", "text"]], "nltk.featstruct": [[120, 2, 1, "", "FeatDict"], [120, 2, 1, "", "FeatList"], [120, 2, 1, "", "FeatStruct"], [120, 2, 1, "", "FeatStructReader"], [120, 2, 1, "", "Feature"], [120, 2, 1, "", "RangeFeature"], [120, 2, 1, "", "SlashFeature"], [120, 1, 1, "", "conflicts"], [120, 1, 1, "", "subsumes"], [120, 1, 1, "", "unify"]], "nltk.featstruct.FeatDict": [[120, 3, 1, "", "__init__"], [120, 3, 1, "", "clear"], [120, 3, 1, "", "get"], [120, 3, 1, "", "has_key"], [120, 3, 1, "", "pop"], [120, 3, 1, "", "popitem"], [120, 3, 1, "", "setdefault"], [120, 3, 1, "", "update"]], "nltk.featstruct.FeatList": [[120, 3, 1, "", "__init__"], [120, 3, 1, "", "append"], [120, 3, 1, "", "extend"], [120, 3, 1, "", "insert"], [120, 3, 1, "", "pop"], [120, 3, 1, "", "remove"], [120, 3, 1, "", "reverse"], [120, 3, 1, "", "sort"]], "nltk.featstruct.FeatStruct": [[120, 3, 1, "", "__new__"], [120, 3, 1, "", "copy"], [120, 3, 1, "", "cyclic"], [120, 3, 1, "", "equal_values"], [120, 3, 1, "", "freeze"], [120, 3, 1, "", "frozen"], [120, 3, 1, "", "remove_variables"], [120, 3, 1, "", "rename_variables"], [120, 3, 1, "", "retract_bindings"], [120, 3, 1, "", "substitute_bindings"], [120, 3, 1, "", "subsumes"], [120, 3, 1, "", "unify"], [120, 3, 1, "", "variables"], [120, 3, 1, "", "walk"]], "nltk.featstruct.FeatStructReader": [[120, 4, 1, "", "VALUE_HANDLERS"], [120, 3, 1, "", "__init__"], [120, 3, 1, "", "fromstring"], [120, 3, 1, "", "read_app_value"], [120, 3, 1, "", "read_fstruct_value"], [120, 3, 1, "", "read_int_value"], [120, 3, 1, "", "read_logic_value"], [120, 3, 1, "", "read_partial"], [120, 3, 1, "", "read_set_value"], [120, 3, 1, "", "read_str_value"], [120, 3, 1, "", "read_sym_value"], [120, 3, 1, "", "read_tuple_value"], [120, 3, 1, "", "read_value"], [120, 3, 1, "", "read_var_value"]], "nltk.featstruct.Feature": [[120, 3, 1, "", "__init__"], [120, 5, 1, "", "default"], [120, 5, 1, "", "display"], [120, 5, 1, "", "name"], [120, 3, 1, "", "read_value"], [120, 3, 1, "", "unify_base_values"]], "nltk.featstruct.RangeFeature": [[120, 4, 1, "", "RANGE_RE"], [120, 3, 1, "", "read_value"], [120, 3, 1, "", "unify_base_values"]], "nltk.featstruct.SlashFeature": [[120, 3, 1, "", "read_value"]], "nltk.grammar": [[121, 2, 1, "", "CFG"], [121, 2, 1, "", "DependencyGrammar"], [121, 2, 1, "", "DependencyProduction"], [121, 2, 1, "", "Nonterminal"], [121, 2, 1, "", "PCFG"], [121, 2, 1, "", "ProbabilisticDependencyGrammar"], [121, 2, 1, "", "ProbabilisticProduction"], [121, 2, 1, "", "Production"], [121, 1, 1, "", "induce_pcfg"], [121, 1, 1, "", "nonterminals"], [121, 1, 1, "", "read_grammar"]], "nltk.grammar.CFG": [[121, 3, 1, "", "__init__"], [121, 3, 1, "", "binarize"], [121, 3, 1, "", "check_coverage"], [121, 3, 1, "", "chomsky_normal_form"], [121, 3, 1, "", "eliminate_start"], [121, 3, 1, "", "fromstring"], [121, 3, 1, "", "is_binarised"], [121, 3, 1, "", "is_chomsky_normal_form"], [121, 3, 1, "", "is_flexible_chomsky_normal_form"], [121, 3, 1, "", "is_leftcorner"], [121, 3, 1, "", "is_lexical"], [121, 3, 1, "", "is_nonempty"], [121, 3, 1, "", "is_nonlexical"], [121, 3, 1, "", "leftcorner_parents"], [121, 3, 1, "", "leftcorners"], [121, 3, 1, "", "max_len"], [121, 3, 1, "", "min_len"], [121, 3, 1, "", "productions"], [121, 3, 1, "", "remove_unitary_rules"], [121, 3, 1, "", "start"]], "nltk.grammar.DependencyGrammar": [[121, 3, 1, "", "__init__"], [121, 3, 1, "", "contains"], [121, 3, 1, "", "fromstring"]], "nltk.grammar.Nonterminal": [[121, 3, 1, "", "__init__"], [121, 3, 1, "", "symbol"]], "nltk.grammar.PCFG": [[121, 4, 1, "", "EPSILON"], [121, 3, 1, "", "__init__"], [121, 3, 1, "", "fromstring"]], "nltk.grammar.ProbabilisticDependencyGrammar": [[121, 3, 1, "", "__init__"], [121, 3, 1, "", "contains"]], "nltk.grammar.ProbabilisticProduction": [[121, 3, 1, "", "__init__"]], "nltk.grammar.Production": [[121, 3, 1, "", "__init__"], [121, 3, 1, "", "is_lexical"], [121, 3, 1, "", "is_nonlexical"], [121, 3, 1, "", "lhs"], [121, 3, 1, "", "rhs"]], "nltk.help": [[122, 1, 1, "", "brown_tagset"], [122, 1, 1, "", "claws5_tagset"], [122, 1, 1, "", "upenn_tagset"]], "nltk.inference": [[124, 0, 0, "-", "api"], [125, 0, 0, "-", "discourse"], [126, 0, 0, "-", "mace"], [127, 0, 0, "-", "nonmonotonic"], [128, 0, 0, "-", "prover9"], [129, 0, 0, "-", "resolution"], [130, 0, 0, "-", "tableau"]], "nltk.inference.api": [[124, 2, 1, "", "BaseModelBuilderCommand"], [124, 2, 1, "", "BaseProverCommand"], [124, 2, 1, "", "BaseTheoremToolCommand"], [124, 2, 1, "", "ModelBuilder"], [124, 2, 1, "", "ModelBuilderCommand"], [124, 2, 1, "", "ModelBuilderCommandDecorator"], [124, 2, 1, "", "ParallelProverBuilder"], [124, 2, 1, "", "ParallelProverBuilderCommand"], [124, 2, 1, "", "Prover"], [124, 2, 1, "", "ProverCommand"], [124, 2, 1, "", "ProverCommandDecorator"], [124, 2, 1, "", "TheoremToolCommand"], [124, 2, 1, "", "TheoremToolCommandDecorator"], [124, 2, 1, "", "TheoremToolThread"]], "nltk.inference.api.BaseModelBuilderCommand": [[124, 3, 1, "", "__init__"], [124, 3, 1, "", "build_model"], [124, 3, 1, "", "get_model_builder"], [124, 3, 1, "", "model"]], "nltk.inference.api.BaseProverCommand": [[124, 3, 1, "", "__init__"], [124, 3, 1, "", "decorate_proof"], [124, 3, 1, "", "get_prover"], [124, 3, 1, "", "proof"], [124, 3, 1, "", "prove"]], "nltk.inference.api.BaseTheoremToolCommand": [[124, 3, 1, "", "__init__"], [124, 3, 1, "", "add_assumptions"], [124, 3, 1, "", "assumptions"], [124, 3, 1, "", "goal"], [124, 3, 1, "", "print_assumptions"], [124, 3, 1, "", "retract_assumptions"]], "nltk.inference.api.ModelBuilder": [[124, 3, 1, "", "build_model"]], "nltk.inference.api.ModelBuilderCommand": [[124, 3, 1, "", "build_model"], [124, 3, 1, "", "get_model_builder"], [124, 3, 1, "", "model"]], "nltk.inference.api.ModelBuilderCommandDecorator": [[124, 3, 1, "", "__init__"], [124, 3, 1, "", "build_model"], [124, 3, 1, "", "get_model_builder"], [124, 3, 1, "", "model"]], "nltk.inference.api.ParallelProverBuilder": [[124, 3, 1, "", "__init__"]], "nltk.inference.api.ParallelProverBuilderCommand": [[124, 3, 1, "", "__init__"], [124, 3, 1, "", "build_model"], [124, 3, 1, "", "prove"]], "nltk.inference.api.Prover": [[124, 3, 1, "", "prove"]], "nltk.inference.api.ProverCommand": [[124, 3, 1, "", "get_prover"], [124, 3, 1, "", "proof"], [124, 3, 1, "", "prove"]], "nltk.inference.api.ProverCommandDecorator": [[124, 3, 1, "", "__init__"], [124, 3, 1, "", "decorate_proof"], [124, 3, 1, "", "get_prover"], [124, 3, 1, "", "proof"], [124, 3, 1, "", "prove"]], "nltk.inference.api.TheoremToolCommand": [[124, 3, 1, "", "add_assumptions"], [124, 3, 1, "", "assumptions"], [124, 3, 1, "", "goal"], [124, 3, 1, "", "print_assumptions"], [124, 3, 1, "", "retract_assumptions"]], "nltk.inference.api.TheoremToolCommandDecorator": [[124, 3, 1, "", "__init__"], [124, 3, 1, "", "add_assumptions"], [124, 3, 1, "", "assumptions"], [124, 3, 1, "", "goal"], [124, 3, 1, "", "print_assumptions"], [124, 3, 1, "", "retract_assumptions"]], "nltk.inference.api.TheoremToolThread": [[124, 3, 1, "", "__init__"], [124, 5, 1, "", "result"], [124, 3, 1, "", "run"]], "nltk.inference.discourse": [[125, 2, 1, "", "CfgReadingCommand"], [125, 2, 1, "", "DiscourseTester"], [125, 2, 1, "", "DrtGlueReadingCommand"], [125, 2, 1, "", "ReadingCommand"], [125, 1, 1, "", "demo"], [125, 1, 1, "", "discourse_demo"], [125, 1, 1, "", "drt_discourse_demo"], [125, 1, 1, "", "load_fol"], [125, 1, 1, "", "spacer"]], "nltk.inference.discourse.CfgReadingCommand": [[125, 3, 1, "", "__init__"], [125, 3, 1, "", "combine_readings"], [125, 3, 1, "", "parse_to_readings"], [125, 3, 1, "", "to_fol"]], "nltk.inference.discourse.DiscourseTester": [[125, 3, 1, "", "__init__"], [125, 3, 1, "", "add_background"], [125, 3, 1, "", "add_sentence"], [125, 3, 1, "", "background"], [125, 3, 1, "", "expand_threads"], [125, 3, 1, "", "grammar"], [125, 3, 1, "", "models"], [125, 3, 1, "", "multiply"], [125, 3, 1, "", "readings"], [125, 3, 1, "", "retract_sentence"], [125, 3, 1, "", "sentences"]], "nltk.inference.discourse.DrtGlueReadingCommand": [[125, 3, 1, "", "__init__"], [125, 3, 1, "", "combine_readings"], [125, 3, 1, "", "parse_to_readings"], [125, 3, 1, "", "process_thread"], [125, 3, 1, "", "to_fol"]], "nltk.inference.discourse.ReadingCommand": [[125, 3, 1, "", "combine_readings"], [125, 3, 1, "", "parse_to_readings"], [125, 3, 1, "", "process_thread"], [125, 3, 1, "", "to_fol"]], "nltk.inference.mace": [[126, 2, 1, "", "Mace"], [126, 2, 1, "", "MaceCommand"], [126, 1, 1, "", "decode_result"], [126, 1, 1, "", "demo"], [126, 1, 1, "", "spacer"], [126, 1, 1, "", "test_build_model"], [126, 1, 1, "", "test_make_relation_set"], [126, 1, 1, "", "test_model_found"], [126, 1, 1, "", "test_transform_output"]], "nltk.inference.mace.Mace": [[126, 3, 1, "", "__init__"]], "nltk.inference.mace.MaceCommand": [[126, 3, 1, "", "__init__"], [126, 5, 1, "", "valuation"]], "nltk.inference.nonmonotonic": [[127, 2, 1, "", "ClosedDomainProver"], [127, 2, 1, "", "ClosedWorldProver"], [127, 2, 1, "", "PredHolder"], [127, 6, 1, "", "ProverParseError"], [127, 2, 1, "", "SetHolder"], [127, 2, 1, "", "UniqueNamesProver"], [127, 1, 1, "", "closed_domain_demo"], [127, 1, 1, "", "closed_world_demo"], [127, 1, 1, "", "combination_prover_demo"], [127, 1, 1, "", "default_reasoning_demo"], [127, 1, 1, "", "demo"], [127, 1, 1, "", "get_domain"], [127, 1, 1, "", "print_proof"], [127, 1, 1, "", "unique_names_demo"]], "nltk.inference.nonmonotonic.ClosedDomainProver": [[127, 3, 1, "", "assumptions"], [127, 3, 1, "", "goal"], [127, 3, 1, "", "replace_quants"]], "nltk.inference.nonmonotonic.ClosedWorldProver": [[127, 3, 1, "", "assumptions"]], "nltk.inference.nonmonotonic.PredHolder": [[127, 3, 1, "", "__init__"], [127, 3, 1, "", "append_prop"], [127, 3, 1, "", "append_sig"], [127, 3, 1, "", "validate_sig_len"]], "nltk.inference.nonmonotonic.UniqueNamesProver": [[127, 3, 1, "", "assumptions"]], "nltk.inference.prover9": [[128, 2, 1, "", "Prover9"], [128, 2, 1, "", "Prover9Command"], [128, 2, 1, "", "Prover9CommandParent"], [128, 6, 1, "", "Prover9Exception"], [128, 6, 1, "", "Prover9FatalException"], [128, 6, 1, "", "Prover9LimitExceededException"], [128, 2, 1, "", "Prover9Parent"], [128, 1, 1, "", "convert_to_prover9"], [128, 1, 1, "", "demo"], [128, 1, 1, "", "spacer"], [128, 1, 1, "", "test_config"], [128, 1, 1, "", "test_convert_to_prover9"], [128, 1, 1, "", "test_prove"]], "nltk.inference.prover9.Prover9": [[128, 3, 1, "", "__init__"], [128, 3, 1, "", "prover9_input"]], "nltk.inference.prover9.Prover9Command": [[128, 3, 1, "", "__init__"], [128, 3, 1, "", "decorate_proof"]], "nltk.inference.prover9.Prover9CommandParent": [[128, 3, 1, "", "print_assumptions"]], "nltk.inference.prover9.Prover9Exception": [[128, 3, 1, "", "__init__"]], "nltk.inference.prover9.Prover9Parent": [[128, 3, 1, "", "binary_locations"], [128, 3, 1, "", "config_prover9"], [128, 3, 1, "", "prover9_input"]], "nltk.inference.resolution": [[129, 2, 1, "", "BindingDict"], [129, 6, 1, "", "BindingException"], [129, 2, 1, "", "Clause"], [129, 2, 1, "", "DebugObject"], [129, 6, 1, "", "ProverParseError"], [129, 2, 1, "", "ResolutionProver"], [129, 2, 1, "", "ResolutionProverCommand"], [129, 6, 1, "", "UnificationException"], [129, 1, 1, "", "clausify"], [129, 1, 1, "", "demo"], [129, 1, 1, "", "most_general_unification"], [129, 1, 1, "", "resolution_test"], [129, 1, 1, "", "testResolutionProver"], [129, 1, 1, "", "test_clausify"]], "nltk.inference.resolution.BindingDict": [[129, 3, 1, "", "__init__"]], "nltk.inference.resolution.BindingException": [[129, 3, 1, "", "__init__"]], "nltk.inference.resolution.Clause": [[129, 3, 1, "", "__init__"], [129, 3, 1, "", "free"], [129, 3, 1, "", "isSubsetOf"], [129, 3, 1, "", "is_tautology"], [129, 3, 1, "", "replace"], [129, 3, 1, "", "substitute_bindings"], [129, 3, 1, "", "subsumes"], [129, 3, 1, "", "unify"]], "nltk.inference.resolution.DebugObject": [[129, 3, 1, "", "__init__"], [129, 3, 1, "", "line"]], "nltk.inference.resolution.ResolutionProver": [[129, 4, 1, "", "ANSWER_KEY"]], "nltk.inference.resolution.ResolutionProverCommand": [[129, 3, 1, "", "__init__"], [129, 3, 1, "", "find_answers"], [129, 3, 1, "", "prove"]], "nltk.inference.resolution.UnificationException": [[129, 3, 1, "", "__init__"]], "nltk.inference.tableau": [[130, 2, 1, "", "Agenda"], [130, 2, 1, "", "Categories"], [130, 2, 1, "", "Debug"], [130, 6, 1, "", "ProverParseError"], [130, 2, 1, "", "TableauProver"], [130, 2, 1, "", "TableauProverCommand"], [130, 1, 1, "", "demo"], [130, 1, 1, "", "tableau_test"], [130, 1, 1, "", "testHigherOrderTableauProver"], [130, 1, 1, "", "testTableauProver"]], "nltk.inference.tableau.Agenda": [[130, 3, 1, "", "__init__"], [130, 3, 1, "", "clone"], [130, 3, 1, "", "mark_alls_fresh"], [130, 3, 1, "", "mark_neqs_fresh"], [130, 3, 1, "", "pop_first"], [130, 3, 1, "", "put"], [130, 3, 1, "", "put_all"], [130, 3, 1, "", "put_atoms"], [130, 3, 1, "", "replace_all"]], "nltk.inference.tableau.Categories": [[130, 4, 1, "", "ALL"], [130, 4, 1, "", "AND"], [130, 4, 1, "", "APP"], [130, 4, 1, "", "ATOM"], [130, 4, 1, "", "D_NEG"], [130, 4, 1, "", "EQ"], [130, 4, 1, "", "EXISTS"], [130, 4, 1, "", "IFF"], [130, 4, 1, "", "IMP"], [130, 4, 1, "", "N_ALL"], [130, 4, 1, "", "N_AND"], [130, 4, 1, "", "N_APP"], [130, 4, 1, "", "N_ATOM"], [130, 4, 1, "", "N_EQ"], [130, 4, 1, "", "N_EXISTS"], [130, 4, 1, "", "N_IFF"], [130, 4, 1, "", "N_IMP"], [130, 4, 1, "", "N_OR"], [130, 4, 1, "", "N_PROP"], [130, 4, 1, "", "OR"], [130, 4, 1, "", "PROP"]], "nltk.inference.tableau.Debug": [[130, 3, 1, "", "__init__"], [130, 3, 1, "", "line"]], "nltk.inference.tableau.TableauProver": [[130, 3, 1, "", "is_atom"]], "nltk.inference.tableau.TableauProverCommand": [[130, 3, 1, "", "__init__"]], "nltk.internals": [[131, 2, 1, "", "Counter"], [131, 2, 1, "", "Deprecated"], [131, 2, 1, "", "ElementWrapper"], [131, 6, 1, "", "ReadError"], [131, 1, 1, "", "config_java"], [131, 1, 1, "", "deprecated"], [131, 1, 1, "", "find_binary"], [131, 1, 1, "", "find_binary_iter"], [131, 1, 1, "", "find_dir"], [131, 1, 1, "", "find_file"], [131, 1, 1, "", "find_file_iter"], [131, 1, 1, "", "find_jar"], [131, 1, 1, "", "find_jar_iter"], [131, 1, 1, "", "find_jars_within_path"], [131, 1, 1, "", "import_from_stdlib"], [131, 1, 1, "", "is_writable"], [131, 1, 1, "", "java"], [131, 1, 1, "", "overridden"], [131, 1, 1, "", "raise_unorderable_types"], [131, 1, 1, "", "read_int"], [131, 1, 1, "", "read_number"], [131, 1, 1, "", "read_str"], [131, 1, 1, "", "slice_bounds"]], "nltk.internals.Counter": [[131, 3, 1, "", "__init__"], [131, 3, 1, "", "get"]], "nltk.internals.Deprecated": [[131, 3, 1, "", "__new__"]], "nltk.internals.ElementWrapper": [[131, 3, 1, "", "__init__"], [131, 3, 1, "", "__new__"], [131, 3, 1, "", "find"], [131, 3, 1, "", "findall"], [131, 3, 1, "", "getchildren"], [131, 3, 1, "", "getiterator"], [131, 3, 1, "", "makeelement"], [131, 3, 1, "", "unwrap"]], "nltk.internals.ReadError": [[131, 3, 1, "", "__init__"]], "nltk.jsontags": [[132, 2, 1, "", "JSONTaggedDecoder"], [132, 2, 1, "", "JSONTaggedEncoder"], [132, 1, 1, "", "register_tag"]], "nltk.jsontags.JSONTaggedDecoder": [[132, 3, 1, "", "decode"], [132, 3, 1, "", "decode_obj"]], "nltk.jsontags.JSONTaggedEncoder": [[132, 3, 1, "", "default"]], "nltk.langnames": [[133, 1, 1, "", "inverse_dict"], [133, 1, 1, "", "lang2q"], [133, 1, 1, "", "langcode"], [133, 1, 1, "", "langname"], [133, 1, 1, "", "q2name"], [133, 1, 1, "", "q2tag"], [133, 1, 1, "", "tag2q"]], "nltk.lazyimport": [[134, 2, 1, "", "LazyModule"]], "nltk.lazyimport.LazyModule": [[134, 3, 1, "", "__init__"]], "nltk.lm": [[135, 2, 1, "", "AbsoluteDiscountingInterpolated"], [135, 2, 1, "", "KneserNeyInterpolated"], [135, 2, 1, "", "Laplace"], [135, 2, 1, "", "Lidstone"], [135, 2, 1, "", "MLE"], [135, 2, 1, "", "NgramCounter"], [135, 2, 1, "", "StupidBackoff"], [135, 2, 1, "", "Vocabulary"], [135, 2, 1, "", "WittenBellInterpolated"], [136, 0, 0, "-", "api"], [137, 0, 0, "-", "counter"], [138, 0, 0, "-", "models"], [139, 0, 0, "-", "preprocessing"], [140, 0, 0, "-", "smoothing"], [141, 0, 0, "-", "util"], [142, 0, 0, "-", "vocabulary"]], "nltk.lm.AbsoluteDiscountingInterpolated": [[135, 3, 1, "", "__init__"]], "nltk.lm.KneserNeyInterpolated": [[135, 3, 1, "", "__init__"]], "nltk.lm.Laplace": [[135, 3, 1, "", "__init__"]], "nltk.lm.Lidstone": [[135, 3, 1, "", "__init__"], [135, 3, 1, "", "unmasked_score"]], "nltk.lm.MLE": [[135, 3, 1, "", "unmasked_score"]], "nltk.lm.NgramCounter": [[135, 3, 1, "", "N"], [135, 3, 1, "", "__init__"], [135, 3, 1, "", "update"]], "nltk.lm.StupidBackoff": [[135, 3, 1, "", "__init__"], [135, 3, 1, "", "unmasked_score"]], "nltk.lm.Vocabulary": [[135, 3, 1, "", "__init__"], [135, 5, 1, "", "cutoff"], [135, 3, 1, "", "lookup"], [135, 3, 1, "", "update"]], "nltk.lm.WittenBellInterpolated": [[135, 3, 1, "", "__init__"]], "nltk.lm.api": [[136, 2, 1, "", "LanguageModel"], [136, 2, 1, "", "Smoothing"]], "nltk.lm.api.LanguageModel": [[136, 3, 1, "", "__init__"], [136, 3, 1, "", "context_counts"], [136, 3, 1, "", "entropy"], [136, 3, 1, "", "fit"], [136, 3, 1, "", "generate"], [136, 3, 1, "", "logscore"], [136, 3, 1, "", "perplexity"], [136, 3, 1, "", "score"], [136, 3, 1, "", "unmasked_score"]], "nltk.lm.api.Smoothing": [[136, 3, 1, "", "__init__"], [136, 3, 1, "", "alpha_gamma"], [136, 3, 1, "", "unigram_score"]], "nltk.lm.counter": [[137, 2, 1, "", "NgramCounter"]], "nltk.lm.counter.NgramCounter": [[137, 3, 1, "", "N"], [137, 3, 1, "", "__init__"], [137, 3, 1, "", "update"]], "nltk.lm.models": [[138, 2, 1, "", "AbsoluteDiscountingInterpolated"], [138, 2, 1, "", "InterpolatedLanguageModel"], [138, 2, 1, "", "KneserNeyInterpolated"], [138, 2, 1, "", "Laplace"], [138, 2, 1, "", "Lidstone"], [138, 2, 1, "", "MLE"], [138, 2, 1, "", "StupidBackoff"], [138, 2, 1, "", "WittenBellInterpolated"]], "nltk.lm.models.AbsoluteDiscountingInterpolated": [[138, 3, 1, "", "__init__"]], "nltk.lm.models.InterpolatedLanguageModel": [[138, 3, 1, "", "__init__"], [138, 3, 1, "", "unmasked_score"]], "nltk.lm.models.KneserNeyInterpolated": [[138, 3, 1, "", "__init__"]], "nltk.lm.models.Laplace": [[138, 3, 1, "", "__init__"]], "nltk.lm.models.Lidstone": [[138, 3, 1, "", "__init__"], [138, 3, 1, "", "unmasked_score"]], "nltk.lm.models.MLE": [[138, 3, 1, "", "unmasked_score"]], "nltk.lm.models.StupidBackoff": [[138, 3, 1, "", "__init__"], [138, 3, 1, "", "unmasked_score"]], "nltk.lm.models.WittenBellInterpolated": [[138, 3, 1, "", "__init__"]], "nltk.lm.preprocessing": [[139, 1, 1, "", "flatten"], [139, 1, 1, "", "padded_everygram_pipeline"], [139, 1, 1, "", "padded_everygrams"]], "nltk.lm.smoothing": [[140, 2, 1, "", "AbsoluteDiscounting"], [140, 2, 1, "", "KneserNey"], [140, 2, 1, "", "WittenBell"]], "nltk.lm.smoothing.AbsoluteDiscounting": [[140, 3, 1, "", "__init__"], [140, 3, 1, "", "alpha_gamma"], [140, 3, 1, "", "unigram_score"]], "nltk.lm.smoothing.KneserNey": [[140, 3, 1, "", "__init__"], [140, 3, 1, "", "alpha_gamma"], [140, 3, 1, "", "unigram_score"]], "nltk.lm.smoothing.WittenBell": [[140, 3, 1, "", "__init__"], [140, 3, 1, "", "alpha_gamma"], [140, 3, 1, "", "unigram_score"]], "nltk.lm.util": [[141, 1, 1, "", "log_base2"]], "nltk.lm.vocabulary": [[142, 2, 1, "", "Vocabulary"]], "nltk.lm.vocabulary.Vocabulary": [[142, 3, 1, "", "__init__"], [142, 5, 1, "", "cutoff"], [142, 3, 1, "", "lookup"], [142, 3, 1, "", "update"]], "nltk.metrics": [[144, 0, 0, "-", "agreement"], [145, 0, 0, "-", "aline"], [146, 0, 0, "-", "association"], [147, 0, 0, "-", "confusionmatrix"], [148, 0, 0, "-", "distance"], [149, 0, 0, "-", "paice"], [150, 0, 0, "-", "scores"], [151, 0, 0, "-", "segmentation"], [152, 0, 0, "-", "spearman"]], "nltk.metrics.agreement": [[144, 2, 1, "", "AnnotationTask"]], "nltk.metrics.agreement.AnnotationTask": [[144, 3, 1, "", "Ae_kappa"], [144, 3, 1, "", "Ao"], [144, 3, 1, "", "Disagreement"], [144, 3, 1, "", "Do_Kw"], [144, 3, 1, "", "Do_Kw_pairwise"], [144, 3, 1, "", "N"], [144, 3, 1, "", "Nck"], [144, 3, 1, "", "Nik"], [144, 3, 1, "", "Nk"], [144, 3, 1, "", "S"], [144, 3, 1, "", "__init__"], [144, 3, 1, "", "agr"], [144, 3, 1, "", "alpha"], [144, 3, 1, "", "avg_Ao"], [144, 3, 1, "", "kappa"], [144, 3, 1, "", "kappa_pairwise"], [144, 3, 1, "", "load_array"], [144, 3, 1, "", "multi_kappa"], [144, 3, 1, "", "pi"], [144, 3, 1, "", "weighted_kappa"], [144, 3, 1, "", "weighted_kappa_pairwise"]], "nltk.metrics.aline": [[145, 1, 1, "", "R"], [145, 1, 1, "", "V"], [145, 1, 1, "", "align"], [145, 1, 1, "", "delta"], [145, 1, 1, "", "demo"], [145, 1, 1, "", "diff"], [145, 1, 1, "", "sigma_exp"], [145, 1, 1, "", "sigma_skip"], [145, 1, 1, "", "sigma_sub"]], "nltk.metrics.association": [[146, 2, 1, "", "BigramAssocMeasures"], [146, 2, 1, "", "ContingencyMeasures"], [146, 7, 1, "", "NGRAM"], [146, 2, 1, "", "NgramAssocMeasures"], [146, 2, 1, "", "QuadgramAssocMeasures"], [146, 7, 1, "", "TOTAL"], [146, 2, 1, "", "TrigramAssocMeasures"], [146, 7, 1, "", "UNIGRAMS"], [146, 1, 1, "", "fisher_exact"]], "nltk.metrics.association.BigramAssocMeasures": [[146, 3, 1, "", "chi_sq"], [146, 3, 1, "", "dice"], [146, 3, 1, "", "fisher"], [146, 3, 1, "", "phi_sq"]], "nltk.metrics.association.ContingencyMeasures": [[146, 3, 1, "", "__init__"]], "nltk.metrics.association.NgramAssocMeasures": [[146, 3, 1, "", "chi_sq"], [146, 3, 1, "", "jaccard"], [146, 3, 1, "", "likelihood_ratio"], [146, 3, 1, "", "mi_like"], [146, 3, 1, "", "pmi"], [146, 3, 1, "", "poisson_stirling"], [146, 3, 1, "", "raw_freq"], [146, 3, 1, "", "student_t"]], "nltk.metrics.confusionmatrix": [[147, 2, 1, "", "ConfusionMatrix"], [147, 1, 1, "", "demo"]], "nltk.metrics.confusionmatrix.ConfusionMatrix": [[147, 3, 1, "", "__init__"], [147, 3, 1, "", "evaluate"], [147, 3, 1, "", "f_measure"], [147, 3, 1, "", "key"], [147, 3, 1, "", "precision"], [147, 3, 1, "", "pretty_format"], [147, 3, 1, "", "recall"]], "nltk.metrics.distance": [[148, 1, 1, "", "binary_distance"], [148, 1, 1, "", "custom_distance"], [148, 1, 1, "", "demo"], [148, 1, 1, "", "edit_distance"], [148, 1, 1, "", "edit_distance_align"], [148, 1, 1, "", "fractional_presence"], [148, 1, 1, "", "interval_distance"], [148, 1, 1, "", "jaccard_distance"], [148, 1, 1, "", "jaro_similarity"], [148, 1, 1, "", "jaro_winkler_similarity"], [148, 1, 1, "", "masi_distance"], [148, 1, 1, "", "presence"]], "nltk.metrics.paice": [[149, 2, 1, "", "Paice"], [149, 1, 1, "", "demo"], [149, 1, 1, "", "get_words_from_dictionary"]], "nltk.metrics.paice.Paice": [[149, 3, 1, "", "__init__"], [149, 3, 1, "", "update"]], "nltk.metrics.scores": [[150, 1, 1, "", "accuracy"], [150, 1, 1, "", "approxrand"], [150, 1, 1, "", "demo"], [150, 1, 1, "", "f_measure"], [150, 1, 1, "", "log_likelihood"], [150, 1, 1, "", "precision"], [150, 1, 1, "", "recall"]], "nltk.metrics.segmentation": [[151, 1, 1, "", "ghd"], [151, 1, 1, "", "pk"], [151, 1, 1, "", "windowdiff"]], "nltk.metrics.spearman": [[152, 1, 1, "", "ranks_from_scores"], [152, 1, 1, "", "ranks_from_sequence"], [152, 1, 1, "", "spearman_correlation"]], "nltk.misc": [[154, 0, 0, "-", "babelfish"], [155, 0, 0, "-", "chomsky"], [156, 0, 0, "-", "minimalset"], [157, 0, 0, "-", "sort"], [158, 0, 0, "-", "wordfinder"]], "nltk.misc.babelfish": [[154, 1, 1, "", "babelize_shell"]], "nltk.misc.chomsky": [[155, 1, 1, "", "generate_chomsky"]], "nltk.misc.minimalset": [[156, 2, 1, "", "MinimalSet"]], "nltk.misc.minimalset.MinimalSet": [[156, 3, 1, "", "__init__"], [156, 3, 1, "", "add"], [156, 3, 1, "", "contexts"], [156, 3, 1, "", "display"], [156, 3, 1, "", "display_all"], [156, 3, 1, "", "targets"]], "nltk.misc.sort": [[157, 1, 1, "", "bubble"], [157, 1, 1, "", "demo"], [157, 1, 1, "", "merge"], [157, 1, 1, "", "quick"], [157, 1, 1, "", "selection"]], "nltk.misc.wordfinder": [[158, 1, 1, "", "check"], [158, 1, 1, "", "revword"], [158, 1, 1, "", "step"], [158, 1, 1, "", "word_finder"], [158, 1, 1, "", "wordfinder"]], "nltk.parse": [[160, 0, 0, "-", "api"], [161, 0, 0, "-", "bllip"], [162, 0, 0, "-", "chart"], [163, 0, 0, "-", "corenlp"], [164, 0, 0, "-", "dependencygraph"], [165, 0, 0, "-", "earleychart"], [166, 0, 0, "-", "evaluate"], [167, 0, 0, "-", "featurechart"], [168, 0, 0, "-", "generate"], [169, 0, 0, "-", "malt"], [170, 0, 0, "-", "nonprojectivedependencyparser"], [171, 0, 0, "-", "pchart"], [172, 0, 0, "-", "projectivedependencyparser"], [173, 0, 0, "-", "recursivedescent"], [174, 0, 0, "-", "shiftreduce"], [175, 0, 0, "-", "stanford"], [176, 0, 0, "-", "transitionparser"], [177, 0, 0, "-", "util"], [178, 0, 0, "-", "viterbi"]], "nltk.parse.api": [[160, 2, 1, "", "ParserI"]], "nltk.parse.api.ParserI": [[160, 3, 1, "", "grammar"], [160, 3, 1, "", "parse"], [160, 3, 1, "", "parse_all"], [160, 3, 1, "", "parse_one"], [160, 3, 1, "", "parse_sents"]], "nltk.parse.bllip": [[161, 2, 1, "", "BllipParser"]], "nltk.parse.bllip.BllipParser": [[161, 3, 1, "", "__init__"], [161, 3, 1, "", "from_unified_model_dir"], [161, 3, 1, "", "parse"], [161, 3, 1, "", "tagged_parse"]], "nltk.parse.chart": [[162, 2, 1, "", "AbstractChartRule"], [162, 2, 1, "", "BottomUpChartParser"], [162, 2, 1, "", "BottomUpLeftCornerChartParser"], [162, 2, 1, "", "BottomUpPredictCombineRule"], [162, 2, 1, "", "BottomUpPredictRule"], [162, 2, 1, "", "CachedTopDownPredictRule"], [162, 2, 1, "", "Chart"], [162, 2, 1, "", "ChartParser"], [162, 2, 1, "", "ChartRuleI"], [162, 2, 1, "", "EdgeI"], [162, 2, 1, "", "EmptyPredictRule"], [162, 2, 1, "", "FilteredBottomUpPredictCombineRule"], [162, 2, 1, "", "FilteredSingleEdgeFundamentalRule"], [162, 2, 1, "", "FundamentalRule"], [162, 2, 1, "", "LeafEdge"], [162, 2, 1, "", "LeafInitRule"], [162, 2, 1, "", "LeftCornerChartParser"], [162, 2, 1, "", "SingleEdgeFundamentalRule"], [162, 2, 1, "", "SteppingChartParser"], [162, 2, 1, "", "TopDownChartParser"], [162, 2, 1, "", "TopDownInitRule"], [162, 2, 1, "", "TopDownPredictRule"], [162, 2, 1, "", "TreeEdge"], [162, 1, 1, "", "demo"], [162, 1, 1, "", "demo_grammar"]], "nltk.parse.chart.AbstractChartRule": [[162, 3, 1, "", "apply"], [162, 3, 1, "", "apply_everywhere"]], "nltk.parse.chart.BottomUpChartParser": [[162, 3, 1, "", "__init__"]], "nltk.parse.chart.BottomUpLeftCornerChartParser": [[162, 3, 1, "", "__init__"]], "nltk.parse.chart.BottomUpPredictCombineRule": [[162, 4, 1, "", "NUM_EDGES"], [162, 3, 1, "", "apply"]], "nltk.parse.chart.BottomUpPredictRule": [[162, 4, 1, "", "NUM_EDGES"], [162, 3, 1, "", "apply"]], "nltk.parse.chart.CachedTopDownPredictRule": [[162, 3, 1, "", "__init__"], [162, 3, 1, "", "apply"]], "nltk.parse.chart.Chart": [[162, 3, 1, "", "__init__"], [162, 3, 1, "", "child_pointer_lists"], [162, 3, 1, "", "dot_digraph"], [162, 3, 1, "", "edges"], [162, 3, 1, "", "initialize"], [162, 3, 1, "", "insert"], [162, 3, 1, "", "insert_with_backpointer"], [162, 3, 1, "", "iteredges"], [162, 3, 1, "", "leaf"], [162, 3, 1, "", "leaves"], [162, 3, 1, "", "num_edges"], [162, 3, 1, "", "num_leaves"], [162, 3, 1, "", "parses"], [162, 3, 1, "", "pretty_format"], [162, 3, 1, "", "pretty_format_edge"], [162, 3, 1, "", "pretty_format_leaves"], [162, 3, 1, "", "select"], [162, 3, 1, "", "trees"]], "nltk.parse.chart.ChartParser": [[162, 3, 1, "", "__init__"], [162, 3, 1, "", "chart_parse"], [162, 3, 1, "", "grammar"], [162, 3, 1, "", "parse"]], "nltk.parse.chart.ChartRuleI": [[162, 3, 1, "", "apply"], [162, 3, 1, "", "apply_everywhere"]], "nltk.parse.chart.EdgeI": [[162, 3, 1, "", "__init__"], [162, 3, 1, "", "dot"], [162, 3, 1, "", "end"], [162, 3, 1, "", "is_complete"], [162, 3, 1, "", "is_incomplete"], [162, 3, 1, "", "length"], [162, 3, 1, "", "lhs"], [162, 3, 1, "", "nextsym"], [162, 3, 1, "", "rhs"], [162, 3, 1, "", "span"], [162, 3, 1, "", "start"]], "nltk.parse.chart.EmptyPredictRule": [[162, 4, 1, "", "NUM_EDGES"], [162, 3, 1, "", "apply"]], "nltk.parse.chart.FilteredBottomUpPredictCombineRule": [[162, 3, 1, "", "apply"]], "nltk.parse.chart.FundamentalRule": [[162, 4, 1, "", "NUM_EDGES"], [162, 3, 1, "", "apply"]], "nltk.parse.chart.LeafEdge": [[162, 3, 1, "", "__init__"], [162, 3, 1, "", "dot"], [162, 3, 1, "", "end"], [162, 3, 1, "", "is_complete"], [162, 3, 1, "", "is_incomplete"], [162, 3, 1, "", "length"], [162, 3, 1, "", "lhs"], [162, 3, 1, "", "nextsym"], [162, 3, 1, "", "rhs"], [162, 3, 1, "", "span"], [162, 3, 1, "", "start"]], "nltk.parse.chart.LeafInitRule": [[162, 4, 1, "", "NUM_EDGES"], [162, 3, 1, "", "apply"]], "nltk.parse.chart.LeftCornerChartParser": [[162, 3, 1, "", "__init__"]], "nltk.parse.chart.SingleEdgeFundamentalRule": [[162, 4, 1, "", "NUM_EDGES"], [162, 3, 1, "", "apply"]], "nltk.parse.chart.SteppingChartParser": [[162, 3, 1, "", "__init__"], [162, 3, 1, "", "chart"], [162, 3, 1, "", "current_chartrule"], [162, 3, 1, "", "grammar"], [162, 3, 1, "", "initialize"], [162, 3, 1, "", "parse"], [162, 3, 1, "", "parses"], [162, 3, 1, "", "set_chart"], [162, 3, 1, "", "set_grammar"], [162, 3, 1, "", "set_strategy"], [162, 3, 1, "", "step"], [162, 3, 1, "", "strategy"]], "nltk.parse.chart.TopDownChartParser": [[162, 3, 1, "", "__init__"]], "nltk.parse.chart.TopDownInitRule": [[162, 4, 1, "", "NUM_EDGES"], [162, 3, 1, "", "apply"]], "nltk.parse.chart.TopDownPredictRule": [[162, 4, 1, "", "NUM_EDGES"], [162, 3, 1, "", "apply"]], "nltk.parse.chart.TreeEdge": [[162, 3, 1, "", "__init__"], [162, 3, 1, "", "dot"], [162, 3, 1, "", "end"], [162, 3, 1, "", "from_production"], [162, 3, 1, "", "is_complete"], [162, 3, 1, "", "is_incomplete"], [162, 3, 1, "", "length"], [162, 3, 1, "", "lhs"], [162, 3, 1, "", "move_dot_forward"], [162, 3, 1, "", "nextsym"], [162, 3, 1, "", "rhs"], [162, 3, 1, "", "span"], [162, 3, 1, "", "start"]], "nltk.parse.corenlp": [[163, 2, 1, "", "CoreNLPDependencyParser"], [163, 2, 1, "", "CoreNLPParser"], [163, 2, 1, "", "CoreNLPServer"], [163, 6, 1, "", "CoreNLPServerError"], [163, 2, 1, "", "GenericCoreNLPParser"], [163, 1, 1, "", "transform"], [163, 1, 1, "", "try_port"]], "nltk.parse.corenlp.CoreNLPDependencyParser": [[163, 3, 1, "", "make_tree"], [163, 4, 1, "", "parser_annotator"]], "nltk.parse.corenlp.CoreNLPParser": [[163, 3, 1, "", "make_tree"], [163, 4, 1, "", "parser_annotator"]], "nltk.parse.corenlp.CoreNLPServer": [[163, 3, 1, "", "__init__"], [163, 3, 1, "", "start"], [163, 3, 1, "", "stop"]], "nltk.parse.corenlp.GenericCoreNLPParser": [[163, 3, 1, "", "__init__"], [163, 3, 1, "", "api_call"], [163, 3, 1, "", "parse_sents"], [163, 3, 1, "", "parse_text"], [163, 3, 1, "", "raw_parse"], [163, 3, 1, "", "raw_parse_sents"], [163, 3, 1, "", "raw_tag_sents"], [163, 3, 1, "", "tag"], [163, 3, 1, "", "tag_sents"], [163, 3, 1, "", "tokenize"]], "nltk.parse.dependencygraph": [[164, 2, 1, "", "DependencyGraph"], [164, 6, 1, "", "DependencyGraphError"], [164, 1, 1, "", "conll_demo"], [164, 1, 1, "", "conll_file_demo"], [164, 1, 1, "", "cycle_finding_demo"], [164, 1, 1, "", "demo"], [164, 1, 1, "", "dot2img"], [164, 1, 1, "", "malt_demo"]], "nltk.parse.dependencygraph.DependencyGraph": [[164, 3, 1, "", "__init__"], [164, 3, 1, "", "add_arc"], [164, 3, 1, "", "add_node"], [164, 3, 1, "", "connect_graph"], [164, 3, 1, "", "contains_address"], [164, 3, 1, "", "contains_cycle"], [164, 3, 1, "", "get_by_address"], [164, 3, 1, "", "get_cycle_path"], [164, 3, 1, "", "left_children"], [164, 3, 1, "", "load"], [164, 3, 1, "", "nx_graph"], [164, 3, 1, "", "redirect_arcs"], [164, 3, 1, "", "remove_by_address"], [164, 3, 1, "", "right_children"], [164, 3, 1, "", "to_conll"], [164, 3, 1, "", "to_dot"], [164, 3, 1, "", "tree"], [164, 3, 1, "", "triples"]], "nltk.parse.earleychart": [[165, 2, 1, "", "CompleteFundamentalRule"], [165, 2, 1, "", "CompleterRule"], [165, 2, 1, "", "EarleyChartParser"], [165, 2, 1, "", "FeatureCompleteFundamentalRule"], [165, 2, 1, "", "FeatureCompleterRule"], [165, 2, 1, "", "FeatureEarleyChartParser"], [165, 2, 1, "", "FeatureIncrementalBottomUpChartParser"], [165, 2, 1, "", "FeatureIncrementalBottomUpLeftCornerChartParser"], [165, 2, 1, "", "FeatureIncrementalChart"], [165, 2, 1, "", "FeatureIncrementalChartParser"], [165, 2, 1, "", "FeatureIncrementalTopDownChartParser"], [165, 2, 1, "", "FeaturePredictorRule"], [165, 2, 1, "", "FeatureScannerRule"], [165, 2, 1, "", "FilteredCompleteFundamentalRule"], [165, 2, 1, "", "IncrementalBottomUpChartParser"], [165, 2, 1, "", "IncrementalBottomUpLeftCornerChartParser"], [165, 2, 1, "", "IncrementalChart"], [165, 2, 1, "", "IncrementalChartParser"], [165, 2, 1, "", "IncrementalLeftCornerChartParser"], [165, 2, 1, "", "IncrementalTopDownChartParser"], [165, 2, 1, "", "PredictorRule"], [165, 2, 1, "", "ScannerRule"], [165, 1, 1, "", "demo"]], "nltk.parse.earleychart.CompleterRule": [[165, 3, 1, "", "apply"]], "nltk.parse.earleychart.EarleyChartParser": [[165, 3, 1, "", "__init__"]], "nltk.parse.earleychart.FeatureEarleyChartParser": [[165, 3, 1, "", "__init__"]], "nltk.parse.earleychart.FeatureIncrementalBottomUpChartParser": [[165, 3, 1, "", "__init__"]], "nltk.parse.earleychart.FeatureIncrementalBottomUpLeftCornerChartParser": [[165, 3, 1, "", "__init__"]], "nltk.parse.earleychart.FeatureIncrementalChart": [[165, 3, 1, "", "select"]], "nltk.parse.earleychart.FeatureIncrementalChartParser": [[165, 3, 1, "", "__init__"]], "nltk.parse.earleychart.FeatureIncrementalTopDownChartParser": [[165, 3, 1, "", "__init__"]], "nltk.parse.earleychart.FilteredCompleteFundamentalRule": [[165, 3, 1, "", "apply"]], "nltk.parse.earleychart.IncrementalBottomUpChartParser": [[165, 3, 1, "", "__init__"]], "nltk.parse.earleychart.IncrementalBottomUpLeftCornerChartParser": [[165, 3, 1, "", "__init__"]], "nltk.parse.earleychart.IncrementalChart": [[165, 3, 1, "", "edges"], [165, 3, 1, "", "initialize"], [165, 3, 1, "", "iteredges"], [165, 3, 1, "", "select"]], "nltk.parse.earleychart.IncrementalChartParser": [[165, 3, 1, "", "__init__"], [165, 3, 1, "", "chart_parse"]], "nltk.parse.earleychart.IncrementalLeftCornerChartParser": [[165, 3, 1, "", "__init__"]], "nltk.parse.earleychart.IncrementalTopDownChartParser": [[165, 3, 1, "", "__init__"]], "nltk.parse.earleychart.ScannerRule": [[165, 3, 1, "", "apply"]], "nltk.parse.evaluate": [[166, 2, 1, "", "DependencyEvaluator"]], "nltk.parse.evaluate.DependencyEvaluator": [[166, 3, 1, "", "__init__"], [166, 3, 1, "", "eval"]], "nltk.parse.featurechart": [[167, 2, 1, "", "FeatureBottomUpChartParser"], [167, 2, 1, "", "FeatureBottomUpLeftCornerChartParser"], [167, 2, 1, "", "FeatureBottomUpPredictCombineRule"], [167, 2, 1, "", "FeatureBottomUpPredictRule"], [167, 2, 1, "", "FeatureChart"], [167, 2, 1, "", "FeatureChartParser"], [167, 2, 1, "", "FeatureEmptyPredictRule"], [167, 2, 1, "", "FeatureFundamentalRule"], [167, 2, 1, "", "FeatureSingleEdgeFundamentalRule"], [167, 2, 1, "", "FeatureTopDownChartParser"], [167, 2, 1, "", "FeatureTopDownInitRule"], [167, 2, 1, "", "FeatureTopDownPredictRule"], [167, 2, 1, "", "FeatureTreeEdge"], [167, 2, 1, "", "InstantiateVarsChart"], [167, 1, 1, "", "demo"], [167, 1, 1, "", "demo_grammar"], [167, 1, 1, "", "run_profile"]], "nltk.parse.featurechart.FeatureBottomUpChartParser": [[167, 3, 1, "", "__init__"]], "nltk.parse.featurechart.FeatureBottomUpLeftCornerChartParser": [[167, 3, 1, "", "__init__"]], "nltk.parse.featurechart.FeatureBottomUpPredictCombineRule": [[167, 3, 1, "", "apply"]], "nltk.parse.featurechart.FeatureBottomUpPredictRule": [[167, 3, 1, "", "apply"]], "nltk.parse.featurechart.FeatureChart": [[167, 3, 1, "", "parses"], [167, 3, 1, "", "select"]], "nltk.parse.featurechart.FeatureChartParser": [[167, 3, 1, "", "__init__"]], "nltk.parse.featurechart.FeatureEmptyPredictRule": [[167, 3, 1, "", "apply"]], "nltk.parse.featurechart.FeatureFundamentalRule": [[167, 3, 1, "", "apply"]], "nltk.parse.featurechart.FeatureTopDownChartParser": [[167, 3, 1, "", "__init__"]], "nltk.parse.featurechart.FeatureTopDownInitRule": [[167, 3, 1, "", "apply"]], "nltk.parse.featurechart.FeatureTopDownPredictRule": [[167, 3, 1, "", "apply"]], "nltk.parse.featurechart.FeatureTreeEdge": [[167, 3, 1, "", "__init__"], [167, 3, 1, "", "bindings"], [167, 3, 1, "", "from_production"], [167, 3, 1, "", "move_dot_forward"], [167, 3, 1, "", "next_with_bindings"], [167, 3, 1, "", "variables"]], "nltk.parse.featurechart.InstantiateVarsChart": [[167, 3, 1, "", "__init__"], [167, 3, 1, "", "initialize"], [167, 3, 1, "", "insert"], [167, 3, 1, "", "inst_vars"], [167, 3, 1, "", "instantiate_edge"]], "nltk.parse.generate": [[168, 1, 1, "", "demo"], [168, 1, 1, "", "generate"]], "nltk.parse.malt": [[169, 2, 1, "", "MaltParser"], [169, 1, 1, "", "find_malt_model"], [169, 1, 1, "", "find_maltparser"], [169, 1, 1, "", "malt_regex_tagger"]], "nltk.parse.malt.MaltParser": [[169, 3, 1, "", "__init__"], [169, 3, 1, "", "generate_malt_command"], [169, 3, 1, "", "parse_sents"], [169, 3, 1, "", "parse_tagged_sents"], [169, 3, 1, "", "train"], [169, 3, 1, "", "train_from_file"]], "nltk.parse.nonprojectivedependencyparser": [[170, 2, 1, "", "DemoScorer"], [170, 2, 1, "", "DependencyScorerI"], [170, 2, 1, "", "NaiveBayesDependencyScorer"], [170, 2, 1, "", "NonprojectiveDependencyParser"], [170, 2, 1, "", "ProbabilisticNonprojectiveParser"], [170, 1, 1, "", "demo"], [170, 1, 1, "", "hall_demo"], [170, 1, 1, "", "nonprojective_conll_parse_demo"], [170, 1, 1, "", "rule_based_demo"]], "nltk.parse.nonprojectivedependencyparser.DemoScorer": [[170, 3, 1, "", "score"], [170, 3, 1, "", "train"]], "nltk.parse.nonprojectivedependencyparser.DependencyScorerI": [[170, 3, 1, "", "__init__"], [170, 3, 1, "", "score"], [170, 3, 1, "", "train"]], "nltk.parse.nonprojectivedependencyparser.NaiveBayesDependencyScorer": [[170, 3, 1, "", "__init__"], [170, 3, 1, "", "score"], [170, 3, 1, "", "train"]], "nltk.parse.nonprojectivedependencyparser.NonprojectiveDependencyParser": [[170, 3, 1, "", "__init__"], [170, 3, 1, "", "parse"]], "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser": [[170, 3, 1, "", "__init__"], [170, 3, 1, "", "best_incoming_arc"], [170, 3, 1, "", "collapse_nodes"], [170, 3, 1, "", "compute_max_subtract_score"], [170, 3, 1, "", "compute_original_indexes"], [170, 3, 1, "", "initialize_edge_scores"], [170, 3, 1, "", "original_best_arc"], [170, 3, 1, "", "parse"], [170, 3, 1, "", "train"], [170, 3, 1, "", "update_edge_scores"]], "nltk.parse.pchart": [[171, 2, 1, "", "BottomUpProbabilisticChartParser"], [171, 2, 1, "", "InsideChartParser"], [171, 2, 1, "", "LongestChartParser"], [171, 2, 1, "", "ProbabilisticBottomUpInitRule"], [171, 2, 1, "", "ProbabilisticBottomUpPredictRule"], [171, 2, 1, "", "ProbabilisticFundamentalRule"], [171, 2, 1, "", "ProbabilisticLeafEdge"], [171, 2, 1, "", "ProbabilisticTreeEdge"], [171, 2, 1, "", "RandomChartParser"], [171, 2, 1, "", "SingleEdgeProbabilisticFundamentalRule"], [171, 2, 1, "", "UnsortedChartParser"], [171, 1, 1, "", "demo"]], "nltk.parse.pchart.BottomUpProbabilisticChartParser": [[171, 3, 1, "", "__init__"], [171, 3, 1, "", "grammar"], [171, 3, 1, "", "parse"], [171, 3, 1, "", "sort_queue"], [171, 3, 1, "", "trace"]], "nltk.parse.pchart.InsideChartParser": [[171, 3, 1, "", "sort_queue"]], "nltk.parse.pchart.LongestChartParser": [[171, 3, 1, "", "sort_queue"]], "nltk.parse.pchart.ProbabilisticBottomUpInitRule": [[171, 4, 1, "", "NUM_EDGES"], [171, 3, 1, "", "apply"]], "nltk.parse.pchart.ProbabilisticBottomUpPredictRule": [[171, 4, 1, "", "NUM_EDGES"], [171, 3, 1, "", "apply"]], "nltk.parse.pchart.ProbabilisticFundamentalRule": [[171, 4, 1, "", "NUM_EDGES"], [171, 3, 1, "", "apply"]], "nltk.parse.pchart.ProbabilisticLeafEdge": [[171, 3, 1, "", "prob"]], "nltk.parse.pchart.ProbabilisticTreeEdge": [[171, 3, 1, "", "__init__"], [171, 3, 1, "", "from_production"], [171, 3, 1, "", "prob"]], "nltk.parse.pchart.RandomChartParser": [[171, 3, 1, "", "sort_queue"]], "nltk.parse.pchart.SingleEdgeProbabilisticFundamentalRule": [[171, 4, 1, "", "NUM_EDGES"], [171, 3, 1, "", "apply"]], "nltk.parse.pchart.UnsortedChartParser": [[171, 3, 1, "", "sort_queue"]], "nltk.parse.projectivedependencyparser": [[172, 2, 1, "", "ChartCell"], [172, 2, 1, "", "DependencySpan"], [172, 2, 1, "", "ProbabilisticProjectiveDependencyParser"], [172, 2, 1, "", "ProjectiveDependencyParser"], [172, 1, 1, "", "arity_parse_demo"], [172, 1, 1, "", "demo"], [172, 1, 1, "", "projective_prob_parse_demo"], [172, 1, 1, "", "projective_rule_parse_demo"]], "nltk.parse.projectivedependencyparser.ChartCell": [[172, 3, 1, "", "__init__"], [172, 3, 1, "", "add"]], "nltk.parse.projectivedependencyparser.DependencySpan": [[172, 3, 1, "", "__init__"], [172, 3, 1, "", "head_index"]], "nltk.parse.projectivedependencyparser.ProbabilisticProjectiveDependencyParser": [[172, 3, 1, "", "__init__"], [172, 3, 1, "", "compute_prob"], [172, 3, 1, "", "concatenate"], [172, 3, 1, "", "parse"], [172, 3, 1, "", "train"]], "nltk.parse.projectivedependencyparser.ProjectiveDependencyParser": [[172, 3, 1, "", "__init__"], [172, 3, 1, "", "concatenate"], [172, 3, 1, "", "parse"]], "nltk.parse.recursivedescent": [[173, 2, 1, "", "RecursiveDescentParser"], [173, 2, 1, "", "SteppingRecursiveDescentParser"], [173, 1, 1, "", "demo"]], "nltk.parse.recursivedescent.RecursiveDescentParser": [[173, 3, 1, "", "__init__"], [173, 3, 1, "", "grammar"], [173, 3, 1, "", "parse"], [173, 3, 1, "", "trace"]], "nltk.parse.recursivedescent.SteppingRecursiveDescentParser": [[173, 3, 1, "", "__init__"], [173, 3, 1, "", "backtrack"], [173, 3, 1, "", "currently_complete"], [173, 3, 1, "", "expand"], [173, 3, 1, "", "expandable_productions"], [173, 3, 1, "", "frontier"], [173, 3, 1, "", "initialize"], [173, 3, 1, "", "match"], [173, 3, 1, "", "parse"], [173, 3, 1, "", "parses"], [173, 3, 1, "", "remaining_text"], [173, 3, 1, "", "set_grammar"], [173, 3, 1, "", "step"], [173, 3, 1, "", "tree"], [173, 3, 1, "", "untried_expandable_productions"], [173, 3, 1, "", "untried_match"]], "nltk.parse.shiftreduce": [[174, 2, 1, "", "ShiftReduceParser"], [174, 2, 1, "", "SteppingShiftReduceParser"], [174, 1, 1, "", "demo"]], "nltk.parse.shiftreduce.ShiftReduceParser": [[174, 3, 1, "", "__init__"], [174, 3, 1, "", "grammar"], [174, 3, 1, "", "parse"], [174, 3, 1, "", "trace"]], "nltk.parse.shiftreduce.SteppingShiftReduceParser": [[174, 3, 1, "", "__init__"], [174, 3, 1, "", "initialize"], [174, 3, 1, "", "parse"], [174, 3, 1, "", "parses"], [174, 3, 1, "", "reduce"], [174, 3, 1, "", "reducible_productions"], [174, 3, 1, "", "remaining_text"], [174, 3, 1, "", "set_grammar"], [174, 3, 1, "", "shift"], [174, 3, 1, "", "stack"], [174, 3, 1, "", "step"], [174, 3, 1, "", "undo"]], "nltk.parse.stanford": [[175, 2, 1, "", "GenericStanfordParser"], [175, 2, 1, "", "StanfordDependencyParser"], [175, 2, 1, "", "StanfordNeuralDependencyParser"], [175, 2, 1, "", "StanfordParser"]], "nltk.parse.stanford.GenericStanfordParser": [[175, 3, 1, "", "__init__"], [175, 3, 1, "", "parse_sents"], [175, 3, 1, "", "raw_parse"], [175, 3, 1, "", "raw_parse_sents"], [175, 3, 1, "", "tagged_parse"], [175, 3, 1, "", "tagged_parse_sents"]], "nltk.parse.stanford.StanfordDependencyParser": [[175, 3, 1, "", "__init__"]], "nltk.parse.stanford.StanfordNeuralDependencyParser": [[175, 3, 1, "", "__init__"], [175, 3, 1, "", "tagged_parse_sents"]], "nltk.parse.stanford.StanfordParser": [[175, 3, 1, "", "__init__"]], "nltk.parse.transitionparser": [[176, 2, 1, "", "Configuration"], [176, 2, 1, "", "Transition"], [176, 2, 1, "", "TransitionParser"], [176, 1, 1, "", "demo"]], "nltk.parse.transitionparser.Configuration": [[176, 3, 1, "", "__init__"], [176, 3, 1, "", "extract_features"]], "nltk.parse.transitionparser.Transition": [[176, 4, 1, "", "LEFT_ARC"], [176, 4, 1, "", "REDUCE"], [176, 4, 1, "", "RIGHT_ARC"], [176, 4, 1, "", "SHIFT"], [176, 3, 1, "", "__init__"], [176, 3, 1, "", "left_arc"], [176, 3, 1, "", "reduce"], [176, 3, 1, "", "right_arc"], [176, 3, 1, "", "shift"]], "nltk.parse.transitionparser.TransitionParser": [[176, 4, 1, "", "ARC_EAGER"], [176, 4, 1, "", "ARC_STANDARD"], [176, 3, 1, "", "__init__"], [176, 3, 1, "", "parse"], [176, 3, 1, "", "train"]], "nltk.parse.util": [[177, 2, 1, "", "TestGrammar"], [177, 1, 1, "", "extract_test_sentences"], [177, 1, 1, "", "load_parser"], [177, 1, 1, "", "taggedsent_to_conll"], [177, 1, 1, "", "taggedsents_to_conll"]], "nltk.parse.util.TestGrammar": [[177, 3, 1, "", "__init__"], [177, 3, 1, "", "run"]], "nltk.parse.viterbi": [[178, 2, 1, "", "ViterbiParser"], [178, 1, 1, "", "demo"]], "nltk.parse.viterbi.ViterbiParser": [[178, 3, 1, "", "__init__"], [178, 3, 1, "", "grammar"], [178, 3, 1, "", "parse"], [178, 3, 1, "", "trace"]], "nltk.probability": [[179, 2, 1, "", "ConditionalFreqDist"], [179, 2, 1, "", "ConditionalProbDist"], [179, 2, 1, "", "ConditionalProbDistI"], [179, 2, 1, "", "CrossValidationProbDist"], [179, 2, 1, "", "DictionaryConditionalProbDist"], [179, 2, 1, "", "DictionaryProbDist"], [179, 2, 1, "", "ELEProbDist"], [179, 2, 1, "", "FreqDist"], [179, 2, 1, "", "HeldoutProbDist"], [179, 2, 1, "", "ImmutableProbabilisticMixIn"], [179, 2, 1, "", "KneserNeyProbDist"], [179, 2, 1, "", "LaplaceProbDist"], [179, 2, 1, "", "LidstoneProbDist"], [179, 2, 1, "", "MLEProbDist"], [179, 2, 1, "", "MutableProbDist"], [179, 2, 1, "", "ProbDistI"], [179, 2, 1, "", "ProbabilisticMixIn"], [179, 2, 1, "", "SimpleGoodTuringProbDist"], [179, 2, 1, "", "UniformProbDist"], [179, 2, 1, "", "WittenBellProbDist"], [179, 1, 1, "", "add_logs"], [179, 1, 1, "", "entropy"], [179, 1, 1, "", "log_likelihood"], [179, 1, 1, "", "sum_logs"]], "nltk.probability.ConditionalFreqDist": [[179, 3, 1, "", "N"], [179, 3, 1, "", "__init__"], [179, 3, 1, "", "conditions"], [179, 3, 1, "", "copy"], [179, 3, 1, "", "deepcopy"], [179, 3, 1, "", "plot"], [179, 3, 1, "", "tabulate"]], "nltk.probability.ConditionalProbDist": [[179, 3, 1, "", "__init__"]], "nltk.probability.ConditionalProbDistI": [[179, 3, 1, "", "__init__"], [179, 3, 1, "", "conditions"]], "nltk.probability.CrossValidationProbDist": [[179, 4, 1, "", "SUM_TO_ONE"], [179, 3, 1, "", "__init__"], [179, 3, 1, "", "discount"], [179, 3, 1, "", "freqdists"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "samples"]], "nltk.probability.DictionaryConditionalProbDist": [[179, 3, 1, "", "__init__"]], "nltk.probability.DictionaryProbDist": [[179, 3, 1, "", "__init__"], [179, 3, 1, "", "logprob"], [179, 3, 1, "", "max"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "samples"]], "nltk.probability.ELEProbDist": [[179, 3, 1, "", "__init__"]], "nltk.probability.FreqDist": [[179, 3, 1, "", "B"], [179, 3, 1, "", "N"], [179, 3, 1, "", "Nr"], [179, 3, 1, "", "__init__"], [179, 3, 1, "", "copy"], [179, 3, 1, "", "freq"], [179, 3, 1, "", "hapaxes"], [179, 3, 1, "", "max"], [179, 3, 1, "", "pformat"], [179, 3, 1, "", "plot"], [179, 3, 1, "", "pprint"], [179, 3, 1, "", "r_Nr"], [179, 3, 1, "", "setdefault"], [179, 3, 1, "", "tabulate"], [179, 3, 1, "", "update"]], "nltk.probability.HeldoutProbDist": [[179, 4, 1, "", "SUM_TO_ONE"], [179, 3, 1, "", "__init__"], [179, 3, 1, "", "base_fdist"], [179, 3, 1, "", "discount"], [179, 3, 1, "", "heldout_fdist"], [179, 3, 1, "", "max"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "samples"]], "nltk.probability.ImmutableProbabilisticMixIn": [[179, 3, 1, "", "set_logprob"], [179, 3, 1, "", "set_prob"]], "nltk.probability.KneserNeyProbDist": [[179, 3, 1, "", "__init__"], [179, 3, 1, "", "discount"], [179, 3, 1, "", "max"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "samples"], [179, 3, 1, "", "set_discount"]], "nltk.probability.LaplaceProbDist": [[179, 3, 1, "", "__init__"]], "nltk.probability.LidstoneProbDist": [[179, 4, 1, "", "SUM_TO_ONE"], [179, 3, 1, "", "__init__"], [179, 3, 1, "", "discount"], [179, 3, 1, "", "freqdist"], [179, 3, 1, "", "max"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "samples"]], "nltk.probability.MLEProbDist": [[179, 3, 1, "", "__init__"], [179, 3, 1, "", "freqdist"], [179, 3, 1, "", "max"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "samples"]], "nltk.probability.MutableProbDist": [[179, 3, 1, "", "__init__"], [179, 3, 1, "", "logprob"], [179, 3, 1, "", "max"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "samples"], [179, 3, 1, "", "update"]], "nltk.probability.ProbDistI": [[179, 4, 1, "", "SUM_TO_ONE"], [179, 3, 1, "", "__init__"], [179, 3, 1, "", "discount"], [179, 3, 1, "", "generate"], [179, 3, 1, "", "logprob"], [179, 3, 1, "", "max"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "samples"]], "nltk.probability.ProbabilisticMixIn": [[179, 3, 1, "", "__init__"], [179, 3, 1, "", "logprob"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "set_logprob"], [179, 3, 1, "", "set_prob"]], "nltk.probability.SimpleGoodTuringProbDist": [[179, 4, 1, "", "SUM_TO_ONE"], [179, 3, 1, "", "__init__"], [179, 3, 1, "", "check"], [179, 3, 1, "", "discount"], [179, 3, 1, "", "find_best_fit"], [179, 3, 1, "", "freqdist"], [179, 3, 1, "", "max"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "samples"], [179, 3, 1, "", "smoothedNr"]], "nltk.probability.UniformProbDist": [[179, 3, 1, "", "__init__"], [179, 3, 1, "", "max"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "samples"]], "nltk.probability.WittenBellProbDist": [[179, 3, 1, "", "__init__"], [179, 3, 1, "", "discount"], [179, 3, 1, "", "freqdist"], [179, 3, 1, "", "max"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "samples"]], "nltk.sem": [[181, 0, 0, "-", "boxer"], [182, 0, 0, "-", "chat80"], [183, 0, 0, "-", "cooper_storage"], [184, 0, 0, "-", "drt"], [185, 0, 0, "-", "drt_glue_demo"], [186, 0, 0, "-", "evaluate"], [187, 0, 0, "-", "glue"], [188, 0, 0, "-", "hole"], [189, 0, 0, "-", "lfg"], [190, 0, 0, "-", "linearlogic"], [191, 0, 0, "-", "logic"], [192, 0, 0, "-", "relextract"], [193, 0, 0, "-", "skolemize"], [194, 0, 0, "-", "util"]], "nltk.sem.boxer": [[181, 2, 1, "", "AbstractBoxerDrs"], [181, 2, 1, "", "Boxer"], [181, 2, 1, "", "BoxerCard"], [181, 2, 1, "", "BoxerDrs"], [181, 2, 1, "", "BoxerDrsParser"], [181, 2, 1, "", "BoxerEq"], [181, 2, 1, "", "BoxerIndexed"], [181, 2, 1, "", "BoxerNamed"], [181, 2, 1, "", "BoxerNot"], [181, 2, 1, "", "BoxerOr"], [181, 2, 1, "", "BoxerOutputDrsParser"], [181, 2, 1, "", "BoxerPred"], [181, 2, 1, "", "BoxerProp"], [181, 2, 1, "", "BoxerRel"], [181, 2, 1, "", "BoxerWhq"], [181, 2, 1, "", "NltkDrtBoxerDrsInterpreter"], [181, 2, 1, "", "PassthroughBoxerDrsInterpreter"], [181, 6, 1, "", "UnparseableInputException"]], "nltk.sem.boxer.AbstractBoxerDrs": [[181, 3, 1, "", "atoms"], [181, 3, 1, "", "clean"], [181, 3, 1, "", "renumber_sentences"], [181, 3, 1, "", "variable_types"], [181, 3, 1, "", "variables"]], "nltk.sem.boxer.Boxer": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "interpret"], [181, 3, 1, "", "interpret_multi"], [181, 3, 1, "", "interpret_multi_sents"], [181, 3, 1, "", "interpret_sents"], [181, 3, 1, "", "set_bin_dir"]], "nltk.sem.boxer.BoxerCard": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "renumber_sentences"]], "nltk.sem.boxer.BoxerDrs": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "atoms"], [181, 3, 1, "", "clean"], [181, 3, 1, "", "renumber_sentences"]], "nltk.sem.boxer.BoxerDrsParser": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "attempt_adjuncts"], [181, 3, 1, "", "get_all_symbols"], [181, 3, 1, "", "get_next_token_variable"], [181, 3, 1, "", "handle"], [181, 3, 1, "", "nullableIntToken"]], "nltk.sem.boxer.BoxerEq": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "atoms"], [181, 3, 1, "", "renumber_sentences"]], "nltk.sem.boxer.BoxerIndexed": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "atoms"]], "nltk.sem.boxer.BoxerNamed": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "change_var"], [181, 3, 1, "", "clean"], [181, 3, 1, "", "renumber_sentences"]], "nltk.sem.boxer.BoxerNot": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "atoms"], [181, 3, 1, "", "clean"], [181, 3, 1, "", "renumber_sentences"]], "nltk.sem.boxer.BoxerOr": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "atoms"], [181, 3, 1, "", "clean"], [181, 3, 1, "", "renumber_sentences"]], "nltk.sem.boxer.BoxerOutputDrsParser": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "attempt_adjuncts"], [181, 3, 1, "", "get_all_symbols"], [181, 3, 1, "", "handle"], [181, 3, 1, "", "handle_condition"], [181, 3, 1, "", "handle_drs"], [181, 3, 1, "", "parse"], [181, 3, 1, "", "parse_condition"], [181, 3, 1, "", "parse_drs"], [181, 3, 1, "", "parse_index"], [181, 3, 1, "", "parse_variable"]], "nltk.sem.boxer.BoxerPred": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "change_var"], [181, 3, 1, "", "clean"], [181, 3, 1, "", "renumber_sentences"]], "nltk.sem.boxer.BoxerProp": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "atoms"], [181, 3, 1, "", "clean"], [181, 3, 1, "", "referenced_labels"], [181, 3, 1, "", "renumber_sentences"]], "nltk.sem.boxer.BoxerRel": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "clean"], [181, 3, 1, "", "renumber_sentences"]], "nltk.sem.boxer.BoxerWhq": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "atoms"], [181, 3, 1, "", "clean"], [181, 3, 1, "", "renumber_sentences"]], "nltk.sem.boxer.NltkDrtBoxerDrsInterpreter": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "interpret"]], "nltk.sem.boxer.PassthroughBoxerDrsInterpreter": [[181, 3, 1, "", "interpret"]], "nltk.sem.chat80": [[182, 2, 1, "", "Concept"], [182, 1, 1, "", "binary_concept"], [182, 1, 1, "", "cities2table"], [182, 1, 1, "", "clause2concepts"], [182, 1, 1, "", "concepts"], [182, 1, 1, "", "label_indivs"], [182, 1, 1, "", "main"], [182, 1, 1, "", "make_lex"], [182, 1, 1, "", "make_valuation"], [182, 1, 1, "", "process_bundle"], [182, 1, 1, "", "sql_demo"], [182, 1, 1, "", "sql_query"], [182, 1, 1, "", "unary_concept"], [182, 1, 1, "", "val_dump"], [182, 1, 1, "", "val_load"]], "nltk.sem.chat80.Concept": [[182, 3, 1, "", "__init__"], [182, 3, 1, "", "augment"], [182, 3, 1, "", "close"]], "nltk.sem.cooper_storage": [[183, 2, 1, "", "CooperStore"], [183, 1, 1, "", "demo"], [183, 1, 1, "", "parse_with_bindops"]], "nltk.sem.cooper_storage.CooperStore": [[183, 3, 1, "", "__init__"], [183, 3, 1, "", "s_retrieve"]], "nltk.sem.drt": [[184, 6, 1, "", "AnaphoraResolutionException"], [184, 2, 1, "", "DRS"], [184, 2, 1, "", "DrsDrawer"], [184, 2, 1, "", "DrtAbstractVariableExpression"], [184, 2, 1, "", "DrtApplicationExpression"], [184, 2, 1, "", "DrtBinaryExpression"], [184, 2, 1, "", "DrtBooleanExpression"], [184, 2, 1, "", "DrtConcatenation"], [184, 2, 1, "", "DrtConstantExpression"], [184, 2, 1, "", "DrtEqualityExpression"], [184, 2, 1, "", "DrtEventVariableExpression"], [184, 2, 1, "", "DrtExpression"], [184, 2, 1, "", "DrtFunctionVariableExpression"], [184, 2, 1, "", "DrtIndividualVariableExpression"], [184, 2, 1, "", "DrtLambdaExpression"], [184, 2, 1, "", "DrtNegatedExpression"], [184, 2, 1, "", "DrtOrExpression"], [184, 2, 1, "", "DrtParser"], [184, 2, 1, "", "DrtProposition"], [184, 2, 1, "", "DrtTokens"], [184, 1, 1, "", "DrtVariableExpression"], [184, 2, 1, "", "PossibleAntecedents"], [184, 1, 1, "", "demo"], [184, 1, 1, "", "resolve_anaphora"], [184, 1, 1, "", "test_draw"]], "nltk.sem.drt.DRS": [[184, 3, 1, "", "__init__"], [184, 3, 1, "", "eliminate_equality"], [184, 3, 1, "", "fol"], [184, 3, 1, "", "free"], [184, 3, 1, "", "get_refs"], [184, 3, 1, "", "replace"], [184, 3, 1, "", "visit"], [184, 3, 1, "", "visit_structured"]], "nltk.sem.drt.DrsDrawer": [[184, 4, 1, "", "BUFFER"], [184, 4, 1, "", "OUTERSPACE"], [184, 4, 1, "", "TOPSPACE"], [184, 3, 1, "", "__init__"], [184, 3, 1, "", "draw"]], "nltk.sem.drt.DrtAbstractVariableExpression": [[184, 3, 1, "", "eliminate_equality"], [184, 3, 1, "", "fol"], [184, 3, 1, "", "get_refs"]], "nltk.sem.drt.DrtApplicationExpression": [[184, 3, 1, "", "fol"], [184, 3, 1, "", "get_refs"]], "nltk.sem.drt.DrtBinaryExpression": [[184, 3, 1, "", "get_refs"]], "nltk.sem.drt.DrtConcatenation": [[184, 3, 1, "", "__init__"], [184, 3, 1, "", "eliminate_equality"], [184, 3, 1, "", "fol"], [184, 3, 1, "", "getOp"], [184, 3, 1, "", "get_refs"], [184, 3, 1, "", "replace"], [184, 3, 1, "", "simplify"], [184, 3, 1, "", "visit"]], "nltk.sem.drt.DrtEqualityExpression": [[184, 3, 1, "", "fol"]], "nltk.sem.drt.DrtExpression": [[184, 3, 1, "", "applyto"], [184, 3, 1, "", "draw"], [184, 3, 1, "", "eliminate_equality"], [184, 3, 1, "", "equiv"], [184, 3, 1, "", "fromstring"], [184, 3, 1, "", "get_refs"], [184, 3, 1, "", "is_pronoun_function"], [184, 3, 1, "", "make_EqualityExpression"], [184, 3, 1, "", "make_VariableExpression"], [184, 3, 1, "", "pretty_format"], [184, 3, 1, "", "pretty_print"], [184, 3, 1, "", "resolve_anaphora"], [184, 5, 1, "", "type"], [184, 3, 1, "", "typecheck"]], "nltk.sem.drt.DrtLambdaExpression": [[184, 3, 1, "", "alpha_convert"], [184, 3, 1, "", "fol"], [184, 3, 1, "", "get_refs"]], "nltk.sem.drt.DrtNegatedExpression": [[184, 3, 1, "", "fol"], [184, 3, 1, "", "get_refs"]], "nltk.sem.drt.DrtOrExpression": [[184, 3, 1, "", "fol"]], "nltk.sem.drt.DrtParser": [[184, 3, 1, "", "__init__"], [184, 3, 1, "", "get_BooleanExpression_factory"], [184, 3, 1, "", "get_all_symbols"], [184, 3, 1, "", "handle"], [184, 3, 1, "", "handle_DRS"], [184, 3, 1, "", "handle_conds"], [184, 3, 1, "", "handle_prop"], [184, 3, 1, "", "handle_refs"], [184, 3, 1, "", "isvariable"], [184, 3, 1, "", "make_ApplicationExpression"], [184, 3, 1, "", "make_BooleanExpression"], [184, 3, 1, "", "make_EqualityExpression"], [184, 3, 1, "", "make_LambdaExpression"], [184, 3, 1, "", "make_NegatedExpression"], [184, 3, 1, "", "make_VariableExpression"]], "nltk.sem.drt.DrtProposition": [[184, 3, 1, "", "__init__"], [184, 3, 1, "", "eliminate_equality"], [184, 3, 1, "", "fol"], [184, 3, 1, "", "get_refs"], [184, 3, 1, "", "replace"], [184, 3, 1, "", "visit"], [184, 3, 1, "", "visit_structured"]], "nltk.sem.drt.DrtTokens": [[184, 4, 1, "", "CLOSE_BRACKET"], [184, 4, 1, "", "COLON"], [184, 4, 1, "", "DRS"], [184, 4, 1, "", "DRS_CONC"], [184, 4, 1, "", "OPEN_BRACKET"], [184, 4, 1, "", "PRONOUN"], [184, 4, 1, "", "PUNCT"], [184, 4, 1, "", "SYMBOLS"], [184, 4, 1, "", "TOKENS"]], "nltk.sem.drt.PossibleAntecedents": [[184, 3, 1, "", "free"], [184, 3, 1, "", "replace"]], "nltk.sem.drt_glue_demo": [[185, 2, 1, "", "DrsWidget"], [185, 2, 1, "", "DrtGlueDemo"], [185, 1, 1, "", "demo"]], "nltk.sem.drt_glue_demo.DrsWidget": [[185, 3, 1, "", "__init__"], [185, 3, 1, "", "clear"], [185, 3, 1, "", "draw"]], "nltk.sem.drt_glue_demo.DrtGlueDemo": [[185, 3, 1, "", "__init__"], [185, 3, 1, "", "about"], [185, 3, 1, "", "destroy"], [185, 3, 1, "", "mainloop"], [185, 3, 1, "", "next"], [185, 3, 1, "", "postscript"], [185, 3, 1, "", "prev"], [185, 3, 1, "", "resize"]], "nltk.sem.evaluate": [[186, 2, 1, "", "Assignment"], [186, 6, 1, "", "Error"], [186, 2, 1, "", "Model"], [186, 6, 1, "", "Undefined"], [186, 2, 1, "", "Valuation"], [186, 1, 1, "", "arity"], [186, 1, 1, "", "demo"], [186, 1, 1, "", "foldemo"], [186, 1, 1, "", "folmodel"], [186, 1, 1, "", "is_rel"], [186, 1, 1, "", "propdemo"], [186, 1, 1, "", "read_valuation"], [186, 1, 1, "", "satdemo"], [186, 1, 1, "", "set2rel"], [186, 1, 1, "", "trace"]], "nltk.sem.evaluate.Assignment": [[186, 3, 1, "", "__init__"], [186, 3, 1, "", "add"], [186, 3, 1, "", "copy"], [186, 3, 1, "", "purge"]], "nltk.sem.evaluate.Model": [[186, 3, 1, "", "__init__"], [186, 3, 1, "", "evaluate"], [186, 3, 1, "", "i"], [186, 3, 1, "", "satisfiers"], [186, 3, 1, "", "satisfy"]], "nltk.sem.evaluate.Valuation": [[186, 3, 1, "", "__init__"], [186, 5, 1, "", "domain"], [186, 3, 1, "", "fromstring"], [186, 5, 1, "", "symbols"]], "nltk.sem.glue": [[187, 2, 1, "", "DrtGlue"], [187, 2, 1, "", "DrtGlueDict"], [187, 2, 1, "", "DrtGlueFormula"], [187, 2, 1, "", "Glue"], [187, 2, 1, "", "GlueDict"], [187, 2, 1, "", "GlueFormula"], [187, 1, 1, "", "demo"]], "nltk.sem.glue.DrtGlue": [[187, 3, 1, "", "__init__"], [187, 3, 1, "", "get_glue_dict"]], "nltk.sem.glue.DrtGlueDict": [[187, 3, 1, "", "get_GlueFormula_factory"]], "nltk.sem.glue.DrtGlueFormula": [[187, 3, 1, "", "__init__"], [187, 3, 1, "", "make_LambdaExpression"], [187, 3, 1, "", "make_VariableExpression"]], "nltk.sem.glue.Glue": [[187, 3, 1, "", "__init__"], [187, 3, 1, "", "dep_parse"], [187, 3, 1, "", "depgraph_to_glue"], [187, 3, 1, "", "get_glue_dict"], [187, 3, 1, "", "get_pos_tagger"], [187, 3, 1, "", "get_readings"], [187, 3, 1, "", "gfl_to_compiled"], [187, 3, 1, "", "parse_to_compiled"], [187, 3, 1, "", "parse_to_meaning"], [187, 3, 1, "", "train_depparser"]], "nltk.sem.glue.GlueDict": [[187, 3, 1, "", "__init__"], [187, 3, 1, "", "add_missing_dependencies"], [187, 3, 1, "", "find_label_name"], [187, 3, 1, "", "get_GlueFormula_factory"], [187, 3, 1, "", "get_glueformulas_from_semtype_entry"], [187, 3, 1, "", "get_label"], [187, 3, 1, "", "get_meaning_formula"], [187, 3, 1, "", "get_semtypes"], [187, 3, 1, "", "initialize_labels"], [187, 3, 1, "", "lookup"], [187, 3, 1, "", "lookup_unique"], [187, 3, 1, "", "read_file"], [187, 3, 1, "", "to_glueformula_list"]], "nltk.sem.glue.GlueFormula": [[187, 3, 1, "", "__init__"], [187, 3, 1, "", "applyto"], [187, 3, 1, "", "compile"], [187, 3, 1, "", "lambda_abstract"], [187, 3, 1, "", "make_LambdaExpression"], [187, 3, 1, "", "make_VariableExpression"], [187, 3, 1, "", "simplify"]], "nltk.sem.hole": [[188, 2, 1, "", "Constants"], [188, 2, 1, "", "Constraint"], [188, 2, 1, "", "HoleSemantics"], [188, 1, 1, "", "hole_readings"]], "nltk.sem.hole.Constants": [[188, 4, 1, "", "ALL"], [188, 4, 1, "", "AND"], [188, 4, 1, "", "EXISTS"], [188, 4, 1, "", "HOLE"], [188, 4, 1, "", "IFF"], [188, 4, 1, "", "IMP"], [188, 4, 1, "", "LABEL"], [188, 4, 1, "", "LEQ"], [188, 4, 1, "", "MAP"], [188, 4, 1, "", "NOT"], [188, 4, 1, "", "OR"], [188, 4, 1, "", "PRED"]], "nltk.sem.hole.Constraint": [[188, 3, 1, "", "__init__"]], "nltk.sem.hole.HoleSemantics": [[188, 3, 1, "", "__init__"], [188, 3, 1, "", "formula_tree"], [188, 3, 1, "", "is_node"], [188, 3, 1, "", "pluggings"]], "nltk.sem.lfg": [[189, 2, 1, "", "FStructure"], [189, 1, 1, "", "demo_read_depgraph"]], "nltk.sem.lfg.FStructure": [[189, 3, 1, "", "pretty_format"], [189, 3, 1, "", "read_depgraph"], [189, 3, 1, "", "safeappend"], [189, 3, 1, "", "to_depgraph"], [189, 3, 1, "", "to_glueformula_list"]], "nltk.sem.linearlogic": [[190, 2, 1, "", "ApplicationExpression"], [190, 2, 1, "", "AtomicExpression"], [190, 2, 1, "", "BindingDict"], [190, 2, 1, "", "ConstantExpression"], [190, 2, 1, "", "Expression"], [190, 2, 1, "", "ImpExpression"], [190, 6, 1, "", "LinearLogicApplicationException"], [190, 2, 1, "", "LinearLogicParser"], [190, 2, 1, "", "Tokens"], [190, 6, 1, "", "UnificationException"], [190, 6, 1, "", "VariableBindingException"], [190, 2, 1, "", "VariableExpression"], [190, 1, 1, "", "demo"]], "nltk.sem.linearlogic.ApplicationExpression": [[190, 3, 1, "", "__init__"], [190, 3, 1, "", "simplify"]], "nltk.sem.linearlogic.AtomicExpression": [[190, 3, 1, "", "__init__"], [190, 3, 1, "", "compile_neg"], [190, 3, 1, "", "compile_pos"], [190, 3, 1, "", "initialize_labels"], [190, 3, 1, "", "simplify"]], "nltk.sem.linearlogic.BindingDict": [[190, 3, 1, "", "__init__"]], "nltk.sem.linearlogic.ConstantExpression": [[190, 3, 1, "", "unify"]], "nltk.sem.linearlogic.Expression": [[190, 3, 1, "", "applyto"], [190, 3, 1, "", "fromstring"]], "nltk.sem.linearlogic.ImpExpression": [[190, 3, 1, "", "__init__"], [190, 3, 1, "", "compile_neg"], [190, 3, 1, "", "compile_pos"], [190, 3, 1, "", "initialize_labels"], [190, 3, 1, "", "simplify"], [190, 3, 1, "", "unify"]], "nltk.sem.linearlogic.LinearLogicParser": [[190, 3, 1, "", "__init__"], [190, 3, 1, "", "attempt_ApplicationExpression"], [190, 3, 1, "", "get_BooleanExpression_factory"], [190, 3, 1, "", "get_all_symbols"], [190, 3, 1, "", "handle"], [190, 3, 1, "", "make_BooleanExpression"], [190, 3, 1, "", "make_VariableExpression"]], "nltk.sem.linearlogic.Tokens": [[190, 4, 1, "", "CLOSE"], [190, 4, 1, "", "IMP"], [190, 4, 1, "", "OPEN"], [190, 4, 1, "", "PUNCT"], [190, 4, 1, "", "TOKENS"]], "nltk.sem.linearlogic.UnificationException": [[190, 3, 1, "", "__init__"]], "nltk.sem.linearlogic.VariableExpression": [[190, 3, 1, "", "unify"]], "nltk.sem.logic": [[191, 2, 1, "", "AbstractVariableExpression"], [191, 2, 1, "", "AllExpression"], [191, 2, 1, "", "AndExpression"], [191, 2, 1, "", "AnyType"], [191, 2, 1, "", "ApplicationExpression"], [191, 2, 1, "", "BasicType"], [191, 2, 1, "", "BinaryExpression"], [191, 2, 1, "", "BooleanExpression"], [191, 2, 1, "", "ComplexType"], [191, 2, 1, "", "ConstantExpression"], [191, 2, 1, "", "EntityType"], [191, 2, 1, "", "EqualityExpression"], [191, 2, 1, "", "EventType"], [191, 2, 1, "", "EventVariableExpression"], [191, 2, 1, "", "ExistsExpression"], [191, 6, 1, "", "ExpectedMoreTokensException"], [191, 2, 1, "", "Expression"], [191, 2, 1, "", "FunctionVariableExpression"], [191, 2, 1, "", "IffExpression"], [191, 6, 1, "", "IllegalTypeException"], [191, 2, 1, "", "ImpExpression"], [191, 6, 1, "", "InconsistentTypeHierarchyException"], [191, 2, 1, "", "IndividualVariableExpression"], [191, 2, 1, "", "IotaExpression"], [191, 2, 1, "", "LambdaExpression"], [191, 2, 1, "", "LogicParser"], [191, 6, 1, "", "LogicalExpressionException"], [191, 2, 1, "", "NegatedExpression"], [191, 2, 1, "", "OrExpression"], [191, 2, 1, "", "QuantifiedExpression"], [191, 2, 1, "", "SubstituteBindingsI"], [191, 2, 1, "", "Tokens"], [191, 2, 1, "", "TruthValueType"], [191, 2, 1, "", "Type"], [191, 6, 1, "", "TypeException"], [191, 6, 1, "", "TypeResolutionException"], [191, 6, 1, "", "UnexpectedTokenException"], [191, 2, 1, "", "Variable"], [191, 2, 1, "", "VariableBinderExpression"], [191, 1, 1, "", "VariableExpression"], [191, 1, 1, "", "binding_ops"], [191, 1, 1, "", "boolean_ops"], [191, 1, 1, "", "demo"], [191, 1, 1, "", "demoException"], [191, 1, 1, "", "demo_errors"], [191, 1, 1, "", "equality_preds"], [191, 1, 1, "", "is_eventvar"], [191, 1, 1, "", "is_funcvar"], [191, 1, 1, "", "is_indvar"], [191, 1, 1, "", "printtype"], [191, 1, 1, "", "read_logic"], [191, 1, 1, "", "read_type"], [191, 1, 1, "", "skolem_function"], [191, 1, 1, "", "typecheck"], [191, 1, 1, "", "unique_variable"]], "nltk.sem.logic.AbstractVariableExpression": [[191, 3, 1, "", "__init__"], [191, 3, 1, "", "findtype"], [191, 3, 1, "", "predicates"], [191, 3, 1, "", "replace"], [191, 3, 1, "", "simplify"]], "nltk.sem.logic.AllExpression": [[191, 3, 1, "", "getQuantifier"]], "nltk.sem.logic.AndExpression": [[191, 3, 1, "", "getOp"]], "nltk.sem.logic.AnyType": [[191, 3, 1, "", "__init__"], [191, 5, 1, "", "first"], [191, 3, 1, "", "matches"], [191, 3, 1, "", "resolve"], [191, 5, 1, "", "second"], [191, 3, 1, "", "str"]], "nltk.sem.logic.ApplicationExpression": [[191, 3, 1, "", "__init__"], [191, 5, 1, "", "args"], [191, 3, 1, "", "constants"], [191, 3, 1, "", "findtype"], [191, 3, 1, "", "is_atom"], [191, 5, 1, "", "pred"], [191, 3, 1, "", "predicates"], [191, 3, 1, "", "simplify"], [191, 5, 1, "", "type"], [191, 3, 1, "", "uncurry"], [191, 3, 1, "", "visit"]], "nltk.sem.logic.BasicType": [[191, 3, 1, "", "matches"], [191, 3, 1, "", "resolve"]], "nltk.sem.logic.BinaryExpression": [[191, 3, 1, "", "__init__"], [191, 3, 1, "", "findtype"], [191, 5, 1, "", "type"], [191, 3, 1, "", "visit"]], "nltk.sem.logic.ComplexType": [[191, 3, 1, "", "__init__"], [191, 3, 1, "", "matches"], [191, 3, 1, "", "resolve"], [191, 3, 1, "", "str"]], "nltk.sem.logic.ConstantExpression": [[191, 3, 1, "", "constants"], [191, 3, 1, "", "free"], [191, 4, 1, "", "type"]], "nltk.sem.logic.EntityType": [[191, 3, 1, "", "str"]], "nltk.sem.logic.EqualityExpression": [[191, 3, 1, "", "getOp"]], "nltk.sem.logic.EventType": [[191, 3, 1, "", "str"]], "nltk.sem.logic.EventVariableExpression": [[191, 4, 1, "", "type"]], "nltk.sem.logic.ExistsExpression": [[191, 3, 1, "", "getQuantifier"]], "nltk.sem.logic.ExpectedMoreTokensException": [[191, 3, 1, "", "__init__"]], "nltk.sem.logic.Expression": [[191, 3, 1, "", "applyto"], [191, 3, 1, "", "constants"], [191, 3, 1, "", "equiv"], [191, 3, 1, "", "findtype"], [191, 3, 1, "", "free"], [191, 3, 1, "", "fromstring"], [191, 3, 1, "", "make_VariableExpression"], [191, 3, 1, "", "negate"], [191, 3, 1, "", "normalize"], [191, 3, 1, "", "predicates"], [191, 3, 1, "", "replace"], [191, 3, 1, "", "simplify"], [191, 3, 1, "", "substitute_bindings"], [191, 3, 1, "", "typecheck"], [191, 3, 1, "", "variables"], [191, 3, 1, "", "visit"], [191, 3, 1, "", "visit_structured"]], "nltk.sem.logic.FunctionVariableExpression": [[191, 3, 1, "", "constants"], [191, 3, 1, "", "free"], [191, 4, 1, "", "type"]], "nltk.sem.logic.IffExpression": [[191, 3, 1, "", "getOp"]], "nltk.sem.logic.IllegalTypeException": [[191, 3, 1, "", "__init__"]], "nltk.sem.logic.ImpExpression": [[191, 3, 1, "", "getOp"]], "nltk.sem.logic.InconsistentTypeHierarchyException": [[191, 3, 1, "", "__init__"]], "nltk.sem.logic.IndividualVariableExpression": [[191, 3, 1, "", "constants"], [191, 3, 1, "", "free"], [191, 5, 1, "", "type"]], "nltk.sem.logic.IotaExpression": [[191, 3, 1, "", "getQuantifier"]], "nltk.sem.logic.LambdaExpression": [[191, 5, 1, "", "type"]], "nltk.sem.logic.LogicParser": [[191, 3, 1, "", "__init__"], [191, 3, 1, "", "assertNextToken"], [191, 3, 1, "", "assertToken"], [191, 3, 1, "", "attempt_ApplicationExpression"], [191, 3, 1, "", "attempt_BooleanExpression"], [191, 3, 1, "", "attempt_EqualityExpression"], [191, 3, 1, "", "attempt_adjuncts"], [191, 3, 1, "", "get_BooleanExpression_factory"], [191, 3, 1, "", "get_QuantifiedExpression_factory"], [191, 3, 1, "", "get_all_symbols"], [191, 3, 1, "", "get_next_token_variable"], [191, 3, 1, "", "handle"], [191, 3, 1, "", "handle_lambda"], [191, 3, 1, "", "handle_negation"], [191, 3, 1, "", "handle_open"], [191, 3, 1, "", "handle_quant"], [191, 3, 1, "", "handle_variable"], [191, 3, 1, "", "has_priority"], [191, 3, 1, "", "inRange"], [191, 3, 1, "", "isvariable"], [191, 3, 1, "", "make_ApplicationExpression"], [191, 3, 1, "", "make_BooleanExpression"], [191, 3, 1, "", "make_EqualityExpression"], [191, 3, 1, "", "make_LambdaExpression"], [191, 3, 1, "", "make_NegatedExpression"], [191, 3, 1, "", "make_QuanifiedExpression"], [191, 3, 1, "", "make_VariableExpression"], [191, 3, 1, "", "parse"], [191, 3, 1, "", "process"], [191, 3, 1, "", "process_next_expression"], [191, 3, 1, "", "process_quoted_token"], [191, 3, 1, "", "token"], [191, 4, 1, "", "type_check"]], "nltk.sem.logic.LogicalExpressionException": [[191, 3, 1, "", "__init__"]], "nltk.sem.logic.NegatedExpression": [[191, 3, 1, "", "__init__"], [191, 3, 1, "", "findtype"], [191, 3, 1, "", "negate"], [191, 5, 1, "", "type"], [191, 3, 1, "", "visit"]], "nltk.sem.logic.OrExpression": [[191, 3, 1, "", "getOp"]], "nltk.sem.logic.QuantifiedExpression": [[191, 5, 1, "", "type"]], "nltk.sem.logic.SubstituteBindingsI": [[191, 3, 1, "", "substitute_bindings"], [191, 3, 1, "", "variables"]], "nltk.sem.logic.Tokens": [[191, 4, 1, "", "ALL"], [191, 4, 1, "", "ALL_LIST"], [191, 4, 1, "", "AND"], [191, 4, 1, "", "AND_LIST"], [191, 4, 1, "", "BINOPS"], [191, 4, 1, "", "CLOSE"], [191, 4, 1, "", "COMMA"], [191, 4, 1, "", "DOT"], [191, 4, 1, "", "EQ"], [191, 4, 1, "", "EQ_LIST"], [191, 4, 1, "", "EXISTS"], [191, 4, 1, "", "EXISTS_LIST"], [191, 4, 1, "", "IFF"], [191, 4, 1, "", "IFF_LIST"], [191, 4, 1, "", "IMP"], [191, 4, 1, "", "IMP_LIST"], [191, 4, 1, "", "IOTA"], [191, 4, 1, "", "IOTA_LIST"], [191, 4, 1, "", "LAMBDA"], [191, 4, 1, "", "LAMBDA_LIST"], [191, 4, 1, "", "NEQ"], [191, 4, 1, "", "NEQ_LIST"], [191, 4, 1, "", "NOT"], [191, 4, 1, "", "NOT_LIST"], [191, 4, 1, "", "OPEN"], [191, 4, 1, "", "OR"], [191, 4, 1, "", "OR_LIST"], [191, 4, 1, "", "PUNCT"], [191, 4, 1, "", "QUANTS"], [191, 4, 1, "", "SYMBOLS"], [191, 4, 1, "", "TOKENS"]], "nltk.sem.logic.TruthValueType": [[191, 3, 1, "", "str"]], "nltk.sem.logic.Type": [[191, 3, 1, "", "fromstring"]], "nltk.sem.logic.TypeException": [[191, 3, 1, "", "__init__"]], "nltk.sem.logic.TypeResolutionException": [[191, 3, 1, "", "__init__"]], "nltk.sem.logic.UnexpectedTokenException": [[191, 3, 1, "", "__init__"]], "nltk.sem.logic.Variable": [[191, 3, 1, "", "__init__"], [191, 3, 1, "", "substitute_bindings"]], "nltk.sem.logic.VariableBinderExpression": [[191, 3, 1, "", "__init__"], [191, 3, 1, "", "alpha_convert"], [191, 3, 1, "", "findtype"], [191, 3, 1, "", "free"], [191, 3, 1, "", "replace"], [191, 3, 1, "", "visit"], [191, 3, 1, "", "visit_structured"]], "nltk.sem.relextract": [[192, 1, 1, "", "class_abbrev"], [192, 1, 1, "", "clause"], [192, 1, 1, "", "conllesp"], [192, 1, 1, "", "conllned"], [192, 1, 1, "", "descape_entity"], [192, 1, 1, "", "extract_rels"], [192, 1, 1, "", "ieer_headlines"], [192, 1, 1, "", "in_demo"], [192, 1, 1, "", "list2sym"], [192, 1, 1, "", "ne_chunked"], [192, 1, 1, "", "roles_demo"], [192, 1, 1, "", "rtuple"], [192, 1, 1, "", "semi_rel2reldict"], [192, 1, 1, "", "tree2semi_rel"]], "nltk.sem.skolemize": [[193, 1, 1, "", "skolemize"], [193, 1, 1, "", "to_cnf"]], "nltk.sem.util": [[194, 1, 1, "", "demo"], [194, 1, 1, "", "demo_legacy_grammar"], [194, 1, 1, "", "demo_model0"], [194, 1, 1, "", "evaluate_sents"], [194, 1, 1, "", "interpret_sents"], [194, 1, 1, "", "parse_sents"], [194, 1, 1, "", "read_sents"], [194, 1, 1, "", "root_semrep"]], "nltk.sentiment": [[196, 0, 0, "-", "sentiment_analyzer"], [197, 0, 0, "-", "util"], [198, 0, 0, "-", "vader"]], "nltk.sentiment.sentiment_analyzer": [[196, 2, 1, "", "SentimentAnalyzer"]], "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer": [[196, 3, 1, "", "__init__"], [196, 3, 1, "", "add_feat_extractor"], [196, 3, 1, "", "all_words"], [196, 3, 1, "", "apply_features"], [196, 3, 1, "", "bigram_collocation_feats"], [196, 3, 1, "", "classify"], [196, 3, 1, "", "evaluate"], [196, 3, 1, "", "extract_features"], [196, 3, 1, "", "save_file"], [196, 3, 1, "", "train"], [196, 3, 1, "", "unigram_word_feats"]], "nltk.sentiment.util": [[197, 1, 1, "", "demo_liu_hu_lexicon"], [197, 1, 1, "", "demo_movie_reviews"], [197, 1, 1, "", "demo_sent_subjectivity"], [197, 1, 1, "", "demo_subjectivity"], [197, 1, 1, "", "demo_tweets"], [197, 1, 1, "", "demo_vader_instance"], [197, 1, 1, "", "demo_vader_tweets"], [197, 1, 1, "", "extract_bigram_feats"], [197, 1, 1, "", "extract_unigram_feats"], [197, 1, 1, "", "json2csv_preprocess"], [197, 1, 1, "", "mark_negation"], [197, 1, 1, "", "output_markdown"], [197, 1, 1, "", "parse_tweets_set"], [197, 1, 1, "", "split_train_test"], [197, 1, 1, "", "timer"]], "nltk.sentiment.vader": [[198, 2, 1, "", "SentiText"], [198, 2, 1, "", "SentimentIntensityAnalyzer"], [198, 2, 1, "", "VaderConstants"]], "nltk.sentiment.vader.SentiText": [[198, 3, 1, "", "__init__"], [198, 3, 1, "", "allcap_differential"]], "nltk.sentiment.vader.SentimentIntensityAnalyzer": [[198, 3, 1, "", "__init__"], [198, 3, 1, "", "make_lex_dict"], [198, 3, 1, "", "polarity_scores"], [198, 3, 1, "", "score_valence"], [198, 3, 1, "", "sentiment_valence"]], "nltk.sentiment.vader.VaderConstants": [[198, 4, 1, "", "BOOSTER_DICT"], [198, 4, 1, "", "B_DECR"], [198, 4, 1, "", "B_INCR"], [198, 4, 1, "", "C_INCR"], [198, 4, 1, "", "NEGATE"], [198, 4, 1, "", "N_SCALAR"], [198, 4, 1, "", "PUNC_LIST"], [198, 4, 1, "", "REGEX_REMOVE_PUNCTUATION"], [198, 4, 1, "", "SPECIAL_CASE_IDIOMS"], [198, 3, 1, "", "__init__"], [198, 3, 1, "", "negated"], [198, 3, 1, "", "normalize"], [198, 3, 1, "", "scalar_inc_dec"]], "nltk.stem": [[200, 0, 0, "-", "api"], [201, 0, 0, "-", "arlstem"], [202, 0, 0, "-", "arlstem2"], [203, 0, 0, "-", "cistem"], [204, 0, 0, "-", "isri"], [205, 0, 0, "-", "lancaster"], [206, 0, 0, "-", "porter"], [207, 0, 0, "-", "regexp"], [208, 0, 0, "-", "rslp"], [209, 0, 0, "-", "snowball"], [210, 0, 0, "-", "util"], [211, 0, 0, "-", "wordnet"]], "nltk.stem.api": [[200, 2, 1, "", "StemmerI"]], "nltk.stem.api.StemmerI": [[200, 3, 1, "", "stem"]], "nltk.stem.arlstem": [[201, 2, 1, "", "ARLSTem"]], "nltk.stem.arlstem.ARLSTem": [[201, 3, 1, "", "__init__"], [201, 3, 1, "", "fem2masc"], [201, 3, 1, "", "norm"], [201, 3, 1, "", "plur2sing"], [201, 3, 1, "", "pref"], [201, 3, 1, "", "stem"], [201, 3, 1, "", "suff"], [201, 3, 1, "", "verb"], [201, 3, 1, "", "verb_t1"], [201, 3, 1, "", "verb_t2"], [201, 3, 1, "", "verb_t3"], [201, 3, 1, "", "verb_t4"], [201, 3, 1, "", "verb_t5"], [201, 3, 1, "", "verb_t6"]], "nltk.stem.arlstem2": [[202, 2, 1, "", "ARLSTem2"]], "nltk.stem.arlstem2.ARLSTem2": [[202, 3, 1, "", "__init__"], [202, 3, 1, "", "adjective"], [202, 3, 1, "", "fem2masc"], [202, 3, 1, "", "norm"], [202, 3, 1, "", "plur2sing"], [202, 3, 1, "", "pref"], [202, 3, 1, "", "stem"], [202, 3, 1, "", "stem1"], [202, 3, 1, "", "suff"], [202, 3, 1, "", "verb"], [202, 3, 1, "", "verb_t1"], [202, 3, 1, "", "verb_t2"], [202, 3, 1, "", "verb_t3"], [202, 3, 1, "", "verb_t4"], [202, 3, 1, "", "verb_t5"], [202, 3, 1, "", "verb_t6"]], "nltk.stem.cistem": [[203, 2, 1, "", "Cistem"]], "nltk.stem.cistem.Cistem": [[203, 3, 1, "", "__init__"], [203, 4, 1, "", "repl_xx"], [203, 4, 1, "", "repl_xx_back"], [203, 3, 1, "", "replace_back"], [203, 3, 1, "", "replace_to"], [203, 3, 1, "", "segment"], [203, 3, 1, "", "stem"], [203, 4, 1, "", "strip_emr"], [203, 4, 1, "", "strip_esn"], [203, 4, 1, "", "strip_ge"], [203, 4, 1, "", "strip_nd"], [203, 4, 1, "", "strip_t"]], "nltk.stem.isri": [[204, 2, 1, "", "ISRIStemmer"]], "nltk.stem.isri.ISRIStemmer": [[204, 3, 1, "", "__init__"], [204, 3, 1, "", "end_w5"], [204, 3, 1, "", "end_w6"], [204, 3, 1, "", "norm"], [204, 3, 1, "", "pre1"], [204, 3, 1, "", "pre32"], [204, 3, 1, "", "pro_w4"], [204, 3, 1, "", "pro_w53"], [204, 3, 1, "", "pro_w54"], [204, 3, 1, "", "pro_w6"], [204, 3, 1, "", "pro_w64"], [204, 3, 1, "", "stem"], [204, 3, 1, "", "suf1"], [204, 3, 1, "", "suf32"], [204, 3, 1, "", "waw"]], "nltk.stem.lancaster": [[205, 2, 1, "", "LancasterStemmer"]], "nltk.stem.lancaster.LancasterStemmer": [[205, 3, 1, "", "__init__"], [205, 4, 1, "", "default_rule_tuple"], [205, 3, 1, "", "parseRules"], [205, 3, 1, "", "stem"]], "nltk.stem.porter": [[206, 2, 1, "", "PorterStemmer"], [206, 1, 1, "", "demo"]], "nltk.stem.porter.PorterStemmer": [[206, 4, 1, "", "MARTIN_EXTENSIONS"], [206, 4, 1, "", "NLTK_EXTENSIONS"], [206, 4, 1, "", "ORIGINAL_ALGORITHM"], [206, 3, 1, "", "__init__"], [206, 3, 1, "", "stem"]], "nltk.stem.regexp": [[207, 2, 1, "", "RegexpStemmer"]], "nltk.stem.regexp.RegexpStemmer": [[207, 3, 1, "", "__init__"], [207, 3, 1, "", "stem"]], "nltk.stem.rslp": [[208, 2, 1, "", "RSLPStemmer"]], "nltk.stem.rslp.RSLPStemmer": [[208, 3, 1, "", "__init__"], [208, 3, 1, "", "apply_rule"], [208, 3, 1, "", "read_rule"], [208, 3, 1, "", "stem"]], "nltk.stem.snowball": [[209, 2, 1, "", "ArabicStemmer"], [209, 2, 1, "", "DanishStemmer"], [209, 2, 1, "", "DutchStemmer"], [209, 2, 1, "", "EnglishStemmer"], [209, 2, 1, "", "FinnishStemmer"], [209, 2, 1, "", "FrenchStemmer"], [209, 2, 1, "", "GermanStemmer"], [209, 2, 1, "", "HungarianStemmer"], [209, 2, 1, "", "ItalianStemmer"], [209, 2, 1, "", "NorwegianStemmer"], [209, 2, 1, "", "PorterStemmer"], [209, 2, 1, "", "PortugueseStemmer"], [209, 2, 1, "", "RomanianStemmer"], [209, 2, 1, "", "RussianStemmer"], [209, 2, 1, "", "SnowballStemmer"], [209, 2, 1, "", "SpanishStemmer"], [209, 2, 1, "", "SwedishStemmer"], [209, 1, 1, "", "demo"]], "nltk.stem.snowball.ArabicStemmer": [[209, 4, 1, "", "is_defined"], [209, 4, 1, "", "is_noun"], [209, 4, 1, "", "is_verb"], [209, 4, 1, "", "prefix_step2a_success"], [209, 4, 1, "", "prefix_step3a_noun_success"], [209, 4, 1, "", "prefix_step3b_noun_success"], [209, 3, 1, "", "stem"], [209, 4, 1, "", "suffix_noun_step1a_success"], [209, 4, 1, "", "suffix_noun_step2a_success"], [209, 4, 1, "", "suffix_noun_step2b_success"], [209, 4, 1, "", "suffix_noun_step2c2_success"], [209, 4, 1, "", "suffix_verb_step2a_success"], [209, 4, 1, "", "suffix_verb_step2b_success"], [209, 4, 1, "", "suffixe_noun_step1b_success"], [209, 4, 1, "", "suffixes_verb_step1_success"]], "nltk.stem.snowball.DanishStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.DutchStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.EnglishStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.FinnishStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.FrenchStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.GermanStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.HungarianStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.ItalianStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.NorwegianStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.PorterStemmer": [[209, 3, 1, "", "__init__"]], "nltk.stem.snowball.PortugueseStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.RomanianStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.RussianStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.SnowballStemmer": [[209, 3, 1, "", "__init__"], [209, 4, 1, "", "languages"], [209, 3, 1, "", "stem"]], "nltk.stem.snowball.SpanishStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.SwedishStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.util": [[210, 1, 1, "", "prefix_replace"], [210, 1, 1, "", "suffix_replace"]], "nltk.stem.wordnet": [[211, 2, 1, "", "WordNetLemmatizer"]], "nltk.stem.wordnet.WordNetLemmatizer": [[211, 3, 1, "", "lemmatize"]], "nltk.tabdata": [[212, 2, 1, "", "MaxentDecoder"], [212, 2, 1, "", "MaxentEncoder"], [212, 2, 1, "", "PunktDecoder"], [212, 2, 1, "", "TabDecoder"], [212, 2, 1, "", "TabEncoder"], [212, 1, 1, "", "rm_nl"]], "nltk.tabdata.MaxentDecoder": [[212, 3, 1, "", "tupkey2dict"]], "nltk.tabdata.MaxentEncoder": [[212, 3, 1, "", "tupdict2tab"]], "nltk.tabdata.PunktDecoder": [[212, 3, 1, "", "tab2intdict"]], "nltk.tabdata.TabDecoder": [[212, 3, 1, "", "tab2dict"], [212, 3, 1, "", "tab2ivdict"], [212, 3, 1, "", "tab2tup"], [212, 3, 1, "", "tab2tups"], [212, 3, 1, "", "txt2list"], [212, 3, 1, "", "txt2set"]], "nltk.tabdata.TabEncoder": [[212, 3, 1, "", "dict2tab"], [212, 3, 1, "", "ivdict2tab"], [212, 3, 1, "", "list2txt"], [212, 3, 1, "", "set2txt"], [212, 3, 1, "", "tup2tab"], [212, 3, 1, "", "tups2tab"]], "nltk.tag": [[214, 0, 0, "-", "api"], [215, 0, 0, "-", "brill"], [216, 0, 0, "-", "brill_trainer"], [217, 0, 0, "-", "crf"], [218, 0, 0, "-", "hmm"], [219, 0, 0, "-", "hunpos"], [220, 0, 0, "-", "mapping"], [221, 0, 0, "-", "perceptron"], [213, 1, 1, "", "pos_tag"], [213, 1, 1, "", "pos_tag_sents"], [222, 0, 0, "-", "senna"], [223, 0, 0, "-", "sequential"], [224, 0, 0, "-", "stanford"], [225, 0, 0, "-", "tnt"], [226, 0, 0, "-", "util"]], "nltk.tag.api": [[214, 2, 1, "", "FeaturesetTaggerI"], [214, 2, 1, "", "TaggerI"]], "nltk.tag.api.TaggerI": [[214, 3, 1, "", "accuracy"], [214, 3, 1, "", "confusion"], [214, 3, 1, "", "evaluate"], [214, 3, 1, "", "evaluate_per_tag"], [214, 3, 1, "", "f_measure"], [214, 3, 1, "", "precision"], [214, 3, 1, "", "recall"], [214, 3, 1, "", "tag"], [214, 3, 1, "", "tag_sents"]], "nltk.tag.brill": [[215, 2, 1, "", "BrillTagger"], [215, 2, 1, "", "Pos"], [215, 2, 1, "", "Word"], [215, 1, 1, "", "brill24"], [215, 1, 1, "", "describe_template_sets"], [215, 1, 1, "", "fntbl37"], [215, 1, 1, "", "nltkdemo18"], [215, 1, 1, "", "nltkdemo18plus"]], "nltk.tag.brill.BrillTagger": [[215, 3, 1, "", "__init__"], [215, 3, 1, "", "batch_tag_incremental"], [215, 3, 1, "", "decode_json_obj"], [215, 3, 1, "", "encode_json_obj"], [215, 4, 1, "", "json_tag"], [215, 3, 1, "", "print_template_statistics"], [215, 3, 1, "", "rules"], [215, 3, 1, "", "tag"], [215, 3, 1, "", "train_stats"]], "nltk.tag.brill.Pos": [[215, 3, 1, "", "extract_property"], [215, 4, 1, "", "json_tag"]], "nltk.tag.brill.Word": [[215, 3, 1, "", "extract_property"], [215, 4, 1, "", "json_tag"]], "nltk.tag.brill_trainer": [[216, 2, 1, "", "BrillTaggerTrainer"]], "nltk.tag.brill_trainer.BrillTaggerTrainer": [[216, 3, 1, "", "__init__"], [216, 3, 1, "", "train"]], "nltk.tag.crf": [[217, 2, 1, "", "CRFTagger"]], "nltk.tag.crf.CRFTagger": [[217, 3, 1, "", "__init__"], [217, 3, 1, "", "set_model_file"], [217, 3, 1, "", "tag"], [217, 3, 1, "", "tag_sents"], [217, 3, 1, "", "train"]], "nltk.tag.hmm": [[218, 2, 1, "", "HiddenMarkovModelTagger"], [218, 2, 1, "", "HiddenMarkovModelTrainer"], [218, 1, 1, "", "demo"], [218, 1, 1, "", "demo_bw"], [218, 1, 1, "", "demo_pos"], [218, 1, 1, "", "demo_pos_bw"], [218, 1, 1, "", "load_pos"], [218, 1, 1, "", "logsumexp2"]], "nltk.tag.hmm.HiddenMarkovModelTagger": [[218, 3, 1, "", "__init__"], [218, 3, 1, "", "best_path"], [218, 3, 1, "", "best_path_simple"], [218, 3, 1, "", "entropy"], [218, 3, 1, "", "log_probability"], [218, 3, 1, "", "point_entropy"], [218, 3, 1, "", "probability"], [218, 3, 1, "", "random_sample"], [218, 3, 1, "", "reset_cache"], [218, 3, 1, "", "tag"], [218, 3, 1, "", "test"], [218, 3, 1, "", "train"]], "nltk.tag.hmm.HiddenMarkovModelTrainer": [[218, 3, 1, "", "__init__"], [218, 3, 1, "", "train"], [218, 3, 1, "", "train_supervised"], [218, 3, 1, "", "train_unsupervised"]], "nltk.tag.hunpos": [[219, 2, 1, "", "HunposTagger"]], "nltk.tag.hunpos.HunposTagger": [[219, 3, 1, "", "__init__"], [219, 3, 1, "", "close"], [219, 3, 1, "", "tag"]], "nltk.tag.mapping": [[220, 1, 1, "", "map_tag"], [220, 1, 1, "", "tagset_mapping"]], "nltk.tag.perceptron": [[221, 2, 1, "", "AveragedPerceptron"], [221, 2, 1, "", "PerceptronTagger"]], "nltk.tag.perceptron.AveragedPerceptron": [[221, 3, 1, "", "__init__"], [221, 3, 1, "", "average_weights"], [221, 3, 1, "", "decode_json_obj"], [221, 3, 1, "", "encode_json_obj"], [221, 4, 1, "", "json_tag"], [221, 3, 1, "", "load"], [221, 3, 1, "", "predict"], [221, 3, 1, "", "save"], [221, 3, 1, "", "update"]], "nltk.tag.perceptron.PerceptronTagger": [[221, 4, 1, "", "END"], [221, 4, 1, "", "START"], [221, 3, 1, "", "__init__"], [221, 3, 1, "", "decode_json_obj"], [221, 3, 1, "", "encode_json_obj"], [221, 4, 1, "", "json_tag"], [221, 3, 1, "", "load_from_json"], [221, 3, 1, "", "normalize"], [221, 3, 1, "", "save_to_json"], [221, 3, 1, "", "tag"], [221, 3, 1, "", "train"]], "nltk.tag.senna": [[222, 2, 1, "", "SennaChunkTagger"], [222, 2, 1, "", "SennaNERTagger"], [222, 2, 1, "", "SennaTagger"]], "nltk.tag.senna.SennaChunkTagger": [[222, 3, 1, "", "__init__"], [222, 3, 1, "", "bio_to_chunks"], [222, 3, 1, "", "tag_sents"]], "nltk.tag.senna.SennaNERTagger": [[222, 3, 1, "", "__init__"], [222, 3, 1, "", "tag_sents"]], "nltk.tag.senna.SennaTagger": [[222, 3, 1, "", "__init__"], [222, 3, 1, "", "tag_sents"]], "nltk.tag.sequential": [[223, 2, 1, "", "AffixTagger"], [223, 2, 1, "", "BigramTagger"], [223, 2, 1, "", "ClassifierBasedPOSTagger"], [223, 2, 1, "", "ClassifierBasedTagger"], [223, 2, 1, "", "ContextTagger"], [223, 2, 1, "", "DefaultTagger"], [223, 2, 1, "", "NgramTagger"], [223, 2, 1, "", "RegexpTagger"], [223, 2, 1, "", "SequentialBackoffTagger"], [223, 2, 1, "", "TrigramTagger"], [223, 2, 1, "", "UnigramTagger"]], "nltk.tag.sequential.AffixTagger": [[223, 3, 1, "", "__init__"], [223, 3, 1, "", "context"], [223, 3, 1, "", "decode_json_obj"], [223, 3, 1, "", "encode_json_obj"], [223, 4, 1, "", "json_tag"]], "nltk.tag.sequential.BigramTagger": [[223, 3, 1, "", "__init__"], [223, 4, 1, "", "json_tag"]], "nltk.tag.sequential.ClassifierBasedPOSTagger": [[223, 3, 1, "", "feature_detector"]], "nltk.tag.sequential.ClassifierBasedTagger": [[223, 3, 1, "", "__init__"], [223, 3, 1, "", "choose_tag"], [223, 3, 1, "", "classifier"], [223, 3, 1, "", "feature_detector"]], "nltk.tag.sequential.ContextTagger": [[223, 3, 1, "", "__init__"], [223, 3, 1, "", "choose_tag"], [223, 3, 1, "", "context"], [223, 3, 1, "", "size"]], "nltk.tag.sequential.DefaultTagger": [[223, 3, 1, "", "__init__"], [223, 3, 1, "", "choose_tag"], [223, 3, 1, "", "decode_json_obj"], [223, 3, 1, "", "encode_json_obj"], [223, 4, 1, "", "json_tag"]], "nltk.tag.sequential.NgramTagger": [[223, 3, 1, "", "__init__"], [223, 3, 1, "", "context"], [223, 3, 1, "", "decode_json_obj"], [223, 3, 1, "", "encode_json_obj"], [223, 4, 1, "", "json_tag"]], "nltk.tag.sequential.RegexpTagger": [[223, 3, 1, "", "__init__"], [223, 3, 1, "", "choose_tag"], [223, 3, 1, "", "decode_json_obj"], [223, 3, 1, "", "encode_json_obj"], [223, 4, 1, "", "json_tag"]], "nltk.tag.sequential.SequentialBackoffTagger": [[223, 3, 1, "", "__init__"], [223, 5, 1, "", "backoff"], [223, 3, 1, "", "choose_tag"], [223, 3, 1, "", "tag"], [223, 3, 1, "", "tag_one"]], "nltk.tag.sequential.TrigramTagger": [[223, 3, 1, "", "__init__"], [223, 4, 1, "", "json_tag"]], "nltk.tag.sequential.UnigramTagger": [[223, 3, 1, "", "__init__"], [223, 3, 1, "", "context"], [223, 4, 1, "", "json_tag"]], "nltk.tag.stanford": [[224, 2, 1, "", "StanfordNERTagger"], [224, 2, 1, "", "StanfordPOSTagger"], [224, 2, 1, "", "StanfordTagger"]], "nltk.tag.stanford.StanfordNERTagger": [[224, 3, 1, "", "__init__"], [224, 3, 1, "", "parse_output"]], "nltk.tag.stanford.StanfordPOSTagger": [[224, 3, 1, "", "__init__"]], "nltk.tag.stanford.StanfordTagger": [[224, 3, 1, "", "__init__"], [224, 3, 1, "", "parse_output"], [224, 3, 1, "", "tag"], [224, 3, 1, "", "tag_sents"]], "nltk.tag.tnt": [[225, 2, 1, "", "TnT"], [225, 1, 1, "", "basic_sent_chop"], [225, 1, 1, "", "demo"], [225, 1, 1, "", "demo2"], [225, 1, 1, "", "demo3"]], "nltk.tag.tnt.TnT": [[225, 3, 1, "", "__init__"], [225, 3, 1, "", "tag"], [225, 3, 1, "", "tagdata"], [225, 3, 1, "", "train"]], "nltk.tag.util": [[226, 1, 1, "", "str2tuple"], [226, 1, 1, "", "tuple2str"], [226, 1, 1, "", "untag"]], "nltk.tbl": [[228, 0, 0, "-", "api"], [229, 0, 0, "-", "demo"], [230, 0, 0, "-", "erroranalysis"], [231, 0, 0, "-", "feature"], [232, 0, 0, "-", "rule"], [233, 0, 0, "-", "template"]], "nltk.tbl.demo": [[229, 1, 1, "", "corpus_size"], [229, 1, 1, "", "demo"], [229, 1, 1, "", "demo_error_analysis"], [229, 1, 1, "", "demo_generated_templates"], [229, 1, 1, "", "demo_high_accuracy_rules"], [229, 1, 1, "", "demo_learning_curve"], [229, 1, 1, "", "demo_multifeature_template"], [229, 1, 1, "", "demo_multiposition_feature"], [229, 1, 1, "", "demo_repr_rule_format"], [229, 1, 1, "", "demo_serialize_tagger"], [229, 1, 1, "", "demo_str_rule_format"], [229, 1, 1, "", "demo_template_statistics"], [229, 1, 1, "", "demo_verbose_rule_format"], [229, 1, 1, "", "postag"]], "nltk.tbl.erroranalysis": [[230, 1, 1, "", "error_list"]], "nltk.tbl.feature": [[231, 2, 1, "", "Feature"]], "nltk.tbl.feature.Feature": [[231, 4, 1, "", "PROPERTY_NAME"], [231, 3, 1, "", "__init__"], [231, 3, 1, "", "decode_json_obj"], [231, 3, 1, "", "encode_json_obj"], [231, 3, 1, "", "expand"], [231, 3, 1, "", "extract_property"], [231, 3, 1, "", "intersects"], [231, 3, 1, "", "issuperset"], [231, 4, 1, "", "json_tag"]], "nltk.tbl.rule": [[232, 2, 1, "", "Rule"], [232, 2, 1, "", "TagRule"]], "nltk.tbl.rule.Rule": [[232, 3, 1, "", "__init__"], [232, 3, 1, "", "applies"], [232, 3, 1, "", "decode_json_obj"], [232, 3, 1, "", "encode_json_obj"], [232, 3, 1, "", "format"], [232, 4, 1, "", "json_tag"]], "nltk.tbl.rule.TagRule": [[232, 3, 1, "", "__init__"], [232, 3, 1, "", "applies"], [232, 3, 1, "", "apply"], [232, 4, 1, "", "original_tag"], [232, 4, 1, "", "replacement_tag"]], "nltk.tbl.template": [[233, 2, 1, "", "BrillTemplateI"], [233, 2, 1, "", "Template"]], "nltk.tbl.template.BrillTemplateI": [[233, 3, 1, "", "applicable_rules"], [233, 3, 1, "", "get_neighborhood"]], "nltk.tbl.template.Template": [[233, 4, 1, "", "ALLTEMPLATES"], [233, 3, 1, "", "__init__"], [233, 3, 1, "", "applicable_rules"], [233, 3, 1, "", "expand"], [233, 3, 1, "", "get_neighborhood"]], "nltk.text": [[234, 2, 1, "", "ConcordanceIndex"], [234, 2, 1, "", "ContextIndex"], [234, 2, 1, "", "Text"], [234, 2, 1, "", "TextCollection"], [234, 2, 1, "", "TokenSearcher"]], "nltk.text.ConcordanceIndex": [[234, 3, 1, "", "__init__"], [234, 3, 1, "", "find_concordance"], [234, 3, 1, "", "offsets"], [234, 3, 1, "", "print_concordance"], [234, 3, 1, "", "tokens"]], "nltk.text.ContextIndex": [[234, 3, 1, "", "__init__"], [234, 3, 1, "", "common_contexts"], [234, 3, 1, "", "similar_words"], [234, 3, 1, "", "tokens"], [234, 3, 1, "", "word_similarity_dict"]], "nltk.text.Text": [[234, 3, 1, "", "__init__"], [234, 3, 1, "", "collocation_list"], [234, 3, 1, "", "collocations"], [234, 3, 1, "", "common_contexts"], [234, 3, 1, "", "concordance"], [234, 3, 1, "", "concordance_list"], [234, 3, 1, "", "count"], [234, 3, 1, "", "dispersion_plot"], [234, 3, 1, "", "findall"], [234, 3, 1, "", "generate"], [234, 3, 1, "", "index"], [234, 3, 1, "", "plot"], [234, 3, 1, "", "readability"], [234, 3, 1, "", "similar"], [234, 3, 1, "", "vocab"]], "nltk.text.TextCollection": [[234, 3, 1, "", "__init__"], [234, 3, 1, "", "idf"], [234, 3, 1, "", "tf"], [234, 3, 1, "", "tf_idf"]], "nltk.text.TokenSearcher": [[234, 3, 1, "", "__init__"], [234, 3, 1, "", "findall"]], "nltk.tgrep": [[235, 6, 1, "", "TgrepException"], [235, 1, 1, "", "ancestors"], [235, 1, 1, "", "tgrep_compile"], [235, 1, 1, "", "tgrep_nodes"], [235, 1, 1, "", "tgrep_positions"], [235, 1, 1, "", "tgrep_tokenize"], [235, 1, 1, "", "treepositions_no_leaves"], [235, 1, 1, "", "unique_ancestors"]], "nltk.tokenize": [[237, 0, 0, "-", "api"], [238, 0, 0, "-", "casual"], [239, 0, 0, "-", "destructive"], [240, 0, 0, "-", "legality_principle"], [241, 0, 0, "-", "mwe"], [242, 0, 0, "-", "nist"], [243, 0, 0, "-", "punkt"], [244, 0, 0, "-", "regexp"], [245, 0, 0, "-", "repp"], [236, 1, 1, "", "sent_tokenize"], [246, 0, 0, "-", "sexpr"], [247, 0, 0, "-", "simple"], [248, 0, 0, "-", "sonority_sequencing"], [249, 0, 0, "-", "stanford"], [250, 0, 0, "-", "stanford_segmenter"], [251, 0, 0, "-", "texttiling"], [252, 0, 0, "-", "toktok"], [253, 0, 0, "-", "treebank"], [254, 0, 0, "-", "util"], [236, 1, 1, "", "word_tokenize"]], "nltk.tokenize.api": [[237, 2, 1, "", "StringTokenizer"], [237, 2, 1, "", "TokenizerI"]], "nltk.tokenize.api.StringTokenizer": [[237, 3, 1, "", "span_tokenize"], [237, 3, 1, "", "tokenize"]], "nltk.tokenize.api.TokenizerI": [[237, 3, 1, "", "span_tokenize"], [237, 3, 1, "", "span_tokenize_sents"], [237, 3, 1, "", "tokenize"], [237, 3, 1, "", "tokenize_sents"]], "nltk.tokenize.casual": [[238, 2, 1, "", "TweetTokenizer"], [238, 1, 1, "", "casual_tokenize"], [238, 1, 1, "", "reduce_lengthening"], [238, 1, 1, "", "remove_handles"]], "nltk.tokenize.casual.TweetTokenizer": [[238, 5, 1, "", "PHONE_WORD_RE"], [238, 5, 1, "", "WORD_RE"], [238, 3, 1, "", "__init__"], [238, 3, 1, "", "tokenize"]], "nltk.tokenize.destructive": [[239, 2, 1, "", "MacIntyreContractions"], [239, 2, 1, "", "NLTKWordTokenizer"]], "nltk.tokenize.destructive.MacIntyreContractions": [[239, 4, 1, "", "CONTRACTIONS2"], [239, 4, 1, "", "CONTRACTIONS3"], [239, 4, 1, "", "CONTRACTIONS4"]], "nltk.tokenize.destructive.NLTKWordTokenizer": [[239, 4, 1, "", "CONTRACTIONS2"], [239, 4, 1, "", "CONTRACTIONS3"], [239, 4, 1, "", "CONVERT_PARENTHESES"], [239, 4, 1, "", "DOUBLE_DASHES"], [239, 4, 1, "", "ENDING_QUOTES"], [239, 4, 1, "", "PARENS_BRACKETS"], [239, 4, 1, "", "PUNCTUATION"], [239, 4, 1, "", "STARTING_QUOTES"], [239, 3, 1, "", "span_tokenize"], [239, 3, 1, "", "tokenize"]], "nltk.tokenize.legality_principle": [[240, 2, 1, "", "LegalitySyllableTokenizer"]], "nltk.tokenize.legality_principle.LegalitySyllableTokenizer": [[240, 3, 1, "", "__init__"], [240, 3, 1, "", "find_legal_onsets"], [240, 3, 1, "", "onset"], [240, 3, 1, "", "tokenize"]], "nltk.tokenize.mwe": [[241, 2, 1, "", "MWETokenizer"]], "nltk.tokenize.mwe.MWETokenizer": [[241, 3, 1, "", "__init__"], [241, 3, 1, "", "add_mwe"], [241, 3, 1, "", "tokenize"]], "nltk.tokenize.nist": [[242, 2, 1, "", "NISTTokenizer"]], "nltk.tokenize.nist.NISTTokenizer": [[242, 4, 1, "", "DASH_PRECEED_DIGIT"], [242, 4, 1, "", "INTERNATIONAL_REGEXES"], [242, 4, 1, "", "LANG_DEPENDENT_REGEXES"], [242, 4, 1, "", "NONASCII"], [242, 4, 1, "", "PERIOD_COMMA_FOLLOW"], [242, 4, 1, "", "PERIOD_COMMA_PRECEED"], [242, 4, 1, "", "PUNCT"], [242, 4, 1, "", "PUNCT_1"], [242, 4, 1, "", "PUNCT_2"], [242, 4, 1, "", "STRIP_EOL_HYPHEN"], [242, 4, 1, "", "STRIP_SKIP"], [242, 4, 1, "", "SYMBOLS"], [242, 3, 1, "", "international_tokenize"], [242, 3, 1, "", "lang_independent_sub"], [242, 4, 1, "", "number_regex"], [242, 4, 1, "", "punct_regex"], [242, 4, 1, "", "pup_number"], [242, 4, 1, "", "pup_punct"], [242, 4, 1, "", "pup_symbol"], [242, 4, 1, "", "symbol_regex"], [242, 3, 1, "", "tokenize"]], "nltk.tokenize.punkt": [[243, 2, 1, "", "PunktBaseClass"], [243, 2, 1, "", "PunktLanguageVars"], [243, 2, 1, "", "PunktParameters"], [243, 2, 1, "", "PunktSentenceTokenizer"], [243, 2, 1, "", "PunktToken"], [243, 2, 1, "", "PunktTokenizer"], [243, 2, 1, "", "PunktTrainer"], [243, 1, 1, "", "demo"], [243, 1, 1, "", "format_debug_decision"], [243, 1, 1, "", "load_punkt_params"], [243, 1, 1, "", "save_punkt_params"]], "nltk.tokenize.punkt.PunktBaseClass": [[243, 3, 1, "", "__init__"]], "nltk.tokenize.punkt.PunktLanguageVars": [[243, 4, 1, "", "internal_punctuation"], [243, 3, 1, "", "period_context_re"], [243, 4, 1, "", "re_boundary_realignment"], [243, 4, 1, "", "sent_end_chars"], [243, 3, 1, "", "word_tokenize"]], "nltk.tokenize.punkt.PunktParameters": [[243, 3, 1, "", "__init__"], [243, 4, 1, "", "abbrev_types"], [243, 3, 1, "", "add_ortho_context"], [243, 3, 1, "", "clear_abbrevs"], [243, 3, 1, "", "clear_collocations"], [243, 3, 1, "", "clear_ortho_context"], [243, 3, 1, "", "clear_sent_starters"], [243, 4, 1, "", "collocations"], [243, 4, 1, "", "ortho_context"], [243, 4, 1, "", "sent_starters"]], "nltk.tokenize.punkt.PunktSentenceTokenizer": [[243, 4, 1, "", "PUNCTUATION"], [243, 3, 1, "", "__init__"], [243, 3, 1, "", "debug_decisions"], [243, 3, 1, "", "dump"], [243, 3, 1, "", "sentences_from_text"], [243, 3, 1, "", "sentences_from_text_legacy"], [243, 3, 1, "", "sentences_from_tokens"], [243, 3, 1, "", "span_tokenize"], [243, 3, 1, "", "text_contains_sentbreak"], [243, 3, 1, "", "tokenize"], [243, 3, 1, "", "train"]], "nltk.tokenize.punkt.PunktToken": [[243, 3, 1, "", "__init__"], [243, 4, 1, "", "abbr"], [243, 4, 1, "", "ellipsis"], [243, 5, 1, "", "first_case"], [243, 5, 1, "", "first_lower"], [243, 5, 1, "", "first_upper"], [243, 5, 1, "", "is_alpha"], [243, 5, 1, "", "is_ellipsis"], [243, 5, 1, "", "is_initial"], [243, 5, 1, "", "is_non_punct"], [243, 5, 1, "", "is_number"], [243, 4, 1, "", "linestart"], [243, 4, 1, "", "parastart"], [243, 4, 1, "", "period_final"], [243, 4, 1, "", "sentbreak"], [243, 4, 1, "", "tok"], [243, 4, 1, "", "type"], [243, 5, 1, "", "type_no_period"], [243, 5, 1, "", "type_no_sentperiod"]], "nltk.tokenize.punkt.PunktTokenizer": [[243, 3, 1, "", "__init__"], [243, 3, 1, "", "load_lang"], [243, 3, 1, "", "save_params"]], "nltk.tokenize.punkt.PunktTrainer": [[243, 4, 1, "", "ABBREV"], [243, 4, 1, "", "ABBREV_BACKOFF"], [243, 4, 1, "", "COLLOCATION"], [243, 4, 1, "", "IGNORE_ABBREV_PENALTY"], [243, 4, 1, "", "INCLUDE_ABBREV_COLLOCS"], [243, 4, 1, "", "INCLUDE_ALL_COLLOCS"], [243, 4, 1, "", "MIN_COLLOC_FREQ"], [243, 4, 1, "", "SENT_STARTER"], [243, 3, 1, "", "__init__"], [243, 3, 1, "", "finalize_training"], [243, 3, 1, "", "find_abbrev_types"], [243, 3, 1, "", "freq_threshold"], [243, 3, 1, "", "get_params"], [243, 3, 1, "", "train"], [243, 3, 1, "", "train_tokens"]], "nltk.tokenize.regexp": [[244, 2, 1, "", "BlanklineTokenizer"], [244, 2, 1, "", "RegexpTokenizer"], [244, 2, 1, "", "WhitespaceTokenizer"], [244, 2, 1, "", "WordPunctTokenizer"], [244, 1, 1, "", "blankline_tokenize"], [244, 1, 1, "", "regexp_tokenize"], [244, 1, 1, "", "wordpunct_tokenize"]], "nltk.tokenize.regexp.BlanklineTokenizer": [[244, 3, 1, "", "__init__"]], "nltk.tokenize.regexp.RegexpTokenizer": [[244, 3, 1, "", "__init__"], [244, 3, 1, "", "span_tokenize"], [244, 3, 1, "", "tokenize"]], "nltk.tokenize.regexp.WhitespaceTokenizer": [[244, 3, 1, "", "__init__"]], "nltk.tokenize.regexp.WordPunctTokenizer": [[244, 3, 1, "", "__init__"]], "nltk.tokenize.repp": [[245, 2, 1, "", "ReppTokenizer"]], "nltk.tokenize.repp.ReppTokenizer": [[245, 3, 1, "", "__init__"], [245, 3, 1, "", "find_repptokenizer"], [245, 3, 1, "", "generate_repp_command"], [245, 3, 1, "", "parse_repp_outputs"], [245, 3, 1, "", "tokenize"], [245, 3, 1, "", "tokenize_sents"]], "nltk.tokenize.sexpr": [[246, 2, 1, "", "SExprTokenizer"], [246, 1, 1, "", "sexpr_tokenize"]], "nltk.tokenize.sexpr.SExprTokenizer": [[246, 3, 1, "", "__init__"], [246, 3, 1, "", "tokenize"]], "nltk.tokenize.simple": [[247, 2, 1, "", "CharTokenizer"], [247, 2, 1, "", "LineTokenizer"], [247, 2, 1, "", "SpaceTokenizer"], [247, 2, 1, "", "TabTokenizer"], [247, 1, 1, "", "line_tokenize"]], "nltk.tokenize.simple.CharTokenizer": [[247, 3, 1, "", "span_tokenize"], [247, 3, 1, "", "tokenize"]], "nltk.tokenize.simple.LineTokenizer": [[247, 3, 1, "", "__init__"], [247, 3, 1, "", "span_tokenize"], [247, 3, 1, "", "tokenize"]], "nltk.tokenize.sonority_sequencing": [[248, 2, 1, "", "SyllableTokenizer"]], "nltk.tokenize.sonority_sequencing.SyllableTokenizer": [[248, 3, 1, "", "__init__"], [248, 3, 1, "", "assign_values"], [248, 3, 1, "", "tokenize"], [248, 3, 1, "", "validate_syllables"]], "nltk.tokenize.stanford": [[249, 2, 1, "", "StanfordTokenizer"]], "nltk.tokenize.stanford.StanfordTokenizer": [[249, 3, 1, "", "__init__"], [249, 3, 1, "", "tokenize"]], "nltk.tokenize.stanford_segmenter": [[250, 2, 1, "", "StanfordSegmenter"]], "nltk.tokenize.stanford_segmenter.StanfordSegmenter": [[250, 3, 1, "", "__init__"], [250, 3, 1, "", "default_config"], [250, 3, 1, "", "segment"], [250, 3, 1, "", "segment_file"], [250, 3, 1, "", "segment_sents"], [250, 3, 1, "", "tokenize"]], "nltk.tokenize.texttiling": [[251, 2, 1, "", "TextTilingTokenizer"], [251, 2, 1, "", "TokenSequence"], [251, 2, 1, "", "TokenTableField"], [251, 1, 1, "", "demo"], [251, 1, 1, "", "smooth"]], "nltk.tokenize.texttiling.TextTilingTokenizer": [[251, 3, 1, "", "__init__"], [251, 3, 1, "", "tokenize"]], "nltk.tokenize.texttiling.TokenSequence": [[251, 3, 1, "", "__init__"]], "nltk.tokenize.texttiling.TokenTableField": [[251, 3, 1, "", "__init__"]], "nltk.tokenize.toktok": [[252, 2, 1, "", "ToktokTokenizer"]], "nltk.tokenize.toktok.ToktokTokenizer": [[252, 4, 1, "", "AMPERCENT"], [252, 4, 1, "", "CLOSE_PUNCT"], [252, 4, 1, "", "CLOSE_PUNCT_RE"], [252, 4, 1, "", "COMMA_IN_NUM"], [252, 4, 1, "", "CURRENCY_SYM"], [252, 4, 1, "", "CURRENCY_SYM_RE"], [252, 4, 1, "", "EN_EM_DASHES"], [252, 4, 1, "", "FINAL_PERIOD_1"], [252, 4, 1, "", "FINAL_PERIOD_2"], [252, 4, 1, "", "FUNKY_PUNCT_1"], [252, 4, 1, "", "FUNKY_PUNCT_2"], [252, 4, 1, "", "LSTRIP"], [252, 4, 1, "", "MULTI_COMMAS"], [252, 4, 1, "", "MULTI_DASHES"], [252, 4, 1, "", "MULTI_DOTS"], [252, 4, 1, "", "NON_BREAKING"], [252, 4, 1, "", "ONE_SPACE"], [252, 4, 1, "", "OPEN_PUNCT"], [252, 4, 1, "", "OPEN_PUNCT_RE"], [252, 4, 1, "", "PIPE"], [252, 4, 1, "", "PROB_SINGLE_QUOTES"], [252, 4, 1, "", "RSTRIP"], [252, 4, 1, "", "STUPID_QUOTES_1"], [252, 4, 1, "", "STUPID_QUOTES_2"], [252, 4, 1, "", "TAB"], [252, 4, 1, "", "TOKTOK_REGEXES"], [252, 4, 1, "", "URL_FOE_1"], [252, 4, 1, "", "URL_FOE_2"], [252, 4, 1, "", "URL_FOE_3"], [252, 4, 1, "", "URL_FOE_4"], [252, 3, 1, "", "tokenize"]], "nltk.tokenize.treebank": [[253, 2, 1, "", "TreebankWordDetokenizer"], [253, 2, 1, "", "TreebankWordTokenizer"]], "nltk.tokenize.treebank.TreebankWordDetokenizer": [[253, 4, 1, "", "CONTRACTIONS2"], [253, 4, 1, "", "CONTRACTIONS3"], [253, 4, 1, "", "CONVERT_PARENTHESES"], [253, 4, 1, "", "DOUBLE_DASHES"], [253, 4, 1, "", "ENDING_QUOTES"], [253, 4, 1, "", "PARENS_BRACKETS"], [253, 4, 1, "", "PUNCTUATION"], [253, 4, 1, "", "STARTING_QUOTES"], [253, 3, 1, "", "detokenize"], [253, 3, 1, "", "tokenize"]], "nltk.tokenize.treebank.TreebankWordTokenizer": [[253, 4, 1, "", "CONTRACTIONS2"], [253, 4, 1, "", "CONTRACTIONS3"], [253, 4, 1, "", "CONVERT_PARENTHESES"], [253, 4, 1, "", "DOUBLE_DASHES"], [253, 4, 1, "", "ENDING_QUOTES"], [253, 4, 1, "", "PARENS_BRACKETS"], [253, 4, 1, "", "PUNCTUATION"], [253, 4, 1, "", "STARTING_QUOTES"], [253, 3, 1, "", "span_tokenize"], [253, 3, 1, "", "tokenize"]], "nltk.tokenize.util": [[254, 2, 1, "", "CJKChars"], [254, 1, 1, "", "align_tokens"], [254, 1, 1, "", "is_cjk"], [254, 1, 1, "", "regexp_span_tokenize"], [254, 1, 1, "", "spans_to_relative"], [254, 1, 1, "", "string_span_tokenize"], [254, 1, 1, "", "xml_escape"], [254, 1, 1, "", "xml_unescape"]], "nltk.tokenize.util.CJKChars": [[254, 4, 1, "", "CJK_Compatibility_Forms"], [254, 4, 1, "", "CJK_Compatibility_Ideographs"], [254, 4, 1, "", "CJK_Radicals"], [254, 4, 1, "", "Hangul_Jamo"], [254, 4, 1, "", "Hangul_Syllables"], [254, 4, 1, "", "Katakana_Hangul_Halfwidth"], [254, 4, 1, "", "Phags_Pa"], [254, 4, 1, "", "Supplementary_Ideographic_Plane"], [254, 4, 1, "", "ranges"]], "nltk.toolbox": [[255, 2, 1, "", "StandardFormat"], [255, 2, 1, "", "ToolboxData"], [255, 2, 1, "", "ToolboxSettings"], [255, 1, 1, "", "add_blank_lines"], [255, 1, 1, "", "add_default_fields"], [255, 1, 1, "", "demo"], [255, 1, 1, "", "remove_blanks"], [255, 1, 1, "", "sort_fields"], [255, 1, 1, "", "to_settings_string"], [255, 1, 1, "", "to_sfm_string"]], "nltk.toolbox.StandardFormat": [[255, 3, 1, "", "__init__"], [255, 3, 1, "", "close"], [255, 3, 1, "", "fields"], [255, 3, 1, "", "open"], [255, 3, 1, "", "open_string"], [255, 3, 1, "", "raw_fields"]], "nltk.toolbox.ToolboxData": [[255, 3, 1, "", "parse"]], "nltk.toolbox.ToolboxSettings": [[255, 3, 1, "", "__init__"], [255, 3, 1, "", "parse"]], "nltk.translate": [[257, 0, 0, "-", "api"], [258, 0, 0, "-", "bleu_score"], [259, 0, 0, "-", "chrf_score"], [260, 0, 0, "-", "gale_church"], [261, 0, 0, "-", "gdfa"], [262, 0, 0, "-", "gleu_score"], [263, 0, 0, "-", "ibm1"], [264, 0, 0, "-", "ibm2"], [265, 0, 0, "-", "ibm3"], [266, 0, 0, "-", "ibm4"], [267, 0, 0, "-", "ibm5"], [268, 0, 0, "-", "ibm_model"], [269, 0, 0, "-", "meteor_score"], [270, 0, 0, "-", "metrics"], [271, 0, 0, "-", "nist_score"], [272, 0, 0, "-", "phrase_based"], [273, 0, 0, "-", "ribes_score"], [274, 0, 0, "-", "stack_decoder"]], "nltk.translate.api": [[257, 2, 1, "", "AlignedSent"], [257, 2, 1, "", "Alignment"], [257, 2, 1, "", "PhraseTable"], [257, 2, 1, "", "PhraseTableEntry"]], "nltk.translate.api.AlignedSent": [[257, 3, 1, "", "__init__"], [257, 5, 1, "", "alignment"], [257, 3, 1, "", "invert"], [257, 5, 1, "", "mots"], [257, 5, 1, "", "words"]], "nltk.translate.api.Alignment": [[257, 3, 1, "", "__new__"], [257, 3, 1, "", "fromstring"], [257, 3, 1, "", "invert"], [257, 3, 1, "", "range"]], "nltk.translate.api.PhraseTable": [[257, 3, 1, "", "__init__"], [257, 3, 1, "", "add"], [257, 3, 1, "", "translations_for"]], "nltk.translate.api.PhraseTableEntry": [[257, 3, 1, "", "__new__"], [257, 4, 1, "", "log_prob"], [257, 4, 1, "", "trg_phrase"]], "nltk.translate.bleu_score": [[258, 2, 1, "", "Fraction"], [258, 2, 1, "", "SmoothingFunction"], [258, 1, 1, "", "brevity_penalty"], [258, 1, 1, "", "closest_ref_length"], [258, 1, 1, "", "corpus_bleu"], [258, 1, 1, "", "modified_precision"], [258, 1, 1, "", "sentence_bleu"]], "nltk.translate.bleu_score.Fraction": [[258, 3, 1, "", "__new__"], [258, 5, 1, "", "denominator"], [258, 5, 1, "", "numerator"]], "nltk.translate.bleu_score.SmoothingFunction": [[258, 3, 1, "", "__init__"], [258, 3, 1, "", "method0"], [258, 3, 1, "", "method1"], [258, 3, 1, "", "method2"], [258, 3, 1, "", "method3"], [258, 3, 1, "", "method4"], [258, 3, 1, "", "method5"], [258, 3, 1, "", "method6"], [258, 3, 1, "", "method7"]], "nltk.translate.chrf_score": [[259, 1, 1, "", "chrf_precision_recall_fscore_support"], [259, 1, 1, "", "corpus_chrf"], [259, 1, 1, "", "sentence_chrf"]], "nltk.translate.gale_church": [[260, 2, 1, "", "LanguageIndependent"], [260, 1, 1, "", "align_blocks"], [260, 1, 1, "", "align_log_prob"], [260, 1, 1, "", "align_texts"], [260, 1, 1, "", "erfcc"], [260, 1, 1, "", "norm_cdf"], [260, 1, 1, "", "norm_logsf"], [260, 1, 1, "", "parse_token_stream"], [260, 1, 1, "", "split_at"], [260, 1, 1, "", "trace"]], "nltk.translate.gale_church.LanguageIndependent": [[260, 4, 1, "", "AVERAGE_CHARACTERS"], [260, 4, 1, "", "PRIORS"], [260, 4, 1, "", "VARIANCE_CHARACTERS"]], "nltk.translate.gdfa": [[261, 1, 1, "", "grow_diag_final_and"]], "nltk.translate.gleu_score": [[262, 1, 1, "", "corpus_gleu"], [262, 1, 1, "", "sentence_gleu"]], "nltk.translate.ibm1": [[263, 2, 1, "", "IBMModel1"]], "nltk.translate.ibm1.IBMModel1": [[263, 3, 1, "", "__init__"], [263, 3, 1, "", "align"], [263, 3, 1, "", "align_all"], [263, 3, 1, "", "prob_alignment_point"], [263, 3, 1, "", "prob_all_alignments"], [263, 3, 1, "", "prob_t_a_given_s"], [263, 3, 1, "", "set_uniform_probabilities"], [263, 3, 1, "", "train"]], "nltk.translate.ibm2": [[264, 2, 1, "", "IBMModel2"], [264, 2, 1, "", "Model2Counts"]], "nltk.translate.ibm2.IBMModel2": [[264, 3, 1, "", "__init__"], [264, 3, 1, "", "align"], [264, 3, 1, "", "align_all"], [264, 3, 1, "", "maximize_alignment_probabilities"], [264, 3, 1, "", "prob_alignment_point"], [264, 3, 1, "", "prob_all_alignments"], [264, 3, 1, "", "prob_t_a_given_s"], [264, 3, 1, "", "set_uniform_probabilities"], [264, 3, 1, "", "train"]], "nltk.translate.ibm2.Model2Counts": [[264, 3, 1, "", "__init__"], [264, 3, 1, "", "update_alignment"], [264, 3, 1, "", "update_lexical_translation"]], "nltk.translate.ibm3": [[265, 2, 1, "", "IBMModel3"], [265, 2, 1, "", "Model3Counts"]], "nltk.translate.ibm3.IBMModel3": [[265, 3, 1, "", "__init__"], [265, 3, 1, "", "maximize_distortion_probabilities"], [265, 3, 1, "", "prob_t_a_given_s"], [265, 3, 1, "", "reset_probabilities"], [265, 3, 1, "", "set_uniform_probabilities"], [265, 3, 1, "", "train"]], "nltk.translate.ibm3.Model3Counts": [[265, 3, 1, "", "__init__"], [265, 3, 1, "", "update_distortion"]], "nltk.translate.ibm4": [[266, 2, 1, "", "IBMModel4"], [266, 2, 1, "", "Model4Counts"]], "nltk.translate.ibm4.IBMModel4": [[266, 3, 1, "", "__init__"], [266, 3, 1, "", "maximize_distortion_probabilities"], [266, 3, 1, "", "model4_prob_t_a_given_s"], [266, 3, 1, "", "prob_t_a_given_s"], [266, 3, 1, "", "reset_probabilities"], [266, 3, 1, "", "set_uniform_probabilities"], [266, 3, 1, "", "train"]], "nltk.translate.ibm4.Model4Counts": [[266, 3, 1, "", "__init__"], [266, 3, 1, "", "update_distortion"]], "nltk.translate.ibm5": [[267, 2, 1, "", "IBMModel5"], [267, 2, 1, "", "Model5Counts"], [267, 2, 1, "", "Slots"]], "nltk.translate.ibm5.IBMModel5": [[267, 4, 1, "", "MIN_SCORE_FACTOR"], [267, 3, 1, "", "__init__"], [267, 3, 1, "", "hillclimb"], [267, 3, 1, "", "maximize_vacancy_probabilities"], [267, 3, 1, "", "prob_t_a_given_s"], [267, 3, 1, "", "prune"], [267, 3, 1, "", "reset_probabilities"], [267, 3, 1, "", "sample"], [267, 3, 1, "", "set_uniform_probabilities"], [267, 3, 1, "", "train"]], "nltk.translate.ibm5.Model5Counts": [[267, 3, 1, "", "__init__"], [267, 3, 1, "", "update_vacancy"]], "nltk.translate.ibm5.Slots": [[267, 3, 1, "", "__init__"], [267, 3, 1, "", "occupy"], [267, 3, 1, "", "vacancies_at"]], "nltk.translate.ibm_model": [[268, 2, 1, "", "AlignmentInfo"], [268, 2, 1, "", "Counts"], [268, 2, 1, "", "IBMModel"], [268, 1, 1, "", "longest_target_sentence_length"]], "nltk.translate.ibm_model.AlignmentInfo": [[268, 3, 1, "", "__init__"], [268, 4, 1, "", "alignment"], [268, 3, 1, "", "center_of_cept"], [268, 4, 1, "", "cepts"], [268, 3, 1, "", "fertility_of_i"], [268, 3, 1, "", "is_head_word"], [268, 3, 1, "", "previous_cept"], [268, 3, 1, "", "previous_in_tablet"], [268, 4, 1, "", "score"], [268, 4, 1, "", "src_sentence"], [268, 4, 1, "", "trg_sentence"], [268, 3, 1, "", "zero_indexed_alignment"]], "nltk.translate.ibm_model.Counts": [[268, 3, 1, "", "__init__"], [268, 3, 1, "", "update_fertility"], [268, 3, 1, "", "update_lexical_translation"], [268, 3, 1, "", "update_null_generation"]], "nltk.translate.ibm_model.IBMModel": [[268, 4, 1, "", "MIN_PROB"], [268, 3, 1, "", "__init__"], [268, 3, 1, "", "best_model2_alignment"], [268, 3, 1, "", "hillclimb"], [268, 3, 1, "", "init_vocab"], [268, 3, 1, "", "maximize_fertility_probabilities"], [268, 3, 1, "", "maximize_lexical_translation_probabilities"], [268, 3, 1, "", "maximize_null_generation_probabilities"], [268, 3, 1, "", "neighboring"], [268, 3, 1, "", "prob_of_alignments"], [268, 3, 1, "", "prob_t_a_given_s"], [268, 3, 1, "", "reset_probabilities"], [268, 3, 1, "", "sample"], [268, 3, 1, "", "set_uniform_probabilities"]], "nltk.translate.meteor_score": [[269, 1, 1, "", "align_words"], [269, 1, 1, "", "exact_match"], [269, 1, 1, "", "meteor_score"], [269, 1, 1, "", "single_meteor_score"], [269, 1, 1, "", "stem_match"], [269, 1, 1, "", "wordnetsyn_match"]], "nltk.translate.metrics": [[270, 1, 1, "", "alignment_error_rate"]], "nltk.translate.nist_score": [[271, 1, 1, "", "corpus_nist"], [271, 1, 1, "", "nist_length_penalty"], [271, 1, 1, "", "sentence_nist"]], "nltk.translate.phrase_based": [[272, 1, 1, "", "extract"], [272, 1, 1, "", "phrase_extraction"]], "nltk.translate.ribes_score": [[273, 1, 1, "", "corpus_ribes"], [273, 1, 1, "", "find_increasing_sequences"], [273, 1, 1, "", "kendall_tau"], [273, 1, 1, "", "position_of_ngram"], [273, 1, 1, "", "sentence_ribes"], [273, 1, 1, "", "spearman_rho"], [273, 1, 1, "", "word_rank_alignment"]], "nltk.translate.stack_decoder": [[274, 2, 1, "", "StackDecoder"]], "nltk.translate.stack_decoder.StackDecoder": [[274, 3, 1, "", "__init__"], [274, 4, 1, "", "beam_threshold"], [274, 3, 1, "", "compute_future_scores"], [274, 5, 1, "", "distortion_factor"], [274, 3, 1, "", "distortion_score"], [274, 3, 1, "", "expansion_score"], [274, 3, 1, "", "find_all_src_phrases"], [274, 3, 1, "", "future_score"], [274, 4, 1, "", "stack_size"], [274, 3, 1, "", "translate"], [274, 3, 1, "", "valid_phrases"], [274, 4, 1, "", "word_penalty"]], "nltk.tree": [[275, 2, 1, "", "ImmutableMultiParentedTree"], [275, 2, 1, "", "ImmutableParentedTree"], [275, 2, 1, "", "ImmutableProbabilisticTree"], [275, 2, 1, "", "ImmutableTree"], [275, 2, 1, "", "MultiParentedTree"], [275, 2, 1, "", "ParentedTree"], [275, 2, 1, "", "ProbabilisticTree"], [275, 2, 1, "", "Tree"], [275, 2, 1, "", "TreePrettyPrinter"], [275, 1, 1, "", "bracket_parse"], [275, 1, 1, "", "chomsky_normal_form"], [275, 1, 1, "", "collapse_unary"], [276, 0, 0, "-", "immutable"], [277, 0, 0, "-", "parented"], [278, 0, 0, "-", "parsing"], [279, 0, 0, "-", "prettyprinter"], [280, 0, 0, "-", "probabilistic"], [275, 1, 1, "", "sinica_parse"], [281, 0, 0, "-", "transforms"], [282, 0, 0, "-", "tree"], [275, 1, 1, "", "un_chomsky_normal_form"]], "nltk.tree.ImmutableProbabilisticTree": [[275, 3, 1, "", "__init__"], [275, 3, 1, "", "convert"], [275, 3, 1, "", "copy"]], "nltk.tree.ImmutableTree": [[275, 3, 1, "", "__init__"], [275, 3, 1, "", "append"], [275, 3, 1, "", "extend"], [275, 3, 1, "", "pop"], [275, 3, 1, "", "remove"], [275, 3, 1, "", "reverse"], [275, 3, 1, "", "set_label"], [275, 3, 1, "", "sort"]], "nltk.tree.MultiParentedTree": [[275, 3, 1, "", "__init__"], [275, 3, 1, "", "left_siblings"], [275, 3, 1, "", "parent_indices"], [275, 3, 1, "", "parents"], [275, 3, 1, "", "right_siblings"], [275, 3, 1, "", "roots"], [275, 3, 1, "", "treepositions"]], "nltk.tree.ParentedTree": [[275, 3, 1, "", "__init__"], [275, 3, 1, "", "copy"], [275, 3, 1, "", "left_sibling"], [275, 3, 1, "", "parent"], [275, 3, 1, "", "parent_index"], [275, 3, 1, "", "right_sibling"], [275, 3, 1, "", "root"], [275, 3, 1, "", "treeposition"]], "nltk.tree.ProbabilisticTree": [[275, 3, 1, "", "__init__"], [275, 3, 1, "", "convert"], [275, 3, 1, "", "copy"]], "nltk.tree.Tree": [[275, 3, 1, "", "__init__"], [275, 3, 1, "", "chomsky_normal_form"], [275, 3, 1, "", "collapse_unary"], [275, 3, 1, "", "convert"], [275, 3, 1, "", "copy"], [275, 3, 1, "", "draw"], [275, 3, 1, "", "flatten"], [275, 3, 1, "", "freeze"], [275, 3, 1, "", "fromlist"], [275, 3, 1, "", "fromstring"], [275, 3, 1, "", "height"], [275, 3, 1, "", "label"], [275, 3, 1, "", "leaf_treeposition"], [275, 3, 1, "", "leaves"], [275, 5, 1, "", "node"], [275, 3, 1, "", "pformat"], [275, 3, 1, "", "pformat_latex_qtree"], [275, 3, 1, "", "pos"], [275, 3, 1, "", "pprint"], [275, 3, 1, "", "pretty_print"], [275, 3, 1, "", "productions"], [275, 3, 1, "", "set_label"], [275, 3, 1, "", "subtrees"], [275, 3, 1, "", "treeposition_spanning_leaves"], [275, 3, 1, "", "treepositions"], [275, 3, 1, "", "un_chomsky_normal_form"]], "nltk.tree.TreePrettyPrinter": [[275, 3, 1, "", "__init__"], [275, 3, 1, "", "nodecoords"], [275, 3, 1, "", "svg"], [275, 3, 1, "", "text"]], "nltk.tree.immutable": [[276, 2, 1, "", "ImmutableMultiParentedTree"], [276, 2, 1, "", "ImmutableParentedTree"], [276, 2, 1, "", "ImmutableProbabilisticTree"], [276, 2, 1, "", "ImmutableTree"]], "nltk.tree.immutable.ImmutableProbabilisticTree": [[276, 3, 1, "", "__init__"], [276, 3, 1, "", "convert"], [276, 3, 1, "", "copy"]], "nltk.tree.immutable.ImmutableTree": [[276, 3, 1, "", "__init__"], [276, 3, 1, "", "append"], [276, 3, 1, "", "extend"], [276, 3, 1, "", "pop"], [276, 3, 1, "", "remove"], [276, 3, 1, "", "reverse"], [276, 3, 1, "", "set_label"], [276, 3, 1, "", "sort"]], "nltk.tree.parented": [[277, 2, 1, "", "MultiParentedTree"], [277, 2, 1, "", "ParentedTree"]], "nltk.tree.parented.MultiParentedTree": [[277, 3, 1, "", "__init__"], [277, 3, 1, "", "left_siblings"], [277, 3, 1, "", "parent_indices"], [277, 3, 1, "", "parents"], [277, 3, 1, "", "right_siblings"], [277, 3, 1, "", "roots"], [277, 3, 1, "", "treepositions"]], "nltk.tree.parented.ParentedTree": [[277, 3, 1, "", "__init__"], [277, 3, 1, "", "copy"], [277, 3, 1, "", "left_sibling"], [277, 3, 1, "", "parent"], [277, 3, 1, "", "parent_index"], [277, 3, 1, "", "right_sibling"], [277, 3, 1, "", "root"], [277, 3, 1, "", "treeposition"]], "nltk.tree.parsing": [[278, 1, 1, "", "bracket_parse"], [278, 1, 1, "", "sinica_parse"]], "nltk.tree.prettyprinter": [[279, 2, 1, "", "TreePrettyPrinter"]], "nltk.tree.prettyprinter.TreePrettyPrinter": [[279, 3, 1, "", "__init__"], [279, 3, 1, "", "nodecoords"], [279, 3, 1, "", "svg"], [279, 3, 1, "", "text"]], "nltk.tree.probabilistic": [[280, 2, 1, "", "ProbabilisticTree"]], "nltk.tree.probabilistic.ProbabilisticTree": [[280, 3, 1, "", "__init__"], [280, 3, 1, "", "convert"], [280, 3, 1, "", "copy"]], "nltk.tree.transforms": [[281, 1, 1, "", "chomsky_normal_form"], [281, 1, 1, "", "collapse_unary"], [281, 1, 1, "", "un_chomsky_normal_form"]], "nltk.tree.tree": [[282, 2, 1, "", "Tree"]], "nltk.tree.tree.Tree": [[282, 3, 1, "", "__init__"], [282, 3, 1, "", "chomsky_normal_form"], [282, 3, 1, "", "collapse_unary"], [282, 3, 1, "", "convert"], [282, 3, 1, "", "copy"], [282, 3, 1, "", "draw"], [282, 3, 1, "", "flatten"], [282, 3, 1, "", "freeze"], [282, 3, 1, "", "fromlist"], [282, 3, 1, "", "fromstring"], [282, 3, 1, "", "height"], [282, 3, 1, "", "label"], [282, 3, 1, "", "leaf_treeposition"], [282, 3, 1, "", "leaves"], [282, 5, 1, "", "node"], [282, 3, 1, "", "pformat"], [282, 3, 1, "", "pformat_latex_qtree"], [282, 3, 1, "", "pos"], [282, 3, 1, "", "pprint"], [282, 3, 1, "", "pretty_print"], [282, 3, 1, "", "productions"], [282, 3, 1, "", "set_label"], [282, 3, 1, "", "subtrees"], [282, 3, 1, "", "treeposition_spanning_leaves"], [282, 3, 1, "", "treepositions"], [282, 3, 1, "", "un_chomsky_normal_form"]], "nltk.treeprettyprinter": [[283, 2, 1, "", "TreePrettyPrinter"]], "nltk.treetransforms": [[284, 1, 1, "", "chomsky_normal_form"], [284, 1, 1, "", "collapse_unary"], [284, 1, 1, "", "un_chomsky_normal_form"]], "nltk.twitter": [[286, 0, 0, "-", "api"], [287, 0, 0, "-", "common"], [288, 0, 0, "-", "twitter_demo"], [289, 0, 0, "-", "twitterclient"], [290, 0, 0, "-", "util"]], "nltk.twitter.api": [[286, 2, 1, "", "BasicTweetHandler"], [286, 2, 1, "", "LocalTimezoneOffsetWithUTC"], [286, 2, 1, "", "TweetHandlerI"]], "nltk.twitter.api.BasicTweetHandler": [[286, 3, 1, "", "__init__"], [286, 4, 1, "", "counter"], [286, 3, 1, "", "do_continue"], [286, 4, 1, "", "do_stop"]], "nltk.twitter.api.LocalTimezoneOffsetWithUTC": [[286, 4, 1, "", "DSTOFFSET"], [286, 4, 1, "", "STDOFFSET"], [286, 3, 1, "", "utcoffset"]], "nltk.twitter.api.TweetHandlerI": [[286, 3, 1, "", "__init__"], [286, 3, 1, "", "check_date_limit"], [286, 3, 1, "", "handle"], [286, 3, 1, "", "on_finish"]], "nltk.twitter.common": [[287, 1, 1, "", "extract_fields"], [287, 1, 1, "", "get_header_field_list"], [287, 1, 1, "", "json2csv"], [287, 1, 1, "", "json2csv_entities"]], "nltk.twitter.twitter_demo": [[288, 7, 1, "", "ALL"], [288, 1, 1, "", "corpusreader_demo"], [288, 1, 1, "", "expand_tweetids_demo"], [288, 1, 1, "", "followtoscreen_demo"], [288, 1, 1, "", "limit_by_time_demo"], [288, 1, 1, "", "lookup_by_userid_demo"], [288, 1, 1, "", "sampletoscreen_demo"], [288, 1, 1, "", "search_demo"], [288, 1, 1, "", "setup"], [288, 1, 1, "", "streamtofile_demo"], [288, 1, 1, "", "tracktoscreen_demo"], [288, 1, 1, "", "tweets_by_user_demo"], [288, 1, 1, "", "twitterclass_demo"], [288, 1, 1, "", "verbose"], [288, 1, 1, "", "yesterday"]], "nltk.twitter.twitterclient": [[289, 2, 1, "", "Query"], [289, 2, 1, "", "Streamer"], [289, 2, 1, "", "TweetViewer"], [289, 2, 1, "", "TweetWriter"], [289, 2, 1, "", "Twitter"]], "nltk.twitter.twitterclient.Query": [[289, 3, 1, "", "__init__"], [289, 3, 1, "", "expand_tweetids"], [289, 3, 1, "", "register"], [289, 3, 1, "", "search_tweets"], [289, 3, 1, "", "user_info_from_id"], [289, 3, 1, "", "user_tweets"]], "nltk.twitter.twitterclient.Streamer": [[289, 3, 1, "", "__init__"], [289, 3, 1, "", "filter"], [289, 3, 1, "", "on_error"], [289, 3, 1, "", "on_success"], [289, 3, 1, "", "register"], [289, 3, 1, "", "sample"]], "nltk.twitter.twitterclient.TweetViewer": [[289, 3, 1, "", "handle"], [289, 3, 1, "", "on_finish"]], "nltk.twitter.twitterclient.TweetWriter": [[289, 3, 1, "", "__init__"], [289, 3, 1, "", "do_continue"], [289, 3, 1, "", "handle"], [289, 3, 1, "", "on_finish"], [289, 3, 1, "", "timestamped_file"]], "nltk.twitter.twitterclient.Twitter": [[289, 3, 1, "", "__init__"], [289, 3, 1, "", "tweets"]], "nltk.twitter.util": [[290, 2, 1, "", "Authenticate"], [290, 1, 1, "", "add_access_token"], [290, 1, 1, "", "credsfromfile"], [290, 1, 1, "", "guess_path"]], "nltk.twitter.util.Authenticate": [[290, 3, 1, "", "__init__"], [290, 3, 1, "", "load_creds"]], "nltk.util": [[291, 2, 1, "", "Index"], [291, 1, 1, "", "acyclic_branches_depth_first"], [291, 1, 1, "", "acyclic_breadth_first"], [291, 1, 1, "", "acyclic_depth_first"], [291, 1, 1, "", "acyclic_dic2tree"], [291, 1, 1, "", "bigrams"], [291, 1, 1, "", "binary_search_file"], [291, 1, 1, "", "breadth_first"], [291, 1, 1, "", "choose"], [291, 1, 1, "", "clean_html"], [291, 1, 1, "", "clean_url"], [291, 1, 1, "", "cut_string"], [291, 1, 1, "", "edge_closure"], [291, 1, 1, "", "edges2dot"], [291, 1, 1, "", "elementtree_indent"], [291, 1, 1, "", "everygrams"], [291, 1, 1, "", "filestring"], [291, 1, 1, "", "flatten"], [291, 1, 1, "", "guess_encoding"], [291, 1, 1, "", "in_idle"], [291, 1, 1, "", "invert_dict"], [291, 1, 1, "", "invert_graph"], [291, 1, 1, "", "ngrams"], [291, 1, 1, "", "pad_sequence"], [291, 1, 1, "", "pairwise"], [291, 1, 1, "", "parallelize_preprocess"], [291, 1, 1, "", "pr"], [291, 1, 1, "", "print_string"], [291, 1, 1, "", "re_show"], [291, 1, 1, "", "set_proxy"], [291, 1, 1, "", "skipgrams"], [291, 1, 1, "", "tokenwrap"], [291, 1, 1, "", "transitive_closure"], [291, 1, 1, "", "trigrams"], [291, 1, 1, "", "unique_list"], [291, 1, 1, "", "unweighted_minimum_spanning_dict"], [291, 1, 1, "", "unweighted_minimum_spanning_digraph"], [291, 1, 1, "", "unweighted_minimum_spanning_tree"]], "nltk.util.Index": [[291, 3, 1, "", "__init__"]], "nltk.wsd": [[292, 1, 1, "", "lesk"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "exception", "Python exception"], "7": ["py", "data", "Python data"]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:attribute", "5": "py:property", "6": "py:exception", "7": "py:data"}, "terms": {"": [7, 8, 10, 14, 22, 23, 25, 27, 28, 29, 30, 33, 34, 35, 36, 38, 39, 42, 43, 44, 47, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 113, 117, 118, 119, 120, 121, 124, 125, 127, 131, 132, 134, 135, 136, 142, 143, 144, 145, 146, 148, 149, 152, 159, 161, 162, 163, 165, 167, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 181, 182, 183, 184, 186, 187, 190, 191, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 223, 226, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 271, 272, 273, 275, 278, 279, 282, 288, 289, 290, 291, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 309, 310, 311, 312, 313, 314, 315, 316, 318, 320, 322, 323, 325, 326, 328, 329, 332, 333, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 356], "0": [14, 25, 28, 29, 30, 32, 33, 35, 36, 39, 46, 48, 52, 57, 67, 68, 72, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 91, 92, 95, 100, 104, 106, 107, 111, 113, 117, 120, 121, 126, 128, 129, 130, 131, 135, 137, 138, 140, 142, 144, 145, 146, 147, 148, 150, 151, 152, 154, 162, 163, 164, 165, 166, 167, 170, 171, 173, 174, 176, 177, 178, 179, 180, 183, 186, 192, 194, 196, 198, 207, 209, 213, 214, 215, 216, 217, 218, 222, 223, 229, 231, 232, 233, 234, 235, 236, 239, 240, 242, 243, 245, 251, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 281, 282, 289, 291, 296, 297, 299, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 351, 354, 356], "00": [151, 307, 344, 351], "000": [25, 96, 148, 151, 216, 305, 307, 331, 333, 343, 344, 356], "0000": [147, 214, 343], "000000000000": 328, "00001": 166, "000010000100": [151, 328], "000100000010": [151, 328], "001": [216, 232, 240, 343], "006060": 118, "007936507936": 301, "0099": 260, "01": [57, 72, 73, 95, 107, 121, 163, 291, 307, 313, 332, 334, 335, 340, 347, 351, 352, 353], "0100": 151, "011": [151, 260], "0111940298507": 301, "011363636": 334, "0123456789": 345, "017649766667026317": 334, "01a": 301, "01b": 301, "02": [57, 72, 95, 107, 163, 291, 292, 340, 347, 351, 352, 353], "0222": 325, "022727272727272728": 334, "028": 351, "02a": 301, "02b": 301, "03": [57, 95, 107, 273, 281, 284, 301, 307, 340, 351, 353], "033": [266, 267], "0370": 258, "03744e": 332, "0391": 307, "03a": 301, "03b": 301, "04": [57, 83, 91, 95, 96, 107, 301, 334, 335, 340, 351, 353], "05": [32, 163, 307, 325, 351, 353], "054": 265, "0578034682080": 301, "06": [48, 50, 57, 68, 107, 291, 332, 351, 353], "062": 263, "064": 336, "0666667": 332, "07": [332, 351, 353], "0714286": 332, "073": 263, "074": 339, "075": 351, "07692": 258, "079": 339, "08": [57, 72, 95, 307, 340], "08144": 262, "08144v2": 262, "0842696629213": 301, "08433050215340411": 334, "085": 343, "089": 260, "09": [352, 353], "090163934426": 301, "0909": 262, "090909": 325, "092": 339, "094": 339, "0a0": 356, "0a1": 356, "0a2": [352, 356], "0a4": 356, "0b": 356, "0b1": 356, "0b2": 356, "0b9": 356, "0f": 305, "0gebofduzn": 344, "0th": 273, "1": [23, 28, 29, 33, 36, 46, 48, 49, 50, 51, 52, 53, 57, 62, 67, 68, 72, 75, 78, 79, 80, 81, 85, 91, 92, 100, 102, 103, 105, 106, 107, 109, 111, 112, 113, 117, 118, 119, 120, 121, 130, 131, 134, 135, 136, 137, 138, 140, 142, 144, 145, 146, 147, 148, 150, 151, 152, 162, 163, 164, 165, 166, 167, 169, 170, 171, 176, 177, 178, 179, 182, 186, 187, 192, 198, 203, 204, 205, 209, 214, 216, 217, 218, 219, 223, 225, 229, 231, 232, 233, 235, 239, 242, 243, 246, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 279, 281, 282, 284, 286, 289, 290, 291, 292, 296, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 313, 314, 315, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 347, 348, 349, 350, 356], "10": [28, 32, 33, 35, 57, 72, 83, 90, 96, 100, 105, 106, 113, 118, 130, 131, 148, 163, 164, 170, 179, 184, 192, 197, 214, 216, 218, 242, 250, 251, 254, 257, 258, 260, 261, 272, 273, 279, 283, 288, 300, 301, 302, 304, 305, 307, 309, 310, 316, 317, 322, 325, 328, 329, 333, 334, 335, 336, 337, 343, 344, 346, 347, 348, 351, 353, 355, 356], "100": [32, 35, 52, 109, 148, 151, 197, 216, 234, 245, 258, 289, 296, 307, 313, 317, 325, 328, 333, 334, 339, 343, 344, 347], "1000": [38, 43, 57, 72, 197, 225, 229, 300, 303, 317, 333, 344, 347], "10000": [197, 309, 317, 333], "100000010000": [151, 328], "10020": [57, 72], "1004": 260, "1005": 333, "101": 245, "1011": [57, 72], "1017": [57, 106], "1019": [57, 72], "102": 245, "10200": 333, "1024": 39, "1027": 301, "1029_paper": [57, 85], "103": [245, 254, 335, 344], "1031": 225, "104": [96, 254, 344], "1040": [258, 259], "1044": 333, "1047": 333, "105": 245, "1054": [281, 284], "106": 245, "107": [57, 72, 240, 248], "10848": 333, "1086": 333, "109": [57, 72, 187, 190, 254, 344], "1092": 273, "10k": 356, "10th": 259, "11": [57, 91, 106, 130, 163, 166, 170, 240, 251, 254, 257, 258, 261, 297, 301, 303, 304, 306, 307, 310, 314, 315, 322, 329, 332, 333, 337, 343, 344, 348, 351, 355, 356], "110": [151, 245, 254, 305, 344], "1100": 300, "1100000001": 151, "1100010000": 151, "1100100000": 151, "1104": 220, "111": [151, 163, 245], "111111111111": 328, "112": [245, 339], "113": [245, 263], "11370": [57, 72], "114": 316, "115": 343, "1163": 305, "117": 343, "1178": 300, "1181": 291, "11829": [57, 72], "119": [254, 305, 344], "11904": 254, "119400": 67, "12": [91, 111, 113, 130, 163, 166, 216, 220, 236, 239, 245, 253, 254, 257, 258, 260, 261, 268, 286, 289, 301, 307, 310, 314, 322, 329, 332, 334, 337, 343, 344, 347, 348, 351, 355, 356], "120": [245, 254, 344], "12000": 307, "1206": 262, "121": [245, 343], "1212": 322, "122": [245, 254, 343, 344], "1221": [57, 72], "123": [254, 314, 328, 344, 350], "12345": 329, "12393": [57, 72], "124": [252, 254, 339], "125": [95, 148, 245, 331], "1256": 204, "12593": 328, "126": 245, "1270": 216, "127069": 67, "1274": 301, "1280": 300, "12879030": 325, "1289189": 271, "1289273": 271, "129": 245, "1291": 328, "13": [130, 131, 236, 239, 240, 245, 248, 253, 254, 257, 258, 261, 301, 305, 307, 310, 316, 322, 329, 332, 335, 337, 343, 344, 347, 351], "130": [100, 206, 209, 245], "1305": 333, "13085": 307, "131": [254, 344], "131072": 254, "132": [216, 254, 339, 344], "1324": 347, "133333": 332, "1338": 339, "134": 245, "1341": 334, "1342": 332, "13444": 333, "135": 245, "1354": 298, "13572": [57, 72], "136": [240, 248], "1368": [182, 300], "137": [206, 209, 333], "137404580152": 301, "138": [333, 339], "1380": 216, "1397": 301, "14": [25, 73, 83, 90, 130, 163, 198, 206, 209, 242, 245, 258, 261, 271, 301, 305, 307, 309, 310, 320, 322, 323, 325, 329, 332, 343, 347], "141": [245, 279, 283], "1415": 258, "14159": 131, "142": [245, 351], "142857": 332, "14287173": 305, "143": 233, "14307668": [305, 328], "1453": 133, "14620633": 72, "1464": 334, "14642": [57, 72], "14646110": 325, "1468": 259, "147": [258, 307], "14733": [57, 72, 315], "14743": [57, 72, 315], "14744": [57, 72], "14751": 356, "14826": 307, "14894": [57, 72], "149": [279, 283, 305, 339], "14920": [57, 72], "1494": [57, 72], "1496": 300, "14th": [83, 90], "15": [57, 73, 91, 118, 130, 148, 152, 166, 198, 202, 214, 245, 258, 261, 289, 291, 297, 301, 303, 307, 310, 313, 320, 322, 329, 332, 333, 343, 347], "150": [328, 344], "1500": [57, 60], "15019": 305, "15082": [57, 72], "151": 297, "152901": 307, "1531": 339, "1538": 307, "15384615384615385": 135, "154696132596": 301, "1551": 300, "156": 343, "15618": 307, "15625": 331, "15629": 305, "15649": 307, "15676": 307, "15686289": 325, "157": [279, 283, 339], "15728": 307, "15820": 305, "15828": [305, 328], "1583": 301, "15871": 307, "16": [57, 100, 103, 117, 130, 166, 202, 214, 216, 245, 254, 259, 261, 275, 279, 301, 303, 307, 310, 329, 331, 335, 339, 343, 344], "160": [100, 307, 351], "1609": 262, "161": 351, "162": 216, "163": 343, "16384": 104, "1641": 351, "166": 339, "1676": [57, 72], "1685": 307, "1695": 339, "169811320754": 301, "16khz": [57, 100], "17": [130, 201, 216, 236, 239, 245, 253, 254, 258, 261, 297, 301, 307, 310, 315, 329, 332, 335, 344], "1740": [57, 107], "175": [334, 351], "17697228144989338": 333, "177": 151, "1776": 216, "1789": 307, "1793": 307, "1795": 300, "1797": 307, "18": [57, 68, 72, 90, 107, 130, 215, 216, 236, 239, 253, 254, 261, 301, 305, 307, 310, 322, 329, 332, 336, 344, 351], "1816": 307, "185": [169, 240, 248], "1859": 216, "186": 339, "1881": 333, "189": [57, 72, 315], "1899": 333, "19": [130, 151, 202, 214, 216, 239, 253, 261, 263, 264, 265, 266, 267, 268, 301, 307, 322, 329, 343, 344], "1904": [57, 72, 240, 248], "1909": 307, "1910": 22, "192": 339, "1926": 242, "1945": 307, "1946": 307, "1954": 144, "1955": 144, "1960": 144, "1962": 305, "196607": 254, "1968": 144, "1970": 165, "1972": 240, "1973": 301, "1976": 240, "1980": [144, 148, 206, 209], "1982": 144, "1984": [240, 248, 307], "1985": 148, "1986": [292, 301], "1988": 144, "1989": [148, 218], "199": 343, "1990": [53, 57, 105, 148, 205], "1991": 301, "1993": [260, 263, 264, 265, 266, 267, 268, 305], "1994": [88, 149, 333], "1995": [136, 138, 140, 179, 215], "1996": [146, 172], "1998": [57, 67, 73, 79, 105, 134, 291, 307], "1999": [73, 96, 134, 151], "1a": [209, 307], "1b": 209, "1e": [48, 50, 152, 259, 268, 327, 328], "1e5": 334, "1f": 305, "1gram_1": 146, "1gram_j": 146, "1h15m": 356, "1rc1": 356, "1rc2": 356, "1rc3": 356, "1rc4": 356, "1st": [148, 259], "2": [0, 14, 25, 28, 33, 46, 48, 49, 52, 53, 57, 67, 68, 72, 75, 78, 80, 83, 85, 91, 92, 94, 96, 100, 103, 104, 105, 107, 109, 111, 112, 119, 120, 130, 131, 133, 135, 136, 137, 141, 142, 144, 146, 148, 151, 154, 156, 162, 163, 164, 165, 166, 169, 170, 171, 173, 174, 176, 177, 178, 179, 182, 186, 197, 198, 204, 205, 209, 214, 216, 217, 222, 223, 225, 229, 231, 232, 233, 234, 235, 239, 242, 243, 245, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 279, 281, 282, 283, 284, 290, 291, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 317, 318, 320, 322, 325, 327, 328, 329, 331, 332, 333, 334, 335, 337, 338, 343, 344, 345, 346, 347, 348, 349, 350, 354, 356], "20": [57, 72, 113, 119, 130, 148, 158, 163, 165, 167, 214, 218, 234, 251, 254, 260, 261, 286, 288, 301, 305, 307, 315, 317, 322, 328, 329, 333, 335, 336, 343, 344, 346], "200": [57, 72, 216, 288, 289, 307, 315, 328, 333, 343], "2000": [29, 96, 258, 289, 293, 301, 307, 343, 346], "20000410_nyt": [57, 72], "2001": [57, 72, 105, 240, 301, 315, 356, 358], "2002": [145, 151, 192, 218, 243, 258, 271, 307], "2003": [281, 284, 346, 358], "2004": [57, 63, 83, 91, 96, 258], "2005": [63, 83, 90, 134, 170, 188, 204, 261, 358], "2006": [57, 68, 105, 148, 243, 279, 283], "2007": [144, 269, 299, 307, 358], "2008": [68, 90, 91, 322, 358], "2009": [0, 151, 240, 248, 354], "201": 216, "2010": [57, 72, 263, 264, 265, 266, 267, 268, 273, 274, 301, 346, 358], "2011": [132, 358], "2012": [245, 358], "2013": [216, 258, 317, 358], "2014": [57, 85, 198, 252, 258, 296, 358], "20141018104200": 356, "2014a": [57, 106], "2014b": [57, 106], "2015": [57, 106, 259, 286, 289, 358], "20150430": 307, "2016": [250, 259, 262, 358], "2017": [201, 203, 240, 358], "2018": 358, "2019": 202, "201c": 344, "201d": 344, "202": 315, "2020": 358, "2024": 309, "2027": [57, 106], "203": [240, 248], "2031": 300, "2039": [57, 106], "204": 351, "205": 273, "2065": 351, "2067": 344, "2070": [57, 72], "2086": 220, "209": 339, "20k": 307, "21": [254, 257, 261, 301, 307, 322, 329, 332, 343, 344, 351], "210": 151, "211852": 333, "21578": 356, "217": 179, "2170": 348, "2190": 307, "22": [68, 83, 90, 214, 216, 245, 261, 301, 307, 314, 329, 332, 334, 335, 336, 343], "221": [305, 339, 351], "222222": 346, "223406": 307, "224": 351, "2263": 339, "227": [57, 72], "2271": [57, 72], "2278": 351, "228": 343, "22nd": [68, 90], "23": [57, 63, 72, 163, 168, 232, 236, 239, 245, 253, 254, 261, 301, 307, 322, 329, 332, 339, 344], "231": 333, "2310": 333, "233": [57, 72, 339], "2341": 259, "236": 273, "2369": 333, "237": 179, "23701322869105": 325, "239": 339, "24": [57, 73, 91, 135, 163, 205, 215, 216, 236, 239, 245, 253, 254, 261, 303, 305, 307, 329, 335, 343, 344], "2417": [216, 343], "243": 216, "244": 339, "2444": 325, "245014": 343, "246": 339, "247": 301, "2478": 347, "248": 339, "249": 333, "25": [83, 95, 148, 214, 234, 245, 258, 261, 273, 301, 307, 320, 326, 329, 332, 333, 335, 340, 343, 344, 350, 351], "250": 356, "2500": 303, "252": 351, "254": 339, "2541": 339, "2552": 305, "2554": [57, 61], "256": [57, 72, 232, 315, 333], "26": [57, 72, 216, 236, 239, 245, 253, 254, 261, 307, 329, 343, 344], "262": [57, 72], "263": [263, 264, 265, 266, 267, 268], "2635971381157267": 258, "264": 339, "265": 339, "2650": 351, "2652": 216, "2667": 343, "2673": 301, "27": [57, 72, 92, 186, 216, 236, 239, 245, 253, 254, 261, 262, 307, 311, 313, 328, 329, 335, 336, 343, 344], "270": [305, 356], "271": 343, "2721": 351, "2732": 339, "2738": 343, "274": [57, 72], "2743": 301, "2751": 327, "276": 339, "277": 339, "2770": [57, 86], "279": 333, "28": [151, 214, 258, 261, 307, 322, 329, 332, 343], "280": 356, "28352": 332, "284": 351, "285": 351, "2857": 258, "286": 339, "2860": 356, "29": [73, 166, 201, 245, 305, 307, 310, 329, 343, 344], "292": 333, "292481250360578": 135, "292682926829": 301, "293": 198, "2935416": 72, "294": 339, "29421": 333, "2944": 339, "296": 343, "297": 339, "2970": 343, "299": 339, "2a": 209, "2b": 209, "2d": [57, 107, 351], "2f": [151, 303, 305, 334], "2gram_1": 146, "2gram_k": 146, "2nd": [96, 179, 328], "2pr": [147, 214, 328], "3": [0, 28, 29, 30, 33, 42, 46, 52, 53, 57, 68, 70, 72, 73, 80, 84, 85, 89, 91, 92, 100, 105, 107, 109, 111, 117, 119, 130, 131, 133, 135, 136, 137, 142, 144, 146, 147, 148, 151, 162, 163, 164, 166, 170, 176, 177, 179, 184, 186, 189, 196, 198, 201, 204, 205, 206, 209, 213, 214, 216, 222, 223, 225, 229, 231, 233, 234, 236, 238, 239, 242, 243, 244, 245, 247, 249, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 282, 286, 287, 291, 299, 301, 302, 303, 305, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 322, 325, 328, 329, 332, 333, 334, 337, 338, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 358], "30": [57, 72, 113, 125, 126, 151, 236, 239, 243, 245, 253, 254, 286, 289, 301, 307, 315, 329, 333, 343, 344], "300": [25, 216, 229, 305, 317, 328, 343, 344, 351, 356], "3000": [303, 307, 343], "3002": [182, 300], "3004": 299, "301": [333, 339], "305": 216, "306": [231, 339], "3077": 351, "308": [240, 248], "309": 339, "31": [176, 216, 236, 239, 245, 250, 253, 254, 307, 329, 332, 343, 344], "311": [240, 248, 263, 264, 265, 266, 267, 268], "312": 351, "3128": [291, 294], "313": 333, "314": [258, 339], "3153": 339, "316": [240, 248], "31607e": 332, "31740": 305, "31777": 305, "318728": 292, "32": [216, 239, 243, 245, 253, 305, 307, 322, 329, 344], "32154": 307, "3238": [57, 72], "325": [305, 339], "326": 339, "327": 339, "32k": 307, "33": [216, 245, 258, 296, 307, 313, 314, 329, 332, 343], "333": 258, "3330": 259, "3333": [57, 107], "333333": 346, "33333333": 302, "334": 258, "3346": [258, 296], "335": 351, "34": [151, 245, 254, 307, 329, 343, 344, 351], "340": 356, "3412": 339, "34200": 286, "343": [109, 339], "3430": 307, "344": 339, "345": 339, "347": 305, "3481": 300, "349": 333, "35": [245, 254, 258, 305, 307, 320, 328, 329, 332, 343, 344], "351": 334, "352962": [57, 72], "353": 151, "354": 148, "3553": 339, "3571": 303, "35746606334": 301, "3574660633484": 301, "359": [148, 299], "3597": 273, "36": [151, 216, 236, 239, 245, 253, 254, 307, 329, 332, 344, 351], "3600": [113, 343], "3606": 301, "3612": 339, "3621": 307, "363": 339, "366": [315, 344], "3684": 343, "37": [57, 105, 215, 239, 245, 253, 254, 307, 329, 344], "3709": 271, "371": 231, "375": [151, 331, 339], "38": [236, 239, 245, 253, 254, 305, 307, 344], "382": [273, 351], "3832": 339, "384": 339, "386": 305, "39": [67, 307, 320, 332], "3910": 259, "3920": 258, "394": 339, "395": 351, "397": 216, "39705": 356, "3__20000410_nyt": [57, 72], "3b": 209, "3b6uxpz0l": 344, "3class": 224, "3f": [305, 331], "3p": 301, "3point": 344, "3rd": 117, "4": [32, 33, 46, 53, 57, 68, 72, 85, 92, 96, 100, 105, 107, 109, 119, 130, 135, 137, 138, 146, 148, 163, 164, 170, 176, 177, 179, 186, 191, 203, 207, 209, 214, 216, 221, 229, 236, 239, 245, 253, 254, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 282, 286, 289, 291, 296, 299, 300, 301, 302, 303, 305, 307, 310, 313, 314, 315, 316, 318, 322, 325, 327, 328, 329, 331, 332, 333, 334, 335, 337, 339, 343, 344, 346, 347, 348, 350, 351, 356], "40": [239, 253, 286, 289, 305, 307, 328, 332, 344, 356], "400": [151, 328, 345, 347], "4000": [214, 251, 307, 333, 343], "40000": 307, "406": [148, 245], "409": 240, "41": [303, 307, 328, 332, 339], "411": 305, "4111": 343, "4118": 258, "412": 339, "4135": 258, "414": 148, "414213562373095": 119, "4167": 303, "4199": 339, "42": [131, 149, 234, 245, 305, 307, 313, 316, 328, 339], "420": [288, 289], "4200": 343, "421": 305, "4215": 339, "42191": 254, "423": 179, "425": 336, "4267": 296, "4269": 343, "427": 351, "428": 351, "429": [307, 351], "42960": 88, "43": [245, 254, 301, 307, 344], "430": 351, "43072": 254, "431": 339, "43135": 254, "4326": 307, "4352": 254, "4356": 343, "436": 240, "4376": 301, "43834": 216, "4393": 262, "43981": 317, "43996744": 216, "44": [236, 240, 245, 254, 307, 344], "44032": 254, "4404": 339, "4409": 301, "4435": 343, "444": [117, 339], "4452": 258, "449": 351, "449489742783178": 135, "44k": 317, "45": [57, 72, 113, 128, 236, 254, 307, 315, 344], "450": 334, "4503599627370496": 258, "4543158": 351, "4545": 343, "456400": 305, "456790123456": 301, "46": [163, 239, 245, 253, 254, 303, 307, 344], "4600addf38b8": 140, "4607": 254, "4619": 271, "462": 339, "463": 305, "466": 333, "4667": [305, 325], "467": 148, "46742": 88, "4675": [305, 328], "4678": 339, "47": [57, 60, 133, 216, 239, 245, 253, 254, 258, 307, 343, 344, 356], "470": 351, "4719": 258, "4721": 305, "474": 320, "4746": 216, "4767": 339, "477": 339, "4792899408284": 301, "47e": 258, "48": [236, 239, 253, 254, 307, 332, 344, 356], "482": 351, "484": 351, "485": 243, "487603305785": 301, "488372093023": 301, "49": [236, 254, 307, 315, 343], "4905": 258, "492": 339, "492857142857": 301, "493": 339, "4953": 307, "496": 343, "497": 339, "4986": 332, "4f": [303, 305], "5": [25, 29, 33, 36, 52, 53, 57, 72, 79, 85, 91, 92, 96, 100, 106, 107, 109, 113, 117, 130, 135, 144, 146, 147, 148, 150, 151, 155, 162, 163, 165, 166, 170, 176, 177, 179, 192, 198, 209, 213, 214, 216, 218, 221, 222, 236, 239, 243, 252, 253, 254, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 279, 282, 288, 291, 299, 301, 302, 303, 305, 307, 310, 313, 314, 316, 318, 320, 322, 327, 328, 329, 331, 332, 333, 334, 336, 337, 338, 343, 344, 345, 346, 347, 348, 350, 351, 356], "50": [57, 72, 149, 151, 158, 162, 165, 245, 266, 305, 307, 317, 322, 334, 335, 344, 354], "500": [57, 72, 126, 163, 213, 223, 229, 315, 322, 334, 335], "5000": [147, 179, 197, 214, 307, 343], "501": 305, "5020": 301, "5021": 343, "5045": 258, "508": 339, "5082": 307, "51": [145, 216, 236, 239, 245, 253, 254, 307, 332, 334, 344], "511": 334, "512": 131, "513": 305, "516": 333, "5167": 314, "517": 339, "5172": 314, "52": [145, 236, 239, 245, 253, 254, 307, 332, 344], "52266": 117, "5228": 339, "5249": 339, "525": [243, 252, 344], "5265": 307, "5276": 307, "5277": 307, "5279": 307, "528": 305, "53": [239, 253, 307, 329, 332, 344], "533": [300, 334], "5331": 307, "534": 339, "538": 339, "54": [145, 254, 257, 303, 307, 328, 343, 344], "5407": 300, "541": 351, "5423": 339, "5429": 307, "5430": 307, "5431": 307, "5461": 339, "55": [236, 239, 245, 253, 254, 305, 306, 307, 314, 344], "5517": 332, "55215": 254, "555": [163, 343], "5556": 343, "556": 339, "557": 201, "5574": 339, "56": [205, 236, 239, 245, 253, 254, 307, 329, 344], "5624": 307, "565": 96, "5670": 343, "5673": 262, "57": [245, 307, 329, 344], "571": 351, "571007": 305, "5714": [214, 258, 343], "5728": 307, "573": 201, "5753": 343, "5777": 339, "5789": 343, "579": [334, 339], "5797": 343, "58": [216, 236, 245, 254, 307, 339, 343, 344], "581196": 343, "5818": 258, "5833": 303, "5849": 339, "5859": 339, "588": 339, "5882": 343, "5882352941176471": 258, "59": [236, 239, 245, 253, 254, 303, 305, 307, 332, 339, 344], "591": 273, "5920": 258, "59699508": [57, 72], "5th": 292, "6": [52, 57, 67, 72, 91, 100, 107, 130, 131, 151, 163, 166, 176, 177, 184, 209, 214, 216, 222, 254, 257, 258, 259, 260, 261, 266, 267, 272, 273, 274, 291, 297, 299, 301, 303, 305, 307, 310, 313, 314, 315, 316, 322, 325, 328, 329, 332, 334, 335, 337, 343, 344, 346, 347, 348, 350, 354, 356], "60": [128, 163, 204, 239, 253, 254, 307, 309, 328, 333, 344], "600": [213, 252, 331, 344], "6000": 307, "603": 216, "60375": [57, 103], "6043": [57, 72], "606": 339, "607": 339, "61": [166, 205, 245, 254, 307, 310, 320, 332, 344, 351], "6111": 343, "6124": 339, "6144": 262, "615": 305, "616": 339, "618": 343, "62": [239, 245, 253, 307, 344], "6223": 258, "623": 351, "6240": 258, "625": 339, "6270": 347, "6281": 339, "6283": 258, "629": 351, "63": [216, 239, 245, 253, 307, 344], "631": 351, "6316": 343, "6317": 322, "632": 305, "633": 333, "6349": 259, "6369": 339, "637": [305, 339], "63744": 254, "639": [42, 57, 70, 84, 107, 213, 308, 351], "64": [216, 236, 254, 307, 343, 344, 355], "6415": 343, "64255": 254, "6429": [303, 343], "6471": 343, "65": [72, 305, 307, 320, 332], "65072": 254, "65103": 254, "653": 307, "65381": 254, "655": 339, "65500": 254, "656": 339, "657": 339, "6572": 339, "65870": 317, "659": 307, "66": [236, 254, 307, 329, 334], "66031": 351, "6605": 315, "6617": 259, "6620291452234629": 258, "665": [57, 72, 148, 315], "66666": 346, "666666": 328, "6666666666666667": 270, "6667": [147, 214, 343], "67": [216, 245, 254, 305, 307, 329, 344], "6723": 343, "6732": 339, "674": 339, "675": 339, "6759": 339, "67809": 317, "68": [239, 245, 253, 254, 307, 344], "6830": 67, "686": 339, "6897": 343, "69": [216, 239, 253, 307, 344], "6905": 343, "692": [57, 72], "694": 339, "6944": 269, "697": 339, "7": [33, 52, 57, 72, 73, 100, 107, 130, 131, 163, 169, 176, 209, 214, 216, 222, 233, 243, 254, 257, 258, 260, 261, 267, 268, 272, 273, 275, 279, 298, 299, 301, 303, 307, 309, 310, 313, 314, 320, 328, 329, 332, 333, 334, 335, 337, 343, 344, 345, 347, 348, 350, 351, 356], "70": [32, 239, 245, 253, 275, 282, 291, 307, 333, 344], "700": [57, 72, 216], "7000": 303, "70039": 317, "700439718141092": 135, "701": 339, "703": 339, "7042": 339, "705": 258, "706": 339, "7067": 258, "7075187496": 328, "71": [245, 307, 332, 344], "71181": 317, "713": 233, "714": 339, "7143": [214, 343], "72": [155, 245, 254, 305, 307, 344], "720": 329, "722": 148, "7227": 307, "724": 339, "728135": 308, "73": [57, 72, 236, 254, 307, 334, 344], "733": 198, "735": [213, 339], "736": 339, "7393": 343, "7398": 339, "74": [198, 281, 284, 307, 313], "7431": 343, "7447": 343, "7453": 258, "746": 339, "7464": 343, "749999": 328, "75": [28, 135, 138, 140, 179, 245, 254, 265, 307, 334, 340, 344, 346], "7500": [147, 303], "752": 339, "7537647": 343, "754": 339, "756": 339, "7565": 339, "758": 351, "7583": 343, "7584": 339, "76": [239, 245, 253, 254, 303, 307, 344], "7609": 343, "7616": 339, "7640": 343, "7647": 343, "7661": 332, "767": 339, "769230": 343, "77": [239, 245, 253, 307, 343, 344], "7704": 343, "77098": 333, "7714": 343, "7725": 333, "7778": 343, "779": 339, "78": [57, 72, 239, 245, 253, 307, 344], "7806": 327, "783": 148, "785fb79": 144, "78840": 317, "79": [234, 281, 284, 307, 343], "790": 148, "791": [307, 339], "7925": 339, "7948": 343, "79953": 144, "7_e_meio": 333, "7b1": 356, "8": [0, 25, 39, 52, 57, 95, 100, 103, 111, 113, 130, 148, 166, 170, 176, 192, 197, 209, 216, 218, 222, 224, 229, 250, 252, 255, 257, 258, 260, 261, 272, 273, 274, 288, 301, 303, 305, 307, 310, 313, 314, 320, 322, 325, 328, 329, 331, 332, 334, 335, 337, 339, 341, 343, 344, 348, 350, 351, 355, 356], "80": [0, 148, 151, 180, 234, 245, 307, 339, 343], "800": 331, "8000": [10, 214, 343], "801": 301, "805": 148, "8056": 343, "81": [148, 245, 307, 343, 344], "8103": 343, "811": 305, "8167": 343, "8174": 343, "8182": 343, "82": [144, 245, 307, 334, 344], "8211": 339, "822": 148, "823": 29, "8242": 258, "8246": 343, "8298": 343, "83": [254, 307, 339, 344], "8316": 339, "832": 148, "833": 148, "8333": [214, 343], "834": 339, "8345": 343, "8364": 343, "8365": 343, "839": 67, "84": [148, 254, 303, 307, 339, 344], "8410": 343, "8414": 343, "8439": 339, "847": 216, "8476": 343, "85": [216, 245, 307, 351], "851": 339, "8525": 343, "853": [57, 68, 148, 307], "8545": 339, "856": 148, "857": 351, "8571": [214, 343], "857142": 328, "858": 148, "86": [245, 307, 313, 334, 343], "8615": 214, "8667": 343, "8668": 258, "867": 148, "868": [328, 339], "869": 148, "8696": 343, "87": [96, 245, 307], "87029140014214645": 333, "875": 95, "876": 339, "8773584905660": 301, "88": [144, 148, 163, 236, 239, 242, 243, 244, 245, 247, 249, 253, 254, 307, 334, 341, 344], "880": 148, "8800": 214, "8804": [307, 343], "8859": [57, 62, 103, 111, 219, 333, 343], "885931": 343, "886": 351, "8879": 72, "888": [117, 339], "88888888888": [328, 341], "8889": [214, 343], "889": [148, 263], "89": [254, 260, 307, 343, 344], "89019189765458417": 333, "891": 305, "8929": [214, 343], "893": 148, "894": 73, "896": 148, "897": 333, "8980": 214, "8994": 343, "9": [52, 57, 72, 76, 84, 91, 92, 105, 130, 135, 163, 166, 169, 176, 209, 216, 223, 233, 242, 252, 254, 257, 258, 261, 269, 272, 273, 274, 301, 303, 305, 307, 310, 313, 314, 322, 328, 329, 332, 333, 334, 337, 343, 344, 348, 350, 351, 355, 356], "90": [254, 307, 334, 335, 339, 344], "900": [148, 343], "9000": [163, 343], "905": 148, "906": 334, "9098": 343, "91": [245, 254, 307, 329], "911": [148, 351], "913": 148, "9130": 343, "9136": 343, "9139": 343, "915": 343, "9167": 214, "917": 148, "92": [245, 307, 329, 334], "9200": 258, "921": 148, "922": 148, "9227": 339, "9231": 343, "926": 148, "93": [245, 254, 307, 334], "930": 305, "9314": 343, "932": 328, "933": 148, "9333": 214, "9342": 339, "9349_d\u00f3lare": 307, "9352": 335, "9353": 335, "9355": 343, "9375": 343, "9383": 343, "939": 264, "93winkler_dist": 148, "94": [245, 307], "943": 148, "9434": [214, 343], "944": 148, "9444": [258, 343], "9452_d\u00f3lare": 307, "9469": 339, "947": 148, "9480": 343, "95": [245, 305], "9500": 214, "951": 140, "956": 148, "9580": 343, "96": 313, "961": [148, 305], "961783439490": 301, "9630": 343, "9643": 343, "9654": 327, "9667": 343, "967": 148, "9674": 343, "970": 148, "9734": 307, "9744": 214, "9780596516499": 356, "9784873114705": 356, "98": [254, 332, 344], "9819": 343, "982": 148, "9865": 307, "9872": 343, "988": 301, "9880": 307, "99": [216, 254, 314, 344, 351], "9935": 343, "995": 305, "997": 163, "9977": 327, "999": [274, 328], "9999": 305, "9_": 120, "9b1": 356, "9b2": 356, "A": [0, 2, 3, 7, 8, 10, 13, 14, 16, 18, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 93, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 131, 135, 136, 144, 145, 146, 147, 148, 149, 150, 151, 160, 161, 162, 164, 165, 167, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 243, 244, 245, 246, 247, 251, 252, 253, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 270, 272, 274, 275, 277, 278, 281, 282, 284, 286, 289, 291, 292, 294, 296, 299, 300, 302, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 319, 320, 322, 323, 326, 329, 330, 332, 333, 335, 336, 337, 339, 343, 344, 345, 346, 347, 348, 351, 356], "AND": [57, 84, 123, 130, 180, 188, 191, 232], "AS": [57, 84, 100], "AT": [213, 216, 223, 307, 310, 343], "And": [15, 118, 135, 243, 258, 307, 334, 346], "As": [28, 57, 75, 131, 133, 135, 148, 170, 182, 218, 258, 263, 300, 307, 311, 314, 322, 323, 343, 347, 351], "At": [2, 28, 33, 104, 150, 307, 339, 354], "BE": 225, "BUT": 339, "BY": [57, 84], "But": [25, 57, 99, 104, 107, 120, 160, 223, 245, 306, 307, 309, 314, 323, 334, 339, 351], "By": [39, 52, 57, 66, 69, 75, 99, 107, 108, 113, 118, 119, 120, 124, 135, 136, 142, 179, 233, 238, 244, 246, 259, 275, 282, 300, 302, 307, 309, 322, 347, 351], "For": [10, 12, 23, 25, 30, 33, 35, 39, 40, 42, 55, 57, 59, 61, 65, 70, 72, 80, 81, 87, 88, 89, 91, 93, 95, 97, 105, 107, 108, 111, 113, 117, 118, 119, 120, 121, 125, 127, 132, 135, 136, 148, 159, 162, 165, 170, 171, 173, 174, 178, 179, 181, 182, 186, 191, 196, 203, 206, 213, 214, 216, 218, 224, 229, 231, 232, 233, 235, 236, 243, 244, 246, 247, 248, 258, 259, 262, 266, 267, 268, 274, 275, 281, 282, 284, 287, 288, 289, 290, 291, 294, 300, 305, 307, 308, 309, 313, 314, 315, 317, 319, 322, 325, 328, 333, 335, 336, 344, 346, 347, 351, 355, 356], "IN": [25, 28, 120, 147, 163, 166, 175, 176, 177, 213, 214, 216, 219, 221, 222, 223, 224, 275, 276, 302, 307, 310, 328, 332, 335, 336, 341, 343, 347, 348, 349, 354], "IT": 345, "If": [0, 7, 8, 10, 13, 16, 25, 28, 32, 33, 34, 35, 36, 39, 43, 44, 52, 55, 57, 58, 59, 61, 64, 65, 66, 69, 70, 71, 72, 74, 75, 77, 79, 80, 82, 83, 84, 85, 86, 91, 93, 94, 98, 99, 100, 102, 104, 105, 107, 108, 109, 110, 111, 113, 117, 118, 119, 120, 121, 124, 125, 127, 128, 131, 135, 136, 137, 138, 142, 144, 147, 150, 156, 162, 163, 164, 165, 167, 169, 171, 173, 174, 175, 177, 178, 179, 183, 184, 186, 189, 190, 191, 192, 196, 197, 198, 204, 205, 209, 214, 215, 218, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 236, 238, 239, 243, 246, 247, 248, 250, 253, 255, 257, 258, 263, 264, 265, 266, 267, 268, 269, 274, 275, 276, 277, 279, 282, 287, 288, 289, 290, 291, 294, 296, 305, 307, 309, 311, 314, 315, 321, 322, 325, 327, 330, 343, 345, 347, 351, 354, 355], "In": [8, 14, 25, 28, 30, 33, 35, 36, 39, 43, 52, 57, 72, 85, 86, 92, 100, 104, 119, 120, 121, 131, 135, 138, 142, 144, 145, 147, 148, 149, 150, 162, 167, 170, 171, 173, 174, 178, 179, 182, 192, 203, 214, 218, 223, 231, 233, 240, 241, 244, 245, 246, 248, 257, 258, 259, 261, 263, 264, 265, 266, 267, 269, 272, 273, 274, 275, 277, 281, 284, 286, 294, 296, 300, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 322, 326, 333, 335, 336, 338, 343, 347, 351, 352], "Ine": 109, "It": [7, 10, 14, 15, 24, 25, 28, 29, 35, 37, 38, 43, 46, 48, 49, 50, 52, 53, 57, 79, 81, 89, 99, 100, 102, 103, 104, 105, 107, 109, 112, 113, 117, 119, 121, 126, 128, 135, 137, 142, 145, 155, 159, 162, 165, 169, 170, 171, 172, 173, 174, 178, 182, 186, 188, 197, 201, 202, 203, 206, 213, 223, 225, 231, 238, 239, 243, 253, 258, 259, 262, 267, 269, 271, 273, 281, 284, 287, 296, 300, 305, 307, 308, 309, 311, 314, 317, 322, 323, 333, 336, 339, 343, 344, 346, 347, 354, 356], "Its": [2, 8, 25, 162, 234, 241, 326], "NOT": [72, 180, 188, 191, 196, 225, 271], "No": [146, 172, 201, 205, 246, 258, 272, 281, 284, 291, 307, 311, 330, 333, 344], "Not": [57, 72, 307, 311], "OF": 306, "ON": [57, 84, 306], "OR": [123, 127, 130, 180, 188, 191, 229, 232, 258, 281, 284], "Of": [24, 67, 211, 306, 311], "On": [8, 57, 90, 96, 104, 113, 240, 248, 294, 307, 308, 344, 351], "One": [93, 135, 136, 148, 275, 282, 307, 314, 322, 337], "Or": [233, 305, 344, 351], "Such": 243, "THE": 306, "THERE": 306, "TO": [37, 214, 216, 307, 332, 335, 343], "That": [57, 72, 80, 306, 313, 314, 322, 343], "The": [0, 2, 7, 8, 10, 14, 15, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 43, 46, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 140, 142, 144, 146, 147, 148, 150, 152, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 191, 192, 196, 197, 198, 200, 201, 202, 203, 204, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 251, 252, 253, 254, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 323, 325, 326, 327, 328, 329, 330, 332, 333, 335, 336, 338, 339, 342, 343, 344, 345, 346, 347, 351, 353, 354, 356], "Their": 344, "Then": [36, 104, 121, 214, 251, 262, 265, 307, 332], "There": [8, 25, 28, 57, 67, 70, 87, 100, 120, 121, 144, 159, 162, 179, 186, 187, 190, 206, 209, 215, 235, 236, 253, 258, 267, 268, 281, 284, 307, 311, 313, 314, 317, 322, 339, 344, 345, 346, 347, 356], "These": [18, 28, 30, 33, 46, 55, 57, 59, 61, 69, 72, 79, 81, 89, 92, 106, 107, 111, 113, 117, 119, 135, 137, 145, 148, 160, 170, 179, 182, 209, 215, 218, 236, 243, 247, 256, 288, 300, 302, 307, 314, 315, 328, 347, 351, 355], "To": [7, 25, 36, 38, 57, 75, 110, 111, 113, 117, 135, 137, 138, 155, 162, 179, 203, 218, 225, 258, 259, 263, 264, 274, 275, 277, 294, 306, 307, 308, 311, 312, 313, 314, 315, 333, 343, 352], "WITH": [225, 307], "Will": [24, 135, 137, 356], "With": [131, 147, 169, 186, 214, 218, 233, 267, 268, 281, 284, 298, 307, 311, 343, 347, 356], "_": [13, 57, 99, 100, 163, 177, 198, 241, 242, 307, 310, 318, 328, 336, 345], "_0": 313, "_1": 313, "__": [57, 72, 312], "___": [163, 312, 347, 348], "____": [163, 275, 279, 348], "_____": [163, 347, 348], "______": [163, 348], "_______": [163, 348], "________": [163, 312, 347, 348], "_________": [163, 312, 348], "__________": [163, 312, 348], "___________": [163, 348], "____________": 312, "_____________": 163, "_______________": 163, "_________________": 347, "__________________": [347, 348], "____________________": 348, "_____________________": 348, "________________________": 163, "__________________________": [163, 348], "_____________________________": 312, "_______________________________": [312, 348], "____________________________________": 312, "______________________________________________": 348, "__a__": [281, 284], "__add__": 356, "__adjectival_suffix": 209, "__callback": 119, "__canva": 119, "__children": 119, "__class__": 110, "__conson": 209, "__contains__": 314, "__delitem__": [314, 347], "__derivational_suffix": 209, "__dict__": [110, 112], "__digraph": 209, "__doc__": 134, "__double_conson": 209, "__drag_i": 119, "__drag_x": 119, "__draggabl": 119, "__eq__": [314, 326], "__file__": [144, 333], "__getattr__": 134, "__getitem__": [117, 119, 314], "__init__": [0, 12, 13, 14, 15, 16, 18, 23, 25, 27, 28, 29, 30, 32, 33, 35, 37, 38, 39, 40, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 140, 142, 143, 144, 146, 147, 149, 153, 156, 159, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 231, 232, 233, 234, 236, 238, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 256, 257, 258, 263, 264, 265, 266, 267, 268, 274, 275, 276, 277, 279, 280, 282, 285, 286, 289, 290, 291, 307, 309, 314], "__iter__": 314, "__len__": [52, 314], "__li_end": 209, "__long_vowel": 209, "__lt__": 314, "__name__": [112, 332], "__new__": [0, 52, 57, 78, 85, 120, 131, 256, 257, 258], "__nonzero__": 117, "__noun_suffix": 209, "__parent": 119, "__perfective_gerund_suffix": 209, "__press": 119, "__reflexive_suffix": 209, "__repr__": [52, 131, 302, 309, 314], "__restricted_vowel": 209, "__run": 322, "__s_end": 209, "__setitem__": [117, 119, 314, 347], "__special_word": 209, "__st_end": 209, "__step0_suffix": 209, "__step1_suffix": 209, "__step1a_suffix": 209, "__step1b_suffix": 209, "__step2_suffix": 209, "__step2a_suffix": 209, "__step2b_suffix": 209, "__step3_suffix": 209, "__step3b_suffix": 209, "__step4_suffix": 209, "__step5_suffix": 209, "__step6_suffix": 209, "__step7_suffix": 209, "__step8_suffix": 209, "__step9_suffix": 209, "__str__": [131, 162], "__superlative_suffix": 209, "__updat": 119, "__verb_suffix": 209, "__vowel": 209, "_add_child_widget": 119, "_anim": 347, "_arg": 146, "_block_read": 104, "_bytes_written": 309, "_cach": 104, "_cl": [78, 85, 257], "_cleartempl": [216, 343], "_cmd": 224, "_context_to_tag": 223, "_conting": 146, "_counter": [180, 311, 312, 313, 319, 322, 326, 330, 337, 338], "_create_training_examples_arc_eag": 176, "_create_training_examples_arc_std": 176, "_cumulative_frequ": 334, "_datestamphasfourdigityear": 345, "_debug": 28, "_delta": 33, "_dev": 92, "_edg": 162, "_edge_to_cpl": 162, "_elementinterfac": [255, 291], "_end_index": 172, "_entiti": 347, "_eofpo": 104, "_estim": 179, "_evoked_": [57, 72, 315], "_filepo": 104, "_fn": 29, "_fn_num": 29, "_fp": 29, "_fp_num": 29, "_gap": 244, "_get_featur": 217, "_grammar": [171, 178], "_head_index": 172, "_histori": [173, 174], "_hypothesi": 274, "_ident": 218, "_index": 162, "_init_colortag": 119, "_input": 125, "_intercept": 179, "_io": 113, "_item_repr": 119, "_jar": [163, 224], "_kwarg": 146, "_lang_var": 344, "_languagespecificstemm": 209, "_len": 104, "_lh": 121, "_lx": 225, "_manag": 119, "_max_r": 179, "_mlb": 117, "_modul": 78, "_mwe": 241, "_n": 146, "_neg": 197, "_nfmap": 33, "_normal": [57, 62, 258], "_not_": [57, 107], "_num_leav": 162, "_package_to_column": 113, "_param": 344, "_pars": [57, 59, 62, 76], "_path": 111, "_piec": 28, "_read": 125, "_read_block": [57, 59, 76], "_read_int_r": 131, "_read_number_valu": 131, "_read_word_block": 307, "_restart": 162, "_result": 124, "_rh": 121, "_row": 117, "_rule": 28, "_rule_tupl": 205, "_scandinavianstemm": 209, "_scc_": 351, "_sentenc": 125, "_separ": 224, "_sh": 345, "_slope": 179, "_stage": 28, "_standardstemm": 209, "_start": 28, "_start_index": 172, "_str": 28, "_stream": 104, "_string_end_r": 131, "_string_start_r": 131, "_symbol": 121, "_tag": [57, 59, 62, 76, 119], "_tagger": 223, "_tagword": 225, "_test": 92, "_tgrep_exprs_act": 235, "_token": 162, "_toknum": 104, "_tp": 29, "_tp_num": 29, "_trace": [28, 171, 178], "_train": 223, "_tried_": 173, "_tried_m": 173, "_type": [57, 72], "_unload": 351, "_updat": 119, "_valu": [180, 311, 312, 313, 319, 322, 326, 330, 337, 338], "_var0": [298, 299], "_verifi": 302, "_willy65": 344, "_word": [57, 59, 62, 76], "_wordnetobject": 107, "a00": 225, "a1": [300, 322], "a2": [300, 322], "a3": [300, 322], "a4": 322, "a5": 322, "a6": 322, "a7": 322, "a8": 322, "a_": 218, "a_and_c": 307, "a_coru": 336, "a_dog": 318, "a_littl": 241, "a_little_bit": 241, "a_lot": 241, "a_man": 318, "a_man_walk": 318, "aa": [67, 307, 308, 326], "aa0": 307, "aaa": 308, "aaaaaaaaaaaa": 258, "aaaaaaaaaaaaaaa": 258, "aaaaaaaaaaaaaaaaa": 258, "aaaababaaccbacb": 325, "aaai": [68, 91], "aab": 334, "aabbbcccc": 344, "aachen": 140, "aacut": 192, "aaddvark": 325, "aal": 307, "aalii": 307, "aam": 307, "aamir": 307, "aani": 307, "aardvark": 307, "aardwolf": [57, 107, 211, 307, 351], "aardwolv": [57, 107, 211, 351], "aaron": 307, "aarsen": 358, "ab": [148, 166, 220, 223, 307, 327, 328, 344], "ab1": 330, "ab2": 330, "ab3": 330, "abaci": [57, 107, 211, 351], "abacu": [57, 107, 211, 351], "abagael": 307, "abagail": 307, "abainia": [201, 202], "abandon": [307, 335], "abat": 335, "abb": 307, "abbb": 334, "abbbb": 334, "abbbc": 334, "abbei": 307, "abbi": 307, "abbot": 307, "abbott": 307, "abbr": [236, 243, 275, 279], "abbrev": [57, 72, 236, 243], "abbrev_backoff": [236, 243], "abbrev_typ": [236, 243], "abbrevi": [57, 72, 192, 220, 243, 275, 279, 322, 348], "abc": [52, 111, 113, 136, 237, 307, 309, 314, 344], "abcabc": 314, "abcabcabcabcabcabcabcabcabcabca": 314, "abcabz": 314, "abcd": 314, "abcdef": 344, "abcdefghijklmnopqrstuvwxyz": 158, "abdelkrim": 209, "abdic": 335, "abdomin": 297, "aben\u00e7o": 333, "abet": 335, "abhaya": 269, "abid": 335, "abk": 308, "abkh": [57, 103], "abkhaz": [57, 103], "abl": [15, 111, 203, 207, 216, 223, 288, 343, 347, 351, 353], "abn": 308, "abnorm": [57, 83, 307, 330], "abolish": [57, 83, 307], "abomin": [57, 83, 307], "abort": [57, 83, 307], "abounding_with": [57, 72], "about": [0, 2, 25, 30, 35, 36, 42, 57, 70, 72, 75, 80, 81, 89, 91, 95, 104, 105, 107, 113, 120, 125, 127, 161, 162, 165, 167, 173, 179, 180, 185, 192, 201, 202, 203, 206, 214, 215, 223, 229, 243, 268, 274, 281, 284, 288, 289, 291, 305, 307, 311, 313, 314, 315, 317, 333, 335, 336, 339, 344, 348, 353, 356], "abov": [57, 92, 107, 139, 182, 191, 216, 225, 240, 243, 268, 294, 300, 305, 307, 308, 314, 315, 333, 334, 335, 346, 347, 351], "above_scor": 305, "abram": 148, "abri": 333, "abrom": 148, "abr\u00e3o": 333, "absenc": 197, "absent": [171, 341], "absolut": [52, 57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 82, 84, 85, 93, 98, 105, 107, 108, 109, 111, 135, 138, 140, 198, 290, 307, 309], "absolutediscount": [0, 135, 140], "absolutediscountinginterpol": [0, 135, 138], "absorb_heat": [57, 72, 315], "abspath": [55, 57, 59, 307, 309], "abstract": [13, 15, 46, 47, 51, 52, 57, 59, 81, 89, 111, 119, 124, 125, 131, 136, 138, 146, 162, 171, 179, 184, 191, 200, 214, 223, 231, 232, 233, 237, 253, 268, 286, 302, 314, 318, 323, 326, 351], "abstractboxerdr": [0, 180, 181], "abstractcanvascontain": 119, "abstractccgcategori": [0, 12, 13], "abstractchartrul": [0, 14, 159, 162, 171], "abstractcollocationfind": 53, "abstractcontainerwidget": [0, 114, 119], "abstracteat": 323, "abstractexpress": 184, "abstractlazysequ": [0, 52, 104], "abstractparentedtre": [275, 277], "abstractvariableexpress": [0, 129, 180, 184, 191], "ac": [57, 61, 109, 125, 192, 291, 333], "acabada": 333, "academ": 0, "academia": 96, "acc": [216, 313, 332, 343], "acceler": 307, "accent": 307, "accept": [33, 57, 59, 100, 117, 121, 132, 177, 279, 283, 289, 307, 309, 321, 353, 356], "access": [29, 52, 57, 61, 65, 69, 70, 72, 75, 93, 104, 107, 108, 110, 111, 113, 117, 119, 120, 121, 122, 135, 137, 179, 234, 275, 282, 286, 289, 290, 294, 309, 313, 322, 326, 334, 335, 336, 347, 356], "access_tim": 351, "access_token": 290, "accessor": 29, "accident": 121, "acclaim": 307, "accommod": [57, 86, 181], "accompani": [265, 266, 267, 290, 307], "accomplish": [170, 330], "accord": [36, 53, 120, 121, 140, 170, 177, 182, 188, 192, 215, 218, 248, 258, 262, 267, 268, 275, 276, 288, 300, 307, 321, 331, 336, 343], "accordingli": [263, 264, 265, 268, 294, 334], "account": [57, 72, 125, 131, 135, 148, 170, 258, 264, 267, 294, 353], "accru": 307, "accur": [107, 182, 281, 284, 300, 352], "accuraci": [0, 25, 26, 29, 30, 43, 52, 143, 150, 196, 213, 214, 216, 217, 225, 229, 240, 245, 248, 281, 284, 328, 333, 334, 339, 343, 356], "acero": 218, "acet": 307, "aceto": 307, "acetochlor": 307, "aceton": 307, "achar": 333, "achiev": [24, 203, 245, 318, 351], "acion": 356, "acirc": 192, "acknowledg": 119, "acl": [63, 94, 245, 258, 269, 281, 284, 356], "acl2014": [57, 106, 258, 296], "aclanthologi": [225, 300], "aclweb": [57, 106, 182, 245, 258, 259, 260, 273, 281, 284, 299], "acm": [68, 83, 91, 205, 271, 292, 356], "acolhuan": 329, "acontecendo": 333, "acoust": [30, 307], "acq": 307, "acquisit": 46, "across": [57, 72, 129, 144, 191, 240, 248, 336], "act": [25, 28, 52, 57, 72, 81, 89, 104, 117, 120, 182, 186, 300, 307, 314, 339, 353], "action": [57, 72, 205, 258, 259, 262, 269, 271, 273, 286, 289, 307, 356], "activ": [33, 57, 89, 114, 117, 124, 197, 258, 259, 262, 269, 271, 294, 309, 353, 354, 356, 358], "activest": 117, "activestyl": 117, "actual": [29, 33, 57, 72, 110, 124, 129, 134, 150, 155, 159, 163, 179, 187, 235, 289, 307, 314, 315, 339, 343, 344, 347], "actual_pdist": 179, "acudir": 333, "acut": 192, "acycl": [291, 351], "acyclic_branches_depth_first": [0, 291], "acyclic_breadth_first": [0, 291], "acyclic_depth_first": [0, 107, 291], "acyclic_dic2tre": [0, 291], "acyclic_tre": [57, 107, 291], "ad": [2, 15, 36, 57, 92, 104, 107, 117, 119, 121, 125, 162, 165, 167, 171, 179, 196, 204, 220, 240, 241, 243, 248, 253, 261, 281, 284, 291, 302, 307, 313, 322, 334, 351, 356], "adam": [180, 307, 322, 338], "adapt": [72, 238, 239, 279, 283], "add": [7, 14, 15, 25, 28, 33, 37, 52, 57, 69, 72, 75, 80, 91, 107, 111, 114, 117, 118, 119, 124, 125, 127, 135, 138, 142, 147, 153, 156, 159, 162, 164, 165, 167, 171, 172, 173, 180, 182, 186, 191, 194, 196, 235, 241, 248, 253, 254, 255, 256, 257, 258, 261, 262, 267, 268, 274, 291, 300, 302, 307, 311, 317, 322, 330, 332, 334, 338, 343, 347, 351, 356], "add_access_token": [0, 285, 290], "add_arc": [159, 164], "add_assumpt": [123, 124, 322], "add_background": [123, 125, 311], "add_blank_lin": [0, 255], "add_callback": [114, 119], "add_child": [114, 119], "add_default_field": [0, 255], "add_exomw": [55, 57, 107], "add_feat_extractor": [195, 196, 339], "add_lin": [57, 91], "add_log": [0, 179], "add_missing_depend": [180, 187], "add_mw": [236, 241], "add_nod": [159, 164], "add_omw": [55, 57, 107, 351], "add_ortho_context": [236, 243], "add_prov": [55, 57, 107], "add_py3_data": [0, 54], "add_root": [55, 57, 80], "add_sent": [123, 125, 311], "add_widget": [114, 119], "addit": [52, 57, 63, 90, 100, 107, 111, 119, 120, 125, 131, 135, 138, 142, 169, 171, 172, 179, 182, 191, 196, 203, 204, 218, 225, 231, 234, 240, 243, 253, 257, 261, 267, 281, 284, 291, 300, 307, 309, 314, 326, 336, 344, 347, 351, 356], "addition": [55, 57, 107, 131, 144, 192, 206, 215, 287, 307], "additional_java_arg": 169, "address": [164, 170, 294, 307, 310, 313], "address1": 313, "address2": 313, "adj": [28, 55, 57, 79, 107, 170, 213, 217, 220, 297, 301, 305, 307, 333, 351], "adj_sat": [55, 57, 107], "adjac": [157, 162, 172, 275, 279, 328], "adjd": 298, "adject": [28, 57, 72, 107, 199, 202, 211, 216, 220, 223, 266, 315, 343, 351, 356], "adji": 298, "adjourn": 307, "adjp": [348, 349], "adjud": 216, "adjunct": 322, "adjust": [119, 145, 204, 334, 339], "adjut": 89, "administr": [88, 294], "administra": 333, "admir": 307, "admiss": [289, 313], "admit": [240, 307], "adopt": [301, 307, 313, 336, 356], "adp": [79, 220, 305, 307], "adposit": 220, "adrian": 109, "adv": [55, 57, 72, 79, 107, 213, 220, 297, 301, 305, 307, 313, 315, 333, 351], "advanc": [25, 148, 191, 294], "advantag": [39, 42, 134], "advd": 298, "adventur": [307, 334], "adverb": [57, 72, 107, 211, 216, 220, 223, 315, 343], "advi": [207, 298], "advic": [275, 282], "advis": [135, 137, 207, 307], "advmod": 163, "advp": 349, "adwait": 88, "ae": [67, 307], "ae1": [67, 307], "ae_kappa": [143, 144], "aeioui": 240, "aelig": 192, "aer": 270, "aesthetic": 329, "afecto": 333, "afenegus6": [57, 103], "affect": [29, 119, 325, 344], "affirm": 197, "affix": [57, 107, 199, 200, 201, 202, 207, 208, 209, 223, 342], "affix_length": 223, "affixtagg": [0, 213, 223], "afournei": 325, "africa": [182, 300, 336], "african": 336, "after": [25, 28, 33, 37, 51, 57, 72, 104, 113, 118, 119, 121, 125, 131, 135, 137, 142, 149, 157, 162, 165, 171, 178, 179, 188, 197, 198, 202, 209, 215, 229, 243, 247, 253, 254, 258, 291, 307, 308, 311, 317, 344, 345, 347, 351, 355], "afternoon": 24, "ag": [55, 57, 65, 119, 301, 307, 313], "again": [7, 120, 135, 289, 311, 314, 322, 343, 344, 351], "against": [7, 26, 29, 57, 72, 147, 150, 173, 184, 191, 206, 214, 313, 315, 338, 346], "agarw": 269, "age_year": [57, 65], "agenda": [0, 123, 130, 162, 167, 187], "agent": 335, "agglom": [46, 49], "aggreg": [191, 229, 262], "agnew": 332, "agnost": [240, 248, 259], "ago": [234, 301], "agor": 333, "agr": [143, 144, 313, 314, 332, 341, 342], "agra": [57, 103], "agrav": 192, "agre": [57, 107, 144, 231, 342, 351], "agreement": [0, 143, 148, 321, 356], "aguirr": [57, 65], "ah": [67, 297], "ah0": [67, 307], "ahc": 318, "ahd": 109, "ahead": [274, 356], "ai": [67, 205, 221], "aid": [57, 59, 155], "ailment": [57, 72], "aim": [176, 199], "ain": 198, "ainda": 333, "aint": 198, "air": 156, "aircraft": 353, "airspe": [163, 219, 222, 224], "aj0": 297, "aka": [171, 258, 261, 262, 270, 271, 291, 335], "akin": 325, "al": [57, 72, 105, 106, 218, 240, 248, 258, 262, 267, 273, 279, 283, 301, 307, 317, 346, 351], "ala": 344, "alavi": 269, "albania": [182, 300], "albb": 242, "albert": 144, "albufeira": 333, "alcorc": 336, "alcuin": 109, "aldjfalskfjaldsf": 328, "aldjfalssjjlldss": 328, "alefsym": 192, "alegava": 333, "alert": [57, 63, 131, 307, 339], "alex": [262, 313, 358], "alexand": [109, 203], "alexi": 358, "alexisdimi": 358, "alexrudnick": 358, "alfr": 109, "alg_opt": 176, "algarv": 333, "algarvia": 333, "algarvio": 333, "algasai": 356, "algeria": [201, 202], "algier": 201, "algnsent": 257, "algorithm": [2, 30, 33, 35, 37, 38, 42, 46, 48, 50, 57, 88, 106, 136, 140, 145, 149, 157, 162, 165, 167, 170, 172, 176, 178, 179, 188, 199, 201, 202, 204, 205, 206, 209, 217, 218, 225, 233, 240, 243, 248, 251, 261, 263, 264, 265, 266, 267, 268, 272, 273, 275, 279, 281, 282, 283, 284, 291, 292, 303, 314, 332, 344, 356], "alguma": 333, "algun": 333, "alia": [33, 57, 63, 68, 78, 83, 85, 87, 90, 91, 102, 135, 137, 257], "alias": [120, 191, 314], "alibaba": 242, "alien": [135, 137, 142], "alif": [201, 202], "alifmaqsura": [201, 202], "align": [0, 55, 57, 61, 106, 119, 143, 145, 148, 256, 257, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 296, 344, 356], "align_al": [256, 263, 264], "align_block": [0, 256, 260], "align_log_prob": [0, 256, 260], "align_text": [0, 256, 260], "align_token": [0, 236, 239, 253, 254], "align_word": [0, 256, 269], "aligned_s": [55, 57, 58, 257, 346], "alignedcorpusread": [55, 57, 58], "aligneds": [0, 57, 58, 256, 257, 263, 264, 265, 266, 267, 268, 346, 356], "alignedsent_block_read": [57, 58], "alignedsentcorpusview": [55, 57, 58], "alignment_error_r": [0, 256, 270, 346], "alignment_info": [263, 264, 265, 266, 267, 268], "alignment_t": [264, 265, 266, 267], "alignmentinfo": [0, 256, 267, 268], "alik": 354, "alin": [0, 143, 356], "all": [0, 8, 15, 16, 20, 22, 28, 29, 32, 33, 34, 35, 38, 42, 43, 44, 46, 51, 52, 53, 57, 59, 60, 61, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 77, 79, 81, 82, 83, 84, 85, 86, 89, 90, 91, 93, 98, 100, 105, 107, 108, 109, 111, 113, 115, 117, 118, 119, 120, 121, 123, 125, 127, 129, 130, 131, 134, 135, 136, 137, 138, 144, 145, 146, 162, 163, 164, 165, 167, 168, 170, 172, 173, 174, 178, 179, 180, 181, 182, 183, 184, 186, 188, 190, 191, 196, 197, 198, 201, 203, 204, 206, 213, 215, 218, 220, 221, 223, 224, 225, 229, 231, 232, 233, 234, 235, 240, 243, 244, 246, 247, 255, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 274, 275, 277, 281, 282, 284, 285, 288, 291, 294, 300, 303, 305, 307, 309, 311, 312, 313, 314, 315, 316, 318, 319, 321, 322, 323, 325, 326, 330, 332, 333, 335, 337, 338, 340, 343, 344, 346, 347, 348, 354, 356], "all12": 318, "all_eng_synset": [55, 57, 107], "all_express": 127, "all_inst": 197, "all_lemma_nam": [55, 57, 107, 351], "all_list": [180, 191], "all_mptre": 347, "all_omw_synset": [55, 57, 107], "all_phrases_from": 274, "all_ptre": 347, "all_senti_synset": [55, 57, 95, 340], "all_synset": [55, 57, 107, 351, 356], "all_word": [195, 196, 339], "all_words_neg": 339, "allcap": 339, "allcap_differenti": [195, 198], "allcat": 307, "allen": 344, "allexpress": [0, 180, 191, 322], "allianc": 307, "alloc": [46, 50, 179], "allon": 305, "allot": 162, "allow": [2, 10, 13, 33, 46, 49, 57, 63, 69, 72, 78, 107, 110, 111, 117, 120, 121, 131, 134, 135, 136, 142, 148, 158, 162, 167, 170, 171, 172, 173, 174, 180, 182, 191, 218, 233, 243, 246, 259, 262, 275, 281, 282, 284, 287, 289, 291, 300, 305, 307, 311, 312, 313, 314, 322, 326, 336, 344, 347, 356], "allow_step": 131, "allowed_typ": 191, "alltempl": [227, 233], "almighti": 234, "almost": [38, 43, 57, 107, 135, 198, 343], "alon": [269, 305], "along": [2, 57, 72, 81, 89, 179, 236, 257, 315, 335, 354, 356], "alongsid": 354, "alph": 158, "alpha": [29, 57, 84, 135, 138, 143, 144, 147, 150, 162, 167, 184, 191, 192, 198, 214, 218, 258, 269, 273, 328, 356], "alpha_0": 218, "alpha_convert": [180, 184, 191, 326], "alpha_gamma": [135, 136, 140], "alpha_t": 218, "alphabet": [57, 83, 119, 158, 187, 218, 240, 243, 244, 248, 307, 314], "alphanumer": [120, 314], "alpharetta": 305, "alpino": [57, 62, 113], "alpinocorpusread": [55, 57, 62], "alreadi": [10, 28, 57, 59, 105, 111, 113, 117, 119, 135, 144, 161, 162, 167, 169, 170, 175, 179, 186, 191, 196, 209, 223, 233, 239, 241, 267, 309, 311, 314, 317, 318, 322, 333, 343, 344, 347, 355], "also": [10, 13, 14, 25, 28, 29, 30, 33, 36, 37, 43, 46, 53, 57, 72, 75, 91, 107, 111, 112, 113, 119, 120, 121, 125, 132, 133, 135, 137, 138, 142, 144, 146, 148, 159, 160, 161, 162, 164, 165, 174, 176, 177, 179, 182, 184, 186, 203, 204, 209, 213, 214, 215, 218, 229, 233, 234, 236, 242, 243, 244, 246, 251, 254, 257, 266, 272, 273, 281, 284, 289, 291, 300, 305, 306, 307, 309, 311, 312, 313, 314, 315, 317, 322, 323, 326, 333, 335, 336, 338, 343, 344, 347, 351, 356, 358], "also_se": [107, 291, 351], "alter": 203, "altern": [67, 87, 113, 131, 139, 163, 172, 179, 209, 231, 233, 246, 275, 279, 305, 307, 309, 312, 322, 326, 332, 348, 355, 356], "although": [104, 117, 163, 243, 281, 284, 303, 307, 317, 336, 343, 344], "altlabel": 182, "aludir": 333, "alum": 307, "alumiar": 333, "alun": 208, "aluno": 208, "alva": 245, "alvat": 358, "alwai": [7, 26, 33, 57, 59, 72, 104, 107, 119, 124, 135, 138, 163, 179, 191, 196, 206, 231, 235, 244, 258, 259, 262, 266, 267, 269, 271, 273, 275, 277, 281, 282, 284, 351], "alwayson_featur": [33, 303], "am": [24, 57, 91, 305, 306, 307], "amahuaca": [57, 103], "amalgam": 307, "amaz": 354, "amazingli": 198, "amazon": [91, 242, 307], "ambigu": [30, 94, 125, 159, 183, 199, 204, 292, 307, 311, 332, 353], "ambiguous_word": 292, "american": [100, 148, 163, 234, 242, 249], "americana": 333, "amhar": [57, 103], "amigo": 333, "ammi": 305, "amod": [163, 166, 175, 310], "among": [100, 269, 273, 305, 307], "amongst": 172, "amor": 333, "amount": [38, 113, 118, 119, 144, 170, 179, 229, 274, 281, 284, 289, 307, 333], "amp": [57, 75, 192, 252, 254, 336], "amperc": [236, 252], "amr": 100, "amus": [218, 307], "amz": 242, "an": [0, 7, 10, 13, 14, 15, 16, 24, 25, 28, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 48, 51, 52, 53, 55, 57, 58, 59, 61, 66, 67, 68, 69, 70, 71, 72, 74, 75, 79, 80, 81, 84, 86, 89, 92, 93, 94, 95, 97, 100, 104, 105, 107, 108, 109, 110, 111, 112, 113, 117, 119, 120, 121, 125, 127, 129, 131, 134, 135, 136, 138, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 184, 186, 187, 188, 190, 191, 192, 197, 198, 202, 203, 205, 206, 209, 213, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 235, 236, 240, 241, 242, 243, 245, 246, 251, 254, 255, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 279, 281, 282, 284, 286, 288, 289, 290, 291, 292, 294, 296, 299, 300, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 320, 322, 323, 325, 326, 330, 332, 334, 335, 336, 338, 339, 343, 344, 345, 346, 347, 351, 352, 353, 354, 356], "ana": 298, "anaconda": 355, "analog": 43, "analogi": 300, "analys": [148, 234], "analysi": [63, 91, 145, 148, 149, 176, 195, 196, 197, 198, 203, 234, 251, 305, 307, 356], "analyst": 336, "analyt": [179, 303], "analyz": [57, 72, 75, 83, 90, 157, 180, 315, 354], "anaphor": 181, "anaphora": 125, "anaphoraresolutionexcept": [0, 180, 184, 311, 312], "anc": [57, 72], "ancestor": [0, 57, 107, 119, 235, 275, 277, 351], "ancestri": 108, "anchor": 119, "and_list": [180, 191], "andexpress": [0, 180, 188, 191], "andiron": 351, "andr": 134, "andrea": [279, 283], "andreasvc": [279, 283], "anduru": 333, "ang": 192, "angel": [336, 344], "angl": [28, 51, 234], "anglo": 109, "angrili": 163, "angu": [311, 326], "anhalt": 163, "ani": [7, 24, 25, 28, 29, 31, 32, 33, 34, 35, 39, 51, 53, 57, 58, 59, 61, 64, 65, 66, 69, 70, 71, 72, 74, 75, 82, 84, 85, 86, 87, 91, 93, 94, 98, 100, 104, 105, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 121, 124, 125, 131, 135, 137, 144, 146, 147, 148, 151, 162, 164, 165, 167, 170, 178, 179, 186, 190, 191, 192, 201, 202, 203, 207, 214, 215, 216, 218, 219, 223, 229, 231, 232, 233, 234, 240, 243, 244, 246, 247, 248, 258, 269, 274, 275, 277, 281, 282, 284, 291, 296, 307, 309, 313, 314, 322, 325, 326, 327, 333, 334, 338, 339, 343, 344, 345, 346, 347, 351], "anim": [8, 20, 57, 107, 291, 307, 330, 333, 347, 351], "animal_sound": 307, "ann": [198, 337], "ann_morphosyntax": 80, "ann_segment": 80, "annan": 336, "anni": 109, "annie_lennox": 336, "annot": [39, 46, 55, 57, 65, 68, 69, 72, 79, 81, 89, 91, 92, 96, 109, 144, 148, 217, 243, 275, 281, 282, 284, 307, 317, 335, 356], "annotationset": [57, 72, 315], "annotationtask": [0, 143, 144], "announc": [275, 282, 354], "annual": 292, "ano": [307, 333], "anonym": 307, "anoth": [29, 57, 72, 120, 121, 148, 150, 176, 182, 191, 205, 206, 218, 223, 232, 233, 234, 258, 265, 266, 267, 273, 307, 311, 318, 322, 332, 333, 339, 344, 345, 346, 347, 351], "ans_typ": 181, "ansi": [275, 279], "answer": [24, 129, 131, 300, 303, 314], "answer_kei": [123, 129], "ant": 333, "anteced": 190, "anthologi": [57, 106, 182, 245, 258, 259, 260, 273, 281, 284, 299], "anti": 307, "antiga": 333, "antonym": [57, 107, 351], "antwerpen": 336, "anunci\u00f3": 298, "any_typ": 326, "anyon": [132, 163, 298, 307], "anyth": [25, 119, 124, 127, 129, 190, 235, 312, 330, 351], "anytyp": [0, 180, 191], "anywai": 135, "anywher": [108, 334], "ao": [67, 143, 144, 208, 307, 333], "ao2": 307, "aoaeoeoe": 328, "aon": 33, "ap": [57, 84, 300, 307, 333, 336], "apareceu": 333, "apart": [129, 294], "apelido": 333, "api": [0, 12, 25, 30, 46, 55, 57, 78, 110, 123, 135, 159, 184, 191, 199, 213, 227, 233, 236, 250, 256, 269, 285, 287, 288, 289, 307, 322, 354, 356], "api_cal": [159, 163], "apo": [57, 72, 254], "apolloniu": 109, "apostroph": 42, "app": [0, 16, 120, 123, 130, 290, 307, 311, 314], "app_kei": [289, 290], "app_secret": [289, 290], "appal": 329, "appeal": [165, 307], "appear": [8, 53, 57, 62, 65, 77, 91, 105, 107, 108, 113, 121, 130, 146, 150, 156, 197, 209, 215, 233, 234, 243, 244, 252, 253, 266, 267, 273, 275, 277, 305, 307, 317, 334, 336, 344, 356], "append": [0, 57, 75, 111, 114, 117, 120, 144, 172, 182, 189, 197, 263, 264, 265, 266, 267, 274, 275, 276, 290, 307, 309, 317, 330, 345, 347], "append_no_spac": [57, 75], "append_prop": [123, 127], "append_sig": [123, 127], "append_spac": [57, 75], "appendix": 267, "appli": [2, 7, 8, 12, 14, 15, 25, 28, 30, 31, 39, 43, 44, 52, 53, 57, 59, 72, 79, 81, 86, 89, 91, 108, 117, 120, 127, 139, 144, 148, 157, 159, 160, 162, 165, 167, 171, 174, 176, 178, 179, 183, 190, 191, 196, 197, 214, 215, 218, 222, 224, 227, 231, 232, 233, 237, 239, 240, 243, 248, 258, 268, 269, 274, 275, 276, 279, 282, 305, 307, 309, 312, 314, 318, 326, 328, 339], "applic": [1, 7, 10, 13, 14, 15, 16, 52, 70, 131, 162, 173, 190, 191, 202, 215, 218, 232, 233, 243, 265, 279, 283, 289, 299, 322, 356], "applicable_rul": [227, 233], "applicationexpress": [0, 180, 184, 188, 190, 191, 322, 326], "applicationruleset": 298, "apply_everywher": [159, 162], "apply_featur": [0, 30, 43, 195, 196, 339], "apply_freq_filt": 305, "apply_heat": [57, 72, 315], "apply_ngram_filt": 305, "apply_rul": [199, 208], "apply_word_filt": 305, "applyto": [180, 184, 187, 190, 191, 318], "appoint": [305, 307], "appraoch": 91, "approach": [46, 57, 102, 196, 197, 243, 265, 266, 267, 275, 279, 311], "appropri": [30, 31, 32, 33, 35, 44, 48, 49, 50, 51, 53, 57, 61, 72, 80, 93, 104, 108, 111, 119, 179, 184, 191, 206, 214, 215, 218, 223, 224, 234, 260, 286, 294, 307, 312, 314, 315, 322, 339], "approv": 307, "approxim": [57, 72, 150, 179, 198, 217, 274, 291, 315], "approxrand": [0, 143, 150], "april": [73, 286, 289, 356], "apuleiu": 109, "apurva": 262, "apw19980314": 307, "apw_19980314": [73, 307], "apw_19980424": [73, 307], "apw_19980429": [73, 307], "aquel": [307, 333], "aquela": [307, 333], "aquilo": 333, "ar": [2, 7, 8, 10, 13, 14, 15, 20, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 42, 43, 44, 46, 48, 50, 52, 53, 55, 57, 58, 59, 61, 62, 63, 65, 66, 67, 69, 70, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 91, 92, 98, 99, 100, 104, 105, 106, 107, 108, 111, 113, 117, 118, 119, 120, 121, 124, 125, 127, 129, 131, 133, 134, 135, 136, 137, 138, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 190, 191, 192, 196, 197, 198, 201, 202, 206, 209, 211, 213, 214, 215, 218, 219, 221, 222, 223, 225, 229, 232, 233, 234, 235, 236, 238, 240, 243, 244, 245, 246, 247, 250, 251, 253, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 277, 278, 279, 281, 282, 284, 287, 288, 289, 291, 294, 297, 298, 299, 300, 301, 303, 305, 306, 307, 308, 309, 311, 313, 314, 315, 317, 319, 321, 322, 328, 330, 332, 333, 334, 335, 336, 338, 339, 342, 343, 344, 345, 346, 347, 351, 353, 356], "arab": [57, 103, 201, 202, 204, 209, 307, 342, 356], "arabicstemm": [0, 199, 209], "aram": 305, "arb": 351, "arbitrari": [46, 50, 132, 182], "arbitrarili": [46, 48, 314], "arbor": 198, "arc": [164, 170, 172, 176], "arc_eag": [159, 176], "arc_standard": [159, 176], "arceag": 176, "archiv": [57, 61, 109, 131, 356], "arcstd": 176, "area": [119, 260, 322, 356], "aren": 198, "arent": 198, "arff": 44, "arff_formatt": [0, 30, 44], "arg": [12, 13, 15, 34, 40, 41, 57, 62, 72, 78, 83, 85, 86, 87, 99, 110, 111, 112, 113, 115, 117, 118, 119, 120, 124, 129, 131, 135, 138, 160, 163, 171, 175, 179, 180, 185, 186, 187, 191, 224, 229, 231, 233, 234, 258, 284, 291, 335], "arg0": [81, 89], "arg1": 335, "arg3": 335, "arg4": 335, "argid": [69, 81, 89, 335], "argloc": [81, 89, 335], "argm": [81, 89, 335], "argmax": 225, "argnam": 112, "argspan": 69, "argu": [240, 339], "argument": [13, 15, 17, 29, 33, 34, 41, 52, 55, 57, 59, 61, 62, 69, 72, 78, 79, 80, 81, 86, 87, 89, 93, 99, 104, 107, 108, 110, 112, 113, 117, 119, 121, 124, 126, 128, 131, 135, 136, 138, 139, 144, 146, 150, 152, 164, 167, 169, 171, 179, 182, 184, 186, 190, 191, 196, 205, 206, 218, 223, 231, 235, 243, 244, 246, 255, 275, 277, 282, 286, 289, 291, 299, 300, 301, 305, 306, 309, 311, 312, 314, 319, 322, 326, 334, 335, 344, 347, 351, 352, 356], "argument_indic": 190, "argument_pair": 126, "ari": [186, 209], "aristid": 6, "aristotl": 109, "arithmet": 271, "ariti": [0, 180, 182, 186, 300], "arity_parse_demo": [0, 159, 172], "arlington": 336, "arlstem": [0, 199, 202, 356], "arlstem2": [0, 199], "arm": 257, "armenian": [57, 103], "armi": [100, 258, 262, 269, 271, 273], "aromat": 305, "aronoff": [240, 248], "around": [28, 38, 52, 57, 72, 92, 100, 119, 131, 170, 196, 234, 307, 311, 315, 339, 344], "arpa": 88, "arr": 218, "arrai": [33, 34, 38, 41, 46, 48, 144, 251, 289, 306], "arraign": [57, 72, 315], "arrancar": 344, "arrang": [119, 158, 353], "arrest": [57, 72, 315, 336], "arriv": 344, "arrombar": 333, "arrow": [114, 115, 120, 238, 344], "art": [22, 51, 57, 72, 275, 279, 282, 315, 333, 336, 337, 347], "arthur": 354, "articl": [57, 72, 155, 216, 223, 298, 307, 315, 343, 356], "artifact": [57, 72, 315], "artifici": [68, 91, 127, 201, 229, 275, 281, 282, 284, 349], "artstein": 144, "artstein_poesio_exampl": 144, "arxiv": [220, 262], "as_such": [57, 107], "asa": 333, "asbesto": [307, 343], "ascend": [117, 120, 268, 274, 275, 276, 289], "ascent": 258, "ascii": [51, 57, 72, 107, 275, 279, 282, 307, 309, 347], "ash": 353, "ashteroth": 305, "asian": 273, "ask": [24, 307], "asleep": [57, 72, 315], "aspect": [30, 89, 91, 119, 202, 307, 335], "aspen": [97, 307], "ass": 198, "assem": 209, "assembl": 155, "assembli": [307, 336], "assert": [25, 148, 252, 302, 307, 314, 335, 344, 347], "assertionerror": [299, 343], "assertnexttoken": [180, 191], "asserttoken": [180, 191], "assess": [218, 268, 307, 346], "assi": 333, "assign": [0, 29, 32, 34, 35, 36, 46, 47, 49, 51, 57, 67, 75, 95, 120, 125, 144, 148, 164, 170, 179, 180, 182, 186, 194, 213, 214, 215, 218, 223, 225, 248, 251, 259, 269, 300, 301, 305, 307, 308, 311, 313, 314, 322, 338, 347], "assign_clust": [47, 49, 51], "assign_valu": [236, 248], "assim": 333, "assinado": 333, "assist": 356, "assoc_measur": 196, "associ": [0, 53, 57, 73, 96, 100, 104, 107, 110, 119, 121, 125, 143, 148, 151, 159, 162, 163, 167, 171, 179, 182, 186, 187, 196, 225, 300, 307, 356], "assum": [28, 35, 36, 44, 57, 58, 80, 87, 99, 102, 111, 120, 124, 135, 136, 142, 162, 164, 167, 170, 172, 179, 180, 182, 186, 196, 218, 239, 240, 246, 258, 265, 266, 267, 268, 272, 286, 294, 300, 307, 311, 313, 314, 336, 355], "assuming_posit": 307, "assumpt": [15, 35, 123, 124, 125, 126, 127, 128, 129, 130, 218, 253, 288, 322], "assur": 358, "astound": [275, 282, 339], "asymp": 192, "at0": 297, "ate": [67, 320, 332], "athen": [182, 300, 307], "ati": 332, "atild": 192, "ating": 333, "atis_sent": 332, "atlanta": [223, 344], "atlantiqu": [57, 60], "atmospher": 307, "atom": [97, 123, 129, 130, 172, 180, 181, 186, 190, 191, 192, 313, 338], "atomicexpress": [0, 129, 180, 190], "att": 176, "attach": [55, 57, 88, 166, 307], "attack": 336, "attempt": [25, 111, 119, 120, 124, 129, 131, 158, 161, 174, 179, 190, 191, 250, 254, 275, 277, 291, 294, 307, 313, 322, 343, 347], "attempt_adjunct": [180, 181, 191], "attempt_applicationexpress": [180, 190, 191], "attempt_booleanexpress": [180, 191], "attempt_equalityexpress": [180, 191], "attent": [322, 343], "attest": [33, 43], "attested_label": [0, 30, 43], "attr": [57, 84, 107, 118, 291], "attrdict": [55, 57, 72], "attrib": [118, 119, 131, 185, 307, 335], "attribut": [57, 61, 72, 92, 93, 96, 98, 107, 110, 112, 117, 118, 119, 134, 135, 138, 162, 182, 206, 240, 248, 291, 300, 307, 309, 315, 345, 351, 352], "attributeerror": [307, 345, 351], "attrnam": [57, 72], "at\u00e9": 333, "au": 272, "audio": [57, 100], "audiodata": [55, 57, 100], "aug": 83, "augment": [57, 61, 81, 89, 93, 117, 180, 182, 330], "augparsecategori": [0, 12, 16], "august": [68, 90, 356], "augustin": 109, "aujourd": 344, "aumann": 356, "aumento": 307, "auml": 192, "ausgefeil": 203, "ausgefeilt": 203, "ausgefeilter": 203, "austen": 307, "austin": 358, "australia": 358, "autarquia": 333, "authent": [0, 285, 289, 290, 291, 294], "author": [0, 30, 57, 61, 62, 63, 83, 88, 113, 133, 134, 209, 291, 307, 315], "authorit": 305, "auto": [43, 111, 131, 191, 298, 309, 351], "auto_format": [0, 111, 309], "auto_reweigh": 258, "autobahn": 209, "autobahnen": 209, "autom": [322, 333, 339], "automat": [7, 8, 18, 39, 57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 82, 84, 85, 93, 98, 104, 105, 107, 108, 109, 111, 113, 119, 134, 135, 161, 163, 169, 175, 182, 184, 191, 213, 219, 222, 223, 225, 258, 259, 269, 271, 273, 275, 277, 279, 292, 301, 309, 314, 333, 347], "automobil": 351, "automotor": 351, "autom\u00f3vil": 351, "autostep": 7, "autun": 109, "aux": [163, 301, 313, 349], "av": 333, "av0": 297, "avail": [0, 7, 8, 33, 46, 57, 65, 81, 89, 96, 100, 105, 113, 120, 133, 154, 164, 173, 174, 176, 182, 203, 209, 213, 215, 219, 229, 242, 244, 246, 247, 253, 281, 284, 288, 300, 305, 307, 314, 332, 333, 335, 354, 356], "available_categori": [55, 57, 106], "available_lang": [55, 57, 106], "averag": [20, 33, 46, 49, 144, 150, 151, 179, 221, 251, 258, 259, 262, 266, 268, 271, 273], "average_charact": [256, 260], "average_weight": [213, 221], "averagedperceptron": [0, 213, 221, 356], "avg_ao": [143, 144], "avistar": 333, "avoid": [25, 43, 50, 52, 57, 72, 107, 108, 120, 135, 179, 184, 191, 258, 307, 344, 355, 356], "avoid_empty_clust": 50, "aw": 67, "awai": 37, "awar": [57, 72, 238, 315], "awb": [307, 309], "awfulli": 198, "awkwardli": 235, "ax": [46, 116, 179, 307, 356], "axelrod": 261, "axi": 353, "ayer": 298, "az": [57, 103], "azerbaijani": 307, "azeri_azerbaijani_cyril": [57, 103], "azeri_azerbaijani_latin": [57, 103], "a\u057c\uab42\ua5e3": [], "b": [0, 7, 15, 33, 39, 42, 52, 57, 67, 72, 89, 100, 106, 109, 120, 121, 125, 129, 131, 135, 136, 137, 142, 144, 148, 150, 162, 176, 179, 182, 186, 190, 214, 216, 222, 232, 239, 241, 246, 247, 251, 253, 257, 259, 267, 272, 281, 284, 291, 298, 299, 302, 303, 307, 309, 312, 313, 314, 316, 318, 320, 322, 323, 325, 326, 329, 330, 331, 332, 334, 336, 337, 343, 344, 345, 347, 351], "b1": [121, 167, 180, 313, 338], "b2": [167, 180, 313, 338], "b3": 167, "b_decr": [195, 198], "b_graph": 170, "b_i": 218, "b_incr": [195, 198], "b_of": 182, "ba": [100, 148], "babavam": 333, "babelfish": [0, 153, 356], "babelize_shel": [0, 153, 154], "bach": 243, "bachelor": 100, "back": [25, 52, 61, 80, 93, 133, 179, 223, 261, 273, 275, 282, 344, 349], "background": [57, 72, 117, 123, 125, 309, 315], "background0": 322, "backlink": 260, "backoff": [136, 140, 213, 216, 223, 325, 333, 343], "backslash": [246, 345], "backtrac": 148, "backtrack": [7, 111, 159, 173, 217], "backward": [14, 15, 107, 120, 218, 233, 261, 338, 351], "backwardbxconstraint": [0, 12, 15], "backwardcombin": [0, 12, 15], "backwardonli": [0, 12, 15], "backwardsxconstraint": [0, 12, 15], "backwardtconstraint": [0, 12, 15], "backwardtyperaiserul": [0, 12, 14], "bacon": 299, "bacuth": 305, "bad": [148, 197, 198, 213, 269, 302, 309, 314, 339, 351], "bad_person": 351, "badeater1": 323, "badeater2": 323, "badidentifi": 307, "badscor": [57, 77], "baffl": 351, "bag": 37, "bai": [339, 356], "baikalfinansgroup": 92, "bailei": 344, "bake": [57, 72, 315], "baker": [57, 105], "balanc": [96, 302, 339], "baldridg": 356, "ball": 36, "ballison": 291, "baltic": [57, 103], "baltimor": 358, "bam": 328, "banal": 339, "bangkok": 300, "bangla": [74, 356], "banish": 307, "bank": [292, 353], "banker": 353, "banner": 336, "bar": [46, 61, 72, 80, 93, 108, 131, 248, 302, 305, 309, 314, 325, 334, 344, 356], "barcelona": 300, "bare": [198, 202, 226, 235, 307], "bark": [57, 62, 309, 311, 312, 313, 326, 338, 351], "barlei": 307, "bartlett": [240, 248, 251], "base": [3, 8, 13, 14, 15, 16, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 144, 146, 147, 148, 149, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 260, 263, 264, 265, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 279, 280, 282, 283, 286, 287, 289, 290, 291, 300, 301, 307, 309, 310, 312, 314, 315, 323, 325, 326, 333, 336, 344, 346, 347, 351, 352, 356], "base_fdist": [0, 179], "base_path": 39, "base_url": 113, "baseform": [57, 81, 89], "baselin": [151, 216, 229, 343], "baseline_backoff_tagg": 229, "baseline_data": [216, 343], "basemodelbuildercommand": [0, 123, 124, 126], "basengrammodel": [135, 138], "basenji": 351, "baseprovercommand": [0, 123, 124, 128, 129, 130], "basetheoremtoolcommand": [0, 123, 124], "basewidget": 119, "basi": [32, 57, 81, 89, 113, 307, 315, 335], "basic": [46, 47, 57, 72, 120, 121, 125, 162, 176, 197, 204, 209, 225, 229, 238, 275, 282, 307, 314, 315], "basic_multilingual_plan": 254, "basic_sent_chop": [0, 213, 225], "basictweethandl": [0, 285, 286], "basictyp": [0, 180, 191], "basqu": 356, "batch": [38, 194], "batch_eat": [131, 323], "batch_tag": 215, "batch_tag_increment": [213, 215, 216, 343], "bater": 333, "batteri": [57, 90, 307, 355], "battl": 307, "baum": 218, "bay": [35, 36, 38, 197, 303], "baz": [61, 80, 93, 108, 314, 325], "bb": 326, "bb1": 205, "bbccc": 334, "bbox": [114, 117, 119], "bcc": 334, "bccd": 334, "bcp": [57, 60, 133, 356], "bcp47": [55, 57], "bcp47corpusread": [55, 57, 60], "bdfoi": [57, 106], "bdquo": 192, "beam": [171, 225], "beam_siz": [171, 177, 332], "beam_threshold": [256, 274], "beat": 344, "beatti": 339, "beauti": [221, 339, 343], "bebida": 298, "becam": [305, 336], "becaus": [33, 57, 72, 79, 80, 107, 108, 111, 117, 120, 124, 135, 138, 142, 148, 175, 176, 204, 209, 223, 235, 247, 253, 258, 262, 265, 266, 267, 268, 273, 274, 298, 299, 307, 314, 325, 351], "becom": [50, 78, 97, 120, 171, 281, 284, 309, 313, 314], "bede": 109, "bedz": [307, 344], "bee": 207, "beeferman": 151, "been": [7, 8, 29, 35, 57, 59, 92, 102, 104, 111, 117, 119, 120, 125, 129, 131, 135, 136, 142, 144, 145, 148, 149, 161, 162, 169, 170, 171, 173, 174, 175, 178, 179, 182, 192, 196, 197, 204, 209, 218, 225, 233, 239, 241, 243, 252, 267, 274, 286, 287, 289, 294, 299, 300, 306, 307, 309, 313, 314, 322, 333, 339, 343, 344, 346, 351, 354, 356], "beer": 305, "befor": [7, 25, 30, 34, 48, 50, 110, 111, 113, 116, 119, 120, 124, 126, 127, 128, 131, 135, 147, 152, 162, 163, 165, 169, 171, 173, 174, 175, 179, 197, 209, 214, 217, 223, 225, 243, 247, 248, 255, 258, 260, 267, 275, 279, 289, 291, 302, 307, 309, 311, 313, 314, 332, 333, 334, 335, 343, 345, 347, 355, 356], "beforehand": [57, 72, 315], "beg_word": 80, "began": 293, "begin": [10, 28, 57, 58, 104, 111, 118, 120, 131, 162, 171, 173, 174, 177, 201, 202, 204, 218, 240, 243, 251, 275, 282, 307, 333, 335, 343, 345], "begsten": 151, "behav": [117, 169, 186], "behavior": [2, 28, 50, 57, 104, 107, 246, 307, 309, 351, 352, 353], "behaviour": [206, 258, 287, 347], "behind": [95, 119, 340], "being": [28, 29, 46, 48, 53, 57, 72, 107, 111, 135, 146, 170, 171, 173, 179, 190, 191, 196, 203, 218, 223, 225, 233, 240, 257, 258, 259, 260, 262, 267, 269, 271, 273, 274, 288, 291, 307, 313, 339, 343, 351, 356], "being_dress": 307, "beirut": 336, "believ": [301, 326, 337, 351], "bell": [135, 138, 140, 179, 325, 347], "belles_lettr": [307, 334], "bellingham": 356, "bellring": 315, "belong": [31, 48, 51, 57, 72, 91, 107, 170, 231, 268, 287, 307, 336], "below": [34, 57, 67, 107, 112, 121, 135, 142, 209, 229, 258, 262, 267, 273, 274, 287, 289, 294, 305, 307, 313, 314, 315, 333, 336], "ben": [305, 344], "benchmark": [240, 248], "bend": 307, "benedictin": 109, "benefit": 151, "bengali": 307, "bennet": 144, "bennett": 144, "bentho": 351, "benzahia": 209, "berger": 151, "berkelei": [57, 72, 240], "berlin": [300, 317, 358], "bernoulli": [34, 303], "bernoullinb": 303, "beroep": 336, "berri": 307, "besid": 353, "best": [26, 38, 57, 65, 84, 170, 171, 196, 203, 206, 221, 225, 245, 263, 264, 265, 267, 268, 269, 273, 274, 307, 315, 334, 344, 354, 356], "best_binary_stump": [30, 32], "best_incoming_arc": [159, 170], "best_model2_align": [256, 268], "best_path": [213, 218], "best_path_simpl": [213, 218], "best_stump": [30, 32], "beta": [121, 162, 167, 184, 191, 192, 218, 259, 269, 271, 273, 356], "beta_0": 218, "beta_t": 218, "bethard": 356, "better": [14, 24, 37, 57, 69, 154, 203, 216, 225, 233, 234, 323, 342, 343, 356], "betteroffout": 307, "betti": [180, 338], "between": [23, 25, 28, 37, 42, 50, 51, 52, 53, 57, 72, 75, 87, 91, 104, 107, 118, 119, 120, 121, 125, 133, 144, 145, 147, 148, 150, 152, 167, 172, 179, 192, 197, 198, 216, 218, 220, 229, 234, 241, 244, 251, 257, 258, 260, 262, 266, 269, 270, 273, 274, 275, 276, 279, 280, 281, 282, 284, 289, 307, 313, 314, 315, 317, 332, 336, 346, 347, 351, 353], "beyond": [125, 144, 239, 281, 284, 307, 343], "bez": 307, "bf": 351, "bfg": [33, 217], "bg": [117, 311], "bhojpuri": [57, 103], "bi": 225, "bia": [34, 48], "bias": 29, "bib": [57, 59, 107], "bibl": 351, "bicondit": 191, "bidirect": [224, 234, 261], "big": [25, 188, 213, 235, 263, 264, 265, 266, 267, 307, 312, 351], "biggest": [57, 63, 307], "bigram": [0, 53, 135, 137, 146, 196, 197, 243, 258, 291, 305, 328, 333], "bigram_collocation_feat": [195, 196], "bigram_fd": [53, 305], "bigram_find": [0, 53], "bigram_measur": [53, 305], "bigram_score_fn": 146, "bigramassocmeasur": [0, 143, 146, 196, 197, 305, 328], "bigramcollocationfind": [0, 53, 305], "bigramtagg": [0, 213, 223, 333], "biject": 133, "bilingu": [258, 260, 273], "bill": [92, 127, 148, 307, 330], "billi": [148, 330], "billion": [57, 72, 92, 216, 307, 315, 317, 343], "bin": [34, 41, 131, 179, 181, 218, 317, 322, 334, 336, 356], "bin_dir": 181, "binar": [0, 121, 281, 284], "binari": [14, 15, 25, 27, 32, 33, 34, 36, 39, 41, 43, 121, 128, 131, 144, 164, 170, 177, 182, 186, 191, 219, 245, 291, 300, 303, 322], "binaris": 121, "binary_concept": [0, 180, 182], "binary_dist": [0, 143, 144, 148, 328], "binary_loc": [123, 128, 322], "binary_nam": 131, "binary_names_demo_featur": [0, 30, 43], "binary_search_fil": [0, 291], "binary_stump": [30, 32], "binarycombinatorrul": [0, 12, 14], "binaryexpress": [0, 180, 184, 191], "binarymaxentfeatureencod": [0, 30, 33], "bind": [114, 117, 118, 119, 120, 129, 159, 167, 181, 183, 190, 191, 235], "bind_click": [114, 119], "bind_click_leav": [114, 118], "bind_click_nod": [114, 118], "bind_click_tre": [114, 118], "bind_drag": [114, 119], "bind_drag_leav": [114, 118], "bind_drag_nod": [114, 118], "bind_drag_tre": [114, 118], "bind_to_column": [114, 117], "bind_to_label": [114, 117], "bind_to_listbox": [114, 117], "binder": [184, 191], "binding_list": 129, "binding_op": [0, 180, 191, 326], "bindingdict": [0, 123, 129, 180, 190, 318], "bindingexcept": [0, 123, 129], "bindop": [183, 313], "bing": [68, 83, 90, 91], "binomi": 291, "binomial_coeffici": 291, "binop": [180, 191], "bio": 222, "bio_to_chunk": [213, 222], "biographi": 163, "birch": 261, "bird": [0, 127, 330, 354, 356, 358], "birth": [57, 72, 100, 301], "birthdai": [57, 72, 301, 315], "birthdat": [100, 307], "biserr": 329, "bisneto": 333, "bit": [57, 72, 100, 229, 235, 241, 275, 279, 297, 349], "bitext": [263, 264, 265, 266, 267], "bitstr": 88, "bitt": 346, "bkfiubydz2": 344, "black": [100, 356], "blackboard": [162, 165], "blackburn": [125, 188, 326], "blackman": 251, "blah": 334, "blanch": [57, 72, 315], "blanchard": 325, "blank": [57, 66, 69, 74, 83, 87, 99, 106, 158, 244, 247, 255, 307], "blank_befor": 255, "blanklin": 247, "blankline_token": [0, 236, 244], "blanklinetoken": [0, 197, 236, 244], "blanks_befor": 255, "blanks_between": 255, "bleibt": 272, "bless": 234, "bleu": [242, 258, 259, 262, 271, 273, 295, 356], "bleu_scor": [0, 256, 262, 296], "blickl": 109, "blico": 333, "blili": 148, "blindado": 333, "blk": 100, "bllip": [0, 159, 356], "bllippars": [0, 159, 161], "blob": [209, 242, 252, 254, 344, 356], "block": [57, 58, 59, 62, 66, 71, 74, 75, 76, 78, 83, 86, 87, 91, 94, 100, 103, 104, 131, 186, 251, 260, 307], "block_comparison": 251, "block_read": [57, 58, 64, 66, 71, 74, 75, 83, 86, 94, 99, 104, 307], "block_siz": [104, 307], "blockquot": [57, 78, 307], "blockquote_read": [57, 78], "blog": [221, 344], "blogspot": 356, "bloomer": 351, "blow": 307, "blue": [7, 163, 249, 275, 279], "blur": 307, "bn": 121, "bnc": [55, 57, 72, 93, 295, 356], "bnccorpusread": [55, 57, 61, 297], "bncsentenc": [55, 57, 61], "bncwordview": [55, 57, 61], "bo": [63, 125, 181, 183, 188, 313, 326], "boa": 333, "board": [166, 307, 310], "boat": 346, "bob": [273, 314, 332, 337], "boban": 336, "boca": 333, "bod": [57, 72], "bodenstab": 356, "bodi": [79, 352, 353], "bodlei": 109, "body_internal_mot": 307, "body_internal_st": 307, "body_system": [57, 72], "boethiu": 109, "boi": [57, 63, 180, 273, 307, 311, 312, 313, 332, 338], "boil": [57, 72, 135, 315], "boisen": 356, "bold": 117, "boll": 339, "bolli": 148, "bom": 345, "bomb": [198, 336], "bombai": [74, 300], "bond": 358, "bone": [306, 356], "book": [0, 57, 79, 107, 154, 155, 176, 213, 234, 236, 258, 262, 263, 264, 265, 266, 267, 273, 294, 299, 307, 326, 333, 339, 344, 346, 351, 354, 356], "book1": 125, "book_1": 354, "book_grammar": [300, 309, 311, 312, 313, 321, 332, 338], "bookstein": 151, "bool": [13, 14, 33, 37, 57, 107, 111, 116, 117, 119, 120, 121, 124, 126, 129, 147, 148, 151, 162, 167, 173, 174, 177, 179, 181, 182, 184, 186, 190, 191, 194, 203, 209, 214, 215, 216, 218, 225, 229, 231, 232, 233, 234, 235, 236, 238, 239, 243, 244, 253, 254, 255, 258, 259, 275, 281, 282, 284, 289, 291, 326, 356], "boolean": [13, 30, 33, 38, 44, 48, 49, 50, 51, 57, 72, 151, 184, 190, 191, 197, 203, 217, 218, 225, 257, 273, 314, 322], "boolean_op": [0, 180, 191, 326], "booleanexpress": [0, 180, 184, 191], "booster": 339, "booster_dict": [195, 198], "bop": 307, "borba": 333, "borboleta": 333, "borboletinha": 333, "border": [182, 300], "borderwidth": 117, "bore": [95, 340, 344], "borel": [42, 70], "boskov": 336, "bot": 22, "both": [25, 28, 31, 36, 37, 39, 53, 55, 57, 69, 72, 86, 92, 93, 107, 111, 113, 117, 119, 120, 121, 124, 128, 135, 136, 140, 152, 162, 172, 176, 179, 190, 191, 197, 201, 202, 204, 214, 218, 225, 229, 235, 237, 240, 243, 251, 258, 274, 275, 282, 302, 307, 309, 314, 315, 320, 322, 332, 334, 335, 339, 347, 356], "both_most_common": 334, "bothbackward": [0, 12, 15], "bothforward": [0, 12, 15], "bothord": [275, 282], "bottl": 163, "bottleneck": [46, 309], "bottom": [2, 117, 118, 119, 162, 171, 172, 174, 178, 275, 279, 332], "bottomupchartpars": [0, 159, 162, 332], "bottomupleftcornerchartpars": [0, 159, 162, 332], "bottomuppredictcombinerul": [0, 159, 162, 165, 167], "bottomuppredictrul": [0, 159, 162, 167], "bottomupprobabilisticchartpars": [0, 159, 171], "bought": [92, 344], "bound": [52, 57, 72, 107, 117, 119, 120, 129, 131, 148, 182, 184, 190, 191, 196, 223, 243, 254, 287, 291, 313, 314, 315, 316, 318, 344, 351], "boundari": [28, 57, 99, 151, 234, 243, 251, 260, 344, 346], "bounding_box": 287, "box": [117, 119, 258, 287, 294, 296], "boxer": [0, 125, 180, 309, 311, 322, 326], "boxer_drs_interpret": 181, "boxercard": [0, 180, 181], "boxerdog": [125, 309, 311, 322], "boxerdr": [0, 180, 181], "boxerdrspars": [0, 180, 181], "boxereq": [0, 180, 181], "boxerindex": [0, 180, 181], "boxernam": [0, 180, 181], "boxernot": [0, 180, 181], "boxeror": [0, 180, 181], "boxeroutputdrspars": [0, 180, 181], "boxerpr": [0, 180, 181], "boxerprop": [0, 180, 181], "boxerrel": [0, 180, 181], "boxerwhq": [0, 180, 181], "boxwidget": [0, 114, 119], "boyd": [136, 356], "bp": [273, 344], "bp1": 258, "bp2": 258, "br": [307, 356], "brace": [28, 291, 314], "bracket": [16, 28, 29, 57, 61, 62, 93, 109, 119, 120, 135, 137, 188, 234, 275, 278, 282, 302, 314, 347], "bracket_pars": [0, 55, 57, 275, 278], "bracket_s": 93, "bracketparsecorpusread": [55, 57, 62, 109, 307], "bracketwidget": [0, 114, 119], "braid": 307, "braini": 328, "bramanismo": 333, "branch": [32, 51, 107, 118, 170, 172, 275, 282, 291, 351], "brand": 91, "brant": 225, "brasil": 307, "brat": 100, "brave": 234, "brazilian": [333, 356], "breadth": [107, 291, 351], "breadth_first": [0, 291, 350], "break": [57, 63, 68, 78, 87, 90, 91, 102, 103, 163, 243, 248, 251, 291, 298, 307, 317, 333, 339, 347, 350, 351], "breakbefor": [57, 72], "breakdown": [57, 62, 95, 340], "breakfast": 317, "breaklin": [57, 72], "breath": [307, 351], "breed": 351, "breiman": 136, "breviti": [258, 271, 273], "brevity_penalti": [0, 256, 258], "bridg": 262, "brief": [57, 72], "bright": 307, "brill": [0, 213, 216, 229, 231, 232, 233], "brill24": [0, 213, 215], "brill_train": [0, 213], "brillrul": 233, "brilltagg": [0, 213, 215, 216, 227], "brilltaggertrain": [0, 213, 216, 343], "brilltemplatei": [0, 227, 233], "brincar": 333, "bring": [234, 307, 328, 356], "britain": 307, "british": [57, 61, 332], "bro": 234, "broad": [57, 105], "broader": 163, "broadli": 301, "broil": [57, 72, 315], "broken": [111, 188, 216, 240, 248, 307, 343], "broken_tre": 347, "brook": [148, 163, 224, 336], "brookhaven": 148, "brought": [306, 307], "brown": [55, 57, 72, 107, 111, 163, 175, 179, 213, 221, 223, 251, 263, 264, 265, 266, 267, 268, 294, 301, 305, 307, 315, 317, 325, 334, 344, 351, 356], "brown2": 307, "brown_ic": 351, "brown_tagset": [0, 122], "brows": 10, "browser": [1, 10, 57, 65, 356], "browserv": 10, "brrokhaven": 148, "brunch": 351, "brutedom": 329, "brvbar": 192, "br\u00e1": 333, "bsd": 112, "btjwrpbmoi": 307, "bubbl": [0, 153, 157, 329], "buch": [263, 264, 265, 266, 267, 346], "buf_0_form_econom": 176, "buf_0_form_market": 176, "buf_0_ldep_att": 176, "buf_0_lemma_econom": 176, "buf_0_lemma_market": 176, "buf_0_pos_jj": 176, "buf_0_pos_nn": 176, "buf_1_form_": 176, "buf_1_form_new": 176, "buf_1_pos_": 176, "buf_1_pos_nn": 176, "buf_2_pos_vbd": 176, "buf_3_pos_jj": 176, "buffer": [25, 111, 176, 180, 184, 191, 289, 307], "bufferedgzipfil": [0, 111, 309], "bug": [320, 329, 351, 356, 358], "bugfix": [293, 356], "bui": [163, 236, 239, 244, 247, 249, 253, 254, 341, 344], "build": [7, 8, 36, 37, 38, 52, 57, 72, 85, 92, 119, 123, 124, 125, 126, 135, 164, 177, 182, 186, 215, 217, 233, 243, 244, 247, 274, 291, 307, 311, 312, 314, 333, 353, 354, 356], "build_index": [0, 113], "build_model": [0, 25, 27, 123, 124, 322], "build_preprocessed_fil": [57, 80], "builder": [124, 125, 126], "buildindex": [55, 57, 72], "built": [30, 33, 52, 107, 118, 119, 135, 142, 165, 170, 176, 188, 191, 211, 213, 291, 302, 307, 326, 356], "builtin": [111, 255], "buitenlandse_handel": 336, "bul": 351, "bulg": 307, "bulgarian": 307, "bulk": 306, "bull": 192, "bump": 307, "bundl": [182, 300], "burger": 338, "burmese_myanmar": [57, 103], "burn": 353, "burnt": 305, "bush": 307, "busi": [39, 336, 353], "butter": 307, "butterless": 234, "button": [2, 7, 8, 118, 119], "buttonpress": 119, "bye": 307, "bypass": [234, 309], "byrhtferth": 109, "byte": [57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 82, 84, 85, 93, 98, 105, 107, 108, 109, 111, 113, 291, 307, 309, 324, 351], "bytebuff": [0, 111], "bytesio": 307, "c": [0, 25, 30, 33, 39, 46, 49, 52, 57, 62, 63, 67, 68, 72, 77, 79, 83, 90, 91, 106, 109, 113, 121, 125, 130, 134, 135, 136, 137, 142, 144, 145, 148, 151, 171, 172, 179, 181, 182, 198, 214, 215, 216, 220, 223, 225, 229, 231, 232, 233, 241, 242, 246, 247, 257, 260, 261, 269, 273, 275, 279, 281, 284, 291, 294, 300, 302, 303, 307, 312, 313, 314, 315, 318, 322, 323, 325, 326, 328, 329, 330, 332, 333, 334, 337, 338, 343, 344, 347, 351], "c1": [57, 72, 144, 217, 275, 282, 300, 302, 307, 311, 322], "c123": 307, "c2": [144, 217, 275, 282, 300, 307, 311, 322], "c3": [300, 307, 322], "c5": [57, 61, 297], "c_exp": 145, "c_graph": 170, "c_incr": [195, 198], "c_skip": 145, "c_sub": 145, "c_vwl": 145, "ca": [57, 60, 106, 133, 144, 145, 208, 248, 253], "ca01": [305, 307], "ca02": 307, "ca03": 307, "ca04": 307, "ca05": 307, "ca06": 307, "ca07": 307, "cabe": 333, "cabeceira": 333, "cabinet": 306, "cable_car": 351, "cach": [52, 57, 69, 104, 111, 113, 162, 167, 179, 229, 291, 334, 351], "cache_baseline_tagg": 229, "cache_s": 52, "cachedepth": 291, "cachedtopdownpredictrul": [0, 159, 162, 165, 167], "cachorra": 351, "cachorro": 351, "caclcul": [57, 65], "cad": 351, "cada": 333, "cadela": 351, "caf\u00e9": 344, "cake": [57, 72, 298, 307, 315], "calc_dist": [30, 42], "calcul": [33, 35, 37, 39, 42, 46, 48, 52, 53, 57, 65, 104, 107, 113, 121, 135, 136, 142, 144, 146, 148, 150, 152, 170, 179, 188, 218, 223, 225, 243, 258, 259, 262, 269, 271, 273, 274, 291, 303, 305, 328, 346, 351, 356], "calculate_delta": [0, 30, 33], "calculate_empirical_fcount": [0, 30, 33], "calculate_estimated_fcount": [0, 30, 33], "calculate_leftcorn": 121, "calculate_nfmap": [0, 30, 33], "calculu": [184, 191, 313, 356], "calcutta": 300, "calibratable_co": 307, "calif": 336, "california": [91, 97, 307], "call": [2, 7, 14, 25, 33, 34, 41, 51, 52, 57, 59, 61, 72, 78, 79, 80, 81, 89, 100, 102, 104, 107, 108, 112, 113, 117, 118, 119, 120, 121, 124, 125, 131, 132, 134, 135, 137, 142, 159, 162, 165, 169, 171, 173, 174, 179, 185, 186, 191, 196, 201, 202, 205, 209, 219, 225, 231, 232, 233, 235, 238, 243, 246, 258, 262, 275, 282, 288, 289, 291, 299, 302, 303, 306, 307, 308, 309, 313, 314, 315, 316, 322, 323, 334, 335, 338, 344, 345, 346, 347, 351, 354, 356], "call_megam": [0, 30, 34], "call_tadm": [0, 30, 41], "callabl": [33, 72, 112, 124, 218, 269], "callback": [117, 118, 119], "caller": [112, 219], "callison": 261, "calv": 307, "calypso": 333, "cama": 333, "cambridg": [240, 248, 263, 264, 265, 266, 267, 268, 274, 346], "came": [190, 306], "camera": [57, 91, 307], "camera_review": [57, 91, 307], "caminho": 333, "campo": 333, "can": [2, 7, 8, 13, 14, 15, 24, 25, 28, 29, 30, 31, 33, 34, 36, 39, 43, 44, 46, 49, 52, 55, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 93, 94, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 121, 124, 125, 129, 131, 135, 136, 137, 142, 144, 145, 147, 156, 158, 159, 160, 161, 162, 163, 165, 167, 169, 170, 171, 172, 173, 174, 177, 179, 180, 181, 182, 186, 191, 192, 196, 197, 198, 201, 202, 203, 206, 209, 215, 216, 218, 222, 223, 225, 229, 231, 233, 234, 235, 236, 239, 240, 243, 244, 246, 247, 248, 253, 255, 258, 260, 265, 266, 267, 269, 273, 274, 275, 276, 277, 279, 281, 282, 284, 286, 287, 289, 291, 294, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 322, 326, 328, 330, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 344, 345, 346, 347, 349, 351, 352, 355, 356], "can_combin": [12, 15], "can_compos": [12, 13], "can_cross": [12, 13], "can_unifi": [12, 13], "cancel": 7, "candc": 181, "candid": [57, 107, 159, 229, 233, 243, 265, 266, 267, 270, 274, 296, 322, 327, 351, 356], "candidatur": 305, "cane": 351, "cani": 351, "canin": [57, 107, 291, 347, 351], "canis_familiari": 351, "cannib": 306, "cannot": [13, 57, 107, 120, 127, 129, 135, 136, 137, 190, 196, 198, 211, 215, 229, 235, 260, 267, 275, 279, 318, 322, 325, 326, 338, 344, 351], "canon": [57, 91, 107, 109, 192, 307], "canon_g3": [57, 91, 307], "canonic": 192, "cant": 198, "canton": 300, "canva": [7, 8, 114, 118, 119, 184, 185], "canvasfram": [0, 114, 119], "canvaswidget": [0, 114, 118, 119], "cao": 262, "cap": [192, 198, 333], "capabl": 191, "capacidad": 333, "capaz": 333, "cape": 234, "capit": [225, 243, 244, 339, 351], "capital_of": 182, "capitalis": 238, "captain": 307, "captor": 163, "captur": [131, 170, 192, 234, 244, 317, 344], "capture_output": 164, "capword_token": 244, "car": [207, 313, 332, 351], "carcass": 307, "card": 150, "cardin": [29, 192, 216, 220, 223, 266, 267, 307, 336, 343], "care": [104, 179, 215, 307, 339, 344], "caress": 342, "carnegi": 67, "carnivor": [57, 107, 291, 347, 351], "carp": 307, "carri": [125, 148, 182, 183, 300, 307, 336, 339], "carro": [333, 351], "cartaz": 333, "carter": 339, "cartesian": [125, 233], "carv": 307, "casa": 333, "casada": 333, "casamento": 333, "cascad": [28, 356], "case": [15, 33, 36, 39, 43, 46, 52, 55, 57, 59, 65, 72, 96, 99, 107, 112, 113, 116, 120, 121, 131, 132, 135, 137, 142, 144, 148, 156, 163, 174, 175, 182, 197, 203, 213, 214, 218, 221, 223, 234, 238, 240, 248, 258, 262, 266, 267, 269, 289, 294, 300, 305, 307, 309, 310, 311, 313, 314, 315, 321, 322, 323, 330, 332, 335, 336, 343, 344, 347, 351, 352], "case_insensit": 203, "casinha": 208, "casmurro": 333, "caso": 333, "cassati": 336, "cast": [131, 258, 273, 306], "castellan": 144, "castor": 307, "castro": 333, "casual": [0, 57, 102, 236, 307], "casual_token": [0, 236, 238], "cat": [36, 121, 156, 163, 175, 217, 221, 235, 258, 259, 262, 269, 275, 282, 302, 307, 312, 313, 320, 327, 332, 341, 347, 351], "cat_delimit": [57, 59, 86], "cat_field": 78, "cat_fil": [57, 59, 62, 78, 86, 87, 99], "cat_map": [57, 59, 62, 78, 86, 87, 99], "cat_pattern": [57, 59, 62, 78, 86, 87, 99], "catalan": [57, 60, 106, 133, 356], "catalog": 356, "catch": [36, 107, 291, 343], "categ": [12, 13, 14, 15, 16], "categor": [42, 57, 59, 62, 63, 78, 87, 97, 99, 266, 354, 356], "categori": [0, 12, 13, 15, 16, 30, 31, 32, 33, 35, 55, 57, 59, 62, 63, 75, 78, 86, 87, 90, 99, 106, 121, 123, 130, 144, 213, 223, 303, 305, 313, 314, 325, 334, 339, 356], "categorized_s": [55, 57], "categorizedbracketparsecorpusread": [55, 57, 62], "categorizedcorpusread": [55, 57, 59, 62, 63, 78, 86, 87, 90, 99, 334], "categorizedmarkdowncorpusread": [55, 57, 78, 307], "categorizedplaintextcorpusread": [55, 57, 78, 87], "categorizedsentencescorpusread": [55, 57, 63], "categorizedtaggedcorpusread": [55, 57, 99, 307], "catfish": [57, 72, 315], "cathi": [170, 172], "cathol": 109, "cathstaincliff": 344, "cato": 109, "caught": 338, "caus": [25, 107, 111, 131, 179, 232, 275, 277, 307, 309, 314, 315, 344, 347], "cause_change_of_scalar_posit": [57, 72, 315], "cause_mot": 315, "cause_t": 315, "cause_to_make_nois": [57, 72, 315], "caution": [236, 244], "caveat": [0, 28, 120, 288, 314], "cavnar": 42, "cb": 144, "cb01": 307, "cby": [57, 72], "cc": [91, 214, 216, 326, 343, 344, 347], "cc0": [57, 85], "ccb": [57, 106], "ccedil": 192, "ccg": [0, 295, 356], "ccg_semant": 295, "ccgbank": 299, "ccgchart": [0, 12, 14], "ccgchartpars": [0, 12, 14, 298, 299], "ccgedg": [0, 12, 14], "ccgleafedg": [0, 12, 14], "ccglexicon": [0, 12, 16], "ccgvar": [0, 12, 13, 16], "cd": [166, 214, 216, 223, 310, 332, 335, 343, 344, 354], "cdate": [57, 72], "cdp": 330, "ce": [240, 248], "ce01": 307, "ce02": 307, "ce03": 307, "ce04": 307, "ce05": 307, "ce06": 307, "ce07": 307, "ceas": 289, "cedil": 192, "cee": 312, "ceil": [199, 266, 268, 339], "cell": [117, 158, 164, 172, 310], "cell_extractor": [164, 310], "cell_separ": 164, "cell_valu": 117, "cem": 205, "cement": 205, "censu": 148, "cent": 192, "center": [39, 48, 119, 266, 267], "center_of_cept": [256, 268], "central": [294, 336], "central_africa": [182, 300], "centrifug": 353, "centroid": [46, 49, 50], "cept": [256, 266, 267, 268], "cereal": 317, "certain": [24, 57, 72, 135, 136, 232, 234, 266, 274, 330], "certainli": 307, "certifi": 291, "certo": 333, "ceuta": 336, "cf": 307, "cf01": 307, "cf02": 307, "cf03": 307, "cf04": 307, "cfd": 334, "cfd1": 334, "cfd2": 334, "cfdist": 179, "cfg": [0, 7, 8, 14, 111, 114, 121, 162, 165, 167, 168, 173, 174, 177, 182, 309, 313, 316, 320, 341, 356], "cfgdemo": [0, 114, 115], "cfgeditor": [0, 114, 115], "cfgreadingcommand": [0, 123, 125], "cfm": [271, 292], "cgi": 356, "ch": [53, 57, 67, 107, 307], "cha": [57, 65, 239], "chad": 109, "chain": [81, 89, 139, 218, 334, 335], "chair": 336, "chairman": [25, 307], "chalk": 169, "challeng": [57, 92, 356], "chamejant": 333, "chanc": [135, 144, 336], "chancellor": 307, "chang": [25, 39, 48, 107, 119, 131, 135, 142, 145, 148, 162, 173, 174, 204, 205, 206, 216, 218, 225, 232, 233, 256, 274, 294, 302, 314, 322, 343, 352, 356], "change_bodily_st": 307, "change_of_consist": [57, 72], "change_var": [180, 181], "changelog": 356, "channel": [55, 57, 75, 100, 353], "chapter": [55, 57, 79, 87, 179, 213, 218, 236, 240, 248, 306, 313, 328, 333, 356], "char": [55, 57, 106, 177, 246, 247, 254, 307, 326], "char_po": 273, "char_seek_forward": [0, 111], "charact": [28, 57, 62, 72, 75, 84, 104, 106, 111, 113, 115, 119, 135, 148, 162, 177, 187, 191, 219, 224, 234, 238, 240, 243, 244, 246, 247, 248, 253, 254, 259, 260, 275, 278, 279, 282, 288, 291, 307, 339, 344, 345, 347], "character": [57, 72, 119, 307], "character_bas": 273, "characteris": 218, "characterist": [57, 72], "charg": [315, 344], "charl": 315, "charm": 339, "charset": 219, "chart": [0, 1, 2, 12, 121, 159, 165, 167, 171, 172, 177, 281, 284, 298, 313, 356], "chart_class": [162, 165, 167, 177, 313], "chart_pars": [159, 162, 165, 332], "chartcel": [0, 159, 172], "chartoken": [0, 236, 247], "chartpars": [0, 1, 14, 159, 162, 165, 167, 177], "chartparser_app": [0, 1], "chartrulei": [0, 159, 162, 167], "chase": [125, 275, 282, 307, 311, 312, 319, 320, 330, 332, 338, 341, 347, 351], "chasen": [55, 57], "chasencorpusread": [55, 57, 64], "chasencorpusview": [55, 57, 64], "chasenread": 64, "chases_a_dog": 318, "chases_yprim": 318, "chat": [0, 180, 307, 356], "chat80": [0, 111, 180, 295], "chat_pnam": [182, 300], "chatbot": [0, 18, 20, 23, 24], "chatti": 112, "chdir": 309, "che": [57, 107], "cheat": 307, "check": [0, 15, 28, 30, 43, 57, 107, 111, 117, 119, 120, 121, 125, 131, 135, 136, 142, 153, 158, 164, 170, 176, 179, 181, 182, 184, 186, 190, 191, 194, 197, 198, 213, 219, 232, 254, 272, 275, 277, 291, 294, 300, 307, 313, 314, 319, 322, 332, 345, 347, 351], "check_binari": [219, 322, 330], "check_cach": [57, 72], "check_coverag": [0, 121], "check_date_limit": [285, 286], "check_except": [57, 107], "check_jar": 163, "check_megam_config": [0, 30, 43], "check_reentr": [120, 314], "checker": 356, "checksum": [0, 113], "cheek": 20, "chees": 67, "chef": [107, 298, 351, 352], "chega": 333, "chegar": 333, "cheguei": 333, "chelli": 209, "chen": [96, 136, 138, 140, 258, 262, 296], "chencherri": 258, "cheng": [83, 90], "cherri": [258, 296], "chew": [302, 307], "chi": [38, 57, 65, 146, 192, 301, 305], "chi2": 38, "chi_sq": [143, 146, 305, 328], "chiba": [83, 90], "chicago": [68, 83, 91], "chief": [234, 305, 336], "chil": 313, "child": [24, 32, 55, 57, 72, 114, 118, 119, 121, 131, 162, 170, 172, 173, 255, 275, 277, 279, 281, 282, 284, 295, 313, 315, 347, 349, 356], "child1": 164, "child2": 164, "child3": 164, "child4": 164, "child_edg": 162, "child_pointer_list": [159, 162, 167], "child_widget": [114, 119], "childchar": [275, 281, 282], "childes_fixt": [301, 311], "childes_url_bas": [55, 57, 65], "childescorpusread": [55, 57, 65], "childless": 162, "children": [0, 7, 14, 32, 107, 113, 114, 118, 119, 121, 162, 163, 164, 171, 172, 173, 178, 275, 276, 277, 280, 281, 282, 284, 291, 298, 313, 347, 349], "chin": 258, "china": 300, "chines": [96, 242, 275, 278], "chinese_mandarin": [57, 103], "chit_chat": 307, "chk": 39, "chktagger": 222, "chodorow": [57, 107, 351], "choic": [57, 65, 162, 171, 353], "cholesterol": 307, "chomski": [0, 121, 153, 275, 281, 282, 284, 320, 349], "chomsky_normal_form": [0, 121, 275, 281, 282, 284, 349, 356], "choos": [0, 7, 8, 31, 33, 120, 121, 174, 206, 209, 223, 233, 273, 291, 307, 309, 314], "choose_tag": [213, 223], "chordat": [57, 107, 291, 347, 351], "chosen": [30, 33, 46, 48, 50, 113, 269, 271], "chrf": [259, 356], "chrf_precision_recall_fscore_support": [0, 256, 259], "chrf_score": [0, 256], "chri": [149, 205, 281, 284], "christian": 336, "christoph": [109, 240], "chrodegang": 109, "chronicl": 109, "chu": 96, "chuck": 344, "chungk": 300, "chunk": [0, 1, 3, 16, 55, 57, 69, 86, 93, 100, 192, 218, 222, 272, 295, 328, 333, 336, 344, 354, 356], "chunk_label": [28, 29, 302], "chunk_pars": 302, "chunk_rul": 302, "chunk_sent": [55, 57, 93, 307], "chunk_siz": 289, "chunk_struct": 28, "chunk_tag": [25, 28], "chunk_tag_char": [25, 28], "chunk_tag_pattern": [25, 28], "chunk_typ": [29, 57, 69, 71, 222, 307], "chunked_para": [55, 57, 66], "chunked_s": [55, 57, 66, 69, 307, 336], "chunked_text": 302, "chunked_word": [55, 57, 66, 69], "chunkedcorpusread": [55, 57, 66], "chunkedcorpusview": [55, 57, 66], "chunker": [25, 26, 27, 28, 29, 294, 328, 356], "chunkpars": [1, 28, 29], "chunkparser_app": [0, 1], "chunkparseri": [0, 25, 26, 27, 28, 29], "chunkrul": [0, 25, 28, 302], "chunkrulewithcontext": [0, 25, 28, 302], "chunkscor": [0, 25, 26, 28, 29, 302], "chunkstr": [0, 25, 28], "chunktre": [57, 66], "church": [53, 57, 107, 109, 211, 260, 351], "ch\u00e3o": 333, "ci": [57, 88, 106, 182, 203, 253, 300, 356], "ci2": 205, "cim": 208, "cima": 208, "cine": 298, "cinematographi": 339, "circ": 192, "circle_of_lat": [182, 300], "circle_of_long": [182, 300], "circumv": 192, "circunspecta": 333, "circunst\u00e2ncia": 333, "cistem": [0, 199, 356], "citat": [55, 57, 59, 107, 271, 292], "cite": [0, 198, 354], "citi": [97, 100, 111, 182, 300, 307, 313, 336, 344], "cities2t": [0, 180, 182], "citizen": [234, 307], "city3": 205, "city_databas": 300, "city_t": 300, "cjk": 254, "cjk_compatibility_form": [236, 254], "cjk_compatibility_ideograph": [236, 254], "cjk_radic": [236, 254], "cjkchar": [0, 236, 254], "ckip": 96, "cl": [52, 120, 131, 132, 140, 257, 258, 275, 276, 280, 282, 305, 309], "claim": [163, 313, 339], "clarifi": 307, "clariss": 208, "clarissa": 208, "clash": [184, 191], "clasp": 307, "class": [13, 14, 15, 16, 18, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 142, 143, 144, 146, 147, 148, 149, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 229, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 260, 263, 264, 265, 266, 267, 268, 274, 275, 276, 277, 279, 280, 282, 283, 285, 286, 287, 288, 289, 290, 291, 300, 301, 303, 305, 309, 313, 314, 315, 321, 322, 323, 336, 339, 344, 346, 347, 351, 356], "class_abbrev": [0, 180, 192], "classic": [323, 353], "classid": [55, 57, 105, 307], "classif": [30, 31, 33, 34, 36, 37, 38, 40, 41, 52, 91, 92, 97, 170, 196, 197, 303, 354, 356, 358], "classifi": [0, 27, 46, 47, 51, 52, 92, 107, 170, 195, 196, 197, 213, 214, 223, 243, 291, 295, 307, 339, 351, 356], "classification_probdist": [46, 47], "classifier_build": 223, "classifierbasedpostagg": [0, 213, 223], "classifierbasedtagg": [0, 27, 213, 223], "classifieri": [0, 30, 31, 32, 33, 35, 38, 44, 303], "classify_fixt": 303, "classify_mani": [30, 31, 38, 44, 303], "classify_vectorspac": [46, 48, 49, 50, 51], "classmethod": [13, 33, 35, 44, 53, 121, 132, 146, 161, 184, 186, 190, 191, 215, 218, 221, 223, 231, 232, 233, 257, 275, 276, 280, 282, 309, 347], "classnam": 231, "classpath": [44, 131, 224], "claus": [0, 28, 123, 129, 180, 182, 192, 313, 322, 336, 337], "clausal": 192, "clause2concept": [0, 180, 182, 300], "clausifi": [0, 123, 129, 322, 337], "claws5_tagset": [0, 122], "cldr": [57, 60], "clean": [180, 181, 309, 346, 356], "clean_html": [0, 291], "clean_url": [0, 291], "cleanup": 356, "clear": [0, 52, 111, 114, 117, 119, 120, 162, 165, 167, 180, 185, 186, 216, 307, 309, 314, 322, 334, 343], "clear_abbrev": [236, 243], "clear_cach": [0, 111, 309], "clear_colloc": [236, 243], "clear_ortho_context": [236, 243], "clear_sent_start": [236, 243], "clear_status_cach": [0, 113], "clearli": [14, 57, 72, 206, 235, 298, 315, 332], "clever": [307, 339], "cli": 0, "clich": 344, "click": [7, 8, 117, 119, 294], "click1": 119, "click2": 119, "click3": 119, "click_to_sort": 117, "client": [10, 286, 289, 339], "client_arg": 289, "clientela": 333, "cliff": 262, "clig": 119, "climb": [46, 50, 265, 266, 267, 268], "cling": 307, "clip": 306, "clock": 354, "clone": [123, 130], "close": [0, 25, 57, 72, 104, 111, 118, 119, 127, 131, 176, 180, 182, 185, 186, 190, 191, 213, 219, 243, 246, 253, 255, 300, 307, 309, 317, 323, 339], "close_bracket": [180, 184], "close_punct": [236, 252, 344], "close_punct_r": [236, 252], "close_punctu": [57, 106], "closed_domain_demo": [0, 123, 127], "closed_world_demo": [0, 123, 127], "closeddomainprov": [0, 123, 127, 330], "closedworldprov": [0, 123, 127, 330], "closer": [186, 305], "closest": [46, 49, 50, 57, 104, 107, 251, 258, 307, 351], "closest_ref_len": 258, "closest_ref_length": [0, 256, 258], "closur": [57, 107, 121, 127, 182, 291, 300], "cloud": 306, "clr": 348, "club": [192, 306], "clue": [57, 68], "cluster": [0, 88, 240, 356], "cluster_nam": [46, 47], "cluster_vectorspac": [46, 48, 49, 50, 51], "clusteri": [0, 46, 47, 51], "cm": [147, 328], "cmd": [131, 330, 332], "cmn": 351, "cmp_chunk": [0, 25, 27], "cmu": [57, 62, 65, 67, 269, 307, 356], "cmudict": [55, 57, 307], "cmudictcorpusread": [55, 57, 67], "cn": [119, 275, 282], "cn1t": 205, "cnf": [117, 119, 193, 275, 281, 282, 284], "cnftree": 349, "cnr": 95, "cnut": 109, "co": [33, 57, 72, 202, 251, 271, 273, 301, 305, 307, 315, 344, 356], "coadrian": 109, "coaelhom": 109, "coaeliv": 109, "coalcuin": 109, "coalex": 109, "coalit": 307, "coapollo": 109, "coars": [57, 81, 89, 220, 335], "coaugust": 109, "cobed": 109, "cobenrul": 109, "coblick": 109, "coboeth": 109, "cobweb": 307, "cobyrhtf": 109, "cocanedgd": 109, "cocanedgx": 109, "cocathom1": 109, "cocathom2": 109, "coch": 351, "cochad": 109, "cochdrul": 109, "cochristoph": 109, "cochron": 109, "cochrona": 109, "cochronc": 109, "cochrond": 109, "cocoa": 307, "coconut": 307, "cocura": 109, "cocurac": 109, "cod": [57, 72, 315], "coda": 240, "code": [25, 28, 42, 57, 60, 70, 84, 107, 109, 117, 131, 133, 154, 178, 179, 182, 188, 192, 204, 209, 213, 218, 220, 233, 235, 247, 254, 259, 273, 275, 279, 283, 288, 289, 300, 301, 307, 317, 322, 344, 351, 356, 358], "code_block": [57, 78], "code_block_read": [57, 78], "codebas": 356, "codeblock": [55, 57, 78], "codec": [111, 255, 287, 307], "coder": 144, "codeset": 133, "codict": 109, "codocu1": 109, "codocu2": 109, "codocu3": 109, "codocu4": 109, "coeffici": [144, 146, 152, 217, 273, 291, 305], "coeluc1": 109, "coeluc2": 109, "coepigen": 109, "coerc": 314, "coeuphr": 109, "coeust": 109, "coexodusp": 109, "coffe": 307, "cogenes": 109, "cogniz": [57, 72], "cogregdc": 109, "cogregdh": 109, "cohen": 144, "coher": [307, 344], "coherbar": 109, "cohes": 163, "cohn": [336, 358], "coil": [156, 307], "coinspold": 109, "coinspolx": 109, "coisa": 333, "cojam": 109, "cojn": 347, "col": [117, 158, 214, 328, 343], "col_index": 117, "colacnu": 109, "colaec": 109, "colaw1cn": 109, "colaw2cn": 109, "colaw5atr": 109, "colaw6atr": 109, "colawaf": 109, "colawafint": 109, "colawg": 109, "colawin": 109, "colawnorthu": 109, "colawwllad": 109, "cold": 306, "cole": [68, 90, 258], "coleofri": 109, "collaps": [118, 170, 275, 281, 282, 284, 307, 339, 349], "collapse_nod": [159, 170], "collapse_unari": [0, 275, 281, 282, 284, 349], "collapsed_tre": [114, 118], "collapsedtre": 349, "collapsedtree2": 349, "collapsepo": [275, 281, 282, 284, 349], "collapseroot": [275, 281, 282, 284, 349], "collapseunari": [275, 282], "colleagu": 315, "colleciton": 113, "collect": [0, 46, 53, 57, 74, 102, 104, 113, 119, 135, 137, 142, 146, 162, 167, 174, 178, 179, 191, 209, 215, 218, 229, 234, 243, 264, 265, 266, 267, 274, 281, 284, 286, 289, 294, 295, 307, 333, 356], "collin": [258, 296], "collis": 120, "colloc": [0, 1, 57, 107, 196, 234, 236, 243, 295, 328, 333, 356], "colloc_thr": 243, "collocation_list": [0, 234, 356], "collocations_app": [0, 1], "colon": [57, 60, 100, 177, 180, 184, 224, 253, 309, 342], "color": [25, 117, 118, 119, 249, 275, 279, 305, 307], "colorado": [57, 105], "colorizedlist": [0, 114, 115, 119], "colortag": 119, "colour": [163, 249], "colowick": [57, 85], "colsigef": 109, "colsigewb": 109, "colsigewz": 109, "colum": 117, "columbu": 252, "column": [0, 33, 57, 69, 113, 117, 158, 164, 170, 275, 279], "column_index": [114, 117, 170], "column_label": [114, 117], "column_nam": [114, 117], "column_typ": [55, 57, 69], "column_weight": [0, 113, 117], "column_width": [0, 113], "columnconfig": [114, 117], "columnconfigur": [114, 117], "columntyp": [57, 69], "colwgeat": 109, "colwsiget": 109, "colwsigexa": 109, "colwstan1": 109, "colwstan2": 109, "com": [72, 91, 111, 113, 117, 134, 140, 169, 208, 209, 220, 242, 252, 254, 259, 279, 283, 287, 288, 289, 291, 294, 298, 301, 306, 307, 309, 317, 325, 333, 344, 351, 355, 356], "com_ibm1": 346, "comargac": 109, "comargat": 109, "comari": 109, "comart1": 109, "comart2": 109, "comart3": 109, "comarvel": 109, "comb": 291, "combat": [281, 284], "combin": [0, 8, 12, 13, 14, 29, 33, 51, 52, 57, 62, 113, 120, 125, 135, 157, 162, 165, 174, 184, 190, 191, 213, 218, 231, 233, 240, 267, 287, 289, 291, 307, 311, 313, 314, 318, 333, 339, 346, 351], "combination_prover_demo": [0, 123, 127], "combinatori": [12, 13, 57, 72, 315, 351], "combine_read": [123, 125], "come": [24, 135, 138, 161, 289, 294, 307, 333, 355], "come\u00e7": 333, "coming_to_believ": [57, 72], "comint": 25, "comma": [78, 120, 121, 180, 191, 253, 289, 307, 314], "comma_in_num": [236, 252], "comma_separated_string_arg": [55, 57, 78], "command": [10, 18, 124, 131, 169, 224, 245, 258, 259, 262, 269, 271, 273, 322, 330, 355], "comment": [28, 36, 57, 62, 100, 104, 145, 177, 229, 307, 322, 325, 344, 356], "comment_char": [57, 62, 104, 177, 307], "commerc": 242, "commiss": 271, "commission": 336, "commit": [315, 356], "committe": 344, "committing_crim": [57, 72], "common": [0, 46, 52, 55, 57, 59, 65, 72, 96, 107, 128, 131, 135, 136, 138, 142, 148, 162, 196, 199, 202, 218, 220, 234, 243, 268, 285, 301, 305, 315, 317, 333, 343, 351, 356], "common_context": [0, 234], "common_hypernym": [57, 107], "commonli": [46, 50, 291, 305, 346], "commun": [113, 219, 354], "commut": [313, 351], "como": 333, "comp": [57, 80, 220, 301, 307, 313], "comp_typ": 68, "compact": 351, "compani": [92, 242, 306, 307, 344, 347], "companion": 109, "compar": [7, 29, 42, 57, 68, 77, 83, 90, 107, 135, 142, 147, 148, 150, 152, 157, 167, 201, 202, 203, 214, 223, 231, 232, 305, 307, 314, 328, 347, 351, 356], "comparative_s": [55, 57, 307], "comparative_sent": [57, 68], "comparativesentencescorpusread": [55, 57, 68], "comparison": [55, 57, 68, 91, 144, 145, 148, 179, 215, 236, 240, 251, 258, 286, 296, 307, 346, 347, 351], "compat": [0, 107, 111, 120, 179, 194, 206, 233, 235, 275, 282, 338, 356], "compel": 339, "compet": 91, "compil": [120, 180, 187, 190, 198, 203, 205, 225, 238, 239, 242, 243, 244, 252, 253, 302, 313, 322, 336], "compile_neg": [180, 190], "compile_po": [180, 190, 318], "compileflag": 322, "compl": 315, "complain": [302, 307], "complementari": [36, 260], "complet": [7, 25, 28, 55, 57, 61, 65, 93, 104, 111, 118, 119, 120, 127, 144, 161, 162, 165, 167, 171, 173, 174, 179, 185, 191, 198, 234, 274, 275, 281, 282, 284, 294, 307, 313, 315, 330, 333, 356], "completefundamentalrul": [0, 159, 165], "completerrul": [0, 159, 165], "complex": [25, 57, 72, 111, 119, 121, 186, 281, 284, 302, 313, 315], "complextyp": [0, 180, 191, 326], "compli": 109, "complic": 199, "compon": [92, 111, 180, 188, 243, 311, 312, 315, 351], "component_sound": [57, 72], "compos": [57, 61, 69, 72, 80, 93, 108, 162, 165, 197, 315], "composit": [13, 15, 57, 60, 133, 299, 312], "compositionruleset": 298, "compostura": 333, "compound": [163, 339], "compr": 68, "comprehens": [333, 354, 356], "compress": [33, 111, 113, 145, 197, 287, 289, 309, 356], "compris": 191, "compromis": 356, "compr\u00f3": 298, "comput": [17, 29, 33, 35, 36, 37, 38, 50, 52, 57, 68, 83, 90, 91, 96, 107, 135, 136, 138, 141, 144, 145, 146, 147, 148, 151, 172, 179, 182, 202, 203, 207, 214, 218, 231, 232, 243, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 271, 281, 284, 291, 294, 300, 301, 307, 317, 322, 347, 351, 354, 356], "compute_composition_semant": [0, 12, 17, 299], "compute_function_semant": [0, 12, 17, 299], "compute_future_scor": [256, 274], "compute_max_subtract_scor": [159, 170], "compute_original_index": [159, 170], "compute_prob": [159, 172], "compute_semant": [0, 12, 14], "compute_substitution_semant": [0, 12, 17, 299], "compute_type_raised_semant": [0, 12, 17, 299], "computer_sci": [107, 351], "comsem": 125, "comtran": [257, 346], "comunit": 333, "con": [57, 90, 307], "con_list": 306, "concat": [55, 57, 104, 307], "concaten": [52, 55, 57, 60, 104, 159, 172, 203, 226, 314], "concatenated_view": [57, 78], "concatenatedcorpusview": [55, 57, 104, 307], "conceal": 307, "conceiv": [273, 351], "concept": [0, 33, 180, 268, 307, 315], "conceptu": [57, 72, 107, 135, 179, 229, 232, 315], "concern": [107, 351], "concis": [258, 307], "conclud": 322, "concord": [0, 1, 234, 295, 333, 356], "concordanc": [1, 234], "concordance_app": [0, 1], "concordance_list": [0, 234, 306], "concordanceindex": [0, 234], "concret": [81, 89, 135, 136, 138, 231, 307, 351], "cond": [181, 184, 312, 333], "cond_sampl": 179, "condit": [0, 32, 33, 36, 135, 136, 137, 162, 172, 176, 179, 181, 184, 215, 217, 218, 232, 234, 286, 312, 334, 344], "conditionalexponentialclassifi": [0, 30, 33, 303], "conditionalfreqdist": [0, 135, 137, 179, 356], "conditionalprobdist": [0, 179, 334], "conditionalprobdisti": [0, 179, 218], "conduct": [203, 344, 348], "cone": 292, "coneot": 109, "conf": [57, 85, 176], "confer": [68, 83, 88, 90, 91, 198, 202, 259, 292, 356], "confess": [57, 105, 307], "confid": [170, 307, 353, 356], "config": [52, 57, 79, 245], "config_java": [0, 131], "config_megam": [0, 30, 34], "config_prover9": [123, 128, 322], "config_tadm": [0, 30, 41], "config_weka": [0, 30, 44], "configur": [0, 34, 43, 114, 117, 131, 159, 176, 307, 322, 356], "confin": [107, 291, 307, 351], "conflict": [0, 108, 120], "conform": [225, 356], "confus": [33, 57, 87, 147, 213, 214, 297, 343, 344, 356], "confusionmatrix": [0, 143, 214, 328], "cong": 192, "congen": 351, "conicod": 109, "conicoda": 109, "conicodc": 109, "conicodd": 109, "conj": [79, 119, 213, 220, 305, 333, 336, 348], "conjectur": 307, "conjp": 347, "conjunct": [13, 57, 72, 170, 188, 191, 193, 220, 315, 326, 333, 339, 343], "conll": [29, 55, 57, 164, 169, 177, 192, 307, 356], "conll2000": [29, 307], "conll2002": [192, 307, 336, 356], "conll2007": 307, "conll_data2": [170, 172], "conll_demo": [0, 159, 164], "conll_fil": 169, "conll_file_demo": [0, 159, 164], "conllchunkcorpusread": [55, 57, 69, 307], "conllcorpusread": [55, 57, 69, 307], "conllesp": [0, 180, 192], "conlln": [0, 180, 192], "conllsrlinst": [55, 57, 69], "conllsrlinstancelist": [55, 57, 69], "conllstr2tre": [0, 25, 29], "conlltags2tre": [0, 25, 29], "connect": [10, 57, 72, 107, 118, 164, 170, 204, 219, 275, 281, 282, 284, 294, 351], "connect_graph": [159, 164], "connexion": 306, "conrath": [57, 107, 351], "consecut": [53, 57, 69, 345], "conseguiss": 333, "conseq": 333, "consequ": [181, 184, 190, 240, 258], "conseq\u00fcentement": 333, "conserv": [52, 356], "consid": [8, 33, 36, 39, 57, 68, 72, 91, 113, 119, 120, 121, 135, 142, 147, 170, 178, 196, 197, 223, 229, 231, 235, 240, 243, 247, 258, 264, 265, 266, 267, 268, 274, 275, 279, 305, 307, 311, 314, 346, 351], "consider": [91, 104, 196, 198, 202, 232, 267, 268, 274, 307], "considera": 333, "considerablement": 307, "consist": [13, 14, 25, 33, 52, 57, 59, 62, 65, 67, 68, 69, 72, 77, 81, 87, 89, 93, 97, 102, 104, 111, 113, 115, 121, 125, 129, 135, 137, 142, 148, 158, 162, 171, 173, 180, 182, 213, 216, 220, 223, 234, 240, 242, 244, 246, 260, 262, 272, 275, 282, 289, 291, 300, 307, 314, 315, 322, 333, 335, 336, 351, 356], "consistchk": [125, 311], "consol": [109, 234, 288, 322], "consolid": [25, 332], "conson": [205, 209, 240], "conspir": 307, "constant": [0, 33, 113, 127, 148, 151, 179, 180, 182, 186, 188, 190, 191, 198, 206, 224, 251, 300, 311, 312, 313, 326, 338], "constantexpress": [0, 180, 184, 190, 191, 194, 318, 337], "constantino": 333, "constitu": [2, 26, 57, 68, 81, 89, 162, 178, 275, 281, 282, 284, 335], "constitut": [57, 72, 146, 178, 311, 315], "constrain": [124, 172, 218, 267, 268, 351], "constraint": [0, 15, 120, 121, 161, 172, 180, 188, 233, 240], "constrast": 339, "construct": [14, 25, 28, 30, 32, 33, 38, 43, 44, 51, 52, 53, 57, 58, 59, 61, 64, 65, 69, 70, 71, 72, 75, 78, 79, 82, 84, 85, 87, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 111, 117, 118, 119, 120, 121, 124, 125, 146, 147, 161, 162, 167, 170, 171, 173, 179, 182, 186, 189, 192, 216, 223, 225, 231, 232, 233, 234, 235, 239, 258, 275, 282, 298, 302, 305, 307, 313, 314, 343, 346, 348], "constructor": [28, 33, 44, 57, 61, 62, 69, 78, 79, 80, 87, 93, 99, 102, 104, 107, 108, 113, 118, 119, 120, 124, 125, 139, 144, 161, 164, 167, 171, 179, 186, 188, 190, 191, 206, 221, 243, 246, 275, 282, 302, 311, 312, 314, 322], "consult": [213, 218, 223, 259, 333], "consum": [28, 260, 307, 351], "cont_bigram_measur": 305, "contact": [0, 68, 83, 90, 91, 113, 134, 344], "contain": [0, 7, 8, 13, 25, 28, 29, 30, 32, 33, 34, 36, 39, 41, 43, 46, 52, 57, 59, 63, 66, 67, 68, 69, 72, 73, 75, 77, 79, 81, 86, 88, 89, 91, 92, 99, 100, 104, 105, 107, 111, 112, 113, 117, 118, 119, 120, 121, 125, 126, 127, 128, 129, 131, 132, 135, 137, 144, 150, 159, 162, 163, 164, 165, 167, 169, 173, 174, 179, 180, 182, 183, 186, 187, 188, 191, 197, 198, 205, 209, 213, 218, 219, 222, 226, 231, 235, 241, 244, 246, 247, 257, 258, 260, 267, 271, 272, 274, 275, 279, 282, 285, 287, 288, 289, 290, 299, 300, 302, 305, 307, 309, 313, 314, 315, 320, 325, 330, 333, 335, 338, 341, 345, 347, 351, 353, 356], "contains0": [182, 300], "contains_address": [159, 164], "contains_cycl": [159, 164], "contar": 333, "contempl": 296, "content": [8, 14, 16, 52, 53, 58, 59, 61, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 78, 79, 82, 83, 84, 85, 86, 93, 94, 98, 99, 102, 104, 105, 107, 108, 109, 111, 113, 119, 125, 148, 162, 191, 196, 255, 287, 291, 309, 346, 351, 356], "context": [28, 30, 33, 53, 61, 70, 80, 93, 94, 108, 111, 115, 121, 130, 135, 136, 137, 138, 140, 153, 156, 163, 171, 181, 184, 190, 191, 192, 213, 219, 223, 229, 234, 243, 274, 281, 284, 292, 302, 306, 307, 309, 325, 333, 336, 343, 353], "context_count": [135, 136, 325], "context_func": 234, "context_sent": 292, "context_to_tag": 223, "contextindex": [0, 234], "contexttagg": [0, 213, 223], "contigu": [25, 53, 172, 197, 229, 231, 275, 277], "contiguous_loc": 307, "contin": 182, "conting": 146, "contingencymeasur": [0, 143, 146, 305], "continu": [7, 28, 33, 46, 48, 49, 135, 137, 148, 162, 171, 172, 178, 307, 322, 356], "continua": 333, "conto": 333, "contract": [239, 253, 339, 356], "contractions2": [236, 239, 253], "contractions3": [236, 239, 253], "contractions4": [236, 239], "contrast": [57, 72, 111, 245, 263, 264, 266, 268], "contrib": [12, 356], "contribut": [215, 229, 263, 264, 307, 356], "contributor": [206, 293], "control": [2, 7, 8, 36, 57, 86, 113, 119, 171, 221, 236, 269, 333, 351, 353], "contr\u00e1rio": 333, "conv_test": 50, "conv_threshold": 48, "conven": 307, "conveni": [117, 131, 135, 137, 141, 238, 267, 268, 290, 291, 313, 314, 326, 356], "convent": [144, 172, 231, 233, 244, 247, 268, 307, 313, 333, 336], "converg": [33, 46, 48, 50, 217, 218], "convergence_logprob": 218, "convers": [18, 23, 24, 33, 57, 60, 66, 79, 121, 197, 258, 322, 339, 349], "convert": [0, 16, 24, 25, 28, 29, 30, 34, 41, 44, 57, 59, 60, 61, 62, 64, 65, 69, 70, 71, 72, 75, 76, 79, 80, 81, 82, 84, 85, 89, 93, 98, 105, 107, 108, 109, 111, 112, 117, 118, 120, 121, 125, 128, 131, 133, 135, 138, 164, 170, 177, 181, 182, 184, 186, 188, 191, 192, 193, 194, 197, 198, 219, 220, 234, 255, 275, 276, 278, 279, 280, 281, 282, 284, 287, 288, 289, 291, 300, 301, 302, 307, 312, 322, 335, 338, 344, 347, 349], "convert_ag": [55, 57, 65], "convert_parenthes": [236, 239, 253], "convert_to_prover9": [0, 123, 128], "convolut": [251, 273], "convolv": 251, "coo": 347, "coocurr": 328, "cook": [57, 72, 298, 299, 307, 311, 315, 322], "cookbook": [117, 356], "cooki": [162, 165, 167, 307, 332, 347], "cooking_cr": [57, 72, 315], "cool": 135, "coomb": 204, "cooool": [238, 344], "cooper": [183, 307], "cooper_storag": [0, 180, 338], "cooperstor": [0, 180, 183, 338], "coord": [275, 279, 301, 331], "coordin": [119, 172, 275, 279], "coorosiu": 109, "cootest": 109, "cop": [163, 301], "cope": 307, "copi": [0, 25, 52, 57, 65, 111, 112, 113, 120, 162, 167, 179, 180, 186, 192, 208, 236, 237, 239, 242, 244, 247, 250, 251, 252, 253, 275, 276, 277, 280, 282, 307, 311, 314, 329, 333, 347, 349], "copiar": [208, 333], "copper": 307, "copra": 307, "coprefcath1": 109, "coprefcath2": 109, "coprefcura": 109, "coprefgen": 109, "coprefl": 109, "coprefsolilo": 109, "copula": 192, "copy_mptre": 347, "copy_ptre": 347, "copy_tre": 347, "copyright": [0, 67, 112, 113, 134, 145], "coquadru": 109, "core": [57, 72, 163, 182, 183, 238, 313, 338, 358], "corefer": 356, "corenlp": [0, 159, 356, 358], "corenlp_opt": [163, 175], "corenlpdependencypars": [0, 159, 163], "corenlppars": [0, 159, 163], "corenlpserv": [0, 159, 163], "corenlpservererror": [0, 159, 163], "coretyp": [57, 72], "corgi": 351, "corn": 307, "cornel": [57, 63, 65], "corner": [117, 119, 121, 162, 170, 307, 332], "cornet_d": 336, "corood": 109, "corpid": [57, 72], "corpnam": [57, 72, 315], "corpo": 333, "corpora": [0, 53, 57, 58, 59, 62, 63, 65, 66, 69, 70, 78, 79, 80, 87, 91, 92, 99, 102, 103, 108, 110, 111, 113, 182, 192, 229, 243, 260, 269, 294, 300, 301, 309, 354, 356], "corpu": [0, 25, 30, 33, 34, 37, 41, 42, 43, 52, 113, 135, 146, 179, 192, 197, 206, 209, 213, 214, 215, 216, 223, 229, 230, 232, 233, 234, 236, 240, 243, 251, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 271, 273, 275, 281, 282, 284, 291, 293, 294, 295, 299, 303, 305, 306, 309, 310, 315, 317, 318, 325, 332, 334, 335, 336, 339, 340, 343, 344, 347, 348, 351, 352, 353, 354, 356], "corpus1": [57, 76], "corpus_bleu": [0, 256, 258], "corpus_chrf": [0, 256, 259], "corpus_data": 301, "corpus_fil": [57, 58, 64, 71, 74, 86, 99], "corpus_gleu": [0, 256, 262], "corpus_nist": [0, 256, 271], "corpus_particip": 301, "corpus_property_kei": [57, 65], "corpus_read": 307, "corpus_rib": [0, 256, 273], "corpus_root": [65, 301], "corpus_s": [0, 227, 229], "corpus_view": 104, "corpusread": [55, 57, 58, 59, 60, 63, 64, 66, 67, 68, 69, 70, 73, 74, 75, 77, 81, 83, 84, 87, 88, 89, 90, 91, 94, 95, 97, 98, 99, 100, 101, 102, 106, 107, 108, 109, 110, 247, 307], "corpusreader_demo": [0, 285, 288], "corpusview": [55, 57, 63, 68, 83, 87, 90, 91, 102, 104, 307], "corrado": 262, "correct": [16, 25, 27, 29, 33, 111, 121, 147, 159, 170, 191, 215, 216, 218, 223, 225, 230, 233, 243, 301, 303, 307, 314, 322, 332, 343, 346, 356], "correct_sent": 29, "correct_tag": 233, "correctli": [29, 111, 147, 179, 203, 294, 307, 339, 343, 347, 348], "correcttag": 233, "correl": [146, 152, 262, 269, 273, 307, 328], "correm": 333, "correspond": [2, 13, 14, 15, 28, 32, 33, 34, 35, 41, 47, 51, 55, 57, 59, 61, 69, 72, 75, 79, 80, 81, 86, 89, 93, 100, 104, 107, 108, 110, 111, 117, 118, 120, 121, 125, 131, 147, 149, 150, 151, 162, 164, 167, 170, 172, 182, 186, 214, 215, 218, 222, 223, 224, 226, 232, 237, 243, 244, 247, 253, 254, 257, 266, 273, 275, 278, 281, 282, 284, 287, 288, 289, 300, 307, 308, 311, 313, 314, 315, 322, 327, 333, 335, 336, 346, 347], "corrod": 351, "corrupt": [113, 302, 339], "cor\u00e1": 333, "cosevensl": 109, "cosin": [49, 51, 317, 356], "cosine_dist": [0, 46, 51], "cosolilo": 109, "cosolsat1": 109, "cosolsat2": 109, "cost": [34, 39, 110, 147, 148, 151, 163, 171, 214, 236, 239, 242, 244, 247, 249, 253, 254, 260, 274, 307, 341, 344], "costura": 333, "cotempo": 109, "cotizaba": 307, "cotton": [109, 307], "could": [39, 57, 63, 69, 72, 107, 129, 132, 135, 148, 171, 178, 179, 235, 251, 259, 273, 274, 275, 279, 282, 305, 306, 307, 309, 313, 344, 351], "couldn": [198, 339, 344], "couldnt": 198, "council": 336, "counsel": 336, "count": [0, 52, 53, 57, 107, 111, 121, 135, 136, 137, 138, 140, 142, 146, 147, 149, 150, 179, 197, 215, 234, 243, 256, 258, 262, 263, 264, 265, 266, 267, 268, 273, 286, 288, 301, 305, 309, 317, 325, 328, 331, 333, 335, 351], "count_cutoff": [33, 303], "count_of_1gram_1": 146, "count_of_1gram_n": 146, "count_of_n": 146, "count_of_ngram": 146, "count_of_total_word": 146, "counter": [0, 67, 124, 131, 135, 136, 138, 140, 142, 179, 187, 190, 285, 286, 318, 322, 338], "counter_arg": [135, 142], "counter_kwarg": [135, 142], "counterexampl": 322, "counterpart": [263, 264, 268, 272], "counti": [55, 57, 97, 223, 294, 307, 344], "countri": [182, 300], "country_of": 300, "coupl": 311, "cours": [24, 140, 144, 311, 314, 356], "court": [36, 344], "covari": [46, 48], "covariance_matric": 48, "cover": [47, 121, 135, 162, 173, 174, 178, 272, 274, 307, 343, 353, 356], "coverag": [57, 105, 181], "coverhom": 109, "coverhoml": 109, "covinceb": 109, "covins": 109, "cow": 67, "cowsgosp": 109, "cowulf": 109, "coxilh": 208, "coxilha": 208, "cp": [300, 313, 318], "cp1250": [57, 103], "cp1251": [57, 103], "cp1256": [57, 103], "cp2": 313, "cpan": [57, 106], "cpd": 334, "cpd2": 334, "cpdist": 179, "cpi": 307, "cprobdisti": 218, "cpu": 307, "cr": 333, "cramp": 351, "crane": 307, "cranenburgh": [279, 283], "crarr": 192, "crash": [163, 254, 344], "crawler": 308, "cream": 292, "creat": [6, 7, 8, 28, 29, 33, 42, 48, 52, 57, 58, 64, 66, 70, 71, 72, 74, 75, 78, 79, 80, 83, 85, 86, 87, 94, 99, 104, 107, 108, 110, 111, 113, 115, 117, 118, 119, 120, 121, 128, 131, 134, 135, 136, 137, 138, 139, 142, 144, 156, 161, 162, 164, 165, 167, 170, 171, 172, 173, 174, 178, 179, 180, 182, 184, 185, 186, 190, 197, 205, 209, 215, 216, 218, 225, 229, 233, 234, 238, 253, 257, 260, 263, 264, 265, 266, 267, 275, 279, 286, 289, 294, 300, 302, 303, 308, 309, 311, 312, 314, 327, 332, 334, 335, 342, 343, 346, 347, 351], "creation": [52, 172, 275, 282, 309], "creativ": 96, "creativecommon": [57, 85, 96], "creator": [344, 354], "creatur": 305, "credenti": 290, "creds_fil": 290, "credsfromfil": [0, 285, 290], "cree": 298, "crf": [0, 213, 224], "crfsuit": [217, 356], "crftagger": [0, 213, 217], "crian\u00e7a": 333, "crim": [57, 72, 315], "crime": 315, "crime_scenario": [57, 72], "criminal_investig": [57, 72, 315], "criminal_process": [57, 72, 315], "criou": 333, "crisi": 307, "criteria": [57, 72, 96, 261, 301], "criterion": [217, 235], "critic": 356, "critiqu": 151, "cross": [15, 135, 136, 170, 172, 179, 260, 269, 275, 279, 356], "crosseddir": [0, 12, 15], "crossroad": 356, "crossvalidationprobdist": [0, 179, 334], "crubadan": [42, 55, 57, 295], "crubadan_to_iso": [55, 57, 70, 308], "crubadancorpusread": [55, 57, 70], "crucial": 325, "crude": 307, "crushingh": 344, "cry": 205, "cs124": 148, "cs_semrep": 338, "csli": 188, "csv": [197, 287], "ct": 217, "ctrl": [7, 8], "cuba": 333, "cullei": [57, 72], "cultur": 163, "cumul": [179, 334], "cunha": 333, "cunnigham": 148, "cup": 192, "cur": [333, 351], "cura": 109, "curr_nod": 164, "curren": 192, "currency_sym": [236, 252], "currency_sym_r": [236, 252], "currency_symbol": [57, 106], "current": [13, 25, 28, 33, 34, 46, 49, 50, 57, 69, 72, 77, 79, 105, 107, 111, 113, 117, 119, 124, 125, 127, 128, 131, 133, 135, 162, 171, 173, 174, 175, 176, 177, 178, 179, 182, 183, 190, 213, 215, 218, 221, 227, 229, 231, 232, 236, 248, 286, 289, 300, 307, 309, 311, 313, 314, 322, 351], "current_chartrul": [159, 162], "currentindex": 191, "currently_complet": [159, 173], "curri": 191, "curselect": [114, 117], "cursor": 25, "cursori": 28, "curt": 125, "curtsei": 307, "curv": 229, "custom": [55, 57, 66, 83, 87, 99, 102, 107, 120, 234, 246, 248, 258, 263, 264, 265, 266, 267, 294, 307, 310, 326, 338, 356], "custom_dist": [0, 143, 148], "custom_extractor": 310, "custom_lemma": [55, 57, 107], "customfeaturevalu": 314, "customis": 121, "customiz": 307, "cut": [46, 49, 51, 63, 198, 243, 288, 291, 305, 307], "cut_mark": [107, 291, 351], "cut_str": [0, 291], "cutoff": [0, 33, 43, 135, 142, 223, 343, 356], "cutoff_polici": 251, "cutoff_prob": 223, "cutoffcheck": [0, 30, 43], "cvar": 314, "cve": 356, "cvenam": 356, "cwp": 330, "cyber": 163, "cyberia": 336, "cycl": [57, 107, 164, 170, 291, 314, 351], "cycle_finding_demo": [0, 159, 164], "cycle_index": 170, "cycle_path": 170, "cyclic": [0, 120, 314], "cyclic_dg": 164, "cyk": [172, 281, 284], "cyr": [57, 103], "cyril": [57, 103], "czech": [57, 103, 106, 252, 307], "czech_ceski": [57, 103], "c\u00e1": 333, "c\u00e9rebro": 333, "c\u00e9u": 333, "c\u0c89\u1537": [], "c\u133d\ufc4d\u0da6\u1bcb\u0bb3\ua763\u12ce": 242, "c\ua376": [], "d": [46, 48, 49, 52, 57, 67, 72, 79, 94, 106, 107, 109, 113, 120, 121, 125, 135, 137, 142, 148, 149, 151, 179, 186, 205, 212, 214, 216, 239, 241, 242, 243, 244, 246, 247, 251, 252, 253, 261, 265, 273, 275, 281, 282, 284, 291, 294, 302, 306, 307, 309, 310, 311, 312, 313, 314, 315, 318, 323, 326, 328, 329, 332, 333, 334, 339, 343, 344, 347, 351, 356], "d0": [125, 311], "d1": [127, 180, 300, 311, 318, 338], "d10": 273, "d12": 318, "d2": [127, 300, 311, 318, 338], "d3": [311, 338], "d4": [311, 318, 338], "d5": [311, 338], "d6": [311, 338], "d7": [311, 338], "d8": 338, "d_head": 266, "d_neg": [123, 130], "d_non_head": 266, "da": [220, 257, 263, 264, 265, 266, 267, 333, 346], "dab": [275, 278], "dachshund": 170, "dado": 333, "dagger": 192, "dai": [57, 72, 221, 306, 307, 339, 343], "daili": 333, "dairen": 300, "dale": 356, "dali": 333, "dallakhelv": [57, 103], "dalmatian": 351, "dami": 333, "dan": [136, 281, 284, 325, 351, 356, 358], "danc": 311, "danger": 234, "daniel": 240, "danish": [209, 307, 342], "danishstemm": [0, 199, 209], "danni": 358, "dannysepl": 358, "daquel": 333, "dar": 333, "daran": 344, "daren": 198, "darent": 198, "darpa": 271, "darr": 192, "darul": 336, "darwin": 358, "dash": 120, "dash_preceed_digit": [236, 242], "dass": 272, "dat": [57, 107, 351], "data": [0, 2, 33, 34, 38, 39, 41, 44, 46, 47, 48, 49, 51, 52, 53, 57, 61, 63, 65, 69, 70, 72, 73, 75, 83, 91, 92, 93, 94, 95, 96, 100, 104, 110, 113, 117, 119, 120, 121, 125, 129, 130, 131, 132, 139, 144, 146, 147, 162, 163, 164, 165, 169, 176, 177, 179, 181, 182, 186, 191, 197, 198, 213, 214, 216, 218, 219, 222, 223, 224, 225, 229, 243, 251, 255, 257, 263, 264, 265, 266, 267, 268, 274, 281, 284, 286, 289, 290, 291, 295, 300, 301, 311, 313, 314, 317, 322, 328, 329, 332, 333, 335, 336, 338, 341, 343, 351, 354, 356], "data_dict": [55, 57, 60], "data_idx": 191, "data_sect": [30, 44], "databas": [10, 57, 60, 72, 84, 101, 106, 107, 182, 192, 255, 300, 315, 343], "datadir": 113, "dataserv": 113, "dataset": [57, 63, 68, 90, 91, 92, 197, 206, 307, 317, 339, 355], "date": [29, 57, 65, 97, 100, 113, 117, 192, 286, 288, 289, 301, 307, 336], "date_limit": [286, 289], "date_tim": [73, 307], "datetim": [286, 288, 289], "daughter": 235, "davi": 144, "david": [57, 85, 356], "davon": 272, "db": [57, 72, 182, 300, 345], "dbname": 182, "dcl": 307, "dct": 301, "dd": [239, 253], "dd1": 205, "de": [57, 106, 109, 119, 140, 151, 166, 176, 203, 208, 306, 307, 333, 336, 344, 346], "de2": 205, "deactiv": 197, "dead": [306, 356], "deal": [103, 135, 188, 225, 243, 286, 307, 352], "dealer": [349, 353], "dean": 262, "death": 198, "debon": 307, "debt": [57, 72, 216, 234, 315, 343], "debug": [0, 28, 37, 111, 123, 124, 129, 130, 217], "debug_decis": [236, 243], "debug_level": [28, 302], "debugobject": [0, 123, 129], "decatir": 148, "decatur": 148, "deceler": [95, 340], "decemb": [202, 356], "decent": 339, "decid": [7, 8, 15, 30, 32, 104, 111, 159, 162, 167, 173, 174, 179, 223, 236, 243, 267, 275, 282, 286, 307, 314, 332, 342], "decidedli": 198, "decim": [124, 258], "decis": [30, 32, 38, 148, 243, 281, 284, 303, 307, 314, 356], "decisiontre": [0, 30], "decisiontreeclassifi": [0, 30, 32, 303], "declar": [80, 206, 209, 235, 307, 346, 356], "declin": 307, "decod": [0, 57, 59, 111, 126, 132, 172, 204, 236, 255, 274, 291, 307, 333, 335, 345, 351, 356], "decode_json_obj": [213, 215, 221, 223, 227, 231, 232, 309], "decode_obj": [0, 132], "decode_result": [0, 123, 126], "decode_tag": [55, 57, 86], "decoded_unicod": 291, "decomposit": [46, 51, 317], "decompress": 113, "deconstruct": 259, "decor": [0, 78, 124, 127, 131, 132, 197, 288], "decorate_proof": [123, 124, 128], "decorativo": 333, "decreas": [104, 119, 171, 198, 257, 281, 284, 307, 333, 334], "decri": 213, "decrypt": 111, "dedent": 307, "dedic": 307, "dee": [67, 312], "dee1": 205, "deec2ss": 205, "deem": [48, 50], "deep": [120, 162, 275, 276, 277, 280, 282, 314, 347], "deepcopi": [0, 179, 329, 347, 349], "deepest": [57, 107, 351], "deepli": 198, "def": [30, 36, 52, 97, 104, 112, 120, 131, 132, 170, 179, 192, 303, 307, 309, 310, 312, 314, 323, 332, 333, 334, 344, 347, 351], "default": [0, 10, 14, 28, 29, 32, 33, 36, 38, 39, 43, 52, 57, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 75, 79, 82, 84, 85, 87, 90, 91, 93, 98, 99, 102, 104, 105, 107, 108, 109, 111, 112, 113, 117, 118, 119, 120, 124, 131, 132, 133, 134, 135, 136, 139, 142, 144, 145, 146, 147, 148, 156, 162, 165, 167, 177, 179, 181, 197, 203, 206, 209, 214, 216, 218, 219, 221, 222, 223, 224, 229, 231, 233, 234, 235, 238, 239, 240, 241, 243, 244, 246, 248, 251, 253, 254, 255, 258, 269, 270, 274, 275, 276, 279, 281, 282, 284, 289, 290, 291, 305, 307, 309, 310, 311, 314, 319, 322, 326, 328, 333, 334, 343, 344, 347, 351, 352], "default_column_width": [0, 113], "default_config": [236, 250], "default_download_dir": [0, 113], "default_field": 255, "default_reasoning_demo": [0, 123, 127], "default_rule_tupl": [199, 205], "default_smooth": 251, "default_tagg": 223, "default_url": [0, 113], "default_w": [0, 53], "defaultdict": [179, 192, 274, 291, 350], "defaultruleset": [14, 298, 299], "defaulttagg": [0, 213, 215, 223, 333], "defconst": 25, "defend": 307, "defer": [110, 134, 309, 343], "defici": 267, "defin": [15, 25, 28, 30, 31, 33, 46, 52, 55, 57, 59, 65, 67, 68, 69, 72, 78, 81, 89, 100, 104, 105, 107, 113, 117, 119, 120, 121, 127, 131, 135, 136, 138, 144, 146, 147, 150, 159, 160, 162, 170, 171, 172, 176, 179, 194, 199, 213, 214, 218, 223, 224, 231, 234, 237, 238, 244, 266, 267, 268, 274, 275, 281, 282, 284, 289, 291, 300, 303, 307, 309, 311, 313, 314, 315, 323, 330, 332, 333, 335, 343, 346, 347, 351], "definit": [57, 72, 107, 119, 171, 234, 235, 267, 307, 315, 351, 353], "definitionmarkup": [57, 72], "deg": 192, "degre": [57, 72, 100, 104, 225, 291, 315], "dehdari": 252, "dei3i": 205, "deixa": 333, "deixei": 333, "dekang": [57, 77], "del": [307, 309, 314, 336, 347], "del_cost": 151, "del_testcorpu": 307, "dela": 333, "delai": [243, 288], "deleg": [117, 186, 286, 338], "delet": [7, 8, 57, 59, 86, 114, 117, 120, 148, 151, 176, 209, 229, 289, 307, 314, 319, 347], "delhi": 300, "deliber": 300, "delimit": [28, 29, 57, 59, 86, 97, 102, 121, 225, 244, 247, 275, 282, 289, 291, 302], "delin": [57, 62, 307], "della": [263, 264, 265, 266, 267, 268], "delta": [0, 33, 117, 143, 145, 192, 217], "dem": [301, 321], "demand": [52, 57, 72, 135], "demetriu": 307, "demo": [0, 7, 8, 12, 14, 18, 19, 20, 21, 22, 24, 25, 28, 29, 30, 32, 33, 35, 36, 42, 46, 48, 49, 50, 55, 57, 64, 65, 72, 76, 77, 101, 114, 115, 117, 118, 119, 123, 125, 126, 127, 128, 129, 130, 143, 145, 147, 148, 149, 150, 153, 157, 159, 162, 164, 165, 167, 168, 170, 171, 172, 173, 174, 176, 178, 180, 183, 184, 185, 186, 187, 190, 191, 194, 199, 206, 209, 213, 215, 218, 225, 227, 236, 243, 251, 255, 288, 314, 332, 356], "demo2": [0, 114, 115, 213, 225], "demo3": [0, 114, 115, 213, 225], "demo_": 229, "demo_bw": [0, 213, 218], "demo_error": [0, 180, 191], "demo_error_analysi": [0, 227, 229], "demo_ev": [0, 25, 28], "demo_generated_templ": [0, 227, 229], "demo_grammar": [0, 159, 162, 167, 316, 332], "demo_high_accuracy_rul": [0, 227, 229], "demo_learning_curv": [0, 227, 229], "demo_legacy_grammar": [0, 180, 194], "demo_liu_hu_lexicon": [0, 195, 197], "demo_mod": 251, "demo_model0": [0, 180, 194], "demo_movie_review": [0, 195, 197], "demo_multifeature_templ": [0, 227, 229], "demo_multiposition_featur": [0, 227, 229], "demo_po": [0, 213, 218], "demo_pos_bw": [0, 213, 218], "demo_read_depgraph": [0, 180, 189], "demo_repr_rule_format": [0, 227, 229], "demo_sent_subject": [0, 195, 197], "demo_serialize_tagg": [0, 227, 229], "demo_str_rule_format": [0, 227, 229], "demo_subject": [0, 195, 197], "demo_template_statist": [0, 227, 229], "demo_tweet": [0, 195, 197], "demo_vader_inst": [0, 195, 197], "demo_vader_tweet": [0, 195, 197], "demo_verbose_rule_format": [0, 227, 229], "democrat": 336, "demoexcept": [0, 180, 191], "demonstr": [2, 14, 28, 48, 49, 119, 127, 135, 142, 145, 149, 162, 164, 165, 171, 172, 173, 174, 178, 196, 206, 209, 218, 229, 281, 284, 307, 344, 356], "demoscor": [0, 159, 170], "demv": 133, "den": [313, 321], "dendrogram": [0, 46, 49, 51], "deni": [307, 309, 322, 342, 351], "denken": 344, "dennyc": 140, "denomin": [256, 258], "denot": [13, 57, 107, 179, 311, 351], "dens": [33, 95, 340], "dentro": 333, "denver": [97, 307], "dep": [163, 164, 298, 310], "dep_graph": [175, 176], "dep_pars": [163, 175, 180, 187], "depart": [68, 83, 91, 201], "depend": [28, 30, 33, 52, 53, 55, 57, 72, 79, 107, 121, 125, 135, 142, 148, 163, 164, 166, 169, 170, 172, 175, 176, 177, 187, 190, 196, 197, 218, 232, 233, 243, 246, 251, 258, 275, 279, 289, 291, 295, 299, 307, 311, 315, 351, 356], "dependency_grammar": [170, 172], "dependency_scor": 170, "dependency_treebank": 310, "dependencycorpusread": [55, 57, 71], "dependencycorpusview": [55, 57, 71], "dependencyevalu": [0, 159, 166, 176], "dependencygrammar": [0, 121, 170, 172, 310], "dependencygraph": [0, 57, 107, 159, 166, 169, 170, 172, 176, 187, 291, 307, 310, 318, 358], "dependencygrapherror": [0, 159, 164], "dependencyproduct": [0, 121], "dependencyscoreri": [0, 159, 170], "dependencyspan": [0, 159, 172], "dependent_index": [57, 65], "depgraph": [169, 176, 187, 189, 318], "depgraph_to_glu": [180, 187], "depict": 172, "depoi": 333, "deposit": [292, 353], "depository_financial_institut": 353, "deppars": [125, 163, 187, 311, 319], "deprec": [0, 26, 40, 111, 131, 144, 206, 214, 233, 275, 282, 283, 284, 348, 356], "deprecationwarn": 348, "depressa": 333, "depth": [25, 28, 32, 46, 49, 51, 57, 66, 107, 168, 291, 316, 351], "depth_cutoff": 32, "der": [181, 240, 248, 321], "deregist": 119, "deriv": [14, 84, 88, 119, 159, 160, 162, 165, 172, 179, 182, 199, 218, 225, 234, 243, 263, 264, 265, 268, 298, 299, 300, 305, 307, 315, 318, 322], "derivationally_related_form": [57, 107, 351], "derredor": 333, "desahc": [275, 282], "desapareceram": 333, "desc": [57, 61, 84, 97], "descape_ent": [0, 180, 192], "descend": [117, 119, 120, 171, 235, 275, 276, 282, 289, 333, 351], "descent": [1, 7, 173, 235], "descer": 333, "descr": [25, 28, 307, 309, 335], "describ": [28, 30, 33, 46, 57, 72, 79, 89, 106, 111, 113, 144, 145, 151, 176, 179, 188, 201, 202, 204, 218, 243, 245, 259, 262, 269, 273, 294, 307, 309, 315, 333, 335, 336, 347, 352], "describe_template_set": [0, 213, 215], "descript": [14, 28, 33, 57, 61, 72, 73, 81, 89, 105, 111, 113, 117, 162, 167, 178, 181, 182, 191, 209, 215, 218, 244, 261, 300, 307, 315, 335, 347], "descriptor": 131, "desctruct": 329, "desd": 333, "desempleo": 307, "desensit": 329, "deserialis": [57, 102], "desert": [254, 344], "deserv": 344, "desferirem": 333, "design": [28, 57, 75, 80, 91, 96, 238, 243, 262, 344], "desir": [57, 72, 113, 118, 145, 218, 293, 307, 315], "desminti\u00f3": 298, "despit": [198, 243, 339], "destin": 170, "destroi": [0, 113, 114, 115, 118, 119, 180, 185, 243, 307], "destroy_widget": [114, 119], "destruct": [0, 236], "destruir": 333, "det": [28, 79, 147, 163, 174, 175, 213, 217, 220, 298, 300, 301, 305, 307, 309, 311, 313, 316, 320, 326, 328, 332, 333, 338, 341, 347, 348], "detail": [34, 42, 57, 61, 70, 72, 75, 80, 95, 105, 107, 113, 117, 179, 201, 202, 209, 217, 218, 221, 224, 229, 259, 289, 301, 313, 315, 349, 355, 356], "detect": [43, 52, 57, 59, 76, 223, 243, 251, 294, 351], "detect_block": [57, 62], "detector": [30, 223, 243, 356], "determin": [2, 13, 28, 33, 39, 44, 52, 53, 111, 117, 118, 156, 170, 180, 198, 214, 215, 220, 223, 224, 240, 243, 251, 263, 264, 265, 267, 268, 274, 275, 276, 279, 280, 282, 289, 302, 307, 309, 319, 322, 328, 333], "determinist": [216, 218, 229], "detoken": [236, 239, 253, 254, 344, 356], "detroit": 332, "deu": 333, "dev": [208, 287, 288, 289, 293, 307, 355], "devaneio": 333, "develop": [73, 88, 111, 125, 181, 182, 203, 209, 216, 271, 293, 300, 309, 313, 343, 344, 356], "devem": 208, "deviat": 206, "devis": 206, "devnul": [131, 163], "devour": 307, "devset": 88, "devtest": 73, "dexpr": 312, "dfl": 307, "dg": [164, 172, 310], "dg_str": 310, "dh": [67, 307], "dhgarrett": 358, "di": [307, 333, 335, 342], "dia": 333, "diacrit": [201, 202, 204], "diagnost": [33, 229], "diagon": 147, "diagram": [118, 275, 282], "dialect": [57, 100], "dialog": [115, 119, 339], "dialogu": [109, 307], "diam": 192, "diamant": 333, "dic": [133, 291], "dice": [143, 146, 328], "dicion": 333, "dicion\u00e1rio": 333, "dick": 306, "dickson": 148, "dict": [23, 30, 33, 34, 36, 38, 41, 43, 44, 52, 55, 57, 65, 67, 72, 84, 102, 107, 109, 112, 120, 125, 149, 152, 161, 167, 179, 181, 182, 186, 187, 189, 190, 191, 194, 196, 214, 215, 223, 241, 243, 255, 260, 263, 264, 265, 266, 267, 274, 291, 303, 307, 315, 326, 347], "dict2tab": [0, 212], "dictionari": [30, 32, 33, 34, 35, 39, 41, 52, 57, 59, 60, 61, 64, 65, 67, 69, 70, 71, 72, 73, 75, 82, 84, 85, 86, 93, 98, 100, 102, 105, 107, 108, 109, 111, 112, 113, 119, 120, 124, 127, 129, 133, 135, 137, 142, 149, 161, 162, 167, 170, 179, 182, 186, 190, 192, 196, 197, 198, 201, 202, 204, 209, 214, 215, 217, 220, 223, 234, 235, 243, 254, 260, 275, 279, 291, 292, 300, 307, 308, 309, 313, 328, 336, 345, 351, 356], "dictionaryconditionalprobdist": [0, 179, 334], "dictionaryprobdist": [0, 179], "did": [23, 36, 57, 97, 107, 135, 162, 167, 294, 307, 344, 354], "didn": [135, 197, 198, 314, 344, 347, 354], "didnt": 198, "die": [274, 313, 321, 342], "diem": 307, "diff": [0, 143, 145], "differ": [2, 24, 25, 28, 33, 34, 37, 50, 57, 69, 72, 91, 107, 113, 120, 133, 135, 142, 144, 145, 148, 152, 157, 171, 176, 179, 181, 184, 190, 191, 203, 204, 218, 223, 233, 244, 251, 258, 262, 267, 268, 271, 273, 274, 275, 276, 279, 280, 281, 282, 284, 289, 291, 294, 298, 302, 305, 307, 310, 311, 313, 314, 315, 316, 326, 332, 338, 351, 353], "differenti": 225, "difficult": [46, 199, 218, 243, 262], "difficulti": [274, 356], "digit": [57, 107, 151, 191, 221, 253], "digo": 333, "digraph": [55, 57, 107, 164, 209, 291], "dimazest": 358, "dimens": [46, 48, 49, 50, 51, 170, 251, 317], "dimension": [46, 51, 170], "dimensionsion": [48, 49, 50, 51], "diminu\u00eda": 333, "dimitradi": 358, "dine": [306, 307], "ding": 91, "dinheiro": 333, "dinner": [306, 317], "dir": [12, 13, 158, 164, 176, 243, 309, 335], "direct": [0, 12, 13, 14, 15, 57, 72, 117, 119, 158, 164, 170, 179, 218, 258, 259, 262, 263, 264, 265, 266, 267, 269, 271, 273, 281, 284, 289, 291, 307, 335, 339], "directedbinarycombin": [0, 12, 15], "direction": 257, "directli": [33, 40, 43, 53, 57, 58, 91, 99, 102, 111, 113, 120, 136, 138, 164, 179, 209, 215, 234, 236, 243, 247, 265, 275, 281, 282, 284, 302, 307, 312, 313, 314, 332, 347, 356], "director": [166, 307, 310, 336], "directori": [0, 39, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 75, 77, 78, 79, 81, 82, 84, 85, 87, 89, 90, 91, 93, 97, 98, 99, 100, 102, 103, 105, 107, 108, 109, 111, 128, 131, 161, 169, 181, 182, 222, 289, 290, 294, 300, 301, 307, 309, 313, 322, 335], "dirnam": 144, "disabl": [57, 72, 107, 111, 148, 243, 275, 279, 291], "disable_custom_lemma": [55, 57, 107], "disadvantag": 243, "disagr": [143, 144], "disallow": [13, 57, 107], "disamb_onli": [57, 75], "disambigu": [30, 33, 57, 75, 94, 107, 292, 307], "disappear": [163, 307, 313], "disassembl": 307, "discard": [33, 46, 107, 172, 204, 216, 229, 244, 247, 291, 333, 347, 351], "discard_empti": [57, 58, 63, 66, 68, 71, 87, 90, 91, 99, 244], "discard_lin": [0, 111], "disco": [279, 283], "discontinu": [261, 273, 275, 279, 283, 335, 348], "discoteca": 333, "discount": [0, 135, 138, 140, 179], "discourag": 314, "discours": [0, 55, 57, 98, 123, 159, 160, 180, 181, 184, 186, 295, 322], "discourse_demo": [0, 123, 125], "discourse_id": 181, "discoursetest": [0, 123, 125, 311], "discov": [46, 307], "discoveri": [83, 91, 234], "discuss": [33, 121, 135, 137, 182, 218, 243, 300, 307, 313, 314, 333, 351, 354, 356], "disj": 119, "disjoint": 233, "disjunct": [191, 193, 326, 336], "disk": [52, 161], "dislik": 23, "dismast": 234, "dismiss": 163, "disp": 333, "dispers": [0, 114], "dispersion_plot": [0, 114, 116, 234], "displac": 266, "displai": [0, 2, 10, 28, 32, 52, 57, 72, 110, 111, 113, 116, 117, 118, 119, 120, 125, 153, 156, 162, 165, 167, 171, 178, 179, 234, 275, 279, 288, 289, 291, 306, 307, 309, 314, 322, 333, 343, 351, 354, 356], "display_al": [153, 156], "display_width": 291, "diss": [240, 333], "dissert": [145, 187, 190, 240, 252], "dist": [97, 307], "distanc": [0, 42, 50, 51, 57, 107, 119, 143, 144, 151, 258, 266, 275, 279, 291, 356], "distant": 273, "distinct": [33, 57, 107, 156, 218, 307, 313, 346], "distinguish": [37, 121, 159, 266, 328], "distort": [265, 266, 267], "distortion_factor": [256, 274], "distortion_scor": [256, 274], "distortion_t": 265, "distribut": [31, 33, 35, 36, 46, 47, 55, 57, 63, 68, 72, 74, 77, 83, 84, 88, 90, 91, 94, 96, 109, 112, 113, 135, 137, 138, 150, 179, 206, 215, 218, 225, 234, 260, 263, 264, 265, 266, 267, 268, 307, 309, 328, 333, 334, 335, 339, 347, 355, 356], "distsim": 224, "dita": 333, "ditto": 205, "div": 79, "dive": 307, "divers": 307, "divid": [2, 29, 35, 57, 62, 63, 78, 81, 87, 89, 99, 103, 107, 109, 177, 179, 192, 226, 234, 236, 237, 241, 243, 246, 247, 258, 289, 307, 314, 321, 334, 335], "divis": [258, 269, 351], "divisa": 307, "dixon": 148, "dizendo": 333, "dizer": 333, "dizia": 333, "dj": 266, "dl": [271, 292], "dlr": 307, "dm": 240, "dmitrij": 358, "dnx": [57, 84], "dnx2": [57, 84], "do": [10, 23, 24, 29, 37, 38, 52, 57, 59, 72, 77, 91, 107, 111, 112, 117, 119, 120, 121, 124, 131, 135, 137, 138, 147, 150, 172, 173, 174, 176, 179, 182, 191, 197, 202, 206, 209, 215, 223, 231, 233, 234, 235, 243, 247, 253, 274, 275, 279, 281, 282, 284, 287, 294, 300, 305, 306, 307, 311, 313, 314, 315, 318, 322, 330, 332, 333, 344, 347, 348, 349, 351, 353, 355], "do_continu": [285, 286, 289], "do_kw": [143, 144], "do_kw_pairwis": [143, 144], "do_stop": [285, 286], "dobj": 310, "doc": [12, 28, 30, 55, 57, 61, 72, 73, 102, 104, 107, 112, 135, 192, 196, 286, 287, 289, 307, 315, 321, 336, 339, 355], "docid": [57, 72], "docnamepattern": [57, 72], "docno": [73, 307], "docs_metadata": [55, 57, 72], "docstart": [57, 69], "docstr": [57, 92, 112, 117, 131, 229], "doctest": [131, 163, 216, 217, 242, 258, 322, 325, 332], "doctor": [100, 163, 252], "doctyp": [73, 307], "document": [28, 30, 34, 38, 55, 57, 58, 61, 62, 64, 66, 68, 69, 71, 72, 73, 74, 75, 78, 79, 83, 86, 87, 91, 92, 94, 96, 99, 102, 103, 104, 107, 108, 109, 110, 112, 119, 122, 132, 134, 173, 177, 179, 192, 196, 197, 209, 218, 224, 229, 234, 251, 275, 282, 285, 288, 289, 291, 292, 307, 336, 339, 349, 354, 356], "document_featur": 30, "doddington": 271, "dodg": [57, 72], "dodger": 339, "doe": [24, 25, 28, 29, 32, 33, 34, 46, 48, 52, 53, 57, 72, 79, 80, 81, 89, 107, 108, 111, 117, 119, 120, 131, 135, 136, 138, 148, 159, 163, 174, 204, 215, 216, 218, 225, 226, 231, 234, 240, 243, 248, 254, 262, 268, 274, 275, 277, 294, 304, 307, 309, 312, 313, 314, 322, 333, 343, 345, 347, 351], "doesn": [57, 72, 111, 131, 175, 182, 198, 218, 248, 253, 258, 263, 311, 322, 323, 339, 343, 344, 345], "doesnt": 198, "doesnt_match": 317, "dog": [25, 57, 62, 107, 121, 162, 163, 165, 167, 174, 175, 179, 180, 191, 211, 217, 221, 235, 275, 282, 291, 300, 302, 307, 309, 310, 311, 312, 313, 316, 319, 320, 322, 326, 330, 332, 338, 341, 347, 351], "dog_lemma": 351, "doi": 333, "dolist": 332, "dom": [180, 186, 300, 333, 338], "dom0": 338, "dom1": 338, "dom2": 338, "dom3": 338, "domain": [55, 57, 75, 105, 127, 159, 180, 182, 186, 238, 243, 300, 311, 338, 351, 356, 358], "domest": [347, 351], "domestic_anim": [57, 107, 291, 351], "domestic_dog": 351, "domin": [36, 235, 275, 282], "don": [121, 127, 135, 144, 186, 198, 205, 253, 254, 302, 314, 323, 330, 334, 343, 344, 347], "donat": 356, "done": [28, 46, 48, 57, 72, 119, 134, 135, 148, 167, 170, 181, 190, 218, 238, 246, 272, 303, 307, 318, 343], "dont": 198, "dooh4": 205, "door": 336, "dop": [279, 283], "dot": [12, 14, 33, 57, 72, 107, 159, 162, 164, 165, 167, 171, 180, 191, 221, 291, 315, 344], "dot2img": [0, 57, 107, 159, 164, 291], "dot_digraph": [159, 162], "dot_str": [57, 107, 164, 291], "dotal": [57, 58, 63, 66, 68, 71, 87, 90, 91, 99, 244], "doto": 333, "dotprod": 33, "doubl": [119, 197, 209, 311, 314, 344], "double_dash": [236, 239, 253], "double_neg_flip": 197, "dough": 298, "dove": 330, "down": [2, 84, 113, 117, 119, 135, 162, 165, 167, 173, 188, 307, 313, 332], "downcas": 238, "download": [0, 55, 65, 111, 131, 133, 140, 224, 291, 294, 307, 322, 355, 356], "download_dir": [0, 113], "download_gui": [0, 113], "download_shel": [0, 113], "downloadergui": [0, 113], "downloadermessag": [0, 113], "downloadershel": [0, 113], "downward": [118, 119], "dozen": [293, 356], "dp": [309, 310, 313, 322, 347], "dp1": 347, "dp2": 347, "dpd": 334, "dr": [0, 100, 180, 181, 184, 185, 307, 312, 319, 322, 344], "dr1": [100, 307], "drag": [118, 119], "draggabl": [118, 119], "drain": 156, "draw": [0, 57, 107, 150, 180, 184, 185, 234, 275, 279, 282, 283, 333, 354], "draw_pars": 171, "draw_tre": [0, 114, 118], "drawback": 262, "drawn": [36, 92, 96, 119, 184, 315], "dream": [163, 307], "dreamteam": 344, "dress": 307, "dressing_wel": 307, "dridan": 245, "drive": [57, 107, 182, 300, 307, 351], "driven": [266, 354], "driver": 188, "drizzl": 307, "drop": [10, 33, 274, 307, 309, 356], "drs1": [181, 312], "drs2": [181, 312], "drs3": 312, "drs_conc": [180, 184], "drsdrawer": [0, 180, 184], "drss": [181, 312, 319, 322], "drswidget": [0, 180, 185], "drt": [0, 180, 181, 295, 311, 322], "drt_discourse_demo": [0, 123, 125], "drt_glue_demo": [0, 180], "drtabstractvariableexpress": [0, 180, 184], "drtapplicationexpress": [0, 180, 184], "drtbinaryexpress": [0, 180, 184], "drtbooleanexpress": [0, 180, 184], "drtconcaten": [0, 180, 184], "drtconstantexpress": [0, 180, 184], "drtequalityexpress": [0, 180, 184], "drteventvariableexpress": [0, 180, 184], "drtexpress": [0, 180, 181, 184, 312], "drtfunctionvariableexpress": [0, 180, 184], "drtglue": [0, 180, 187, 319], "drtgluedemo": [0, 180, 185], "drtgluedict": [0, 180, 187], "drtglueformula": [0, 180, 187], "drtgluereadingcommand": [0, 123, 125, 311], "drtindividualvariableexpress": [0, 180, 184], "drtlambdaexpress": [0, 180, 184], "drtnegatedexpress": [0, 180, 184], "drtorexpress": [0, 180, 184], "drtparser": [0, 180, 181, 184, 311, 312, 322], "drtproposit": [0, 180, 184], "drtstring": 312, "drttoken": [0, 180, 184], "drtvariableexpress": [0, 180, 184, 312], "dstoffset": [285, 286], "dt": [25, 28, 39, 57, 62, 163, 166, 175, 177, 213, 214, 216, 219, 221, 222, 224, 232, 235, 286, 302, 307, 310, 311, 332, 335, 343, 347, 349], "dti": [223, 344], "dtv": 298, "dtype": 38, "du": [263, 321], "dua": 333, "duan": 148, "dub": 307, "dublin": 333, "duck": 253, "ductor": 348, "due": [91, 197, 199, 225, 245, 258, 307, 351], "duh": 273, "duke": 307, "dull": [95, 340], "dum": 208, "duma": 208, "dummi": [164, 176, 268], "dummysmilei": [238, 344], "dump": [57, 102, 182, 236, 243, 304, 332, 334, 344, 347], "dun": 305, "dunningham": 148, "dunt": 329, "duplic": [107, 125, 135, 137, 196, 233, 258, 291, 307, 356], "durat": [29, 192, 217], "dure": [104, 120, 121, 129, 135, 170, 213, 215, 217, 223, 243, 253, 264, 265, 266, 267, 268, 269, 307], "durwood": 344, "dusseldorf": 39, "dutch": [57, 62, 106, 192, 209, 245, 307, 336, 342, 356], "dutchstemm": [0, 199, 209], "duti": 307, "dv": 267, "dvar": 314, "dwarf": 261, "dwayn": 148, "dx": 119, "dy": 119, "dynam": [159, 162, 165, 178, 218, 281, 284], "d\u00e1": 333, "d\u18a1\u13fb\u159b\u1629\u14e9\u11e3\u3171\u0904": 242, "e": [2, 7, 14, 16, 23, 24, 25, 28, 29, 31, 33, 34, 35, 36, 37, 38, 43, 44, 46, 48, 52, 57, 58, 59, 60, 62, 64, 65, 66, 67, 69, 71, 72, 74, 75, 80, 83, 86, 87, 88, 91, 92, 94, 99, 104, 105, 106, 107, 108, 109, 110, 111, 113, 117, 118, 119, 120, 121, 127, 129, 130, 131, 133, 135, 137, 144, 145, 146, 147, 148, 151, 156, 162, 164, 165, 167, 169, 171, 177, 178, 179, 183, 184, 185, 186, 188, 191, 196, 197, 198, 201, 202, 203, 207, 208, 213, 214, 216, 218, 222, 223, 224, 226, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 244, 246, 253, 258, 259, 262, 263, 264, 265, 266, 267, 268, 272, 273, 275, 276, 277, 281, 282, 284, 286, 287, 288, 289, 291, 294, 298, 301, 303, 305, 307, 312, 313, 314, 315, 318, 322, 326, 328, 329, 333, 334, 336, 338, 343, 344, 347, 349, 351, 356], "e0": 337, "e01": [312, 326], "e02": [312, 326], "e083": 326, "e092": 326, "e1": [205, 326, 337], "e2": [148, 326, 337], "e2f": 261, "e_end": 272, "e_start": 272, "ea": 326, "each": [2, 14, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 104, 105, 107, 108, 109, 110, 111, 113, 117, 118, 119, 120, 121, 125, 131, 135, 137, 142, 144, 146, 147, 152, 156, 157, 158, 159, 160, 162, 163, 165, 167, 169, 170, 171, 172, 173, 175, 176, 178, 179, 181, 182, 183, 191, 194, 196, 197, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 231, 232, 233, 234, 237, 241, 243, 248, 251, 254, 255, 257, 258, 260, 262, 263, 264, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 279, 282, 289, 300, 301, 305, 307, 311, 313, 314, 315, 317, 322, 329, 332, 333, 335, 336, 339, 343, 344, 349, 351, 353], "eacut": 192, "eager": [176, 297], "eamt": 346, "ear": 205, "earlei": [162, 165, 332, 356], "earleychart": [0, 159, 332], "earleychartpars": [0, 159, 165, 332], "earli": [182, 300, 306, 356], "earlier": [28, 46, 49, 135, 137, 173, 174, 182, 216, 300, 311, 313, 322, 333, 336, 343], "earliest": [7, 8, 174], "earth": [307, 351], "easi": [57, 90, 135, 188, 215, 233, 238, 307, 319, 346, 354, 356], "easier": [29, 119, 182, 234, 268, 287, 300, 307, 335], "easili": [120, 179, 218, 229, 287, 307, 312, 314, 317, 346], "east": [57, 79, 90, 109, 305, 307, 356], "east_germani": 300, "easy_instal": 355, "eat": [16, 57, 67, 90, 131, 217, 263, 298, 299, 307, 313, 323, 351], "eater": 307, "eateri": [131, 323], "ebook": 356, "ecirc": 192, "econom": [57, 90, 176, 307], "economist": 336, "ed": [57, 67, 107, 125, 216, 223, 240, 248, 291, 328, 343], "edg": [2, 14, 107, 147, 151, 159, 162, 164, 165, 167, 170, 171, 177, 218, 275, 279, 291, 305, 313, 332], "edgar": 109, "edge1": 171, "edge_closur": [0, 291], "edgei": [0, 14, 159, 162, 165, 167, 171], "edges2dot": [0, 291], "edinburgh": [261, 358], "edit": [113, 115, 144, 148, 179, 309, 313, 328, 356], "edit_dist": [0, 143, 148, 328, 356], "edit_distance_align": [0, 143, 148, 328, 356], "editor": [57, 61, 336], "editori": [307, 334, 356], "edlop": 358, "edu": [42, 53, 57, 62, 63, 65, 67, 68, 70, 72, 83, 88, 90, 91, 94, 96, 100, 105, 106, 107, 112, 140, 148, 151, 175, 182, 215, 224, 253, 269, 275, 282, 300, 307, 322], "educ": [63, 100, 354], "edward": [0, 354, 356, 358], "eet": 326, "ef": [198, 344], "efeito": 333, "effbot": 192, "effect": [28, 33, 176, 201, 202, 243, 275, 279, 288, 336, 343, 353], "efficacit": 151, "effici": [0, 46, 49, 104, 111, 121, 131, 135, 159, 162, 165, 179, 213, 215, 218, 236, 247, 291, 307, 311, 351, 356], "effort": [293, 356], "efg": 344, "eg": [57, 69, 105, 107, 199, 225, 344], "egeu": 307, "egg": [305, 351], "egrav": 192, "egypt": [109, 254, 344], "eh": [67, 307], "eh1": 307, "eht": [275, 282], "ei": 67, "eid": [163, 224], "eight": [233, 354], "eighth": 198, "eighti": 301, "ein": [263, 264, 265, 266, 267, 346], "einen": 344, "einzukaufen": 344, "eisner": 172, "either": [14, 31, 38, 52, 57, 58, 59, 61, 64, 65, 66, 69, 70, 71, 72, 74, 75, 79, 81, 82, 83, 84, 85, 86, 89, 93, 94, 98, 99, 104, 105, 107, 108, 109, 113, 117, 119, 120, 121, 124, 131, 150, 162, 165, 167, 171, 188, 206, 214, 217, 218, 233, 235, 243, 244, 246, 259, 275, 279, 281, 282, 284, 305, 307, 309, 314, 315, 322, 323, 339, 349], "ej": 336, "ekaterinburg": 358, "el": [57, 106, 133, 254, 298, 307, 330, 333, 334, 344], "ela": 333, "elect": [223, 307, 344], "electr": 348, "electron": [163, 242, 336], "eleg": 155, "elem": [255, 291], "element": [7, 8, 14, 31, 33, 43, 44, 52, 57, 61, 62, 72, 79, 80, 81, 84, 89, 92, 93, 98, 100, 108, 111, 117, 119, 120, 127, 131, 152, 157, 160, 162, 173, 174, 178, 182, 186, 214, 224, 226, 237, 246, 248, 255, 257, 259, 268, 272, 275, 276, 279, 287, 291, 300, 307, 313, 314, 315, 335], "elementari": 333, "elementtre": [55, 57, 61, 79, 80, 93, 105, 108, 131, 255, 291, 307, 335, 345], "elementtree_ind": [0, 291], "elementwrapp": [0, 131], "eleph": [169, 310, 330], "eleprobdist": [0, 35, 36, 179, 334], "elevator_car": 351, "elif": [314, 332], "elimeq": 181, "elimin": [121, 162, 311, 318], "eliminate_equ": [180, 184, 312], "eliminate_start": [0, 121], "elisabeth": [240, 248], "elisp": 25, "eliza": [0, 18, 24], "eliza_chat": [0, 18, 19], "elkouri": 204, "ell": [133, 351], "ellips": [57, 72], "ellipsi": [236, 243, 258], "elogio": 333, "els": [52, 120, 121, 124, 131, 132, 148, 186, 223, 267, 314, 323, 333, 334, 338, 347, 350], "elt": [61, 79, 80, 93, 108], "elt_handl": [61, 79, 80, 93, 108], "elucidarium": 109, "elvish": 308, "elziu": 336, "em": [0, 46, 208, 218, 263, 264, 265, 266, 267, 268, 307, 333], "em_ibm1": 346, "emac": 0, "email": [113, 262, 344], "emb": 312, "embed": [57, 62], "emcluster": [0, 46, 48], "emerg": [351, 353], "emit": 218, "emma": 307, "emnlp": 273, "emoji": 356, "emot": 307, "emoticon": [197, 238, 339, 344], "emphasi": [307, 339], "empir": 33, "emploi": 349, "employ": [57, 72, 315], "employe": [57, 72, 315], "employment_start": [57, 72, 315], "empr": 333, "empti": [8, 24, 50, 52, 81, 89, 104, 111, 117, 120, 121, 135, 144, 150, 162, 171, 173, 174, 177, 178, 179, 192, 233, 235, 244, 254, 259, 267, 275, 276, 277, 282, 302, 307, 314, 320, 321, 322, 335, 336, 339, 343, 345, 347, 356], "empty_first": 187, "emptypredictrul": [0, 159, 162, 165, 167], "emptyset": 119, "emsp": 192, "emul": [273, 352], "en": [57, 60, 75, 79, 106, 148, 151, 203, 220, 248, 254, 289, 291, 298, 305, 307, 308, 346], "en_em_dash": [236, 252], "en_wsj": 219, "enabl": [57, 72, 75, 107, 129, 134, 356], "encapsul": [119, 182, 257, 300], "encarei": 333, "enchain": 351, "enclos": [119, 313, 353], "encod": [0, 25, 28, 29, 30, 33, 34, 39, 41, 52, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 113, 120, 121, 131, 162, 163, 175, 177, 179, 186, 187, 191, 192, 194, 197, 201, 213, 214, 215, 219, 222, 223, 224, 236, 245, 249, 250, 252, 255, 275, 276, 280, 282, 287, 288, 291, 303, 307, 313, 314, 335, 347, 356], "encode_json_obj": [213, 215, 221, 223, 227, 231, 232, 309], "encoding_demo": [0, 30, 41], "encomenda": 333, "encontramo": 333, "encount": [33, 35, 57, 72, 111, 113, 223, 314, 343], "encourag": [273, 307], "encrypt": 111, "end": [12, 14, 28, 52, 57, 69, 72, 99, 100, 104, 111, 117, 120, 131, 132, 135, 159, 162, 165, 167, 172, 174, 177, 178, 191, 201, 202, 203, 204, 205, 213, 215, 221, 229, 231, 233, 239, 240, 241, 243, 244, 247, 251, 253, 254, 272, 274, 275, 276, 282, 291, 300, 302, 303, 307, 312, 314, 322, 326, 338, 339, 344, 345, 347, 351, 356], "end1": 233, "end2": [221, 233], "end_i": [237, 244, 247], "end_index": 172, "end_of_list": 322, "end_posit": 131, "end_r": 104, "end_siz": [126, 322], "end_toknum": 104, "end_w5": [199, 204], "end_w6": [199, 204], "end_word": 80, "ending_quot": [236, 239, 253], "endors": 206, "endpoint": [231, 289], "endswith": 333, "enfermo": 333, "enforc": [231, 307], "enfraquecida": 333, "eng": [57, 65, 107, 213, 221, 292, 301, 308, 351], "eng_wikt": [57, 107], "engend": 307, "engin": [25, 202, 354], "england": [100, 307], "english": [14, 57, 73, 105, 106, 107, 109, 121, 182, 199, 209, 213, 224, 236, 240, 243, 245, 248, 252, 266, 272, 300, 305, 307, 308, 309, 315, 333, 342, 351], "english_fd": 308, "englishpcfg": 175, "englishstemm": [0, 199, 209], "engmalt": 169, "engvers": 96, "enhanc": [148, 225, 293, 356, 358], "enjoi": 347, "enlighten": [14, 24], "enorm": [198, 333], "enough": [135, 156, 159, 171, 198, 309, 313, 329, 339, 344], "enquanto": 333, "ense2": [57, 80], "ensp": 192, "ensur": [33, 46, 48, 57, 72, 117, 119, 162, 163, 179, 191, 219, 248, 258, 259, 262, 269, 271, 273, 281, 284, 294, 307, 328, 343, 347], "ensure_load": [55, 57, 59, 110], "ent": 333, "entail": [37, 92, 107, 307, 311, 322, 356], "enter": [118, 119, 185, 218, 286, 289, 306, 307, 333], "enteroscop": 329, "entertain": [339, 356], "entir": [14, 28, 52, 57, 59, 81, 89, 100, 104, 117, 119, 162, 167, 171, 172, 174, 178, 198, 215, 231, 257, 267, 268, 294, 307, 309, 322, 335, 339, 356], "entiti": [25, 27, 29, 37, 39, 57, 68, 69, 73, 75, 93, 107, 180, 182, 186, 187, 191, 192, 224, 254, 287, 291, 300, 307, 311, 315, 330, 338, 347, 351, 354, 356], "entity_1": 68, "entity_2": [57, 68, 307], "entity_field": 287, "entity_specific_co": 307, "entity_specific_modes_b": 307, "entity_typ": [287, 326], "entitytyp": [0, 180, 191], "entr": 333, "entreaberta": 333, "entri": [16, 55, 57, 67, 72, 85, 93, 101, 104, 106, 107, 113, 120, 135, 142, 147, 170, 172, 178, 182, 223, 243, 263, 264, 265, 266, 267, 307, 309], "entropi": [0, 33, 88, 135, 136, 179, 213, 218, 303, 325, 356], "entropy_cutoff": [32, 303], "entrydialog": [0, 114, 119], "ent\u00e3o": 333, "enum": 301, "enumer": [52, 170, 254, 269, 273, 309, 347], "env_var": [131, 163], "environ": [39, 57, 102, 131, 169, 181, 222, 224, 250, 291, 294, 322], "environment": [57, 102], "eof": [104, 247], "ep": 164, "epilogu": 109, "episod": 338, "eprint": 262, "epsilon": [0, 119, 121, 145, 192, 217, 258, 259], "eq": [123, 130, 180, 191, 271], "eq_list": [180, 191], "equ": 68, "equal": [33, 35, 43, 51, 52, 57, 68, 79, 104, 107, 117, 119, 120, 121, 135, 142, 147, 148, 150, 151, 167, 173, 179, 181, 184, 190, 191, 197, 214, 240, 248, 263, 275, 276, 277, 307, 319, 334, 347], "equal_valu": [0, 120, 314], "equality_pr": [0, 180, 191, 326], "equalityexpress": [0, 180, 184, 191], "equat": [33, 57, 107, 179, 351], "equilibrar": 333, "equip": 307, "equiv": [180, 184, 191, 192, 319], "equival": [15, 25, 28, 51, 52, 120, 135, 137, 144, 179, 184, 186, 191, 233, 259, 263, 275, 281, 282, 284, 298, 319, 322, 326, 347], "er": [57, 67, 73, 107, 203, 272, 306, 321, 333], "er0": [67, 307], "er_99": 73, "era": 333, "erfcc": [0, 256, 260], "erico": 208, "ern": 203, "err": [57, 103], "errant": 334, "errata": 346, "erron": 229, "error": [0, 25, 30, 32, 39, 57, 72, 101, 107, 111, 113, 121, 131, 149, 154, 179, 180, 186, 197, 202, 216, 229, 230, 234, 245, 255, 260, 269, 270, 287, 288, 289, 302, 303, 307, 309, 314, 323, 331, 332, 334, 351, 356], "error_list": [0, 227, 230], "error_output": 229, "erroranalysi": [0, 227], "errormessag": [0, 113], "errt": [149, 331], "erwartet": 274, "esa\u00fa": 333, "escap": [111, 131, 191, 254, 275, 279, 307, 314], "eschbach": [279, 283], "eschbachguentherbecker2006": [279, 283], "esconjuro": 333, "escutava": 333, "esequ": 333, "esn": 203, "esp": [307, 333, 336], "especi": [43, 52, 100, 196, 198, 307, 353], "esperam": 333, "esperanto": [57, 103], "espetado": 333, "espraiavam": 333, "ess": 333, "essa": 333, "essenti": [52, 121], "est": [57, 107, 333, 334], "esta": 307, "establish": [170, 219], "estado": 333, "estadounidens": 307, "estar": 333, "estava": 333, "estim": [33, 35, 36, 38, 46, 48, 135, 179, 218, 258, 263, 264, 265, 266, 267, 268, 307], "estivess": 333, "estonian": 307, "est\u00e3o": 333, "est\u00fapido": 333, "esvoa\u00e7": 333, "et": [57, 72, 105, 106, 109, 218, 240, 248, 258, 262, 267, 273, 279, 283, 301, 307, 317, 326], "eta": 192, "etc": [57, 72, 104, 107, 113, 119, 120, 179, 180, 231, 232, 234, 243, 266, 281, 284, 294, 307, 315, 328], "eterno": 333, "eth": 192, "etre": [131, 307, 335, 345], "eu": [257, 307, 333, 351], "euc": [57, 76, 103], "euclidean": 51, "euclidean_dist": [0, 46, 51], "euml": 192, "euphrosyn": 109, "euro": [192, 239, 253, 307], "europarl": [57, 87], "europarl_raw": [0, 55], "europarlcorpusread": [55, 57, 87], "european": [242, 243], "eurythm": 336, "eustac": 109, "eus\u00e9bia": 333, "ev": 322, "evad": [57, 72, 315], "eval": [131, 159, 166, 176, 261, 332], "evalu": [0, 25, 26, 28, 29, 52, 73, 94, 131, 135, 136, 139, 143, 147, 149, 151, 159, 180, 182, 194, 195, 196, 197, 201, 203, 213, 214, 223, 242, 245, 258, 259, 261, 262, 269, 271, 273, 300, 314, 328, 333, 339, 356], "evaluate_per_tag": [213, 214, 343], "evaluate_s": [0, 180, 194, 338], "even": [25, 57, 59, 120, 135, 142, 170, 229, 288, 307, 313, 314, 351], "event": [57, 61, 72, 117, 119, 121, 146, 179, 181, 191, 218, 307, 315, 328, 334], "eventtyp": [0, 180, 191], "eventu": [107, 291, 314, 322], "eventvariableexpress": [0, 180, 184, 191], "ever": [23, 247, 306, 322, 332], "everi": [13, 33, 39, 43, 57, 62, 81, 89, 104, 108, 119, 120, 125, 129, 135, 162, 167, 170, 178, 179, 182, 184, 191, 197, 223, 231, 232, 234, 258, 274, 275, 281, 282, 284, 302, 306, 307, 308, 311, 312, 313, 314, 319, 322, 333, 338, 346, 347], "every_girl": 318, "every_girl_chas": 318, "every_girl_chases_a_dog": 318, "every_girl_chases_yprim": 318, "everygram": [0, 135, 139, 291, 325, 356], "everyth": [57, 87, 111, 135, 238, 302], "everywher": [252, 267, 344], "evid": [57, 72, 223, 243, 305, 333, 344], "evok": [57, 72, 315], "evolv": 133, "ew": 305, "ewan": [0, 354, 356, 358], "ex": [57, 84, 127, 164, 181, 191, 214, 218, 289, 307, 333, 343], "ex2": [57, 84], "ex_quant": [311, 318, 319], "exact": [129, 146, 150, 184, 225, 258, 269, 305], "exact_match": [0, 256, 269], "exactli": [31, 36, 72, 120, 135, 187, 191, 268, 334, 347], "exahust": [162, 165], "examin": [30, 215, 307, 333, 347], "examlpl": 164, "exampl": [0, 14, 25, 28, 29, 30, 33, 34, 36, 39, 46, 52, 55, 57, 58, 61, 63, 67, 72, 76, 78, 79, 80, 81, 87, 88, 89, 92, 93, 97, 99, 100, 103, 104, 105, 107, 108, 109, 111, 112, 119, 121, 125, 131, 132, 134, 135, 136, 140, 143, 144, 146, 148, 151, 155, 159, 162, 169, 170, 172, 174, 176, 179, 181, 182, 185, 186, 191, 192, 196, 197, 213, 214, 219, 224, 235, 236, 238, 241, 244, 246, 247, 250, 251, 259, 262, 266, 267, 268, 273, 274, 275, 278, 281, 282, 284, 287, 288, 289, 291, 292, 294, 299, 300, 305, 307, 309, 313, 314, 315, 316, 317, 319, 322, 325, 326, 328, 335, 336, 338, 339, 343, 344, 346, 347, 351, 356], "example_word": 80, "exce": [25, 192, 307], "exceed": [25, 158], "excel": 339, "except": [31, 34, 42, 57, 59, 72, 86, 87, 107, 110, 111, 117, 121, 127, 128, 129, 130, 131, 132, 163, 164, 176, 181, 182, 184, 186, 190, 191, 235, 238, 244, 246, 255, 275, 277, 289, 300, 303, 304, 307, 308, 309, 312, 314, 318, 325, 326, 338, 344, 345, 347, 351], "exception": 198, "excerpt": [57, 72, 209], "excessivament": 333, "exchang": 307, "exchequ": 307, "exclud": [57, 65, 72, 215, 223, 231, 243, 246, 264, 265, 266, 267, 314, 343], "excludesf": [57, 72], "excludezero": [231, 233], "exclus": [38, 100, 111, 229, 274, 343], "exec_tim": 307, "execut": [2, 28, 30, 39, 124, 128, 131, 182, 197, 219, 222, 224, 288, 300, 307, 322, 332, 336, 344], "executivo": 333, "exemplar": [55, 57, 72], "exemplifi": 229, "exemplo": 333, "exercis": [2, 94, 294, 306, 311, 346, 356], "exhal": 307, "exhaust": [162, 165, 258], "exhibit": [126, 128, 307], "exist": [14, 46, 57, 59, 85, 105, 107, 111, 113, 119, 120, 123, 127, 130, 131, 149, 162, 163, 164, 165, 167, 171, 174, 175, 179, 180, 181, 184, 186, 188, 189, 190, 191, 192, 202, 206, 265, 275, 282, 293, 294, 299, 307, 309, 311, 312, 313, 318, 319, 322, 326, 330, 338, 345, 347, 351, 356], "existenti": 326, "exists_list": [180, 191], "existsexpress": [0, 180, 191], "exit": 322, "exodu": 109, "exp": [33, 271], "expand": [7, 25, 28, 113, 118, 121, 159, 167, 171, 173, 227, 229, 231, 233, 274, 275, 282, 302, 313, 356], "expand_thread": [123, 125, 311], "expand_tweetid": [285, 289], "expand_tweetids_demo": [0, 285, 288], "expandable_product": [159, 173], "expanded_tre": [114, 118], "expandleftrul": [0, 25, 28, 302], "expandrightrul": [0, 25, 28, 302], "expandunari": [275, 281, 282], "expans": [7, 145, 173, 274, 313], "expansion_scor": [256, 274], "expect": [27, 28, 30, 46, 48, 52, 57, 59, 72, 92, 113, 131, 135, 136, 137, 138, 139, 144, 162, 177, 179, 191, 196, 198, 225, 233, 239, 241, 242, 247, 252, 253, 254, 261, 263, 268, 274, 307, 311, 312, 313, 314, 315, 323, 326, 334, 343, 344, 347], "expected_albb": 242, "expected_amz": 242, "expected_cas": 242, "expected_detoken": 253, "expected_low": 242, "expected_output": 254, "expected_rkt": 242, "expected_s": 242, "expected_token": 253, "expectedmoretokensexcept": [0, 180, 191], "expens": [46, 131, 146, 267], "experi": [2, 179, 245, 258, 262, 289, 307], "experienc": [307, 315], "experiment": [157, 201, 256, 274], "expert": [346, 358], "expir": 339, "explain": [30, 33, 298, 313, 343], "explan": [275, 282], "explet": 307, "explicit": [34, 253, 307], "explicitli": [34, 35, 57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 82, 84, 85, 93, 98, 105, 107, 108, 109, 113, 135, 137, 179, 307, 309, 314, 330], "explod": 336, "exploit": 63, "explor": [2, 3, 7, 8, 234], "explos": [221, 351], "expon": [146, 258], "exponenti": [33, 243, 274], "exportselect": 117, "expos": [307, 335], "expose_01": 335, "exposi": 333, "expr": [128, 186, 187, 191, 332, 338], "expr_tt": [57, 84], "expr_uid": [57, 84], "expres": 246, "express": [0, 1, 3, 6, 16, 23, 25, 28, 29, 32, 35, 36, 52, 57, 59, 61, 64, 65, 68, 69, 70, 71, 72, 75, 82, 84, 85, 86, 93, 98, 104, 105, 107, 108, 109, 111, 124, 125, 126, 127, 128, 129, 130, 131, 163, 180, 181, 184, 186, 188, 190, 191, 192, 193, 194, 207, 218, 223, 233, 234, 235, 236, 238, 241, 243, 244, 246, 253, 254, 263, 264, 265, 275, 282, 287, 291, 299, 300, 302, 305, 307, 309, 311, 312, 313, 315, 318, 322, 326, 330, 333, 336, 337, 338, 343, 347, 356], "expung": 309, "ext": [307, 309], "extend": [0, 46, 57, 72, 106, 107, 114, 117, 120, 124, 128, 135, 173, 174, 179, 184, 275, 276, 307, 311, 339, 347, 351, 356], "extens": [57, 60, 66, 111, 113, 124, 140, 148, 167, 169, 182, 206, 218, 243, 257, 300, 307, 309, 322, 338], "extension": 182, "extent": 28, "extern": [33, 34, 44, 55, 57, 126, 128, 235, 268], "extra": [28, 33, 57, 72, 131, 171, 179, 258, 275, 282, 307, 323, 342, 345, 356], "extract": [0, 14, 37, 39, 43, 57, 61, 73, 96, 106, 113, 162, 164, 165, 176, 182, 188, 192, 194, 196, 197, 204, 217, 222, 231, 233, 246, 256, 259, 262, 272, 274, 275, 282, 287, 291, 298, 299, 300, 317, 322, 333, 334], "extract_bigram_feat": [0, 195, 197], "extract_featur": [159, 176, 195, 196], "extract_field": [0, 285, 287], "extract_properti": [213, 215, 227, 231, 232], "extract_rel": [0, 180, 192, 336], "extract_test_sent": [0, 159, 177, 332], "extract_unigram_feat": [0, 195, 197, 339], "extractor": [30, 196, 197, 310], "extramur": 329, "extran": 37, "extrem": [57, 91, 198, 307, 309], "ey": [57, 72, 315], "ey2": 307, "e\u0377\u0a08\ua9b2\u1442": [], "e\u183b\u307c": [], "e\u1d42": [], "e\ufb78\u0169\u097d\ua3c4\u188f\u1bda\ua142": 242, "f": [0, 28, 29, 30, 31, 32, 33, 44, 46, 52, 57, 67, 72, 89, 100, 106, 107, 112, 113, 120, 135, 137, 145, 147, 150, 181, 186, 187, 203, 212, 214, 216, 246, 259, 272, 273, 281, 284, 291, 299, 305, 307, 309, 312, 313, 314, 315, 317, 322, 323, 326, 328, 329, 332, 333, 334, 335, 337, 338, 339, 343, 345, 346, 347, 356], "f1": [35, 120, 299, 307, 311, 313], "f2": [120, 307, 313], "f2e": 261, "f3": 307, "f4": 318, "f_align": 272, "f_end": 272, "f_id": 33, "f_measur": [0, 25, 29, 143, 147, 150, 196, 213, 214, 302, 328, 341], "f_start": 272, "fa": 345, "fabl": 306, "fabul": 198, "face": [25, 57, 83, 307], "facil": 271, "facilit": [192, 196, 229, 356], "fact": [91, 117, 162, 182, 300, 307, 311], "factor": [53, 148, 179, 229, 267, 271, 274, 275, 281, 282, 284, 349], "factori": [112, 179, 184, 190, 191, 223, 233], "factory_arg": 179, "factory_kw_arg": 179, "facugamband": 344, "faculti": 317, "fail": [37, 111, 120, 131, 186, 243, 289, 298, 309, 313, 314, 322, 343, 344, 356], "fail_on_unknown": 234, "failobj": 52, "failur": [336, 351], "fairi": 307, "fairli": 307, "faith": [206, 353], "fake": [57, 107, 351], "fake_": 351, "fakecorpu": 351, "fall": [46, 133, 148, 223, 267, 339], "fallback": [133, 259], "fals": [13, 16, 25, 29, 32, 33, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 57, 59, 61, 65, 69, 72, 75, 82, 87, 90, 91, 98, 100, 105, 107, 108, 111, 113, 116, 117, 118, 120, 121, 124, 125, 126, 128, 129, 130, 131, 135, 142, 147, 148, 151, 162, 163, 164, 165, 169, 174, 175, 176, 177, 179, 181, 182, 183, 184, 186, 187, 188, 191, 192, 196, 197, 203, 205, 209, 214, 216, 217, 218, 219, 221, 223, 224, 225, 229, 231, 232, 233, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 258, 273, 275, 276, 277, 279, 280, 281, 282, 284, 286, 287, 289, 290, 291, 297, 299, 303, 306, 307, 309, 312, 314, 317, 322, 323, 326, 328, 330, 332, 337, 338, 343, 344, 346, 347, 351], "falta": 333, "famili": [16, 125], "familiarizamo": 333, "famou": [57, 63, 258, 307], "fanci": 347, "fang": 96, "fantast": 339, "far": [14, 97, 135, 173, 174, 216, 274, 275, 282, 307], "faro": 333, "farsi": 307, "fartura": 333, "fass": [265, 266, 267], "fast": [57, 67, 68, 72, 203, 216, 229, 233, 291, 307, 343], "faster": [57, 72, 291, 322, 333], "fat": 156, "father": [305, 307, 326], "father_of": 337, "fault": 339, "fauna": 333, "favor": 344, "favorit": [252, 344], "favorite_count": 287, "favour": 274, "fazer": 333, "fazia": 333, "fb": 344, "fcbond": 358, "fcfg": [111, 177, 188, 194, 300, 309, 311, 312, 313, 321, 332, 338], "fcl": 333, "fcp1": 332, "fcp2": 332, "fd": [333, 334, 345], "fd1": [333, 334], "fd2": 334, "fdict_class": [120, 312], "fdist": 179, "fdopen": 345, "fe": [55, 57, 72, 315], "fe2": [57, 72], "fe_rel": [55, 57, 72], "feat": [57, 91, 307], "feat0": [309, 313, 332], "feat0cfg": 313, "feat1": 313, "feat_val": 33, "featdict": [0, 120, 314], "featgram": 295, "featlist": [0, 120, 314], "featstruct": [0, 183, 275, 282, 295, 312, 313, 341, 347, 358], "featstructnontermin": [167, 312], "featstructread": [0, 111, 120, 312, 314], "featur": [0, 32, 34, 35, 36, 37, 38, 41, 43, 44, 52, 55, 57, 68, 75, 91, 107, 111, 135, 136, 145, 161, 167, 170, 176, 177, 183, 194, 196, 197, 204, 214, 215, 217, 221, 223, 227, 229, 232, 233, 240, 248, 256, 303, 307, 309, 312, 338, 339, 347, 351, 356], "feature1": 233, "feature2": 233, "feature_detector": [213, 223], "feature_extract": 38, "feature_func": [43, 196, 217], "feature_nam": 32, "feature_probdist": 35, "feature_select": 38, "feature_valu": 32, "feature_vector": 33, "featurebottomupchartpars": [0, 159, 167, 332], "featurebottomupleftcornerchartpars": [0, 159, 167, 332], "featurebottomuppredictcombinerul": [0, 159, 165, 167], "featurebottomuppredictrul": [0, 159, 167], "featurechart": [0, 159, 165, 313, 332], "featurechartpars": [0, 159, 165, 167, 332], "featurecompletefundamentalrul": [0, 159, 165], "featurecompleterrul": [0, 159, 165], "featuredict": 30, "featureearleychartpars": [0, 159, 165, 311, 313, 332], "featureemptypredictrul": [0, 159, 165, 167], "featurefundamentalrul": [0, 159, 167], "featuregrammar": [177, 194, 313, 332, 338], "featureincrementalbottomupchartpars": [0, 159, 165, 332], "featureincrementalbottomupleftcornerchartpars": [0, 159, 165, 332], "featureincrementalchart": [0, 159, 165], "featureincrementalchartpars": [0, 159, 165, 332], "featureincrementaltopdownchartpars": [0, 159, 165, 332], "featurelist": 233, "featurepredictorrul": [0, 159, 165], "features_count": 34, "featurescannerrul": [0, 159, 165], "featureset": [0, 31, 32, 33, 34, 35, 36, 38, 41, 43, 44, 52, 196, 214, 223, 303], "featuresettagg": 214, "featuresettaggeri": [0, 213, 214, 223], "featuresingleedgefundamentalrul": [0, 159, 165, 167], "featuretopdownchartpars": [0, 159, 167, 332], "featuretopdowninitrul": [0, 159, 167], "featuretopdownpredictrul": [0, 159, 165, 167], "featuretreeedg": [0, 159, 167], "featurevalueset": 314, "featurevaluetupl": 314, "feb": 91, "februari": [301, 356], "fechado": 333, "fechei": 333, "fecoreset": [57, 72], "fed": 30, "feder": 234, "fee": [67, 313], "feeblemind": 351, "feed": [135, 137, 307, 313, 351], "feedback": 356, "feel": [253, 307, 348, 354], "feet": 253, "fei": 333, "feid": [57, 72], "feil1v": 205, "feito": 333, "fei\u00e7\u00e3o": 333, "fell": 310, "fellbaum": [57, 105], "fellegi": 148, "fellow": [234, 307], "fem": [313, 341], "fem2masc": [199, 201, 202], "femal": [36, 100, 301, 307], "feminin": [201, 202], "feng": 96, "ferel": [57, 72], "ferret": 307, "fertil": [265, 266, 267, 268], "fertility_of_i": [256, 268], "fertility_t": [265, 266, 267], "fetch": [286, 288, 289, 304], "fetter": 351, "few": [52, 204, 209, 215, 252, 307, 314, 333], "fewer": [33, 50, 223, 275, 282, 289, 307, 352], "ffourth": 345, "ffreq_empir": 33, "fg": [117, 307], "fi": [57, 106, 248, 333], "fi2": 205, "fiction": [307, 334], "fid": [33, 307], "fido": [180, 191, 309, 311, 338], "field": [0, 25, 55, 57, 72, 78, 85, 97, 100, 101, 170, 182, 197, 251, 255, 257, 287, 288, 300, 307, 356], "field_ord": 255, "fieldwork": 356, "fiendish": 234, "fievelk": 358, "fig": [170, 271], "fight": 291, "figur": [307, 317], "file": [0, 10, 34, 39, 41, 42, 44, 52, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 113, 119, 125, 128, 131, 148, 161, 164, 169, 176, 177, 180, 191, 196, 197, 198, 217, 219, 222, 224, 229, 231, 232, 233, 243, 245, 255, 275, 282, 287, 288, 289, 290, 291, 294, 298, 301, 307, 308, 311, 313, 317, 322, 333, 335, 338, 341, 345, 351, 356], "file_id": [57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 82, 84, 85, 93, 98, 105, 107, 108, 109], "file_nam": [131, 290], "file_path": 79, "file_s": [0, 111], "fileid": [30, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 297, 301, 307, 332, 333, 334, 335, 336], "fileid_or_classid": [57, 105], "filenam": [0, 55, 57, 72, 73, 75, 80, 92, 111, 113, 119, 131, 164, 169, 182, 187, 194, 196, 197, 208, 229, 255, 300, 307, 309], "filepo": [104, 307], "files": 113, "filespac": 294, "filestr": [0, 291], "filesystempathpoint": [0, 111, 307, 309], "filetyp": [57, 100], "filho": 333, "fill": [118, 119, 135, 158, 178, 229, 233, 267, 307, 336], "filler": [192, 336], "fillmor": 315, "film": [163, 339], "filter": [53, 57, 72, 75, 79, 84, 121, 125, 135, 142, 165, 192, 233, 234, 235, 251, 275, 282, 285, 289, 307, 311, 332, 333, 336, 351], "filteredbottomuppredictcombinerul": [0, 159, 162], "filteredcompletefundamentalrul": [0, 159, 165], "filteredsingleedgefundamentalrul": [0, 159, 162, 165], "fin": [314, 332, 333, 351], "final": [25, 28, 57, 66, 111, 144, 162, 165, 178, 191, 209, 216, 243, 252, 255, 258, 267, 288, 305, 307, 343, 345, 356], "final_period_1": [236, 252], "final_period_2": [236, 252], "finalerror": 216, "finalize_train": [236, 243], "financi": [176, 353], "financiada": 333, "find": [0, 1, 6, 26, 28, 33, 34, 35, 42, 46, 48, 49, 50, 51, 53, 57, 59, 62, 63, 79, 80, 86, 107, 108, 111, 119, 121, 124, 125, 129, 131, 135, 148, 156, 157, 169, 170, 173, 174, 176, 178, 179, 184, 188, 191, 192, 194, 197, 216, 218, 223, 232, 234, 235, 236, 243, 244, 245, 246, 254, 258, 261, 265, 268, 272, 274, 275, 282, 301, 305, 307, 311, 317, 322, 333, 335, 339, 343, 347], "find_abbrev_typ": [236, 243], "find_all_src_phras": [256, 274], "find_answ": [123, 129, 337], "find_best_fit": [0, 179], "find_binari": [0, 131], "find_binary_it": [0, 131], "find_concord": [0, 234], "find_corpus_fileid": [55, 57, 104], "find_diment": [114, 119], "find_dir": [0, 131], "find_fil": [0, 131], "find_file_it": [0, 131], "find_increasing_sequ": [0, 256, 273], "find_jar": [0, 131], "find_jar_it": [0, 131], "find_jars_within_path": [0, 131], "find_label_nam": [180, 187], "find_legal_onset": [236, 240], "find_malt_model": [0, 159, 169], "find_maltpars": [0, 159, 169], "find_repptoken": [236, 245], "find_vari": 120, "findal": [0, 131, 234, 238, 307, 333, 335], "finder": [53, 329], "finder_4gram": 305, "finding_dir": 131, "findtext": 307, "findtyp": [180, 191, 326], "fine": [2, 38, 144, 229, 258, 314], "finer": [57, 86], "fingerprint": [30, 42], "finish": [113, 124], "finishcollectionmessag": [0, 113], "finishdownloadmessag": [0, 113], "finishpackagemessag": [0, 113], "finishunzipmessag": [0, 113], "finit": [31, 57, 89, 218, 356], "finnish": [57, 106, 209, 307, 342], "finnishstemm": [0, 199, 209], "fire": 34, "firefox": 307, "fireman": 107, "firm": 336, "first": [7, 8, 10, 16, 23, 25, 28, 33, 34, 35, 36, 41, 44, 46, 51, 52, 53, 57, 59, 60, 61, 64, 65, 68, 69, 70, 71, 72, 75, 77, 82, 84, 85, 86, 91, 93, 98, 100, 104, 105, 107, 108, 109, 110, 111, 113, 117, 119, 120, 121, 124, 125, 127, 129, 130, 131, 135, 137, 145, 148, 157, 162, 164, 171, 173, 179, 180, 181, 182, 184, 186, 188, 190, 191, 192, 193, 194, 196, 197, 202, 204, 225, 226, 231, 234, 236, 240, 243, 244, 248, 258, 265, 266, 267, 268, 272, 273, 275, 276, 277, 291, 294, 300, 301, 307, 309, 311, 313, 314, 316, 317, 318, 322, 325, 326, 332, 336, 338, 343, 345, 346, 347, 348, 356], "first_cas": [236, 243], "first_low": [236, 243], "first_po": 251, "first_upp": [236, 243], "fish": 334, "fisher": [143, 146, 328], "fisher_exact": [0, 143, 146], "fit": [38, 135, 136, 158, 307, 315, 325], "fit_transform": 317, "fitando": 333, "fito": 333, "fitzenreit": 148, "fitzrureit": 148, "five": [146, 204, 351], "fix": [31, 33, 39, 64, 162, 216, 223, 232, 234, 251, 267, 268, 307, 309, 334, 343, 347, 356, 358], "fixm": 216, "flag": [57, 58, 63, 66, 68, 71, 87, 90, 91, 99, 107, 113, 116, 120, 179, 218, 225, 236, 238, 243, 244, 273, 275, 276, 282, 286, 289, 294, 352, 356], "flat": [108, 135, 139, 251, 255, 275, 282, 307], "flatten": [0, 57, 69, 135, 139, 275, 282, 291, 302], "flaw": 20, "fledg": [120, 314], "fleiss": 144, "fleuri": 333, "flexibl": [2, 121, 135, 137, 162, 238, 299], "fli": 342, "flight": [330, 332, 353], "flinch": 307, "flip": [198, 218, 266], "flippin": 198, "flist_class": 120, "float": [29, 33, 38, 47, 48, 50, 51, 57, 65, 77, 107, 131, 135, 136, 138, 145, 147, 150, 151, 166, 179, 196, 198, 214, 216, 218, 229, 240, 257, 258, 259, 262, 263, 264, 268, 269, 270, 273, 274], "flood": 306, "floresta": 356, "florida": 148, "floss": 307, "flush": 162, "fly": [213, 226, 330, 351], "flying_ostrich": 330, "fmla": 338, "fmt": [25, 27, 232], "fn": [35, 57, 72, 120, 315], "fn1_sent": [57, 72], "fn_docid": [57, 72], "fn_fid": [57, 72], "fn_fid_or_fnam": [57, 72], "fn_fname": [57, 72], "fn_luid": [57, 72], "fname": [33, 35, 44, 345], "fnof": 192, "fnreport": [57, 72], "fntbl": 215, "fntbl37": [0, 213, 215], "fo": 306, "focu": [114, 117, 119, 307, 322], "fog": 307, "foi": 333, "fol": [111, 125, 180, 182, 184, 300, 309, 311, 322, 326], "foldemo": [0, 180, 186], "folder": [57, 65, 294, 308], "folg": 321, "folgar": 333, "folgen": 321, "folgst": 321, "folgt": 321, "folha": 333, "follow": [7, 8, 14, 25, 28, 30, 33, 36, 38, 52, 53, 57, 59, 61, 64, 65, 69, 70, 71, 72, 73, 75, 79, 82, 84, 85, 86, 88, 92, 93, 98, 100, 102, 104, 105, 107, 108, 109, 111, 113, 115, 117, 119, 120, 121, 131, 135, 139, 144, 146, 148, 154, 162, 163, 170, 171, 173, 174, 177, 179, 181, 182, 186, 188, 191, 194, 206, 209, 213, 218, 220, 223, 226, 233, 234, 236, 243, 244, 246, 247, 248, 253, 258, 259, 263, 264, 265, 266, 267, 273, 275, 277, 278, 281, 282, 284, 288, 289, 294, 300, 303, 306, 307, 308, 309, 311, 313, 314, 315, 317, 322, 326, 328, 329, 333, 335, 336, 343, 344, 346, 347, 351, 354, 356], "followers_count": 287, "followtoscreen_demo": [0, 285, 288], "folmodel": [0, 180, 186], "fom": 164, "font": [25, 57, 103, 117, 119, 275, 279, 332], "foo": [61, 72, 80, 93, 108, 131, 242, 248, 302, 309, 314, 325, 334, 338, 344, 356], "foobar": [177, 248, 334], "food": [57, 72, 131, 315, 323], "fora": 333, "foral": [119, 184, 191, 192], "forbid": 307, "forbidden": 347, "forc": [113, 217, 258, 259, 262, 269, 271, 273, 307, 336, 353], "foreground": 117, "foreign": [216, 220, 234, 272, 343], "foreman": 336, "forese": [57, 72, 315], "forev": [258, 259, 262, 269, 271, 273, 351], "forg": 307, "forget": 298, "form": [15, 24, 28, 29, 33, 43, 52, 57, 72, 89, 92, 93, 94, 99, 104, 107, 111, 113, 119, 121, 124, 125, 128, 156, 162, 164, 167, 171, 172, 176, 178, 181, 182, 183, 184, 188, 191, 192, 193, 201, 202, 203, 204, 209, 216, 218, 223, 225, 226, 229, 231, 233, 241, 244, 246, 254, 257, 275, 277, 281, 282, 284, 300, 307, 311, 314, 315, 318, 320, 322, 333, 335, 336, 343, 346, 349, 351, 356], "forma": 333, "formal": [179, 218, 232], "format": [0, 28, 29, 30, 33, 34, 44, 55, 57, 59, 65, 67, 77, 79, 87, 88, 92, 100, 107, 111, 121, 124, 126, 128, 131, 135, 164, 169, 177, 182, 186, 216, 223, 227, 229, 232, 245, 254, 255, 257, 261, 272, 274, 275, 279, 286, 287, 288, 289, 290, 300, 301, 307, 309, 310, 311, 317, 322, 326, 331, 339, 351, 356], "format_debug_decis": [0, 236, 243], "formatt": 44, "former": [163, 306, 332], "formul": 165, "formula": [111, 124, 125, 148, 180, 186, 187, 188, 190, 191, 258, 273, 309, 312, 322], "formula_tre": [180, 188], "fortaleci\u00f3": 307, "forth": [273, 307], "fortun": 135, "forum": [205, 336, 354], "forw": 261, "forward": [14, 15, 57, 61, 68, 80, 93, 108, 111, 164, 218, 261, 307, 314], "forwardcombin": [0, 12, 15], "forwardonli": [0, 12, 15], "forwardsconstraint": [0, 12, 15], "forwardtconstraint": [0, 12, 15], "forwardtyperaiserul": [0, 12, 14], "fought": 344, "found": [34, 39, 46, 48, 49, 57, 62, 65, 79, 104, 106, 107, 108, 110, 111, 120, 124, 125, 126, 131, 162, 171, 173, 174, 178, 179, 204, 206, 209, 211, 216, 222, 229, 234, 240, 243, 258, 267, 268, 275, 277, 294, 307, 308, 311, 312, 322, 326, 330, 334, 335, 342, 343, 344, 346, 347, 351], "foundat": [127, 336, 356], "four": [28, 119, 146, 204, 234, 246, 301, 311, 312, 326, 351], "fourgram": [258, 305, 328], "fourgram_measur": 305, "fourth": [301, 345, 356], "fox": [163, 175, 221], "foxu": 117, "fp": 287, "fpa": 307, "fpath1": 314, "fpath2": 314, "fprefix": 289, "fpt": 307, "fr": [57, 106, 308, 318, 346], "fr64": [57, 60], "fra": [308, 351], "frac12": 192, "frac14": 192, "frac34": 192, "fraction": [0, 150, 229, 256, 258], "fractional_pres": [0, 143, 148], "fragment": [188, 225, 269, 307], "frame": [55, 57, 72, 105, 117, 119, 307], "frame2": [57, 72], "frame_by_id": [55, 57, 72], "frame_by_nam": [55, 57, 72], "frame_config": [114, 117], "frame_id": [57, 107, 351], "frame_ids_and_nam": [55, 57, 72], "frame_rel": [55, 57, 72], "frame_relation_typ": [55, 57, 72], "frame_str": [57, 107, 351], "framefil": [57, 81, 89], "frameid": [57, 72], "framenam": [57, 72], "framenet": [55, 57, 105, 295, 356], "framenet2": [57, 72], "framenetcorpusread": [55, 57, 72], "frameneterror": [55, 57, 72], "framerel": [57, 72, 315], "framerelationtyp": [57, 72], "frames_by_lemma": [55, 57, 72, 315], "frameset": [57, 81, 89, 335], "framework": [33, 111, 182, 300, 356], "franc": [182, 317, 351], "franci": 358, "frank": 351, "franz": 258, "fraser": 203, "frasl": 192, "frauenfeld": 240, "fraze": 356, "freaki": 351, "free": [0, 111, 115, 121, 123, 127, 129, 180, 184, 186, 191, 219, 307, 309, 312, 354, 356], "freedom": 336, "freez": [0, 120, 275, 282, 307, 314, 332], "frel": [57, 72], "french": [57, 106, 209, 252, 266, 307, 342, 351], "frenchstemm": [0, 199, 209], "frente_a": 307, "freq": [0, 179, 305], "freq_threshold": [236, 243], "freqdist": [0, 42, 53, 57, 70, 179, 218, 234, 305, 307, 308, 328, 333, 356], "frequenc": [33, 36, 42, 53, 57, 107, 135, 137, 142, 146, 147, 179, 196, 217, 218, 225, 234, 240, 243, 258, 305, 333, 334, 356], "frequent": [20, 135, 142, 147, 179, 197, 213, 223, 234, 243, 333, 358], "fresh": 120, "fri": [57, 72, 133, 315], "frick": 198, "frickin": 198, "fridai": [223, 344], "friend": [163, 175], "friendli": [135, 137, 289], "friends_count": 287, "frig": 198, "friggin": 198, "fring": [7, 173], "frisian": 133, "from": [7, 8, 14, 16, 22, 24, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 43, 44, 46, 47, 48, 49, 51, 52, 53, 55, 57, 58, 59, 60, 61, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 102, 104, 105, 106, 107, 108, 111, 113, 117, 118, 119, 120, 121, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 142, 144, 145, 146, 147, 148, 149, 150, 152, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 194, 196, 197, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 282, 283, 284, 287, 288, 289, 290, 291, 292, 294, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356], "from_product": [159, 162, 167, 171], "from_train": [30, 44], "from_tt": [57, 84], "from_uid": [57, 84], "from_unified_model_dir": [159, 161], "from_word": [0, 53, 305], "fromkei": 314, "fromlist": [0, 275, 282], "fromstr": [0, 12, 14, 16, 25, 28, 111, 120, 121, 131, 170, 180, 184, 186, 190, 191, 235, 256, 257, 275, 279, 282, 298, 299, 309, 310, 312, 313, 314, 316, 318, 320, 322, 326, 330, 332, 337, 338, 341, 346, 347, 348, 349], "fromxml": [0, 113], "front": 307, "frontier": [7, 159, 173, 336], "frozen": [0, 120, 206, 314], "frozenset": 257, "frt": [57, 72], "frump": 351, "fry": [133, 315], "fr\u00e1ncfort": 307, "fs0": 313, "fs1": [313, 314, 341], "fs1_name": 314, "fs2": [313, 314, 341], "fs2_name": 314, "fs3": [313, 314], "fs4": 314, "fs5": 314, "fs_class": [120, 314], "fscore": 259, "fsnlp": 53, "fstruct": [120, 190, 314, 318], "fstruct1": 120, "fstruct2": 120, "fstruct_read": [111, 312], "fstructur": [0, 180, 189, 318], "ft_sent": [55, 57, 72], "ftp": [67, 309], "ftype": 44, "fuck": 198, "fuel": 46, "fueron": 298, "fugir": 333, "ful": 240, "fulfil": [232, 235, 307], "full": [28, 34, 57, 61, 72, 75, 102, 106, 107, 112, 120, 131, 133, 135, 137, 274, 287, 288, 289, 307, 314, 315, 317, 333, 356], "full_text": [57, 72], "fuller": 315, "fulli": [14, 132, 162, 164, 170, 198, 260, 313], "fullsignatur": 112, "fulltextannot": [57, 72], "fulton": [55, 57, 223, 294, 307, 344], "fun": 307, "func": [33, 78, 112, 117, 119, 203, 288, 291], "funccolor": [275, 279], "function": [0, 13, 15, 17, 25, 28, 29, 30, 33, 34, 35, 39, 43, 47, 50, 51, 52, 53, 58, 62, 65, 66, 71, 72, 76, 78, 79, 80, 81, 86, 87, 89, 99, 100, 104, 107, 108, 111, 112, 113, 117, 118, 119, 120, 121, 128, 131, 133, 135, 136, 138, 141, 144, 145, 146, 148, 169, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 191, 194, 196, 197, 201, 202, 205, 209, 211, 217, 218, 220, 223, 225, 229, 233, 234, 235, 238, 242, 244, 246, 247, 254, 258, 259, 260, 261, 262, 267, 268, 269, 271, 272, 273, 275, 276, 281, 282, 284, 287, 288, 289, 290, 291, 292, 293, 294, 299, 300, 305, 306, 307, 309, 311, 313, 314, 315, 317, 322, 326, 332, 333, 336, 347, 351, 355, 356], "functionalcategori": [0, 12, 13], "functionbackedmaxentfeatureencod": [0, 30, 33], "functionvariableexpress": [0, 180, 184, 191], "functool": [112, 314], "functor": 15, "fund": [353, 356], "fundament": [167, 171, 313, 354], "fundamentalrul": [0, 159, 162, 167], "fundo": 333, "funky_punct_1": [236, 252, 344], "funky_punct_2": [236, 252, 344], "funnel": 307, "funni": [57, 63, 307, 339], "fur": 344, "furiou": 234, "further": [28, 134, 170, 172, 182, 186, 206, 225, 236, 240, 243, 258, 273, 300, 306, 307, 317, 343, 344, 356], "furthermor": [28, 258], "futur": [55, 57, 72, 89, 124, 167, 201, 202, 274, 289, 307, 347, 353], "future_hav": 307, "future_scor": [256, 274], "future_score_t": 274, "fv": 318, "fval": [33, 34, 35], "fval1": 120, "fval2": 120, "fvmh0": [100, 307], "fx": 307, "fx8": 297, "fy": 133, "f\u00falgido": 333, "f\u05d6\u10f5\ua0fe\u0d09": 242, "f\u19a9\u0844\ua5fe\u0442\u0824\u1e03\u2c3e": [], "f\u1f35": [], "g": [2, 7, 8, 16, 23, 25, 28, 36, 38, 57, 59, 62, 65, 67, 69, 72, 75, 80, 87, 89, 91, 106, 107, 110, 111, 113, 117, 118, 119, 120, 121, 124, 144, 145, 147, 148, 151, 156, 164, 169, 185, 186, 196, 197, 198, 213, 214, 222, 223, 234, 236, 239, 242, 243, 244, 246, 253, 258, 273, 275, 282, 286, 287, 288, 289, 291, 294, 300, 301, 307, 310, 312, 313, 314, 315, 318, 320, 322, 326, 328, 329, 333, 334, 338, 343, 344, 347, 356], "g0": 338, "g1": [180, 318, 338], "g12345": 318, "g134": 318, "g14": 318, "g2": [180, 318, 322, 338], "g21": 338, "g25": 318, "g3": [57, 91, 186, 307, 318, 338], "g4": [186, 318], "g5": 318, "g_graph": 170, "ga2": 205, "gaac": [0, 46], "gaacluster": [0, 46, 49], "gaan": 348, "gag": 345, "gai": 307, "gai3i": 205, "gain": [225, 281, 284], "gaisha": 242, "gale": [179, 260], "gale_church": [0, 256], "galileo": 97, "galopava": 333, "gambl": 353, "game": [36, 346, 353], "gamma": [135, 138, 162, 167, 179, 192, 218, 269, 325, 334], "ganapathibhotla": [68, 90], "gang": 356, "gao": [96, 258, 262], "gap": [57, 58, 61, 63, 66, 68, 71, 87, 90, 91, 99, 244, 251, 262, 344], "garbag": [104, 218], "garner": 179, "garrett": [356, 358], "gascon": [57, 60], "gasp": 351, "gasta": 333, "gat": 333, "gate": 291, "gather": [70, 240, 243, 291, 344], "gaussian": [33, 46, 48], "gaussian_prior_sigma": 33, "gave": 258, "gawron": 356, "gaze": 306, "gb": 317, "gb2312": [57, 103], "gdfa": [0, 256], "gdmt": 331, "gdnt": 331, "ge": [192, 203, 345], "gee": 67, "geht": 272, "gelo": 333, "gem": [24, 339], "gender": [57, 100, 307, 314, 332], "gener": [0, 13, 14, 18, 23, 25, 26, 28, 33, 34, 35, 39, 41, 44, 50, 52, 104, 107, 108, 112, 116, 120, 124, 128, 129, 131, 135, 136, 137, 142, 144, 146, 150, 151, 155, 159, 160, 161, 162, 165, 167, 169, 170, 171, 173, 174, 177, 178, 179, 182, 186, 187, 191, 192, 214, 217, 218, 223, 227, 229, 231, 233, 234, 236, 240, 242, 243, 244, 245, 247, 252, 257, 262, 265, 266, 267, 268, 273, 275, 281, 282, 284, 286, 289, 291, 295, 300, 302, 303, 305, 307, 308, 309, 311, 313, 314, 319, 320, 322, 333, 342, 343, 351, 352, 356], "generate_chomski": [0, 153, 155], "generate_malt_command": [159, 169], "generate_repp_command": [236, 245], "genericcorenlppars": [0, 159, 163], "genericstanfordpars": [0, 159, 175], "genesereth": 127, "genesi": [109, 305, 307, 351], "genesis_": 351, "genesis_dir": 307, "genr": [307, 356], "gensim": 295, "gensim_fixt": 317, "genu": [333, 351], "genuin": 351, "genu\u00edna": 333, "geographi": [182, 300], "geoloc": 287, "geometr": [258, 271], "georg": [262, 271, 307], "georgetown": 358, "geraldin": 148, "gerefa": 109, "german": [57, 106, 133, 203, 209, 240, 252, 313, 321, 342, 344, 356], "germani": [57, 72, 317, 358], "germanstemm": [0, 199, 209], "germantest1": 321, "germantest2": 321, "germantest3": 321, "germantestsuit": 321, "gerund": [57, 89, 216, 223, 343], "get": [0, 38, 42, 57, 72, 75, 92, 100, 107, 114, 117, 119, 120, 131, 133, 135, 137, 142, 145, 149, 176, 191, 201, 202, 206, 216, 225, 229, 257, 258, 288, 289, 291, 307, 309, 314, 315, 317, 318, 322, 323, 325, 333, 334, 338, 339, 343, 344, 347, 351, 356], "get_a_job": [57, 72, 315], "get_all_symbol": [180, 181, 184, 190, 191], "get_booleanexpression_factori": [180, 184, 190, 191], "get_by_address": [159, 164], "get_cycle_path": [159, 164], "get_domain": [0, 123, 127], "get_glue_dict": [180, 187], "get_glueformula_factori": [180, 187], "get_glueformulas_from_semtype_entri": [180, 187], "get_header_field_list": [0, 285, 287], "get_label": [180, 187], "get_languag": [55, 57, 85], "get_macrolanguag": [55, 57, 85], "get_meaning_formula": [180, 187], "get_model_build": [123, 124], "get_neighborhood": [227, 233], "get_next_token_vari": [180, 181, 191], "get_param": [236, 243], "get_path": [55, 57, 80], "get_pos_tagg": [180, 187], "get_prov": [123, 124], "get_quantifiedexpression_factori": [180, 191], "get_read": [180, 187, 318], "get_ref": [180, 184, 312], "get_segm_id": [57, 80], "get_semtyp": [180, 187], "get_sent": [57, 80], "get_sent_beg": [57, 80], "get_sent_end": [57, 80], "get_unified_model_paramet": 161, "get_vers": [55, 57, 107, 351], "get_words_from_dictionari": [0, 143, 149], "getchildren": [0, 131], "getinfo": [0, 112], "getiter": [0, 131], "getop": [180, 184, 191], "getquantifi": [180, 191], "gettempdir": 176, "gf": [57, 72, 315], "gfl": [187, 318], "gfl_to_compil": [180, 187, 318], "gg1": 205, "gh": [113, 294, 344], "ghd": [0, 143, 151], "ght": 306, "gi": [33, 57, 60, 303], "gid": [92, 307], "gilbert": 198, "gile": 22, "gim": [239, 253], "gio": 333, "girl": [125, 180, 311, 312, 313, 319, 330, 338, 344], "girlfriend": 352, "gisencod": [0, 30, 33], "gist": 72, "github": [72, 209, 242, 252, 254, 259, 279, 283, 291, 293, 298, 306, 317, 325, 344, 351, 355, 356], "githubusercont": [111, 113, 294, 309], "give": [28, 35, 46, 49, 57, 72, 75, 77, 86, 88, 100, 107, 111, 113, 124, 135, 137, 163, 177, 181, 191, 198, 218, 229, 231, 252, 258, 275, 282, 288, 298, 299, 302, 305, 307, 309, 311, 312, 313, 314, 315, 322, 326, 343, 346, 347, 351, 352, 356], "given": [2, 10, 14, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41, 43, 44, 46, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 63, 65, 66, 68, 69, 70, 72, 78, 79, 80, 81, 82, 83, 86, 87, 89, 90, 91, 93, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 113, 117, 118, 119, 120, 121, 124, 125, 129, 131, 134, 135, 136, 137, 138, 142, 144, 146, 147, 148, 149, 150, 152, 162, 164, 165, 167, 171, 172, 173, 174, 178, 179, 182, 184, 188, 190, 191, 192, 196, 204, 211, 213, 214, 215, 218, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 243, 246, 248, 254, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 269, 273, 274, 275, 276, 279, 286, 288, 289, 291, 300, 305, 306, 307, 309, 311, 313, 315, 318, 322, 328, 331, 332, 333, 336, 345, 347, 351, 352, 353], "giz": 208, "giza": [257, 267], "gl": [169, 333], "gleu": [262, 356], "gleu_scor": [0, 256], "glg": 351, "glint": [57, 72], "glob": 322, "global": [57, 92, 107, 134, 197, 288, 291, 351], "glue": [0, 180, 190], "glue_dict": 189, "gluedict": [0, 180, 187, 318], "glueformula": [0, 180, 187, 190, 318], "glueformulafactori": 190, "gluesemant": 295, "gluesemantics_malt": 295, "gluesemantics_malt_fixt": 319, "gl\u00f3ria": 333, "gmt": 307, "gnd": [313, 341], "gni3": 205, "go": [57, 72, 163, 307, 314, 335, 355, 356], "goal": [70, 123, 124, 126, 127, 128, 129, 130, 275, 278, 322, 330], "goal_node_index": 164, "goalkeep": 36, "gobbl": 307, "god": [234, 275, 282, 307], "godwin": 336, "goe": [131, 334], "gold": [25, 26, 29, 43, 52, 89, 92, 196, 203, 214, 215, 270, 307, 335, 346], "gold_chunked_text": 302, "gold_data": [214, 216, 343], "gold_relation_list": [57, 65], "gold_sent": [166, 176, 217], "goldberg": 356, "goldstein": 144, "golf": [170, 310, 336], "gon": [239, 253], "gondola": 351, "gone": 311, "goo": 169, "good": [24, 43, 46, 57, 62, 163, 179, 217, 221, 225, 234, 236, 239, 240, 242, 243, 244, 247, 248, 249, 252, 253, 254, 265, 266, 267, 274, 307, 334, 339, 341, 343, 344, 348, 351, 354], "goodeater1": 323, "goodeater2": 323, "goodeater3": 323, "goodeater4": 323, "goodman": [136, 138, 140], "googl": [220, 262, 317, 351, 356], "googlecod": 356, "googlenew": 317, "gooo": 344, "gorg": 307, "gorki": 336, "goslin": 240, "gospel": 109, "got": [239, 253, 314, 347], "gothenburg": 358, "gouw": 262, "gov": [73, 148], "govern": [234, 307, 321, 334], "governar": 333, "governo": 333, "governor": [163, 305, 336], "gp": 345, "gr": 318, "gra": 333, "grabar": 344, "graber": [136, 356], "gradabl": 68, "gradient": 258, "gradual": 267, "graem": 356, "grai": 305, "grail": 307, "grain": [2, 57, 81, 89, 307, 335], "gram": [42, 57, 70, 179, 223, 258, 259, 262, 271, 291, 308], "gramfil": [125, 311, 338], "grammar": [0, 2, 7, 8, 12, 13, 14, 16, 20, 28, 96, 111, 113, 115, 123, 125, 159, 160, 162, 165, 167, 168, 170, 171, 172, 173, 174, 177, 178, 183, 188, 194, 255, 281, 284, 294, 295, 300, 307, 309, 311, 312, 314, 318, 322, 338, 341, 356], "grammar_filenam": 188, "grammar_url": 177, "grammartestsuit": 295, "grammat": [170, 177, 199, 321], "grand": [55, 57, 135, 137, 223, 294, 307, 333, 344], "grandmoth": [57, 72], "grandpar": [61, 80, 93, 108, 281, 284], "grang": 6, "grant": 356, "granular": [57, 86], "graph": [57, 107, 119, 164, 169, 170, 172, 176, 179, 187, 218, 279, 283, 291, 351, 356], "grapher": 119, "graphic": [2, 3, 7, 8, 57, 107, 113, 118, 119, 275, 282, 356], "graphviz": [57, 107, 164, 291], "grate": 356, "gra\u00e7a": 333, "great": [38, 134, 155, 234, 301, 339, 343, 344, 356], "great_pyrene": 351, "greater": [52, 57, 107, 117, 119, 135, 142, 148, 178, 179, 217, 238, 275, 282, 344], "greatest": [117, 179, 275, 279], "greatli": [198, 356], "greec": [182, 300], "greedi": 221, "greedili": 218, "greek": [57, 103, 106, 133], "green": [7, 67, 275, 279, 305], "greenland": 329, "greet": 307, "greg": [262, 356], "gregori": 109, "grei": [163, 175], "grenzpo": 203, "grenzpost": 203, "grenzposten": 203, "grid": [57, 69, 114, 117, 119, 158, 275, 279], "griffon": 351, "grito": 333, "groom": 307, "ground": [129, 218, 262, 351], "group": [25, 26, 28, 46, 49, 51, 57, 59, 72, 84, 86, 96, 105, 113, 118, 124, 149, 192, 221, 242, 266, 273, 275, 282, 301, 307, 315, 333, 335, 336, 343, 344, 356], "group_by_para": [57, 64, 66, 86, 99], "group_by_s": [57, 58, 64, 66, 71, 74, 86, 99], "groupbi": 334, "grow": 307, "grow_diag_final_and": [0, 256, 261], "gro\u00df": [263, 264, 265, 266, 267], "grsampson": 179, "grzegorz": 145, "gscl": 203, "gt": [192, 254, 334], "guarante": [26, 131, 162, 165, 174, 239, 258, 259, 262, 267, 268, 269, 271, 273, 307, 351], "guardar": 333, "guerrilla": 336, "guess": [25, 27, 29, 33, 57, 72, 221, 223, 290, 345], "guess_encod": [0, 291], "guess_languag": [30, 42], "guess_path": [0, 285, 290], "gui": [18, 307, 356], "guid": [182, 258, 259, 262, 269, 271, 273, 354, 355], "guidebook": [258, 259, 262, 269, 271], "guidelin": 96, "gujarati": [57, 103], "gulp": [57, 90, 307], "gumt": 331, "gust": 307, "gutenberg": [22, 30, 234, 306, 307], "gv": 318, "gwmt": 331, "gz": [175, 224, 309, 317], "gzip": [111, 197, 287, 289], "gzip_compress": [197, 287, 289], "gzipfil": 111, "gzipfilesystempathpoint": [0, 111], "g\u00eanesi": 333, "g\u074e": [], "h": [7, 8, 10, 57, 92, 100, 106, 109, 201, 202, 216, 218, 307, 310, 312, 314, 318, 326, 328, 329, 333, 334, 343, 344, 346, 347], "h0": 273, "h1": 273, "h2": 273, "h5": 273, "ha": [7, 8, 13, 28, 32, 33, 35, 36, 39, 43, 52, 57, 59, 62, 66, 72, 92, 104, 107, 108, 111, 113, 117, 118, 119, 120, 121, 125, 131, 134, 135, 136, 142, 145, 148, 159, 162, 170, 171, 173, 176, 178, 179, 180, 182, 188, 197, 206, 213, 215, 216, 218, 225, 233, 235, 239, 241, 243, 248, 252, 258, 262, 266, 267, 268, 269, 271, 272, 274, 275, 277, 279, 281, 282, 284, 286, 287, 289, 291, 294, 296, 299, 300, 306, 307, 309, 311, 313, 314, 315, 316, 322, 327, 333, 336, 339, 343, 344, 345, 346, 347, 349, 351, 354, 356], "haar": 348, "habitava": 333, "hack": [183, 326], "had": [36, 57, 68, 179, 305, 306, 307, 344, 348, 356], "hadn": 198, "hadnt": 198, "hagiwara": 356, "hail": 307, "hair": 305, "hajim": 273, "half": [148, 151, 155, 157], "hall": [170, 307], "hall_demo": [0, 159, 170], "hallow": 148, "halo": 261, "halt": 33, "halt_on_error": 113, "halv": 157, "ham": [151, 251, 263, 303, 305], "hamlet": 307, "hammer": 351, "hamza": 204, "hamzat": [201, 202], "han": 251, "hand": [8, 14, 30, 104, 119, 121, 162, 167, 171, 173, 178, 198, 215, 281, 284, 307, 313, 351, 354], "handl": [34, 44, 104, 111, 119, 125, 131, 134, 135, 144, 167, 180, 181, 183, 184, 190, 191, 197, 223, 233, 238, 247, 255, 285, 286, 289, 298, 307, 325, 326, 339, 344, 351, 356], "handle_cond": [180, 184], "handle_condit": [180, 181], "handle_dr": [180, 181, 184], "handle_elt": [57, 61, 79, 80, 93, 108], "handle_head": [57, 61], "handle_lambda": [180, 191], "handle_neg": [180, 191, 197], "handle_open": [180, 191], "handle_prop": [180, 184], "handle_qu": [180, 191], "handle_queri": [57, 80], "handle_ref": [180, 184], "handle_s": [57, 61, 93], "handle_vari": [180, 191], "handle_word": [57, 61, 93], "handler": [79, 80, 108, 120, 186, 289], "handsom": 339, "hang": 344, "hangul_jamo": [236, 254], "hangul_syl": [236, 254], "hank": 53, "hapax": [0, 179], "happen": [57, 63, 232, 307, 351], "happi": [95, 197, 340], "happy0": 95, "happyyi": 344, "harbin": 300, "hard": [94, 245, 307, 344], "hard1": 307, "hard_delimit": 260, "hardcopi": 356, "hardi": 356, "hardin": 148, "hardli": 198, "hardrock": [57, 107, 211, 351], "harmon": [15, 147, 150, 214], "harr": 192, "harri": 307, "harsh": 258, "has_kei": [0, 120, 314], "has_prior": [180, 191], "hash": [120, 179, 332], "hashabl": [121, 144, 223, 232], "hashtag": [57, 102, 198, 287], "hasn": 198, "hasnt": 198, "hat": [57, 72, 315], "hate": 339, "hau": [257, 263, 264, 265, 266, 267, 272, 346], "hav": 306, "have": [7, 24, 25, 28, 29, 33, 34, 36, 39, 46, 47, 49, 51, 52, 57, 63, 67, 68, 72, 83, 88, 90, 91, 93, 99, 100, 102, 104, 107, 111, 113, 117, 119, 120, 121, 129, 131, 134, 135, 136, 142, 144, 145, 147, 148, 149, 150, 156, 161, 162, 163, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 182, 184, 190, 191, 192, 196, 197, 204, 206, 209, 218, 229, 231, 233, 234, 236, 243, 248, 254, 258, 262, 265, 267, 268, 274, 275, 277, 281, 282, 284, 287, 288, 289, 293, 299, 300, 301, 306, 307, 308, 309, 311, 313, 314, 315, 322, 323, 325, 328, 330, 333, 335, 336, 342, 343, 344, 346, 347, 351, 353, 355, 356], "haven": [198, 303], "havent": 198, "hawaii": 97, "hc": 251, "he": [57, 67, 72, 206, 253, 258, 262, 272, 273, 305, 307, 311, 344], "head": [57, 69, 78, 107, 121, 164, 170, 172, 176, 266, 267, 268, 275, 278, 281, 282, 284, 307, 310, 322, 335, 336], "head_address": 164, "head_distortion_t": [266, 267], "head_id": [57, 107], "head_index": [159, 172], "head_len": [55, 57, 86], "head_vacancy_t": 267, "head_word": [57, 107], "header": [44, 55, 57, 80, 113, 162, 197, 289, 345], "header_mod": [55, 57, 80], "header_sect": [30, 44], "headlin": [73, 307], "headquart": 222, "headword": [57, 72], "health": [30, 303], "heap": 131, "heapsiz": 169, "hear": [258, 259, 262, 269, 271], "hearst": [151, 344], "heart": [192, 307], "heat": [57, 72, 315], "heathenish": 306, "heatherleaf": 358, "heating_instru": [57, 72, 315], "heaven": 307, "heavi": [57, 72, 307, 315], "heb": 351, "hebrew": [57, 103], "heed": [258, 259, 262, 269, 271, 273], "heidelberg": 140, "height": [0, 81, 89, 100, 114, 117, 119, 163, 275, 282, 335, 347], "held": [179, 353], "heldout": 179, "heldout_fdist": [0, 179], "heldoutprobdist": [0, 179, 334], "helf": 321, "hella": 198, "hellip": 192, "hello": [117, 131, 253, 307, 309, 314, 334, 344], "help": [0, 7, 8, 10, 24, 55, 57, 59, 72, 80, 107, 110, 113, 119, 131, 135, 234, 243, 253, 294, 307, 314, 333, 336, 338, 339, 343, 351, 356], "helper": [17, 43, 80, 120, 134, 136, 139, 268, 307, 332, 347], "helpfulli": 135, "helsinki": [57, 109], "helvetica": 117, "hen": [170, 172], "henc": [46, 50, 57, 72, 268, 281, 284, 311, 315, 329], "hench": 240, "heptateuch": 109, "her": [57, 72, 163, 305, 307, 315], "herbarium": 109, "herd": 307, "here": [57, 72, 100, 107, 112, 120, 131, 135, 144, 146, 148, 182, 203, 209, 221, 224, 235, 263, 267, 268, 273, 274, 300, 306, 307, 311, 314, 317, 322, 323, 325, 333, 336, 338, 343, 344, 346, 351, 356], "herm": 356, "hermia": 307, "hernia": 307, "hessian": 217, "het": 336, "heurist": [174, 243, 332], "hh": [67, 307], "hi": [57, 63, 109, 170, 206, 253, 307, 310, 339, 346, 351, 356], "hiccup": 307, "hidden": [114, 117, 119, 218], "hiddenmarkovmodeltagg": [0, 213, 218], "hiddenmarkovmodeltrain": [0, 213, 218, 334], "hide": [7, 8, 67, 114, 117, 119], "hide_column": [114, 117], "hideki": 273, "hideto": 262, "hierarch": [57, 105, 118, 119, 275, 281, 282, 284], "hierarchi": [57, 65, 119, 181, 248, 287], "higbe": 148, "high": [100, 104, 113, 201, 213, 216, 229, 240, 245, 258, 288, 305, 307, 314, 343], "highe": 148, "higher": [28, 33, 135, 137, 148, 162, 165, 167, 171, 173, 174, 177, 178, 258, 268, 274, 326, 353], "highest": [33, 35, 135, 170, 216, 218, 271, 292, 343, 353], "highlevel": 269, "highli": [198, 305, 322], "highlight": [119, 275, 279, 282], "highlightthick": 117, "higve": 148, "hike": 307, "hilfst": 321, "hilft": 321, "hill": [25, 46, 50, 265, 266, 267, 268, 332], "hillclimb": [256, 267, 268], "him": [57, 63, 275, 282, 307, 344], "himmal": 306, "hindi": [74, 356], "hing": 347, "hint": 356, "hip": 333, "hirao": 273, "hire": [57, 72, 315], "histogram": 274, "histor": 145, "histori": [109, 173, 174, 223, 258, 262, 267, 273], "hit": [57, 63, 273, 307, 333, 351], "hllw": 148, "hlt": [240, 248, 271, 346], "hlt94": 88, "hmm": [0, 179, 213, 356], "hobbi": [307, 334], "hoc": [239, 253, 344], "hockenmai": 299, "hof": 336, "hoi": 307, "hold": [111, 117, 124, 167, 176, 188, 229, 232, 242, 251, 268, 307, 315, 322, 351], "holder": [113, 322], "hole": [0, 180, 356], "hole_read": [0, 180, 188], "holesemant": [0, 180, 188], "holi": 109, "holidai": 344, "holist": 91, "home": [57, 80, 111, 113, 169, 245, 290, 353, 356], "homem": 333, "homepag": [119, 125, 206, 291], "homili": 109, "hon": 218, "honest": 291, "honey_bunni": 338, "honnib": 221, "honoriu": 109, "hood": [57, 67, 72], "hook": [25, 184, 190, 191, 356], "hope": [57, 65, 315], "hor": [241, 344], "horizont": [118, 119, 275, 279, 281, 282, 284], "horribl": 339, "horzmarkov": [275, 281, 282, 349], "hosam": 356, "host": [22, 111, 206, 356], "hour": [57, 72, 163, 306, 315], "hous": [57, 72, 257, 263, 264, 265, 266, 267, 272, 301, 336, 346, 353], "how": [14, 24, 28, 30, 33, 57, 97, 104, 107, 113, 119, 120, 121, 135, 136, 138, 147, 157, 162, 164, 171, 178, 179, 229, 231, 234, 243, 247, 259, 263, 264, 265, 266, 267, 275, 282, 289, 292, 307, 309, 311, 313, 314, 315, 322, 333, 336, 344, 351, 355], "howev": [33, 36, 57, 72, 102, 104, 107, 113, 117, 118, 120, 121, 135, 148, 159, 167, 204, 206, 216, 225, 235, 243, 267, 307, 309, 311, 313, 314, 315, 319, 322, 333, 335, 339, 343, 351, 352], "howl": 307, "howto": [288, 307, 333, 356], "hr": 318, "href": [57, 78, 307], "hrv": 351, "hsi3": 205, "hsieh": 96, "hsiug5ct": 205, "ht": [100, 205, 219, 307], "htm": [73, 96, 109], "html": [42, 57, 61, 70, 78, 80, 94, 96, 105, 106, 107, 112, 119, 125, 151, 164, 169, 179, 182, 209, 275, 279, 282, 286, 287, 291, 294, 300, 307, 355, 356], "http": [0, 10, 22, 38, 42, 53, 55, 57, 61, 63, 65, 68, 70, 72, 73, 75, 78, 79, 80, 83, 85, 88, 90, 91, 94, 95, 96, 105, 106, 107, 109, 111, 112, 113, 117, 119, 125, 133, 140, 145, 148, 151, 163, 164, 169, 179, 182, 203, 206, 209, 215, 217, 220, 221, 224, 225, 242, 245, 252, 253, 254, 258, 259, 260, 262, 269, 271, 273, 275, 279, 281, 282, 283, 284, 286, 287, 288, 289, 291, 292, 294, 296, 298, 299, 300, 301, 306, 307, 309, 317, 322, 325, 329, 333, 344, 351, 354, 355, 356], "hu": [57, 83, 90, 91, 106, 197, 356], "huang": [96, 218], "huge": [198, 274, 336], "hugh": 262, "hui": 344, "hum": 97, "human": [88, 135, 137, 209, 229, 230, 240, 262, 269, 311, 315, 333, 346, 354, 356], "humana": 333, "humanli": 254, "humbl": 342, "humor": [307, 334, 339], "hund": [313, 321, 351], "hundr": [305, 336, 351], "hung": 336, "hungarian": [57, 106, 209, 307, 342], "hungarian_magyar": [57, 103], "hungarianstemm": [0, 199, 209], "hunpo": [0, 213], "hunpostagg": [0, 213, 219], "hunt": 307, "hunting_dog": 351, "hurt": [67, 229, 307], "husband": 307, "husk": 205, "huston": 356, "hut": 67, "hutto": 198, "hv": 318, "hvd": 344, "hyderabad": [74, 300], "hyp": [92, 107, 151, 259, 262, 271, 273, 307], "hyp1": [258, 259, 262, 273], "hyp2": [258, 259, 262, 273], "hyp_extra": [30, 37], "hyp_len": [258, 271], "hyper": [243, 351], "hypergraph": [279, 283], "hypernym": [57, 107, 291, 347, 351], "hypernym_dist": [57, 107], "hypernym_path": [57, 107, 351], "hyperparamet": 273, "hyperspher": 46, "hyphen": [57, 72, 315], "hypnoym": [57, 107, 351], "hypo": 351, "hyponym": [107, 351], "hypothes": [2, 14, 162, 165, 171, 258, 259, 262, 271, 273, 274], "hypothesi": [2, 37, 92, 146, 162, 165, 258, 259, 262, 269, 270, 271, 273, 274, 307], "hypothesis1": [258, 269, 271], "hypothesis2": [258, 269, 271], "hypothet": 151, "hz": [57, 103], "h\u00e1": 333, "i": [0, 2, 7, 8, 10, 13, 14, 15, 16, 20, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 46, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 158, 159, 160, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 229, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358], "i1": [118, 275, 282], "i1i": 205, "i2": [118, 275, 282], "i3": 318, "i4": 318, "i6": 140, "iN": [275, 282], "i_peg": 268, "ia": 333, "iacut": 192, "iad": 73, "ial": 333, "ibm": [263, 264, 265, 266, 267, 268, 356], "ibm1": [0, 256, 272], "ibm2": [0, 256], "ibm3": [0, 256], "ibm4": [0, 256], "ibm5": [0, 256], "ibm_model": [0, 256, 266], "ibmmodel": [0, 256, 263, 264, 265, 266, 267, 268], "ibmmodel1": [0, 256, 263, 268, 346], "ibmmodel2": [0, 256, 264, 268], "ibmmodel3": [0, 256, 265, 268], "ibmmodel4": [0, 256, 266, 267, 268], "ibmmodel5": [0, 256, 267, 268], "ic": [55, 57, 107, 197, 292, 351, 356], "icassp": 140, "iceland": [57, 106], "icfil": [57, 107], "ich": [265, 266, 267, 321, 344], "icirc": 192, "icl": 273, "icsi": [57, 72], "ictaac": 202, "icwsm": 198, "id": [0, 12, 13, 33, 57, 63, 68, 69, 72, 83, 84, 90, 91, 92, 93, 98, 100, 105, 107, 109, 113, 120, 125, 216, 232, 266, 267, 269, 271, 275, 279, 286, 287, 288, 289, 292, 301, 307, 314, 315, 326, 343, 347], "id_str": 287, "iddo": [187, 190], "idea": [43, 119, 125, 127, 136, 138, 213, 272, 315], "ideal": [136, 307], "idealab": 336, "ident": [57, 86, 107, 135, 138, 148, 152, 172, 182, 218, 300, 305, 335, 347, 351], "identif": [42, 70, 170, 356], "identifi": [13, 25, 26, 28, 32, 42, 47, 49, 51, 53, 55, 57, 59, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 75, 78, 80, 81, 82, 84, 85, 86, 87, 89, 92, 93, 94, 98, 99, 100, 105, 107, 108, 109, 111, 113, 117, 120, 164, 170, 181, 187, 192, 198, 207, 214, 235, 237, 243, 244, 247, 258, 272, 275, 279, 291, 307, 311, 314, 335, 336, 351, 354], "ideolog": 351, "idf": [0, 38, 234], "idiomat": [57, 72, 315], "idl": [18, 204, 291], "ids_f": 289, "ie": [57, 73, 82, 86, 92, 108, 129, 191, 225, 275, 281, 282, 284], "ie_er_99": 73, "ieee": 218, "ieer": [29, 55, 57, 192, 307, 336], "ieer_headlin": [0, 180, 192], "ieercorpusread": [55, 57, 73], "ieerdocu": [55, 57, 73, 307], "ieerstr2tre": [0, 25, 29], "iesha": [0, 18], "iesha_chat": [0, 18, 20], "iexcl": 192, "iff": [33, 34, 121, 123, 129, 130, 162, 167, 180, 184, 188, 191, 232], "iff_list": [180, 191], "iffexpress": [0, 180, 188, 191], "ight": 347, "ignor": [25, 28, 33, 35, 55, 57, 61, 69, 72, 74, 82, 83, 86, 91, 100, 106, 108, 111, 116, 119, 120, 135, 166, 171, 177, 191, 219, 234, 255, 259, 263, 267, 305, 314, 345, 351], "ignore_abbrev_penalti": [236, 243], "ignore_cas": 116, "ignore_lines_startswith": [57, 106], "ignore_stopword": [209, 342], "ignore_whitespac": 259, "ignorecas": [239, 253], "ignored_word": 305, "ignorekei": [57, 72], "ignorereadmecorpusview": [55, 57, 83], "igrav": 192, "ih": 67, "ih0": 307, "ih1": 307, "ihr": 321, "ii": [33, 53, 57, 67, 72, 96, 109, 261, 272, 303, 351, 356], "iii": [53, 109, 272], "iiit": 74, "iit": 74, "iixi": 53, "ij": [218, 220], "ijcnlp": 96, "ilia": 358, "iliakur": 358, "ill": 246, "illeg": [231, 302, 312, 326, 344], "illegaltypeexcept": [0, 180, 191], "illinoi": [68, 83, 91], "illustr": [57, 72, 125, 157, 170, 307, 315, 336], "im": [272, 307], "imag": [55, 57, 78, 107, 164, 192, 291, 307], "image_impress": 307, "image_read": [57, 78], "immedi": [14, 28, 121, 131, 162], "immut": [0, 31, 32, 33, 35, 43, 120, 121, 275, 347], "immutablemultiparentedtre": [0, 275, 276], "immutableparentedtre": [0, 275, 276], "immutableprobabilisticmixin": [0, 121, 179], "immutableprobabilistictre": [0, 275, 276, 347], "immutabletre": [0, 275, 276, 347], "imp": [119, 123, 130, 180, 188, 190, 191], "imp_list": [180, 191], "impact": [134, 271], "impass\u00edvel": 333, "imper": 202, "impexpress": [0, 180, 188, 190, 191, 318], "implement": [0, 13, 14, 15, 25, 28, 33, 34, 38, 42, 43, 52, 57, 59, 72, 76, 79, 86, 107, 119, 120, 121, 124, 132, 135, 136, 138, 144, 145, 146, 148, 151, 159, 162, 165, 167, 170, 171, 172, 173, 174, 176, 179, 188, 196, 201, 202, 203, 206, 215, 218, 221, 225, 231, 236, 240, 248, 253, 258, 259, 262, 263, 264, 265, 268, 271, 273, 274, 275, 277, 286, 292, 296, 303, 313, 314, 317, 322, 323, 346, 347, 351, 356], "impli": [184, 191, 269, 312], "implic": [190, 191, 326], "implicitli": [57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 82, 84, 85, 93, 98, 105, 107, 108, 109, 119, 121, 307], "import": [25, 28, 30, 34, 36, 38, 39, 46, 52, 55, 57, 60, 63, 68, 72, 76, 80, 83, 90, 91, 95, 102, 106, 107, 119, 120, 131, 133, 134, 135, 136, 137, 142, 144, 147, 148, 163, 166, 169, 170, 172, 175, 176, 177, 179, 180, 186, 196, 202, 203, 205, 207, 208, 209, 211, 213, 214, 216, 217, 219, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 253, 254, 257, 259, 270, 274, 275, 279, 282, 283, 284, 291, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356], "import_from_stdlib": [0, 131], "importantli": [248, 258], "importorskip": 328, "impos": [115, 120, 121, 307, 314], "imposing_oblig": [57, 72], "imposs": [25, 314, 347], "impound": 351, "imprensa": 333, "improb": 326, "improp": 28, "improv": [33, 112, 151, 202, 203, 204, 206, 217, 236, 239, 264, 265, 266, 281, 284, 309, 333, 343, 344, 356], "imprtre": 347, "imptre": 347, "in_chunk_pattern": [25, 28], "in_demo": [0, 180, 192], "in_idl": [0, 291], "in_region_domain": 351, "in_spite_of": 241, "in_strip_pattern": [25, 28, 302], "in_topic_domain": 351, "in_usage_domain": 351, "inadvert": 334, "inaugur": [307, 356], "inaugura": 307, "inc": [0, 242, 271, 354, 356], "incept": 356, "incl": 356, "includ": [25, 28, 29, 30, 33, 36, 38, 46, 50, 53, 57, 59, 61, 72, 75, 79, 80, 81, 89, 93, 99, 102, 107, 108, 109, 112, 117, 119, 120, 121, 131, 135, 137, 172, 176, 179, 191, 192, 206, 218, 234, 240, 243, 246, 258, 264, 265, 266, 267, 268, 271, 272, 274, 275, 281, 282, 284, 289, 307, 314, 315, 317, 322, 325, 333, 335, 336, 344, 346, 347, 351, 355, 356], "include_abbrev_colloc": [236, 243], "include_all_colloc": [236, 243], "include_encod": [57, 59], "include_fileid": [57, 59], "include_nt": 198, "include_rt": 289, "include_semant": [16, 299], "include_tre": 69, "inclus": [61, 80, 93, 108, 229, 231], "incom": [170, 344], "incompat": [117, 120, 356], "incompet": 351, "incomplet": [104, 162, 165, 167, 313], "inconsist": [120, 311, 314, 322, 356], "inconsistenttypehierarchyexcept": [0, 180, 191, 326], "incorpor": [25, 28, 57, 72, 182, 300, 356], "incorporar": 333, "incorporatedf": [57, 72], "incorrect": [25, 28, 29, 39, 104, 147, 216, 222, 233, 275, 277, 291, 302, 343, 347, 351], "incorrectli": 203, "incr_download": [0, 113], "increas": [46, 48, 104, 119, 131, 135, 138, 152, 162, 167, 179, 198, 204, 225, 261, 268, 273, 274, 305, 307, 322, 351], "incredibli": [198, 339], "increment": [119, 125, 131, 162, 165, 178, 179, 229, 243, 356], "incremental_stat": 229, "incrementalbottomupchartpars": [0, 159, 165, 332], "incrementalbottomupleftcornerchartpars": [0, 159, 165, 332], "incrementalchart": [0, 159, 165], "incrementalchartpars": [0, 159, 165], "incrementalleftcornerchartpars": [0, 159, 165, 332], "incrementaltopdownchartpars": [0, 159, 165, 332], "incub": 336, "ind": [326, 351], "inde": [306, 314], "indel": 145, "indent": [32, 57, 102, 105, 129, 130, 189, 275, 282, 291], "independ": [35, 57, 105, 118, 146, 150, 233, 242, 258, 266, 307, 356], "indetermin": 334, "index": [0, 14, 30, 33, 42, 47, 48, 49, 50, 51, 52, 57, 65, 69, 70, 72, 81, 89, 104, 107, 113, 114, 117, 118, 119, 120, 131, 135, 137, 146, 149, 162, 163, 164, 165, 167, 170, 171, 172, 178, 179, 181, 182, 186, 187, 191, 201, 215, 217, 223, 231, 232, 233, 234, 251, 260, 263, 264, 268, 272, 273, 275, 276, 277, 282, 291, 307, 310, 313, 314, 331, 333, 346, 347], "index_count": 190, "index_sens": [55, 57, 107], "index_timeout": [0, 113], "index_to_kei": 317, "indexerror": [120, 275, 276, 282, 343, 346, 347], "india": [74, 300, 351], "indian": [55, 57, 100, 234, 307, 356], "indiancorpusread": [55, 57, 74], "indiancorpusview": [55, 57, 74], "indic": [14, 25, 28, 29, 30, 37, 44, 51, 52, 55, 57, 61, 62, 69, 75, 79, 80, 81, 89, 93, 100, 104, 108, 113, 117, 118, 119, 120, 121, 129, 131, 135, 144, 146, 150, 151, 162, 173, 181, 182, 186, 187, 188, 190, 191, 214, 218, 222, 223, 225, 230, 232, 233, 234, 238, 243, 247, 257, 263, 264, 272, 273, 275, 277, 279, 286, 300, 305, 307, 311, 314, 322, 345, 346, 356], "indirect": 307, "individu": [0, 28, 32, 52, 57, 59, 78, 102, 107, 113, 117, 144, 179, 180, 181, 186, 191, 205, 215, 218, 223, 229, 247, 258, 273, 275, 282, 294, 307, 308, 318, 322, 326, 338], "individualvariableexpress": [0, 180, 184, 186, 191, 313], "indp": 333, "induc": [121, 218, 281, 284, 332], "induce_pcfg": [0, 121, 332], "induct": 356, "industri": 354, "ineffici": 215, "inequ": 326, "inf": [125, 291, 325, 333, 348], "infam": [259, 262], "infer": [0, 57, 72, 180, 184, 188, 191, 295, 311, 312, 326, 330, 337, 356, 358], "infil": 287, "infin": 192, "infinit": [57, 89, 307, 316, 323, 325, 351], "infix": [201, 202], "infl": 335, "inflat": 258, "inflect": [57, 89, 335, 351], "influenc": [135, 142, 274], "info": [0, 57, 65, 72, 100, 108, 112, 113, 117, 279, 283, 315], "info_or_id": 113, "inform": [12, 13, 28, 29, 30, 33, 35, 37, 46, 55, 57, 58, 63, 64, 66, 68, 71, 72, 73, 74, 75, 81, 84, 86, 88, 89, 90, 94, 96, 99, 100, 104, 107, 113, 119, 120, 125, 127, 134, 135, 146, 151, 156, 159, 161, 162, 165, 167, 171, 173, 176, 177, 179, 192, 201, 202, 204, 209, 213, 214, 215, 218, 223, 225, 236, 266, 268, 274, 275, 281, 282, 284, 289, 291, 293, 301, 303, 305, 307, 308, 313, 314, 315, 322, 328, 333, 335, 351, 356], "informatik": 140, "information_cont": [55, 57, 107, 351, 356], "informchk": [125, 311], "infrequ": 305, "ing": [57, 107, 207, 216, 223, 298, 306, 336, 343], "inher": 313, "inherit": [57, 72, 87, 131, 135, 138, 146, 179, 307, 315], "inhibit": 351, "ini": [57, 72], "init_func": 54, "init_vocab": [256, 268], "initi": [7, 8, 13, 14, 23, 25, 28, 46, 50, 57, 59, 62, 76, 77, 78, 83, 86, 87, 99, 104, 107, 111, 117, 119, 120, 125, 129, 131, 135, 137, 138, 144, 156, 159, 162, 165, 167, 170, 171, 173, 174, 176, 179, 180, 190, 204, 215, 216, 217, 218, 225, 234, 240, 241, 243, 250, 258, 262, 263, 264, 265, 267, 268, 288, 289, 291, 307, 308, 322, 334, 343, 347], "initial_column": [0, 113], "initial_mean": [48, 50], "initial_tagg": [215, 216], "initial_valu": 131, "initialerror": 216, "initialis": [46, 51, 57, 102, 235], "initialize_edge_scor": [159, 170], "initialize_label": [180, 187, 190], "inner": [57, 77, 170], "innermostfunct": [0, 12, 15], "inp": 309, "input": [16, 23, 25, 27, 28, 29, 30, 34, 35, 38, 39, 41, 44, 57, 58, 59, 66, 71, 74, 75, 76, 86, 92, 94, 104, 107, 111, 112, 117, 121, 124, 125, 126, 128, 129, 130, 131, 135, 142, 161, 163, 164, 169, 170, 172, 175, 176, 177, 181, 182, 186, 191, 192, 194, 197, 198, 201, 202, 203, 211, 216, 219, 222, 223, 224, 225, 238, 239, 242, 245, 251, 252, 254, 255, 259, 289, 300, 302, 307, 312, 313, 322, 326, 328, 338, 344, 351, 356], "input_feat": 33, "input_fil": 176, "input_file_path": 250, "input_str": 254, "input_word": 198, "inputfilenam": [169, 245], "inquir": 307, "inquisit": 274, "inrang": [180, 191], "ins_cost": 151, "insanomania": 344, "insensit": [33, 57, 72, 203, 234], "insert": [0, 52, 57, 75, 114, 117, 119, 120, 148, 151, 159, 162, 167, 171, 181, 241, 347], "insert_child": [114, 118, 119], "insert_with_backpoint": [159, 162], "insid": [57, 72, 111, 163, 171, 175, 183, 238, 246, 281, 284, 314, 344, 353], "insidechartpars": [0, 159, 171, 332], "insight": [163, 343], "inspect": [131, 182, 198, 300, 311, 313, 322], "inspir": [192, 252], "inst": [307, 335], "inst_var": [159, 167], "instal": [0, 55, 110, 111, 113, 179, 181, 234, 236, 287, 288, 307, 308, 341, 356], "install3": 355, "instanc": [44, 53, 55, 57, 59, 63, 69, 72, 78, 81, 85, 89, 91, 94, 120, 121, 127, 129, 132, 134, 135, 136, 142, 161, 162, 163, 169, 170, 175, 179, 184, 186, 191, 194, 196, 197, 205, 216, 218, 223, 225, 229, 231, 232, 233, 234, 235, 238, 243, 257, 258, 260, 273, 286, 301, 314, 322, 328, 335, 338, 339, 342, 344, 347, 351], "instance_hypernym": 107, "instance_hyponym": 107, "instant": [6, 333], "instanti": [57, 61, 72, 121, 135, 136, 138, 167, 184, 191, 209, 221, 238, 243, 302, 313, 351], "instantiate_edg": [159, 167], "instantiatevarschart": [0, 159, 167, 313], "instead": [25, 26, 33, 43, 52, 57, 59, 61, 63, 65, 75, 87, 111, 131, 135, 136, 138, 144, 162, 179, 206, 214, 215, 223, 225, 234, 242, 244, 247, 251, 258, 259, 262, 267, 269, 273, 275, 278, 279, 282, 283, 284, 301, 307, 309, 314, 343, 347, 348, 351, 356], "institut": [96, 109, 204, 336, 353], "instr_commun": 307, "instruct": [110, 111, 119, 288, 322, 333, 355, 356], "instrument": [57, 72, 305, 315, 351], "insur": [258, 259, 262, 269, 271], "insurg": 291, "int": [14, 28, 31, 33, 48, 49, 50, 51, 57, 65, 72, 84, 91, 92, 107, 111, 117, 119, 126, 128, 131, 135, 136, 137, 142, 147, 148, 151, 156, 158, 162, 164, 165, 167, 171, 172, 173, 174, 177, 178, 179, 181, 182, 186, 187, 190, 192, 207, 214, 216, 218, 223, 225, 229, 231, 232, 233, 234, 237, 239, 243, 244, 247, 248, 251, 253, 254, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 282, 286, 289, 291, 301, 307, 314, 348, 350], "intact": 205, "integ": [33, 68, 92, 104, 117, 120, 131, 144, 170, 179, 186, 197, 236, 237, 244, 247, 251, 260, 266, 267, 275, 279, 289, 291, 307, 311, 313, 314, 329], "integr": [57, 72, 356], "integratedpro": [57, 90, 307], "intellig": [68, 91, 127, 201, 339], "inten": 333, "intend": [30, 57, 65, 119, 125, 181, 182, 184, 190, 191, 234, 286, 307, 309, 311, 314, 333, 338, 343], "intens": [36, 198, 339], "intent": [20, 311], "intentionally_affect": 315, "intentionally_cr": [57, 72], "inter": [144, 356], "interact": [1, 25, 48, 49, 113, 118, 119, 131, 185, 234, 307, 313, 322], "intercept": 179, "interchang": 329, "interesant": 298, "interest": [57, 72, 94, 107, 156, 198, 229, 257, 258, 262, 273, 279, 283, 298, 307, 311, 313, 339, 346, 356], "interest_4": 307, "interest_5": 307, "interest_6": 307, "interfac": [10, 13, 25, 26, 30, 31, 33, 34, 39, 46, 47, 57, 70, 95, 96, 105, 107, 108, 113, 123, 124, 131, 135, 136, 142, 154, 159, 161, 162, 163, 167, 169, 170, 171, 175, 179, 181, 191, 199, 200, 213, 214, 215, 219, 220, 224, 232, 233, 234, 237, 247, 249, 250, 256, 274, 286, 302, 303, 305, 307, 323, 354, 356], "interior": 119, "interj": 297, "interject": [57, 72, 315], "interleav": 307, "intermedi": 323, "interment": 329, "intern": [0, 28, 38, 39, 57, 68, 70, 72, 83, 90, 91, 104, 120, 159, 171, 191, 192, 198, 202, 243, 263, 264, 292, 295, 307, 308, 309, 315, 333], "internal_punctu": [236, 243], "international_regex": [236, 242], "international_token": [236, 242, 356], "internet": 242, "interpformat": 126, "interpol": [135, 136, 138, 140, 225, 258], "interpolatedlanguagemodel": [0, 135, 138], "interpret": [33, 121, 180, 181, 186, 294, 311, 322, 333, 338, 355, 356], "interpret_multi": [180, 181], "interpret_multi_s": [180, 181], "interpret_s": [0, 180, 181, 194, 338], "interrog": [182, 300], "intersect": [119, 150, 227, 231, 233, 261, 314, 317, 336], "interv": [144, 148, 231], "interval_dist": [0, 143, 148], "interven": [192, 275, 282, 305], "intj": [57, 72, 315], "intran": 313, "intransit": [307, 313], "intransvsg": 299, "intrins": [57, 107], "intro": [57, 72], "introduc": [28, 33, 39, 121, 182, 184, 191, 251, 264, 267, 281, 284, 300, 311, 354], "introduct": [109, 148, 354], "introductori": 333, "intuit": 273, "inv": [301, 313], "invalid": [28, 131, 179, 302, 311, 323, 334, 347], "invari": 218, "inventor": [88, 206], "inventori": 326, "invers": [121, 133, 217], "inverse_dict": [0, 133], "invert": [256, 257, 291, 344, 346], "invert_dict": [0, 291, 350], "invert_graph": [0, 291], "invest": 253, "investig": [223, 301, 307, 311, 343, 344], "invoc": 124, "invok": [57, 102, 124, 209, 219, 223, 225, 239, 311], "involv": [38, 43, 46, 51, 57, 72, 148, 231, 235, 307, 315, 358], "io": [307, 309, 317], "ioannidi": 291, "iob": [27, 29, 57, 69], "iob_sent": [55, 57, 69], "iob_word": [55, 57, 69], "ioerror": [111, 307], "iona": 148, "iota": [180, 184, 191, 192, 356], "iota_list": [180, 191], "iotaexpress": [0, 180, 191], "iowa": 148, "ipa": [240, 248], "ipi": [57, 75], "ipipan": [55, 57], "ipipancorpusread": [55, 57, 75], "ipipancorpusview": [55, 57, 75], "ipod": 91, "iptre": 347, "iquest": 192, "ir": [318, 333], "iraq": 163, "iraqi": 163, "iraqu": 333, "irlandes": 333, "irlandesa": 333, "iron": [57, 72, 315], "irregular": [199, 223, 344], "is_alpha": [236, 243], "is_atom": [123, 130, 180, 191], "is_backward": [12, 13], "is_binaris": [0, 121], "is_cap_diff": 198, "is_chomsky_normal_form": [0, 121], "is_cjk": [0, 236, 254], "is_complet": [12, 14, 159, 162, 165], "is_defin": [199, 209], "is_ellipsi": [236, 243], "is_eventvar": [0, 180, 191], "is_flexible_chomsky_normal_form": [0, 121], "is_forward": [12, 13], "is_funct": [12, 13], "is_funcvar": [0, 180, 191], "is_head_word": [256, 268], "is_incomplet": [12, 14, 159, 162, 165], "is_indvar": [0, 180, 191], "is_initi": [236, 243], "is_instal": [0, 113], "is_leftcorn": [0, 121], "is_lex": [0, 121], "is_nod": [180, 188], "is_non_punct": [236, 243], "is_nonempti": [0, 121], "is_nonlex": [0, 121], "is_noun": [199, 209], "is_numb": [236, 243], "is_ord": [57, 78, 307], "is_primit": [12, 13], "is_pronoun_funct": [180, 184], "is_regex": [131, 163], "is_rel": [0, 180, 186, 338], "is_stal": [0, 113], "is_tautologi": [123, 129], "is_unseen": 33, "is_var": [12, 13], "is_vari": [12, 13], "is_verb": [199, 209], "is_writ": [0, 131], "isalnum": [57, 106], "isalpha": [57, 106, 305], "isawjohn": 332, "isbndb": 356, "isfil": 309, "isin": 192, "isinst": [57, 72, 314, 338, 347, 350], "isl": 351, "islic": [332, 351], "islow": [57, 106], "isn": [57, 106, 172, 198, 213, 253, 308, 339, 343, 344, 347], "isnt": 198, "iso": [42, 57, 62, 70, 84, 103, 107, 111, 134, 192, 213, 219, 308, 333, 351], "iso2022_jp": [57, 103], "iso639": [57, 85, 133, 356], "iso639_typ": [57, 85], "iso639retir": 133, "iso63_cod": [57, 85], "iso_to_crubadan": [55, 57, 70, 308], "isolated_plac": [57, 72, 315], "isort": [0, 57, 213, 227, 256, 356], "isozaki": 273, "isra": 336, "isri": [0, 199, 356], "isristemm": [0, 199, 204], "issc": [57, 106], "isso": [57, 106], "issu": [0, 57, 72, 242, 281, 284, 291, 307, 322, 327, 334, 344, 347, 351, 356, 358], "issubset": 257, "issubsetof": [123, 129], "issue9025": 329, "issuecom": 325, "issuperset": [227, 231], "ist": [148, 257, 263, 264, 265, 266, 267], "istanc": [57, 63], "isti": 95, "isupp": [57, 106], "isvari": [180, 184, 191], "ita": 351, "ita_iwn": 351, "itali": 336, "italian": [57, 106, 209, 245, 342], "italianstemm": [0, 199, 209], "item": [0, 46, 51, 52, 55, 57, 61, 72, 78, 79, 80, 91, 93, 100, 104, 108, 109, 113, 119, 120, 121, 135, 136, 137, 140, 142, 144, 148, 151, 156, 157, 179, 180, 187, 189, 192, 197, 198, 275, 276, 286, 289, 291, 305, 307, 309, 310, 313, 314, 326, 333, 334, 336, 338, 339, 342, 344, 347], "item1": 305, "item2": 305, "item3": 305, "item4": 305, "item5": 305, "itemcget": [114, 117], "itemconfig": [114, 117], "itemconfigur": [114, 117], "itemgett": [57, 72, 315], "itemid": 100, "iter": [14, 33, 36, 38, 43, 46, 49, 51, 52, 57, 100, 104, 107, 116, 120, 132, 135, 136, 137, 139, 142, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 183, 196, 217, 218, 221, 222, 232, 234, 235, 237, 239, 243, 244, 245, 246, 247, 253, 254, 255, 260, 263, 264, 265, 266, 267, 268, 269, 275, 276, 289, 291, 292, 333, 345, 351], "iterate_from": [0, 52, 57, 104, 307], "iteredg": [159, 162, 165], "itertool": [332, 334, 351], "iti": 348, "itj": 297, "itl": 73, "itman": 148, "its": [7, 8, 14, 25, 28, 30, 33, 39, 42, 52, 57, 59, 65, 68, 70, 72, 81, 84, 89, 91, 104, 107, 110, 111, 112, 113, 117, 118, 119, 120, 121, 131, 135, 136, 138, 142, 148, 157, 162, 163, 164, 167, 169, 170, 171, 172, 173, 174, 179, 182, 186, 190, 191, 192, 213, 214, 218, 223, 231, 232, 233, 243, 244, 245, 246, 247, 248, 251, 255, 257, 262, 263, 264, 265, 266, 267, 268, 272, 273, 274, 275, 277, 281, 282, 284, 291, 307, 308, 309, 313, 314, 322, 333, 335, 336, 343, 344, 345, 347, 349, 351, 353, 356], "itself": [25, 28, 43, 52, 57, 72, 107, 108, 110, 113, 117, 120, 121, 134, 135, 136, 137, 144, 177, 251, 275, 276, 281, 282, 284, 307, 314, 323, 336, 343, 351], "iuml": 192, "iv": [300, 313, 318, 338], "ivan": 344, "ivdict2tab": [0, 212], "iwslt": 261, "ix": 307, "ixi": 53, "ixii": 53, "ixxi": 53, "iy1": 307, "iz_th": 328, "i\u0148\u19c1\ua2fd\ua79f\ua334\u056d\uab36\u3092\u015f\u126a": [], "i\u0307": 242, "i\u0307\u0dae\uab30": [], "i\u0307\u1ed5": [], "i\u1436\ua759": [], "i\ufb9a\u1d8c": 242, "j": [42, 57, 106, 117, 125, 127, 151, 162, 165, 167, 198, 204, 205, 214, 218, 242, 257, 260, 263, 264, 265, 266, 267, 268, 272, 299, 307, 311, 315, 329, 332, 333, 334, 343, 347], "j07": 299, "j1": 205, "j82": [182, 300], "j93": 260, "j_caesar": 307, "j_peg": [267, 268], "ja": [263, 264, 265, 266, 267], "jaccard": [143, 146, 328], "jaccard_dist": [0, 143, 148, 328], "jack": 332, "jacob": 356, "jai": 165, "jakarta": 300, "jakobsen": 356, "jal\u00e3o": 333, "jambon": 263, "jame": 109, "jan": [148, 243, 322], "jane": 307, "jane_eyr": 306, "janel": 208, "janela": 208, "januari": 356, "japan": [83, 90], "japanes": [242, 295, 356], "japanese_nihongo": [57, 103], "jar": [131, 169, 224, 250], "jaro": 148, "jaro_scor": 148, "jaro_sim": 148, "jaro_similar": [0, 143, 148], "jaro_winkler_sim": 148, "jaro_winkler_similar": [0, 143, 148], "jason": [262, 356], "java": [0, 131, 169], "java_class": 250, "java_opt": [163, 175, 224, 249, 250], "javascript": 10, "jbo": 125, "jcn": [351, 356], "jcn_similar": [55, 57, 107, 351], "jct": 301, "jd": 100, "je": 263, "jean": 356, "jeff": 262, "jefferson": 351, "jeffrei": 262, "jegar": 305, "jeh1r": 205, "jenkin": 356, "jeraldin": 148, "jeremi": 240, "jersei": 333, "jespersen": [240, 248], "jesperson": 248, "jessica": 163, "jetai": 201, "je\u00fa": 333, "jgaa": [279, 283], "jh": [67, 307], "jhu": 215, "ji": [57, 103], "ji1d": 205, "jiang": [57, 107, 351], "jiann": 96, "jindal": [57, 68], "jing": 258, "jj": [25, 28, 39, 57, 62, 147, 163, 166, 175, 176, 177, 213, 214, 216, 221, 223, 224, 235, 302, 307, 310, 328, 332, 341, 343, 344, 348, 354], "jjr": [214, 343], "jjt": 307, "jn1d": 205, "jnothman": 358, "jo1d": 205, "joakim": 176, "job": [315, 352], "jodi": [313, 338], "joel": [356, 358], "joh": 313, "johan": 181, "johan_rotti": 336, "johann": 243, "john": [117, 127, 148, 162, 163, 164, 165, 167, 187, 191, 213, 226, 273, 275, 282, 296, 311, 312, 313, 314, 319, 320, 322, 326, 327, 330, 332, 335, 337, 338, 344, 351, 353], "johnson": [148, 262], "join": [0, 55, 57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 82, 84, 85, 93, 98, 104, 105, 107, 108, 109, 111, 113, 144, 162, 166, 176, 209, 229, 232, 238, 243, 273, 275, 281, 282, 284, 300, 303, 307, 309, 310, 314, 316, 317, 333, 336, 342, 346, 351, 354], "joinchar": [275, 281, 282, 284], "joint": [30, 34, 218], "joint_feat": 33, "joke": 338, "jon": [148, 252], "jonathan": [57, 85], "jone": [148, 344], "jonsafari": [252, 344], "jordan": [136, 356], "josef": 258, "joseph": 356, "journal": [88, 148, 179, 201, 279, 283, 307, 356], "journalist": 333, "journei": 24, "joven": 333, "joyster2012": 344, "jp": [57, 76, 103, 273, 356], "jpeg": 164, "jpn": 351, "jr": 344, "jrev1t": 205, "jrmy": 344, "jscore": 148, "jsim2t": 205, "json": [57, 102, 111, 132, 164, 197, 221, 287, 288, 289, 307], "json2csv": [0, 285, 287], "json2csv_ent": [0, 285, 287], "json2csv_preprocess": [0, 195, 197], "json_fil": 197, "json_tag": [213, 215, 221, 223, 227, 231, 232, 309], "jsondecod": 132, "jsonencod": 132, "jsonserializ": 309, "jsontag": [0, 309], "jsontaggeddecod": [0, 132, 309], "jsontaggedencod": [0, 132, 309], "ju": 248, "ju1d": 205, "judg": [248, 344], "judgement": 307, "judgment": 269, "juf1": 205, "jule": [326, 338], "juli": [148, 309, 356], "juliu": 148, "jump": [163, 175, 221, 312, 351], "june": [198, 329, 356], "junki": 20, "junsheng": [83, 90], "juntar": 333, "junto": 333, "jurafski": [136, 179], "juri": [55, 57, 223, 294, 307, 344], "jussi": 356, "just": [35, 57, 69, 72, 75, 77, 87, 91, 92, 107, 117, 121, 124, 125, 135, 182, 186, 198, 215, 226, 243, 244, 247, 254, 262, 287, 288, 294, 300, 301, 307, 311, 314, 325, 328, 333, 334, 339, 344, 346, 347, 351], "justen": 358, "justic": 234, "justif": [119, 248], "justifi": 119, "juvenil": [57, 63, 307], "juzgado_de_instrucci": 336, "juzgado_de_lo_penal_n": 336, "j\u00e1": 333, "k": [38, 46, 48, 50, 52, 57, 61, 67, 113, 120, 144, 151, 162, 167, 170, 201, 202, 204, 216, 218, 233, 242, 251, 258, 291, 301, 305, 307, 314, 326, 329, 333, 334, 336, 339, 343, 347, 351], "k1": 233, "k2": 233, "kaa": 345, "kabushiki": 242, "kahn": 240, "kaiser": 262, "kamholz": [57, 85], "kappa": [143, 144, 192], "kappa_pairwis": [143, 144], "kardinaal_van_roey_instituut": 336, "karnaim": 305, "katakana_hangul_halfwidth": [236, 254], "kath": 329, "kato": 262, "katsuhito": 273, "katz": 313, "katzen": 321, "kaufmann": 271, "kazawa": 262, "kbeval": [57, 72], "kcl": 307, "kdd": [83, 91], "ke": 248, "kecl": 273, "keep": [52, 107, 119, 120, 135, 142, 148, 170, 172, 198, 247, 253, 267, 274, 281, 284, 291, 307, 314, 339, 347, 353], "keep_token_posit": 245, "keep_whitespac": 250, "keepend": 111, "keh": 96, "kei": [0, 32, 35, 36, 52, 57, 67, 72, 73, 84, 101, 107, 111, 112, 117, 119, 120, 121, 135, 137, 142, 143, 147, 149, 152, 179, 182, 186, 187, 189, 192, 234, 241, 260, 275, 276, 287, 288, 289, 291, 300, 301, 305, 307, 314, 315, 318, 319, 325, 328, 333, 334, 335, 339, 345, 351, 356], "keith": [170, 262], "kelab": 336, "kendal": 273, "kendall_tau": [0, 256, 273], "kenya": 307, "kenyan": 307, "kept": [133, 154, 197, 233, 307], "kevin": 273, "kexw_5": 356, "keyboard": [7, 8, 117], "keyedvector": 317, "keyerror": [52, 117, 119, 120, 186, 314], "keyword": [25, 29, 55, 57, 59, 68, 86, 110, 117, 119, 124, 146, 177, 179, 255, 288, 289, 307, 309, 332], "keywords_readm": [55, 57, 68], "kharagpur": 74, "khoja": 204, "kibwana": 336, "kickback": 309, "kid": 36, "kidnap": 339, "kill": 291, "kilomet": 205, "kim": [313, 337], "kimmo": 356, "kin": 352, "kind": [14, 25, 57, 93, 135, 138, 159, 160, 162, 198, 235, 307, 336, 339, 344], "kinda": [198, 339], "kindof": 198, "king": [305, 317], "kipper": [57, 105], "kiriyenko": 336, "kirkku": 307, "kishor": 258, "kiss": [198, 243, 338], "kit": 307, "kivi": 356, "kivutha": 336, "kjv": 307, "klau": 262, "klein": [0, 257, 263, 264, 265, 266, 267, 281, 284, 354, 356, 358], "klingner": 262, "kmean": [0, 46], "kmeanscluster": [0, 46, 50], "kmike": 358, "kn": [57, 76, 334], "knbc": [55, 57, 324], "knbcorpusread": [55, 57, 76], "knead": 307, "knee": 67, "kneel": 331, "knelt": 331, "kneser": [135, 138, 140, 179], "kneser_ney_mini_exampl": 140, "knesernei": [0, 135, 140], "kneserneyinterpol": [0, 135, 138], "kneserneyprobdist": [0, 179, 334], "know": [127, 131, 132, 135, 209, 218, 243, 313, 322, 333, 351], "knowledg": [46, 83, 91, 96, 111, 182, 300, 307, 309, 313], "known": [0, 29, 30, 31, 33, 36, 39, 57, 59, 92, 104, 107, 113, 121, 135, 159, 160, 200, 218, 243, 281, 284, 291, 305, 307, 343, 346, 347, 351], "known_len": 52, "koehn": [261, 263, 264, 265, 266, 267, 268, 274, 346], "koehn2010": 346, "komm": 321, "kommen": 321, "kommst": 321, "kommt": 321, "kondrak": 145, "konrad": 119, "koran": 351, "korobov": [356, 358], "korpu": [57, 75], "kowloon": 300, "krasnoy": 336, "krikun": 262, "krippendorf": 356, "krippendorff": [144, 148, 356], "kuang": 96, "kubler": 176, "kuchen": 344, "kudo": 262, "kulyukin": 151, "kumaran": 74, "kunnen": 348, "kurenkov": 358, "kurian": 262, "kw": [112, 113, 117, 119, 186], "kwarg": [26, 29, 33, 40, 52, 57, 59, 62, 63, 72, 75, 78, 80, 83, 85, 86, 87, 90, 99, 101, 110, 111, 113, 115, 117, 118, 119, 120, 124, 131, 135, 138, 140, 144, 146, 150, 160, 163, 171, 175, 179, 185, 196, 197, 214, 218, 224, 255, 258, 275, 282, 284, 291], "k\ua108\ua218\u00e2\u1a4d\ua1d9\u04a3": [], "l": [10, 33, 35, 57, 62, 67, 109, 119, 144, 148, 151, 188, 216, 217, 233, 235, 247, 260, 263, 264, 265, 266, 267, 268, 275, 282, 306, 307, 311, 312, 313, 326, 329, 334, 336, 343, 344, 345, 347], "l1": [217, 225, 307], "l123": 307, "l162": 242, "l2": [217, 225, 307], "l3": [225, 307], "l309": 254, "l926": 242, "la": [166, 204, 298, 307, 333, 344, 346, 347], "la2": 205, "lab": 33, "label": [0, 29, 30, 31, 32, 33, 34, 35, 36, 38, 41, 43, 44, 47, 51, 57, 59, 60, 69, 72, 78, 81, 86, 89, 92, 114, 117, 118, 135, 136, 138, 142, 144, 147, 148, 164, 166, 170, 178, 180, 182, 188, 192, 194, 196, 197, 218, 221, 223, 235, 275, 276, 279, 281, 282, 284, 300, 303, 307, 311, 312, 317, 335, 336, 338, 339, 343, 347, 348, 349, 350, 356], "label1": [35, 148], "label2": [35, 148], "label_": 117, "label_config": [114, 117], "label_foreground": 117, "label_freq": 144, "label_indiv": [0, 180, 182], "label_probdist": 35, "labeled_featureset": [32, 35, 38], "labeled_sequ": 218, "labelled_sequ": 218, "labor": 307, "lack": [52, 120, 305, 307], "lacklust": 343, "lacnunga": 109, "lacura": 148, "lad": 109, "laddish": [57, 63, 307], "lado": 333, "lafferti": 151, "lagu": 109, "lahai": 305, "lai3": 205, "lakhdar": 209, "lamb": 305, "lambda": [25, 57, 76, 107, 119, 180, 184, 188, 191, 192, 234, 235, 274, 275, 282, 291, 299, 305, 313, 318, 334, 338, 347, 351, 356], "lambda_abstract": [180, 187, 318], "lambda_list": [180, 191], "lambdaexpress": [0, 180, 184, 191, 313], "lambdalog": 314, "lambek": 356, "lancast": [0, 199, 356], "lancasterstemm": [0, 199, 205], "land": 353, "lang": [42, 55, 57, 70, 106, 107, 192, 213, 221, 243, 248, 250, 289, 292, 301, 308, 351], "lang22": 109, "lang2q": [0, 133], "lang2str": [55, 57, 60], "lang_cod": [57, 85], "lang_dependent_regex": [236, 242], "lang_dir": 243, "lang_dist": [30, 42], "lang_freq": [55, 57, 70, 308], "lang_independent_sub": [236, 242], "lang_var": [243, 344], "langcod": [0, 133], "langnam": 0, "languag": [0, 42, 46, 57, 60, 70, 74, 78, 84, 88, 96, 106, 107, 133, 136, 138, 140, 141, 142, 145, 170, 179, 182, 188, 199, 203, 206, 209, 213, 218, 234, 236, 240, 242, 243, 245, 248, 250, 252, 257, 261, 263, 264, 265, 266, 267, 268, 272, 273, 274, 275, 281, 282, 284, 289, 291, 292, 293, 300, 301, 307, 326, 333, 336, 342, 346, 351, 356, 358], "language_cod": [55, 57, 85], "language_model": 274, "language_prob": 274, "language_varieti": [55, 57, 84], "languageindepend": [0, 256, 260], "languagemodel": [0, 135, 136, 138], "langvar_uid": [57, 85], "lao": [57, 103], "lapdog": 351, "laplac": [0, 135, 138, 179, 334], "laplaceprobdist": [0, 179, 334], "laportea": 329, "laquo": 192, "larg": [14, 25, 46, 111, 179, 218, 229, 243, 307, 309], "large_grammar": 332, "larger": [29, 39, 104, 170, 178, 179, 218, 307], "largest": [57, 105, 139, 157, 351], "larr": 192, "last": [25, 52, 104, 117, 120, 148, 217, 231, 232, 233, 246, 255, 267, 275, 276, 279, 286, 289, 299, 302, 303, 307, 308, 309, 314, 316, 322, 323, 333, 334, 335, 338, 344, 345, 346, 347, 351, 356], "last_dist": [30, 42], "last_par": 251, "last_tok_seq": 251, "lastnam": 301, "lat0117": [57, 103], "later": [28, 46, 49, 92, 134, 215, 251, 334, 345, 353], "latest": [181, 289, 356], "latex": [275, 282], "latin": [57, 60, 103, 111, 133, 192, 219, 291, 333], "latin1": [57, 58, 103], "latin2": [57, 103], "latin4": [57, 103], "latin5": [57, 103], "latn": [57, 60, 133], "latter": [92, 266, 267], "lattic": 170, "latvian": [57, 106], "lau3": 205, "launch": 10, "lavi": 269, "lavrar": 333, "law": [42, 109, 291], "lawrenc": 218, "lawyer": 336, "layer": [57, 72], "layout": [57, 100], "lazi": [43, 52, 57, 61, 65, 79, 93, 134, 135, 163, 175, 221], "lazili": [43, 52, 72, 104, 110, 139, 307, 351], "lazyconcaten": [0, 52, 72], "lazycorpusload": [0, 55, 57, 59, 76, 110], "lazyenumer": [0, 52], "lazyimport": 0, "lazyiteratorlist": [0, 52, 72], "lazyload": [0, 111, 309], "lazymap": [0, 43, 52, 72, 196], "lazymodul": [0, 134], "lazysubsequ": [0, 52, 307], "lazyzip": [0, 52], "lba3": 205, "lbai4i": 205, "lbaifi6": 205, "lbfg": 217, "lbi3": 205, "lc": [57, 84, 107, 251, 345, 351, 356], "lc1": 205, "lc_all": 291, "lcb": [239, 253], "lceil": 192, "lch": 352, "lch_similar": [55, 57, 107, 351], "lcon": [192, 336], "ldquo": 192, "le": [57, 103, 192, 262], "leacock": [57, 107, 351], "lead": [104, 170, 174, 223, 258, 307, 336, 354, 358], "leader": 336, "leaf": [0, 7, 12, 14, 30, 32, 51, 52, 118, 121, 159, 162, 167, 173, 235, 275, 281, 282, 284, 347, 349], "leaf_": 118, "leaf_freez": [275, 282], "leaf_label": 51, "leaf_pattern": [275, 282, 347], "leaf_treeposit": [0, 275, 282], "leafcolor": [275, 279], "leafedg": [0, 14, 159, 162, 171], "leafinitrul": [0, 159, 162, 165, 167], "leafless": 306, "leaflet": 356, "leak": 117, "learn": [38, 40, 46, 47, 49, 51, 151, 196, 215, 216, 217, 218, 227, 229, 243, 268, 291, 303, 307, 334, 343, 355], "learner": 229, "learning_curve_output": 229, "learning_curve_tak": 229, "learnt": 215, "least": [14, 28, 33, 51, 57, 79, 104, 107, 108, 117, 121, 148, 160, 161, 162, 171, 173, 174, 178, 179, 205, 216, 232, 248, 269, 272, 307, 339, 351], "leav": [0, 7, 14, 25, 29, 32, 51, 55, 57, 61, 65, 66, 104, 118, 121, 159, 161, 162, 167, 173, 197, 199, 247, 255, 275, 279, 282, 307, 312, 322, 336, 342, 347], "lebanes": 336, "lebanon": 336, "lec": 148, "lectur": 307, "led": 218, "ledger": 351, "lee": [63, 67, 197, 298, 313, 356], "leechdom": 109, "left": [7, 8, 14, 15, 25, 28, 30, 104, 113, 117, 119, 121, 135, 147, 157, 162, 164, 167, 171, 173, 174, 176, 192, 203, 223, 229, 253, 267, 275, 277, 279, 281, 282, 284, 291, 302, 306, 307, 313, 319, 332, 333, 336, 344, 347, 349], "left_arc": [159, 176], "left_children": [159, 164], "left_context_tag_pattern": 28, "left_edg": [14, 162, 167, 171], "left_pad_symbol": [135, 291], "left_sibl": [0, 275, 277, 347], "left_tag_pattern": 28, "leftarc": 176, "leftcorn": [0, 121], "leftcorner_par": [0, 121], "leftcornerchartpars": [0, 159, 162, 332], "leftmost": [7, 172], "leftward": [25, 119, 172], "leg": 351, "legaci": [194, 338], "legal": [188, 240, 291], "legal_frequency_threshold": 240, "legalcod": [57, 85], "legality_principl": [0, 236], "legalitysyllabletoken": [0, 236, 240], "legitim": 291, "legomena": 179, "lehrbuch": [240, 248], "lei": 298, "leipzig": [240, 248], "leitor": 333, "lem": [239, 253], "lembr": 333, "lembra": 333, "lemburg": 134, "lemma": [55, 57, 72, 76, 79, 81, 89, 93, 105, 107, 149, 211, 307, 315, 331, 335], "lemma_count": [55, 57, 107], "lemma_from_kei": [55, 57, 107, 351], "lemma_nam": [57, 107, 351], "lemma_para": [55, 57, 79], "lemma_s": [55, 57, 79], "lemma_word": [55, 57, 79], "lemmaid": [57, 72], "lemmat": [37, 199, 211, 351], "lemmatis": 351, "len": [30, 33, 52, 57, 68, 72, 76, 91, 104, 131, 135, 142, 150, 163, 167, 170, 178, 179, 233, 251, 254, 258, 261, 271, 273, 275, 282, 291, 297, 299, 301, 303, 304, 305, 306, 307, 310, 314, 315, 316, 317, 325, 332, 333, 334, 339, 347, 351], "lend": 353, "length": [12, 14, 25, 30, 33, 48, 49, 50, 51, 52, 57, 92, 104, 107, 117, 121, 139, 147, 148, 150, 151, 159, 162, 165, 170, 171, 177, 179, 192, 204, 207, 218, 221, 223, 231, 234, 238, 240, 251, 254, 258, 260, 263, 264, 265, 266, 267, 271, 272, 274, 275, 282, 289, 291, 304, 307, 314, 322, 338, 344, 345, 347, 351], "leofric": 109, "leonberg": 351, "leoni": 203, "leq": [180, 188], "lesk": [0, 292], "lesk_sens": 292, "less": [28, 33, 52, 104, 135, 137, 142, 146, 147, 152, 171, 198, 215, 223, 233, 258, 305, 307], "let": [7, 8, 25, 36, 42, 131, 132, 135, 218, 307, 311, 313, 322, 333, 351], "letter": [109, 133, 146, 148, 156, 158, 186, 203, 205, 209, 308, 351, 356], "lev": [187, 190], "levant": 333, "level": [28, 33, 57, 61, 72, 78, 80, 91, 93, 100, 107, 108, 119, 150, 162, 165, 167, 171, 173, 174, 177, 178, 198, 216, 229, 235, 236, 248, 257, 258, 259, 262, 269, 271, 275, 279, 282, 291, 294, 296, 307, 308, 315, 322, 336, 338, 347, 351, 356], "levenshtein": [148, 328, 356], "levenstein": 356, "levi": 333, "lex": [298, 299, 307, 347], "lex_filenum": [57, 107], "lex_id": [57, 107], "lex_sens": [57, 107], "lex_str": 16, "lexem": [57, 72, 315], "lexic": [0, 57, 62, 72, 85, 95, 105, 106, 107, 116, 121, 180, 251, 263, 264, 265, 266, 267, 268, 307, 313, 354], "lexicalis": 121, "lexicograph": [57, 72, 107], "lexicon": [0, 2, 12, 14, 55, 57, 67, 72, 91, 105, 182, 197, 198, 218, 241, 298, 356], "lexicon_fil": 198, "lexnam": [57, 107], "lexname_index": 107, "lexpars": 175, "lexunit": [57, 72, 315], "lfg": [0, 180], "lfilter": 251, "lfloor": 192, "lg_record": [57, 60], "lgn": 133, "lgtm": 356, "lh": [0, 12, 14, 121, 159, 162, 165, 167, 171, 178, 188, 320, 332], "lhe": 333, "li": [209, 248, 311, 356], "lib": [57, 106, 111, 113], "lib2l": 205, "libero": 112, "librari": [0, 30, 33, 38, 57, 102, 111, 131, 286, 287, 289, 354, 356], "librarian": 336, "libri": 333, "libro": 298, "licens": [0, 14, 55, 57, 59, 85, 96, 107, 112, 113, 162, 165, 167, 171, 356], "lidston": [0, 135, 138, 179, 218, 325, 334], "lidstoneprobdist": [0, 179, 334], "life": [163, 315], "lifetim": 104, "lifo": [52, 120], "light": [120, 201, 202, 209], "light_emiss": 307, "lightn": 307, "lightweight": 0, "lign256": 140, "like": [14, 23, 28, 31, 32, 43, 46, 52, 57, 62, 72, 75, 82, 86, 104, 107, 108, 111, 112, 117, 120, 121, 132, 134, 135, 156, 160, 161, 162, 163, 164, 169, 171, 173, 174, 178, 179, 182, 186, 191, 197, 223, 229, 243, 248, 258, 263, 266, 267, 268, 274, 275, 282, 287, 300, 305, 307, 310, 313, 314, 315, 322, 326, 334, 336, 339, 340, 343, 344, 351], "like_neg": 197, "likelihood": [33, 43, 46, 47, 48, 51, 53, 121, 135, 146, 150, 179, 217, 243, 257, 258, 274, 305, 328], "likelihood_ratio": [143, 146, 305, 328], "likelihood_vectorspac": [46, 48, 51], "liken": 170, "likewis": 351, "lil": 304, "lile": 358, "lillian": 63, "limit": [24, 25, 57, 102, 107, 150, 169, 197, 217, 225, 229, 242, 274, 281, 284, 286, 288, 289, 307, 345, 351], "limit_by_time_demo": [0, 285, 288], "lin": [55, 57, 107, 258, 351, 356], "lin_similar": [55, 57, 107, 351], "lincoln": 351, "line": [10, 16, 18, 28, 29, 32, 44, 55, 57, 58, 60, 62, 66, 67, 69, 72, 74, 78, 81, 83, 87, 88, 89, 91, 94, 96, 99, 102, 104, 105, 106, 111, 118, 119, 123, 129, 130, 147, 162, 165, 167, 177, 179, 197, 201, 208, 217, 231, 232, 233, 234, 244, 247, 252, 253, 255, 258, 275, 279, 282, 287, 288, 289, 291, 302, 306, 307, 322, 333, 344, 345, 346, 351, 355, 356], "line_color": 118, "line_length": 155, "line_separ": [57, 106], "line_token": [0, 236, 247], "linear": [38, 169, 179, 190, 225, 307, 351], "linearlog": [0, 180, 318], "linearlogicapplicationexcept": [0, 180, 190, 318], "linearlogicpars": [0, 180, 190], "linearsvc": 38, "linebreak": 255, "linebuff": [0, 111, 307], "lines_list": 339, "linesearch": 217, "linestart": [236, 243], "linetoken": [0, 236, 247], "ling": [275, 282], "linger": 307, "lingfil": 164, "linguateca": 333, "linguist": [25, 28, 68, 90, 96, 119, 144, 145, 151, 155, 170, 179, 203, 243, 263, 264, 265, 266, 267, 268, 307, 313, 354, 356], "link": [55, 57, 72, 78, 80, 107, 235, 260, 294, 307, 315, 351, 356], "link_read": [57, 78], "linkag": 148, "linspac": 251, "lint": 356, "linthesauruscorpusread": [55, 57, 77], "linux": 354, "linuxfest": 356, "lion": 307, "lionel": 22, "lip": 248, "lippincott": 356, "lirg": 273, "lisboa": 333, "lisp": [57, 77], "list": [0, 7, 8, 13, 14, 16, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 41, 43, 44, 47, 51, 52, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 144, 145, 147, 148, 149, 150, 151, 152, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 189, 190, 191, 192, 194, 196, 197, 198, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 282, 287, 288, 289, 291, 293, 294, 299, 300, 301, 302, 305, 309, 311, 312, 313, 315, 316, 317, 320, 321, 322, 324, 325, 329, 330, 331, 332, 334, 335, 336, 339, 340, 343, 344, 345, 347, 350, 351, 356, 358], "list2sym": [0, 180, 192], "list2txt": [0, 212], "list_of_list": 52, "list_of_refer": [258, 262, 271, 273], "list_read": [57, 78], "listbox": [114, 117], "listbox_": 117, "listbox_config": [114, 117], "listbox_foreground": 117, "listdir": [307, 309], "listofkeyword": [57, 68], "lit": 351, "lite": [84, 356], "liter": 131, "literatur": 33, "lithuanian_lietuviskai": [57, 103], "littl": [57, 62, 72, 92, 176, 198, 229, 241, 273, 315, 349], "liu": [57, 68, 83, 90, 91, 197, 262], "liub": [68, 83, 90, 91], "lium": 242, "live": [109, 289, 305, 307, 315], "lively_plac": [57, 72], "living_t": 347, "living_th": [57, 107, 291, 351], "ljungl\u00f6f": 358, "ll": [52, 64, 161, 239, 253, 306, 307, 309, 323, 325, 333, 339, 343, 348, 355], "ll1": 205, "lld0": 356, "lm": [0, 33, 234, 295], "lmu": 203, "ln": 258, "lo": [307, 333, 336], "load": [0, 25, 52, 55, 57, 59, 60, 72, 79, 107, 110, 111, 113, 125, 134, 144, 159, 161, 162, 164, 177, 182, 192, 213, 216, 221, 234, 243, 291, 300, 304, 307, 311, 313, 317, 322, 333, 334, 338, 343, 344, 347, 356], "load_ace_data": [0, 25, 27], "load_ace_fil": [0, 25, 27], "load_arg": 177, "load_arrai": [143, 144], "load_cr": [285, 290], "load_earlei": 312, "load_fol": [0, 123, 125, 311], "load_from_json": [213, 221], "load_lang": [236, 243], "load_maxent_param": [0, 30, 33], "load_param": [25, 27], "load_pars": [0, 159, 177, 300, 312, 313, 332], "load_parser_opt": 161, "load_po": [0, 213, 218], "load_punkt_param": [0, 236, 243], "load_reranker_model": 161, "load_wiki_q": [55, 57, 60], "load_word2vec_format": 317, "loader": [72, 132], "lobo": 333, "loc": [39, 97, 221, 222, 307, 311, 335, 336, 338], "loc_": 118, "loc_attr": 118, "local": [46, 50, 57, 78, 87, 103, 104, 111, 113, 134, 192, 267, 268, 275, 282, 286, 291, 294, 307, 311, 314, 322, 351], "localhost": [10, 163, 356], "localtimezoneoffsetwithutc": [0, 285, 286], "locat": [7, 29, 57, 58, 59, 65, 69, 76, 78, 79, 81, 87, 89, 99, 102, 103, 109, 110, 111, 118, 119, 120, 131, 171, 173, 177, 191, 192, 221, 224, 234, 266, 272, 287, 294, 300, 307, 322, 335, 336, 343, 352, 356, 358], "location_of_sound_sourc": [57, 72], "lock": [25, 332, 335], "locomia": 333, "locura": 148, "lodg": 307, "log": [10, 33, 43, 57, 107, 136, 150, 179, 217, 218, 225, 243, 257, 260, 271, 274, 294, 351], "log_base2": [0, 135, 141], "log_likelihood": [0, 30, 43, 143, 150, 179, 328], "log_prob": [213, 218, 256, 257], "logarithm": [33, 135, 141, 146, 179], "logi": 179, "logic": [0, 12, 111, 124, 125, 127, 128, 131, 136, 138, 180, 181, 184, 186, 188, 190, 194, 229, 232, 235, 238, 295, 299, 309, 311, 312, 313, 314, 319, 330, 336, 337, 338, 356], "logic_pars": [111, 120, 191, 309, 311, 312], "logicalexpressionexcept": [0, 180, 191, 312, 326], "logicpars": [0, 111, 180, 184, 190, 191, 309, 326], "logist": 38, "logprob": [0, 179], "logscor": [135, 136], "logsumexp2": [0, 213, 218], "logx": 179, "lol": 339, "london": [222, 351], "londr": [333, 351], "long": [24, 52, 57, 105, 208, 209, 245, 263, 289, 291, 307, 322, 323, 333, 344, 346, 348, 350, 351, 353], "longer": [57, 104, 107, 119, 154, 171, 219, 262, 272, 274, 275, 279, 307, 309, 347, 351, 356], "longest": [57, 107, 121, 240, 268, 351], "longest_target_sentence_length": [0, 256, 268], "longestchartpars": [0, 159, 171, 332], "longid": [55, 57, 105, 307], "longitudin": 353, "longman": 349, "look": [28, 38, 52, 57, 65, 72, 81, 89, 111, 132, 135, 138, 142, 223, 229, 231, 234, 238, 267, 268, 274, 302, 305, 306, 307, 311, 313, 314, 322, 333, 336, 346, 351], "lookahead": 191, "lookback": 191, "lookup": [0, 57, 77, 107, 133, 135, 142, 180, 187, 266, 267, 289, 351], "lookup_by_userid_demo": [0, 285, 288], "lookup_uniqu": [180, 187], "lookuperror": [34, 111, 131, 322], "loop": [28, 272, 307, 333, 351], "loos": [147, 182, 307, 349], "loper": [0, 354, 356, 358], "lore": [307, 334], "lose": [281, 284], "loss": [275, 281, 282, 284], "lost": [36, 356], "lot": [52, 57, 72, 241, 243, 311, 343, 346], "lote": 333, "love": [163, 164, 180, 197, 296, 322, 326, 327, 332, 338, 339, 353], "low": [133, 215, 229, 305, 314, 343, 356], "lowast": 192, "lower": [36, 46, 49, 57, 107, 135, 138, 163, 179, 216, 221, 234, 258, 267, 268, 269, 274, 289, 305, 307, 333], "lower_date_limit": [286, 289], "lowercas": [57, 67, 191, 194, 203, 206, 242, 243, 338, 344], "lowest": [35, 107, 171, 240, 274, 275, 282, 351], "lowest_common_hypernym": [57, 107, 351, 352], "loz": 192, "lp": 240, "lpq": 326, "lrb": [163, 175, 239, 253, 343], "lrec": [57, 85], "lrec2014": [57, 85], "lrec_skipgram": 291, "lrm": 192, "lsaquo": 192, "lsb": [239, 253], "lsquo": 192, "lst": [52, 192, 242], "lstrip": [236, 252], "lt": [192, 254, 307, 356], "ltext": 33, "lu": [55, 57, 72, 315], "lu2": 205, "lu256": [57, 72], "lu_bas": [55, 57, 72], "lu_ids_and_nam": [55, 57, 72], "lucid": 356, "lucorpu": [57, 72], "luf3": 205, "lufi4i": 205, "luid": [57, 72], "lukasz": 262, "luminos": 261, "lunam": [57, 72], "lunamepattern": [57, 72], "lunch": 317, "lv": [57, 84, 106], "lvdmaaten": 317, "lwidth": 14, "lx": [57, 101, 345], "ly": [216, 223, 343], "lynch": 163, "lynx": 356, "lysand": 307, "l\u00e1": 333, "l\u0240\u0d32\u00aa\u1ec5": [], "l\u1623\u0a87\u1419\u0c9d": [], "m": [7, 22, 42, 46, 48, 57, 67, 79, 85, 92, 100, 113, 148, 151, 163, 175, 180, 186, 192, 206, 209, 214, 231, 232, 235, 239, 242, 259, 260, 261, 263, 264, 265, 266, 267, 275, 279, 294, 300, 301, 312, 313, 318, 322, 326, 329, 333, 334, 335, 336, 338, 343, 344, 351, 355, 358], "m0": 338, "m1": 338, "m2": 338, "m3": 338, "ma": [100, 207, 333], "mac": [294, 333, 354], "mac_morpho": [57, 99, 333], "macduff": 262, "mace": [0, 123, 125, 128, 322], "mace4": [125, 126, 311, 330, 356], "macecommand": [0, 123, 126, 128, 322], "macedonian": 307, "macherei": 262, "machin": [38, 40, 46, 57, 106, 151, 196, 218, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 271, 273, 274, 292, 294, 307, 315, 327, 346, 351, 355], "macintosh": 356, "macintyr": 239, "macintyrecontract": [0, 236, 239], "macmorphi": 356, "macmorphocorpusread": [55, 57, 99], "macn001": 333, "macn002": 333, "macn003": 333, "macr": 192, "macro": [235, 258, 259, 262, 273], "macwhinnei": 301, "made": [15, 28, 52, 57, 63, 72, 87, 91, 92, 102, 113, 117, 120, 131, 163, 197, 204, 209, 243, 253, 267, 272, 307, 315, 344, 347], "madnani": 356, "madra": 300, "mag": 321, "magahi": [57, 103], "magistr": 234, "magst": 321, "mai": [13, 15, 18, 25, 28, 31, 34, 38, 44, 46, 50, 52, 53, 57, 72, 81, 83, 87, 89, 90, 91, 99, 104, 107, 108, 111, 113, 116, 117, 119, 120, 121, 124, 131, 146, 160, 161, 162, 171, 179, 191, 198, 203, 209, 218, 223, 225, 229, 231, 232, 233, 234, 236, 243, 246, 258, 265, 268, 275, 277, 288, 291, 305, 307, 311, 312, 314, 315, 319, 322, 326, 333, 346, 347, 352, 356], "mail": [293, 358], "mailto": 134, "main": [0, 7, 8, 57, 60, 72, 86, 91, 117, 119, 131, 135, 165, 180, 182, 204, 271, 287, 307, 322, 356], "main_field": 287, "mainentri": [57, 72], "mainli": [57, 63, 120, 247, 287, 307, 309], "mainloop": [0, 113, 114, 115, 118, 119, 180, 185, 291], "maintain": [7, 8, 13, 52, 104, 111, 117, 120, 128, 162, 171, 174, 206, 225, 240, 245, 275, 276, 277, 307, 309, 347, 358], "maja": 259, "major": [46, 240, 248, 343], "majorli": 198, "make": [28, 29, 32, 35, 44, 52, 57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 78, 80, 81, 82, 84, 85, 89, 93, 98, 100, 105, 107, 108, 109, 111, 118, 119, 120, 124, 126, 127, 128, 131, 135, 136, 137, 144, 148, 159, 173, 174, 182, 190, 191, 216, 223, 233, 234, 236, 243, 262, 271, 274, 288, 289, 291, 300, 302, 305, 307, 311, 313, 314, 315, 322, 333, 339, 343, 344, 347, 349, 356], "make_applicationexpress": [180, 184, 191], "make_booleanexpress": [180, 184, 190, 191], "make_equalityexpress": [180, 184, 191], "make_lambdaexpress": [180, 184, 187, 191], "make_leaf": 118, "make_lex": [0, 180, 182], "make_lex_dict": [195, 198], "make_mptre": 347, "make_negatedexpress": [180, 184, 191], "make_nod": 118, "make_nois": [57, 72], "make_ptre": 347, "make_quanifiedexpress": [180, 191], "make_testcorpu": 307, "make_tre": [159, 163], "make_valu": [0, 180, 182, 300], "make_variableexpress": [180, 184, 187, 190, 191], "makeel": [0, 131], "mal": 134, "male": [36, 100, 307, 351], "mallet": 356, "malt": [0, 159, 164, 319], "malt_demo": [0, 159, 164], "malt_model": 169, "malt_pars": 169, "malt_regex_tagg": [0, 159, 169], "maltpars": [0, 159, 169, 311, 319], "maltxml": 164, "mammal": [57, 107, 291, 347, 351], "man": [53, 57, 107, 146, 170, 174, 183, 234, 281, 284, 305, 310, 312, 316, 317, 320, 322, 326, 328, 330, 332, 336, 337, 338, 351], "man_x": 312, "manag": [114, 118, 119, 163, 219, 307, 311, 336, 355, 356, 358], "manchest": [68, 90], "maneuv": [57, 90, 307, 353], "mang": 263, "mangl": 48, "mani": [38, 43, 52, 57, 63, 67, 72, 107, 111, 117, 119, 120, 125, 135, 136, 157, 171, 178, 179, 204, 206, 215, 229, 231, 235, 243, 263, 264, 265, 266, 267, 281, 284, 294, 305, 307, 314, 315, 333, 343, 344, 351, 356], "manifold": 317, "manipul": [101, 255, 317, 356], "manner": [46, 162, 181, 289, 311, 315, 322, 338, 344], "manner_speak": 307, "manter": 333, "manual": [7, 8, 44, 57, 65, 72, 104, 109, 161, 223, 233, 235, 254, 305, 315, 322], "map": [0, 16, 23, 30, 32, 33, 36, 38, 43, 51, 52, 57, 59, 65, 72, 79, 86, 92, 100, 104, 105, 107, 111, 119, 120, 121, 125, 129, 133, 135, 142, 148, 162, 167, 179, 180, 181, 182, 186, 188, 191, 194, 213, 214, 218, 223, 234, 235, 243, 257, 266, 267, 269, 300, 307, 309, 311, 314, 328, 346, 356], "map_tag": [0, 213, 220], "map_to_mani": [55, 57, 107], "map_to_on": [55, 57, 107], "map_wn": [55, 57, 107], "mapping_msd_univers": [57, 79], "mar": 135, "mar_tin": 344, "marathi": [57, 74, 103, 356], "marc": 134, "march": [73, 301, 356], "marek": 356, "margaret": [109, 356], "margin": [119, 121, 146, 147, 198, 263, 264, 275, 282, 305], "marhta": 148, "mari": [57, 72, 109, 127, 163, 164, 191, 226, 275, 279, 296, 312, 319, 322, 326, 327, 330, 337, 338, 348, 353], "mark": [29, 67, 79, 104, 114, 119, 120, 131, 132, 135, 142, 151, 197, 225, 234, 241, 243, 246, 251, 267, 275, 282, 291, 302, 314, 336, 344, 356], "mark_alls_fresh": [123, 130], "mark_neg": [0, 195, 197, 339], "mark_neqs_fresh": [123, 130], "markdown": [55, 57, 356], "markdownblock": [55, 57, 78, 307], "markdowncorpusread": [55, 57, 78], "markdownsect": [55, 57, 78, 307], "marker": [28, 57, 75, 225, 255, 291], "market": 176, "markonli": [114, 119], "markov": [218, 225, 275, 281, 282, 284, 349], "markovtre": 349, "marm05": 333, "marri": [307, 309, 311, 353], "martha": 148, "martin": [179, 206, 209], "martin_extens": [199, 206], "martinez": 148, "martyrologi": 109, "marvel": [109, 307], "masato": 356, "masc": 313, "masculin": [201, 202], "masi": [144, 148], "masi_dist": [0, 143, 148, 328], "masiu": 344, "mask": [135, 136, 138], "masquerad": 307, "mass": [179, 207, 233], "massa": 333, "massei": 148, "massi": 148, "master": [100, 117, 119, 155, 209, 242, 252, 254, 344], "mat": [258, 259, 262, 302, 327], "match": [7, 16, 18, 23, 25, 28, 32, 57, 59, 61, 62, 64, 65, 69, 70, 71, 72, 75, 79, 80, 82, 84, 85, 86, 93, 98, 104, 105, 107, 108, 109, 113, 120, 121, 129, 131, 144, 148, 159, 173, 174, 180, 191, 198, 207, 223, 234, 235, 244, 246, 254, 258, 262, 269, 272, 275, 282, 291, 306, 307, 313, 314, 315, 326, 333, 336, 343, 346, 353], "match_phone_numb": 238, "matchbracket": [0, 12, 16], "mateo": 336, "materi": [23, 25, 28, 37, 244, 333], "mathemat": [263, 264, 265, 266, 267, 268, 334, 356], "matild": [57, 72, 315], "matplotlib": [116, 179, 229, 317], "matric": [33, 38, 46, 48], "matrix": [38, 46, 48, 147, 214, 217, 218, 313, 343, 356], "matter": [263, 307], "matthew": [148, 221], "matur": 234, "mau": 333, "max": [0, 30, 35, 57, 84, 148, 179, 198, 262, 314, 316, 333], "max_count": 317, "max_depth": [57, 107, 351], "max_dist": 144, "max_fn_exampl": 29, "max_fp_exampl": 29, "max_id": 289, "max_it": [33, 196, 303], "max_iter": [217, 218], "max_l": 148, "max_len": [0, 121, 135, 259, 262, 291, 325], "max_linesearch": 217, "max_model": 126, "max_phrase_length": 272, "max_proof": 322, "max_rul": [216, 229, 343], "max_sentence_s": 39, "max_tp_exampl": 29, "max_v": 267, "maxdepth": [57, 107, 291, 350], "maxent": [0, 30, 34, 38, 170, 303], "maxent_ne_chunk": [0, 25, 27], "maxent_pos_tagg": [0, 30, 33], "maxentclassifi": [0, 30, 33, 34, 170, 196, 303], "maxentdecod": [0, 212], "maxentencod": [0, 212], "maxentfeatureencodingi": [0, 30, 33, 34], "maxim": [33, 168, 205, 240, 262, 268, 272], "maxima": 268, "maximis": [46, 48, 218], "maximize_alignment_prob": [256, 264], "maximize_distortion_prob": [256, 265, 266], "maximize_fertility_prob": [256, 268], "maximize_lexical_translation_prob": [256, 268], "maximize_null_generation_prob": [256, 268], "maximize_vacancy_prob": [256, 267], "maximum": [25, 28, 29, 33, 39, 46, 48, 50, 57, 88, 107, 111, 126, 131, 135, 158, 168, 170, 171, 177, 179, 205, 217, 218, 225, 229, 234, 258, 259, 262, 267, 268, 274, 275, 279, 282, 289, 291, 303, 307, 322, 351, 356], "maxlen": 179, "maxreprs": [57, 72], "maxwidth": [275, 279, 348], "mayb": [10, 24, 191], "mayor": 344, "ma\u00f1ana": 307, "mb": 322, "mccune": 322, "mcdonal": 176, "mcdonald": [170, 220], "mcglashan": 336, "mcintyr": 253, "mcmillan": 136, "mco": 169, "md": [100, 113, 163, 166, 214, 307, 310, 343], "md5": 113, "md5_hexdigest": [0, 113], "mdash": 192, "mdit": 307, "me": [24, 67, 163, 236, 239, 244, 247, 249, 253, 254, 305, 307, 332, 333, 341, 344], "mean": [24, 28, 46, 48, 50, 55, 57, 72, 84, 91, 107, 121, 124, 131, 134, 135, 147, 150, 151, 164, 179, 181, 187, 191, 214, 218, 232, 240, 248, 258, 262, 268, 271, 289, 307, 315, 322, 339, 351], "meander": 307, "meaning": [152, 328], "meaning_q": [55, 57, 84], "meant": [205, 268, 302], "measur": [28, 29, 42, 50, 53, 146, 147, 148, 150, 166, 192, 196, 197, 203, 214, 215, 262, 333, 339, 343, 351, 352, 356], "meat": 217, "mecklenburg": 133, "med": 148, "media": [0, 198, 287, 354, 356], "median": 307, "medic": [57, 72], "medical_profession": [57, 72], "medical_specialti": [57, 72], "medicina": 109, "medit": 24, "medium": 140, "meet": [172, 307, 342], "megabyt": 131, "megam": [0, 30, 33, 43, 303, 356], "mehl": 344, "meio": 333, "melbourn": 358, "mellon": 67, "melt": 197, "melvil": [234, 306], "melvin": 262, "mem": 333, "member": [29, 33, 34, 41, 57, 105, 135, 179, 182, 186, 192, 300, 307, 335, 336, 351], "member_holonym": [107, 351], "member_meronym": 107, "membership": [46, 48, 49, 50, 135, 142, 338], "membro": 333, "memoiz": 112, "memori": [38, 43, 52, 104, 117, 135, 192, 217, 225, 229, 233, 243, 257, 291, 307, 333, 347], "mem\u00f3ria": 333, "men": [57, 107], "meno": 333, "mental": 344, "mention": [120, 192, 307, 314, 322, 336, 351], "mentor": 356, "menu": [119, 294], "menubutton": 119, "mercado": 307, "mercer": [263, 264, 265, 266, 267, 268], "mere": 15, "merg": [0, 25, 28, 46, 49, 51, 119, 153, 157, 181, 241, 302, 307, 312, 314, 329], "merged_synset": [55, 57, 107], "merger": [57, 72], "mergerul": [0, 25, 28, 302], "mesma": 333, "mesmo": 333, "mesol": 329, "messag": [10, 111, 113, 128, 131, 154, 191, 217, 289, 302, 314, 322, 336, 356], "mesur": 151, "met": [205, 261, 348], "metadata": [57, 75, 78, 100, 182, 300, 307], "metadata_read": [57, 78], "meteor": [269, 295, 356], "meteor_scor": [0, 256], "method": [13, 25, 26, 28, 29, 33, 34, 39, 52, 57, 59, 61, 62, 64, 65, 69, 70, 71, 72, 75, 76, 79, 80, 82, 83, 84, 85, 86, 87, 93, 98, 104, 105, 107, 108, 109, 111, 112, 117, 119, 120, 124, 125, 126, 128, 131, 132, 135, 136, 137, 138, 142, 143, 146, 148, 149, 157, 161, 162, 170, 171, 172, 173, 174, 176, 179, 181, 184, 186, 190, 191, 196, 197, 203, 205, 217, 218, 219, 222, 223, 225, 229, 231, 233, 234, 235, 236, 238, 239, 243, 244, 245, 247, 251, 255, 258, 263, 264, 266, 268, 269, 274, 275, 277, 281, 282, 284, 286, 289, 290, 300, 302, 309, 311, 312, 313, 323, 329, 333, 334, 335, 338, 343, 344, 348, 351, 352, 356], "method0": [256, 258], "method1": [256, 258], "method2": [256, 258], "method3": [256, 258], "method4": [256, 258, 296], "method5": [256, 258], "method6": [256, 258], "method7": [256, 258], "methodologi": [148, 240], "metric": [0, 29, 49, 57, 107, 196, 242, 256, 258, 262, 269, 295, 305, 331, 346, 351, 356, 358], "metz": 109, "meu": 333, "mexican_hairless": 351, "mi": 198, "mi_lik": [143, 146, 328], "mia": [309, 311, 326, 338], "mich": 321, "michael": [127, 148, 272, 292, 339], "michel": [57, 72, 112, 148, 315], "michelesimionato": 112, "micro": [192, 258, 273, 344], "microblog": 307, "microchip": 88, "microsoft": 74, "mid": 307, "middl": [2, 57, 72, 104, 119, 176, 240, 305, 307, 315], "middot": 192, "midland": 100, "midsumm": 307, "midwai": [162, 174], "might": [30, 33, 110, 111, 162, 163, 167, 177, 257, 267, 268, 298, 306, 311, 314, 317, 336, 355], "mightn": 198, "mightnt": 198, "mihalcea": 346, "mihalcea2003": 346, "mike": [262, 336], "mikhail": [356, 358], "mikheev": 243, "mikolov": 317, "mil": 347, "milajev": 358, "mileston": 356, "milh": 333, "militari": [258, 259, 262, 269, 271, 273], "milk": 347, "miller": [57, 105], "million": [57, 72, 109, 315, 333], "milstein": 307, "mim": 333, "mimic": 107, "mimic_wrap": [55, 57, 72], "min": [42, 148, 207, 216, 271, 314, 343], "min_acc": [216, 229], "min_colloc_freq": [236, 243], "min_depth": [57, 107], "min_freq": [196, 339], "min_len": [0, 121, 259, 262, 291], "min_ll": 33, "min_lldelta": 33, "min_prob": [256, 268], "min_scor": [216, 229], "min_score_factor": [256, 267], "min_siz": [0, 52, 307], "min_stem_length": 223, "mind": [24, 120, 281, 284, 311, 314], "mine": [68, 83, 90, 91, 95, 307], "minfreq": 217, "ming": 96, "minha": 333, "minim": [25, 120, 148, 156, 179, 243, 251, 271, 272, 275, 279, 286, 351], "minimalset": [0, 153], "minimum": [52, 63, 107, 148, 156, 196, 207, 217, 229, 243, 259, 262, 289, 291, 305, 351, 356], "minist": [309, 333], "ministro": [298, 333], "minnesota": 94, "minor": [204, 209, 356], "minq": [83, 90, 91], "minu": [51, 120, 192], "minut": [57, 72, 254, 289, 307, 315, 344], "mir": 321, "mirror": [57, 65], "miryanov": 72, "misalign": 39, "misc": [0, 294, 295, 356], "miscellan": [57, 72], "mishpat": 305, "mismatch": 28, "miss": [25, 28, 29, 52, 57, 72, 144, 299, 302, 343, 346, 347, 356], "misss": 29, "mist": 307, "mistak": 20, "mistaken": 307, "mistakenli": [57, 107], "mit": [240, 248], "mitchel": [213, 356], "mitr": 356, "mix": [2, 36, 57, 107, 120, 179, 275, 277, 302, 307, 314, 339, 347], "mixin": [57, 59], "mixtur": [46, 48], "mizzl": 307, "mk": 345, "mk_reldict": 192, "mkdtemp": [307, 309], "mkstemp": 345, "mlb": 117, "mlc": 178, "mle": [0, 135, 136, 138, 218, 325, 334], "mleprobdist": [0, 179, 328, 334], "mlu": [55, 57, 65, 301], "mm": [239, 253], "mm1": 205, "mn": [57, 84], "mobi": [234, 306], "moby_dick": [234, 306], "mod": [121, 164, 301], "mod_address": 164, "modal": 298, "mode": [0, 10, 25, 111, 113, 169, 206, 220], "mode_fil": 217, "model": [0, 32, 33, 34, 41, 46, 48, 57, 68, 88, 111, 112, 113, 123, 124, 125, 126, 136, 140, 141, 142, 148, 151, 161, 169, 172, 175, 176, 179, 180, 181, 182, 186, 187, 188, 194, 198, 217, 218, 219, 221, 223, 224, 225, 234, 236, 243, 245, 252, 258, 263, 264, 265, 266, 267, 268, 274, 294, 300, 307, 311, 333, 343, 355, 356, 358], "model2count": [0, 256, 264], "model3count": [0, 256, 265], "model4_prob_t_a_given_": [256, 266], "model4count": [0, 256, 266], "model5count": [0, 256, 267], "model_build": 126, "model_dir": 161, "model_fil": 217, "model_filenam": [44, 169, 224], "model_found": 126, "model_path": 175, "model_tsn": 317, "modelbuild": [0, 123, 124, 126, 322], "modelbuildercommand": [0, 123, 124, 322], "modelbuildercommanddecor": [0, 123, 124], "modelfil": 176, "moder": 25, "modern": [96, 133, 356], "modern_e_wordtyp": 96, "modes_of_being_with_mot": 307, "modesto": [97, 307], "modif": [52, 120, 204, 206, 209, 243, 281, 284, 291, 314, 347], "modifi": [25, 28, 52, 57, 104, 105, 107, 110, 116, 117, 119, 120, 121, 124, 131, 162, 167, 172, 179, 182, 197, 206, 218, 234, 235, 243, 248, 258, 267, 275, 276, 281, 282, 284, 291, 300, 302, 307, 311, 314, 322, 347, 356], "modified_precis": [0, 256, 258], "modul": [300, 307, 309, 311, 314, 319, 322, 335, 336, 338, 347, 351, 356], "moeder": 348, "moest": 336, "mohammad": 262, "moin": 356, "mole": 333, "molina": 218, "moment": [57, 91, 259, 313], "mon": 322, "monei": [29, 192, 244, 292, 299, 307, 353], "moni": 234, "monolingu": [57, 106], "monoton": [273, 274], "monstrou": 306, "montant": 333, "month": [57, 65, 301, 356], "monthli": 344, "moonshin": 307, "mor": 301, "more": [12, 14, 25, 28, 29, 30, 31, 33, 37, 52, 55, 57, 58, 59, 61, 63, 64, 66, 67, 68, 71, 72, 74, 75, 79, 80, 81, 83, 84, 86, 89, 94, 99, 104, 107, 108, 111, 113, 117, 118, 119, 121, 131, 135, 137, 142, 144, 146, 147, 148, 156, 159, 161, 162, 165, 167, 171, 173, 174, 177, 178, 179, 182, 186, 188, 191, 197, 198, 204, 209, 213, 214, 215, 217, 218, 221, 223, 224, 225, 229, 231, 232, 233, 234, 236, 239, 247, 248, 253, 258, 259, 262, 265, 266, 267, 274, 275, 277, 281, 282, 284, 289, 299, 300, 302, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 322, 328, 333, 335, 336, 343, 344, 345, 346, 347, 349, 351, 352, 354, 356], "more_prompt": 113, "morefeatur": 120, "moreov": [57, 72, 135, 315], "moreovo": 112, "morethuent": 217, "morgan": 271, "morn": [306, 354], "morphem": 159, "morphi": [55, 57, 107, 211], "morphlist": [57, 76], "morpho": 333, "morpholog": [13, 57, 75, 107, 159, 160, 199, 200, 207, 223, 275, 282, 342], "morphologi": [55, 57, 60, 199, 356], "morphological_substitut": [55, 57, 107], "morphs2str": [57, 76], "mortal": [322, 330, 337], "morten": 358, "mortgag": 344, "mose": [57, 106, 242, 254, 356], "mosesdecod": [242, 254], "mosqu": 336, "most": [7, 8, 14, 28, 30, 31, 32, 33, 35, 38, 46, 50, 52, 57, 59, 72, 104, 107, 117, 119, 121, 129, 135, 160, 161, 162, 171, 172, 173, 174, 178, 179, 196, 197, 198, 203, 213, 214, 215, 216, 218, 223, 224, 231, 232, 233, 234, 246, 253, 265, 267, 268, 275, 277, 281, 284, 289, 299, 301, 302, 303, 305, 306, 307, 308, 309, 314, 315, 316, 317, 322, 323, 333, 334, 335, 338, 339, 343, 344, 345, 346, 347, 351, 356], "most_common": [305, 334], "most_general_unif": [0, 123, 129], "most_informative_featur": [30, 33, 35], "most_similar": 317, "mostli": [103, 218, 229, 243], "mot": [57, 65, 256, 257, 263, 264, 265, 266, 267, 301, 346], "moth": 307, "mother": [57, 65, 72, 301, 315, 352], "mother_of": 337, "motion": [57, 72, 156, 315], "motiv": [111, 215, 266], "motorcar": 351, "mots_index": 257, "mountain": 306, "mous": [312, 313], "mouth": 198, "move": [8, 100, 111, 114, 117, 119, 174, 251, 268, 356], "move_dot_forward": [159, 162, 167], "movement": 119, "moveto": [114, 119], "movi": [63, 197, 339, 356], "movie_neg": 197, "movie_review": 307, "movimenta": 333, "mo\u00e7a": 333, "mp": 169, "mpalmer": [57, 105], "mpcheck": 347, "mpdbvq": 169, "mpg": 33, "mpre": 333, "mptree": 347, "mr": [203, 243, 306, 307, 339], "mrf": 258, "mrg": [307, 335, 354], "msd": [57, 79, 307], "msd_to_univers": [57, 79], "msg": 191, "msi3": 205, "msnm": 20, "mst": [57, 107, 170, 291], "mt": [259, 261, 269, 271, 356], "mte": [55, 57], "mtecorpusread": [55, 57, 79, 356], "mtecorpusview": [55, 57, 79], "mtefileread": [55, 57, 79], "mtetagconvert": [55, 57, 79], "mteval": [242, 258, 271], "mtevalbleu": 242, "mu": [192, 205], "much": [14, 24, 46, 57, 68, 72, 86, 107, 113, 135, 162, 229, 238, 243, 281, 284, 307, 309, 317, 322, 343, 344, 351], "muffin": [163, 236, 239, 242, 244, 247, 249, 253, 254, 341, 344], "mui3": 205, "muita": 333, "muito": 333, "mukden": 300, "mule": 342, "mulher": 333, "mult": [117, 326], "multex": 79, "multext": [57, 79, 307, 356], "multi": [31, 46, 57, 69, 72, 117, 119, 144, 147, 215, 241, 273, 275, 277, 294, 306, 347, 356], "multi_comma": [236, 252], "multi_dash": [236, 252], "multi_dot": [236, 252], "multi_kappa": [143, 144], "multiclass": [25, 27], "multiclassifieri": [0, 30, 31], "multidimension": 170, "multidisciplinari": 356, "multilin": [29, 57, 58, 63, 66, 68, 71, 87, 90, 91, 99, 243, 244, 345], "multilingu": [57, 107, 243, 351, 356], "multilistbox": [0, 114, 117], "multinomialnb": 38, "multiparentedtre": [0, 275, 276, 277], "multipl": [8, 28, 29, 39, 57, 69, 70, 72, 104, 107, 120, 126, 128, 144, 148, 159, 163, 169, 174, 175, 196, 225, 245, 249, 258, 265, 269, 273, 274, 275, 277, 289, 305, 314, 315, 326, 329, 330, 332, 337, 338, 344, 347, 351], "multipli": [123, 125, 146, 205, 258], "multiword": [57, 72, 307, 315], "mung": 239, "munic": 333, "munn": 356, "murder": 307, "murthi": [68, 90], "museo_de_art": 336, "museo_de_bellas_art": 336, "mushroom": 298, "muss": 344, "must": [15, 28, 31, 33, 34, 38, 46, 51, 57, 72, 111, 113, 115, 117, 118, 119, 120, 121, 124, 129, 131, 144, 148, 160, 161, 162, 169, 170, 172, 175, 179, 185, 190, 191, 205, 214, 218, 219, 223, 224, 225, 231, 232, 234, 235, 237, 240, 243, 244, 254, 263, 264, 265, 266, 267, 274, 275, 279, 281, 284, 288, 291, 298, 299, 302, 307, 314, 318, 322, 323, 326, 332, 334, 343, 344, 346, 347], "mustard": 198, "mustardse": 307, "mustn": 198, "mustnt": 198, "mutabl": [52, 120, 179, 344], "mutableoptionmenu": [0, 114, 119], "mutableprobdist": [0, 179, 334], "mutual": [88, 146, 305, 351], "mwa": [57, 106, 356], "mwa_ppdb_xxxl_fil": [55, 57, 106], "mwappdbcorpusread": [55, 57, 106], "mwe": [0, 236], "mwetoken": [0, 236, 241], "mx1000m": [224, 249], "mx2g": 250, "mx4g": 175, "mxpost": 253, "my": [24, 36, 111, 162, 163, 165, 167, 169, 175, 252, 253, 294, 307, 310, 320, 332, 344, 347], "my_al": 346, "my_corpu": 307, "my_genesi": 307, "my_sent_token": 307, "mybg": 311, "mysteri": [307, 334], "mytext": 234, "mytoi": 309, "m\u00e1quina": 351, "m\u00e3e": 333, "m\u00e3o": 333, "m\u00fasica": 208, "m\u130c\ua818\ufeaf\u1e2d\uabb7": 242, "m\u2139\u17a7\u1469\ufb5e\ua5f3\u1f05": 242, "n": [0, 32, 33, 35, 42, 43, 46, 49, 51, 57, 58, 61, 66, 67, 70, 71, 72, 79, 84, 88, 89, 91, 92, 93, 95, 99, 106, 107, 113, 119, 120, 121, 124, 131, 135, 137, 143, 144, 145, 146, 155, 164, 165, 168, 170, 171, 172, 174, 178, 179, 186, 188, 197, 211, 213, 214, 215, 216, 223, 225, 232, 233, 234, 235, 236, 239, 243, 244, 247, 252, 253, 254, 258, 259, 262, 265, 271, 275, 279, 281, 282, 284, 291, 292, 298, 299, 300, 301, 305, 307, 309, 311, 312, 313, 314, 315, 316, 317, 320, 325, 326, 328, 329, 332, 333, 334, 335, 336, 338, 340, 341, 343, 344, 345, 347, 348, 351, 352, 353, 354], "n0": 344, "n12": 307, "n_all": [123, 130, 146, 262], "n_all_output": 262, "n_all_target": 262, "n_and": [123, 130], "n_app": [123, 130], "n_atom": [123, 130], "n_compani": 328, "n_compon": 317, "n_eq": [123, 130], "n_exist": [123, 130], "n_iff": [123, 130], "n_ii": [146, 305], "n_iii": 146, "n_iiii": 146, "n_iiix": 146, "n_iix": 146, "n_iixi": 146, "n_iixx": 146, "n_imp": [123, 130], "n_instanc": [197, 339], "n_io": [146, 305], "n_ix": [146, 305], "n_ix_xi_tupl": 146, "n_ixi": 146, "n_ixii": 146, "n_ixix": 146, "n_ixx": 146, "n_ixxi": 146, "n_ixxx": 146, "n_match": 262, "n_new": 328, "n_new_compani": 328, "n_oi": [146, 305], "n_oo": [146, 305], "n_or": [123, 130], "n_prop": [123, 130], "n_review": [57, 91, 307], "n_scalar": [195, 198], "n_w1": 328, "n_w1_w2": 328, "n_w1_w2_w3": 328, "n_w1_w2_w3_w4": 328, "n_w1_w3": 328, "n_w2": 328, "n_w2_w3": 328, "n_w2_w3_w4": 328, "n_w3": 328, "n_w4": 328, "n_xi": [146, 305], "n_xii": 146, "n_xiii": 146, "n_xiix": 146, "n_xix": 146, "n_xixi": 146, "n_xixx": 146, "n_xx": [146, 305], "n_xxi": 146, "n_xxii": 146, "n_xxix": 146, "n_xxx": 146, "n_xxxi": 146, "n_xxxx": 146, "na": [239, 253, 333], "na2": 205, "naacl": [240, 248, 258, 346], "nabla": 192, "nacion": 333, "nacionalismo": 333, "nada": 333, "nai3": 205, "nairobi": 307, "naiv": [35, 36, 38, 144, 197, 300, 303], "naive_bay": [38, 303], "naivebay": [0, 30, 44, 223, 356], "naivebayesclassifi": [0, 30, 35, 36, 170, 196, 223, 303, 339], "naivebayesdependencyscor": [0, 159, 170], "name": [0, 25, 27, 28, 29, 30, 32, 33, 36, 37, 39, 43, 47, 55, 57, 59, 60, 61, 62, 64, 65, 69, 70, 71, 72, 73, 75, 81, 82, 84, 85, 86, 89, 93, 98, 100, 105, 107, 108, 109, 110, 111, 112, 113, 117, 119, 120, 121, 124, 125, 127, 131, 133, 134, 144, 148, 162, 164, 167, 169, 176, 179, 181, 182, 184, 187, 190, 191, 192, 194, 209, 214, 215, 224, 234, 235, 236, 243, 253, 255, 287, 288, 289, 300, 301, 307, 309, 311, 312, 313, 314, 315, 322, 326, 332, 333, 335, 338, 343, 344, 351, 354, 356], "name_or_path": 120, "name_pattern": 131, "named_ent": [0, 25], "namedtemporaryfil": 176, "nameerror": 322, "names_demo": [0, 30, 41, 43], "names_demo_featur": [0, 30, 43], "namespac": [79, 80, 134], "nand": 345, "nanswer": 307, "naquel": 333, "narad": 356, "nasiriya": 163, "natcorp": 61, "nathan": [57, 62, 307, 356, 358], "nation": [57, 61, 68, 80, 91, 213, 234, 336, 356], "natur": [0, 46, 67, 96, 182, 188, 225, 281, 284, 293, 300, 307, 326, 356], "natural_language_processing_with_python": 356, "navaho": [57, 103], "navaho_din": [57, 103], "navajo": [57, 103], "navig": 307, "nb": [38, 148, 213, 217, 314, 323, 354, 356], "nba": 307, "nbest": 305, "nbp": [57, 106], "nbsp": 192, "nc": [96, 179, 220, 307], "ncheirass": 333, "nck": [143, 144, 291], "ncollect": 113, "ncomo": 333, "nd": [133, 203], "ndash": 192, "ndiciou": 333, "ndirectori": 113, "ndito": 333, "ndownload": 113, "ndp": 170, "ne": [37, 55, 57, 69, 93, 119, 192, 307], "ne2": 205, "ne_chunk": [0, 25, 180, 192, 354], "ne_chunk_s": [0, 25], "ne_label": 192, "nearbi": 215, "nearest": [114, 117], "necess": 333, "necessari": [13, 33, 57, 80, 81, 89, 113, 119, 135, 170, 172, 191, 235, 236, 240, 248, 253, 258, 294, 307, 355], "necessarili": [57, 107, 223, 267, 275, 277, 351], "nechunkpars": [0, 25, 27], "nechunkparsertagg": [0, 25, 27], "ned": [336, 344], "nee0": 205, "need": [14, 28, 30, 33, 39, 43, 46, 52, 57, 60, 65, 72, 80, 91, 104, 107, 110, 111, 113, 117, 119, 121, 135, 137, 144, 148, 162, 163, 170, 179, 182, 190, 206, 217, 218, 219, 224, 231, 235, 236, 243, 253, 254, 260, 273, 281, 284, 287, 294, 306, 307, 312, 313, 314, 315, 322, 329, 334, 338, 343, 346, 347, 351, 355, 356], "needn": 198, "neednt": 198, "neergaard": 358, "neg": [29, 33, 52, 55, 57, 63, 83, 91, 95, 111, 117, 119, 131, 147, 170, 197, 198, 214, 223, 243, 266, 267, 274, 307, 311, 313, 317, 328, 339, 347], "neg_scor": [55, 57, 95, 340], "negat": [119, 124, 180, 191, 195, 197, 198, 307, 311, 322, 326, 339], "negatedexpress": [0, 180, 184, 188, 191], "negative300": 317, "negative_tweet": 307, "neglect": 307, "negr": 208, "negro": 208, "negscor": [95, 340], "nei": [135, 138, 140, 179, 346], "neighbor": [57, 72, 256, 261, 267, 268], "neighborhood": 233, "neither": [57, 65, 121, 191, 198, 339, 343], "nek": 345, "nem": 333, "nemo": [1, 6], "nemo_app": [0, 1], "nenhuma": 333, "neot": 109, "nep": [275, 278], "neq": [180, 191], "neq_list": [180, 191], "ner": [39, 163, 222, 356], "nertagg": 222, "nervou": 234, "ness": [205, 216, 223, 333, 343], "nessa": 333, "nest": [28, 32, 57, 79, 80, 107, 108, 120, 186, 205, 246, 255, 275, 278, 282, 291, 302, 314, 330, 344, 347, 351], "nestado": 333, "net": [53, 179, 216, 356], "netherland": [57, 72, 358], "network": 288, "networkx": 164, "neu": 339, "neural": [135, 175, 262, 356], "neurophysiolog": 252, "neutral": [197, 198, 333], "nevada": 204, "neve": 333, "never": [35, 43, 104, 119, 162, 198, 206, 275, 277, 279, 291, 307, 339, 343, 347], "new": [2, 10, 13, 14, 25, 28, 33, 46, 52, 57, 58, 62, 64, 66, 71, 72, 73, 74, 75, 78, 79, 80, 81, 83, 85, 86, 87, 89, 92, 94, 95, 99, 100, 102, 103, 104, 107, 108, 109, 111, 113, 117, 118, 119, 120, 121, 124, 130, 131, 135, 136, 137, 138, 142, 147, 156, 162, 163, 165, 167, 170, 171, 172, 173, 174, 176, 178, 179, 182, 184, 186, 190, 191, 196, 202, 209, 210, 213, 217, 218, 223, 232, 233, 234, 236, 238, 239, 240, 242, 244, 247, 249, 253, 254, 257, 263, 264, 265, 266, 267, 268, 274, 275, 276, 280, 281, 282, 284, 286, 289, 291, 294, 300, 302, 309, 311, 313, 314, 317, 322, 325, 333, 334, 335, 341, 342, 344, 345, 346, 347, 351, 356], "new_assumpt": 124, "new_edg": 162, "new_end": [162, 167], "new_id": [12, 13], "new_index": 170, "new_model": 317, "new_nod": 170, "new_p": 178, "new_prop": 127, "new_sig": 127, "new_token_pad": 121, "new_tre": 178, "new_var": 120, "new_weight": 33, "new_wrapp": [0, 112], "newchild": [118, 119], "newclassnam": 131, "newcom": 356, "newer": 356, "newfoundland": 351, "newli": [117, 190, 347], "newlin": [111, 177, 219, 243, 244, 247, 255, 345], "newnod": 347, "newspap": 333, "newswir": 73, "newton": 33, "newvar": [184, 191], "next": [0, 7, 8, 16, 50, 104, 111, 113, 119, 162, 163, 165, 173, 180, 182, 185, 190, 191, 255, 260, 273, 294, 300, 307, 333, 336, 351], "next_src_phrase_span": 274, "next_with_bind": [159, 167], "nextcategori": [0, 12, 16], "nextsym": [12, 14, 159, 162, 165], "nf": 33, "nfarrai": 33, "nfmap": 33, "nfp": 163, "nftranspos": 33, "ng": [67, 273, 307, 333], "ngram": [0, 53, 57, 77, 135, 136, 137, 138, 139, 140, 143, 146, 196, 258, 259, 271, 273, 291, 305, 325, 333, 343, 356], "ngram1": [57, 77], "ngram2": [57, 77], "ngram_count": [135, 137], "ngram_fd": 305, "ngram_ord": 325, "ngram_text": [135, 137], "ngramassocmeasur": [0, 143, 146, 196], "ngramcount": [0, 135, 136, 137, 138, 140], "ngrams_fn": [135, 136, 138], "ngramtagg": [0, 213, 223], "nhaa": [275, 278], "nher": 307, "ni": 192, "nice": [14, 112, 135, 232], "niceee": 344, "nicer": 131, "nichleson": 148, "nichulson": 148, "nicodemu": 109, "niemand": 274, "night": [307, 351], "nijmegen": 358, "nik": [143, 144], "nil": 127, "nilsson": 127, "nin": [113, 163, 236, 239, 244, 247, 249, 253, 254, 341, 344], "nine": 356, "nineteen": 301, "nineteeth": 91, "nishant": 262, "nist": [0, 73, 100, 236, 258, 271, 356], "nist_length_penalti": [0, 256, 271], "nist_scor": [0, 256], "nisttoken": [0, 236, 242], "nit": 307, "nitin": [68, 356], "nivr": [164, 176], "njindal": 68, "nk": [143, 144], "nkeyboard": 113, "nkjp": [55, 57, 356], "nkjpcorpus_header_view": [55, 57, 80], "nkjpcorpus_morph_view": [55, 57, 80], "nkjpcorpus_segmentation_view": [55, 57, 80], "nkjpcorpus_text_view": [55, 57, 80], "nkjpcorpusread": [55, 57, 80], "nl": [42, 57, 106], "nld": 351, "nlg": 356, "nline": 345, "nlp": [38, 53, 92, 140, 163, 175, 202, 218, 224, 328, 354, 356], "nltk": [296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 356], "nltk2": 107, "nltk3": [107, 356], "nltk_contrib": 46, "nltk_data": [55, 57, 65, 78, 80, 87, 103, 111, 113, 269, 294, 301, 307, 308], "nltk_data_dir": 65, "nltk_data_subdir": 110, "nltk_extens": [199, 206], "nltk_org": 288, "nltkdemo18": [0, 213, 215], "nltkdemo18plu": [0, 213, 215], "nltkdestructivewordtoken": 239, "nltkdrtboxerdrsinterpret": [0, 180, 181], "nltkwordtoken": [0, 236, 239, 356], "nmod": [163, 166, 175, 310], "nmodel": 113, "nmore": 345, "nmtpy": 242, "nn": [25, 28, 39, 57, 62, 147, 163, 166, 175, 176, 177, 213, 214, 216, 219, 220, 221, 222, 223, 224, 226, 232, 235, 302, 307, 310, 311, 318, 319, 328, 332, 335, 341, 343, 344, 347, 349, 351, 354], "nn1": [57, 72, 205, 297], "nno": 351, "nnp": [25, 39, 163, 166, 213, 214, 226, 275, 282, 307, 310, 318, 319, 332, 335, 343, 347, 349, 354], "noam": 155, "nob": 351, "noblest": 307, "nobodi": 274, "nocturna": 333, "node": [0, 7, 28, 29, 32, 51, 57, 82, 86, 93, 107, 108, 109, 118, 121, 162, 163, 164, 167, 169, 170, 171, 172, 173, 178, 183, 187, 188, 194, 235, 275, 276, 277, 279, 280, 281, 282, 284, 291, 307, 310, 333, 335, 336, 347, 349, 351], "node_": 118, "node_address": 164, "node_attr": 118, "node_index": [164, 170], "node_pattern": [275, 282, 347], "nodecolor": [275, 279], "nodecoord": [0, 275, 279], "nodedist": [275, 279, 347, 348], "nodelist": 164, "nodesep": [275, 282], "noi3": 205, "nois4j": 205, "noise_mak": [57, 72], "noit": 333, "noix4ct": 205, "nom": [311, 313, 332, 338], "nombank": [55, 57, 307], "nombank_ptb": 307, "nombankchaintreepoint": [55, 57, 81], "nombankcorpusread": [55, 57, 81], "nombankinst": [55, 57, 81], "nombankpoint": [55, 57, 81], "nombanksplittreepoint": [55, 57, 81], "nombanktreepoint": [55, 57, 81], "nomfil": [57, 81], "nomin": [44, 344], "non": [25, 26, 28, 33, 48, 49, 53, 57, 58, 59, 61, 62, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 79, 80, 82, 83, 84, 85, 86, 87, 93, 94, 98, 99, 104, 105, 107, 108, 109, 110, 118, 119, 120, 121, 131, 134, 163, 164, 170, 171, 177, 180, 185, 186, 191, 218, 231, 233, 234, 242, 243, 244, 246, 253, 255, 266, 267, 269, 275, 279, 281, 282, 284, 307, 311, 313, 321, 325, 330, 338, 345, 347, 351], "non_break": [236, 252], "non_head_distortion_t": [266, 267], "non_head_vacancy_t": 267, "nonascii": [236, 242], "nonbreak": [57, 106], "nonbreaking_prefix": [57, 106], "nonbreakingprefixescorpusread": [55, 57, 106], "noncommerci": 96, "none": [13, 14, 16, 23, 27, 28, 29, 32, 33, 34, 35, 37, 41, 43, 44, 48, 49, 50, 51, 52, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 113, 115, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 134, 135, 136, 137, 138, 142, 144, 147, 150, 151, 156, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 205, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 229, 231, 232, 233, 234, 235, 241, 243, 249, 250, 251, 255, 257, 258, 263, 264, 265, 266, 267, 268, 270, 275, 276, 277, 279, 280, 281, 282, 286, 289, 290, 291, 292, 294, 303, 304, 307, 310, 313, 314, 321, 322, 330, 332, 335, 337, 338, 343, 344, 345, 346, 347, 351], "nonequ": [120, 314], "nonexecut": [166, 310], "nonexist": 356, "nonlex": [121, 213], "nonmonoton": [0, 123, 295], "nonneg": [179, 291], "nonproject": 170, "nonprojective_conll_parse_demo": [0, 159, 170], "nonprojectivedependencypars": [0, 159, 310], "nonterm_pars": 121, "nontermin": [0, 14, 28, 115, 121, 162, 167, 168, 171, 313, 332], "nonvehicl": 307, "nonverbal_express": 307, "nonzero": [33, 131, 179], "noosa": 338, "nope": 198, "nor": [191, 198, 339], "norm": [55, 57, 92, 199, 201, 202, 204, 281, 284], "norm_cdf": [0, 256, 260], "norm_logsf": [0, 256, 260], "normal": [28, 35, 57, 59, 61, 62, 64, 65, 69, 70, 71, 72, 75, 82, 84, 85, 92, 93, 98, 99, 105, 107, 108, 109, 121, 179, 180, 191, 193, 195, 198, 201, 202, 204, 213, 221, 223, 234, 251, 258, 260, 262, 273, 275, 279, 281, 282, 284, 291, 301, 307, 311, 312, 318, 319, 320, 326, 330, 345, 349, 351], "normal0117": [57, 103], "normalis": [46, 48, 49, 50, 51, 218], "normalize_whitespac": 163, "normpath": 307, "norouzi": 262, "nort": 333, "north": 100, "northern": 100, "northumbra": 109, "northwest": [332, 356], "norwegian": [209, 342], "norwegianstemm": [0, 199, 209], "nos": 333, "nosub_pars": 298, "not_found": 232, "not_instal": [0, 113], "not_list": [180, 191], "notabl": 144, "notat": [0, 96, 135, 137, 144, 163, 186, 256, 275, 282, 313, 314], "note": [0, 8, 15, 25, 28, 33, 39, 44, 46, 53, 57, 59, 72, 79, 80, 83, 91, 98, 100, 104, 107, 108, 111, 117, 118, 119, 120, 121, 135, 136, 137, 138, 142, 144, 145, 147, 155, 159, 162, 163, 164, 166, 167, 174, 176, 179, 196, 198, 206, 209, 213, 215, 222, 223, 225, 229, 231, 233, 243, 244, 248, 253, 254, 262, 263, 267, 271, 273, 275, 277, 282, 289, 298, 307, 309, 311, 313, 314, 315, 332, 334, 335, 347, 351], "note1": 216, "notequ": 119, "noth": [25, 28, 57, 105, 119, 124, 173, 174, 198, 232, 307, 311, 345], "nothman": [356, 358], "notic": [57, 72, 135, 333], "notimplementederror": [111, 131, 302, 303, 323], "notin": 192, "notion": [182, 300], "notsubset": 119, "noun": [25, 26, 28, 55, 57, 72, 79, 81, 88, 89, 107, 156, 211, 213, 216, 217, 220, 223, 266, 302, 305, 307, 315, 318, 332, 333, 343, 347, 348, 351, 352], "noun1": [57, 88, 307], "noun2": [57, 88, 307], "nounsfil": [57, 81], "nov": [166, 216, 310], "novel": 201, "novemb": 356, "now": [57, 107, 135, 233, 262, 305, 306, 307, 309, 311, 313, 314, 318, 323, 332, 333, 334, 339, 343, 344, 347, 351, 356], "nowher": [57, 72, 198, 315], "np": [25, 28, 29, 39, 57, 62, 88, 121, 163, 174, 175, 213, 222, 223, 235, 275, 278, 279, 282, 298, 299, 300, 302, 307, 309, 311, 313, 314, 316, 317, 320, 326, 332, 333, 335, 338, 341, 344, 347, 348, 349, 356], "npp": 170, "nprop": 333, "nps_chat": [55, 57], "npschatcorpusread": [55, 57, 82], "nr": [0, 179, 223, 332, 344, 348], "nr_iter": 221, "nr_tree": 332, "nschneid": [57, 62, 358], "nsp": 53, "nsub": 192, "nsubj": [163, 175], "nt1": 332, "nt2": 332, "nth": 258, "nthank": [163, 236, 239, 244, 247, 249, 253, 254, 341, 344], "nthat": 113, "nthe": 113, "nthere": 306, "nthi": 307, "nti": [57, 72], "ntild": 192, "ntop": 164, "ntt": 273, "ntwo": [163, 236, 239, 244, 247, 249, 253, 344], "nu": 192, "nueva": 298, "null": [164, 169, 258, 263, 264, 265, 266, 267, 268, 310], "null_binary_rel": 338, "nullableinttoken": [180, 181], "nullifi": 198, "num": [57, 61, 72, 79, 93, 97, 125, 126, 128, 182, 186, 204, 216, 220, 234, 300, 301, 305, 307, 311, 313, 315, 332, 333, 338, 341, 343, 347], "num_clust": [46, 47, 48, 49, 50], "num_edg": [14, 159, 162, 165, 167, 171, 332], "num_increasing_pair": 273, "num_leav": [159, 162], "num_mean": 50, "num_memori": 217, "num_possible_pair": 273, "num_sent": [218, 229], "num_word": 136, "numa": 333, "number": [14, 23, 25, 28, 29, 30, 31, 33, 38, 43, 46, 47, 48, 49, 50, 51, 52, 53, 57, 65, 72, 78, 81, 85, 89, 92, 100, 104, 106, 107, 111, 113, 117, 119, 120, 124, 125, 126, 128, 131, 135, 137, 138, 142, 144, 146, 147, 148, 150, 156, 158, 162, 163, 164, 165, 167, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 182, 186, 192, 196, 197, 214, 215, 216, 217, 218, 220, 221, 223, 225, 229, 234, 238, 243, 251, 252, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 279, 281, 282, 284, 286, 289, 291, 300, 301, 305, 307, 311, 313, 314, 315, 316, 321, 322, 328, 329, 332, 335, 343, 344, 345, 346, 351, 353, 356], "number_possible_pair": 273, "number_regex": [236, 242], "numedg": [12, 14], "numer": [29, 33, 35, 38, 44, 140, 144, 146, 236, 256, 258, 307], "numpars": [162, 165, 332], "numpi": [34, 41, 46, 48, 251, 317, 328, 355, 356], "nw": [119, 259], "nwhen": 113, "nwt": 73, "nx": [164, 307], "nx_graph": [159, 164], "ny": [163, 222, 224], "nyt_19980315": [73, 307, 336], "nyt_19980403": [73, 307], "nyt_19980407": [73, 307], "n\u00e3o": 333, "n\u04e5": [], "n\u04e9\ufb46\u19b9\ua34e\ua552": [], "n\u2d0b\ua81d": [], "o": [0, 39, 57, 89, 102, 132, 144, 163, 176, 187, 190, 208, 214, 216, 218, 222, 224, 229, 307, 309, 314, 318, 328, 329, 330, 333, 334, 336, 343, 345, 351, 354, 356], "o1": 109, "o12": 109, "o2": 109, "o23": 109, "o24": 109, "o3": 109, "o34": 109, "o4": 109, "o_k": 218, "o_t": 218, "oacut": 192, "oakland": 358, "oana": [57, 79, 307], "oat": 67, "oath": 307, "oauth": [289, 290], "oauth_token": [289, 290], "oauth_token_secret": [289, 290], "obei": [258, 259, 262, 269, 271, 273], "obj": [57, 63, 132, 163, 166, 176, 182, 192, 215, 221, 223, 231, 232, 301, 307, 309, 310, 312, 313, 318, 339], "obj_doc": 339, "obj_scor": [55, 57, 95, 340], "objcas": 313, "objclass": [192, 336], "object": [13, 15, 16, 23, 26, 28, 29, 31, 33, 35, 37, 38, 40, 42, 43, 44, 46, 47, 51, 52, 57, 58, 59, 68, 69, 71, 72, 73, 78, 79, 80, 81, 84, 88, 89, 91, 92, 94, 95, 98, 99, 100, 102, 104, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 142, 144, 146, 147, 149, 156, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 176, 177, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 196, 197, 198, 200, 211, 212, 214, 216, 217, 218, 219, 221, 231, 232, 233, 234, 238, 239, 243, 251, 254, 255, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 269, 274, 275, 276, 279, 286, 287, 288, 289, 290, 291, 292, 300, 304, 309, 311, 313, 314, 315, 322, 323, 326, 335, 336, 339, 345, 347, 351, 353, 356], "objsym": [192, 336], "objtext": [192, 336], "obl": 163, "oblig": 307, "obra": 333, "observ": [83, 90, 144, 179, 218, 266, 333], "obtain": [46, 52, 57, 61, 72, 80, 100, 107, 120, 129, 191, 197, 245, 263, 264, 266, 267, 268, 275, 282, 288, 307, 315, 339], "oc": [57, 60], "occasion": 198, "occitan": [57, 60], "occupi": [256, 267, 336], "occur": [30, 33, 37, 46, 50, 57, 107, 119, 131, 135, 142, 147, 156, 162, 179, 192, 202, 223, 226, 234, 243, 246, 248, 263, 275, 276, 277, 292, 305, 345, 347, 351, 353], "occur_index": 181, "occurr": [13, 28, 52, 53, 120, 121, 146, 181, 184, 191, 192, 196, 214, 226, 234, 251, 254, 271, 275, 276, 306, 307, 313], "ocean": 182, "och": [258, 346], "och2000": 346, "ocirc": 192, "oct": 262, "octob": [344, 356], "odd": [67, 251], "ody1ysutd7o": 140, "oehrl": [240, 248], "oelig": 192, "oepen": 245, "oeuvr": [241, 344], "of2ss": [55, 57, 107], "off": [36, 57, 63, 75, 90, 147, 179, 197, 206, 213, 243, 253, 254, 288, 291, 307, 311, 319, 322, 332, 333, 344, 356], "offens": [315, 339], "offer": [289, 305], "offic": 307, "offici": [203, 271, 273, 291], "offset": [0, 52, 57, 100, 104, 107, 111, 234, 237, 239, 244, 247, 253, 254, 260, 286, 307, 317, 351, 356], "often": [30, 46, 50, 53, 119, 121, 135, 144, 147, 162, 164, 174, 179, 215, 218, 229, 234, 243, 305, 306, 307, 314, 343, 346], "oftentim": 306, "ograv": 192, "oh": [252, 301], "ohio": 252, "oi": [67, 149, 331], "oil": [92, 307], "oili": 307, "ok": [128, 323, 345, 347], "okai": 301, "oken": [162, 171], "old": [57, 109, 130, 166, 210, 234, 291, 301, 307, 310, 344, 351, 356], "old_dir": 309, "old_p": 178, "oldchild": [118, 119], "oldclassnam": 131, "older": [107, 111, 250, 314, 355], "oldi": [182, 300], "oleomargar": 329, "olhar": 333, "olho": 333, "olin": 192, "omega": 192, "omicron": 192, "omit": [99, 100, 164, 182, 275, 282, 289, 300], "omw": [57, 107, 356], "omw1": [57, 107], "omw_read": [57, 107], "omwn": [57, 107], "on_and_on": 347, "on_error": [285, 289], "on_finish": [285, 286, 289], "on_success": [285, 289], "onc": [28, 33, 39, 104, 107, 110, 111, 120, 135, 162, 179, 197, 258, 274, 275, 276, 305, 307, 311, 314, 343, 344, 351], "oncologi": [57, 72], "ond": 333, "one": [8, 14, 25, 28, 29, 30, 31, 33, 34, 35, 36, 46, 49, 50, 52, 53, 55, 57, 59, 63, 64, 65, 66, 72, 74, 79, 80, 81, 82, 86, 89, 99, 100, 104, 106, 107, 108, 113, 117, 119, 120, 121, 124, 125, 128, 131, 133, 135, 136, 138, 142, 144, 148, 152, 156, 157, 159, 160, 162, 163, 165, 167, 169, 171, 172, 174, 176, 177, 178, 179, 182, 186, 187, 189, 191, 192, 196, 205, 206, 213, 215, 218, 223, 229, 231, 232, 233, 234, 241, 243, 248, 252, 258, 263, 264, 265, 266, 267, 268, 272, 273, 274, 275, 277, 281, 282, 284, 287, 289, 294, 300, 306, 307, 309, 311, 318, 319, 323, 326, 332, 333, 335, 339, 344, 345, 346, 347, 349, 351, 352, 356], "one_spac": [236, 252], "one_tag": [57, 75], "ones": [25, 36, 100, 171, 215, 265, 328], "ong": 306, "ongo": [125, 291], "onli": [8, 25, 28, 33, 36, 39, 46, 49, 52, 53, 57, 60, 63, 72, 82, 86, 91, 98, 100, 102, 104, 105, 107, 108, 111, 113, 118, 119, 120, 121, 125, 133, 135, 137, 142, 147, 152, 162, 164, 165, 170, 172, 173, 174, 176, 177, 179, 181, 186, 196, 197, 199, 203, 206, 214, 216, 218, 223, 229, 231, 233, 235, 240, 243, 244, 247, 252, 253, 258, 259, 262, 265, 267, 268, 272, 275, 276, 279, 282, 288, 289, 291, 305, 307, 311, 314, 317, 318, 322, 325, 330, 332, 335, 342, 343, 345, 346, 347, 349, 351], "onlin": [0, 154, 202, 346, 354, 356], "onset": [236, 240], "ontem": 333, "onto": 235, "onward": [243, 347], "onyx": 329, "oov": [93, 135, 136, 138, 343], "op": 306, "open": [0, 10, 55, 57, 59, 65, 104, 107, 111, 113, 118, 119, 124, 131, 144, 180, 186, 190, 191, 208, 219, 234, 246, 248, 255, 275, 282, 294, 307, 309, 311, 314, 317, 323, 333, 336, 351, 354], "open_bracket": [180, 184], "open_punct": [236, 252, 344], "open_punct_r": [236, 252], "open_punctu": [57, 106], "open_str": [0, 255], "openondemandzipfil": [0, 111], "oper": [7, 8, 13, 16, 28, 29, 39, 46, 111, 119, 120, 121, 148, 151, 162, 167, 170, 172, 173, 174, 176, 179, 181, 183, 184, 188, 190, 191, 235, 236, 253, 303, 307, 312, 315, 326, 329, 332, 334, 336, 346, 347, 356], "opinion": [55, 57, 68, 90, 91, 95, 197, 307], "opinion_lexicon": [55, 57], "opinionlexiconcorpusread": [55, 57, 83, 307], "oplu": 192, "opportun": 356, "oppos": 191, "opposit": [121, 124, 152, 305], "opt": 111, "optim": [34, 121, 145, 162, 167, 217, 218, 273, 351, 356], "optimis": 218, "option": [10, 33, 34, 39, 44, 51, 57, 66, 68, 72, 75, 79, 91, 107, 119, 131, 134, 135, 136, 137, 138, 142, 147, 148, 161, 163, 164, 169, 171, 176, 177, 179, 182, 186, 196, 206, 211, 214, 217, 218, 219, 222, 223, 224, 229, 231, 234, 238, 239, 245, 247, 249, 250, 253, 258, 259, 263, 264, 265, 266, 267, 268, 275, 279, 282, 289, 291, 294, 307, 311, 314, 315, 322, 347, 348, 351, 355, 356], "or_list": [180, 191], "orang": 258, "orchestra": 307, "order": [14, 28, 29, 30, 33, 34, 35, 46, 49, 51, 52, 53, 57, 62, 72, 83, 84, 86, 92, 104, 107, 111, 113, 117, 119, 120, 121, 125, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 147, 148, 150, 154, 157, 162, 170, 171, 178, 179, 180, 181, 182, 186, 187, 188, 191, 192, 194, 201, 204, 215, 218, 223, 225, 229, 234, 238, 255, 257, 258, 259, 262, 263, 264, 266, 268, 271, 273, 274, 275, 276, 279, 281, 282, 284, 289, 291, 300, 307, 309, 311, 312, 313, 314, 322, 326, 328, 333, 334, 338, 339, 341, 343, 347, 353, 356], "ordereddict": [0, 52], "ordf": 192, "ordin": 243, "ordinari": 37, "ordm": 192, "oreilli": 356, "orelha": 333, "orexpress": [0, 180, 184, 188, 191], "org": [0, 22, 38, 55, 57, 65, 78, 79, 85, 94, 96, 106, 107, 132, 133, 148, 169, 182, 192, 206, 209, 217, 220, 222, 225, 245, 254, 258, 259, 260, 262, 271, 273, 281, 284, 286, 287, 289, 291, 292, 294, 296, 299, 300, 301, 307, 329, 333, 336, 354, 355, 356, 358], "organ": [25, 29, 57, 94, 107, 119, 159, 163, 171, 192, 224, 291, 307, 336, 347, 351, 352], "organismo": 333, "orient": [100, 118], "origin": [57, 65, 92, 100, 106, 107, 112, 119, 121, 149, 164, 165, 170, 197, 202, 203, 204, 206, 209, 210, 215, 232, 238, 239, 242, 243, 251, 253, 254, 258, 259, 261, 266, 273, 275, 279, 281, 282, 284, 292, 301, 322, 335, 342, 347, 349, 351, 354, 356], "original_algorithm": [199, 206], "original_best_arc": [159, 170], "original_length": 251, "original_tag": [227, 232], "original_text": 119, "oriol": 262, "ork": 306, "ormiston": 356, "orn": 100, "orosiu": 109, "orphan": 307, "orth": [279, 283], "ortho_context": [236, 243], "ortho_thresh": 243, "orthograph": 243, "orwel": 307, "osborn": 261, "oserror": [131, 163], "oslash": 192, "ostara": 329, "ostrich": [127, 330], "ota": [57, 61, 109], "other": [7, 10, 13, 15, 33, 36, 51, 53, 57, 62, 68, 72, 76, 77, 81, 89, 93, 100, 104, 105, 107, 110, 113, 120, 124, 129, 131, 135, 142, 148, 159, 160, 161, 162, 164, 167, 170, 172, 179, 182, 184, 186, 187, 190, 191, 201, 203, 206, 216, 218, 220, 221, 223, 231, 232, 233, 234, 235, 236, 240, 242, 243, 244, 246, 248, 252, 258, 261, 263, 264, 265, 266, 267, 268, 275, 282, 287, 298, 302, 305, 314, 315, 322, 323, 328, 333, 339, 343, 351, 356], "other_co": 307, "other_indic": 190, "other_typ": 191, "otherwai": 344, "otherwis": [7, 33, 34, 39, 52, 57, 61, 65, 77, 104, 111, 113, 117, 118, 119, 120, 124, 131, 133, 135, 137, 142, 164, 173, 174, 179, 185, 190, 191, 218, 231, 232, 243, 255, 289, 294, 305, 307, 332, 334, 347], "othr": 144, "otild": 192, "otim": 192, "otto": [240, 248], "ou": 333, "ouamour": 201, "ought": [67, 328, 343], "oughtn": 198, "oughtnt": 198, "ouml": 192, "ounc": 163, "our": [135, 196, 245, 262, 302, 305, 307, 313, 318, 322, 333, 334, 339, 343, 344, 346, 347, 356], "ouro": 333, "out": [42, 51, 52, 57, 62, 104, 108, 109, 111, 113, 120, 125, 135, 136, 148, 157, 163, 179, 182, 183, 188, 192, 203, 209, 233, 235, 244, 247, 251, 257, 267, 268, 275, 276, 288, 300, 306, 307, 309, 313, 317, 333, 336, 339, 343, 344, 347], "out_fil": 317, "outcom": [179, 333], "outdat": [275, 282], "outdoor": 306, "outer": 170, "outerspac": [180, 184], "outfil": [44, 197, 287], "outlin": [118, 119, 170], "output": [28, 29, 33, 34, 41, 44, 46, 50, 57, 72, 107, 120, 126, 131, 135, 145, 147, 148, 162, 163, 165, 166, 167, 169, 171, 173, 174, 177, 178, 181, 182, 192, 196, 197, 214, 216, 217, 218, 225, 229, 231, 233, 235, 239, 243, 245, 251, 254, 259, 261, 262, 266, 267, 268, 271, 272, 273, 274, 275, 279, 287, 288, 289, 291, 298, 300, 302, 305, 307, 309, 310, 314, 317, 336, 339, 343, 351], "output_format": [128, 322], "output_markdown": [0, 195, 197], "outputfilenam": 169, "outra": 333, "outro": 333, "outsid": [163, 268, 272, 281, 284, 346, 353], "oval": 119, "ovalwidget": [0, 114, 119], "over": [2, 25, 28, 31, 33, 35, 36, 38, 39, 46, 47, 52, 57, 58, 59, 61, 64, 65, 66, 69, 70, 71, 72, 74, 75, 82, 83, 84, 85, 86, 93, 94, 98, 99, 104, 105, 107, 108, 109, 112, 118, 135, 137, 139, 142, 144, 150, 151, 162, 163, 165, 167, 172, 175, 182, 191, 201, 217, 218, 221, 222, 225, 234, 236, 259, 263, 264, 269, 272, 302, 306, 307, 314, 332, 333, 344, 345, 346, 351, 354], "overal": [2, 29, 258], "overflow": 179, "overgedaan": 336, "overhead": 43, "overheard": 307, "overlap": [25, 26, 28, 30, 37, 120, 231, 258, 259, 271, 275, 279, 292, 314, 353], "overload": 326, "overrid": [28, 57, 59, 87, 113, 124, 131, 134, 179, 243, 268, 275, 282, 307, 309, 334], "overridden": [0, 57, 61, 62, 80, 93, 108, 113, 119, 131, 181, 184, 190, 191, 223, 243], "overs": 305, "overstem": 149, "overt": [57, 72], "overtli": [57, 72], "overview": [0, 180, 287, 288], "overweigh": 148, "overwhelm": 307, "overwrit": 309, "ow": [67, 205], "ow0": 307, "ow2": 307, "own": [35, 57, 72, 92, 102, 110, 111, 119, 120, 233, 246, 275, 277, 307, 311, 315, 335, 336, 342, 347], "ox": [57, 61], "ox2": 109, "oxford": 109, "o\ufd6c\u1238": 242, "p": [7, 8, 10, 35, 36, 57, 67, 79, 88, 89, 91, 107, 109, 111, 120, 121, 127, 129, 130, 135, 142, 145, 147, 148, 150, 166, 171, 178, 179, 182, 183, 191, 197, 214, 218, 220, 225, 232, 238, 240, 242, 245, 261, 268, 275, 282, 299, 300, 302, 303, 307, 309, 310, 312, 313, 314, 316, 317, 318, 320, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 341, 343, 344, 345, 346, 347, 351], "p0": [265, 266, 267], "p02": [258, 259], "p03": [281, 284], "p1": [265, 266, 267, 273, 322, 330, 332, 337], "p103": 179, "p108": [187, 190], "p12": 245, "p1y9m21d": 301, "p1y9m28d": 301, "p2": [322, 330, 332, 337], "p2y1m12d": 301, "p2y1m23d": 301, "p2y1m3d": 301, "p3": [330, 337], "p4": [330, 337], "p5": [57, 79, 330], "p_factor": 148, "p_n": 258, "pa": 345, "pablo": 298, "pabo": 63, "pack": [114, 117, 119, 351], "packag": [34, 38, 44, 53, 107, 108, 110, 111, 126, 128, 164, 177, 243, 282, 291, 294, 303, 305, 307, 322, 326, 328, 355, 356, 358], "package_id": 113, "packt": 356, "pad": [121, 135, 136, 138, 139, 232, 253, 291, 325], "pad_both_end": [135, 139], "pad_fn": [135, 136, 138], "pad_left": [135, 291], "pad_right": [135, 291], "pad_sequ": [0, 135, 291], "paddan": 305, "padded_bigram": 135, "padded_everygram": [0, 135, 139], "padded_everygram_pipelin": [0, 135, 139, 325], "paediatr": [57, 72], "pagam": 333, "pagamento": 333, "page": [113, 140, 176, 206, 245, 294, 299, 356], "pagin": 286, "pai": [92, 208, 307, 333, 339], "paic": [0, 143, 201, 205, 295], "pain": 307, "pair": [23, 32, 33, 34, 35, 41, 46, 49, 52, 55, 57, 72, 75, 92, 106, 107, 119, 120, 121, 125, 127, 144, 148, 151, 161, 162, 174, 179, 180, 182, 186, 192, 194, 223, 232, 233, 243, 257, 258, 260, 263, 264, 267, 268, 269, 272, 273, 291, 300, 302, 307, 314, 315, 324, 328, 336], "pair_count": 328, "pairwis": [0, 291], "paisagem": [208, 333], "pajama": [169, 310], "palavra": 333, "pale": 234, "palmellacea": 329, "palmer": [57, 107, 351], "pan": [57, 75, 333], "panader\u00eda": 298, "pang": [63, 197, 356], "panlex": [57, 84, 85, 356], "panlex_lit": [55, 57], "panlex_swadesh": [55, 57], "panlex_uid": [57, 85], "panlexlanguag": [55, 57, 85], "panlexlitecorpusread": [55, 57, 84], "panlexswadeshcorpusread": [55, 57, 85], "panlingu": [57, 85], "pant": 351, "panton": 358, "pap": 333, "paper": [63, 68, 83, 88, 90, 91, 144, 148, 155, 170, 203, 206, 215, 258, 259, 273, 305, 356], "papineni": 258, "par_count": 251, "para": [55, 57, 59, 64, 66, 75, 78, 79, 86, 87, 99, 109, 192, 307, 333, 358], "para_block_read": [57, 66, 71, 78, 87, 99, 103], "para_path": [57, 79], "paradigm": 356, "paragno": [57, 72], "paragraph": [57, 63, 64, 66, 68, 72, 78, 79, 87, 90, 91, 99, 103, 242, 251, 260, 307, 339], "parallel": [57, 69, 124, 263, 264, 265, 266, 267, 268, 322], "parallel_corpu": [263, 264, 265, 266, 267], "parallelize_preprocess": [0, 291], "parallelproverbuild": [0, 123, 124], "parallelproverbuildercommand": [0, 123, 124], "param": [33, 51, 57, 100, 107, 121, 124, 125, 131, 169, 170, 176, 182, 184, 186, 191, 192, 217, 221, 225, 229, 231, 234, 243, 260, 344], "paramater": 35, "paramet": [13, 14, 23, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 41, 43, 44, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 111, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 142, 145, 147, 148, 149, 150, 151, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 194, 196, 197, 198, 200, 201, 202, 203, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 251, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 286, 287, 289, 290, 291, 292, 307, 309, 311, 312, 338, 344, 347, 351, 356], "parameter": [33, 179, 233], "paramfil": 41, "paraphras": [57, 106], "paras_mod": [57, 75], "parastart": [236, 243], "parecia": 333, "paren": [28, 190, 191, 246, 275, 282, 307], "parens_bracket": [236, 239, 253], "parent": [0, 57, 61, 72, 80, 93, 108, 114, 115, 117, 118, 119, 121, 131, 172, 179, 235, 275, 279, 281, 282, 284, 301, 315], "parent_index": [0, 275, 277, 347], "parent_indic": [0, 275, 277, 347], "parent_of": 337, "parentchar": [275, 281, 282], "parentedtre": [0, 235, 275, 276, 277], "parenthas": 119, "parenthasi": 119, "parenthes": [23, 25, 28, 120, 234, 239, 244, 246, 253, 306, 313, 314, 344], "parenthesi": [25, 57, 62, 243, 246, 307], "parenwidget": [0, 114, 119], "paresd": 120, "pari": [182, 313, 317], "park": 316, "parliament": 307, "pars": [0, 2, 7, 8, 12, 14, 16, 25, 26, 27, 28, 29, 57, 59, 60, 62, 66, 69, 76, 79, 81, 89, 96, 99, 107, 109, 111, 120, 121, 125, 128, 180, 181, 182, 183, 186, 187, 188, 191, 194, 196, 197, 235, 245, 255, 260, 275, 281, 282, 284, 291, 295, 298, 299, 300, 302, 309, 311, 316, 319, 321, 322, 333, 335, 338, 354, 356, 358], "parse_al": [159, 160], "parse_condit": [180, 181], "parse_corpu": [57, 81, 89], "parse_dog": 163, "parse_dr": [180, 181], "parse_error": 312, "parse_fileid_xform": [57, 81, 89], "parse_fox": 163, "parse_friend": 163, "parse_index": [180, 181], "parse_john": 163, "parse_mari": 163, "parse_megam_weight": [0, 30, 34], "parse_on": [159, 160, 169], "parse_output": [213, 224], "parse_repp_output": [236, 245], "parse_s": [0, 159, 160, 163, 169, 175, 180, 194, 338], "parse_sexpr_block": 307, "parse_tadm_weight": [0, 30, 41], "parse_tag": [55, 57, 60], "parse_tagged_s": [159, 169], "parse_text": [159, 163], "parse_to_compil": [180, 187], "parse_to_mean": [180, 187, 319], "parse_to_read": [123, 125], "parse_token_stream": [0, 256, 260], "parse_tweets_set": [0, 195, 197], "parse_vari": [180, 181], "parse_weka_distribut": [30, 44], "parse_weka_output": [30, 44], "parse_with_bindop": [0, 180, 183, 338], "parse_wolf": 163, "parseappl": [0, 12, 16], "parsed_doc": [55, 57, 73, 307, 336], "parsed_docu": [57, 69], "parsed_expr": 338, "parsed_para": [55, 57, 62, 307], "parsed_s": [55, 57, 59, 62, 69, 71, 109, 166, 307, 310, 332, 333, 335, 354], "parsed_word": [55, 57, 62], "parseprimitivecategori": [0, 12, 16], "parser": [1, 2, 3, 7, 8, 14, 16, 25, 26, 27, 28, 29, 78, 111, 120, 121, 125, 159, 160, 161, 162, 163, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 184, 190, 191, 218, 245, 298, 299, 302, 311, 313, 314, 318, 356], "parser_annot": [159, 163], "parser_arg": [162, 165, 167], "parser_dirnam": 169, "parser_eag": 176, "parser_model": 161, "parser_opt": 161, "parser_std": 176, "parseri": [0, 14, 26, 159, 160, 161, 162, 163, 169, 171, 173, 174, 175, 176, 178], "parserul": [199, 205], "parsesubscript": [0, 12, 16], "parsimoni": 198, "parsnip": 298, "part": [1, 28, 55, 57, 65, 69, 72, 75, 79, 81, 89, 93, 99, 105, 107, 117, 119, 135, 136, 142, 156, 162, 165, 172, 182, 192, 199, 209, 211, 213, 214, 218, 221, 223, 225, 234, 235, 243, 251, 266, 274, 275, 281, 282, 284, 292, 301, 307, 314, 315, 317, 334, 339, 343, 345, 351, 356], "part_holonym": 107, "part_meronym": 107, "parti": [258, 259, 262, 269, 271, 273, 289, 322, 356], "partial": [0, 2, 14, 36, 57, 72, 104, 113, 120, 148, 162, 167, 171, 173, 176, 218, 246, 274, 307, 314], "partial_names_demo": [0, 30, 43], "particip": [55, 57, 65, 72, 105, 301, 315, 333], "participant_property_kei": [57, 65], "participl": [57, 89], "particl": 220, "particular": [14, 25, 28, 33, 43, 52, 57, 72, 80, 92, 104, 119, 120, 121, 146, 147, 150, 162, 167, 170, 171, 172, 173, 178, 179, 182, 192, 214, 223, 233, 235, 236, 246, 247, 258, 264, 265, 266, 267, 275, 277, 286, 300, 307, 311, 314, 315, 319, 322, 333, 347, 356], "particularli": [14, 52, 57, 72, 198, 358], "partli": 198, "partner": 336, "pascal": 313, "pasim": 345, "pass": [14, 34, 43, 57, 62, 63, 65, 72, 78, 87, 90, 99, 107, 112, 118, 124, 131, 132, 135, 142, 157, 162, 165, 167, 170, 171, 175, 179, 184, 186, 191, 196, 206, 218, 219, 234, 235, 243, 251, 255, 263, 264, 265, 266, 267, 275, 279, 281, 282, 284, 286, 292, 306, 307, 312, 314, 315, 321, 322, 323, 338, 347, 351, 352, 356], "passar": 333, "passeio": 333, "passiv": [57, 89, 162], "passonneau": 148, "passthroughboxerdrsinterpret": [0, 180, 181], "password": [111, 291, 294], "past": [57, 89, 117, 216, 223, 288, 289, 301, 313, 314, 343], "pastorali": 109, "pat": [57, 72, 169], "patch": [242, 351], "path": [0, 34, 39, 54, 57, 58, 59, 61, 64, 65, 66, 69, 70, 71, 72, 74, 75, 79, 82, 83, 84, 85, 86, 93, 94, 98, 99, 102, 104, 105, 107, 108, 109, 110, 111, 113, 118, 120, 129, 131, 144, 161, 169, 170, 173, 181, 218, 219, 221, 222, 224, 235, 245, 275, 277, 287, 290, 291, 307, 309, 313, 322, 333, 335, 351, 356], "path_point": [57, 59], "path_similar": [55, 57, 107, 351], "path_to_bin": [131, 219], "path_to_dict": 250, "path_to_jar": [131, 163, 175, 224, 249, 250], "path_to_model": [219, 250], "path_to_models_jar": [163, 175], "path_to_sihan_corpora_dict": 250, "path_to_slf4j": 250, "path_to_tre": 118, "pathnam": 290, "pathpoint": [0, 57, 58, 59, 61, 64, 65, 66, 69, 70, 71, 72, 74, 75, 82, 83, 84, 85, 86, 93, 94, 98, 99, 104, 105, 107, 108, 109, 111], "patient": 356, "patil": 262, "pattern": [18, 23, 28, 57, 58, 59, 63, 66, 68, 71, 72, 86, 87, 90, 91, 99, 104, 155, 191, 192, 204, 234, 235, 238, 244, 251, 275, 282, 302, 307, 315, 336, 343, 344, 356], "paul": 356, "paulo": [307, 333, 356], "paus": 61, "pawl": 351, "payload": 307, "payment": 344, "pb": 61, "pb_instanc": 335, "pbb737gold": 344, "pbbabscbn": 344, "pbc": 344, "pc": 176, "pca": 317, "pcfg": [0, 111, 121, 171, 177, 178, 309, 320, 332, 356], "pchart": [0, 159, 332], "pcheck": 347, "pcl": 307, "pcm": 100, "pcp": 333, "pd": 334, "pdf": [12, 42, 53, 57, 85, 106, 140, 148, 182, 225, 245, 258, 259, 260, 262, 269, 273, 279, 283, 291, 296, 299, 300, 356], "pdist": [179, 303], "pdist1": 328, "pdist2": 328, "pdt": [213, 343], "pe08": 356, "pea": 323, "peacekeep": 336, "peak": 251, "pearson": 146, "peaseblossom": 307, "peculiar": 91, "pedersen": [57, 94, 107, 146, 346, 351], "pedi": 333, "pee": 67, "peer": 307, "peg": [267, 268], "pek": 336, "peke": 300, "pela": 333, "pelo": 333, "pelt": 307, "pen": 344, "pen_up": 351, "penalti": [148, 243, 258, 269, 271, 273, 274, 346], "pencil": 344, "penetr": [306, 333], "penn": [57, 62, 81, 89, 164, 206, 213, 253, 275, 281, 282, 284, 299, 307, 310, 315, 335, 356], "pensamento": 333, "peopl": [63, 107, 144, 154, 234, 281, 284, 353], "pep8": 356, "per": [28, 38, 57, 66, 72, 74, 81, 89, 100, 104, 106, 107, 177, 222, 229, 252, 262, 269, 287, 307, 313, 315, 333, 335, 336, 341], "per_s": [57, 107], "perak": 336, "percent": [29, 163, 179, 192, 344], "perceptron": [0, 213], "perceptrontagg": [0, 213, 214, 221, 343], "perder": 333, "pereira": [182, 300], "perf": 301, "perf_count": 307, "perfect": [57, 89, 270, 346], "perfect_and_progress": [57, 89], "perfectli": 223, "perform": [7, 8, 14, 15, 18, 26, 28, 30, 33, 36, 39, 51, 52, 57, 66, 104, 119, 120, 124, 127, 129, 147, 149, 172, 173, 174, 181, 184, 190, 191, 196, 197, 201, 203, 214, 215, 218, 223, 225, 229, 232, 234, 235, 240, 242, 243, 248, 253, 305, 307, 309, 314, 317, 323, 328, 343, 347, 349, 353, 356], "perhap": 313, "perif": 333, "period": [217, 243, 252, 253, 306, 307, 344], "period_comma_follow": [236, 242], "period_comma_prece": [236, 242], "period_context_r": [236, 243], "period_fin": [236, 243], "periodcategori": [275, 278], "peripher": [57, 72], "perkin": 356, "perl": [53, 57, 106, 107, 254, 351], "perldoc": [57, 106], "perluniprop": [57, 106], "permil": 192, "permiss": [63, 68, 74, 83, 88, 90, 91, 94, 113], "permit": [233, 305, 307, 333, 347], "permut": [13, 15, 150, 183, 338], "pero": 298, "perp": 192, "perplex": [135, 136], "persian": 252, "persist": [0, 52, 180], "person": [23, 29, 89, 113, 163, 192, 224, 305, 309, 311, 313, 314, 315, 321, 322, 335, 336, 351, 352, 353, 354], "person01": 313, "persona": 307, "perspect": [57, 72, 315, 346], "perspectiv": [57, 72, 315], "perspective_on": [57, 72, 315], "persuad": 298, "pertain": 307, "pertainym": [57, 107, 351], "pesco\u00e7o": 333, "pessoa": 333, "pessoal": 333, "peter": [263, 264, 265, 266, 267, 268, 356, 358], "petersburg": [254, 344], "petro": 356, "petrograph": 329, "petrov": 220, "pevzner": 151, "pfeat": 233, "pformat": [0, 179, 275, 282, 335], "pformat_latex_qtre": [0, 275, 282, 347], "pg": [240, 248], "phags_pa": [236, 254], "pharaoh": 261, "phd": [100, 145, 187, 190, 240], "phenomena": 170, "phenomenon": 265, "phi": [146, 192, 265, 266, 267], "phi_sq": [143, 146, 328], "philadelphia": 336, "philip": 91, "philipp": [263, 264, 265, 266, 267, 268, 274], "philosophi": 109, "phn": [57, 100, 307], "phone": [55, 57, 100, 163, 238, 307, 356], "phone_tim": [55, 57, 100, 307], "phone_tre": [55, 57, 100, 307], "phone_word_r": [236, 238], "phonem": [30, 67, 100, 240, 248, 307], "phonet": [57, 100, 145, 307], "phonetik": [240, 248], "phonologi": [145, 240, 248], "photo": 344, "php": [57, 65], "phr": 348, "phrasal": [121, 275, 279, 307], "phrase": [25, 26, 28, 57, 68, 72, 88, 155, 234, 257, 258, 272, 274, 275, 282, 306, 307, 315, 347, 348], "phrase_bas": [0, 256], "phrase_extract": [0, 256, 272], "phrase_t": 274, "phraset": [0, 256, 257, 274], "phrasetableentri": [0, 256, 257, 274], "phyast": 112, "physic": 347, "physical_ent": [57, 107, 291, 351], "pi": [96, 131, 143, 144, 192], "pi0": 258, "picasso": 351, "pick": [187, 269, 307], "pickl": [111, 197, 229, 304, 309, 332, 334, 344, 347, 356], "pictur": [57, 91, 306, 307], "piec": [52, 57, 69, 72, 81, 89, 121, 159, 163, 307, 335], "pierpaolo": 358, "pierr": [166, 307, 310], "pietra": [263, 264, 265, 266, 267, 268], "pihs4": 205, "pile": 353, "pili": 329, "pine": 292, "ping": 67, "pinhal": 333, "pinion": 351, "piou": 234, "pip": 355, "pipe": [131, 163, 219, 236, 252, 332], "pipelin": [38, 39, 175], "pit": 307, "pitt": 112, "piv": 192, "pivot": 172, "pixel": 119, "pk": [0, 143, 151], "pl": [16, 57, 75, 80, 106, 111, 182, 242, 252, 258, 271, 300, 301, 313, 314, 332, 341, 344], "pl196x": [55, 57], "pl196xcorpusread": [55, 57, 86], "place": [25, 42, 57, 75, 118, 119, 120, 134, 158, 164, 167, 171, 197, 217, 223, 267, 274, 275, 276, 279, 287, 296, 306, 307, 313, 315, 326, 329, 332, 344, 356], "placehold": [57, 72, 318], "placement": [267, 275, 279], "placent": [57, 107, 291, 351], "placenta": 347, "plai": [55, 57, 100, 170, 307, 310, 311, 314, 354], "plain": [57, 68, 275, 279, 307], "plaintext": [55, 57, 78, 103, 164, 243], "plaintextcorpusread": [55, 57, 78, 87, 103, 110, 307], "plan": [120, 314, 336], "plane": [254, 344], "planeamento": 333, "plastika": 336, "platform": [111, 113, 307, 354, 356], "plausibl": [187, 289], "player": 301, "plc": 25, "pleas": [0, 55, 163, 176, 198, 213, 218, 225, 236, 239, 244, 247, 249, 253, 254, 273, 307, 308, 333, 341, 344, 346, 354, 355, 356], "plot": [0, 116, 179, 197, 229, 234, 251, 317, 339, 342, 356], "plt": 317, "plu": [57, 93, 120, 124, 191, 192, 235, 275, 282, 291, 307, 326, 333, 354, 356], "plug": [180, 188], "plugin": 307, "plur2s": [199, 201, 202], "plural": [201, 202, 216, 223, 342, 343, 348], "pluralis": 342, "plusmn": 192, "ply": 205, "pm": [57, 106, 286, 289, 307, 309, 344], "pmi": [143, 146, 196, 197, 305, 328], "pmod": [166, 310], "pn": 258, "png": [164, 307], "pnp": 297, "po": [0, 14, 27, 33, 39, 55, 57, 59, 61, 62, 63, 64, 65, 69, 70, 71, 72, 74, 75, 82, 84, 85, 93, 95, 98, 105, 107, 108, 109, 120, 163, 169, 175, 177, 181, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 229, 231, 232, 233, 275, 282, 292, 301, 307, 313, 314, 315, 332, 333, 336, 339, 341, 343, 349, 351, 353, 356], "pobj": 301, "pocket": 307, "pode": 333, "poder": 333, "poderemo": 333, "poesio": 144, "poi": 333, "point": [28, 57, 65, 72, 79, 81, 89, 110, 111, 163, 179, 215, 218, 229, 231, 254, 260, 261, 267, 268, 272, 294, 298, 311, 315, 317, 346], "point_entropi": [213, 218], "pointer": [57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 81, 82, 84, 85, 89, 93, 98, 105, 107, 108, 109, 111, 162, 275, 277, 309, 314, 335, 347], "pointwis": [146, 218, 305], "poison": 307, "poisson": 146, "poisson_stirl": [143, 146, 328], "poke": 307, "pol": [333, 351], "polar": [57, 63, 197, 307], "polarity_scor": [195, 198, 339], "polic": 197, "policeman": [351, 352], "polici": [251, 356], "poliqarp": [57, 80], "polish": [57, 80, 103, 106, 307, 356], "polish_polski": [57, 103], "polit": 336, "politi": 109, "polonian": 329, "polysem": [57, 72, 315], "pooch": 351, "poodl": 351, "pool": [57, 85], "poor": [163, 176, 309, 339], "pop": [0, 120, 130, 275, 276, 314, 334, 347], "pop_first": [123, 130], "popen": 131, "popitem": [0, 52, 120, 314, 334], "popov": 259, "popul": [135, 142, 182, 196, 197, 300], "popular": [281, 284, 355], "population_of": [182, 300], "popup": 8, "por": [333, 344, 351], "porpois": 334, "porqu": 333, "port": [10, 57, 106, 145, 163, 208, 209, 242, 252, 253, 254, 260, 356, 358], "porta": 208, "porter": [0, 199, 209, 356], "porterstemm": [0, 199, 206, 209, 269, 342, 356], "portim": 333, "portion": [7, 8, 14, 16, 28, 57, 59, 100, 162, 171, 173, 174, 178, 225, 243, 307], "portugues": [57, 106, 208, 209, 307, 342, 356], "portuguesa": 333, "portuguese_en": 295, "portuguese_en_fixt": 333, "portuguesecategorizedplaintextcorpusread": [55, 57, 87], "portuguesestemm": [0, 199, 209], "pos1": [57, 76], "pos2": [57, 76], "pos3": [57, 76], "pos_concord": 307, "pos_in_tre": [57, 69], "pos_m2": 233, "pos_m33": 233, "pos_scor": [55, 57, 95, 340], "pos_tag": [0, 93, 169, 177, 213, 307, 343, 354], "pos_tag_s": [0, 213], "pos_tagset": [57, 72, 315], "pose": [57, 72], "posid1": [57, 76], "posid2": [57, 76], "posid3": [57, 76], "posit": [14, 23, 28, 29, 33, 36, 55, 57, 58, 64, 66, 71, 72, 74, 75, 81, 83, 86, 89, 91, 94, 95, 99, 104, 107, 111, 117, 119, 120, 121, 131, 147, 151, 157, 158, 162, 167, 170, 171, 182, 197, 198, 214, 217, 218, 229, 231, 232, 233, 234, 235, 257, 259, 263, 264, 265, 266, 267, 268, 273, 274, 275, 277, 282, 291, 307, 317, 328, 333, 339, 345, 347], "position_of_ngram": [0, 256, 273], "positive_featureset": 36, "positive_prob_prior": 36, "positive_tweet": 307, "positivenaivebay": [0, 30], "positivenaivebayesclassifi": [0, 30, 36], "posix": 111, "poss": [163, 301, 315], "posscor": [95, 340], "possibl": [14, 16, 23, 28, 33, 34, 36, 46, 57, 63, 72, 75, 107, 111, 113, 118, 119, 120, 121, 135, 142, 148, 150, 156, 160, 162, 165, 167, 170, 171, 172, 173, 174, 177, 178, 179, 183, 186, 192, 215, 217, 218, 225, 231, 233, 235, 239, 243, 253, 257, 263, 264, 265, 266, 267, 270, 272, 275, 277, 289, 291, 292, 306, 307, 309, 311, 314, 315, 332, 339, 344, 346, 347, 351, 352], "possible_st": 217, "possible_transit": 217, "possibleanteced": [0, 180, 184], "possibli": [13, 16, 53, 57, 63, 65, 69, 192, 229, 231, 307, 322, 336, 351], "post": [55, 57, 60, 82, 239, 253, 289, 294, 301, 307, 336, 344, 356], "postag": [0, 215, 227, 229], "postag_tre": [0, 25, 27], "posthum": 333, "postord": [275, 282], "postpl": 233, "postposit": 220, "postscript": [119, 180, 185], "postura": 333, "potato": [57, 72, 315], "potenti": [70, 120, 121, 144, 243, 307, 311, 314], "pouco": 333, "pound": [192, 307, 351], "pour": [151, 307], "power": [146, 223, 307], "powershot": [57, 91, 307], "po\u00e7o": 333, "pp": [29, 88, 96, 151, 163, 175, 179, 201, 222, 240, 248, 298, 300, 302, 307, 309, 316, 320, 332, 333, 335, 341, 347, 348, 349], "pp1": 205, "pp3n": 307, "pp560": 96, "ppattach": [55, 57], "ppattachmentcorpusread": [55, 57, 88], "ppdb": [57, 106, 356], "ppdp": 172, "pprint": [0, 25, 55, 57, 69, 72, 105, 107, 179, 275, 282, 291, 307, 310, 314, 315, 318, 351], "pprint_fram": [55, 57, 105], "pprint_memb": [55, 57, 105], "pprint_subclass": [55, 57, 105], "pprint_themrol": [55, 57, 105], "pr": [0, 218, 291], "practic": [57, 72, 258, 262, 269, 271, 273, 281, 284, 307, 343, 351, 354], "pragmat": 148, "praguej": 333, "prais": 344, "prasa": [57, 75], "prd": 348, "pre": [25, 57, 87, 113, 135, 142, 169, 175, 176, 217, 221, 243, 244, 269, 275, 282, 313, 338, 352, 356], "pre1": [199, 204], "pre32": [199, 204], "prec": [147, 214, 343], "prec_count": 258, "preced": [28, 33, 57, 72, 100, 104, 135, 136, 148, 198, 204, 223, 234, 243, 253, 311, 315, 344], "precipit": 307, "precis": [0, 25, 28, 29, 57, 79, 143, 147, 150, 196, 213, 214, 225, 231, 258, 259, 262, 269, 273, 302, 328, 339, 341, 343, 356], "precomput": 179, "precondit": [33, 176], "pred": [180, 188, 191, 235, 301, 318, 326], "predhold": [0, 123, 127], "predic": [15, 57, 81, 89, 127, 180, 181, 182, 188, 191, 235, 300, 307, 314, 326, 330, 335, 338], "predicate_valu": 307, "predict": [34, 38, 52, 57, 72, 147, 167, 179, 213, 214, 221, 264, 265, 266, 313, 315, 344], "predictor": [162, 313], "predictorrul": [0, 159, 165], "predid": [57, 81, 89], "predominatement": 333, "pref": [199, 201, 202], "prefac": [57, 58, 64, 66, 71, 74, 75, 83, 86, 87, 94, 99, 104, 109], "prefer": [179, 182, 240, 242, 274, 298], "prefix": [32, 57, 106, 113, 118, 120, 132, 148, 162, 171, 176, 201, 202, 204, 205, 210, 289, 313, 314, 347], "prefix_replac": [0, 199, 210], "prefix_step2a_success": [199, 209], "prefix_step3a_noun_success": [199, 209], "prefix_step3b_noun_success": [199, 209], "preflabel": [182, 300], "prehistor": 351, "prejudic": [57, 72], "preliminari": 25, "premis": [127, 318, 330], "preorder": [275, 282], "preosta": 109, "prep": [57, 72, 88, 301, 307, 315, 332, 333, 336, 347, 348], "prepar": [0, 94, 251, 307, 356], "prepend": 111, "prepnadjn": 298, "prepnadjnp": 298, "prepnpcompl": 298, "preposit": [57, 72, 88, 192, 220, 266, 302, 307, 315], "preprocess": [0, 38, 121, 135, 197, 198, 269, 325], "presenc": [0, 143, 148, 197], "present": [33, 42, 52, 57, 89, 107, 120, 124, 131, 152, 170, 171, 172, 196, 201, 202, 206, 258, 263, 264, 265, 266, 267, 275, 276, 296, 305, 307, 314, 317, 336, 344, 356], "preserv": [46, 107, 117, 120, 135, 142, 181, 238, 255, 314, 345], "preserve_cas": [238, 344], "preserve_lin": 236, "presid": [36, 234, 307, 336], "president": 298, "presidi": 329, "press": [73, 240, 248, 263, 264, 265, 266, 267, 268, 274, 346], "presum": 205, "presuppos": [57, 72, 253, 315], "preta": 333, "pretermin": 121, "pretrain": 221, "pretti": [32, 57, 105, 162, 184, 192, 275, 279, 282, 283, 291, 307, 333, 344, 348], "pretty_format": [30, 32, 143, 147, 159, 162, 180, 184, 189, 312, 328], "pretty_format_edg": [159, 162], "pretty_format_leav": [159, 162], "pretty_print": [0, 163, 180, 184, 275, 282, 312, 347], "prettydict": [55, 57, 72], "prettylazyconcaten": [55, 57, 72], "prettylazyiteratorlist": [55, 57, 72], "prettylazymap": [55, 57, 72], "prettylist": [55, 57, 72, 315], "prettyprint": [0, 275, 282], "prev": [180, 185], "prevent": [28, 33, 57, 107, 117, 121, 124, 129, 197, 307], "previou": [30, 57, 72, 113, 152, 162, 173, 174, 202, 223, 243, 266, 267, 268, 275, 279, 289, 294, 343], "previous": [57, 107, 154, 196, 255, 267, 275, 282, 351], "previous_cept": [256, 268], "previous_edg": 162, "previous_in_tablet": [256, 268], "prevword": [30, 33], "price": [307, 310, 356], "pricktimb": 329, "prim_onli": 13, "primari": [15, 43, 67, 182, 223, 300, 307, 344], "primarili": [119, 307, 358], "prime": [192, 309], "primeiro": 333, "primit": [13, 16, 52], "primitivecategori": [0, 12, 13], "primou": 333, "princeton": [57, 107, 351], "princip": 307, "principl": [57, 72, 240, 248, 258, 259, 262, 269, 271, 273, 311], "princ\u00edpio": 333, "print": [7, 8, 14, 28, 29, 30, 32, 33, 46, 51, 55, 57, 72, 91, 95, 102, 105, 107, 111, 112, 117, 119, 124, 125, 126, 128, 129, 131, 135, 147, 162, 163, 164, 176, 177, 179, 182, 184, 186, 191, 192, 196, 202, 208, 209, 211, 213, 214, 215, 218, 223, 229, 231, 234, 243, 245, 250, 252, 257, 258, 263, 264, 265, 266, 267, 272, 275, 279, 282, 283, 288, 289, 291, 299, 300, 301, 302, 303, 305, 307, 308, 309, 310, 311, 313, 314, 316, 317, 318, 319, 322, 326, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 356], "print_assumpt": [123, 124, 126, 128, 322], "print_concord": [0, 234], "print_error_to": 113, "print_grammar": [162, 165, 167, 332], "print_maxent_test_head": 303, "print_mptre": 347, "print_pars": 171, "print_proof": [0, 123, 127], "print_ptre": 347, "print_sent": 167, "print_str": [0, 291, 350], "print_template_statist": [213, 215, 216, 343], "print_tim": [162, 165, 167, 332], "print_to_fil": [114, 119], "print_tre": [162, 165, 167], "printccgderiv": [0, 12, 14, 298, 299], "printccgtre": [0, 12, 14], "printtyp": [0, 180, 191], "printunus": [215, 216, 343], "prior": [33, 36, 46, 48, 119, 218, 243, 256, 258, 260, 263, 264, 265, 266, 267, 273], "prison": [163, 305], "privileg": 294, "prn": 175, "pro": [57, 90, 184, 298, 301, 307, 311, 312, 333], "pro_w4": [199, 204], "pro_w53": [199, 204], "pro_w54": [199, 204], "pro_w6": [199, 204], "pro_w64": [199, 204], "proadj": 333, "prob": [0, 33, 35, 121, 159, 171, 179, 234, 303, 332, 334, 347], "prob_alignment_point": [256, 263, 264], "prob_all_align": [256, 263, 264], "prob_classifi": [30, 31, 33, 35, 44, 303], "prob_classify_mani": [30, 31, 38, 44, 303], "prob_dict": 179, "prob_dist": 179, "prob_kwarg": [179, 275, 276, 280], "prob_of_align": [256, 268], "prob_single_quot": [236, 252], "prob_t_a_given_": [256, 263, 264, 265, 266, 267, 268], "probabilist": [0, 111, 121, 159, 170, 171, 172, 177, 178, 179, 218, 275, 309, 320, 356], "probabilistica": 179, "probabilisticbottomupinitrul": [0, 159, 171], "probabilisticbottomuppredictrul": [0, 159, 171], "probabilisticdependencygrammar": [0, 121, 172], "probabilisticfundamentalrul": [0, 159, 171], "probabilisticleafedg": [0, 159, 171], "probabilisticmixin": [0, 179, 275, 276, 280], "probabilisticnonprojectivepars": [0, 159, 170], "probabilisticproduct": [0, 121], "probabilisticprojectivedependencypars": [0, 159, 172], "probabilistictre": [0, 275, 280], "probabilistictreeedg": [0, 159, 171], "probability_chang": 274, "probability_fixt": 334, "probability_t": [263, 264, 265, 266, 267], "probabl": [0, 14, 28, 31, 33, 35, 36, 38, 46, 47, 48, 121, 135, 138, 150, 159, 171, 172, 178, 213, 218, 223, 225, 257, 260, 263, 264, 265, 266, 267, 268, 274, 281, 284, 289, 295, 326, 328, 346, 351, 356], "probdist": 179, "probdist_dict": 179, "probdist_factori": 179, "probdisti": [0, 31, 33, 35, 38, 44, 150, 179, 218], "problem": [25, 38, 46, 57, 72, 111, 157, 199, 245, 258, 298, 307, 314, 347, 356], "problemat": [302, 332], "proc": 332, "proce": 251, "procedur": [121, 170, 173], "proceed": [57, 63, 68, 83, 85, 88, 90, 91, 96, 148, 149, 171, 176, 203, 258, 259, 269, 271, 273, 292], "process": [0, 2, 14, 25, 26, 31, 46, 48, 49, 50, 57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 82, 84, 85, 87, 93, 96, 98, 104, 105, 107, 108, 109, 111, 119, 120, 125, 143, 160, 162, 170, 171, 173, 174, 179, 180, 182, 191, 194, 198, 200, 201, 204, 214, 218, 221, 225, 229, 237, 241, 246, 251, 255, 267, 268, 274, 275, 282, 286, 287, 289, 291, 300, 307, 309, 322, 326, 332, 336, 354, 356], "process_bundl": [0, 180, 182], "process_next_express": [180, 191], "process_quoted_token": [180, 191], "process_thread": [123, 125], "procura": 333, "prod": [121, 178, 192, 332], "prod1": 332, "prod2": 332, "produc": [14, 29, 33, 46, 48, 52, 57, 107, 120, 121, 139, 144, 159, 162, 164, 165, 167, 170, 171, 173, 174, 177, 178, 179, 181, 188, 201, 216, 223, 225, 229, 234, 236, 243, 251, 260, 261, 265, 266, 267, 273, 275, 279, 282, 288, 307, 314, 324, 336, 344, 346, 347, 351], "product": [0, 7, 8, 33, 57, 91, 115, 121, 125, 148, 162, 167, 171, 172, 173, 174, 178, 218, 221, 233, 275, 281, 282, 284, 307, 309, 310, 313, 316, 320, 332, 339, 347], "product_reviews_1": [57, 91], "product_reviews_2": 91, "productionlist": [0, 114, 115], "professor": 336, "profil": [30, 42], "program": [57, 107, 118, 119, 125, 131, 159, 162, 164, 165, 178, 181, 185, 206, 209, 218, 234, 260, 281, 284, 291, 301, 354, 356], "programm": 356, "progress": [7, 57, 89, 113], "progress_bar": 291, "progressmessag": [0, 113], "proj": 225, "project": [22, 42, 57, 67, 105, 170, 172, 176, 225, 279, 283, 293, 307, 308, 315, 354, 356, 358], "projectista": 333, "projective_prob_parse_demo": [0, 159, 172], "projective_rule_parse_demo": [0, 159, 172], "projectivedependencypars": [0, 159, 310], "projecto": 333, "projet": 344, "prolog": [181, 182, 300], "prologu": 307, "promin": 134, "promis": 201, "promo": 53, "prompt": [119, 171, 178, 307, 333], "pron": [79, 170, 220, 297, 305, 307, 332, 333, 336], "prone": 256, "pronoun": [91, 180, 184, 220, 305], "pronounc": 67, "pronunci": [57, 67, 307, 356], "proof": [123, 124, 126, 128, 129, 130, 322], "proof_str": [124, 128], "prooftran": 322, "prop": [57, 72, 123, 130, 186, 192, 301, 315, 333], "propag": [57, 72, 119, 186], "propagate_semtyp": [55, 57, 72], "propbank": [55, 57, 72, 295, 315, 356], "propbank_ptb": [307, 335], "propbankchaintreepoint": [55, 57, 89, 335], "propbankcorpusread": [55, 57, 89], "propbankinflect": [55, 57, 89, 335], "propbankinst": [55, 57, 89, 307, 335], "propbankpoint": [55, 57, 89], "propbanksplittreepoint": [55, 57, 89, 335], "propbanktreepoint": [55, 57, 89, 335], "propdemo": [0, 180, 186], "proper": [182, 220, 307], "properli": [110, 332], "properti": [33, 57, 59, 72, 78, 81, 89, 104, 106, 111, 113, 117, 118, 120, 124, 125, 126, 127, 135, 142, 146, 163, 177, 179, 182, 184, 186, 191, 198, 213, 214, 218, 223, 224, 231, 232, 233, 235, 238, 243, 257, 258, 262, 274, 275, 282, 294, 300, 301, 307, 311, 322, 330], "property_nam": [227, 231], "propfil": [57, 89], "propn": [182, 300, 311, 313, 338], "proport": 346, "proportion": 258, "propos": [203, 206, 240, 248, 274], "proposit": [181, 186, 322], "propriament": 333, "pros_con": [55, 57], "prosconscorpusread": [55, 57, 90], "prose": [57, 109], "prosodi": 240, "protest": 307, "protocol": [111, 177, 309], "prototyp": 356, "provabl": 322, "prove": [123, 124, 125, 126, 127, 128, 129, 130, 148, 311, 322, 330], "proven": [57, 107, 127, 330], "prover": [0, 123, 124, 125, 127, 128, 129, 130, 184, 191, 319, 330, 356], "prover9": [0, 123, 356], "prover9_input": [123, 128], "prover9_search": 322, "prover9command": [0, 123, 128, 322, 330], "prover9commandpar": [0, 123, 126, 128], "prover9except": [0, 123, 128], "prover9fatalexcept": [0, 123, 128], "prover9hom": 322, "prover9limitexceededexcept": [0, 123, 128], "prover9par": [0, 123, 126, 128], "provercommand": [0, 123, 124, 128], "provercommanddecor": [0, 123, 124, 127], "proverparseerror": [0, 123, 127, 129, 130], "provid": [14, 42, 52, 53, 55, 57, 59, 69, 72, 81, 83, 86, 89, 91, 92, 98, 100, 108, 111, 113, 119, 120, 122, 128, 131, 135, 136, 138, 145, 146, 148, 154, 157, 161, 162, 164, 169, 170, 171, 176, 179, 180, 182, 186, 188, 205, 209, 218, 225, 234, 236, 286, 291, 300, 305, 307, 308, 309, 314, 315, 322, 328, 335, 336, 338, 346, 347, 354, 356], "provied": 250, "provis": 205, "proxi": [72, 110, 289, 291], "prp": [163, 175, 214, 221, 307, 311, 333, 343, 348], "prt": [79, 213, 220, 305], "prtree": 347, "prune": [256, 267, 274, 351], "psalm": 306, "psent": 333, "psent1": 333, "psent2": 333, "pseudo": [109, 150, 178], "pseudocod": [30, 32], "pseudosent": 251, "psi": 192, "psoe": 336, "pst": [57, 72, 344], "pst2": 344, "psy": [57, 65], "pt": [57, 72, 106, 315, 333, 344], "ptb": [220, 239, 253, 307, 335], "ptbtoken": 249, "ptcl": 220, "ptext1": 333, "ptext2": 333, "ptext3": 333, "ptext4": 333, "pth": 290, "ptree": [275, 277, 347], "pu": 176, "public": [140, 146, 234, 288, 289, 307, 356], "publicdomain": [57, 85], "publicli": 203, "publicystyczni": [57, 75], "publish": [145, 206, 271, 305, 354, 356], "pukka": 351, "pull": [163, 192, 298, 344, 351], "pumpkin": 338, "pun": 297, "punc": [170, 307, 336], "punc_list": [195, 198], "punct": [163, 175, 180, 184, 190, 191, 236, 242, 348], "punct_1": [236, 242], "punct_2": [236, 242], "punct_regex": [236, 242], "punctuat": [42, 57, 58, 61, 62, 63, 65, 66, 68, 78, 79, 82, 83, 86, 87, 90, 91, 93, 99, 102, 106, 108, 166, 170, 197, 220, 225, 236, 239, 243, 253, 305, 333, 339, 344], "punkt": [0, 236, 309, 333, 344, 356, 358], "punkt_tab": 243, "punktbaseclass": [0, 236, 243, 344], "punktdecod": [0, 212], "punktlanguagevar": [0, 236, 243, 344], "punktparamet": [0, 236, 243, 344], "punktsentencetoken": [0, 236, 243, 333], "punkttoken": [0, 236, 243, 309, 333], "punkttrain": [0, 236, 243, 344], "pup": [57, 106], "pup_numb": [236, 242], "pup_punct": [236, 242], "pup_symbol": [236, 242], "purchas": [57, 91, 307, 356], "pure": 198, "purg": [180, 186, 338], "purific": 358, "purpos": [28, 35, 43, 57, 107, 112, 117, 119, 131, 135, 172, 196, 218, 227, 263, 264, 265, 266, 267, 281, 284, 286, 307, 313, 315, 351], "push": 307, "put": [57, 62, 105, 120, 123, 130, 135, 158, 238, 307, 313, 314, 335, 353], "put_al": [123, 130], "put_atom": [123, 130], "put_direct": 307, "put_spati": 307, "pwd": 111, "py": [10, 14, 39, 113, 222, 231, 232, 233, 242, 307, 309, 314, 332, 349, 356], "py3_data": [0, 54], "pye": 344, "pyfound": 356, "pylab": 234, "pypi": [217, 355], "pyplot": 317, "pyramu": 307, "pyr\u00e9n\u00e9": [57, 60], "pytest": 328, "python": [0, 10, 14, 25, 38, 52, 57, 100, 106, 110, 111, 112, 113, 117, 120, 131, 132, 135, 137, 144, 163, 181, 182, 203, 204, 206, 216, 217, 221, 229, 235, 242, 244, 252, 254, 286, 287, 289, 291, 294, 300, 307, 309, 313, 314, 322, 326, 329, 347, 351, 354, 356, 358], "python2": 298, "python25": 113, "python38": 355, "pythonhom": 113, "pyupgrad": 356, "p\u00e9": 333, "p\u00f3stuma": 333, "p\u00fablico": 333, "p\u0125": [], "p\u072b": 242, "p\u1a4c": [], "q": [7, 8, 57, 60, 79, 113, 133, 145, 191, 299, 300, 312, 313, 314, 318, 322, 326, 329, 334, 337, 338, 347], "q14": [57, 106], "q25433": 133, "q2name": [0, 133], "q2tag": [0, 133], "q4289225": 133, "q79388": [57, 60], "qam": 328, "qc": 307, "qcode": 133, "qin": 262, "qtree": [275, 282], "quadgram": [53, 146], "quadgram_fd": 53, "quadgramassocmeasur": [0, 143, 146, 305, 328, 356], "quadgramcollocationfind": [0, 53, 305], "quadro": [208, 333], "quadrupedibu": 109, "qualifi": [132, 339], "qualiti": [46, 57, 84, 91, 248, 271, 273, 307, 358], "quando": 333, "quant": [180, 191, 301], "quanti": [57, 72, 315], "quantif": 318, "quantifi": [124, 183, 191, 311, 312, 326], "quantifiedexpress": [0, 180, 191], "quantit": 179, "quantiti": [46, 275, 278], "quarter": 163, "que": [208, 298, 307, 333], "queen": 317, "queer": 234, "quel": 151, "quer": 333, "querem": 333, "queri": [0, 22, 119, 182, 192, 234, 275, 277, 285, 288, 289, 307, 336], "question": [23, 24, 97, 113, 146, 181, 288, 306, 336, 344, 356], "queu": 332, "queue": [171, 177], "quick": [0, 153, 157, 163, 175, 221, 329], "quicker": 322, "quier": 344, "quiet": [44, 113, 186, 296], "quieta": 333, "quinca": 333, "quit": [7, 8, 23, 25, 57, 79, 91, 176, 198, 262, 314], "quoc": 262, "quot": [22, 57, 75, 120, 131, 191, 192, 253, 254, 275, 282, 307, 313, 314, 323, 326, 333, 344], "quotat": 344, "quote_char": 326, "q\ufd59": 242, "r": [0, 8, 23, 25, 57, 61, 67, 72, 76, 79, 95, 107, 111, 112, 125, 127, 135, 142, 143, 145, 147, 150, 179, 191, 204, 211, 214, 216, 223, 232, 244, 253, 254, 258, 259, 262, 271, 273, 291, 297, 299, 300, 302, 303, 306, 307, 310, 311, 312, 314, 315, 318, 319, 322, 326, 328, 329, 330, 333, 334, 336, 337, 338, 340, 343, 344, 345, 346, 347], "r0": [125, 273, 311], "r1": [125, 273, 302, 311, 318], "r2": [273, 302, 318], "r3": 302, "r4": 302, "r5": [273, 302], "r6": 302, "r7": 302, "r7209": 334, "r8": 302, "r9": 302, "r_nr": [0, 179], "ra2": 205, "rabin": 218, "race": [100, 307], "radic": 192, "radiu": 119, "radnei": 306, "rae0": 205, "rag": 307, "rai": 344, "railcar": 351, "railroad_car": 351, "railway_car": 351, "rain": [148, 306, 307, 328, 338, 344], "rais": [13, 14, 15, 28, 34, 52, 57, 59, 86, 110, 111, 117, 119, 120, 121, 129, 131, 132, 135, 137, 142, 147, 150, 179, 186, 190, 191, 209, 231, 232, 233, 234, 246, 269, 275, 276, 277, 282, 289, 291, 299, 308, 309, 314, 322, 323, 325, 338, 344, 347, 356], "raise_on_error": 113, "raise_unorderable_typ": [0, 131], "raita": 151, "rakuten": 242, "ralph": [57, 72], "ramakrishnan": 291, "rami": [163, 224], "ran": [332, 347], "randn": 251, "random": [46, 50, 104, 136, 150, 171, 218, 229, 234, 307, 328, 329, 333], "random_sampl": [213, 218], "random_se": [135, 136, 234], "random_st": 317, "randomchartpars": [0, 159, 171, 332], "randomis": 50, "randomli": [150, 179, 197, 218], "rang": [29, 30, 33, 57, 107, 120, 152, 162, 179, 192, 218, 229, 231, 236, 254, 256, 257, 262, 275, 276, 302, 303, 304, 307, 309, 314, 331, 334, 343, 346, 347, 351, 358], "range_r": [0, 120], "rangefeatur": [0, 120, 314], "rank": [33, 53, 57, 72, 152, 215, 273, 328], "rank_gap": [152, 305], "ranks1": 152, "ranks2": 152, "ranks_from_scor": [0, 143, 152, 305], "ranks_from_sequ": [0, 143, 152, 305], "rape": 163, "rapid": 156, "raquo": 192, "rare": [33, 198, 243], "rarr": 192, "rate": [25, 63, 149, 213, 245, 270, 288, 289, 307, 331, 353], "rater": 356, "rather": [32, 35, 53, 57, 72, 107, 111, 120, 146, 164, 167, 179, 182, 204, 215, 229, 243, 255, 300, 305, 307, 308, 313, 314, 315], "ratio": [53, 114, 119, 146, 147, 179, 214, 258, 262, 305, 346], "ration": 258, "ratnaparkhi": 88, "raw": [55, 57, 59, 78, 80, 102, 111, 113, 169, 225, 251, 288, 294, 307, 309, 325, 333, 344, 346], "raw_field": [0, 255], "raw_freq": [143, 146, 305, 328], "raw_mod": [55, 57, 80], "raw_pars": [159, 163, 175], "raw_parse_s": [159, 163, 175], "raw_tag_s": [159, 163], "raw_text": 333, "rb": [163, 213, 214, 216, 223, 307, 309, 333, 343, 348, 349, 354], "rbr": [214, 307, 343, 344], "rc": 311, "rcb": [239, 253], "rce": 356, "rceil": 192, "rcon": [192, 336], "rd": 341, "rdb": 300, "rdparser": 1, "rdparser_app": [0, 1], "rdquo": 192, "re": [12, 13, 25, 28, 33, 43, 57, 58, 63, 66, 68, 71, 87, 90, 91, 99, 104, 110, 111, 113, 119, 120, 124, 129, 135, 182, 198, 203, 218, 239, 241, 242, 243, 244, 252, 253, 258, 266, 273, 300, 302, 307, 322, 336, 343, 344, 355, 356], "re2": 205, "re_boundary_realign": [236, 243], "re_show": [0, 291, 350], "reach": [7, 32, 57, 91, 104, 107, 162, 197, 275, 277, 286, 289, 307, 322, 351], "reachabl": [51, 351], "read": [0, 39, 42, 52, 55, 57, 58, 59, 60, 62, 63, 64, 66, 67, 68, 69, 71, 74, 75, 76, 79, 83, 85, 86, 88, 90, 91, 94, 97, 99, 100, 101, 104, 106, 107, 108, 111, 117, 120, 123, 125, 131, 164, 180, 186, 188, 203, 229, 255, 257, 258, 262, 268, 273, 275, 278, 282, 288, 290, 298, 299, 301, 313, 318, 319, 322, 326, 332, 338, 356], "read_": 131, "read_alignedsent_block": [55, 57, 58, 104], "read_app_valu": [0, 120], "read_blankline_block": [55, 57, 66, 71, 87, 99, 104], "read_block": [55, 57, 58, 64, 66, 71, 74, 75, 79, 80, 86, 94, 99, 104, 108, 307], "read_cmudict_block": [55, 57, 67], "read_depgraph": [180, 189, 318], "read_expr": [299, 318, 322, 326, 330, 337], "read_fil": [180, 187], "read_fstruct_valu": [0, 120], "read_grammar": [0, 121], "read_int": [0, 131], "read_int_valu": [0, 120], "read_leaf": [275, 282, 347, 348], "read_line_block": [55, 57, 104], "read_log": [0, 180, 191], "read_logic_valu": [0, 120], "read_nod": [275, 282, 347], "read_numb": [0, 131], "read_parse_blankline_block": [55, 57, 78], "read_parti": [0, 120], "read_regexp_block": [55, 57, 104], "read_rul": [199, 208], "read_sent": [0, 180, 194], "read_set_valu": [0, 120], "read_sexpr_block": [55, 57, 104, 307], "read_str": [0, 131], "read_str_valu": [0, 120], "read_sym_valu": [0, 120], "read_timit_block": [55, 57, 100], "read_tuple_valu": [0, 120], "read_typ": [0, 180, 191], "read_valu": [0, 120, 180, 186], "read_var_valu": [0, 120], "read_whitespace_block": [55, 57, 104, 307], "read_wordpunct_block": [55, 57, 104], "readabl": [0, 111, 144, 230, 234, 243, 254, 292, 311, 315, 333, 349, 356], "reader": [0, 42, 43, 52, 111, 191, 269, 309, 314, 315, 318, 351, 354, 356], "reader_cl": 110, "readerror": [0, 131, 323], "readi": [135, 163, 313], "readili": 305, "reading_command": 125, "readingcommand": [0, 123, 125], "readlin": [0, 104, 111, 307], "readm": [55, 57, 59, 83, 84, 107, 307, 308, 322, 333], "real": [135, 149, 179, 192, 233, 265, 331, 343, 351], "realign": 243, "realign_boundari": [243, 344], "realist": 351, "realiti": [57, 72, 315], "realiz": [57, 72], "realli": [24, 191, 198, 253, 313, 314, 339, 344], "reason": [57, 87, 125, 127, 135, 138, 191, 218, 252, 288, 291, 314, 322, 346, 354], "rebbani": 202, "rebecca": 245, "rebuilt": 39, "recal": [0, 25, 28, 29, 143, 147, 150, 196, 213, 214, 259, 262, 269, 302, 313, 328, 339, 341, 343, 356], "recalcul": [46, 50, 135, 142, 243], "recdat": [100, 307], "recebido": 333, "receiv": [35, 125, 213, 288, 311, 322], "recent": [7, 8, 57, 91, 104, 117, 162, 173, 174, 223, 231, 232, 233, 246, 289, 299, 302, 303, 307, 308, 309, 314, 316, 322, 323, 334, 335, 338, 344, 345, 346, 347, 351], "rechunk": [26, 29], "recip": [117, 157, 356], "recogn": [33, 92, 165, 186, 307, 314, 336, 344], "recognis": 356, "recognit": [73, 218, 336, 356], "recommend": [25, 28, 57, 91, 102, 120, 151, 163, 198, 206, 213, 223, 236, 245, 294, 314, 317, 348, 351, 355], "reconstruct": [52, 145, 162, 167, 307, 347], "record": [2, 7, 8, 29, 30, 57, 60, 61, 93, 100, 107, 113, 121, 148, 162, 171, 173, 174, 178, 179, 182, 253, 255, 262, 300, 307, 345, 351], "recov": [235, 289], "rectangl": 119, "recurs": [1, 7, 25, 57, 107, 113, 173, 180, 184, 186, 191, 225, 291, 316, 323, 338], "recursionerror": 316, "recursivedesc": [0, 159, 341], "recursivedescentpars": [0, 159, 173, 332, 341], "red": [117, 119, 221, 275, 279], "redefin": [179, 334], "redesign": 356, "redirect": [131, 163, 164], "redirect_arc": [159, 164], "redo": [307, 356], "reduc": [1, 8, 46, 48, 49, 50, 51, 52, 111, 147, 159, 174, 176, 202, 214, 216, 243, 307, 317, 353], "reduce_len": [238, 344], "reduce_lengthen": [0, 236, 238], "reducible_product": [159, 174], "reduct": [8, 43, 51, 57, 72, 174, 181, 315], "redund": [13, 107, 311, 351], "redupl": 307, "reed": 306, "reentran": 314, "reentranc": [120, 313], "reentrant": [120, 314], "ref": [61, 73, 147, 151, 181, 184, 259, 262, 270, 271, 273], "ref1": [259, 262], "ref1a": [258, 262, 273], "ref1b": [258, 262, 273], "ref1c": [258, 262, 273], "ref2": 259, "ref2a": [258, 262, 273], "ref_len": 271, "refactor": 356, "refer": [0, 25, 28, 33, 52, 61, 80, 96, 117, 120, 146, 147, 149, 150, 151, 164, 167, 170, 173, 181, 182, 184, 214, 231, 240, 248, 252, 256, 258, 259, 261, 262, 268, 269, 270, 271, 273, 274, 275, 279, 281, 282, 283, 284, 286, 289, 291, 296, 300, 307, 308, 309, 312, 313, 327, 328, 333, 341, 342, 343, 344, 351, 356], "referenc": [136, 260, 274], "reference1": [258, 269, 271], "reference2": [258, 269, 271], "reference3": [258, 269, 271], "reference_set": [328, 341], "referenced_label": [180, 181], "referringentri": [57, 72], "refin": [30, 32, 229, 281, 284], "reflect": [23, 26, 170, 197, 251, 275, 282, 291, 307], "reflex": [121, 182, 291], "reflexive_appear": 307, "refrain": 307, "refrescant": 333, "refus": 314, "reg": 192, "regard": [42, 218, 245], "regardless": [111, 162, 307, 346], "regex": [57, 72, 131, 238, 239, 253, 356], "regex_remove_punctu": [195, 198], "regexp": [0, 25, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 75, 78, 79, 81, 82, 83, 84, 85, 87, 89, 90, 91, 93, 97, 98, 99, 102, 103, 104, 105, 107, 108, 109, 120, 199, 223, 234, 236, 238, 254, 291, 302, 307, 343], "regexp_pattern": 302, "regexp_span_token": [0, 236, 254], "regexp_tagg": 223, "regexp_token": [0, 236, 244, 344], "regexpchunkpars": [0, 3, 28], "regexpchunkrul": [0, 28, 302], "regexppars": [0, 25, 28], "regexpstemm": [0, 199, 207], "regexptagg": [0, 213, 216, 223, 311, 319, 343], "regexptoken": [0, 57, 58, 66, 71, 99, 236, 244, 307], "regim": 218, "region": [57, 100, 119, 182], "region_domain": [107, 351], "regist": [118, 119, 132, 134, 285, 289, 307], "register_tag": [0, 132, 309], "registr": 133, "registri": [57, 60], "regress": [38, 179, 356], "regular": [1, 3, 6, 23, 25, 28, 29, 33, 57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 82, 84, 85, 86, 87, 92, 93, 98, 105, 107, 108, 109, 131, 192, 207, 217, 223, 234, 235, 236, 238, 243, 244, 253, 254, 275, 282, 291, 302, 307, 315, 317, 333, 336, 343], "rei": 333, "rei3i": 205, "reilli": [0, 354, 356], "reivindicar": 333, "reject": [177, 307, 311, 321], "rel": [29, 53, 57, 59, 81, 89, 104, 107, 111, 117, 135, 147, 149, 164, 176, 181, 182, 186, 187, 189, 215, 229, 231, 233, 254, 266, 269, 275, 277, 307, 310, 311, 331, 333, 335, 336, 347, 352], "rel_nam": 182, "relat": [57, 63, 65, 68, 72, 83, 90, 91, 92, 107, 113, 120, 121, 131, 151, 164, 170, 172, 176, 181, 182, 186, 187, 191, 192, 235, 266, 300, 301, 307, 310, 311, 314, 315, 333], "relation_list": [57, 65], "relationship": [52, 57, 63, 107, 121, 172, 301, 351], "relax": 344, "reldict": [192, 336], "releas": [111, 307, 354, 358], "relev": [30, 57, 102, 145, 182, 186, 198, 216, 286, 300, 338, 343], "relextract": [0, 180, 295], "reli": [135, 181, 307], "reliabl": 356, "relief": 117, "religion": [307, 334], "reload": 229, "relsym": [192, 336], "remain": [8, 33, 57, 62, 72, 78, 87, 99, 111, 119, 131, 135, 173, 174, 176, 179, 218, 267, 268, 274, 307, 309, 311, 334, 351], "remaind": [156, 157, 162, 165, 167], "remaining_text": [159, 173, 174], "remark": 198, "rememb": [7, 173], "remi": [238, 344], "remind": 311, "remov": [0, 26, 28, 51, 52, 57, 87, 111, 114, 118, 119, 120, 121, 125, 152, 164, 170, 173, 176, 181, 186, 191, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 233, 238, 243, 253, 255, 267, 274, 275, 276, 281, 282, 284, 305, 307, 309, 322, 325, 342, 344, 347, 356], "remove_blank": [0, 255], "remove_by_address": [159, 164], "remove_callback": [114, 119], "remove_child": [114, 118, 119], "remove_choic": [57, 80], "remove_dupl": [125, 187, 197], "remove_empty_top_bracket": [275, 278, 282, 347], "remove_handl": [0, 236, 238], "remove_preprocessed_fil": [57, 80], "remove_punctu": [30, 42], "remove_unitary_rul": [0, 121], "remove_vari": [0, 120, 314], "remove_widget": [114, 119], "ren": 96, "renam": [120, 184, 191, 314, 332], "rename_var": [120, 314], "rename_vari": [0, 120, 314], "render": [119, 192, 311], "renumber_sent": [180, 181], "reorder": [266, 274, 356], "reparameteris": 46, "repars": [181, 183], "repeat": [46, 50, 120, 121, 238, 243, 258, 267, 268, 289, 344], "repeatedli": [173, 174, 179], "repetit": [25, 28, 188, 339], "repl": 28, "repl_xx": [199, 203], "repl_xx_back": [199, 203], "replac": [1, 6, 13, 16, 28, 51, 57, 65, 72, 75, 111, 117, 118, 119, 120, 121, 123, 127, 129, 134, 162, 167, 170, 180, 184, 187, 191, 197, 201, 202, 205, 210, 232, 238, 239, 253, 265, 274, 287, 288, 301, 307, 309, 330, 344, 347], "replace_al": [123, 130], "replace_back": [199, 203], "replace_bound": [184, 191], "replace_child": [114, 118, 119], "replace_qu": [123, 127], "replace_to": [199, 203], "replace_xmlent": [57, 75], "replacement_tag": [227, 232], "replic": 145, "report": [28, 88, 125, 156, 197, 216, 259, 307, 344, 356], "repp": [0, 236], "repp_dir": 245, "repp_dirnam": 245, "repp_output": 245, "repptoken": [0, 236, 245], "repr": [72, 120, 192, 229, 232, 302, 307, 347], "repres": [2, 13, 14, 15, 16, 25, 30, 33, 34, 41, 49, 51, 57, 63, 68, 72, 84, 91, 93, 100, 102, 107, 109, 120, 121, 124, 125, 144, 159, 160, 162, 165, 170, 171, 172, 173, 176, 179, 180, 186, 188, 191, 196, 197, 218, 221, 224, 225, 235, 236, 241, 243, 251, 257, 263, 264, 266, 267, 268, 272, 274, 275, 278, 282, 291, 303, 307, 313, 314, 315, 317, 328, 330, 333, 336, 339, 345, 351], "represent": [13, 14, 16, 28, 32, 44, 57, 76, 105, 107, 119, 120, 124, 132, 147, 162, 164, 169, 170, 172, 176, 178, 179, 181, 182, 183, 184, 188, 191, 194, 197, 226, 231, 232, 240, 255, 257, 275, 278, 279, 282, 291, 307, 313, 314, 317, 322, 326, 333, 336, 338, 339, 347], "reprfunc": 117, "repris": 346, "reproduc": [135, 136, 234, 325, 329], "request": [10, 104, 119, 134, 155, 251, 289, 307, 356], "requir": [10, 25, 33, 46, 52, 53, 57, 65, 72, 86, 104, 111, 119, 128, 135, 138, 142, 144, 146, 148, 149, 169, 171, 172, 179, 182, 186, 196, 199, 201, 204, 214, 218, 219, 229, 234, 235, 236, 243, 247, 258, 262, 265, 266, 268, 275, 281, 282, 284, 287, 289, 292, 294, 300, 303, 305, 307, 308, 309, 314, 318, 322, 329, 344, 355, 356], "requiresf": [57, 72], "rerank": 161, "reranker_featur": 161, "reranker_opt": 161, "reranker_weight": 161, "rerankingpars": 161, "res_similar": [55, 57, 107, 351], "rescal": 148, "research": [0, 57, 65, 74, 105, 148, 164, 204, 336, 354], "reserv": [35, 124, 134, 162, 165, 167, 179, 268, 353], "reset": [7, 8, 334], "reset_cach": [213, 218], "reset_id": [12, 13], "reset_prob": [256, 265, 266, 267, 268], "reset_workspac": [114, 115], "resid": 111, "resin": 305, "resiz": [113, 114, 118, 180, 185], "resnik": [57, 107, 351], "resolut": [0, 91, 123, 181, 295, 336, 356], "resolution_test": [0, 123, 129], "resolutionprov": [0, 123, 129, 322], "resolutionprovercommand": [0, 123, 129, 322, 337], "resolv": [57, 81, 89, 125, 180, 181, 191, 312, 322, 351, 356], "resolve_anaphora": [0, 180, 184], "reson": 240, "resourc": [57, 85, 95, 105, 111, 140, 219, 307, 354], "resource_nam": 111, "resource_url": 111, "resp": [57, 61, 72], "respect": [38, 57, 63, 72, 91, 119, 124, 131, 135, 146, 170, 182, 218, 258, 262, 266, 270, 271, 275, 277, 282, 300, 307, 311, 315, 322, 336, 338], "respond": [18, 22, 23, 24], "respons": [23, 24, 61, 117, 119, 128, 288, 289, 307, 322, 356, 358], "responsabilidad": 333, "rest": [16, 33, 57, 62, 121, 203, 288, 289, 334], "restart": [110, 162], "restr": [12, 13], "restrain": 351, "restrict": [13, 15, 57, 59, 72, 107, 115, 120, 135, 162, 165, 167, 192, 275, 282, 289, 291, 309, 314, 351], "result": [13, 15, 28, 29, 52, 57, 72, 75, 79, 88, 100, 107, 108, 111, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 135, 142, 144, 145, 146, 147, 148, 152, 159, 162, 163, 164, 171, 176, 177, 178, 179, 182, 191, 196, 197, 201, 202, 206, 213, 216, 225, 234, 243, 252, 254, 258, 259, 273, 274, 275, 277, 282, 287, 288, 291, 300, 303, 305, 306, 307, 311, 313, 314, 317, 322, 323, 325, 332, 334, 338, 339, 343, 347, 351, 352], "resultado": 333, "results_list": 305, "results_list2": 305, "results_scor": 305, "resum": [14, 162, 165, 167, 171], "resumpt": 346, "retag": 214, "retain": [53, 107, 243], "retard": 351, "retir": [133, 289], "retoken": 241, "retract": [124, 311, 318, 322], "retract_assumpt": [123, 124, 322], "retract_bind": [0, 120, 314], "retract_sent": [123, 125, 311], "retrain": 333, "retri": 289, "retries_after_twython_except": 289, "retriev": [0, 57, 63, 68, 69, 72, 83, 98, 107, 111, 113, 136, 151, 179, 183, 192, 202, 220, 260, 262, 285, 289, 290, 307, 311, 328, 356], "retry_count": 289, "retry_in": 289, "return": [7, 13, 14, 16, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 184, 186, 187, 188, 190, 191, 192, 194, 196, 197, 198, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 286, 287, 289, 291, 292, 300, 301, 303, 305, 307, 308, 309, 310, 314, 315, 322, 323, 329, 332, 333, 334, 335, 338, 343, 345, 347, 351, 352, 353, 356], "return_conf": 221, "return_str": [239, 242, 252, 253, 344], "returncod": 128, "retweet": [197, 289], "retweet_count": 287, "reus": [229, 275, 277, 313, 347], "reuter": [307, 325, 356], "rev": 314, "reveng": [57, 72, 315], "revers": [0, 117, 120, 148, 253, 257, 258, 275, 276, 305, 308], "revert": 239, "review": [55, 57, 63, 83, 197, 307, 334, 339, 356], "review_lin": 91, "reviewlin": [55, 57, 91], "reviewscorpusread": [55, 57, 91], "revis": [113, 313, 314, 356], "revivalismo": 333, "revword": [0, 153, 158], "reward": 262, "rewards_and_punish": [57, 72, 315], "rewind": [57, 68, 307], "rewrit": 356, "rewritten": [57, 72], "rewrot": 358, "rfloor": 192, "rflorian": 215, "rgoodtur": 179, "rh": [0, 12, 14, 121, 159, 162, 165, 167, 171, 178, 188, 332], "rho": [192, 273], "ri": 147, "ria": 333, "ribe": [273, 356], "ribes_scor": [0, 256], "rica": 333, "rico_amorim": 333, "rid": [42, 125, 311, 318], "ridden": 344, "ridg": 353, "ridzuan": 336, "riedel": 356, "riesa": 262, "rifir": 328, "right": [7, 8, 14, 15, 24, 25, 28, 30, 57, 65, 112, 113, 119, 121, 134, 135, 147, 157, 162, 164, 167, 171, 173, 174, 176, 177, 178, 192, 198, 209, 219, 223, 229, 253, 266, 267, 275, 277, 281, 282, 284, 291, 294, 297, 302, 307, 313, 314, 333, 336, 344, 347, 349, 356], "right_arc": [159, 176], "right_children": [159, 164], "right_context_tag_pattern": 28, "right_edg": [14, 162, 167, 171], "right_pad_symbol": [135, 291], "right_sibl": [0, 275, 277, 347], "right_tag_pattern": 28, "rightarc": 176, "rightarrow": 119, "rightmost": [8, 157, 172, 174, 226], "rightward": [118, 119, 172], "ring": 331, "ringer": 315, "riot": 197, "risc": 208, "risca": 208, "rise": [46, 49, 322, 335], "risk": 307, "ritheu": 109, "ritualiza": 333, "river": [182, 300], "rkt": 242, "rl": 262, "rlevi": 140, "rlm": 192, "rm_nl": [0, 212], "rmdir": [307, 309], "rnc": 220, "rng": [50, 218], "ro": [57, 106], "ro2": 205, "road": 353, "roar": 307, "robber": 338, "robert": [239, 253, 263, 264, 265, 266, 267, 268, 356], "robin": 356, "robinson": 356, "robust": [135, 201], "rocl": 96, "rogberi": 336, "roger": 339, "roi": 305, "role": [57, 69, 72, 81, 89, 105, 199, 301, 307, 311, 315, 335, 336, 352, 358], "roles_demo": [0, 180, 192], "roleset": [55, 57, 69, 81, 89, 307, 335], "roleset_id": [57, 81, 89], "roll": 307, "romanc": [57, 65, 305, 307, 333, 334], "romanian": [57, 106, 209, 307, 342], "romanianstemm": [0, 199, 209], "ron": 351, "rood": 109, "roof": 118, "roof_color": 118, "roof_fil": 118, "room": [307, 349], "root": [0, 27, 28, 29, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 113, 117, 118, 119, 121, 162, 163, 164, 166, 167, 172, 173, 175, 176, 181, 194, 204, 275, 277, 279, 281, 282, 284, 291, 297, 301, 307, 310, 318, 347, 351], "root_hypernym": [57, 107, 351], "root_label": [28, 29, 57, 69], "root_semrep": [0, 180, 194, 338], "roottyp": [57, 72], "rose": 335, "rosneft": 92, "rot": [57, 72], "roth": 356, "rotoka": [307, 345], "roughli": [239, 253, 307], "rouko": 258, "round": [144, 148, 213, 216, 258, 263, 264, 265, 266, 267, 269, 273, 286, 289, 325, 327, 346], "rover": 330, "row": [57, 63, 117, 158, 182, 197, 214, 275, 279, 300, 328, 343, 353], "row_index": 117, "rowconfig": [114, 117], "rowconfigur": [114, 117], "rowvalu": 117, "royalti": 356, "rp": [214, 343], "rr": 120, "rr1": 205, "rr93": 148, "rr94": 148, "rrb": [163, 175, 239, 253, 343], "rrc": 307, "rsaquo": 192, "rsb": [239, 253], "rslp": [0, 199, 333], "rslpstemmer": [0, 199, 208, 333], "rsquo": 192, "rstrip": [236, 252], "rt": [307, 344], "rt1": 205, "rte": [37, 55, 57, 356], "rte1": [92, 307], "rte1_dev": 307, "rte1_test": 307, "rte2": [92, 307], "rte2_dev": 307, "rte2_test": 307, "rte3": [92, 307], "rte3_dev": 307, "rte3_test": 307, "rte_classifi": [0, 30], "rte_featur": [0, 30, 37], "rte_pair": 37, "rtecorpusread": [55, 57, 92], "rtefeatureextractor": [0, 30, 37], "rtepair": [37, 55, 57, 92, 307], "rtext": 173, "rthird": 345, "rtupl": [0, 180, 192, 336], "rtype": [47, 124, 135, 137, 160, 170, 186, 192], "ru": [57, 106, 213, 220], "ru2": 205, "rude": [0, 18], "rude_chat": [0, 18, 21], "rudnick": [262, 358], "rue": 313, "rug": [42, 332, 341], "rule": [0, 2, 7, 8, 12, 13, 14, 15, 25, 28, 35, 57, 72, 109, 121, 148, 162, 165, 167, 170, 171, 172, 179, 182, 198, 199, 205, 213, 215, 216, 227, 229, 231, 233, 234, 245, 300, 307, 311, 313, 316, 318, 332, 343, 351], "rule_based_demo": [0, 159, 170], "rule_dictionari": 205, "rule_index": 208, "rule_tupl": 205, "rulebas": 245, "ruleformat": [216, 229], "rulescor": 216, "ruleset": 14, "rummag": [306, 307], "run": [0, 10, 14, 25, 28, 52, 57, 72, 104, 110, 113, 123, 124, 131, 159, 163, 164, 171, 177, 178, 179, 186, 202, 214, 229, 259, 263, 264, 265, 266, 267, 275, 282, 288, 291, 294, 307, 311, 312, 315, 321, 326, 332, 333, 341, 342, 343, 347, 351, 355, 356], "run_profil": [0, 159, 167], "run_var": 326, "rung": 331, "runtim": 209, "runtimeerror": [308, 316], "ruppenhof": [57, 72], "rural": [111, 307, 309], "rush": 307, "russia": 358, "russian": [57, 92, 106, 209, 213, 252, 342, 356], "russian_russki": [57, 103], "russianstemm": [0, 199, 209], "rutilant": 333, "rwth": 140, "ryan": 176, "r\u0f65\ufc78\u1fe4\u15fa\u12db": [], "r\ua0ec\uaa26": 242, "r\ua4f6\u31f0\ua12b\u0c8f\u072d\u2d53": [], "s0": [121, 125, 205, 218, 238, 291, 311, 344], "s0_sigma": 121, "s1": [57, 107, 121, 125, 148, 151, 203, 238, 257, 291, 311, 322, 328, 338, 344, 351], "s10": 344, "s11": 344, "s12": 344, "s14": [57, 106], "s15": [57, 106], "s1t": 205, "s2": [57, 107, 148, 151, 203, 257, 291, 311, 322, 328, 338, 344, 351], "s3": [151, 203, 291, 311, 328, 338, 344], "s4": [328, 338, 344], "s5": [328, 344], "s6": 344, "s7": 344, "s8": 344, "s9": 344, "s_": 218, "s_0": 218, "s_1": 148, "s_2": 148, "s_i": [148, 218], "s_j": 218, "s_retriev": [180, 183, 338], "s_t": 218, "sa": 96, "sa1": [100, 307], "sa2": [100, 307], "saarbrucken": 358, "sad": 197, "saem": 333, "safe": [117, 135, 253, 269], "safeappend": [180, 189], "saga": 301, "sahadutha": 305, "saharan": 336, "sai": [22, 36, 57, 72, 135, 165, 177, 184, 191, 205, 307, 311, 315, 339, 351], "said": [55, 57, 163, 223, 253, 294, 305, 307, 325, 335, 336, 344], "sain": 148, "saint": 109, "sale": [92, 356], "salienc": 145, "salienta": 333, "salim": 258, "salin": 107, "salmela": 356, "salt": [107, 305], "salti": 107, "salvatori": 109, "sam": [127, 305, 330, 356], "same": [14, 24, 25, 28, 29, 57, 69, 72, 87, 91, 100, 107, 112, 113, 117, 120, 121, 129, 131, 135, 136, 138, 142, 144, 147, 150, 151, 157, 162, 171, 172, 173, 176, 178, 179, 191, 196, 206, 223, 225, 229, 231, 234, 236, 243, 247, 254, 255, 258, 265, 266, 267, 268, 274, 275, 277, 279, 281, 284, 291, 302, 303, 305, 307, 313, 314, 319, 322, 328, 330, 332, 334, 338, 344, 345, 347, 351, 352], "same_r": 327, "samp": 179, "sampl": [0, 24, 33, 35, 38, 57, 96, 100, 136, 150, 179, 206, 218, 234, 256, 266, 267, 268, 285, 288, 289, 295, 356], "sample_grammar": [309, 313, 318, 322, 338], "sample_n": 37, "sampletoscreen_demo": [0, 285, 288], "sampson": 179, "san": 336, "san_sebasti": 336, "sandra": 176, "sandt": 181, "sao": [307, 333], "sara": 36, "sarrail": 336, "sat": [302, 320, 327, 332], "satdemo": [0, 180, 186], "satellit": [57, 107, 211, 356], "satisfact": 186, "satisfi": [57, 91, 124, 135, 142, 148, 176, 180, 186, 232, 307], "saturdai": [254, 307, 344], "saturn": 109, "savag": 306, "save": [65, 111, 113, 176, 196, 213, 217, 221, 229, 234, 243, 253, 301, 309, 311, 313, 317], "save_analyz": 197, "save_classifi": 196, "save_fil": [195, 196], "save_loc": 221, "save_maxent_param": [0, 30, 33], "save_param": [25, 27, 236, 243], "save_punkt_param": [0, 236, 243], "save_to_json": [213, 221], "savings_bank": [292, 353], "saw": [25, 162, 165, 167, 174, 226, 275, 282, 313, 316, 320, 332, 333, 347], "sax": 254, "saxon": 109, "saxutil": 254, "sayoud": 201, "sb": 119, "sbar": [307, 313, 335, 347], "sbj": [176, 307, 335, 348], "sbl": 209, "sbquo": 192, "sc": 333, "scalar": 231, "scalar_inc_dec": [195, 198], "scale": [33, 53, 63, 125, 135, 138, 148, 179, 251, 258, 311, 327], "scan": 157, "scan_dragto": [114, 117], "scan_mark": [114, 117], "scanner": 313, "scannerrul": [0, 159, 165], "scarc": 198, "scaron": 192, "scatter": 317, "scc": 351, "scenario": 323, "scene": 306, "schema": [182, 300], "schemaloc": 301, "scheme": [57, 79, 255, 356], "schneider": [57, 62, 358], "school": [100, 317, 356], "schuler": [57, 105], "schuster": 262, "schutz": [53, 146, 305, 328], "scienc": [83, 91, 96, 202, 204, 307], "science_fict": [307, 334], "scikit": [38, 40, 303], "scikitlearn": [0, 30, 40], "scipi": [146, 251, 291], "scitaminea": 329, "scon": [57, 72, 315], "scope": [28, 183, 197, 311], "score": [0, 25, 26, 28, 29, 53, 57, 77, 91, 95, 107, 135, 136, 138, 141, 143, 145, 146, 151, 152, 159, 166, 170, 172, 196, 197, 198, 214, 215, 216, 229, 234, 251, 256, 258, 259, 262, 267, 268, 269, 271, 273, 274, 296, 302, 305, 307, 317, 325, 327, 339, 343, 346, 351, 356], "score1": [258, 262], "score2": [258, 262], "score_fn": [53, 146], "score_ngram": [0, 53, 305], "score_val": [195, 198], "scored_4gram": 305, "scored_synonym": [55, 57, 77], "scorer": 170, "scott": 144, "scotti": 307, "scout": 306, "scratch": [52, 161, 307], "screen": [57, 63, 155, 288, 289, 307], "screen_nam": 289, "screenanam": [57, 102], "screw": 307, "scribbl": 307, "scribe6": 140, "script": [57, 72, 85, 118, 119, 134, 185, 242, 253, 254, 271, 273, 315, 339, 351], "scriptur": 351, "scroll": 119, "scrollbar": [117, 119], "scrollregion": [114, 119], "scrollwatcherwidget": [0, 114, 119], "sd": [57, 60, 133], "sd500": 91, "sdf": 350, "sdf123": 350, "sdot": 192, "se": [57, 107, 164, 307, 333], "sea": [67, 182, 305], "sean": [148, 356], "search": [0, 24, 28, 34, 39, 57, 72, 77, 91, 104, 106, 107, 111, 116, 128, 131, 170, 171, 177, 202, 217, 222, 225, 234, 261, 267, 268, 273, 274, 288, 289, 291, 294, 306, 307, 309, 315, 322, 351, 356], "search_demo": [0, 285, 288], "search_leav": 235, "search_tweet": [285, 289], "searchpath": 131, "seat": 307, "seattl": 83, "sebastian": 356, "sec": 289, "second": [23, 25, 33, 34, 41, 52, 57, 68, 72, 77, 84, 100, 111, 127, 128, 129, 135, 145, 180, 182, 184, 190, 191, 192, 193, 225, 231, 244, 248, 272, 286, 300, 307, 309, 311, 318, 322, 326, 347, 356], "second_on": 347, "secondari": [67, 238, 307], "secret": [289, 333], "secript": [118, 119, 185], "sect": 192, "section": [2, 23, 44, 57, 58, 62, 64, 66, 71, 74, 75, 78, 83, 86, 87, 94, 99, 104, 107, 148, 182, 251, 267, 289, 294, 300, 305, 307, 313, 333, 344, 356], "section_read": [57, 78], "secur": [336, 356], "sed": 253, "see": [12, 14, 28, 33, 34, 38, 42, 46, 53, 55, 57, 58, 63, 64, 66, 70, 71, 72, 74, 75, 80, 83, 84, 86, 92, 94, 95, 99, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 117, 119, 120, 121, 124, 125, 127, 128, 131, 134, 135, 136, 138, 146, 148, 161, 162, 165, 167, 169, 173, 174, 177, 179, 182, 184, 191, 192, 204, 206, 209, 214, 216, 217, 218, 220, 221, 223, 224, 225, 229, 234, 236, 243, 244, 248, 251, 263, 264, 265, 266, 267, 268, 271, 275, 281, 282, 284, 286, 287, 288, 289, 291, 294, 300, 301, 307, 311, 312, 313, 314, 315, 318, 319, 322, 326, 329, 330, 333, 337, 338, 342, 343, 344, 347, 349, 355, 356], "see_also": [57, 72], "seealso": [33, 234], "seed": [135, 136, 142, 234, 268, 329], "seek": [0, 24, 104, 111, 163, 218], "seekabl": 111, "seekableunicodestreamread": [0, 111], "seen": [35, 135, 142, 179, 213, 223, 303, 309, 313, 339, 343, 347, 351], "seg": 250, "seg1": 151, "seg2": 151, "segm": 80, "segment": [0, 118, 143, 145, 199, 203, 236, 239, 250, 251, 258, 259, 274, 296, 307, 328, 356], "segment_fil": [236, 250], "segment_s": [236, 250], "seguint": 333, "segundo": 333, "sehe": 321, "sehen": 321, "sei": 333, "sei3i": 205, "seizur": 67, "seja": 333, "seldom": 198, "select": [0, 2, 8, 13, 32, 38, 57, 59, 65, 72, 81, 84, 89, 100, 107, 108, 113, 114, 117, 119, 153, 155, 157, 159, 162, 165, 167, 171, 178, 179, 192, 206, 218, 233, 235, 244, 274, 287, 288, 294, 300, 305, 307, 314, 329, 332, 335, 351], "select_anchor": [114, 117], "select_clear": [114, 117], "select_includ": [114, 117], "select_set": [114, 117], "selectbackground": 117, "selectborderwidth": 117, "selectdownloaddirmessag": [0, 113], "selected_row": [114, 117], "selectforeground": 117, "selection_anchor": [114, 117], "selection_clear": [114, 117], "selection_includ": [114, 117], "selection_set": [114, 117], "selectkbest": 38, "selector": [235, 307], "self": [14, 31, 33, 44, 52, 57, 79, 80, 99, 104, 107, 108, 111, 112, 113, 117, 119, 120, 124, 125, 129, 131, 132, 135, 142, 160, 162, 170, 179, 184, 186, 187, 190, 191, 205, 214, 223, 224, 237, 268, 271, 274, 275, 282, 303, 307, 309, 314, 323, 336, 351], "selkirk": [240, 248], "seller": 356, "selrestr": 307, "sem": [0, 57, 93, 111, 120, 124, 125, 126, 128, 129, 130, 299, 300, 309, 311, 312, 313, 314, 318, 319, 322, 326, 330, 333, 336, 337, 338, 358], "sem2": 338, "sem4": 311, "sem_tag": 93, "semant": [12, 16, 17, 28, 57, 69, 72, 93, 105, 111, 125, 148, 180, 181, 182, 183, 186, 188, 194, 197, 233, 236, 295, 298, 307, 309, 313, 314, 315, 317, 354, 356, 358], "semanticb": 356, "semcor": [55, 57, 351], "semcor_": 351, "semcorcorpusread": [55, 57, 93], "semcorsent": [55, 57, 93], "semcorwordview": [55, 57, 93], "semi": 192, "semi_rel2reldict": [0, 180, 192, 336], "semin": 215, "semkei": [194, 338], "sempr": 333, "semrel": 338, "semrep": 338, "semtyp": [55, 57, 72, 187, 318], "semtype_fil": [125, 187], "semtype_inherit": [55, 57, 72], "semvalu": 338, "sen": [240, 248], "senat": 307, "send": [288, 289, 307], "sender": 117, "senna": [0, 30, 213, 356], "senna_main": 39, "senna_path": 39, "sennachunktagg": [0, 213, 222], "sennanertagg": [0, 213, 222], "sennatagg": [0, 213, 222], "sens": [30, 33, 57, 72, 81, 89, 94, 107, 124, 135, 144, 148, 172, 181, 199, 214, 262, 292, 307, 311, 315, 335, 351, 356], "sensat": 342, "sense_kei": [57, 107], "senseidx5wn": [57, 107], "sensenumb": [57, 81, 89], "sensev": [55, 57, 356], "sensevalcorpusread": [55, 57, 94], "sensevalcorpusview": [55, 57, 94], "sensevalinst": [55, 57, 94, 307], "sensibl": [263, 264, 265, 266, 267], "sensibli": 229, "sensit": [146, 213, 214, 234, 351], "sent": [0, 11, 14, 39, 55, 57, 58, 59, 61, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 78, 79, 80, 86, 87, 88, 90, 91, 93, 99, 100, 109, 135, 137, 160, 162, 165, 167, 171, 172, 173, 174, 177, 178, 179, 197, 213, 214, 217, 219, 222, 223, 224, 225, 242, 245, 250, 273, 291, 297, 298, 301, 307, 313, 317, 324, 325, 332, 333, 334, 335, 338, 339, 341, 353], "sent_detector": 243, "sent_end_char": [236, 243], "sent_index": 181, "sent_path": [57, 79], "sent_segm": 80, "sent_splitt": [57, 64], "sent_start": [236, 243], "sent_tim": [55, 57, 100, 307], "sent_token": [0, 57, 58, 63, 66, 68, 71, 78, 87, 99, 103, 177, 197, 236, 239, 307, 333, 339, 356], "sent_typ": [57, 100], "sentbreak": [236, 243], "sentenc": [2, 14, 18, 25, 26, 28, 29, 30, 36, 39, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 72, 76, 78, 79, 80, 81, 87, 89, 90, 91, 93, 96, 99, 100, 103, 121, 123, 125, 135, 136, 137, 138, 139, 155, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 186, 187, 188, 192, 194, 197, 198, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 229, 231, 232, 233, 236, 239, 240, 242, 243, 245, 248, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 279, 282, 292, 296, 298, 300, 301, 302, 307, 311, 313, 314, 315, 319, 321, 322, 324, 325, 332, 334, 335, 338, 339, 343, 344, 346, 348, 353, 354, 356], "sentence1": 332, "sentence2": 332, "sentence_aligned_corpu": [263, 264, 265, 266, 267, 268], "sentence_bleu": [0, 256, 258, 262, 296], "sentence_chrf": [0, 256, 259], "sentence_gleu": [0, 256, 262], "sentence_id": [57, 88], "sentence_length": 274, "sentence_nist": [0, 256, 271], "sentence_pair": [263, 264, 267, 268], "sentence_polar": [57, 63], "sentence_read": 125, "sentence_rib": [0, 256, 273], "sentencecount": [57, 72], "sentences_from_text": [236, 243], "sentences_from_text_legaci": [236, 243], "sentences_from_token": [236, 243], "senti_synset": [55, 57, 95, 340], "sentid": [55, 57, 100, 307], "sentido": 333, "sentim_analyz": 339, "sentiment": [0, 63, 91, 95, 294, 295, 307, 356], "sentiment_analyz": [0, 195], "sentiment_val": [195, 198], "sentimentanalyz": [0, 195, 196, 197, 339], "sentimentintensityanalyz": [0, 195, 198, 339], "sentisynset": [55, 57, 95], "sentitext": [0, 195, 198, 356], "sentiwordnet": [55, 57, 295, 356], "sentiwordnetcorpusread": [55, 57, 95], "sentno": [57, 72], "sentnum": [57, 81, 89, 335], "sents_mod": [55, 57, 75, 80], "sentstart_thresh": 243, "sep": [29, 57, 58, 99, 226, 254, 307], "separ": [16, 30, 42, 57, 58, 59, 60, 61, 69, 72, 78, 80, 87, 91, 93, 99, 104, 106, 108, 111, 121, 131, 164, 175, 197, 224, 225, 226, 235, 239, 241, 243, 244, 246, 247, 248, 251, 253, 254, 275, 282, 287, 289, 291, 307, 339, 344, 356], "separate_baseline_data": 229, "sepler": 358, "septemb": [344, 356], "seq": [48, 51, 152, 216, 218, 229, 273, 343, 347], "sequenc": [25, 28, 33, 46, 50, 51, 52, 53, 81, 89, 104, 107, 117, 118, 119, 120, 121, 125, 131, 135, 136, 137, 138, 139, 142, 144, 145, 148, 151, 152, 160, 162, 167, 172, 178, 179, 182, 213, 214, 215, 218, 223, 224, 225, 231, 234, 235, 238, 241, 243, 244, 246, 248, 254, 255, 257, 258, 262, 273, 275, 279, 282, 291, 314, 333, 338, 344, 346, 356], "sequence1": 52, "sequence2": 52, "sequencewidget": [0, 114, 119], "sequenti": [0, 124, 213, 218, 221, 255, 267, 269], "sequentialbackofftagg": [0, 213, 223], "ser": [175, 224, 333], "serbian": 307, "serem": 333, "sergei": 72, "seri": [57, 69, 218, 223, 268, 302, 356], "seria": 333, "serial": [111, 183, 192, 229, 309], "serialis": 102, "serializ": 132, "serialize_output": 229, "serugu": 333, "serv": [10, 57, 72, 94, 163, 172, 184, 190, 191, 223, 286, 289, 307, 315, 343], "server": [0, 10, 111, 163, 291, 356], "server_index_url": 113, "servic": [154, 307, 351], "ser\u00e1": 333, "session": [25, 131, 289, 307, 346], "sessionapi": 289, "set": [2, 13, 14, 16, 25, 28, 30, 31, 32, 33, 34, 36, 38, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 64, 65, 68, 69, 72, 77, 78, 79, 81, 84, 87, 88, 89, 99, 100, 101, 102, 103, 107, 109, 113, 114, 116, 117, 118, 119, 120, 121, 124, 125, 127, 128, 129, 131, 135, 144, 146, 148, 149, 150, 151, 156, 159, 162, 164, 165, 167, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 184, 186, 190, 191, 192, 196, 197, 203, 204, 205, 209, 215, 216, 217, 218, 224, 225, 232, 233, 235, 238, 240, 243, 245, 246, 255, 257, 258, 261, 263, 264, 265, 266, 267, 268, 272, 275, 276, 277, 279, 282, 289, 291, 294, 299, 300, 302, 303, 305, 306, 307, 310, 312, 313, 315, 317, 322, 327, 328, 332, 333, 338, 339, 341, 343, 344, 346, 351, 352, 356], "set2rel": [0, 180, 186, 338], "set2txt": [0, 212], "set_bin_dir": [180, 181], "set_callback": 119, "set_cfg_callback": 115, "set_chart": [159, 162], "set_child": [114, 119], "set_discount": [0, 179], "set_grammar": [159, 162, 173, 174], "set_height": [114, 119], "set_label": [0, 114, 118, 275, 276, 282, 347], "set_logprob": [0, 179], "set_model_fil": [213, 217], "set_prob": [0, 179], "set_proxi": [0, 291, 294], "set_strategi": [159, 162], "set_symbol": [114, 119], "set_text": [114, 119], "set_uniform_prob": [256, 263, 264, 265, 266, 267, 268], "set_weight": [30, 33], "set_width": [114, 119], "setdefault": [0, 52, 120, 179, 314], "sethold": [0, 123, 127], "setlocal": 291, "setp": 174, "settl": 307, "setup": [0, 182, 285, 288, 325, 338], "setup_fixt": [163, 219, 322, 330], "setup_modul": [301, 303, 311, 317, 319, 333, 334], "setuptool": 355, "seu": 333, "seven": [57, 84, 109], "sever": [29, 57, 72, 88, 113, 158, 159, 163, 201, 202, 206, 213, 238, 244, 258, 260, 275, 282, 291, 303, 307, 308, 313, 315, 332, 347, 351, 356], "sex": [57, 100, 301, 307], "sexpr": [0, 57, 62, 236, 307], "sexpr_token": [0, 236, 246], "sexprtoken": [0, 236, 246], "sfm_file": 255, "sg": [182, 299, 300, 313, 332, 338], "sh": [57, 67, 107], "shackelford": 148, "shackleford": 148, "shadow": 131, "shah": 262, "shake": 307, "shakespear": [222, 356], "shall": 306, "shallow": [25, 52, 57, 66, 120, 179, 186, 197, 218, 275, 276, 277, 280, 282, 314, 347], "shallowli": 347, "shan": 198, "shane": 349, "shanghai": 300, "shannon": 136, "shant": 198, "shape": [0, 25, 27, 57, 107, 119, 164, 269, 291, 317], "shapeabl": 118, "share": [39, 57, 69, 78, 87, 100, 103, 107, 111, 113, 162, 167, 172, 204, 218, 222, 273, 275, 277, 294, 307, 313, 322, 344, 347, 351, 352], "sharealik": 96, "sharm": [254, 344], "sharp": 307, "she": [57, 67, 107, 163, 297, 299, 301, 305, 344], "shed": 305, "sheikh": [254, 344], "shelf": [213, 322, 356], "shell": 25, "sheppard": 307, "shift": [1, 8, 61, 117, 119, 151, 159, 174, 176, 251, 253], "shift_cost_coeff": 151, "shiftreduc": [0, 159], "shiftreducepars": [0, 159, 174, 332, 356], "shin": 148, "shine": [148, 328], "shipyard": 336, "shit": [198, 339], "shlep": 351, "shoebox": 356, "short": [28, 57, 80, 92, 105, 125, 133, 204, 215, 258, 272, 281, 284, 307, 332], "shortcut": [7, 8, 57, 83, 113, 307], "shorten": 73, "shorter": [52, 171, 258, 274], "shortest": [52, 57, 107, 121, 133, 258, 272, 351], "shortest_path_dist": [57, 107, 351], "shortid": [55, 57, 105, 307], "shot": [169, 310], "should": [14, 25, 27, 28, 29, 30, 33, 34, 35, 37, 38, 39, 41, 43, 48, 49, 50, 51, 52, 55, 57, 58, 59, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 98, 99, 100, 104, 105, 107, 108, 109, 111, 113, 116, 117, 118, 119, 120, 121, 124, 125, 128, 129, 131, 135, 136, 140, 144, 146, 152, 162, 163, 165, 167, 169, 171, 173, 174, 177, 178, 179, 181, 182, 184, 186, 187, 190, 191, 200, 202, 203, 206, 207, 208, 209, 215, 217, 218, 219, 223, 225, 229, 231, 233, 234, 235, 238, 241, 243, 244, 246, 247, 248, 250, 251, 252, 257, 258, 259, 262, 263, 264, 265, 267, 268, 274, 275, 276, 277, 279, 280, 282, 286, 287, 288, 289, 290, 291, 294, 298, 299, 303, 305, 306, 307, 309, 313, 314, 321, 322, 323, 324, 325, 328, 334, 344, 345, 347, 350, 351, 353], "shouldn": [111, 198, 325, 343], "shouldnt": 198, "show": [7, 8, 33, 36, 46, 51, 57, 72, 114, 119, 125, 147, 172, 179, 201, 202, 203, 214, 229, 234, 258, 259, 262, 288, 289, 294, 306, 309, 311, 315, 317, 322, 332, 335, 336, 344, 348], "show_cfg": [0, 111, 300, 313], "show_collect": 113, "show_column": [114, 117], "show_exampl": 187, "show_most_informative_featur": [30, 33, 35, 303], "show_packag": 113, "show_perc": 147, "show_thread_read": [125, 311], "show_tre": 177, "shower": 307, "shown": [7, 8, 14, 67, 113, 146, 209, 243, 275, 278, 311, 313, 315, 322, 336, 338], "showtext": [0, 114, 119], "shrubberi": 306, "shuffl": 150, "shut": [57, 72, 315], "shutdown": 10, "shy": 192, "si": 218, "si1466": 307, "si2": 205, "si2096": 307, "si836": 307, "sian": 300, "sibl": [275, 277, 281, 282, 284, 347], "sicenc": 68, "sid": [125, 339], "side": [7, 8, 14, 119, 121, 162, 167, 171, 173, 178, 281, 284, 307, 313], "sidereal_dai": 352, "sie": 321, "siegel": 144, "siehst": 321, "sieht": [313, 321], "siez": 342, "sig": 326, "sigefyrth": 109, "sigeweard": 109, "sight": 307, "sigir": [68, 149, 205], "sigkdd": [83, 91], "siglex": 94, "sigma": [33, 179, 192, 225], "sigma_exp": [0, 143, 145], "sigma_skip": [0, 143, 145], "sigma_sub": [0, 143, 145], "sigmaf": 192, "sign": [119, 120, 333, 354], "signal": [30, 92, 111, 251, 339], "signatur": [79, 80, 108, 112, 117, 120, 127, 181, 184, 191, 223, 275, 282, 292, 307, 326, 336], "signifi": 191, "signific": [33, 43, 150, 225, 305, 311, 333], "significantli": [29, 46, 48, 52], "significativament": 333, "sihan_post_process": 250, "sil": [133, 356], "silb": [240, 248], "silent": 10, "silli": [57, 63, 307], "sim": 192, "sime\u00e3o": 333, "similar": [0, 46, 49, 55, 57, 64, 72, 77, 106, 107, 119, 144, 145, 148, 172, 176, 225, 234, 243, 247, 251, 258, 274, 305, 307, 309, 315, 317, 332, 333, 338, 343, 344, 347, 353, 356], "similar_to": 107, "similar_word": [0, 234], "similarity_method": [251, 344], "similarli": [135, 137, 203, 218, 305, 307, 336, 343], "simionato": 112, "simmer": [57, 72, 315], "simp": 333, "simpl": [0, 7, 8, 18, 37, 48, 49, 57, 59, 61, 71, 93, 99, 104, 113, 119, 120, 125, 132, 133, 134, 135, 137, 140, 148, 159, 162, 173, 174, 179, 196, 218, 225, 234, 236, 252, 281, 284, 289, 295, 303, 307, 309, 311, 313, 314, 317, 336, 339, 343, 344, 348, 356], "simple_block_read": [104, 307], "simple_dress": 307, "simplegoodtur": 179, "simplegoodturingprobdist": [0, 179, 334], "simpler": [25, 28, 119, 236, 351], "simplest": [57, 72, 144, 307, 315], "simpli": [25, 33, 36, 61, 80, 93, 108, 113, 118, 121, 126, 135, 136, 144, 163, 167, 171, 179, 197, 213, 218, 253, 259, 262, 263, 264, 281, 284, 307, 309, 314, 346], "simplic": [135, 263, 267, 356], "simplifi": [57, 61, 124, 128, 180, 184, 187, 190, 191, 288, 307, 311, 318, 319, 333, 356], "simplify_po": [0, 25, 27], "simplify_tag": [57, 75, 333], "simplist": [57, 63, 216, 307], "simul": [309, 332], "simulate_root": [57, 107, 351], "simultan": 25, "sin": 251, "sinai": [254, 344], "sinc": [24, 37, 38, 52, 57, 63, 87, 121, 162, 164, 167, 182, 190, 191, 206, 235, 240, 275, 277, 281, 282, 284, 288, 293, 300, 306, 307, 309, 318, 322, 334, 335, 346, 351, 356], "sincer": 351, "sing": 314, "singl": [2, 8, 25, 28, 29, 31, 32, 33, 42, 55, 57, 59, 63, 69, 72, 78, 81, 84, 86, 89, 99, 100, 104, 107, 111, 113, 117, 118, 119, 120, 121, 125, 135, 139, 148, 159, 162, 167, 173, 174, 177, 178, 179, 181, 191, 192, 196, 197, 215, 218, 219, 225, 229, 233, 234, 235, 240, 241, 245, 248, 253, 255, 258, 259, 262, 269, 271, 275, 277, 281, 282, 284, 291, 307, 313, 314, 315, 335, 342, 347, 349, 352, 356], "single_meteor_scor": [0, 256, 269], "singleedgefundamentalrul": [0, 159, 162, 165, 167], "singleedgeprobabilisticfundamentalrul": [0, 159, 171], "singleton": [46, 49, 338], "singular": [46, 48, 51, 201, 202, 314, 347, 348], "sinica": [57, 96, 275, 278, 307, 356], "sinica_pars": [0, 275, 278], "sinica_treebank": [55, 57, 307], "sinicacorpu": 96, "sinicatreebankcorpusread": [55, 57, 96], "sink": 218, "sinta": 333, "sion": 205, "sir": [241, 344], "siria": 336, "sis2": 205, "sister": 235, "site": [57, 105, 333, 356], "situada": 333, "situat": [38, 57, 72, 315, 343, 356], "sitzungsperiod": 346, "six": [204, 333, 347], "size": [0, 33, 39, 52, 104, 111, 113, 114, 117, 119, 131, 135, 142, 151, 162, 171, 184, 185, 213, 223, 251, 274, 275, 279, 289, 306, 309, 311, 317, 322, 342, 343], "size_canva": 184, "size_nam": 307, "sizehint": 111, "sj": 218, "sji": [57, 103], "sk": [57, 106], "skardal": 356, "skikda": 202, "skillet": [57, 72, 315], "skin": 356, "skip": [55, 57, 58, 64, 66, 71, 74, 75, 83, 86, 87, 94, 99, 103, 104, 129, 148, 163, 197, 217, 242, 259, 291, 329], "skip_ambiguous_tweet": 197, "skip_bnew": 27, "skip_fil": [0, 57, 213, 227, 256], "skip_head": 197, "skip_instal": 113, "skip_retweet": 197, "skip_tongue_tweet": 197, "skipgram": [0, 291, 356], "skipintersect": 233, "sklearn": [38, 303, 317], "sklearnclassifi": [0, 30, 38, 303], "sko": 182, "skolem": [0, 129, 180, 191, 311], "skolem_funct": [0, 180, 191], "sl": [57, 106], "slang": [339, 351], "slap": 351, "slash": [29, 61, 80, 93, 108, 111, 120, 252, 314, 332, 344], "slashfeatur": [0, 120], "sleep": [57, 72, 299, 315, 326], "sleeper": 109, "sleet": 307, "slept": 316, "slf4j": 250, "slice": [52, 131, 236, 254, 306, 347], "slice_bound": [0, 131], "slice_obj": 131, "slide": [307, 328, 356], "slight": 291, "slightli": [182, 198, 203, 262, 300], "slip": [57, 72, 315, 356], "slk": 351, "slocum": 344, "slope": [179, 353], "slot": [0, 256, 267, 353], "slovak": [57, 106, 307], "slovenian": [57, 106, 307], "slow": [95, 229, 288, 339, 340, 346], "slowli": [95, 340], "slu": [42, 70], "slv": 351, "smain": 348, "small": [107, 121, 124, 135, 146, 229, 257, 263, 264, 265, 266, 267, 271, 281, 284, 307, 313, 315, 329, 334, 339, 351, 352, 356], "smaller": [25, 29, 57, 102, 104, 157, 258, 307, 351], "smallest": 157, "smart": [57, 63, 307, 339], "smell_emiss": 307, "smith": [148, 243, 262, 356], "smooth": [0, 57, 107, 135, 136, 138, 179, 218, 236, 251, 258, 271, 275, 281, 282, 284, 296, 325, 334, 344, 349, 351, 356], "smoothednr": [0, 179], "smoothing_cl": 138, "smoothing_funct": [258, 296], "smoothing_method": [251, 344], "smoothing_round": 251, "smoothing_width": 251, "smoothingfunct": [0, 256, 258, 296], "smoothli": [57, 68, 307], "smt": [140, 242, 254], "sn": 322, "sne": 317, "snlp": 328, "snooz": 307, "snow": 307, "snowbal": [0, 199, 203, 356], "snowballstem": 209, "snowballstemm": [0, 199, 209, 342, 356], "snyder": 307, "so": [25, 28, 33, 35, 57, 63, 72, 79, 99, 107, 117, 132, 133, 135, 136, 137, 142, 144, 157, 162, 172, 173, 174, 179, 191, 197, 198, 203, 206, 215, 232, 235, 247, 251, 254, 257, 258, 262, 267, 268, 274, 275, 279, 288, 291, 303, 306, 307, 311, 314, 317, 318, 322, 328, 329, 333, 335, 336, 339, 343, 344, 346, 351, 353, 356], "sobr": 333, "social": [198, 352], "societi": 203, "sociolinguist": 145, "socrat": [127, 322, 330, 337], "soda": 163, "sof": 336, "soft_delimit": 260, "softwar": [151, 224, 301, 356], "soi": 307, "sol": 333, "sold": 92, "sole": 243, "solemnli": 339, "soliloqui": 109, "sollten": 257, "solomon": 109, "solta": 333, "solu": 333, "solut": 225, "solv": [33, 157, 245], "somalia": 336, "sombr": 306, "sombra": 333, "some": [25, 33, 36, 37, 53, 55, 57, 62, 72, 79, 91, 100, 107, 108, 113, 117, 119, 120, 121, 125, 126, 128, 131, 134, 135, 136, 137, 138, 139, 145, 162, 170, 172, 176, 179, 182, 184, 188, 191, 198, 206, 213, 214, 215, 216, 218, 231, 233, 235, 238, 254, 258, 262, 263, 264, 265, 266, 267, 275, 282, 286, 288, 289, 298, 302, 305, 306, 307, 309, 311, 313, 315, 316, 317, 318, 322, 323, 328, 332, 333, 335, 336, 337, 341, 343, 344, 346, 347, 349, 351, 352, 353, 356], "some_corpu": [57, 59], "some_corpus_file_id": 307, "some_data": 307, "some_label": 33, "somebodi": 351, "somecorpusread": 307, "somehow": 135, "sometest": 308, "someth": [57, 100, 112, 135, 138, 307, 315, 318, 336, 344, 351], "sometim": [28, 30, 57, 72, 120, 121, 131, 148, 159, 243, 275, 282, 305, 307, 314, 315, 344], "somewhat": [198, 235], "song": 307, "sonor": 248, "sonority_hiearchi": 248, "sonority_hierarchi": 248, "sonority_sequenc": [0, 236], "soon": [118, 119, 185], "sophist": [268, 322], "sormovo": 336, "soron": 248, "sorri": [301, 343, 344], "sorria": 333, "sort": [0, 14, 57, 72, 83, 117, 118, 120, 121, 135, 137, 142, 147, 153, 160, 162, 171, 173, 174, 178, 196, 197, 198, 214, 232, 252, 255, 261, 269, 272, 275, 276, 291, 301, 302, 303, 305, 307, 309, 310, 312, 313, 314, 315, 318, 319, 325, 326, 332, 333, 334, 336, 337, 338, 339, 344, 351], "sort_bi": [114, 117], "sort_by_count": [147, 214, 328, 343], "sort_field": [0, 255], "sort_kei": [57, 102], "sort_queu": [159, 171], "sorta": 198, "sorted_data": 329, "sorted_set": 338, "sortof": 198, "sound": [57, 72, 100, 240, 248, 307], "sound_emiss": 307, "sound_exist": 307, "sound_mak": [57, 72], "sound_mov": [57, 72], "sound_sourc": [57, 72], "sourc": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 289, 290, 291, 292, 300, 307, 311, 315, 322, 333, 344, 346, 354], "source_block": 260, "source_group": [57, 84], "source_of_legal_author": 315, "source_s": 260, "source_sents_len": 260, "source_tag": 220, "source_tagset": [29, 66], "source_word_class": [266, 267], "sourceforg": [53, 356], "south": 100, "southern": [100, 336], "soviet": 336, "sp": 336, "spa": 351, "space": [7, 8, 46, 51, 52, 57, 61, 65, 75, 104, 115, 118, 119, 121, 163, 170, 179, 186, 218, 229, 239, 244, 247, 253, 255, 267, 268, 274, 291, 302, 309, 317, 326, 333, 345], "spacer": [0, 123, 125, 126, 128], "spacetoken": [0, 236, 247], "spacewidget": [0, 114, 119], "spade": 192, "spain": [57, 60, 133, 300], "spam": [303, 310], "span": [12, 14, 69, 107, 159, 162, 165, 167, 170, 171, 172, 178, 234, 236, 239, 243, 248, 253, 254, 274, 291, 305, 307, 335, 344, 351], "span1": 172, "span2": 172, "span_token": [236, 237, 239, 243, 244, 247, 253, 254, 344], "span_tokenize_s": [236, 237], "spangli": [57, 60], "spanisch": 274, "spanish": [57, 65, 100, 106, 209, 274, 336, 342, 356], "spanishstemm": [0, 199, 209], "spank": 307, "spans_to_rel": [0, 236, 254], "sparciti": [281, 284], "spars": [33, 38, 303], "sparsearrai": [46, 48], "spass": 322, "spatial_configur": 307, "spawn": 131, "speak": 314, "speaker": [57, 65, 98, 100, 301, 307], "speakerinfo": [55, 57, 100, 307], "spear": 306, "spearker": 98, "spearman": [0, 143, 273, 305, 356], "spearman_correl": [0, 143, 152, 305, 328], "spearman_rho": [0, 256, 273], "spec": [57, 108, 232, 318], "special": [16, 57, 58, 61, 64, 65, 72, 75, 80, 93, 98, 99, 109, 117, 119, 120, 134, 135, 142, 159, 163, 167, 188, 191, 209, 218, 231, 246, 291, 302, 307, 313, 314, 333], "special_case_idiom": [195, 198], "specialis": 307, "speciallist": [55, 57, 72], "specialti": [57, 72], "specif": [39, 44, 57, 59, 63, 65, 70, 72, 79, 80, 87, 91, 93, 106, 107, 108, 110, 111, 126, 128, 136, 146, 162, 172, 196, 209, 214, 218, 225, 229, 231, 232, 233, 245, 260, 268, 307, 311, 315, 342, 344, 345, 351, 355], "specifi": [10, 13, 14, 28, 29, 33, 34, 39, 44, 51, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 113, 117, 118, 119, 120, 121, 131, 133, 135, 137, 147, 148, 151, 156, 158, 161, 162, 163, 164, 165, 167, 171, 172, 173, 176, 177, 178, 179, 192, 196, 197, 203, 209, 213, 214, 215, 217, 222, 223, 224, 225, 231, 232, 233, 234, 235, 236, 237, 238, 246, 247, 250, 255, 257, 263, 264, 265, 266, 267, 268, 272, 275, 279, 281, 282, 284, 288, 291, 292, 294, 301, 307, 309, 311, 312, 313, 314, 319, 322, 330, 333, 336, 338, 344, 347, 351, 356], "speech": [1, 57, 67, 69, 72, 75, 79, 93, 99, 107, 156, 165, 179, 199, 211, 213, 214, 218, 221, 223, 225, 240, 261, 266, 275, 281, 282, 284, 292, 307, 315, 351, 356], "speed": [39, 49, 57, 72, 225, 315, 325, 356], "speicherbeh": 203, "speicherbehalt": 203, "speicherbeh\u00e4l": 203, "speicherbeh\u00e4lt": 203, "speicherbeh\u00e4ltern": 203, "spell": 20, "spent": 344, "sphere": 100, "spice": 339, "spiller": 356, "spit": 307, "spite": 241, "spkrid": [55, 57, 100, 307], "spkrinfo": [55, 57, 100, 307], "spkrutteranceid": [55, 57, 100], "split": [14, 25, 28, 36, 39, 57, 66, 69, 81, 87, 89, 99, 100, 104, 135, 144, 147, 157, 163, 164, 169, 170, 172, 175, 191, 193, 197, 208, 219, 221, 222, 223, 224, 236, 237, 241, 243, 244, 247, 250, 253, 254, 258, 259, 260, 261, 262, 273, 291, 296, 298, 299, 300, 302, 307, 311, 312, 313, 317, 319, 325, 328, 332, 333, 335, 336, 339, 341, 344, 348, 353], "split_at": [0, 256, 260], "split_non_ascii": 242, "split_rul": 302, "split_synset": [55, 57, 107], "split_train_test": [0, 195, 197], "split_valu": 260, "splitrul": [0, 25, 28, 302], "splitter": 344, "spn": 100, "spoke": 336, "spoken": [100, 218], "sponsor": 356, "sponsorship": 356, "sport": [30, 36, 303], "sports_sent": 36, "spot": 307, "spous": 313, "sprai": 307, "sprinkl": 307, "spx": 163, "spy": 351, "sq": 146, "sql": [182, 192], "sql0": 300, "sql_demo": [0, 180, 182], "sql_queri": [0, 180, 182, 300], "sqlite": 84, "squar": [29, 38, 120, 135, 137, 146, 179, 305, 314], "src": [57, 78, 307], "src_class": [266, 267], "src_phrase": 257, "src_phrase_span": 274, "src_sentenc": [256, 263, 264, 268, 274], "srclen": [261, 272], "srctext": [261, 272], "srd": 148, "sre_pattern": 192, "srl": [55, 57, 69], "srl_includes_roleset": [57, 69], "srl_instanc": [55, 57, 69], "srl_span": [55, 57, 69], "srparser": 1, "srparser_app": [0, 1], "ss": [57, 107, 239, 251, 253, 339, 353], "ss0": 205, "ss15": 140, "ss2of": [55, 57, 107], "ss_type": [57, 107], "ssen4": 205, "ssl": 289, "ssp": [248, 356], "st": [57, 72, 109, 205, 207, 208, 209, 218, 224, 254, 344], "st_custom": 205, "st_pre": 205, "sta": 333, "stabilis": [46, 50], "stabl": [120, 275, 276], "stack": [8, 119, 159, 174, 176, 274, 356], "stack_decod": [0, 256], "stack_siz": [256, 274], "stackdecod": [0, 256, 274], "stackoverflow": 72, "stackwidget": [0, 114, 119], "stage": [28, 162, 302], "stai": [135, 142, 272], "stale": [0, 113], "stalemessag": [0, 113], "stalk": 307, "stand": [110, 120, 135, 142, 181, 182, 314], "standard": [14, 25, 26, 28, 29, 31, 36, 51, 52, 53, 57, 81, 86, 89, 92, 100, 108, 109, 124, 129, 131, 135, 137, 159, 161, 162, 163, 176, 179, 186, 199, 203, 214, 215, 247, 253, 255, 270, 281, 284, 291, 307, 308, 313, 335, 343, 346, 347], "standardformat": [0, 255], "standardli": 336, "stanford": [0, 53, 91, 148, 159, 213, 236, 250, 356], "stanford_model": [224, 250], "stanford_segment": [0, 236, 356], "stanfordcorenlp": 175, "stanforddependencypars": [0, 159, 175], "stanfordnertagg": [0, 213, 224], "stanfordneuraldependencypars": [0, 159, 175], "stanfordpars": [0, 159, 175], "stanfordpostagg": [0, 213, 224], "stanfordsegment": [0, 236, 250, 356], "stanfordtagg": [0, 213, 224], "stanfordtoken": [0, 236, 249], "star": [63, 188], "start": [0, 7, 10, 12, 14, 16, 25, 28, 33, 46, 48, 49, 50, 52, 57, 58, 62, 64, 66, 69, 71, 72, 74, 75, 81, 83, 86, 89, 91, 94, 99, 100, 104, 107, 111, 113, 120, 121, 129, 131, 135, 148, 159, 162, 163, 164, 165, 167, 168, 171, 172, 173, 174, 178, 183, 191, 205, 213, 218, 219, 221, 231, 233, 239, 243, 244, 251, 253, 254, 258, 267, 268, 272, 274, 275, 277, 279, 282, 291, 294, 300, 307, 309, 311, 313, 316, 320, 322, 332, 333, 335, 338, 344, 345, 347, 355, 356], "start1": 233, "start2": [221, 233], "start_i": [237, 244, 247], "start_index": [52, 172], "start_posit": 131, "start_r": 104, "start_symbol": 178, "start_t": 307, "start_tok": 104, "start_toknum": 104, "startcollectionmessag": [0, 113], "startdownloadmessag": [0, 113], "starter": 243, "starting_quot": [236, 239, 253], "startpackagemessag": [0, 113], "startpo": [57, 58, 64, 66, 71, 74, 75, 83, 86, 94, 99, 104], "startunzipmessag": [0, 113], "startup": 134, "stat": [57, 91, 144, 216, 229, 307], "state": [7, 28, 92, 97, 117, 121, 148, 167, 172, 173, 174, 217, 218, 234, 239, 252, 267, 307, 309, 313, 314, 316, 322, 330, 332, 342, 356], "state_j": 218, "state_or_provinc": 163, "state_unio": 307, "state_union": 307, "statefulli": 235, "stateless": 111, "statement": [23, 32, 61, 129, 219, 300, 307, 322, 356], "static": [28, 32, 36, 44, 52, 78, 79, 81, 85, 89, 113, 119, 120, 125, 130, 131, 146, 162, 164, 167, 171, 189, 203, 215, 231, 245, 257, 258, 266, 274, 275, 279], "statis": 225, "statist": [29, 70, 148, 149, 150, 151, 172, 215, 216, 225, 229, 243, 252, 262, 263, 264, 265, 266, 267, 268, 271, 274, 333, 343, 346], "statmt": 259, "statu": [0, 57, 72, 93, 113, 289, 315], "status": 289, "status_cod": 289, "stderr": [113, 131, 163], "stdin": [131, 231, 232, 233, 291, 351], "stdlib": 131, "stdoffset": [285, 286], "stdout": [34, 41, 131, 163, 179, 289, 306, 332], "steak": 323, "steal": 307, "steam": [57, 72, 315], "steedman": 299, "stem": [0, 57, 61, 65, 107, 149, 269, 295, 297, 301, 351, 354], "stem1": [199, 202], "stem_match": [0, 256, 269], "stem_unicod": 209, "stemmer": [199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 269, 294, 333, 356], "stemmer2": 342, "stemmeri": [0, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 269], "sten": 203, "step": [0, 2, 7, 8, 38, 46, 48, 57, 66, 121, 131, 135, 148, 153, 158, 159, 162, 173, 174, 196, 204, 209, 229, 253, 261, 263, 264, 265, 266, 267, 332], "stephan": [245, 262], "stephen": [263, 264, 265, 266, 267, 268], "steppingchartpars": [0, 159, 162], "steppingrecursivedescentpars": [0, 159, 173], "steppingshiftreducepars": [0, 159, 174], "steven": [0, 262, 354, 356, 358], "stevenbird": [111, 269, 358], "sthe": 336, "still": [111, 116, 117, 121, 164, 170, 225, 234, 258, 306, 307, 311, 345, 354, 356], "stimulu": [57, 72], "stimulus_subject": 307, "stirl": 146, "stk_0_form_on": 176, "stk_0_lemma_on": 176, "stk_0_pos_in": 176, "stk_0_pos_top": 176, "stk_1_pos_nn": 176, "stock": [310, 353], "stok": 333, "stoni": [163, 224], "stop": [37, 52, 131, 159, 163, 179, 197, 204, 216, 217, 286, 289, 307, 312], "stopiter": 304, "stopword": [37, 209, 234, 251, 305, 307, 342], "storag": [183, 257], "store": [30, 43, 57, 59, 72, 86, 104, 109, 110, 111, 124, 125, 127, 129, 135, 137, 142, 149, 161, 167, 176, 177, 179, 182, 183, 192, 196, 197, 235, 241, 243, 257, 264, 265, 266, 267, 268, 286, 289, 300, 306, 307, 309, 311, 322, 336, 338, 347, 356], "store_log": 179, "stori": [163, 306, 307], "storm": 307, "stp": 164, "str": [14, 23, 28, 29, 31, 33, 34, 41, 52, 55, 57, 58, 59, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 98, 99, 102, 104, 105, 107, 108, 109, 110, 111, 112, 116, 117, 119, 121, 124, 125, 131, 132, 135, 136, 137, 138, 139, 142, 145, 147, 148, 149, 151, 156, 160, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 187, 190, 191, 192, 194, 196, 200, 202, 203, 207, 208, 209, 211, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 229, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 278, 281, 282, 284, 287, 289, 290, 291, 292, 299, 302, 307, 309, 311, 312, 317, 318, 319, 326, 343, 347, 351], "str1": 145, "str2": 145, "str2chunktre": [57, 66], "str2tupl": [0, 57, 99, 213, 226], "straight": [291, 307], "straightforward": 315, "strang": 107, "strangl": 345, "strategi": [2, 28, 159, 162, 165, 167, 171, 197, 332, 351], "stream": [0, 34, 41, 57, 58, 59, 61, 64, 66, 67, 71, 74, 75, 76, 78, 79, 80, 86, 91, 93, 94, 99, 100, 104, 108, 111, 113, 135, 139, 177, 179, 191, 260, 275, 282, 288, 289, 291], "streambackedcorpusview": [55, 57, 58, 63, 64, 66, 68, 71, 74, 75, 83, 86, 87, 90, 91, 94, 99, 102, 104, 108, 111, 307], "streamer": [0, 285, 289], "streamlin": 356, "streamread": [111, 307], "streamtofile_demo": [0, 285, 288], "street": [88, 148, 307, 313], "strength": [57, 91, 198, 354], "stress": 67, "stretch": 351, "strict": [29, 57, 101, 111, 246, 255, 356], "strict_json": 163, "strictli": [120, 305, 314, 336, 343], "strida": 307, "string": [13, 14, 16, 23, 25, 28, 29, 30, 32, 33, 38, 44, 51, 52, 55, 57, 58, 59, 60, 61, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 104, 105, 107, 108, 109, 111, 113, 115, 117, 119, 120, 121, 124, 128, 131, 135, 137, 138, 142, 144, 145, 147, 148, 162, 163, 164, 169, 172, 173, 174, 175, 177, 179, 180, 181, 182, 183, 184, 186, 187, 191, 192, 196, 198, 204, 205, 207, 209, 210, 213, 214, 215, 223, 225, 226, 229, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 251, 253, 254, 255, 257, 258, 259, 272, 273, 274, 275, 278, 279, 281, 282, 284, 288, 289, 291, 300, 302, 303, 306, 307, 309, 311, 313, 315, 320, 322, 323, 324, 326, 328, 333, 336, 338, 339, 343, 344, 345, 347, 350, 356], "string1": 336, "string2": 336, "string3": 336, "string_categori": [55, 57], "string_span_token": [0, 236, 254], "stringcategorycorpusread": [55, 57, 97], "stringio": [307, 309], "stringtoken": [0, 236, 237, 247], "strip": [25, 28, 29, 57, 61, 65, 84, 101, 104, 107, 109, 111, 197, 200, 202, 206, 207, 208, 209, 214, 243, 247, 255, 302, 307, 333, 335], "strip_emr": [199, 203], "strip_eol_hyphen": [236, 242], "strip_esn": [199, 203], "strip_g": [199, 203], "strip_handl": [238, 344], "strip_nd": [199, 203], "strip_off_emoticon": 197, "strip_prefix_flag": 205, "strip_rul": 302, "strip_skip": [236, 242], "strip_spac": [57, 61, 65], "strip_t": [199, 203], "striprul": [0, 25, 28, 302], "strong": [217, 240], "strongbacktrack": 217, "strongest": 91, "strongli": [120, 206, 306, 314, 351, 355], "struct": 314, "structur": [0, 2, 7, 8, 14, 24, 25, 26, 28, 29, 32, 57, 61, 62, 63, 69, 72, 76, 81, 89, 92, 93, 104, 111, 119, 121, 122, 125, 159, 160, 162, 163, 164, 165, 167, 171, 172, 173, 174, 180, 181, 184, 186, 188, 192, 240, 248, 255, 274, 275, 277, 281, 282, 284, 291, 299, 301, 302, 307, 315, 322, 333, 335, 336, 347, 354, 356], "struggl": 307, "strunk": 243, "stuart": 356, "stuck": [267, 268], "student": [119, 146, 305, 311, 313, 354, 356], "student_t": [143, 146, 305, 328], "studi": [151, 163, 224, 240, 248], "stuff": 344, "stump": [30, 32], "stupid_quotes_1": [236, 252], "stupid_quotes_2": [236, 252], "stupidbackoff": [0, 135, 138], "sturgeon": 307, "style": [29, 53, 57, 69, 111, 128, 155, 164, 275, 282, 313], "stylist": 155, "stype": [57, 72], "su": [205, 315], "sua": 333, "sub": [13, 28, 57, 72, 159, 166, 192, 214, 262, 301, 307, 310, 336], "subcat": 313, "subcategor": 321, "subcategori": [13, 307], "subclass": [25, 28, 31, 52, 55, 57, 59, 61, 72, 80, 81, 87, 89, 93, 105, 108, 111, 118, 119, 120, 121, 124, 131, 132, 160, 162, 171, 177, 179, 181, 209, 214, 223, 224, 231, 233, 237, 244, 275, 282, 286, 307, 313, 323, 342, 347], "subcorpora": [57, 72], "subcorpu": [57, 72], "subdir": [0, 113, 289, 290], "subdirectori": [57, 73, 100, 110, 113, 290, 307], "subdiv": [57, 60], "subdiv_dict": [55, 57, 60], "subdivis": [57, 60], "sube": 192, "subel": 255, "subev": [57, 72, 315], "subexpress": 191, "subf": [57, 72], "subfenam": [57, 72], "subfold": 294, "subfram": [57, 72, 315], "subframenam": [57, 72], "subgraph": 351, "subid": [57, 72], "subitament": 333, "subiter": 260, "subj": [57, 63, 182, 187, 192, 301, 307, 311, 312, 313, 314, 318, 333, 339], "subj_doc": 339, "subjclass": [192, 336], "subject": [57, 63, 91, 117, 161, 172, 182, 192, 197, 298, 318, 336, 339], "subjsym": [192, 336], "subjtext": [192, 336], "sublist": [52, 233], "submodul": 119, "subordin": [57, 72, 315], "subpart": 119, "subprocess": [131, 164, 332], "subscr": 16, "subscript": [16, 52], "subsequ": [52, 120, 144, 162, 165, 182, 192, 218, 240, 274, 275, 282, 300, 313, 339], "subset": [57, 106, 119, 186, 197, 209, 229, 233, 307, 355, 356], "subseteq": 119, "subsitut": 203, "subst": [57, 80, 297], "substance_emiss": 307, "substance_holonym": 107, "substance_meronym": 107, "substanti": [198, 267, 356], "substituit": 242, "substitut": [12, 13, 15, 28, 61, 111, 129, 145, 148, 173, 191, 235, 253, 298, 299], "substitute_bind": [0, 120, 123, 129, 180, 191, 314], "substitutebindingsi": [0, 120, 167, 180, 191], "substitution_cost": 148, "substitutionruleset": 298, "substr": [28, 80, 104, 172, 207, 223, 236, 237, 244, 246, 247, 275, 282, 291, 307, 344], "subsum": [0, 57, 107, 120, 123, 129, 170, 351], "subtag": [57, 60], "subtask": 336, "subterm": 184, "subtoken": [173, 218, 233], "subtop": [251, 344], "subtract": 170, "subtre": [0, 25, 28, 114, 118, 121, 162, 173, 178, 275, 277, 281, 282, 284, 291, 336, 347, 349], "subtyp": [57, 72, 184, 191, 275, 276, 280, 282, 315], "subvers": [113, 181], "succ": 326, "succe": [275, 276, 307, 322], "success": [124, 173, 174, 183, 254, 266, 267, 291, 302], "successful_encod": 291, "successfulli": [129, 158, 173, 174, 355], "sudo": [294, 355], "sudoh": 273, "sue": 338, "suf1": [199, 204], "suf32": [199, 204], "suff": [199, 201, 202], "suffer": 307, "suffici": [91, 113, 288, 305, 322], "suffix": [15, 146, 182, 197, 201, 202, 203, 204, 206, 209, 210, 223, 356], "suffix_noun_step1a_success": [199, 209], "suffix_noun_step2a_success": [199, 209], "suffix_noun_step2b_success": [199, 209], "suffix_noun_step2c2_success": [199, 209], "suffix_replac": [0, 199, 210], "suffix_verb_step2a_success": [199, 209], "suffix_verb_step2b_success": [199, 209], "suffixe_noun_step1b_success": [199, 209], "suffixes_verb_step1_success": [199, 209], "suffoc": 307, "suficient": 333, "sufix": 204, "suggest": [91, 121, 258, 356], "suit": [177, 243, 334, 351, 354], "suitabl": [117, 152, 164, 197, 254, 268, 274, 291, 322, 354], "sultan": [57, 106], "sum": [33, 35, 57, 72, 84, 91, 121, 135, 138, 145, 175, 179, 192, 215, 218, 258, 262, 263, 264, 273, 307, 325], "sum1": 33, "sum2": 33, "sum_": 218, "sum_log": [0, 179], "sum_s0": 218, "sum_t": 218, "sum_to_on": [0, 179], "summar": [57, 63, 72, 83, 91, 265, 266, 267], "summari": [171, 178], "summat": 218, "summer": [344, 356], "summerofcod": 356, "sun": 22, "sunter": 148, "suntsu": [0, 18], "suntsu_chat": [0, 18, 22], "suo3": 205, "sup": 192, "sup1": 192, "sup2": 192, "sup3": 192, "supe": 192, "super": [132, 298, 339], "superclass": 307, "supercon": 348, "superconductor": 348, "superf": [57, 72], "superfenam": [57, 72], "superflu": 319, "superfram": [57, 72], "superframenam": [57, 72], "superior": 344, "superl": 68, "superset": 231, "superst": [57, 72], "supertyp": [57, 72], "supervis": [46, 218, 243], "supid": [57, 72], "supp": 315, "supplement": 109, "supplementari": 214, "supplementary_ideographic_plan": [236, 254], "suppli": [33, 52, 57, 86, 94, 117, 120, 131, 144, 179, 223, 238, 248, 258, 307, 314, 315, 332, 335, 343, 353], "support": [10, 25, 28, 33, 38, 39, 40, 57, 60, 69, 70, 72, 75, 79, 107, 111, 112, 119, 120, 132, 133, 144, 148, 175, 176, 177, 180, 209, 219, 234, 235, 236, 258, 259, 286, 303, 307, 308, 309, 311, 314, 317, 342, 343, 344, 347, 356], "support_cutoff": [32, 303], "supported_oper": [30, 39], "suppos": [24, 311, 322, 344], "sur": 344, "sure": [24, 28, 57, 59, 124, 135, 137, 236, 257, 270, 291, 294, 302, 307, 314, 343, 344, 346], "surfac": [57, 76], "surround": [28, 234, 291], "survei": [144, 148, 245], "surviv": [306, 311], "susan": [57, 85, 148, 240, 248], "suspect": [307, 315], "suspicion": 315, "sux": 339, "suzi": 338, "sv": [57, 106], "svar": 16, "svc": 303, "svd": [46, 48, 49, 50, 51], "svd_dimens": [48, 49, 50, 51], "svg": [0, 164, 275, 279], "svm": [0, 30, 38, 303], "svmclassifi": [0, 30, 40], "svn": [307, 314, 347], "svn_revis": [0, 113], "sw": [149, 331], "swadesh": [57, 85, 356], "swadeshcorpusread": [55, 57, 106], "swallow": [163, 219, 222, 224, 260, 351], "swap": [157, 268], "swarm": 307, "swat": 307, "swbp": 182, "swe": 351, "sweden": 358, "swedish": [57, 106, 209, 342], "swedishstemm": [0, 199, 209], "swelter": 307, "swift": 288, "switch": [57, 90, 262, 307, 332, 356], "switchboard": [55, 57, 307, 356], "switchboardcorpusread": [55, 57, 98], "switchboardturn": [55, 57, 98], "swn": [95, 340], "sx": [15, 298], "sx1": 344, "sx116": 307, "sx2": 344, "sx206": [100, 307], "sx26": 307, "sx296": 307, "sy": [289, 291, 332], "sydnei": 358, "syllab": 240, "syllabif": [240, 248], "syllabifi": [240, 248], "syllabl": [240, 248], "syllable_list": [240, 248], "syllabletoken": [0, 236, 248, 356], "symbol": [0, 7, 28, 57, 58, 61, 63, 65, 66, 68, 78, 79, 82, 83, 86, 87, 90, 91, 93, 99, 102, 106, 107, 108, 114, 119, 121, 135, 162, 167, 173, 178, 180, 182, 184, 186, 191, 192, 218, 236, 239, 242, 252, 253, 289, 291, 300, 311, 325, 332, 334, 338, 344], "symbol_regex": [236, 242], "symbolsheet": [114, 119], "symbolwidget": [0, 114, 119], "symlink": 307, "symmetr": [182, 261, 262, 300, 313, 351], "symmetrisat": 261, "synchron": [145, 307], "synonym": [55, 57, 77, 106, 107, 269, 351, 356], "synrep": 338, "synrestr": 307, "syns": [57, 107], "synset": [55, 57, 95, 107, 291, 292, 347, 352, 353, 356], "synset1": [57, 107, 351], "synset2": [57, 107, 351], "synset_from_pos_and_offset": [55, 57, 107, 351], "synset_from_sense_kei": [55, 57, 107, 351, 356], "syntact": [2, 26, 57, 59, 107, 109, 121, 159, 162, 163, 194, 307, 315, 317, 332, 333], "syntactic_mark": [57, 107], "syntax": [2, 57, 91, 105, 160, 194, 215, 235, 275, 282, 302, 307, 314], "syntaxcorpusread": [55, 57, 59, 62, 71, 76, 96], "syntre": [194, 338], "syrian": 307, "system": [34, 39, 111, 113, 119, 131, 182, 218, 219, 233, 258, 261, 262, 271, 273, 291, 292, 294, 300, 307, 308, 356], "systemat": [258, 296], "szlig": 192, "s\u00e3o": [333, 356], "s\u00ed": 344, "s\u00faplice": 333, "s\u0569\ua665\ufb77\u16f5": [], "s\u1dbf": [], "t": [29, 33, 57, 67, 72, 91, 92, 109, 111, 113, 118, 121, 127, 131, 134, 135, 144, 145, 146, 147, 148, 151, 161, 164, 172, 175, 178, 179, 182, 186, 191, 197, 198, 203, 205, 213, 214, 216, 218, 229, 236, 239, 247, 248, 251, 252, 253, 254, 258, 259, 262, 263, 264, 265, 266, 267, 271, 272, 273, 275, 279, 282, 283, 298, 299, 300, 302, 303, 305, 308, 310, 311, 313, 314, 317, 322, 323, 325, 326, 328, 329, 330, 332, 333, 334, 338, 339, 341, 343, 344, 345, 346, 347, 351, 354], "t0": 302, "t1": 302, "t10": 302, "t2": [144, 302], "t3": [144, 302], "t4": 302, "t5": 302, "t6": 302, "t61": [57, 103], "t7": 302, "t8": 302, "t9": 302, "t_i": 225, "t_t": 225, "ta": [57, 106, 239, 253], "ta2": 205, "tab": [10, 57, 104, 107, 113, 164, 236, 244, 247, 252, 310, 345, 356], "tab2dict": [0, 212], "tab2intdict": [0, 212], "tab2ivdict": [0, 212], "tab2tup": [0, 212], "tab_dir": 33, "tab_fil": [57, 107], "tabbi": [163, 175], "tabdata": 0, "tabdecod": [0, 212], "tabencod": [0, 212], "tabl": [0, 24, 33, 36, 57, 60, 69, 100, 107, 113, 114, 120, 146, 148, 176, 178, 182, 223, 251, 263, 264, 265, 266, 267, 268, 274, 300, 314, 332], "tableau": [0, 123], "tableau_test": [0, 123, 130], "tableauprov": [0, 123, 130, 312, 322], "tableauprovercommand": [0, 123, 130, 322], "tablet": [266, 267, 268], "tabtoken": [0, 57, 71, 236, 247], "tabul": [0, 147, 179, 214, 273, 356], "tabular": 322, "tac": [275, 282], "tacilp4i": 205, "tackl": 356, "tacohn": 46, "tadm": [0, 30, 33, 303], "tadmeventmaxentfeatureencod": [0, 30, 33, 41], "tadmmaxentclassifi": [0, 30, 33], "taft": 307, "tag": [0, 26, 27, 28, 29, 30, 39, 52, 55, 57, 59, 60, 61, 62, 64, 65, 66, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 84, 85, 86, 89, 91, 93, 94, 98, 100, 105, 107, 108, 109, 114, 119, 121, 131, 132, 133, 147, 159, 161, 163, 164, 169, 170, 172, 175, 177, 179, 192, 211, 227, 229, 230, 231, 232, 233, 275, 281, 282, 284, 295, 301, 302, 305, 310, 311, 313, 315, 319, 324, 334, 336, 345, 353, 354, 356], "tag1": [57, 99, 307], "tag2": [57, 99, 307], "tag2q": [0, 133], "tag3": [57, 99, 307], "tag_": [57, 62], "tag_1": 218, "tag_mapping_funct": [74, 99], "tag_n": [57, 79, 218], "tag_on": [213, 223], "tag_pattern": [28, 302], "tag_pattern2re_pattern": [0, 25, 28, 302], "tag_sent": [30, 39, 159, 163, 213, 214, 217, 219, 222, 224], "tag_set": 334, "tagdata": [213, 225], "tagfil": 307, "tagged_": [57, 59, 61, 62, 64, 65, 69, 70, 71, 72, 75, 82, 84, 85, 93, 98, 105, 107, 108, 109, 307], "tagged_chunk": [55, 57, 93, 307], "tagged_data": 229, "tagged_discours": [55, 57, 98], "tagged_para": [55, 57, 62, 64, 66, 75, 79, 86, 99, 109, 307], "tagged_pars": [159, 161, 175], "tagged_parse_s": [159, 175], "tagged_post": [55, 57, 82, 307], "tagged_s": [25, 55, 57, 59, 61, 62, 64, 65, 66, 69, 71, 74, 75, 79, 86, 93, 99, 109, 213, 214, 216, 222, 223, 297, 301, 307, 324, 333, 334, 343], "tagged_sent": [25, 226], "tagged_sequ": 215, "tagged_span": [57, 69], "tagged_text": 302, "tagged_tok": 213, "tagged_token": [25, 28, 226, 233], "tagged_treebank_para_block_read": [55, 57, 104], "tagged_turn": [55, 57, 98], "tagged_word": [55, 57, 59, 61, 62, 64, 65, 66, 69, 71, 74, 75, 76, 79, 80, 82, 86, 93, 98, 99, 109, 179, 297, 301, 305, 307, 324, 333], "taggedcorpusread": [55, 57, 79, 99, 109, 307], "taggedcorpusview": [55, 57, 64, 99, 307], "taggedsent_to_conl": [0, 159, 177], "taggedsents_to_conl": [0, 159, 177], "taggedtyp": 28, "tagger": [27, 57, 89, 113, 161, 163, 169, 175, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 229, 232, 233, 294, 311, 319, 328, 333, 335, 356], "tagger0": 333, "tagger1": [216, 333, 343], "tagger2": [216, 333], "taggeri": [0, 39, 163, 213, 214, 215, 217, 218, 219, 221, 223, 224, 225], "taggertrain": 215, "taghva": 204, "tagpattern": 122, "tagrul": [0, 215, 227, 232], "tags_to_ignor": [57, 61], "tagset": [57, 59, 61, 62, 64, 65, 66, 69, 70, 71, 72, 74, 75, 79, 82, 84, 85, 86, 93, 96, 98, 99, 105, 107, 108, 109, 213, 220, 305, 307, 356], "tagset_map": [0, 213, 220], "tagspec": [79, 80, 108], "tagstr2tre": [0, 25, 29, 57, 66, 302], "tagtyp": 163, "tajik": 252, "take": [13, 14, 15, 20, 30, 33, 38, 42, 50, 51, 52, 55, 57, 59, 69, 72, 76, 79, 80, 92, 100, 104, 107, 108, 112, 119, 121, 125, 131, 135, 139, 144, 146, 148, 161, 163, 169, 170, 175, 179, 186, 191, 192, 196, 213, 217, 218, 223, 225, 229, 233, 241, 244, 254, 258, 259, 267, 291, 305, 306, 307, 309, 310, 311, 312, 314, 315, 317, 322, 325, 333, 344], "takefocu": 117, "taken": [57, 72, 73, 91, 92, 124, 155, 162, 167, 171, 179, 183, 198, 205, 206, 215, 266, 275, 279, 291, 307, 356], "taku": 262, "talbot": 261, "talk": [24, 57, 72, 307, 315, 326, 356], "talkbank": [57, 65, 301, 356], "tall": 326, "taln": 151, "talvez": 333, "tam": 328, "tamb": 333, "tamil": [57, 103, 106], "tampa": 148, "tan": 358, "tangibl": 351, "tanoaria": 333, "tanoth": 345, "tanya": 148, "tape": [301, 307], "target": [16, 30, 33, 57, 72, 84, 113, 116, 124, 153, 156, 220, 231, 234, 243, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 272, 274, 301, 315, 317, 333, 346], "target_block": 260, "target_child": 301, "target_s": 260, "target_sentence_length": 267, "target_sents_len": 260, "target_tagset": [29, 66], "target_word": 333, "target_word_class": [266, 267], "tartaru": [206, 209], "task": [25, 30, 46, 52, 92, 119, 144, 151, 159, 196, 215, 218, 238, 273, 317, 322, 328, 336, 344], "tasti": 338, "tau": [192, 273], "taught": [170, 310], "tautologi": 129, "tax": [92, 307], "taxonomi": [57, 107, 330, 351], "taylor": 288, "taza": 344, "tb": 247, "tbl": [0, 215, 216, 343], "tcl": 307, "tcp": 10, "tcud1": 205, "tcvn": [57, 103], "td": 345, "te": 347, "tea": 67, "teach": [196, 218, 354, 356], "team": [36, 344, 356], "tear": 179, "tearless": 329, "technic": [61, 281, 284], "techniqu": [218, 258, 296, 322], "technologi": [88, 203], "ted": [94, 107], "tediou": [57, 63, 135, 307], "teem": 307, "teen": [20, 163], "teenag": [57, 63, 307], "tei": [57, 79], "teicorpusview": [55, 57, 86], "telecommun": 201, "telephon": 356, "telescop": [320, 332], "televis": [57, 63, 307], "tell": [0, 34, 104, 111, 131, 135, 234, 292, 306, 319, 338, 343], "telno": 313, "telugu": [74, 356], "tem": 333, "temp": [57, 72, 176, 309], "tempdir": 309, "temperatur": [57, 72], "tempfil": [176, 307, 309, 345], "templat": [0, 215, 216, 227, 229, 231, 232, 336, 343], "template_stat": 229, "templateid": 232, "tempo": 333, "temporari": [25, 176, 229, 307, 317], "temporarili": [119, 125], "temporibu": 109, "ten": [240, 248, 305, 333], "tend": [266, 329, 352], "tendenc": 240, "tens": [89, 199, 202, 216, 220, 223, 313, 314, 335, 343], "tenwi": 145, "ter": 333, "tere": 203, "teredo": 329, "term": [33, 35, 53, 57, 96, 106, 112, 129, 183, 184, 187, 191, 218, 229, 234, 281, 284, 289, 306, 307, 317, 326, 343, 344], "termin": [14, 33, 115, 121, 162, 167, 168, 169, 176, 192, 245, 275, 279, 281, 282, 284, 288, 289, 307, 313, 345], "terminologi": [0, 30, 144, 256], "tern": 203, "terra": 333, "terrassen": 348, "terreno": 333, "territ": 333, "tess": 338, "test": [25, 28, 39, 55, 57, 64, 73, 76, 88, 100, 111, 119, 121, 125, 128, 131, 135, 146, 147, 148, 150, 163, 176, 177, 194, 196, 197, 205, 213, 214, 215, 216, 217, 218, 219, 222, 223, 225, 229, 241, 243, 252, 258, 270, 294, 298, 301, 305, 313, 317, 318, 319, 320, 322, 328, 330, 333, 339, 346, 353, 355, 356, 358], "test1_lex": 298, "test2_lex": 298, "test_build_model": [0, 123, 126], "test_clausifi": [0, 123, 129], "test_config": [0, 123, 128], "test_convert_to_prover9": [0, 123, 128], "test_corpu": 334, "test_data": [303, 329], "test_draw": [0, 180, 184], "test_make_relation_set": [0, 123, 126], "test_max": 303, "test_model_found": [0, 123, 126], "test_obj_doc": 339, "test_pdist": 179, "test_prov": [0, 123, 128], "test_relation_list": [57, 65], "test_senna": [39, 222], "test_sent": [223, 230, 263, 264, 265, 266, 267], "test_sequ": 218, "test_set": [196, 328, 339, 341], "test_stat": [215, 216, 343], "test_stem": 342, "test_subj_doc": 339, "test_transform_output": [0, 123, 126], "testbuf": 309, "testdir": 333, "testeng": 328, "tester": 321, "testgrammar": [0, 159, 177, 321], "testhigherordertableauprov": [0, 123, 130], "testing_data": [216, 343], "testing_doc": 339, "testresolutionprov": [0, 123, 129], "testsent": 332, "testtableauprov": [0, 123, 130], "testvalu": 338, "teu": 333, "teubner": [240, 248], "text": [0, 1, 7, 8, 11, 14, 25, 26, 28, 29, 31, 33, 37, 38, 42, 53, 57, 59, 61, 65, 68, 72, 73, 75, 79, 80, 82, 84, 86, 92, 100, 102, 107, 108, 109, 111, 113, 114, 115, 116, 118, 119, 121, 135, 136, 137, 138, 139, 151, 159, 162, 163, 164, 165, 167, 171, 173, 174, 177, 178, 179, 197, 198, 203, 204, 208, 209, 214, 215, 218, 224, 225, 231, 236, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 251, 252, 253, 254, 255, 258, 260, 275, 279, 287, 288, 289, 290, 291, 302, 305, 306, 307, 309, 315, 335, 336, 344, 348, 354, 356], "text1": [234, 306, 333, 334], "text2": [234, 334], "text3": 234, "text4": 234, "text5": 234, "text9": 234, "text_bigram": [135, 137], "text_contains_sentbreak": [236, 243], "text_ngram": 136, "text_profil": 42, "text_se": [135, 136, 234], "text_unigram": [135, 137], "text_word": 240, "textbook": [186, 356], "textbox_opt": 119, "textcat": [0, 30], "textcollect": [0, 234], "textcoord": 317, "textfil": [27, 57, 106], "textid": [55, 57, 86], "textiowrapp": 113, "texttil": [0, 236, 344], "texttilingtoken": [0, 236, 251], "textual": [57, 72, 92, 307, 356], "textwidget": [0, 114, 118, 119], "textwrap": [72, 307], "tf": [0, 38, 234, 345], "tf_idf": [0, 234], "tfidf": 38, "tfidftransform": 38, "tgrep": [0, 356], "tgrep2": 235, "tgrep_compil": [0, 235], "tgrep_nod": [0, 235], "tgrep_posit": [0, 235], "tgrep_str": 235, "tgrep_token": [0, 235], "tgrepexcept": [0, 235], "th": [33, 52, 67, 117, 232, 233, 234, 257, 259, 275, 282, 306, 335], "tha": 351, "thailand": 300, "than": [24, 25, 28, 29, 32, 33, 35, 37, 46, 49, 52, 53, 57, 59, 63, 68, 72, 86, 104, 107, 111, 117, 119, 120, 135, 142, 146, 152, 156, 159, 162, 164, 167, 174, 178, 179, 182, 190, 191, 197, 203, 204, 213, 215, 216, 217, 223, 229, 232, 233, 234, 243, 248, 250, 255, 258, 265, 267, 268, 275, 277, 279, 281, 282, 284, 300, 305, 307, 308, 311, 313, 314, 315, 322, 323, 333, 342, 343, 352, 353], "thank": [163, 236, 239, 244, 247, 249, 253, 293, 341, 344, 354, 356], "thaw": 307, "theatr": 222, "thee": 67, "thei": [13, 15, 28, 30, 33, 34, 35, 36, 43, 46, 52, 53, 55, 57, 66, 72, 105, 106, 107, 110, 111, 117, 119, 120, 121, 129, 131, 135, 144, 148, 157, 167, 170, 179, 191, 218, 219, 231, 232, 233, 234, 240, 247, 248, 253, 255, 257, 262, 275, 281, 282, 284, 298, 303, 306, 307, 309, 313, 314, 315, 323, 328, 330, 334, 335, 336, 339, 343, 344, 346, 347, 351, 352], "them": [25, 28, 30, 33, 35, 51, 52, 53, 104, 108, 111, 119, 120, 121, 128, 131, 135, 142, 144, 157, 162, 163, 167, 170, 171, 174, 179, 183, 188, 192, 223, 234, 236, 239, 244, 247, 249, 251, 253, 254, 257, 258, 267, 269, 272, 275, 276, 281, 284, 286, 287, 288, 294, 299, 303, 305, 306, 307, 308, 311, 312, 314, 319, 322, 323, 333, 341, 343, 344, 346, 351], "themat": [57, 72, 105, 307], "theme": [275, 278, 307, 339], "themrol": [55, 57, 105, 307], "themselv": [57, 79, 80, 81, 89, 108, 244, 307, 315], "theo": 240, "theorem": [123, 124, 128, 129, 130, 136, 184, 191, 311, 319, 356], "theoremtoolcommand": [0, 123, 124], "theoremtoolcommanddecor": [0, 123, 124], "theoremtoolthread": [0, 123, 124], "theoret": [180, 186, 201, 202, 240, 266], "theori": [57, 72, 181, 240, 248, 315], "there4": 192, "therefor": [25, 28, 33, 57, 69, 243, 258, 261, 262, 305, 307, 319, 322, 330, 350], "thesauru": [57, 72, 77, 315], "thesaurus": [57, 77], "theseu": 307, "theta": [67, 192], "thetasym": 192, "thi": [2, 8, 10, 13, 14, 20, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 46, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 121, 124, 125, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 140, 142, 144, 145, 146, 147, 148, 154, 157, 159, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 188, 190, 191, 192, 193, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 209, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 294, 296, 300, 303, 305, 306, 307, 309, 311, 312, 313, 314, 315, 317, 318, 319, 322, 323, 324, 325, 328, 329, 330, 332, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 346, 347, 348, 349, 350, 351, 352, 355, 356], "thick": [234, 306], "thing": [129, 135, 234, 235, 252, 291, 311, 313, 314, 335, 339, 344, 351], "thinghood": 329, "think": [262, 313, 333, 336, 344, 351], "thinsp": 192, "third": [52, 182, 216, 231, 289, 300, 307, 322, 343, 345, 356], "third_person": [57, 89], "thirteen": [57, 63, 307, 339], "thirti": 307, "this_corpu": 110, "this_corpus_particip": 301, "this_fil": 301, "this_is_an_extremely_long_mark": 345, "this_neg": 197, "thisb": 307, "thislovesthat": 332, "tho": 328, "thoma": 356, "thorn": 192, "thoroughli": 198, "thorsten": 225, "those": [28, 42, 57, 62, 68, 72, 73, 107, 110, 111, 120, 121, 125, 127, 131, 161, 162, 170, 179, 199, 205, 206, 231, 234, 240, 243, 257, 274, 275, 282, 305, 306, 307, 309, 313, 314, 330, 339, 347, 351], "though": [57, 72, 135, 142, 144, 148, 172, 215, 273, 307, 314, 344], "thought": [191, 234, 281, 284], "thousand": 307, "thread": [124, 125, 234], "thread_id": 125, "threadgroup": 124, "three": [2, 7, 28, 53, 57, 67, 69, 72, 81, 89, 95, 100, 119, 144, 146, 148, 159, 162, 170, 204, 206, 218, 233, 235, 241, 245, 258, 263, 266, 267, 274, 275, 282, 288, 305, 307, 311, 312, 315, 317, 322, 326, 336, 345, 351], "threshold": [48, 145, 192, 217, 240, 243, 274], "thrice": 203, "through": [7, 10, 24, 28, 57, 72, 111, 120, 146, 151, 157, 162, 163, 170, 172, 173, 174, 183, 186, 218, 234, 267, 291, 314, 351, 354, 355], "throw": [37, 304, 307, 316, 343, 348], "thrown": 37, "thu": [24, 28, 46, 57, 72, 86, 104, 120, 135, 146, 182, 206, 215, 252, 253, 263, 266, 267, 300, 307, 311, 314, 322, 336, 346, 347, 351], "thuent": 217, "thunder": 307, "thursdai": [354, 356], "thyroid": 307, "ti": [216, 248, 313], "tiago": 356, "tibor": 243, "tica": 333, "tico": 333, "tid": 125, "tie_down": 351, "tientsin": 300, "tier": 353, "tigersearch": 356, "tighten": 233, "tigrinya_tigrigna": [57, 103], "tikteat": 301, "tild": 192, "tile": 356, "time": [7, 14, 25, 28, 29, 33, 39, 52, 57, 64, 69, 72, 73, 99, 103, 104, 110, 113, 119, 131, 134, 135, 147, 150, 155, 158, 162, 163, 165, 167, 171, 173, 174, 179, 182, 192, 196, 197, 215, 218, 223, 229, 234, 243, 258, 263, 264, 265, 266, 267, 274, 275, 276, 277, 286, 288, 289, 291, 300, 303, 305, 307, 311, 313, 314, 315, 317, 322, 332, 333, 339, 351, 356], "timedelta": 286, "timeout": [128, 163, 288, 289], "timer": [0, 195, 197], "timestamp": 289, "timestamped_fil": [285, 289], "timezon": 286, "timi": 100, "timit": [55, 57, 99, 356], "timitcorpusread": [55, 57, 100], "timitd": [57, 100], "timittaggedcorpusread": [55, 57, 99], "tingl": 307, "tinha": 333, "tion": 248, "tip": [0, 353], "tirentirentiren": 344, "titan": 351, "titl": [55, 57, 61, 73, 78, 91, 109, 116, 119, 179, 307], "tj": 147, "tk": [117, 119, 291], "tkinter": [113, 117, 118, 119, 185, 291, 356], "tknzr": [238, 344], "tl": [223, 307, 344], "tlp": 326, "tmp": [33, 81, 89, 243], "tn": 338, "tna3": 205, "tne3": 205, "tnem4": 205, "tnt": [0, 213, 356], "to_chunkstruct": [25, 28], "to_cnf": [0, 180, 193], "to_conl": [159, 163, 164, 310], "to_depgraph": [180, 189, 318], "to_dot": [159, 164], "to_fol": [123, 125], "to_glueformula_list": [180, 187, 189, 318], "to_lowercas": 206, "to_screen": 289, "to_settings_str": [0, 255], "to_sfm_str": [0, 255], "to_uid": [57, 84], "toda": 333, "todai": [221, 307, 339, 344], "todd": 258, "todo": [57, 69, 144, 147, 163, 251, 299, 305, 333], "togeth": [13, 57, 72, 91, 104, 139, 161, 234, 241, 306, 307, 315, 322, 333, 346, 351], "toggl": [8, 117], "toggle_collaps": [114, 118], "toi": [67, 111, 294, 309, 356], "tok": [43, 181, 184, 190, 191, 196, 223, 236, 243, 252, 253, 344], "tok_cl": 243, "token": [0, 7, 8, 12, 14, 16, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 41, 43, 44, 47, 51, 52, 55, 57, 58, 61, 63, 64, 65, 66, 68, 71, 74, 75, 78, 86, 87, 90, 91, 93, 94, 99, 100, 102, 103, 104, 106, 113, 121, 131, 135, 142, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 184, 190, 191, 196, 197, 200, 201, 202, 204, 207, 208, 209, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 231, 232, 233, 234, 235, 259, 260, 261, 262, 268, 269, 271, 272, 273, 290, 291, 294, 295, 302, 303, 305, 307, 309, 312, 313, 326, 328, 332, 333, 335, 339, 343, 354, 356, 358], "token_cl": 243, "tokenis": 288, "tokenize_s": [236, 237, 245, 344], "tokenized_source_text": 240, "tokenizeri": [0, 163, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "tokensearch": [0, 234], "tokensequ": [0, 236, 251], "tokentablefield": [0, 236, 251], "tokenwrap": [0, 291], "toknum": [104, 307], "toktok": [0, 236, 344], "toktok_regex": [236, 252], "toktoktoken": [0, 236, 252, 356], "toktyp": 37, "tokyo": 242, "tom": [356, 358], "tomaarsen": 358, "tomar": 333, "tomast": 333, "tomcavag": 356, "tone": 356, "tongu": 20, "tonight": [241, 344], "tonya": 148, "too": [57, 72, 90, 198, 238, 265, 266, 267, 273, 305, 307, 314, 323, 339, 344, 351], "took": [57, 72, 223, 307, 344, 356], "tool": [1, 2, 3, 7, 8, 53, 113, 115, 119, 124, 152, 164, 196, 198, 307, 322, 333, 336, 339, 354, 356], "toolbox": [0, 55, 57, 295, 356], "toolbox_data": 345, "toolboxcorpusread": [55, 57, 101], "toolboxdata": [0, 255], "toolboxset": [0, 255], "toolkit": [0, 57, 96, 106, 119, 245, 293, 356], "top": [2, 8, 28, 33, 61, 80, 93, 108, 117, 118, 119, 134, 162, 164, 165, 167, 173, 191, 197, 235, 275, 279, 281, 282, 284, 294, 305, 310, 317, 320, 322, 332, 338, 347, 348, 349, 353, 356], "top_n": 196, "top_relation_label": [164, 169, 310], "topdownchartpars": [0, 159, 162, 332], "topdowninitrul": [0, 159, 162, 167], "topdownpredictrul": [0, 159, 162], "topic": [30, 36, 107, 251, 307, 354, 356], "topic_domain": [107, 351], "topmost": 107, "topn": 317, "topspac": [180, 184], "toronto": [57, 109, 145], "torsten": 356, "tostr": [307, 335, 345], "tot": [57, 91, 307], "total": [0, 57, 72, 100, 104, 113, 135, 137, 143, 146, 162, 165, 167, 179, 197, 198, 262, 263, 264, 305, 356], "total_count": 251, "total_ord": 314, "totalannot": [57, 72], "touch": [306, 307, 344], "tow": 351, "toward": [29, 147, 215, 306], "tower": [57, 72, 315, 339], "town": 300, "toy_pcfg1": [320, 332], "toy_pcfg2": 332, "tp": [275, 282, 288, 337], "tpc": 307, "tpec2iv": 205, "tpeders": 94, "tpir2b": 205, "tpl": [216, 343], "tpmus2": 205, "tpp": 348, "tpro2b": 205, "tr": [179, 182], "tra": 333, "trace": [0, 14, 28, 33, 48, 49, 50, 51, 81, 89, 120, 159, 162, 165, 167, 171, 173, 174, 177, 178, 180, 183, 186, 192, 194, 216, 229, 256, 260, 275, 277, 302, 303, 309, 311, 312, 313, 335, 338, 343], "trace_chart_width": [162, 165, 167], "traceback": [231, 232, 233, 246, 260, 299, 302, 303, 307, 308, 309, 314, 316, 322, 323, 334, 335, 338, 344, 345, 346, 347, 351], "track": [52, 120, 170, 172, 267, 274, 288, 289, 314, 347, 353], "tracktoscreen_demo": [0, 285, 288], "tractabl": [274, 351], "trade": [192, 349], "tradeoff": [281, 284], "tradit": 342, "trail": [57, 61, 65, 184, 223, 255, 307, 345], "train": [0, 27, 32, 33, 34, 35, 36, 38, 41, 44, 52, 88, 100, 136, 138, 156, 159, 169, 170, 172, 176, 179, 192, 195, 196, 197, 213, 215, 216, 217, 218, 219, 221, 223, 224, 225, 229, 233, 236, 243, 256, 258, 263, 264, 265, 266, 267, 268, 294, 303, 307, 333, 334, 336, 339, 343, 346, 356], "train_and_test": 334, "train_cl": 243, "train_corpu": 334, "train_data": [217, 303, 325], "train_deppars": [180, 187], "train_from_fil": [159, 169], "train_maxent_classifi": 33, "train_maxent_classifier_with_gi": [0, 30, 33], "train_maxent_classifier_with_ii": [0, 30, 33], "train_maxent_classifier_with_megam": [0, 30, 33], "train_obj_doc": 339, "train_sent": [216, 230], "train_set": 317, "train_stat": [213, 215, 216], "train_subj_doc": 339, "train_supervis": [213, 218, 334], "train_text": 243, "train_tok": [33, 34, 41, 43], "train_token": [236, 243], "train_unsupervis": [213, 218], "trainer": [43, 196, 197, 216, 218, 231, 233, 334, 339], "training_data": [216, 343], "training_doc": 339, "training_opt": 217, "training_set": [196, 339], "training_stat": 215, "tran": 313, "transact": [336, 353], "transcr": 307, "transcrib": 307, "transcript": [57, 67, 100, 307, 356], "transcription_dict": [55, 57, 100], "transfer": [176, 179], "transfer_mesg": 307, "transform": [0, 25, 28, 57, 79, 80, 81, 89, 108, 110, 126, 148, 151, 159, 163, 201, 202, 215, 216, 218, 227, 232, 233, 254, 275, 282, 284, 302, 307, 347, 349], "transient": 251, "transit": [0, 107, 121, 159, 176, 182, 217, 218, 291, 300, 313, 335, 351, 356], "transition_pars": 176, "transitionpars": [0, 159], "transitive_closur": [0, 291], "translat": [0, 22, 24, 33, 55, 57, 67, 84, 85, 106, 127, 133, 154, 192, 295, 296, 300, 308, 311, 327, 356], "translation_opt": 274, "translation_q": [55, 57, 84], "translation_t": [263, 264, 265, 266, 267, 346], "translations_for": [256, 257], "transpos": 33, "transposit": 148, "travers": [57, 72, 107, 170, 215, 260, 275, 279, 281, 284, 291, 351], "travi": 356, "treat": [32, 52, 57, 72, 117, 124, 135, 137, 144, 162, 163, 175, 191, 234, 244, 246, 253, 311, 314, 322, 336, 345, 346, 347], "tree": [0, 2, 7, 8, 14, 25, 26, 27, 28, 29, 32, 38, 46, 49, 51, 55, 57, 62, 66, 69, 76, 81, 89, 93, 96, 107, 108, 109, 114, 119, 121, 131, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 188, 192, 194, 255, 283, 284, 291, 295, 300, 302, 303, 307, 310, 311, 312, 313, 318, 321, 332, 333, 335, 336, 338, 345, 349, 350, 354, 356], "tree1": 336, "tree2": [336, 347], "tree2conllstr": [0, 25, 29], "tree2conlltag": [0, 25, 29], "tree2semi_rel": [0, 180, 192, 336], "tree3": 336, "tree_": 118, "tree_class": [57, 69, 162, 167], "tree_load": 347, "tree_str": [164, 349], "tree_to_treeseg": [0, 114, 118], "treebank": [0, 25, 57, 62, 81, 89, 96, 113, 164, 206, 213, 214, 216, 220, 236, 275, 278, 281, 282, 284, 299, 307, 310, 332, 335, 343, 344, 347, 348, 354, 356], "treebank_data": [164, 310], "treebanktoken": 253, "treebankworddetoken": [0, 236, 239, 253, 344, 356], "treebankwordtoken": [0, 236, 239, 253, 254, 344, 356], "treeedg": [0, 14, 159, 162, 167, 171], "treepo": [57, 81, 89, 275, 277, 335, 347], "treeposit": [0, 235, 275, 277, 282, 347], "treeposition_spanning_leav": [0, 275, 282], "treepositions_no_leav": [0, 235], "treeprettyprint": [0, 275, 279, 282, 295], "trees2": 313, "treeseg": 118, "treesegmentwidget": [0, 114, 118], "treetoken": 121, "treetransform": [0, 295], "treeview": [0, 114, 118], "treewidget": [0, 114, 118], "tremend": 198, "trenkl": 42, "tresoldi": 356, "trevor": 358, "trevorcohn": 358, "trg_class": [266, 267], "trg_phrase": [256, 257], "trg_sentenc": [256, 263, 264, 268], "trglen": [261, 272], "trgtext": [261, 272], "tri": [111, 124, 144, 171, 173, 223, 225, 232, 245, 289, 291, 343], "triag": 358, "trial": [50, 57, 72, 217, 315], "triangular": 118, "tribe": 234, "tribunal_supremo": 336, "trichocyst": 329, "trick": 301, "tricki": 347, "tricky_sent": 339, "trie": [0, 52, 241], "trigger": [57, 72, 107, 119, 205, 232, 291], "trigram": [0, 42, 53, 135, 146, 179, 234, 258, 291, 305, 328, 334], "trigram_fd": 53, "trigram_measur": [53, 305], "trigram_score_fn": 146, "trigramassocmeasur": [0, 143, 146, 305, 328], "trigramcollocationfind": [0, 53, 305], "trigramtagg": [0, 213, 223], "triniti": 335, "tripl": [144, 159, 163, 164, 175, 192, 194, 245, 310, 314, 336], "triplet_count": 328, "trippl": 173, "trivial": [305, 307], "trn": [100, 307], "troop": [258, 259, 262, 269, 271], "troubl": 24, "trough": 248, "trouser": 351, "trq": [57, 84], "true": [13, 14, 27, 29, 30, 32, 33, 34, 36, 37, 38, 43, 44, 46, 49, 52, 57, 58, 59, 61, 63, 65, 66, 68, 69, 71, 72, 75, 80, 87, 90, 91, 93, 99, 100, 101, 102, 106, 107, 111, 113, 117, 118, 119, 120, 121, 124, 125, 127, 128, 129, 131, 135, 137, 138, 142, 147, 162, 163, 164, 165, 166, 167, 173, 174, 176, 179, 181, 182, 183, 184, 186, 187, 188, 191, 192, 196, 197, 198, 203, 205, 206, 209, 214, 215, 216, 218, 220, 221, 223, 225, 229, 231, 232, 233, 234, 235, 238, 239, 241, 242, 243, 244, 245, 246, 249, 251, 252, 253, 254, 255, 257, 258, 259, 261, 273, 275, 277, 278, 279, 281, 282, 287, 289, 291, 297, 299, 300, 301, 302, 303, 304, 305, 307, 309, 310, 311, 312, 313, 314, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 330, 332, 334, 337, 338, 342, 343, 344, 347, 348, 349, 351, 352, 356], "truli": 343, "truman": 307, "truncat": [52, 107, 147, 149, 214, 291, 328, 331, 343], "trust": 353, "truth": [24, 155, 180, 186, 194, 221, 262], "truth_typ": 326, "truthi": [57, 72], "truthvaluetyp": [0, 180, 191], "try": [7, 57, 65, 75, 124, 126, 128, 132, 135, 142, 158, 232, 268, 298, 303, 307, 311, 312, 313, 314, 318, 322, 323, 326, 338, 343], "try_port": [0, 159, 163], "ts_occur": 251, "tsai": 96, "tsent": 333, "tsi3": 205, "tsis0": 205, "tsne": 317, "tst": 100, "tsu": 22, "tsukada": 273, "tsutomu": 273, "tt": [57, 84, 216, 251, 343, 344], "tt1": 205, "tthe": 344, "tudo": 333, "tulo2v": 205, "tune": [145, 179, 258], "tup": 212, "tup2tab": [0, 212], "tupdict2tab": [0, 212], "tupkey2dict": [0, 212], "tupl": [14, 16, 23, 26, 29, 30, 33, 34, 35, 41, 43, 44, 52, 55, 57, 59, 61, 64, 65, 66, 67, 69, 70, 71, 72, 75, 76, 77, 78, 79, 81, 82, 84, 85, 88, 89, 91, 93, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 112, 117, 119, 120, 124, 125, 127, 129, 131, 135, 136, 137, 138, 142, 144, 145, 146, 148, 150, 152, 156, 158, 161, 162, 163, 166, 167, 169, 171, 173, 175, 177, 179, 180, 182, 186, 191, 192, 194, 196, 197, 203, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 230, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 244, 245, 247, 248, 253, 254, 255, 257, 258, 259, 260, 261, 268, 269, 272, 273, 274, 275, 279, 282, 286, 288, 289, 291, 300, 301, 302, 305, 307, 324, 338, 339, 345, 346], "tuple2str": [0, 213, 226], "tups2tab": [0, 212], "ture": [179, 334], "turica": 358, "turismo": 351, "turkish": [57, 103], "turkish_turkc": [57, 103], "turn": [25, 28, 55, 57, 66, 69, 75, 78, 79, 81, 87, 89, 98, 99, 135, 136, 138, 139, 206, 294, 301, 307, 313, 332, 335, 338, 344, 349, 353], "turn_01": 335, "turn_on": [57, 81, 89, 335], "turner": 335, "turveydrop": 329, "tussl": [57, 106], "tutori": [218, 235, 281, 284, 356], "tv": [298, 313, 338], "tw": 96, "twd": 253, "tweak": 307, "tweet": [57, 102, 197, 238, 285, 286, 287, 288, 289, 290, 307, 356], "tweethandl": 286, "tweethandleri": [0, 285, 286, 289], "tweeti": [127, 330], "tweetid": 287, "tweets_by_user_demo": [0, 285, 288], "tweets_fil": 287, "tweettoken": [0, 57, 102, 197, 236, 238, 356], "tweetview": [0, 285, 289], "tweetwrit": [0, 285, 289], "twenti": 68, "twice": 313, "twin": 339, "twitter": [0, 55, 57, 238, 307, 344, 356], "twitter_demo": [0, 285], "twitterclass_demo": [0, 285, 288], "twittercli": [0, 285, 287, 288, 290], "twittercorpusread": [55, 57, 102, 288], "twizt": 234, "two": [8, 13, 25, 28, 33, 35, 36, 50, 51, 52, 53, 57, 67, 72, 75, 77, 81, 89, 98, 104, 107, 111, 113, 119, 120, 121, 129, 131, 135, 139, 142, 144, 145, 148, 150, 151, 152, 159, 162, 163, 172, 174, 177, 178, 179, 180, 191, 192, 197, 203, 204, 223, 231, 233, 234, 236, 239, 241, 243, 244, 246, 247, 249, 253, 254, 257, 258, 260, 262, 275, 276, 281, 282, 284, 287, 298, 301, 303, 305, 307, 311, 312, 313, 314, 319, 321, 322, 325, 326, 328, 330, 334, 336, 341, 344, 345, 346, 347, 349, 351, 352, 356], "tword": 333, "twython": [287, 289], "twythonstream": 289, "txt": [57, 58, 68, 78, 84, 87, 89, 90, 91, 99, 100, 103, 109, 111, 144, 198, 234, 290, 305, 306, 307, 309, 317, 332, 333, 346], "txt2list": [0, 212], "txt2set": [0, 212], "ty": 152, "typ": [72, 133, 243], "type": [0, 13, 14, 15, 18, 23, 25, 26, 28, 29, 31, 32, 33, 35, 38, 43, 44, 49, 51, 55, 57, 58, 59, 61, 63, 65, 66, 68, 69, 71, 72, 74, 75, 78, 79, 82, 83, 84, 86, 87, 90, 91, 92, 93, 94, 99, 100, 102, 104, 105, 107, 108, 111, 116, 118, 119, 120, 121, 124, 125, 131, 132, 135, 136, 138, 142, 144, 145, 147, 148, 149, 150, 151, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 190, 191, 192, 194, 196, 203, 204, 209, 211, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 277, 278, 282, 287, 289, 291, 294, 299, 302, 309, 315, 322, 324, 332, 333, 335, 344, 347, 355, 356], "type_check": [180, 181, 184, 190, 191], "type_no_period": [236, 243], "type_no_sentperiod": [236, 243], "type_str": 191, "type_thresh": 243, "typecheck": [0, 180, 184, 191, 326], "typedmaxentfeatureencod": [0, 30, 33], "typeerror": [132, 135, 137, 142, 231, 233, 275, 277, 314, 347], "typeexcept": [0, 180, 191, 326], "typeraiseruleset": 298, "typeresolutionexcept": [0, 180, 191], "typic": [26, 28, 29, 30, 31, 33, 34, 52, 57, 58, 72, 99, 107, 111, 119, 120, 121, 131, 159, 160, 161, 162, 163, 170, 174, 179, 202, 218, 223, 231, 234, 246, 257, 268, 275, 282, 303, 307, 313, 314, 315, 322, 323, 333, 347, 351], "typo": 220, "tyre": 109, "tzinfo": 286, "u": [51, 57, 60, 91, 92, 106, 133, 135, 142, 175, 216, 234, 242, 245, 250, 252, 254, 275, 281, 282, 284, 298, 306, 307, 311, 313, 314, 326, 329, 333, 336, 343, 344, 346, 347, 355], "u1": 186, "u2": 186, "u200": 192, "u2002": 192, "u2003": 192, "u2009": 192, "u200c": 192, "u200d": 192, "u200f": 192, "u201c": 344, "u201cleft": 344, "u201d": 344, "u2026": 344, "u2028": 242, "u3": 186, "u4": 186, "ua": 166, "uacut": 192, "ualberta": 145, "uarr": 192, "uber": 198, "ubuntu": 356, "uc": 240, "ucirc": 192, "ucsd": 140, "udhr": [55, 57, 356], "udhrcorpusread": [55, 57, 103], "ugh": 183, "ugli": 339, "ugo1": 205, "ugrav": 192, "uh": [67, 198, 307], "uhuh": 198, "ui": [57, 84, 149, 331], "uic": [68, 83, 90, 91], "uk": [57, 61, 109, 125, 291, 307, 358], "ukip": 307, "ulrich": 240, "ultim": 325, "um": [205, 333], "uma": [208, 333], "uml": 192, "umn": 94, "umsd": 291, "un": [25, 28, 57, 72, 222, 246, 298, 315, 333], "un_chomsky_normal_form": [0, 275, 281, 282, 284, 349], "una": 344, "unabl": [223, 309, 322], "unambigu": 332, "unann": [57, 72], "unannot": [46, 307], "unari": [13, 121, 182, 186, 275, 281, 282, 284, 300], "unary_concept": [0, 180, 182], "unarychar": [275, 281, 282], "unattest": 33, "unavail": 322, "unbedingt": 344, "unbeliev": [198, 339], "unbind_click": [114, 119], "unbind_drag": [114, 119], "unbound": 120, "unchang": [186, 203, 209, 211, 267, 268, 334], "unchunk": [25, 29, 302], "unchunked_text": 302, "unchunkrul": [0, 25, 28, 302], "unclear": [61, 307], "uncompel": 339, "uncompress": 33, "unconstrain": 161, "uncurri": [180, 191], "undefin": [0, 50, 52, 104, 179, 180, 186, 338], "under": [33, 57, 59, 65, 72, 96, 107, 111, 112, 120, 121, 134, 162, 164, 179, 182, 201, 202, 209, 232, 238, 258, 259, 260, 262, 267, 268, 269, 271, 273, 311, 315, 320, 329, 331, 332, 338, 339, 344], "underflow": [135, 179], "undergo": 356, "undergon": 356, "undergradu": 317, "underli": [43, 52, 61, 93, 104, 111, 191, 302, 307], "underscor": [57, 72, 163], "underspecifi": [188, 259, 313], "understand": [24, 135, 206, 243, 333], "understem": 149, "understood": [172, 315], "understudi": 258, "undesir": 262, "undirect": 15, "undirectedbinarycombin": [0, 12, 15], "undirectedcomposit": [0, 12, 15], "undirectedfunctionappl": [0, 12, 15], "undirectedsubstitut": [0, 12, 15], "undirectedtyperais": [0, 12, 15], "undo": [8, 159, 173, 174, 253], "undon": [173, 174, 253], "unemploy": 213, "unescap": 254, "unexpand": 162, "unexpect": [191, 312, 326, 347], "unexpectedtokenexcept": [0, 180, 191], "unexplain": 347, "unfortun": [57, 62, 131, 307], "unfre": [107, 291, 351], "ungrammat": [170, 177, 321], "uni": [119, 140, 225, 333, 336], "uni_count": 328, "uni_counts2": 328, "unicharscorpusread": [55, 57, 106], "unicod": [25, 57, 58, 59, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 79, 80, 82, 83, 84, 85, 86, 87, 90, 91, 93, 94, 98, 99, 103, 104, 105, 106, 107, 108, 109, 111, 192, 201, 202, 204, 209, 219, 236, 244, 255, 275, 279, 282, 291, 307, 309, 344, 356], "unicode_field": [57, 101, 255], "unicodeerror": 291, "unicodelin": [275, 279, 347, 348], "unif": [120, 129, 167, 313, 332, 356], "unifi": [0, 13, 120, 123, 129, 161, 167, 180, 181, 190, 313, 314, 318, 347], "unificationexcept": [0, 123, 129, 180, 190, 318], "unificationfailur": [120, 314], "uniform": [57, 84, 162, 179, 258, 263, 264, 265, 266, 267, 268, 275, 279, 339], "uniformli": [258, 265, 266, 267], "uniformprobdist": [0, 179], "unify_base_valu": [0, 120], "unigram": [0, 53, 135, 136, 137, 138, 143, 146, 197, 213, 223, 229, 258, 259, 273, 333, 339, 343], "unigram_feat": 339, "unigram_scor": [135, 136, 140], "unigram_tagg": [223, 343], "unigram_word_feat": [195, 196, 339], "unigramtagg": [0, 213, 216, 223, 333, 343], "unimelb": 46, "unimpl": 175, "unind": [57, 62], "unindented_paren": [57, 62], "unintellig": 218, "union": [119, 127, 261, 314], "uniqu": [13, 30, 55, 57, 67, 92, 98, 100, 107, 113, 124, 127, 167, 179, 190, 191, 275, 277, 314, 343], "unique_ancestor": [0, 235], "unique_index": 187, "unique_list": [0, 291, 334], "unique_names_demo": [0, 123, 127], "unique_vari": [0, 180, 191], "uniquenamesprov": [0, 123, 127, 330], "uniquepair": [57, 106], "unit": [39, 46, 57, 72, 93, 102, 177, 218, 222, 234, 307, 336], "unitari": 121, "united_kingdom": 351, "uniti": [135, 138], "unittest": 332, "univ_qu": [311, 319], "univ_scop": [191, 193], "univers": [57, 67, 68, 79, 83, 85, 91, 94, 124, 145, 163, 201, 204, 209, 213, 217, 220, 224, 240, 248, 252, 263, 264, 265, 266, 267, 268, 274, 305, 307, 311, 317, 326, 329, 346, 356], "unix": 294, "unk": [135, 142, 225, 325], "unk_cutoff": [135, 142], "unk_label": [135, 142], "unknown": [36, 57, 59, 79, 100, 113, 119, 120, 135, 142, 186, 223, 225, 232, 309, 314], "unlabel": [33, 36, 166, 218, 223], "unlabeled_featureset": 36, "unlabeled_sequ": 218, "unladen": [163, 219, 222, 224], "unless": [61, 80, 93, 104, 108, 111, 330, 344], "unlexic": [281, 284], "unlik": [26, 172, 243, 267, 332, 356], "unlimp": 329, "unlink": [309, 345], "unm": 322, "unmark": [114, 119], "unmasked_scor": [0, 135, 136, 138], "unmatch": [246, 269, 307], "unmodifi": [57, 65, 197, 204], "unnecessari": [124, 129], "unord": 121, "unp": 330, "unparseableinputexcept": [0, 180, 181], "unpermut": 150, "unpickel": 344, "unpickl": [309, 334], "unprocess": [55, 57, 307], "unquot": 120, "unrecogn": 322, "unresolv": 0, "unrestrict": [15, 25, 26], "unsaf": 309, "unseen": [33, 35, 135, 142, 179, 225, 229, 303, 325, 334], "unseen_featur": 33, "unseg": 225, "unsort": 329, "unsortedchartpars": [0, 159, 171, 332], "unspecifi": [57, 84, 120, 162, 322], "unsuccess": 291, "unsuccessfulli": 322, "unsuit": 243, "unsupervis": [46, 218, 243], "unsupport": 308, "unsur": 355, "untag": [0, 213, 216, 226, 307, 343], "untagged_fil": 336, "until": [7, 25, 33, 46, 48, 49, 50, 57, 79, 104, 107, 108, 110, 120, 121, 134, 158, 162, 171, 178, 240, 243, 275, 277, 307, 309, 314, 322, 347, 351], "untouch": [57, 62], "untrain": [216, 225], "untransl": 274, "untri": [7, 173], "untried_expandable_product": [159, 173], "untried_match": [159, 173], "unus": [215, 229], "unusu": [198, 307], "unweight": [107, 215, 291, 351], "unweighted_minimum_spanning_dict": [0, 291], "unweighted_minimum_spanning_digraph": [0, 291], "unweighted_minimum_spanning_tre": [0, 107, 291, 351], "unwrap": [0, 57, 101, 131, 255, 345], "unzip": [0, 113, 294], "unzipped_s": [0, 113], "up": [2, 7, 8, 49, 52, 57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 78, 80, 81, 82, 84, 85, 89, 93, 98, 99, 100, 105, 107, 108, 109, 111, 113, 117, 118, 119, 131, 132, 135, 138, 139, 142, 159, 161, 162, 171, 172, 174, 178, 216, 223, 225, 234, 240, 248, 258, 259, 262, 267, 268, 272, 274, 275, 279, 301, 302, 306, 307, 309, 314, 315, 322, 332, 333, 335, 336, 343, 351, 354, 356], "updat": [0, 25, 33, 46, 48, 52, 112, 113, 114, 119, 120, 125, 135, 137, 142, 143, 149, 170, 178, 179, 186, 213, 217, 221, 314, 327, 334, 347, 354, 356], "update_align": [256, 264], "update_clust": [46, 49], "update_distort": [256, 265, 266], "update_edge_scor": [159, 170], "update_fertil": [256, 268], "update_lexical_transl": [256, 264, 268], "update_null_gener": [256, 268], "update_output": 218, "update_vac": [256, 267], "update_wrapp": 112, "upenn": [57, 88, 106, 182, 253, 275, 282, 300], "upenn_tagset": [0, 122], "upo": 306, "upon": [104, 155, 170, 179, 191, 221, 239, 306, 307, 344], "upper": [57, 99, 119, 203, 243, 275, 282, 289, 333, 351], "upper_data_limit": [286, 289], "upper_date_limit": [286, 289], "upperbound": 148, "uppercas": [67, 191, 243, 344], "upsih": 192, "upsilon": 192, "uptodatemessag": [0, 113], "upward": 119, "uq": [57, 84], "uqi3": 205, "urg": [61, 307], "url": [0, 57, 63, 65, 72, 102, 111, 113, 131, 163, 177, 287, 291, 309], "url_foe_1": [236, 252], "url_foe_2": [236, 252], "url_foe_3": [236, 252], "url_foe_4": [236, 252], "urlbas": [57, 65], "us": [0, 2, 7, 8, 10, 13, 14, 18, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 142, 144, 145, 146, 147, 148, 149, 151, 152, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 181, 182, 183, 184, 186, 188, 190, 191, 192, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 211, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 229, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 294, 302, 303, 307, 309, 310, 311, 312, 313, 314, 315, 319, 323, 325, 326, 328, 330, 332, 333, 335, 338, 339, 343, 344, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356], "usa": [57, 65, 83, 91, 204, 222, 252, 301, 358], "usabl": 146, "usag": [0, 10, 34, 46, 52, 57, 58, 72, 76, 78, 79, 87, 99, 103, 109, 112, 113, 131, 143, 163, 172, 180, 182, 225, 229, 292], "usage_domain": [107, 351], "use_agenda": [162, 167], "use_lemmat": 37, "use_min_depth": [107, 352], "use_tagdict": 221, "use_thread": 113, "used_var": 120, "used_vari": 193, "user": [10, 18, 23, 33, 57, 58, 59, 80, 86, 99, 104, 109, 111, 113, 117, 118, 119, 131, 169, 171, 178, 179, 180, 182, 217, 222, 238, 244, 259, 269, 273, 287, 288, 289, 290, 291, 294, 300, 307, 322, 354, 355, 356], "user_info_from_id": [285, 289], "user_ment": 287, "user_tweet": [285, 289], "userid": [288, 289], "usernam": [238, 291, 294, 344], "userwarn": 107, "usr": [39, 57, 78, 87, 103, 111, 113, 188, 222, 294, 307, 322], "usthb": 201, "usu": 151, "usual": [24, 33, 57, 65, 107, 120, 121, 134, 148, 169, 179, 186, 191, 197, 215, 218, 231, 234, 235, 260, 266, 269, 287, 301, 307, 313, 314, 335, 339, 346, 353], "usw": 344, "utc": 286, "utcoffset": [285, 286], "utf": [39, 57, 95, 103, 111, 113, 192, 222, 224, 250, 252, 255, 288, 307, 351], "utf8": [57, 59, 62, 63, 64, 66, 68, 69, 70, 71, 76, 79, 81, 87, 89, 90, 91, 97, 99, 100, 101, 102, 103, 104, 109, 131, 163, 175, 194, 197, 224, 236, 245, 249, 255, 287, 291, 307, 335, 345], "util": [0, 18, 25, 30, 46, 55, 57, 76, 107, 114, 116, 118, 125, 135, 137, 139, 159, 172, 180, 195, 196, 199, 213, 236, 240, 241, 248, 285, 287, 295, 302, 307, 325, 330, 332, 334, 338, 339, 344], "utrecht": 358, "utt": 333, "utter": [55, 57, 58, 61, 65, 66, 78, 79, 87, 98, 99, 100, 159, 307], "utteranceid": [55, 57, 100, 307], "utterli": 198, "uu": [120, 164], "uuml": 192, "uw": [67, 339], "uw1": 307, "ux": 307, "u\u19a1": [], "u\u1b11": [], "u\u1e9a": [], "v": [0, 28, 33, 51, 52, 57, 67, 72, 79, 88, 89, 95, 107, 109, 120, 140, 143, 145, 151, 156, 164, 170, 174, 180, 184, 186, 188, 191, 211, 213, 214, 220, 229, 242, 257, 262, 267, 275, 276, 281, 282, 284, 300, 301, 302, 305, 307, 309, 313, 314, 315, 318, 320, 325, 326, 329, 332, 333, 335, 336, 338, 340, 341, 343, 345, 347, 348, 353, 356], "v0": [57, 72, 338], "v1": [144, 170, 318, 326, 338], "v13a": 258, "v14": 242, "v2": [107, 170, 318, 326, 338], "v3": [39, 170, 222, 326, 338, 345, 352], "v4": 326, "v5": 326, "v_head": 267, "v_kei": 325, "v_non_head": 267, "va": 333, "va11": 307, "va4": 307, "vacanc": 267, "vacancies_at": [256, 267], "vacant": 267, "vacuous": 311, "vader": [0, 195, 197, 356], "vader_lexicon": 198, "vaderconst": [0, 195, 198], "vagu": 24, "vag\u00f3n": 351, "vag\u00f3n_de_pasajero": 351, "vai": 333, "val": [33, 57, 60, 95, 111, 120, 131, 179, 180, 186, 275, 276, 280, 300, 309, 314, 338, 345, 347], "val0": 338, "val1": 338, "val2": 338, "val2str": [55, 57, 60], "val3": 338, "val_dump": [0, 180, 182, 300], "val_load": [0, 180, 182, 300], "valenc": [57, 72, 198], "valencia": [57, 60, 133], "valencian": [57, 60, 133], "valian": 301, "valid": [25, 28, 57, 72, 80, 117, 119, 131, 148, 163, 176, 179, 184, 190, 191, 205, 211, 229, 235, 240, 241, 247, 263, 264, 265, 266, 267, 286, 291, 323, 348, 352], "valid_phras": [256, 274], "validate_sig_len": [123, 127], "validate_syl": [236, 248], "valu": [0, 14, 28, 29, 30, 32, 33, 34, 35, 38, 39, 43, 44, 46, 51, 52, 57, 59, 60, 61, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 78, 79, 80, 82, 84, 85, 92, 93, 98, 100, 102, 105, 107, 108, 109, 111, 112, 113, 117, 118, 119, 120, 121, 128, 131, 135, 142, 144, 145, 146, 147, 148, 149, 150, 151, 156, 162, 163, 167, 171, 172, 177, 178, 179, 180, 181, 182, 183, 186, 187, 191, 192, 194, 198, 214, 223, 225, 229, 231, 232, 233, 234, 235, 243, 247, 248, 255, 258, 259, 260, 262, 263, 264, 265, 266, 267, 274, 275, 276, 281, 282, 284, 287, 288, 289, 291, 302, 307, 313, 317, 318, 321, 322, 325, 328, 336, 338, 339, 345, 347, 349, 351], "valuat": [0, 111, 123, 124, 126, 180, 182, 186, 309, 322], "valuation1": 338, "value_handl": [0, 120], "value_str": 92, "valueerror": [28, 111, 119, 120, 121, 131, 147, 150, 179, 209, 231, 232, 246, 275, 276, 277, 282, 302, 307, 309, 314, 334, 335, 338, 344, 347], "values_in_chart": [147, 328], "vamo": 333, "vamoo": 344, "van": [181, 192, 279, 283, 336], "vannoord": 42, "var": [13, 16, 25, 120, 181, 186, 298, 299, 314, 322], "var1": 181, "var2": 181, "varanda": 333, "varex": 186, "vari": [30, 57, 69, 107, 150, 307], "variabl": [0, 13, 14, 16, 28, 29, 33, 39, 46, 55, 57, 87, 102, 104, 117, 119, 120, 121, 127, 129, 131, 144, 159, 162, 165, 167, 171, 173, 174, 178, 179, 180, 181, 184, 186, 187, 188, 190, 191, 209, 222, 223, 224, 243, 250, 258, 288, 294, 307, 309, 312, 313, 318, 322, 332, 334, 335, 338, 347], "variable_typ": [180, 181], "variablebinderexpress": [0, 180, 191], "variablebindingexcept": [0, 180, 190, 318], "variableexpress": [0, 180, 186, 190, 191, 314, 318, 326], "varianc": [48, 179, 307], "variance_charact": [256, 260], "variant": [36, 57, 67, 107, 146, 151, 186, 218], "variat": [15, 46, 50, 53, 179, 192, 243, 271, 339], "varieti": [28, 55, 57, 84, 113, 119, 157, 170, 179, 234, 289, 307, 328, 333, 336, 347, 351], "variou": [33, 36, 57, 107, 113, 125, 126, 170, 220, 258, 264, 265, 266, 267, 268, 274, 307, 311, 342, 347, 356], "various_sent": 36, "varnam": 186, "var\u00e3o": 333, "vb": [147, 163, 166, 214, 216, 219, 224, 232, 307, 310, 311, 318, 319, 328, 335, 341, 343, 344, 354], "vbb": 297, "vbd": [28, 57, 62, 175, 176, 179, 214, 216, 223, 226, 302, 307, 335, 343, 344, 354], "vbg": [214, 216, 223, 343], "vbn": [28, 214, 307, 343, 344, 347, 349], "vbp": [163, 175, 214, 220, 320, 343, 348], "vbz": [39, 163, 175, 177, 213, 214, 219, 220, 221, 222, 224, 297, 307, 343, 344, 347], "vc": [166, 310], "ve": [57, 68, 107, 110, 239, 253, 307, 339, 343, 344, 356], "vector": [33, 34, 40, 41, 46, 47, 48, 49, 50, 51, 170, 317], "vectorspac": 46, "vectorspacecluster": [0, 46, 48, 49, 50, 51], "vee": 67, "vega": 204, "vegetoalkali": 329, "vehicl": 307, "veh\u00edculo": 351, "veio": 333, "vel": 333, "venda": 333, "vender": 333, "vennemann": 240, "ventura": 333, "ver": 333, "verb": [25, 55, 57, 69, 72, 79, 88, 89, 105, 107, 156, 199, 201, 202, 211, 213, 216, 217, 220, 223, 297, 302, 305, 307, 315, 332, 335, 343, 347, 348], "verb_group": [107, 351], "verb_head": [57, 69], "verb_stem": 69, "verb_t1": [199, 201, 202], "verb_t2": [199, 201, 202], "verb_t3": [199, 201, 202], "verb_t4": [199, 201, 202], "verb_t5": [199, 201, 202], "verb_t6": [199, 201, 202], "verbnet": [55, 57, 356], "verbnetcorpusread": [55, 57, 105], "verbos": [0, 28, 32, 33, 57, 107, 111, 113, 124, 125, 128, 129, 130, 131, 135, 137, 162, 163, 165, 167, 169, 171, 173, 174, 175, 176, 177, 178, 181, 182, 186, 187, 188, 196, 216, 217, 218, 219, 223, 224, 229, 232, 243, 249, 250, 285, 286, 288, 289, 290, 291, 309, 311, 313, 322, 336, 351], "verbrak": 336, "verbsfil": [57, 89], "verbspecif": 307, "vercelli": 109, "verd": 333, "verdad": 333, "verdadeirament": 333, "veri": [14, 24, 25, 33, 57, 104, 106, 125, 135, 137, 176, 198, 203, 233, 258, 303, 305, 307, 313, 314, 319, 329, 333, 339, 343, 346, 351, 354], "verif": 289, "verifi": [289, 311], "verissimo": 208, "verkhogliad": 356, "versa": 172, "version": [0, 25, 28, 29, 32, 52, 57, 61, 65, 75, 84, 92, 94, 105, 107, 109, 111, 125, 131, 135, 138, 162, 164, 167, 179, 181, 182, 184, 191, 202, 206, 209, 216, 226, 229, 234, 236, 250, 254, 273, 275, 282, 291, 300, 301, 307, 310, 311, 322, 333, 335, 336, 343, 354, 355, 356], "versu": 151, "vertebr": [57, 107, 291, 351], "vertebra": 347, "vertex": 218, "vertic": [118, 119, 275, 279, 281, 282, 284], "vertmarkov": [275, 281, 282, 349], "vez": 333, "vg": [220, 348], "vg2main": [57, 103], "vi": [28, 109, 220, 333], "vi2": 205, "via": [29, 99, 107, 108, 111, 120, 170, 183, 192, 217, 218, 219, 234, 262, 289, 307, 314, 333, 356], "viagem": 333, "vice": [172, 234, 333], "vicissitud": 307, "victoria": 336, "vida": 333, "video": [307, 356], "vie0": 205, "vierem": 333, "vietnames": [57, 103, 252], "view": [52, 57, 58, 59, 61, 64, 66, 69, 71, 72, 74, 75, 79, 80, 81, 83, 86, 87, 89, 93, 94, 99, 102, 104, 108, 114, 119, 267, 281, 284, 289, 306, 315, 333], "vigil": 344, "villanueva_de_la_serena": 336, "vincent": [109, 263, 264, 265, 266, 267, 268, 309, 311, 326, 338], "vindicta": 109, "vindo": 333, "vinken": [166, 307, 310], "vinyal": 262, "viqr": [57, 103], "vir": 333, "virg": 333, "virgin": 333, "virtual": [327, 355], "virtualenv": 355, "virtutibu": 109, "vis3j": 205, "visibl": [117, 119, 120, 134, 291, 314], "visit": [180, 184, 191], "visit_structur": [180, 184, 191], "visitatori": 329, "vista": 294, "visual": [115, 119, 197, 275, 279, 281, 284, 312, 317, 356], "visualis": [57, 107], "viterbi": [0, 159, 218], "viterbipars": [0, 159, 178, 332], "vitii": 109, "viveu": 333, "vkulyukin": 151, "vkweb": 151, "vl2": [275, 278], "vm": 327, "vmh0": 307, "vmi": 307, "vmis3": 307, "vmod": [166, 310], "vn": [57, 105], "vn_31_2": 307, "vncl": 307, "vnclass": [55, 57, 105, 307], "vnclass_id": [57, 105], "vnv": 336, "voar": 333, "voc": 301, "vocab": [0, 135, 136, 140, 142, 234, 325], "vocab2": [135, 142], "vocab_data": 325, "vocabulari": [0, 135, 136, 138, 139, 140, 151, 266, 325, 333, 343], "vocabulary_introduct": 251, "vocabulary_text": 136, "vocal": [57, 61, 72, 351], "voic": [89, 335, 351], "vol": [179, 201], "volta": 333, "volum": 288, "voluntari": 293, "vorpommern": 133, "vote": 305, "vovhund": 351, "vovs": 351, "vowel": [67, 145, 205, 209, 240, 248], "vp": [29, 39, 57, 62, 88, 103, 121, 163, 175, 220, 222, 235, 275, 279, 282, 298, 300, 302, 307, 309, 311, 313, 314, 316, 320, 326, 332, 335, 338, 341, 347, 348, 349], "vpnp": 298, "vppp": 298, "vpser": 298, "vulner": [307, 356], "vvn": 297, "v\ua4fb": 242, "w": [30, 36, 42, 55, 57, 61, 67, 79, 87, 90, 91, 108, 111, 113, 120, 145, 186, 213, 214, 239, 242, 244, 251, 258, 259, 262, 271, 273, 302, 305, 307, 309, 312, 313, 314, 317, 325, 326, 329, 332, 333, 343, 345], "w0": 302, "w1": [53, 146, 305], "w14": [258, 296], "w16": 259, "w2": [53, 146, 305], "w3": [53, 79, 146, 182, 301, 305], "w4": [53, 146], "w_i": 225, "wa": [28, 33, 36, 40, 42, 57, 65, 70, 72, 86, 91, 92, 97, 107, 111, 117, 118, 119, 124, 131, 135, 142, 147, 163, 170, 173, 174, 179, 182, 197, 198, 201, 202, 203, 204, 207, 213, 218, 222, 223, 234, 239, 240, 242, 243, 253, 255, 258, 262, 263, 264, 265, 266, 267, 273, 275, 282, 296, 300, 301, 306, 307, 309, 314, 322, 326, 327, 332, 336, 339, 344, 347, 351, 352, 356], "waaaaayyyi": [238, 344], "waaayyi": [238, 344], "waaw": [201, 202], "wagon": 351, "wai": [8, 24, 32, 107, 110, 117, 119, 135, 144, 148, 159, 161, 172, 179, 188, 203, 209, 233, 235, 236, 240, 265, 266, 273, 274, 275, 282, 291, 307, 309, 311, 313, 318, 322, 323, 333, 339, 346, 351], "wait": [135, 137, 191, 289], "walk": [0, 120, 125, 127, 163, 187, 275, 279, 306, 311, 312, 313, 314, 316, 322, 326, 330, 337, 338, 348, 351], "walk_x": 312, "wall": [88, 163, 249, 307], "waltz": 307, "wan": [239, 253], "wander": 306, "wang": [262, 356], "wanna": 344, "want": [36, 57, 59, 72, 91, 102, 119, 121, 135, 136, 137, 138, 144, 161, 179, 182, 196, 197, 222, 223, 294, 300, 305, 307, 309, 311, 312, 314, 322, 332, 333, 336, 343, 346], "war": [22, 163, 265, 266, 267], "ward": 258, "warm": 197, "warn": [55, 57, 72, 104, 107, 124, 131, 233, 268, 291, 302, 322, 347, 356], "warranti": 339, "warren": [182, 300, 339], "washington": [83, 307, 336, 356], "wasn": [198, 253, 344], "wasnt": 198, "wast": 322, "wat": [57, 65, 273], "watch": [57, 65, 119, 140, 339, 356], "watcher": 119, "water": 353, "waterloo": 336, "wav": [55, 57, 100, 307], "wave": 307, "waw": [199, 204], "wb": 309, "wd_0": 233, "wd_01": 233, "wdt": [214, 343, 344, 347], "we": [25, 28, 33, 36, 57, 65, 67, 69, 72, 79, 91, 107, 108, 119, 121, 124, 135, 136, 137, 138, 142, 144, 156, 163, 164, 179, 180, 182, 183, 186, 188, 196, 197, 198, 203, 213, 218, 225, 235, 236, 241, 245, 253, 254, 258, 261, 262, 267, 269, 281, 284, 291, 297, 298, 300, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 322, 325, 328, 330, 332, 333, 334, 335, 336, 339, 343, 344, 346, 347, 348, 351, 356], "weak": 309, "weakest": 91, "weakref": 309, "weather": 307, "weather_typ": 307, "web": [10, 57, 65, 83, 90, 91, 111, 148, 206, 305, 307, 308, 356], "webdoc": 145, "weblog": 198, "webp": 164, "webpag": 309, "websit": [57, 65, 206, 252, 344, 356], "webtex": 307, "webtext": [57, 78, 87, 103, 307], "webview_fil": [55, 57, 65], "wee": 297, "weed": 267, "week": [134, 336, 356], "weekend": 307, "weekli": 73, "wei": [258, 262], "weierp": 192, "weight": [29, 30, 33, 34, 38, 41, 57, 107, 113, 120, 144, 145, 147, 149, 150, 151, 161, 170, 201, 214, 215, 218, 221, 258, 259, 263, 264, 265, 266, 267, 269, 307, 322, 331], "weight_senses_equ": [57, 107], "weighted_kappa": [143, 144], "weighted_kappa_pairwis": [143, 144], "weird": [252, 344], "weissweil": 203, "weka": [0, 30, 356], "wekaclassifi": [0, 30, 44, 303], "welch": 218, "welcom": 24, "well": [57, 69, 94, 107, 119, 135, 182, 232, 240, 243, 254, 262, 281, 284, 300, 307, 314, 322, 325, 333, 335, 344, 346], "went": [36, 292, 353], "werd": 336, "were": [28, 29, 33, 57, 72, 73, 75, 82, 86, 92, 107, 108, 119, 129, 131, 133, 158, 162, 167, 170, 172, 179, 203, 204, 232, 253, 258, 291, 306, 307, 315, 344, 351, 356], "weren": 198, "werent": 198, "weshalb": 257, "west": 109, "western": [100, 133], "western_lang": 242, "wfeat1": 233, "wfeat2": 233, "wgt": 33, "wh": [301, 313], "wha": 239, "whad": 239, "whale": 306, "what": [14, 15, 28, 30, 33, 36, 57, 72, 79, 80, 97, 108, 113, 117, 118, 121, 131, 132, 135, 137, 138, 144, 149, 162, 163, 167, 170, 171, 173, 213, 218, 219, 222, 224, 243, 300, 306, 307, 309, 311, 322, 332, 333, 343, 344, 345], "whatev": 171, "whatwasthat": 332, "wheat": 307, "when": [2, 14, 25, 28, 30, 32, 33, 34, 36, 38, 41, 43, 46, 50, 52, 53, 57, 69, 72, 97, 100, 104, 106, 107, 111, 113, 116, 117, 118, 119, 120, 124, 125, 128, 131, 135, 136, 138, 142, 148, 149, 150, 160, 162, 165, 167, 169, 170, 171, 172, 173, 174, 177, 178, 179, 181, 186, 191, 205, 216, 217, 218, 219, 223, 225, 231, 233, 235, 236, 238, 242, 243, 244, 246, 247, 253, 258, 262, 263, 264, 271, 273, 274, 275, 279, 281, 282, 284, 286, 289, 291, 294, 301, 302, 305, 306, 307, 309, 311, 313, 314, 315, 316, 319, 322, 323, 332, 341, 343, 344, 347, 351, 352, 356], "whenc": 111, "whenev": [33, 104, 111, 119, 134, 167, 229, 307, 314, 347], "where": [14, 15, 25, 28, 29, 32, 33, 34, 38, 44, 52, 57, 59, 69, 72, 75, 77, 84, 92, 100, 104, 107, 108, 110, 111, 113, 117, 118, 119, 120, 121, 124, 125, 131, 135, 147, 148, 149, 151, 156, 162, 163, 165, 169, 170, 171, 175, 176, 177, 178, 179, 180, 182, 184, 187, 188, 192, 196, 197, 202, 214, 218, 221, 223, 225, 229, 231, 232, 233, 234, 235, 237, 238, 241, 243, 244, 247, 251, 252, 253, 255, 258, 260, 263, 265, 266, 267, 268, 271, 272, 275, 277, 279, 281, 282, 284, 286, 287, 289, 290, 291, 292, 300, 307, 313, 314, 315, 322, 324, 327, 336, 338, 343, 351, 356], "wherea": 144, "wherev": 307, "whether": [2, 13, 15, 25, 37, 38, 43, 44, 52, 93, 113, 117, 118, 119, 121, 124, 129, 131, 147, 148, 162, 164, 173, 179, 186, 191, 198, 214, 218, 219, 229, 235, 236, 238, 243, 268, 275, 279, 286, 289, 291, 307, 311, 313, 314, 322, 328], "which": [2, 7, 8, 10, 13, 14, 15, 23, 25, 28, 29, 30, 31, 32, 33, 34, 37, 41, 43, 44, 46, 49, 50, 51, 52, 53, 55, 57, 58, 59, 62, 63, 64, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 87, 89, 91, 92, 93, 94, 99, 100, 104, 105, 107, 108, 110, 111, 113, 117, 119, 120, 121, 124, 125, 127, 128, 129, 131, 133, 135, 136, 138, 142, 144, 146, 152, 156, 159, 162, 163, 164, 165, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 184, 186, 190, 191, 192, 197, 198, 202, 203, 206, 209, 213, 214, 215, 216, 217, 218, 219, 223, 225, 229, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 247, 253, 257, 258, 259, 260, 262, 264, 266, 267, 268, 269, 271, 273, 275, 276, 279, 280, 282, 286, 287, 289, 291, 298, 300, 302, 303, 305, 306, 307, 309, 311, 312, 313, 314, 315, 317, 322, 325, 328, 333, 335, 336, 338, 342, 343, 344, 347, 351, 352, 353, 355, 356], "whichev": [124, 172, 259], "while": [14, 29, 33, 135, 142, 146, 163, 170, 174, 182, 196, 203, 218, 225, 288, 298, 300, 305, 307, 314, 315, 322, 328, 336, 343, 347, 351, 356], "white": [100, 117, 234, 255, 261, 336, 345], "white_hous": 336, "whitespac": [25, 28, 29, 57, 58, 69, 87, 104, 119, 120, 163, 164, 175, 192, 197, 236, 243, 244, 246, 247, 253, 255, 259, 275, 282, 291, 307, 344, 345, 347], "whitespacetoken": [0, 57, 58, 63, 68, 90, 99, 197, 236, 244, 254], "whnp": 347, "who": [89, 97, 113, 163, 293, 307, 313, 315, 339], "whoever": 305, "whole": [36, 57, 72, 80, 107, 255, 291, 305, 307, 334, 347, 351], "whose": [7, 8, 28, 30, 33, 35, 36, 52, 57, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 78, 79, 80, 82, 83, 84, 85, 87, 90, 91, 93, 98, 99, 105, 107, 108, 109, 111, 113, 117, 119, 120, 121, 131, 162, 167, 170, 173, 174, 178, 179, 182, 192, 197, 209, 223, 231, 232, 233, 255, 258, 275, 277, 282, 286, 300, 307, 309, 313, 314, 315, 335, 347, 351], "whquestion": 307, "wht": [100, 307], "why": [23, 206, 243, 257, 343], "whyi": 336, "wide": [30, 83, 90, 113, 181, 245, 307, 328], "wider": [119, 307], "widget": [117, 118, 119], "widgetnam": 119, "width": [28, 32, 113, 114, 117, 118, 119, 151, 162, 165, 167, 178, 234, 251, 275, 279, 291, 314], "wife": 307, "wiki": [148, 254, 291, 355, 356], "wiki_dict": [55, 57, 60], "wiki_q": [57, 60], "wikidata": [57, 60, 133], "wikipedia": [148, 254, 291], "wild": 172, "wildcard_fd": 53, "wilk": [57, 80], "wilkdom": [57, 80], "wilkwilczi": [57, 80], "william": [109, 148, 330], "win": 355, "wind": [156, 305, 306], "window": [2, 7, 8, 18, 113, 115, 118, 119, 151, 192, 204, 231, 234, 251, 275, 282, 288, 289, 294, 328, 354, 356], "window_len": 251, "window_s": [53, 234, 305], "windowdiff": [0, 143, 151, 328], "wink": [307, 351], "winkelen": 348, "winkler": 148, "winkler_exampl": 148, "winkler_scor": 148, "winlen": 231, "winresearch": [57, 103], "winter": 306, "winter2008": 140, "wipe_instr": 307, "wipe_mann": 307, "wir": 321, "wisdom": [24, 155], "wise": [234, 273, 307], "wish": [2, 104, 119, 234, 281, 284, 307, 309, 314, 344], "wit": 339, "withdraw": 307, "within": [28, 42, 53, 57, 81, 89, 98, 105, 107, 109, 111, 119, 121, 131, 148, 172, 191, 192, 205, 218, 291, 307, 308, 309, 313, 322, 336, 351], "without": [52, 57, 75, 80, 93, 110, 117, 120, 134, 135, 142, 148, 169, 179, 191, 192, 198, 201, 204, 205, 218, 243, 258, 298, 299, 303, 307, 314, 322, 325, 334, 339, 344, 345, 347, 356], "witten": [135, 138, 140, 179, 325], "wittenbel": [0, 135, 140], "wittenbellinterpol": [0, 135, 138, 325], "wittenbellprobdist": [0, 179, 334], "witti": 339, "wlement": 108, "wmt14": [258, 296], "wmt15": 259, "wmt16": 259, "wmt49": 259, "wn": [57, 107, 291, 347, 351, 352, 353], "wn31": 351, "wninput5wn": 107, "wnl": 211, "wo": 336, "wolf": [163, 175, 217, 351], "wolfgang": 262, "woman": [312, 317, 322, 326, 338, 352], "won": [36, 121, 198, 240, 307, 339, 344, 356], "wonder": [240, 306, 354], "wont": 198, "word": [0, 16, 24, 26, 27, 29, 30, 33, 36, 37, 39, 43, 53, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 113, 115, 116, 120, 121, 135, 136, 138, 139, 140, 142, 146, 148, 149, 156, 158, 159, 161, 162, 163, 164, 169, 170, 172, 175, 176, 177, 179, 187, 192, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 213, 215, 216, 218, 219, 220, 221, 222, 223, 225, 226, 229, 231, 232, 233, 234, 236, 240, 241, 243, 244, 245, 248, 250, 256, 257, 258, 261, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 279, 282, 291, 292, 294, 298, 301, 305, 306, 310, 311, 313, 314, 315, 318, 324, 325, 328, 329, 331, 334, 335, 339, 342, 343, 346, 347, 352, 356], "word1": [57, 99], "word2": [57, 99], "word2vec": 317, "word2vec_sampl": 317, "word3": [57, 99], "word_": [57, 62], "word_1": 218, "word_and_tag_pair": 161, "word_class": 267, "word_class_": 266, "word_class_t": [266, 267], "word_fd": [53, 305], "word_find": [0, 153, 158, 329], "word_index_in_sourc": 263, "word_index_in_target": 263, "word_indic": 181, "word_n": 218, "word_path": [57, 79], "word_penalti": [256, 274], "word_po": 273, "word_pres": 317, "word_r": [236, 238], "word_rank_align": [0, 256, 273], "word_seq": 325, "word_similarity_dict": [0, 234], "word_tim": [55, 57, 100, 307], "word_token": [0, 57, 58, 63, 68, 71, 78, 87, 90, 91, 99, 102, 103, 177, 179, 197, 213, 236, 239, 240, 243, 248, 306, 327, 344, 354, 356], "worden": 336, "worder": 273, "wordfind": [0, 153], "wordfreq_app": [0, 1], "wordlist": [55, 57, 307, 356], "wordlistcorpusread": [55, 57, 83, 85, 106, 110, 307], "wordlistcorpusview": 307, "wordnet": [0, 1, 10, 55, 57, 93, 95, 105, 199, 269, 291, 292, 295, 347, 353, 354, 356, 358], "wordnet31": 351, "wordnet_": [57, 107, 351], "wordnet_app": [0, 1], "wordnet_corpus_read": 107, "wordnet_lch": 295, "wordnetcorpusread": [55, 57, 107, 269, 351], "wordneterror": [55, 57, 107], "wordneticcorpusread": [55, 57, 107], "wordnetid": [55, 57, 105, 307], "wordnetlemmat": [0, 199, 211, 351], "wordnetsyn_match": [0, 256, 269], "wordnum": [57, 81, 89, 335], "wordpunct_token": [0, 236, 244, 305, 341], "wordpuncttoken": [0, 57, 87, 90, 91, 197, 236, 244], "words_by_iso639": [55, 57, 85], "words_by_lang": [55, 57, 85], "words_index": 257, "words_mod": [55, 57, 75, 80], "wordt": 336, "wordtpl": 233, "work": [18, 25, 38, 57, 68, 75, 80, 102, 107, 111, 112, 113, 121, 128, 131, 135, 136, 140, 144, 179, 183, 203, 225, 235, 243, 257, 275, 281, 282, 284, 291, 307, 308, 309, 313, 314, 315, 323, 325, 328, 333, 335, 338, 343, 344, 345, 346, 347, 348, 354, 355, 356], "workaround": [216, 229, 235], "worker": 335, "workshop": [96, 259, 261, 273, 346], "workspace_markprod": [114, 115], "world": [83, 90, 131, 163, 182, 216, 233, 234, 258, 262, 273, 300, 307, 343, 344], "world0": [182, 300], "world1": [182, 300], "worldli": 24, "worri": 104, "wors": [229, 306], "worst": [84, 339], "would": [34, 57, 69, 72, 120, 127, 135, 144, 148, 156, 162, 170, 191, 215, 223, 232, 233, 235, 258, 275, 281, 282, 284, 307, 311, 314, 343, 344, 347, 351], "wouldn": [135, 198, 314, 339], "wouldnt": 198, "wound": 297, "wp": [163, 219, 222, 224, 343], "wrap": [38, 52, 72, 119, 121, 131, 134, 135, 142, 146, 156, 179, 238, 275, 279, 282, 291, 305, 345], "wrap_at": 72, "wrap_etre": [57, 82, 105, 108], "wrapper": [15, 38, 57, 72, 77, 92, 112, 121, 131, 133, 134, 196, 234, 289, 305, 309, 354, 356], "wrd": [57, 100, 307], "wrdindex_list": 251, "wrinkleproof": 329, "write": [0, 30, 44, 101, 111, 113, 117, 155, 164, 197, 206, 229, 234, 255, 287, 288, 289, 308, 314, 317, 345, 351, 354], "write_megam_fil": [0, 30, 34], "write_tadm_fil": [0, 30, 41], "writer": [197, 336], "writestr": [0, 111], "written": [34, 41, 155, 182, 233, 253, 287, 289, 290, 300, 307, 314, 322, 347, 354, 356], "wrong": [144, 258, 307, 314, 332, 351], "wscore": 148, "wsd": [0, 30, 295, 358], "wsd_demo": [0, 30, 43], "wsd_featur": 30, "wsdm": 91, "wsj": [213, 275, 281, 282, 284, 307], "wsj_0001": [307, 335, 354], "wsj_0002": 307, "wsj_0003": 307, "wsj_0004": [307, 335], "wsj_0199": 335, "wsj_0200": 335, "wu": [57, 107, 262, 351], "wulfgeat": 109, "wulfsig": 109, "wulfstan": 109, "wup_similar": [55, 57, 107, 351], "wv": 317, "www": [0, 22, 42, 55, 57, 61, 63, 68, 73, 78, 79, 83, 85, 88, 90, 91, 94, 96, 106, 109, 112, 119, 140, 148, 169, 179, 182, 203, 206, 215, 253, 258, 259, 269, 273, 275, 281, 282, 284, 294, 299, 300, 301, 307, 322, 333, 354, 355, 356], "x": [15, 16, 25, 32, 33, 57, 72, 79, 80, 100, 107, 109, 111, 112, 117, 119, 120, 125, 127, 131, 135, 142, 144, 146, 158, 169, 172, 179, 183, 184, 186, 187, 188, 191, 212, 214, 216, 220, 235, 239, 241, 242, 251, 253, 260, 275, 278, 282, 291, 299, 302, 303, 309, 311, 312, 313, 314, 315, 317, 318, 322, 323, 326, 329, 330, 332, 334, 336, 337, 338, 343, 347, 350, 354], "x0": [186, 338], "x00": 242, "x1": [318, 326, 338, 347], "x2": [120, 314, 318, 326, 347], "x3": 314, "x6f": 314, "x7f": 242, "x80": 307, "x81": 307, "x83": 307, "x84": 307, "x85": 307, "x89": 307, "x8a": 351, "x8b": 307, "x8d": 307, "x8f": 307, "x93": 307, "x97": 333, "x98": 307, "x9a": 307, "x9c": 307, "x_50": 317, "x_t": 218, "xa": 109, "xa0": [192, 252], "xa1": 344, "xa1thi": 344, "xa3": 307, "xa3170": 307, "xa3o": 351, "xa6": 307, "xa7": 307, "xa8": 307, "xab": [333, 344], "xabencomendem": 333, "xabespecializarem": 333, "xabgeracionista": 333, "xabn": 333, "xabnow": 344, "xabo": 333, "xaboutro": 333, "xabvamo": 333, "xabveri": 333, "xac": 351, "xad": [192, 307], "xae": 307, "xb0": 307, "xb3": 307, "xb8": 307, "xb9": 307, "xbb": [333, 344, 345], "xbf": [307, 344, 345], "xc1rio": 333, "xc3": 351, "xc3o": 333, "xc9": 333, "xcdtulo": 333, "xcomp": 301, "xe": [57, 107], "xe0": [307, 333], "xe1": 333, "xe1n": 336, "xe1rio": 333, "xe2": 307, "xe2mara": 333, "xe3o": [333, 351], "xe4": 307, "xe5": 307, "xe6": 307, "xe7": [307, 333, 351], "xe7a": 333, "xe7o": 333, "xe9": 333, "xe9ci": 333, "xe9cnico": 333, "xe9dia": 333, "xe9i": 333, "xe9nero": 333, "xe9rcito": 336, "xe9rica": 333, "xe9rio": 333, "xeam": 333, "xedbano": 336, "xedlia": 333, "xedn": 336, "xedna": 333, "xedpio": 333, "xef": 345, "xemac": 25, "xf": 158, "xf1a": 336, "xf3": 333, "xf3n": 336, "xf3n_europea": 336, "xf3n_n": 336, "xf3ria": 333, "xf3rio": 333, "xf3stuma": 333, "xf3tese": 333, "xf5e": 333, "xf5em": 333, "xf8ter": 351, "xfamero_1": 336, "xfamero_2": 336, "xfasica": 333, "xfcentement": 333, "xform": [25, 28, 302], "xi": [179, 192], "xiaob": 262, "xiaowen": 91, "xim": 358, "xmax": 119, "xmin": 119, "xml": [55, 57, 61, 62, 65, 72, 75, 79, 80, 81, 82, 86, 89, 92, 93, 94, 101, 105, 108, 113, 131, 254, 297, 301, 307, 335, 345, 356], "xml_escap": [0, 236, 254], "xml_n": [57, 79], "xml_post": [55, 57, 82, 307], "xml_tool": [55, 57, 80], "xml_unescap": [0, 236, 254], "xmlcorpusread": [55, 57, 61, 65, 72, 80, 82, 86, 92, 93, 105, 108], "xmlcorpusview": [55, 57, 61, 79, 80, 93, 108], "xmldoc": [55, 57], "xmlinfo": [0, 113], "xmlschema": 301, "xmltree": 307, "xmx1024m": 169, "xmx512m": 131, "xpath": [55, 57, 79], "xprime": 318, "xprime_chas": 318, "xprime_chases_a_dog": 318, "xprime_chases_yprim": 318, "xreadlin": [0, 111], "xsd": 301, "xspace": 118, "xss": 356, "xtag": [57, 105], "xx": [275, 278], "xxx": 221, "xxxl": [57, 106], "xxxx": 91, "xxxxyi": 334, "xxxyyyzz": 334, "xy": [15, 317], "xytext": 317, "x\u00f5e": 333, "x\ufd9d\u0ba3": 242, "y": [15, 16, 33, 57, 67, 72, 107, 112, 119, 120, 127, 151, 158, 172, 179, 184, 186, 191, 251, 298, 299, 303, 307, 309, 311, 312, 313, 314, 317, 318, 322, 326, 329, 330, 334, 336, 337, 338, 347], "y332": 186, "ya": [239, 344], "yaa": [201, 202], "yacut": 192, "yahoomesseng": 20, "yaml": [111, 307, 309], "yanswer": 307, "yca3": 205, "ycn2t": 205, "ycoe": [55, 57], "ycoecorpusread": [55, 57, 109], "ycoehom": 109, "ycoeparsecorpusread": [55, 57, 109], "ycoetaggedcorpusread": [55, 57, 109], "ye": [24, 92, 221, 239, 253], "yeah": 198, "year": [57, 65, 166, 221, 234, 301, 305, 307, 310, 344], "yellow": 336, "yen": 192, "yes_no_s": 220, "yesterdai": [0, 273, 285, 288], "yet": [7, 8, 42, 104, 111, 131, 171, 173, 174, 179, 275, 281, 282, 284, 303, 307, 309, 314], "yevett": 148, "yew": 258, "yf": 158, "yfi3": 205, "ygo1": 205, "yhp1": 205, "yi": [96, 179], "yield": [14, 33, 52, 67, 152, 162, 165, 167, 171, 177, 179, 191, 216, 218, 237, 239, 243, 253, 291, 316, 335], "yl2": 205, "ylb1": 205, "yli3i": 205, "ylp0": 205, "ymax": 119, "ymin": 119, "ymo1": 205, "ynquestion": 307, "yoav": 356, "yolanda": 338, "yonghui": 262, "york": [57, 73, 100, 109, 163, 236, 239, 242, 244, 247, 249, 253, 254, 263, 264, 265, 266, 267, 268, 274, 341, 344], "yoshikiyo": 262, "you": [0, 2, 7, 8, 14, 23, 24, 25, 28, 34, 35, 39, 52, 57, 61, 69, 72, 75, 91, 100, 102, 104, 107, 113, 117, 119, 120, 121, 124, 132, 135, 137, 161, 162, 173, 174, 179, 197, 198, 204, 206, 209, 213, 215, 223, 234, 236, 238, 247, 258, 275, 279, 281, 284, 288, 289, 294, 298, 301, 305, 306, 307, 308, 309, 311, 313, 314, 315, 322, 333, 335, 343, 344, 346, 347, 351, 352, 355], "young": 262, "younger": 234, "your": [24, 28, 35, 39, 57, 102, 120, 135, 144, 181, 198, 233, 258, 273, 288, 289, 294, 307, 311, 314, 335, 355, 356], "your_app_kei": 290, "your_app_secret": 290, "your_path": 250, "yourself": 317, "youtub": [140, 356], "ypo1": 205, "yprime": 318, "yra3": 205, "yro3": 205, "yrtsi5": 205, "yspace": 118, "yte3": 205, "yti3": 205, "ytl2": 205, "yu": [91, 96], "yuan": 262, "yuganskneftegaz": 92, "yuko": 92, "yum": 323, "yuml": 192, "yuppi": 349, "yvett": 148, "yview": [114, 117], "yview_moveto": [114, 117], "yview_scrol": [114, 117], "y\ua446": [], "z": [8, 15, 57, 67, 107, 109, 120, 127, 179, 186, 214, 218, 220, 244, 299, 312, 314, 326, 328, 329, 334, 337, 338, 343, 347, 350], "z0": 120, "z1": [183, 311, 312, 318, 319, 326, 330, 338], "z10": [312, 337], "z101": 313, "z102": 313, "z103": 313, "z104": 313, "z105": 313, "z106": 313, "z107": 313, "z2": [311, 312, 313, 318, 319, 322, 330, 337, 338], "z22": 338, "z3": [311, 312, 313, 326, 330, 337, 338], "z4": [312, 322, 326, 330, 337, 338], "z472": 326, "z5": [311, 312, 330], "z6": [312, 322, 330, 337], "z7": [312, 330, 337], "z8": [312, 330, 337], "z9": [312, 330], "z938": 326, "z_": 120, "za": 120, "zag": [170, 172], "zc": 24, "zdg": 310, "ze": [57, 107, 348], "zeb": 333, "zee": 67, "zen": [0, 18], "zen_chat": [0, 18, 24], "zero": [25, 28, 31, 33, 52, 57, 81, 85, 89, 104, 107, 118, 119, 144, 162, 164, 171, 179, 188, 191, 225, 231, 232, 233, 258, 263, 264, 265, 266, 268, 269, 274, 275, 277, 307, 309, 310, 317, 326, 328, 334, 351], "zero_bas": [164, 310], "zero_indexed_align": [256, 268], "zerodivisionerror": 334, "zeta": 192, "zh": [67, 250], "zhao": 96, "zhifeng": 262, "zhu": 258, "zi2": 205, "zip": [33, 52, 57, 106, 111, 113, 131, 148, 198, 269, 294, 317, 338, 356], "zipf": 42, "zipfil": [111, 113, 309], "zipfilepathpoint": [111, 309], "zjw": 356, "zloti": [182, 300], "zodat": 336, "zpa": 308, "zpar": [164, 310], "zpar_data": 310, "zsm": 351, "zul": 308, "zusammen": [265, 266, 267], "zwaaien": [170, 172], "zwemmen": 348, "zwj": 192, "zwnj": 192, "zy1": 205, "z\ua287\u00eb\u0648": [], "z\ufc06": 242, "\u00aa": 192, "\u00aa\u14b6\ufc41\ua289\ua801\u18e5\ua355\u0453": 242, "\u00b2": 192, "\u00b3": 192, "\u00b5": [192, 242], "\u00b5\u1c71\ua475\u14ba\u1b97\u2c46\u1666\u140d\u0135\u0698\u162d": [], "\u00b9": [119, 192], "\u00ba": 192, "\u00ba\u0374\u2d23\ua9a3": [], "\u00bc": 192, "\u00bd": 192, "\u00be": 192, "\u00df": 192, "\u00e0": [192, 333], "\u00e1": 192, "\u00e1lvaro": 358, "\u00e1\u051f\ua659\u1bc0\u1963\u0786\ufd9e": [], "\u00e1\u0c37": 242, "\u00e1\u19ab\ufdc6\u14c3\u076c": [], "\u00e2": 192, "\u00e2\u1466\uabc8": 242, "\u00e3": 192, "\u00e3\u1246\u1ead\ufba9\uab3c\u1ef1f": 242, "\u00e4": [119, 192], "\u00e4\u01e1\u0d91\u0c8a\u1402\u1881": [], "\u00e4\u152f\u31b9": [], "\u00e5": 192, "\u00e5\u0f41\u2d09\u0481": [], "\u00e5\u14b7": [], "\u00e5\u313b": 242, "\u00e6": [119, 192], "\u00e6lfric": 109, "\u00e6thelr": 109, "\u00e6\u2cb9\ua612\ua867": [], "\u00e6\ufce5": [], "\u00e7": [119, 192, 242], "\u00e7\u14d5\ufc82": 242, "\u00e7\u18f4\u0f42\u1e6b": [], "\u00e8": [119, 192], "\u00e8\u0280": [], "\u00e8\ua16c\ua5c7": [], "\u00e9": [192, 333], "\u00e9\ua019\u3042\u11c1\ua3ea\ua653\uab0c": [], "\u00e9\ua247": 242, "\u00e9\ua40d": [], "\u00ea": [192, 242], "\u00ea\uff47": 242, "\u00eb": [119, 192], "\u00ec": [119, 192], "\u00ec\u1d1f": 242, "\u00ed": [119, 192], "\u00edndice": 307, "\u00ed\u0177\u10e0\u1da3": [], "\u00ee": 192, "\u00ee\u0852": [], "\u00ee\ufdac": 242, "\u00ef": 192, "\u00ef\u0144": [], "\u00ef\u02cf\u06b2\u1fd0\ua343": [], "\u00ef\ua063": [], "\u00f0": [192, 242], "\u00f1": 192, "\u00f1\u01c0\ud7f8": 242, "\u00f1\u18b1": [], "\u00f1\u1eb1\u31f0\u196b\ua603\uabb0": 242, "\u00f2": 192, "\u00f2\u176e\u1418": 242, "\u00f2\ufec1": [], "\u00f3": [192, 242, 333], "\u00f3\u11cf\u1d11": [], "\u00f3\ua479\uaa7f\u1d4f\u1cec\u1ed9": [], "\u00f4": [192, 242], "\u00f4\u1299\ua423\u1351": 242, "\u00f4\u2c61": [], "\u00f5": 192, "\u00f5\u1fe3": [], "\u00f6": 192, "\u00f6\u03bb\u16a3\u191d": 242, "\u00f6\u1c01": [], "\u00f8": [119, 192], "\u00f8\u04df\ua93f": [], "\u00f9": [119, 192, 242], "\u00f9\ufcd0": [], "\u00fa": [119, 192, 242], "\u00fa\u0e2d\u129f\u07e3": 242, "\u00fb": 192, "\u00fb\u30fe\u1d83\u14d3\ufe70\u168c": [], "\u00fb\uabb9": [], "\u00fc": 192, "\u00fc\u03c6": [], "\u00fc\u3090\u079f\u0d0a": 242, "\u00fd": 192, "\u00fd\u1683\u0477\u01bd\u1686\u15d3": [], "\u00fd\uaaa6": 242, "\u00fd\ufcea\ufb76\u0ea3": [], "\u00fe": [115, 119, 192], "\u00fe\u11e2\u16c0\uaabd": 242, "\u00ff": 192, "\u00ff\u2d04\u2c38": [], "\u00ff\uff52\ud7f8\u1762\u02b3\ud7d1\ua81c\u03bf\u1654": [], "\u0101": [], "\u0101\u30fc\ufcd9\u020f\u1841\u316e\uaa10\u00fd\uabb7\u1c7d\u1f76\u3124\u0c96": [], "\u0101\ua294": 242, "\u0103": [], "\u0103\u1ef5\u1ee7\u2e2f\ua032\u04e5\u2c7b\u15eb": 242, "\u0105": 242, "\u0107\uff46": 242, "\u0109\u1663\ua545\u0cb2": [], "\u010b\u08b1\u18dd": 242, "\u010d\u1b0a": [], "\u010d\u2cb1\u0f5a\u1d15\ua73d\ufc42": 242, "\u010f\u0c8c": 242, "\u010f\u0dc6\u2c36\u09a1": [], "\u010f\uaa70\ufc1b\ufdac\u16a9": [], "\u0111": 242, "\u0111\u1f01": 242, "\u0113": [], "\u0113\u18d1": [], "\u0113\u1bd8\uaa40\u3116": 242, "\u0115": 242, "\u0115\u14a6\u0840\u15c7\ua046": 242, "\u0115\u156f": [], "\u0117\u0a13": [], "\u0117\u1692": 242, "\u0119": 242, "\u0119\u1223\u1b15\u1b99": [], "\u011b": [], "\u011b\ua2e1\ua987": 242, "\u011d": [], "\u011d\u119c\ua3f5\ufb60\ua0c3": [], "\u011d\u11ac\u049f\ua13a\ua5bd\u142b": [], "\u011f": [], "\u011f\u02b4": 242, "\u011f\ufc77": [], "\u0121\u017a\u159d": [], "\u0121\u19bd\ua052\u2cdd": 242, "\u0121\u1c17\u0d14\uab2a\u3084": [], "\u0123": 242, "\u0123\u1613": [], "\u0123\ua0b6\ua6ab\u0978\u020d": [], "\u0123\uaa8b": 242, "\u0127": [], "\u0127\u1443": [], "\u0127\u2ca5\uab78\u3087\u0d60\u090f\u098f": [], "\u0129\u161c": 242, "\u0129\u1f11\u14e9": [], "\u012b": [], "\u012b\u3105\u2c57\ua4d0\u0f54\ua220\u03d9\ua5a6\ufb00\u1f65": [], "\u012d": 242, "\u012f\u01e1": [], "\u012f\u188b\u0925\u1b92": [], "\u012f\u3107\ua1a0\ua727": 242, "\u0131": [], "\u0133": 242, "\u0133\u2c50\ua36c\uaaab": 242, "\u0137\u1519": [], "\u0137\u2097": 242, "\u0137\ua6a8\ua725": 242, "\u013a": [], "\u013a\u029a": [], "\u013a\u0495\ua2a4\u1a0f\u2cc9\ufee2": [], "\u013c": [], "\u013c\u0b8f\u1e0d": [], "\u013c\u1486\u16f2\ufe8f\u06b8\u113a\ufeca": 242, "\u013c\u16e1\ua28c": [], "\u013c\u304f\ufb50": 242, "\u013e\u1f73": [], "\u013e\u2d11\u0c0b\ua66d\u0a1d": 242, "\u0140": [], "\u0140\uab70": 242, "\u0142\ua008": [], "\u0144": 242, "\u0146": [], "\u0146\u0ab9": 242, "\u0149": [], "\u0149\ua120\u2d01\u1990\uabb4\u14a6": [], "\u014b\uffd3\ua250": [], "\u014d": [], "\u014d\u1216\u12a4\ua009\u072e": [], "\u014d\u1240\u2d5e\ua65b\u11a4\u0440\u024b": [], "\u014f": [], "\u0151": 242, "\u0151\u069e": [], "\u0151\u15f4j\u2c93\uabb6": 242, "\u0151\ua147\ud7db\ua8ad": [], "\u0153": 192, "\u0153\uabb1": 242, "\u0153\ufcbc\uab26": 242, "\u0155\u072b\uff96\ua685\u0905\ufb31": [], "\u0157": [], "\u0159": 242, "\u015b\u0213\u2d60\u0473\ua1cb\ufd9d\u01ba": [], "\u015b\u1410": [], "\u015b\u1f83\u1d8e\u303c": 242, "\u015d\u1d83\ua5db\ua75b\u0d30\u306a\u1628\u14f8\u30eb\u04ce": 242, "\u015d\ua1f7\ua1d7\u0374\u011f\u2d02\u1d2a\u0ba8\u1d84\u1726\ua183": 242, "\u015f": 242, "\u015f\u1ef9": [], "\u015f\ua6d5\u1011\u029f": 242, "\u0161": [192, 242], "\u0161\u090c\u044e\u0786\u31f6\ua05c": [], "\u0161\u1997\u13f8\u0163\ua1cd\ua64b\ua757": [], "\u0161\ua58b\u1794\ua850\u1eab": [], "\u0163": 242, "\u0163\u0690": [], "\u0163\u1f66": [], "\u0163\u1f82": [], "\u0167": [], "\u0167\u15c7\u17b0": [], "\u0169": [], "\u0169\u02b9\u2c8b": [], "\u016b": 242, "\u016b\ua0f1\u0225\u2dc0": [], "\u016d": 242, "\u016d\u3070\ua39f\u0e9a\u1450\u08a0": [], "\u016f": [], "\u0171": [], "\u0173": [], "\u0173\u1864\uff4b": [], "\u0173\ua304\ufb93\ua45d": 242, "\u0175": 242, "\u0175\u03c5": [], "\u0175\ud7e9": 242, "\u0175\uff86\u1ed7\u2d58\ufd84": [], "\u0177": [], "\u017a": [], "\u017c\u0928\u1174": 242, "\u017c\u2d2d\u09af\u17b1": [], "\u017c\ua12a\ufc94\ufd0d": [], "\u017e": 242, "\u017e\u2c6a": 242, "\u017f": 242, "\u017f\u11c9\u178a": [], "\u0180\u17a0\u1b19": 242, "\u0180\u1b90\ufe99\u0f68\u1e21\u18d1\u190d": [], "\u0180\ua147\ua659": 242, "\u0183": 242, "\u0183\u1650\u2d95": 242, "\u0183\u1d7a\u3078\u16a7\u110b\ua2a5\ufe84\u02b1\u06c0": [], "\u0185\u1f57": 242, "\u0185\ua0ab\ua6a4\u1e19": [], "\u0188\ua145\u19a7\ufd07\u159c": [], "\u018c": [], "\u018d\ua618": [], "\u0192": 192, "\u0192\u164f\u12e1\u1c12\u0107": [], "\u0192\uaa63": [], "\u0195": [], "\u0195\u0791\u134a\u16ae\u314c\u1f61\u2c3d\u1014": [], "\u0199": [], "\u0199\ufda7": [], "\u019a": [], "\u019a\u09f1\u0e99\u06b6\u126b\ufd71": 242, "\u019a\ua88a\ua2e0": [], "\u019e": 242, "\u01a1\u1406\u167c\u2c43\u1103\u0561\ufc5b\ua972": [], "\u01a1\u142a": 242, "\u01a5\uaaf3\u307f": [], "\u01a8": 242, "\u01a8\ua14b\ufdf3": 242, "\u01aa\u12c3\ua287": 242, "\u01ab\u1c5f\u1859\ua29f\ua2e3": [], "\u01ab\ua5ebh": [], "\u01ad": [], "\u01ad\u1134\u1b93": [], "\u01b0": [], "\u01b4\u0dae\u18bb\u1fa3\u1244": 242, "\u01b4\u152a": [], "\u01b4\ua27b": [], "\u01b6\u1687": [], "\u01b9\u0465": [], "\u01b9\u0b71": [], "\u01b9\u147f\u1fe5\u03eb\u1c7c\u198e\u11e0\u1a37\u027d\u1f77": 242, "\u01ba\u30e4\u2d08": 242, "\u01bb\uab80\u18a7\u145d": [], "\u01bd\u309d": [], "\u01be\u0433": [], "\u01be\ua1be": [], "\u01bf": 242, "\u01bf\u077c": [], "\u01c1": 242, "\u01c1\u04b5\u1387\u15e9\u1d79\u1f07": [], "\u01c2": 242, "\u01c2\uffb0\u1186\ua2da\u0996\u1310": [], "\u01c6": [], "\u01c6\u01fd\u1e61\ua006\ua187\ua07f": 242, "\u01c6\u07e5\ua580\u11b7\u2102": [], "\u01c6\ua01e\u12a1\u11cc\u2d1a\ua699\u18bf\u1313": [], "\u01c9": [], "\u01c9\u014b\u0d9c\u0c61\u1797": 242, "\u01c9\u09a6\ua80c": 242, "\u01c9\u31b4\u170b": [], "\u01c9\ua521\u170a": [], "\u01cc\ufc93\ua759\ua598\u15e4": 242, "\u01cc\ufca6": [], "\u01ce\ua53c\u0b5d\u2d49": 242, "\u01d0\u2d5d\u068c\u1cec": [], "\u01d2": 242, "\u01d2\u02cd\u1021\u312c": [], "\u01d2\u111a": [], "\u01d2\u2da1\u1d66": 242, "\u01d4": 242, "\u01d4\u0a59": [], "\u01d4\u1fa4": [], "\u01d8": 242, "\u01d8\u1a3e": [], "\u01d8\u3138\ufcd7\u1a48": [], "\u01d8\ua52a": 242, "\u01d8\uabad\u1e65": [], "\u01da": [], "\u01da\u143a": [], "\u01da\u1b29": 242, "\u01dc": [], "\u01dd\u078a\ua057\ua71e\ufd22": [], "\u01dd\u143d\u1ead": 242, "\u01e1": [], "\u01e1\u1730": 242, "\u01e1\ua00c\u152d\u129d\u0d06\u17a5": [], "\u01e3": 242, "\u01e3\ufba5": [], "\u01e5\u0959\u0287\u1170\ua2cb\u31a2\u0a2d\u2091": 242, "\u01e7\u2d10\u1213\u0e01\ua39d": [], "\u01e7\u2d5a\u2133": [], "\u01e7\ua100": [], "\u01e9": [], "\u01e9\u084e\u0e25": [], "\u01ed\u0daa\u097a": 242, "\u01f0\u0683": 242, "\u01f3\u0159": [], "\u01f3\u01fb\u1569\u159a\u1e55\ua8a3\ua921\u1b9b\u1e3b\ua1a2\u0dac\uff8c\ua4ec": [], "\u01f3\u157d": 242, "\u01f3\u308e\u04b7\ua7a3": [], "\u01f5\u2111": [], "\u01f9\u0d13\ufcef\u0289": 242, "\u01f9\ufd77\u03c6\u18d5": [], "\u01fb\u1d0d": [], "\u01fb\ua770": [], "\u01fb\ua944": 242, "\u01fd": 242, "\u01fd\u00f4\uab75": [], "\u01fd\u0c26\u00e3\u12f1": [], "\u01fd\ua0b5\u135a\u0434\u12fd\u198e\u1a53": [], "\u01ff\u31f6\u0e12\u050b\ufc75\u1a48\ua749": 242, "\u0201": 242, "\u0201\u1bc7": [], "\u0203": [], "\u0203\u2ca9": [], "\u0203\ua377": 242, "\u0203\ua4e6\ua316\ua555\u0e29\u05d4": [], "\u0205": [], "\u0205\u1e49\u14d2": [], "\u0207\u0257": [], "\u0207\u03ba\u0e41\ua09e\ua2c9\ufc45\u010f": [], "\u0207\u1705\ua33b\u1e4b\ua2cb\u047f\u095e\u1f86\u10e3\ufd28\ua0f9\ua6a5y\u04bb\uab65\u1e4b\ua5a0\u017f": [], "\u0209": [], "\u0209\u0c35": [], "\u020b\u113d": [], "\u020b\ua989\u01dd\ua239": [], "\u020d": 242, "\u020d\u0ec4\u10e2\u170c": [], "\u020f\u2d27\ua0a7\u07f4": [], "\u020f\ua053\ua962\u05d8\ua18e": [], "\u0213": [], "\u0213\u3117\u07df\ua944": [], "\u0215\u022b\u0f5c": 242, "\u0215\u16da": [], "\u0215\ua111\ufcff\u2da5": [], "\u0217\u067f": [], "\u0217\u115a": 242, "\u0219": [], "\u021b\u1556\u18c6\ua61a\uabcf": [], "\u021b\u198d\u31ff\u1edd\u1fe0": [], "\u021d": 242, "\u021d\u1f7c\u2ca1": [], "\u021f": [], "\u021f\u10f6": 242, "\u021f\u210b": [], "\u0221\u07cb": [], "\u0221\ua016": [], "\u0223": [], "\u0227\u11ae\u0a72": [], "\u0227\ufb4b": 242, "\u0229\u1190\u084d": [], "\u022b": [], "\u022b\u0205\u19a7": 242, "\u022b\u03e3\ufc21\u1e17": [], "\u022d": 242, "\u022d\ua3f0\u1daf\u1c78": [], "\u022d\uab5f\ua529\u2cc1": [], "\u022f": [], "\u0231": 242, "\u0231\u0a5e\u1e53\uab4c": [], "\u0231\ufd77\ua937": [], "\u0233": [], "\u0233\u056e": 242, "\u0235\ufb22\u047b\u1283": [], "\u0236\ufb44\u170b\u1004\u12ee": [], "\u0237": [], "\u0238\u03ca\u1027\u18bd\ua2a3": [], "\u0238\u0a2f": [], "\u0238\u0c86\u172b": 242, "\u0239": 242, "\u023c": [], "\u023c\u0720\u02ae": [], "\u023c\u11c1\ua8b1\uaaa5\ua112\u2d87": [], "\u023f": [], "\u023f\u142a": [], "\u0240": [], "\u0240\uff66": [], "\u0242\u14bc": [], "\u0242\uaae1\u161c": [], "\u0247": [], "\u0247\u1e35\u161e\u084c": [], "\u0249\ua02d\u211d": [], "\u024b": [], "\u024b\u18e0": [], "\u024d": [], "\u024d\ua37f": 242, "\u024d\ufb99\u0a0a\u1490\u0924": [], "\u024f": [], "\u024f\u00f1\u1604\u30a7\ua0b3": [], "\u0250": [], "\u0250\u0217\ufd12\u1910\u1fc2\u07e3\u0e81\u1956\u2d18": [], "\u0250\ua6d4\u1343\ua272\ufd59": [], "\u0250\ufbec": 242, "\u0251": [], "\u0251\u1ef3": [], "\u0252\u3061": 242, "\u0252\ua5ae\ua685\ua8f4": [], "\u0253": 242, "\u0253\u00df": [], "\u0253\u2c66\u15ae": [], "\u0254\u1fb0\u1614\u1a12\u0497": [], "\u0254\ufb28": [], "\u0256": [], "\u0256\ua28a\ufcae": 242, "\u0256\ua88a\u1239": [], "\u0257": [], "\u0257\ua301\ufc84\u0240\u2c68": 242, "\u0257\ua55b\u0527\u028b": [], "\u0258\u0d2e\u152c": [], "\u0259": [], "\u0259\u1308\ufd6c": [], "\u025a": [], "\u025b\u0523\ua731\u0251\ufccb\ua36b\u17aa\u1d26": 242, "\u025c": [], "\u025c\u18a0": 242, "\u025c\u1a0c": [], "\u025d\u0457\u3059\ufcaf": [], "\u025e": 242, "\u025f\ua575\u0927": [], "\u0260\u16d6\ua332": [], "\u0261\u2d5f": 242, "\u0261\ufbef\u3106": [], "\u0263\u18dc\u1870\u140c\u1d01": [], "\u0263\ua412": [], "\u0264": [], "\u0265": [], "\u0265\u30f1": 242, "\u0265\ua26c": 242, "\u0265\ufc18\uab42\u0c90\ua444": [], "\u0266\ua215\ua068": [], "\u0267": [], "\u0268\u0777": 242, "\u0268\ufd50": [], "\u0269\u0569\u18c9": [], "\u0269\ua1b4\ua810": 242, "\u0269\ua968": [], "\u026a": [], "\u026a\u0624\u172f\ua79f\ufc17\ua05d\u1987": [], "\u026a\ufda4": 242, "\u026b\u1b46": [], "\u026b\u1f32\u1e19\u1ea9\u2ddb\u2d4d\u0753": 242, "\u026b\u209b": [], "\u026c\u1ec3\u2d21\u2c3ajw": [], "\u026d\u15d3\u19b2\ua0bc": [], "\u026d\ua691\ua22e": 242, "\u026e\u0805\u160c": 242, "\u026e\u123d": [], "\u026f": 242, "\u026f\u15f5": [], "\u026f\ud7ec": 242, "\u0271": [], "\u0271\u3119": 242, "\u0271\ufc6e\u1c5e\u1d4d\u1961\ua260\u10e9\u1bdf\ua29d": [], "\u0272\u00e4\u0844\ua3d2\ud7f3\ufc09\u1f00\ua48c\ua240\u2c3c\u0390\ua2c2\ufb2b\ua2b3\u1f70\u0b2e\u17af\uff78": 242, "\u0273": 242, "\u0274": [], "\u0275\ua990\u18d7\ufc06\uaa44\u121b\u022d\u0b2d": [], "\u0277": [], "\u0279": [], "\u0279\u04ad\u1eaf": 242, "\u027c\u09a4": [], "\u027d\uabb1\u2c53": [], "\u027e": [], "\u027e\ua6d8": 242, "\u0280": [], "\u0281\u154d\u15d1\u1f52\u1029\ua366\u0b17\uabae": [], "\u0282\ua22a\ua3ee\ua23c\u069d\u2c35": [], "\u0283\u0165": [], "\u0283\u1d6c": [], "\u0284\u195f\ufea7\u15c1": [], "\u0285\ufbfc": [], "\u0286": [], "\u0287\u0e13\u0961\u01f5\u2c58\ua5b5\u016f": 242, "\u0288\ua17f": 242, "\u0289": [], "\u0289\u0845": [], "\u028a\u2ce3\uaa41\ufe9b\ua357\ua188\u149f\uff7d\ua5aa\u1901\ufd52": [], "\u028a\ua0c4": [], "\u028b\uaa65": 242, "\u028c": [], "\u028c\u213f": [], "\u028c\ufd39": 242, "\u028d\u07dc": 242, "\u028d\u12b0\u1440": [], "\u028f\ufd69\u1251\ua0bb\ufb44\u1e89\ufdf7\uab70\u1351": [], "\u0290": [], "\u0290\u0d0f\u1e35": [], "\u0290\ua20a\u318a": 242, "\u0291\ua9e9\u0c2f\u1fa0": 242, "\u0292": [], "\u0293\ua6e4": [], "\u0294\u03e9": [], "\u0295": 242, "\u0297": 242, "\u0298\u0a1f": 242, "\u029a\ua550\ua31b\u1854\u02b6\u162a": 242, "\u029b\u046f": 242, "\u029b\u1271\ufcd4\ua2e9\u05e9\u156d\u069a\u1601\u025b\u185f": [], "\u029c": 242, "\u029d\u183f\ua212\uab5a": [], "\u029e": [], "\u029e\u1742\u1d37\u31a5": 242, "\u02a0\u19c8": [], "\u02a1": [], "\u02a3\u06fa\u0e13\u1bcc\ua665": [], "\u02a3\ua500": 242, "\u02a4": [], "\u02a5": [], "\u02a5\u00df": 242, "\u02a7": [], "\u02a9": [], "\u02aa\u04e7\u1460": [], "\u02aa\u184f": [], "\u02ac\u1a15": [], "\u02ad\u0101": [], "\u02ad\u1f95": 242, "\u02af": 242, "\u02b0": 242, "\u02b2\u050b\u0477\u1e21\u1591\u2c95\ua5c6": 242, "\u02b2\u1020\u01fb": [], "\u02b4": [], "\u02b4\u2c3c": [], "\u02b7": 242, "\u02b8\ua2c2": [], "\u02b9\u15b1": [], "\u02ba\uff58\ua3ce\ua412\u0d4e\ufcf9\ua1dd\u1648": 242, "\u02bc": 242, "\u02bc\u1356\u02b5\u1540\u30a9": [], "\u02bd\u1239\u16d5\u043f\u114e": 242, "\u02bd\ua1ce\u1853\u045e\u0b0f\u1740\u1080\uaa7e\ua753": [], "\u02be\ua241": [], "\u02bf": [], "\u02c6": 192, "\u02c7\ua278": [], "\u02c8\u00e6": 242, "\u02c8\u00e6m\u0259z\u0252n": 242, "\u02cb\u146c": 242, "\u02cb\ufb20\ufc08\u2d3a": [], "\u02cc": [], "\u02cc\u03c4\u1222": 242, "\u02cc\u0d7c\ua7a9\ua9a6\u1592": [], "\u02ce\u3131\ua1d5": [], "\u02cf\u1799": 242, "\u02d1\u1490\u1b2b\ua250": 242, "\u02d1\u2cbd\u1b85\ua263\u2115": [], "\u02e0": 242, "\u02e1": [], "\u02e1\u10dc": 242, "\u02e1\ua5f0": [], "\u02e3": [], "\u02e4": [], "\u02ec": [], "\u02ee": [], "\u0371\ua699\ua74d\ufc5f\u1c62": 242, "\u0371\ufee8\u19a8": [], "\u0373\u0f65\u10ff": 242, "\u0373\ufb94\ua862\u01b9\u1454": [], "\u0377\u0374\u075a\u1552": [], "\u0377\u119c\u0e30\u12ae\ua53d": 242, "\u0377\u12e3\ua23b\ua44f": [], "\u0377\ufc6e": 242, "\u037a": 242, "\u037b": [], "\u037b\u062d\ua919\ua73b": [], "\u037b\ufbee\ua0a4\u1c4e": 242, "\u037c": 242, "\u037d": 242, "\u0390\u1f56\ua1b6\ua5f7\ud7d5\u182d\u0ab6": [], "\u03ac\u0a33": [], "\u03ad": [], "\u03ad\u0142\u1629": [], "\u03ad\u0d0e": 242, "\u03ad\u14b6": [], "\u03af": 242, "\u03af\u14fa\u167f": [], "\u03b1": [192, 242], "\u03b1\u1d6a": [], "\u03b1\ufd5c\u30cc": [], "\u03b2": [192, 259], "\u03b3": 192, "\u03b3\u09e1": [], "\u03b4": [192, 242], "\u03b4j": 266, "\u03b4v": 267, "\u03b4\u097a\uaa6f": [], "\u03b5": [192, 242], "\u03b5\u0baf\u1630\u1434\u30ff": 242, "\u03b5\u0cae\u0d9f\ua26c\ua936\u1004\u15ca\u1413\u1e6f": [], "\u03b6": [192, 242], "\u03b6\u04b3": [], "\u03b6\ua02c\ua797\uab22": [], "\u03b7": 192, "\u03b8": [145, 192], "\u03b8in": 145, "\u03b9": [192, 242], "\u03ba": 192, "\u03ba\u0b39": 242, "\u03bb": 192, "\u03bb\u1709": [], "\u03bb\u1f92\ua17a\u11d7": [], "\u03bc": [192, 242], "\u03bc\u1566": [], "\u03bc\u1ec5": 242, "\u03bd": [192, 242], "\u03bd\u079f\u133b": [], "\u03be": [192, 242], "\u03be\u0563\uab8c": [], "\u03be\u0801\ua579\ua693\u00e0\ua285\u1f66": 242, "\u03be\u1144\ufbe6\u0117\ua478\ua09d\u138d\ufc64\u068c\u043f": [], "\u03bf": 192, "\u03c0": [192, 242, 313], "\u03c0\u30cb\u06c1\u1858": [], "\u03c1": 192, "\u03c2": [192, 242], "\u03c2\ua3c5\u1875\u16d9\u1b46": [], "\u03c3": 192, "\u03c3\u3091\u0eab": [], "\u03c3\uaa94\u043b": [], "\u03c4": 192, "\u03c4\u03b9": [], "\u03c5": 192, "\u03c5\u01df\u1bae\ua6c0": 242, "\u03c5\u1625": 242, "\u03c6": 192, "\u03c6\u0e16": [], "\u03c6\u0f58\u1f01\ua88f\u1f27": [], "\u03c7": 192, "\u03c7\u0aa7": [], "\u03c8": 192, "\u03c8\ua969\u2d93\u0715": 242, "\u03c9": 192, "\u03c9\u1228": [], "\u03c9\u149f\u2d1d\ud7bb\ufc8d": 242, "\u03ca": 242, "\u03ca\u1205\u03cd\u077f": 242, "\u03cb": 242, "\u03cb\u2cd1": [], "\u03cc\u075d\u0201\u03d7\u02e0\u1332": [], "\u03cc\ua339\ua3fd\ufb86": [], "\u03cd": [], "\u03cd\ua353\ua467\ufed0": 242, "\u03ce\u16ab": [], "\u03ce\u1d22\u0b3d": 242, "\u03d0": [], "\u03d0\u3034": 242, "\u03d0\uaa80\ua14b\u0993\u1d68": [], "\u03d1": 192, "\u03d2": 192, "\u03d3": 242, "\u03d3\ua384": [], "\u03d4": [], "\u03d5": [], "\u03d5\u1482": 242, "\u03d5\u1744": [], "\u03d6": 192, "\u03d6\ufda7": [], "\u03d7": [], "\u03d7\u1965\ua34f\u3112\ua21a": 242, "\u03d9": 242, "\u03db\u0758\u0a9b\u11e6": [], "\u03db\u105d": [], "\u03db\u1250\u0857\u14f9\u0255": [], "\u03db\u1e1b\u305b\u2d59\u1746\u2d8d\ufc21\u1201\u1847\ua9b2\ua85d\u1903\u06ae": 242, "\u03dd": [], "\u03dd\u14b2\ufdb7\u0d4e\u11ce": [], "\u03df\u14ab\u014b\u148e\ua206\u0cb3\u115d": [], "\u03e1": [], "\u03e1\u0582\ua6b4\ua655\u0bb9\u0daa": [], "\u03e1\u0710": [], "\u03e5\u0269": [], "\u03e7\uff95\ua348\ufc5f": [], "\u03eb": [], "\u03ed\u01f5\u056e\u1a02\u2c83\ufd2f": [], "\u03ed\u2cc7\ua511\u210d": 242, "\u03ed\ua045": [], "\u03efo": [], "\u03ef\u111e\u1d99\ufd2b\u023c": 242, "\u03ef\ua5ce": [], "\u03f0": [], "\u03f0\u1052\ua1ee": [], "\u03f1\u0627\u06a9": [], "\u03f1\u1f93\ua421\ufba0\ua041": 242, "\u03f2": 242, "\u03f2\u043c\u04f5\u0d8a\u1622\ua023": [], "\u03f2\uab29\ua737": [], "\u03f2\uff53\u1f81\u138d\ua2d1\ua190\u047f\u0f58\u1350": [], "\u03f3": 242, "\u03f5\ua2c7": [], "\u03f8": 242, "\u03f8\u2c9d": [], "\u03fc\u1910\u14d8": [], "\u03fc\uff4b\u15d5": 242, "\u0430": 242, "\u0431\u0443\u043c\u0430\u0436\u043a\u0443": 213, "\u0431\u1e65\u2d58": [], "\u0431\ua3d0\u0a35\u01bd\u1161\u2d14": 242, "\u0432": [], "\u0432\u314c\ua74f": [], "\u0433": [], "\u0434": [], "\u0434\u0121\u143e\u079e\u1f60\ufda0\u2c5e\uff73": 242, "\u0434\u0432\u0430\u0436\u0434\u044b": 213, "\u0434\u145b\uaaa3\ua0ac\u306c\u0a96\u1ee7\u12d5": [], "\u0435": [], "\u0436\u1696": [], "\u0436\u1696\u163d\ufce4": [], "\u0437\u15c0\u2094": 242, "\u0438": 213, "\u0438\u043b\u044c\u044f": 213, "\u0438\u1c0a\ua02b\ua6ad\u0249\u0d36": 242, "\u0438\u1f7a": 242, "\u0438\u3054\u0229": [], "\u0439": [], "\u0439\u1675": [], "\u043a\u0686": 242, "\u043c": 242, "\u043c\u176b\u1c09\u1e23\u31b8": [], "\u043d\u19a5": [], "\u043e\u0442\u043e\u0440\u043e\u043f\u0435\u043b": 213, "\u043e\u0721": 242, "\u043e\u11ff\u156a\ua1da\u15e7": 242, "\u043e\u1203\u18b0\ua97b\ufbd4\u165ay\ua571\ufdf3": [], "\u043f\u0435\u0440\u0435\u0447\u0438\u0442\u0430\u043b": 213, "\u043f\u1b88\u101b\ua76f\u1e51\ua5ef\u1618\u01df": 242, "\u0440\u024f": 242, "\u0440\ufd69\u118c\u14f9\u07d0\u02b7": [], "\u0441": [], "\u0442": [], "\u0443": [], "\u0443\u093d": [], "\u0444\ua11d": [], "\u0444\ua543\u04b1\ua018": [], "\u0444\ua72d\ua209": 242, "\u0445\u084f\u0493\u0773\u2d0d\u0c85": [], "\u0445\u11b7\u044e": 242, "\u0445\u2cad\u1f76\ua65f\u1582\u1cf2": [], "\u0445\ua18b\u03af\u075c\ua3d3\ua367\u2d94\u1897": 242, "\u0447": [], "\u0449": [], "\u0449\u1672\u1d15\ua134\ua59c": [], "\u044a": [], "\u044a\ufc29": [], "\u044b": [], "\u044c": [], "\u044d\u16cb\u0b16": 242, "\u044d\ufda6\uff7c": [], "\u044e": [], "\u044e\uab39\ua757\u3069\ufdfa\ufc9d\uaa74\u0a98\u31ab": [], "\u044f": 242, "\u0450\u1b0e": [], "\u0450\ua5a3\u05e4": 242, "\u0451": [], "\u0451\u1dab\ua471": 242, "\u0451\u306a\ua267\ufc37": [], "\u0451\ufee5\ua776": [], "\u0452\u071c\u1424": 242, "\u0452\u071e": 242, "\u0452\u1970\ua6d0\u1237\u1eb1\u0461\ua3bd": [], "\u0453\u1f63\ua365\ua127": [], "\u0453\u2c87\u2da6\ua116": 242, "\u0454": [], "\u0455\u0525\u1efd": 242, "\u0455\ua284\uaadc": 242, "\u0456\u19b0": 242, "\u0457": [], "\u0457\u15a0\ua279": 242, "\u0458": 242, "\u0459": 242, "\u0459\u0b93": 242, "\u0459\u1189": [], "\u0459\u141b\ua893": [], "\u0459\uaaac\ua0be\ua558\ufee3": [], "\u045a": 242, "\u045a\u31fb": [], "\u045b": [], "\u045b\u1061\uab9e": 242, "\u045b\u1f84": [], "\u045b\u3153": 242, "\u045c": 242, "\u045c\u0b0a": [], "\u045d": [], "\u045e": [], "\u045e\u1c61\u0810": 242, "\u045e\ua326\ufb9b": [], "\u045e\ua3f6": [], "\u045f\u0513\u0e0d": [], "\u0461\u0624": 242, "\u0461\u1d48\u0b17\u11f4\u1f77": [], "\u0465\u0712": [], "\u0465\u16a8\u0278": 242, "\u0465\u1d39": 242, "\u0465\u1f70": [], "\u0467": [], "\u0467\u0254": 242, "\u0469": [], "\u0469\u19b8": [], "\u046b": [], "\u046b\u0f68": [], "\u046b\ua356\ua8a3": 242, "\u046d\u037c\ua320\u09a6\u0824\u117f": [], "\u046f": 242, "\u0471\u0260": 242, "\u0471\u314e": [], "\u0473": 242, "\u0473\u1428": [], "\u0475": 242, "\u0475\u152c": [], "\u0475\u2149\uab52": [], "\u0477\uaa6d": [], "\u0477\ufef5": [], "\u0479\u010f": [], "\u047b\u1315\u1646\u03e5\u11ca\ufeca\ua5b1": [], "\u047d": [], "\u047d\u2c87": [], "\u047f": 242, "\u047f\u1268": [], "\u047f\u16b8\ua460": [], "\u0481": [], "\u0481\ua256": [], "\u048b": 242, "\u048d": 242, "\u048d\u111e\u0283\u1b9f": [], "\u048f\u0806\ud7c4\u06e5\u0ede\u0b30\ua3ac": [], "\u048f\u100f": [], "\u0491": [], "\u0491\u1a12": 242, "\u0491\uff53": 242, "\u0493": [], "\u0495": [], "\u0495\u022f": [], "\u0495\ufeba\ua757\u1d97": 242, "\u0497": [], "\u0497\u02b6": [], "\u0499\u2d10\uff93": [], "\u0499\u31b7\u1e93\u0715": [], "\u049b": 242, "\u049b\u1d9e": [], "\u049d\ua2eb": [], "\u049d\uff77\u2d2d\u31f7\u17a9": 242, "\u04a1": 242, "\u04a1\u045a": 242, "\u04a1\u1f43": [], "\u04a3": [], "\u04a3\u1211\u03c3": [], "\u04a5\u0433": 242, "\u04a5\ua3c8": 242, "\u04a5\ua9ea": [], "\u04a7\u2c46": 242, "\u04a9": 242, "\u04a9\u2d52\u124c\u150b": 242, "\u04a9\ufc2f": [], "\u04ab\u1ef1\uabc5": [], "\u04ab\u2d5b\u1010\u077d\u0f8b": [], "\u04ad\u14ce": [], "\u04ad\ua65f\u071f\u1291": [], "\u04af": 242, "\u04af\u0565\ua8a5": [], "\u04af\ua3fa\u1a33\u3087\u1451\ua473": [], "\u04b1": [], "\u04b1\ua50a\u1838\ua445": 242, "\u04b3": [], "\u04b5": 242, "\u04b7\u0ca1\u1a13\uff8f\u2c9b": [], "\u04b7\u1e07\u1f51": 242, "\u04b7\ua0fa\u1002": 242, "\u04b9\u01ef\u10ed": [], "\u04b9\u043f\ua26f": [], "\u04b9\u048b\u1a2f": [], "\u04bb": [], "\u04bb\u16e8\u3075\ua1d6\u12c8": 242, "\u04bd\u1412\u0e09\u1b1d\u023f": 242, "\u04bd\uab09": 242, "\u04bd\ufb7b\ufeb4": [], "\u04bf": 242, "\u04c2\u0288": [], "\u04c2\u14cf\u2d91\u1872": [], "\u04c2\u1f64\u1307\uab04": [], "\u04c4": [], "\u04c4\u308d": [], "\u04c4\u318c\u08a0": 242, "\u04c6": 242, "\u04c6\u0511\uff9e\u0e11\u170f\u03ba\ufd60": [], "\u04c6\u1fb3\u0d18\u2ca7": [], "\u04c6\u2d1f\u176c\u1d49": [], "\u04c8\uaba9\u1a31\uaa1a": 242, "\u04ca": [], "\u04ca\u1873": [], "\u04cc\u2c3f\u0cad\u2102\u1b2c\ua41c\ud7c3\u1ebd": 242, "\u04cc\ua5c9\u1102\u111c\u15d6": [], "\u04ce\u07cf": [], "\u04ce\u2c89\u19b4": 242, "\u04ce\u314d\u14a3": [], "\u04cf": [], "\u04cf\u153e\u0261": [], "\u04cf\u1dac\u15e6": [], "\u04cf\ua91e\ua413": 242, "\u04d1\u04e3\u0d2b\u00e2\ua392\ua4da\u1337": [], "\u04d3\u132b": [], "\u04d5": 242, "\u04d5h\u3125\u08a9\ud7e0\ua315": 242, "\u04d7\u01f0\ufc96": [], "\u04d7\u022d": 242, "\u04d7\u0b36\uaba2": [], "\u04d7\ua0df\u1126\u04bf": [], "\u04d9": [], "\u04d9\u1531": [], "\u04d9\u16f2\u2091": [], "\u04d9\ua4ed\ua54a": 242, "\u04d9\ua753": 242, "\u04db": [], "\u04db\u1d93\ua817": [], "\u04dd\uab92": [], "\u04df": [], "\u04df\u19c2\u2d89\u15eb\uff71": [], "\u04e1\u1115\uaa15": [], "\u04e1\u1192": 242, "\u04e3\u3069": 242, "\u04e3\ufec4\u1905\u0ea5\u1f04\u0185\u18ef\u0e2a": [], "\u04e5\u1506\ua99a\u1549": [], "\u04e5\uab36\ua477": [], "\u04e7": [], "\u04e9\u11f5\u122d": [], "\u04e9\ufc58": 242, "\u04eb": [], "\u04eb\ua8a4\u163f": [], "\u04ed": 242, "\u04ed\u1559\u1bbb\u01df\u04f7": [], "\u04ed\u1b1d\u0b06\u1287\ud7ec\u133a": [], "\u04ef\u0ea3\u2107\u1f97": 242, "\u04ef\ua846\ufe95": [], "\u04f1": 242, "\u04f1\u1894\u04cc\u0103\u12aa\u0d85": 242, "\u04f1\ufd1d\uffab\u2cc3\u16dc\u0b28": [], "\u04f3": [], "\u04f3\ua29c": [], "\u04f3\ua33b\uaab1\uaabd\ufbff": [], "\u04f3\ua356\u07d4\u01eb": [], "\u04f5\ua78c": [], "\u04f7": 242, "\u04f7\u1d61": [], "\u04f9": 242, "\u04f9\u11ff\u1642\ua552": [], "\u04fb": [], "\u04fd": 242, "\u04fd\u04fb": [], "\u04ffb\u0a39\ufca7": [], "\u04ff\u1268\u1cf2\uab2a\u1138\u16e9\ua1ca\ua406\u1704\u0b2a\u1c09\u30d3\ua1b2\u11b0": 242, "\u04ff\u1579": [], "\u04ff\ua0ae": [], "\u0501": [], "\u0501\u2cee": [], "\u0505": [], "\u0505\uaa89": [], "\u0507\u3159\ua597\u1a42": 242, "\u0509r": 242, "\u0509\u0c2d\u076d\u0d29": [], "\u0509\u30bb\u01b0\u076f": 242, "\u050b": [], "\u050b\uff96": [], "\u050d": 242, "\u050d\ua00f\u1e2d\u15c4": [], "\u050f": 242, "\u0511\u11e9": [], "\u0513": 242, "\u0513\u15a8": [], "\u0515\u115f": [], "\u0517\u028a\u3181\uabd6\ua5cf\uab5c\ufdf6": [], "\u0517\u11fb": [], "\u0519\u156f": 242, "\u051d": 242, "\u051d\u0b2d": [], "\u051f": 242, "\u051f\u0575\ua895": [], "\u051f\u3120\ua4ec": 242, "\u0523\u2c8d\ua2c4\u1dad": [], "\u0525": [], "\u0527": 242, "\u0527\u1d2b\u135a\ua020\ua3b7\u09b0\u2d92\u1eeb\uabcc\uaae6\u2d61\ufd1c": [], "\u0529": 242, "\u0529\u2d25\u0a09\u1f84\ua863\u0d09\u14b2\u0980\ua472\ufb21\u10fe\u1f03\ua665": [], "\u052b\u013e\u022f\u1409\u0199\u047f\ufc0f": 242, "\u052b\u1444": [], "\u052b\uab78": [], "\u052d": [], "\u052d\u1d71\u2dcb\u0567t\ua812\u0581": 242, "\u052d\uaa6a\u1691\u2da0": [], "\u052d\ufb23\u01b4m\u1277\u1d15\u0c0e\u01ce\u0437\u1574\u1665\u0814\u145a": [], "\u052d\ufc20\ua9cf\u3150\ua4de\u307a\u0ae0": 242, "\u052f": [], "\u052f\ua730\u0906": 242, "\u0559\u0a24\u30b2\ua4ed\u163b\ufc5c\u1b95": [], "\u0561": [], "\u0561\u1679\u1eb3": 242, "\u0561\u2d11\ufec3\u1197\u11b6\ua77f\u02ec\u0447": 242, "\u0562\u11fe": 242, "\u0564": [], "\u0564\u1e87\ua1b5\ufea2\u0928": [], "\u0564\ua71b\u03ae": 242, "\u0565\ufb34\u0d1d": [], "\u0566\u3056": [], "\u0568": [], "\u0568\ua93d\ua122\ua845\u1f15\u0641\u148e": [], "\u0569\u03af\u128d\u11ad": [], "\u0569\u30e7\uaa91\u1d81\u0cbd\ua36d\u1762\ua1b6\ufee1": 242, "\u056a": [], "\u056a\u1ea9\ua769\ufb31\u1332\u0cad\u1a2e\u1e67\ua991\ufcc2\u16f5": [], "\u056b\u16be\ua59d\u30c2": 242, "\u056c\uabd1\ufc10\u18ee\u3154": [], "\u056c\ufcdf\ufd8e": 242, "\u056d": [], "\u056d\u2c38\u0559\ua362": 242, "\u056e\u16de\ufc44": [], "\u056e\ua8ac\u0b21\u0d0a\u1e67\u1435\ua050\u0922\u0781": [], "\u056e\ufeed\uabcb\u0c8f": 242, "\u056f\u1e19": 242, "\u056f\u1fa7": [], "\u056f\u304a\ua196": [], "\u0570": [], "\u0570\u09b6\u12a8\u0448\u0e2e\ua55f": 242, "\u0573\u092d": [], "\u0573\u30f9\ua2fb\ua31e\u01c9\u30a2": [], "\u0573\uff4a\ua9ae\u174a\ufb05": 242, "\u0574": [], "\u0574\u0c97": 242, "\u0574\u2d07\u18ce": [], "\u0576": 242, "\u0576\u18a3": [], "\u0577": 242, "\u0577\u10f1": 242, "\u0578": [], "\u0578\u1569": [], "\u0579": 242, "\u0579\u1140": [], "\u0579\ua1ce\ua0e9\ua29b\ua616\u16d4\u0161": 242, "\u057a": [], "\u057a\u05e0": 242, "\u057a\uff5a\ufc36": [], "\u057c": [], "\u057c\ua65b\u1052\ufc7e": 242, "\u057c\ufba7\ufd88\u1f34": [], "\u057d": [], "\u057e\u0a26": 242, "\u057f": [], "\u0580": [], "\u0580\u2d51\ud7b5": [], "\u0580\ua5cd": 242, "\u0581": 242, "\u0581\u1c71\u03d7\u1707\u1f97\u1224\u212c\ua860": [], "\u0582\ufc36\ua50a\ua386\u110b\u12c0": [], "\u0583": [], "\u0583\u0c38\u1119\u1247": [], "\u0583\ua486\u2d0c\u172d\u0e03\u1e57\u15d2\u1f67\ua1a0\u1459": [], "\u0584": 242, "\u0584\u1299\u1974\u2c3b\u11fa\u172a": [], "\u0585": 242, "\u0585\u091f\ua1e8\u1e77": [], "\u0585\u1558\u00e0\ua4f8\ua044\u046b": [], "\u0586": [], "\u0587": [], "\u05d0": 242, "\u05d1\u19a2\u1cf3": [], "\u05d2": 242, "\u05d3": [], "\u05d5\u0d29\ua117": 242, "\u05d5\ua13e": [], "\u05d6": [], "\u05d7\ud7f0\u021d": [], "\u05d8": 242, "\u05dah": [], "\u05db\u142d\ua2f8\ufeb8\ua6d2\u307e\u1914": [], "\u05db\u1784\u0638": 242, "\u05db\ufb1f\u182a\u1155\u1160": [], "\u05dd\ua122": 242, "\u05dd\uabae\u1a00": [], "\u05de\u0ab8": [], "\u05de\ua58c\u05f2\ufd21": [], "\u05df\u3064\ufd0c\u0495\u03c9\u1954\u04b7\ufe73\u14d7\ua88e\ua02a": [], "\u05e0": [], "\u05e1\ua53a": 242, "\u05e2": [], "\u05e3\u11f9\u05dc": 242, "\u05e4": [], "\u05e6": [], "\u05e6\u129d\u1999\u211c": 242, "\u05e7\u2d08\u06fc\u02ab\u0dbd\u3071\u307b\u0298": [], "\u05e7\uab20": 242, "\u05e8": [], "\u05e8\u170b\u18b4\ua9ad\ua46b\u1491\u0448\u18a6": 242, "\u05e9\u2136\u30a3\u09e0\u2d92": 242, "\u05f0\u1c7d\ua9ee\u2da5\u31a4\ua91e\u1fa4\u106f\ua142": [], "\u05f0\ufc57": 242, "\u05f1\uab2d\u1a24\u0a8b\u0c35": [], "\u0620": [], "\u0621\u00f6": [], "\u0623\u0d05": 242, "\u0624k": [], "\u0625": 242, "\u0625\u3061": [], "\u0626": 242, "\u0627\u0644\u0639\u0631\u0628\u064a": 250, "\u0627\u0644\u0643\u0644\u0645\u0627\u062a": 250, "\u0627\u1744": [], "\u0627\ua5ad\u3048\u2d0a\u1843\u0221": 242, "\u0628\u1d5a": [], "\u0629": [], "\u0629\u15da": 242, "\u062a\u0635\u0646\u064a\u0641": 250, "\u062a\u0641\u0627\u0639\u064a\u0644": 204, "\u062a\u0d93\u169a": [], "\u062b": [], "\u062b\uaa05\u1465\u184e\u11b1": 242, "\u062c\u1165\u176a\u2cc7\ua08d\ua717\u112a\u02be\ua3c3\u01a5\u1705\ufb81\ua1b9\ua98a\u1e13\u2d09\ua583\u045d\u056d": 242, "\u062d\u0479": 242, "\u062e\u00fd\u09b0": 242, "\u062f\ua2cd\ua153\ua37c\ufc89\uffb1": 242, "\u0630": 242, "\u0631\u1181\u12e2\ua097\u09a2": 242, "\u0631\u12c5\ua887\ua6d9": [], "\u0632\u076b": [], "\u0632\ua3d6\uff43": 242, "\u0633\u062a\u0627\u0646\u0641\u0648\u0631\u062f": 250, "\u0634": [], "\u0634\ua474\ufef0": [], "\u0635\u2dd4": [], "\u0636\u18b8": 242, "\u0636\u1fb6": [], "\u0637\u172d": 242, "\u0637\u1a08": [], "\u0638": [], "\u0639\u0645\u0644": [202, 342], "\u0639\u12fd": [], "\u063a\ua2b0\u1788\ua3ce\ufc3e": [], "\u063b": [], "\u063c": [], "\u063c\u101b\u0800\uffd7\uab9f": [], "\u063f": [], "\u0640": [], "\u0641\u071c": [], "\u0641\u110c\u05de\uaabc": 242, "\u0643\ufc4f": [], "\u0643\ufcfc\ud7d3": [], "\u0644": 250, "\u0644\u0644\u0643\u0644\u0645\u0627\u062a": 250, "\u0644\ua3ca": [], "\u0645": [], "\u0645\u1d1b\ud7d6\u0299\u06d1": [], "\u0646": 242, "\u0646\u313e": [], "\u0646\ua9fd\u1c15\u16ad": [], "\u0647": 242, "\u0647\u0630\u0627": 250, "\u0647\u0648": 250, "\u0648": 204, "\u064a\u0639\u0645\u0644": [202, 342], "\u064a\ua309\uaa25\ua59e\u2c97\u0446\u2dc0": [], "\u066e": 242, "\u0671\u15db\ufcd3": 242, "\u0671\ua36f\u159d\u2c37\uab79": [], "\u0672": [], "\u0672\u057a": 242, "\u0673\u1fb0\u1534": [], "\u0674\u079e": [], "\u0675\uab26": [], "\u0676\u1d7b\ua57b": [], "\u0677\u075b": [], "\u0677\u095b\ud7f1": [], "\u0678\u0799": 242, "\u0678\u1e37\u15cd": [], "\u0679\u1763\u19a1": [], "\u0679\ua86d\uff4f": 242, "\u067a\u1993": [], "\u067b\u06be\ua310": [], "\u067b\u2d1b": [], "\u067c\ua072\ua29a\u1d20\ua250\ua125": [], "\u067e\u01b9": [], "\u067e\u1982\u06b6": [], "\u067f\u11b0\ua7a5\u2dba\u1d69\ufc1c": [], "\u0680": 242, "\u0682\u0693": 242, "\u0683\u0103": [], "\u0687\uaa88": [], "\u0688\ua273": [], "\u0688\ua317": [], "\u0689\ua895": 242, "\u068a\ua3be\u11a0\ua349\u0757": 242, "\u068b\u03e9\ua3b7": 242, "\u068c\u1243": 242, "\u068e\u1580\u191d": [], "\u068e\u15aa": 242, "\u068e\u19a3\ufc28\u1ead\u0b8a\u1322\ua482\ua848\u1ee7": [], "\u068f\u1984\ua098": [], "\u0690\uff58\u0da4\ua54b\uab86": 242, "\u0691": 242, "\u0691\u1e31\uaa8c": [], "\u0693": [], "\u0694\u1f94\u0aab\u1341": [], "\u069e": 242, "\u069f": [], "\u06a2": 242, "\u06a3": 242, "\u06a4": 242, "\u06a4\ua031": [], "\u06a5\uabdb\ufda2": 242, "\u06a6\ufd6f": [], "\u06a8\u0e30\u110f\u1129\ua0f9\u00ff\uaa64\uaa75": [], "\u06a8\u161a": [], "\u06a9\u06a0": [], "\u06ac": [], "\u06ae\u112d": [], "\u06b0\ua384\u16d0\ua0e8": 242, "\u06b1": 242, "\u06b2\u0975\ua117\u0e04\uabd9": [], "\u06b3": [], "\u06b3\u0251\u0eae\u0c8b\u316b": 242, "\u06b4\u147a\u166a": 242, "\u06b5": 242, "\u06b5\ua34c\ua09f": [], "\u06b6": [], "\u06b7\u07a2\u1e39\u02e4": [], "\u06b8": [], "\u06b9\u1ebb\u2115": [], "\u06b9\u1fc2\u0a1b\uabab\ua02dk\ua43f": 242, "\u06ba": 242, "\u06ba\u1d80\u112a": [], "\u06bb\u0264\u2cc1\ua2fa\u1d6b\u1fd2": 242, "\u06bb\ufc51": [], "\u06bc": [], "\u06bc\u01e1\ua8f4\u1664\u0d7f\u2cdf\uaa41\u0d19": 242, "\u06bc\u1f25i\u2c55": [], "\u06bd\u1d47\u2d30\u1898\u06a5\u30ad\u111f\u1a36\u1005": [], "\u06bd\ua13f\ufedc": 242, "\u06be\u1990": 242, "\u06bf\u1e85": 242, "\u06bf\u2c65\ua6b3\u145f": [], "\u06c0\uabba\ua540": 242, "\u06c1": [], "\u06c1\u0e9d": 242, "\u06c2\u12e0\ufce6": 242, "\u06c4": [], "\u06c7\ua56a": [], "\u06c8": [], "\u06c8\u3071\ua28d\ua0b5": 242, "\u06c9\ufd73\u1e99": 242, "\u06ca": 242, "\u06ca\ua997\uff50": [], "\u06cb": [], "\u06cb\u0675": 242, "\u06cb\u1c67\ufd34\u1168\u1239\ua1b2\u09ab\u0d05": [], "\u06cc\u1d8b\u01ab": 242, "\u06cd": 242, "\u06cd\u2d8c": [], "\u06ce": [], "\u06d3\u045a": [], "\u06e5": 242, "\u06e5\u154f": [], "\u06ee\u1d84": [], "\u06fb": 242, "\u06fc": [], "\u06ff": 242, "\u06ff\u0576\u117c\u159e": [], "\u0710": [], "\u0712": 242, "\u0713\u03b6\u1844\u03db\u00ff\u1839\ua5e9\ua747\u1184": 242, "\u0714\uaaab": [], "\u0716\u028e\u1823": 242, "\u0717\u1986\ufbb0\ua73f\uff42\u0695\ua399\u1a0d": [], "\u0718\ua8f6\u2d31\u183f\u17aa": [], "\u0719\u07de\u03ae\u1ebb\ufea0\u0509\u1149\ua0ac\u1db5": [], "\u071a\u15d7\ufb6d\u178d": 242, "\u071b\u1ff2\u118e": [], "\u071c": [], "\u071d\u1e5b\u0d21\u30cd": 242, "\u071d\ufeda": [], "\u071e\u0265\u01a8": [], "\u071f\u03cb\u1206\u03fb\ua412\ua5e2\ua16b\u0287\u11b9": [], "\u071f\uffca\u1960": 242, "\u0720\u0ce0\ufcae": [], "\u0722\u1463\u2c48\u1b14\u18f2\ua024\u0bb7\ua088\u1f27": [], "\u0722\u2d01\u3072\u1f23\u06ee": 242, "\u0723": [], "\u0724": [], "\u0725": 242, "\u0725\ua1fc": [], "\u0725\uff48\u0ca7": [], "\u0727\u3124": 242, "\u0728": [], "\u072c": 242, "\u072d\u1053\u02e3": 242, "\u074d": [], "\u074f\u0b05": 242, "\u074f\u2cbb": [], "\u0750\u0f8a": 242, "\u0751": [], "\u0752\u1f78\u1710\u2c49\u0578\uffaf": 242, "\u0752\u1fa3\ua96f": [], "\u0753\ua8b2\u1863": [], "\u0754": 242, "\u0754\ua9ec": [], "\u0754\ufeee": [], "\u0755\ufeec": [], "\u0757": [], "\u0757\u043a\u0ca5": [], "\u0758": 242, "\u0759\ua4f9": 242, "\u075d\u2d21\u06ab": 242, "\u075d\ua01d": [], "\u075f": [], "\u0760\u1355\u0698": [], "\u0761": 242, "\u0761\u0458": [], "\u0762\u1147\ua053": [], "\u0762\u11da\u2cb3": 242, "\u0763\u01b0\u10e8\ua771": 242, "\u0764": [], "\u0764\ufd99\u0e42\ua2c9\u0b1b": 242, "\u0765\u01b4": 242, "\u0766\u1054": [], "\u0766\ua0e6\u0127\u03c8\u090d\ua27c\u1b15\uaaa1": 242, "\u0767\u0e0e": [], "\u0768\u1ed5": 242, "\u0769\u1157\u0564\u0932": 242, "\u076a": [], "\u076d": [], "\u076e": [], "\u076e\u056c": [], "\u076f\u30bd\ua55a": [], "\u0770\u2d1f": 242, "\u0771": 242, "\u0771\u30e3": [], "\u0771\ua0ea": [], "\u0772\u0db8\ufcdd\ua3db\u2d01": 242, "\u0775\u0633\u2cb7\u3178\u05dc": [], "\u0776": 242, "\u0776\ua60c\u1749": [], "\u0777\ua332\ufbdc": [], "\u0779": [], "\u0779\u1283\u0682\u114a": [], "\u077a\u1a52\u1d9d\u07e1": 242, "\u077b\ua0ab\u027c\ua1a9\ua4d3\u30bd\ua75f\u0527\ua0ad": [], "\u077c\u1e96\u028c\u0e2d\u029e\ua81e": [], "\u077d": [], "\u077e\u1869": 242, "\u0781\u119a": 242, "\u0782": 242, "\u0782\u1d3c\u1e75\u095f": [], "\u0783": [], "\u0785": [], "\u0785\u03e3\u06e6": 242, "\u0787": [], "\u0787\ua2dd\ufd87\u2d03": 242, "\u0788\ua864\u1a00\u1d04": 242, "\u0789": [], "\u0789\ua343\u210c\u129b\u0caa": 242, "\u078a\u2da0\u0101": 242, "\u078b\u2d20\u12df": [], "\u078b\uaba3": [], "\u078c": 242, "\u078d": 242, "\u0791\u3055": 242, "\u0792\u1d35\u310f\ua1c5": [], "\u0793": 242, "\u0794": [], "\u0795\ua787\ua530": [], "\u0796\ua189": [], "\u0798\u0756\u1f00\ua328\ua93a": [], "\u0798\ufea1\u037a\u1520\u0bb3\u0d9d\u1548\ua304\ufef2\ua12d": [], "\u079a": 242, "\u079a\ua5bc\u0914\uabbc\u2c99\ufb2c\u08a0\u308b": [], "\u079b": 242, "\u079c": 242, "\u079d\ua9eb": 242, "\u079d\ufc58\u0503\u0d8a\ufefb": [], "\u079f\ua9e1\ua3bc\u1e2f": [], "\u07a2\u0201\u0d33": 242, "\u07a3": 242, "\u07a3\u02ca\ua509": [], "\u07a3\ua200\u1467\ua2d5": [], "\u07a4\u142e\u15e2": [], "\u07a4\u1b31\ua0a3\u12d9\ufdbd": 242, "\u07a5\u157d\uab2b\u1da2\ua602\u1e95\u0765\u3081\u016d\u145f\u1e35\u1473\ua6a9": [], "\u07a5\u191e\u0a05": 242, "\u07b1\ua199\ua6aa\u1d9f\u1eb9\u2c43\u1254\u0209\u057d": 242, "\u07ce": 242, "\u07ce\u164f\ua90d": [], "\u07ce\ua1dd": [], "\u07cf\ua46f\ua41d\ua534\u1215\u0155\u06ad": 242, "\u07d2": [], "\u07d2\u12b4\u11c0\u1602": [], "\u07d3\u1663\u0c87": [], "\u07d5\ua7a9\u047d": 242, "\u07d6": 242, "\u07d6\u2d24\u03f1\u111d\u00ee": [], "\u07d7\u2d1a\ud7d4": [], "\u07d7\ua765": 242, "\u07d8": [], "\u07da\u0759\u1e17\u0175\uab86": [], "\u07dc\u31f7\u0272\u0188\u1d6b": [], "\u07dd": [], "\u07dd\u0a99\u0b0c\u076c": [], "\u07de\u0761\u1226\ua0a5": [], "\u07de\u1f43": 242, "\u07df\u0840": [], "\u07e2": [], "\u07e2\u1236": [], "\u07e3": [], "\u07e5\u1597\u1f85\u14a2": [], "\u07e6": [], "\u07e6\ua03a\uff46\u17dc": [], "\u07e7\u1593\u04d1\u1684\ua040\u0446\u307b\u121c\u0e08": 242, "\u07e7\ua3fa\u01c3\u0ebd": [], "\u07e8": [], "\u07f4\u1d2f\u1425\ua3e0\u1333\ufd12\u1103\u0645": 242, "\u07f5\u1bcf\ua88c\ua89c": 242, "\u07fa\u0e2e\u16a0\u04f5": [], "\u07fa\u30ed\ua11f": [], "\u0800\ufc7b\u1763\u1427": [], "\u0802\ua53a\u16a5\u179e\u0252\ua1f0": [], "\u0803": [], "\u0803\ud7be\u0d88\u0144": 242, "\u0804\ua799": 242, "\u0805": [], "\u0805\u1a03\u110a\u11e5": [], "\u0806": 242, "\u0806\ua769": [], "\u0807\u02d1": [], "\u0809": 242, "\u0809\u0f66\u120f\u1516\ua6c0": [], "\u080b": [], "\u080b\u316e\u318d\ua5d8\ufc81": [], "\u080c\u305c\u0567\u210c": [], "\u080c\uab29": 242, "\u080e": [], "\u080e\ua611": [], "\u0810\u122d\u1cea\ufed7": [], "\u0811": 242, "\u0812": [], "\u0812m\u119a": [], "\u0814\u0976\u045a": [], "\u0815": 242, "\u0815\ua184\ua73d\u31fe\uaa8f\u1666": [], "\u081a\u3143\u1d56\ua030": [], "\u0828": [], "\u0840": [], "\u0841": 242, "\u0842": 242, "\u0843": [], "\u0845\ua553\u1e8d\u2d1d\u12d8": 242, "\u0847": [], "\u084a": [], "\u084d\u15f7\u19a1\ua00b\ua884\u01c6\u0213\u1250\u0aa8": 242, "\u084e\u1f94\u11ea\u1253\u15e6": 242, "\u084f": 242, "\u084f\u051b\u179c": [], "\u0851": 242, "\u0851\u31b2\ufc15": [], "\u0852": [], "\u0852\u01f9": 242, "\u0853\u1eaf\u211b\ua669": [], "\u0854": 242, "\u0854\u0ebd\u1c68": [], "\u0856\ua9af": 242, "\u0858": 242, "\u08a3\u1708\ua7f8\u2d0e\u1e3b": [], "\u08a4": 242, "\u08a5": [], "\u08a6": [], "\u08a6\ua691\ua545": [], "\u08a7\u09df": [], "\u08a7\u1024\uffda\u0582\u1b89\u16a6\u044c\ufd6a": 242, "\u08a8\u16d4": [], "\u08a9\u2c58\ua4f8\u097e\uaa74": [], "\u08ab": 242, "\u08ac": [], "\u08ac\u027b\u01b6": 242, "\u08ad": 242, "\u08ae": [], "\u08ae\ua076\u0491": [], "\u08af\u1508\ua210\u15ea\u024f\u0209": [], "\u08b0": 242, "\u08b0\u144e\ua6da\u0284\uab7d\uaba0\ua41d\u0109\u1a2e": [], "\u08b1": [], "\u08b2\u020d": 242, "\u08b2\u18d3\uaa08": [], "\u08b2\ua441\u027d\u188f": [], "\u0904\u066f\u31f1\u093d": [], "\u0906\u03b3\u03b5": [], "\u0907\u12cd": 242, "\u090a": [], "\u090b\ua320\ua242": 242, "\u090c": [], "\u090c\uaae6\ua80a\uabc2": 242, "\u090d": [], "\u090e": [], "\u090e\u1330": 242, "\u090f\ua1d4\ufd58\ufc6f\u00f5\u0219": 242, "\u0910\u0a27": [], "\u0910\u2cdf\u069b\u0292": 242, "\u0912\u07b1\ua56f\u14b6\u0456": [], "\u0913\u0c1d\u1e5f\u1544\u0f49": [], "\u0915": [], "\u0916\u30c7\u1fa3\u19bb": [], "\u0917\uab9b": [], "\u0918": [], "\u0919\u112b": [], "\u0919\uffcf": [], "\u091a\u12ad": [], "\u091b": [], "\u091c\u0ec2": [], "\u091d": [], "\u091f": 242, "\u0920": [], "\u0920\ua087": 242, "\u0921": [], "\u0922": [], "\u0923": [], "\u0924\ua0e4": 242, "\u0924\ufc96\u0f40\u10f4": [], "\u0926": [], "\u0929": 242, "\u0929\ua35b\ua440": [], "\u092a\ufba1w": [], "\u092c": 242, "\u092d\u190e\uff7c\uab84\ua3de": [], "\u092e\u1dba\ua042\ua64d\u1446\u09ce\ufc7b": 242, "\u092e\ua546\ua15c": [], "\u092f\uaaa3": [], "\u0930\u1f44": [], "\u0933\u3159": [], "\u0934": [], "\u0936\u0438\u05da": [], "\u0936\u0446": 242, "\u0936\u184a\u00f0\u1725": [], "\u0938\u095d\u04bb\u1214\ua99b": 242, "\u0938\ud7f5\u18b5\ufe86\ua2b4\u1685": [], "\u093d\u10f2\ua799\ua851\ua857\u1cee\u1a23\u1fa4\ua30c\u11c2": 242, "\u0950": [], "\u0958\u0d0c": [], "\u095a\u0d08\u1f56\ua0c7\u0f8a\u30df\ufb53\ud7f7": [], "\u095c\u2dc1": [], "\u095c\ua162\u1e97": 242, "\u095d\u11f8\u1fb1": [], "\u095f\uabdc\u1f62\u30f0\u047b": 242, "\u0960\u03ce\u0a93\u169a": 242, "\u0961\ua212\ua536\ua6dd\u01dc\ufb27": [], "\u0971": [], "\u0972": [], "\u0973": [], "\u0973\u2d17": [], "\u0975": [], "\u0975\u1830\u00f8": 242, "\u0978\u0c33": 242, "\u0979": [], "\u0979\u0932\u1e53\uab34": [], "\u097b\u0573\ufed6\uabb2\u1e29\u04ff\u2ca9\u17b2": 242, "\u097b\ua66e\u05ea\u2c4a\uabcb\ufc80\u127e": [], "\u097c\u1128\u1f95": [], "\u097d\u213d\u1383\u0a23": [], "\u097e": [], "\u097f\uff55": [], "\u0980": 242, "\u0980\u315b": [], "\u0985": [], "\u0986\u1981\u3107\u10f8\uabb5\u0f8c\u1676\u03c5\ua413\u18e8\u3088": [], "\u0986\u1ee1\ua0e6\u1d6f": [], "\u0988": [], "\u0989\u0f49\ua5fb\u17b3": 242, "\u0989\u1104\u1be1": [], "\u098b": [], "\u098b\u1f24\u0dc0": [], "\u098f": 242, "\u0990\u18bb": [], "\u0993": [], "\u0994\u0d21\u1173\u147d": [], "\u0994\u2ccb\ua29d\u1835\u1c02\uaae1\u1ef5\u0911": [], "\u0994\ua5dd\u101a\u0571": 242, "\u0995": [], "\u0995\u317d": 242, "\u0996\ua6b8": 242, "\u0997\u1f78\u2da0": [], "\u0999\u134c\u2d8e\uaa15\ufdc3\u03d1": [], "\u0999\u1d96": [], "\u0999\ua168": 242, "\u099a": [], "\u099a\u056c\u03fb\u1a24\ua735k\u0566": [], "\u099c": [], "\u099d": [], "\u099e": [], "\u099f\u0142\ufcbb\u2c76": 242, "\u099f\ua47a\u01bb": [], "\u09a1\u1547\u0f59": 242, "\u09a2\u1b1a\u179a\u1845\u19be\ua96f": [], "\u09a3\u1fa5": [], "\u09a4\u0177": 242, "\u09a4\ua09c": [], "\u09a5": [], "\u09a7": 242, "\u09aa\u2d36": [], "\u09aa\uab24\u0571\uff87": 242, "\u09ab\u025b\u1b9e\u2c45\u2d24\ua38e": 242, "\u09ac": [], "\u09ac\u0288": 242, "\u09af\u0ca6\u14f5": 242, "\u09b0\ufee6\u1183": [], "\u09b2": [], "\u09b6\ud7c3\u1191\u1001": [], "\u09b7": 242, "\u09b9\u01ef\u05f2\u161e\u2c56": 242, "\u09ce": [], "\u09dc": [], "\u09dd\ua8b1\ufea9\uff55": 242, "\u09e1": [], "\u09f0": 242, "\u09f1": [], "\u09f1\u12e7\u12bb": [], "\u0a05": [], "\u0a06\u18de\u1e8d\ufec4\ua2a8\u0373\uff4e": [], "\u0a06\u3047\u1675": 242, "\u0a07": 242, "\u0a0a": [], "\u0a0f": 242, "\u0a0f\ua05e\u1546\ua12c\u2c5c\u184e\ua6c4\u30ff\ud7ce\u0753": [], "\u0a0f\ufcba\u1576\u15a6": [], "\u0a14\ua1cd": [], "\u0a15\uff8a\u04d3": [], "\u0a16": [], "\u0a1b\u0d0b": [], "\u0a1b\u1751\u0774\u0809\u0c58\u1141\u18ba": [], "\u0a1c": 242, "\u0a1c\u0d13": [], "\u0a1d": [], "\u0a1e\u189e": [], "\u0a1f\ua54b": [], "\u0a20": 242, "\u0a21\u105b\uaa9f": [], "\u0a22": 242, "\u0a23": 242, "\u0a24\ua365\u31a1": 242, "\u0a25\u111a\u1fb3": 242, "\u0a26\u1241": [], "\u0a28\u03c3\ua584": 242, "\u0a2a\u1ee1": [], "\u0a2b": [], "\u0a2c": 242, "\u0a2c\u14b8\u1350\ufd67\u04eb\ua504\u1e8b\u1252\u15ac\u15d9\u1913\ua252\u1688": [], "\u0a2d\ua021\u1181\ufd58\u0c95\ufdfb": [], "\u0a2e\u1270\u1ec9": 242, "\u0a30": 242, "\u0a32": [], "\u0a35\u12a3\ua458": [], "\u0a35\u3082\ua3dc\ua47f\u0f45": [], "\u0a36": [], "\u0a38": [], "\u0a38\u0c58": 242, "\u0a59\u1b45\u1d3e": 242, "\u0a5a": [], "\u0a5b\u0b26\u0493\u0d7c": 242, "\u0a5b\u0bb5\u03e9\u05d9\u0125": [], "\u0a5c\u1a2b\u141c": [], "\u0a72\ua4dd\ua814": [], "\u0a73": [], "\u0a73\ua034\uab72": 242, "\u0a85\u1f54\u3145": 242, "\u0a87\u0b9a\u023c": 242, "\u0a88\u1555": [], "\u0a89\ufb68\u189f\u186a\u03e7\u103f\u03fc\u1f41\ua4e8\u19bc": [], "\u0a8a\u1d73": 242, "\u0a8b\u0971\ua468\u2c8d\ua54c\u1951\u0824": 242, "\u0a8c": [], "\u0a8d\u1989\u09a0": 242, "\u0a8d\u1bcf\u2da4\u01cc\u1402\ufca9\u185f": [], "\u0a8d\ufd7e\u0575": [], "\u0a8f\ua0fd": [], "\u0a91\u0c12\u1190\u0a19\u2d93\u1d45\ua9e2\u2ccd\ufb5c\ufcfa": [], "\u0a91\ua427": 242, "\u0a93": [], "\u0a94": [], "\u0a94\u0c3d\u1d74": 242, "\u0a95": [], "\u0a96\ud7ef\ua75d\ua2d4\u2da4": 242, "\u0a97": [], "\u0a97\u0b1d\u122e\ufbdb\u14e1\u2ca1\uff99\ua860\u147a": [], "\u0a97\ua96b": 242, "\u0a98": [], "\u0a99\u0d9a\u0d7a\u12c2\u1f05": [], "\u0a9b": 242, "\u0a9b\u0642\uaba4": [], "\u0a9c": [], "\u0a9d": 242, "\u0a9e": 242, "\u0a9f": 242, "\u0aa0": [], "\u0aa0\u0d7b\u1c70\ua1bb\u1e55": [], "\u0aa3\u11b3\u1519\u1e01\u0925\ua2ac\u0cab\ua0e6\u2128\u1cef": [], "\u0aa3\u15f1\u1842": [], "\u0aa3\u1d1c\u00e8": 242, "\u0aa4\u01a5\u0e2c\ua4fa\ua813\u2c44\u1553\ufc32": [], "\u0aa4\u306c": [], "\u0aa5": [], "\u0aa6": 242, "\u0aaa": [], "\u0aaa\ua91a": 242, "\u0aab": [], "\u0aad": [], "\u0aad\u1f45": 242, "\u0aae": [], "\u0aae\u0c15": [], "\u0aaf": 242, "\u0ab0\ua914": [], "\u0ab5\u1fe4": [], "\u0ab7": [], "\u0ab8\u17a8\ua340\u14fe\ua6d8\u0933": [], "\u0ab9\ua41e\ua07b\ua61b": [], "\u0abd": [], "\u0abd\ua8a0\uab01\u198f\u2071\u04c6\u157c\ua783\u1a0e\ua281\ua292\u048f\u0937\u16b9": 242, "\u0ad0": [], "\u0ae1": [], "\u0b06\u144c\ufda5": [], "\u0b06\ua069\ua43d\ua9e6\ua2fe": 242, "\u0b07\u1985\ua3d4\u19aa\u1334": [], "\u0b08": [], "\u0b08\u080e": 242, "\u0b08\u15be\u1ec3\u12ac\u03bf": [], "\u0b09\u1431\ua1e3": [], "\u0b0b\u1548": 242, "\u0b0f\u0632\u3075\u0a07\ufb24\u31b5\ua81b\ua20d\ud7b1": [], "\u0b0f\u12ba": 242, "\u0b10\u0c35\u0d10\uab82": 242, "\u0b13\u1980": [], "\u0b13\u2cb3": [], "\u0b15\u191a\ua36a": 242, "\u0b16\u1108\ua160": [], "\u0b18\u0915": [], "\u0b18\u11cc": [], "\u0b19": 242, "\u0b1b\u1652\u1d81\u020b\u182f\u3163\ua455\u01bd": [], "\u0b1c\ua1c3\u1dbd": [], "\u0b1d\uaa8a": 242, "\u0b1en\u0687\u0b8a\u0c87\u1162\u1221": 242, "\u0b1e\u2d00\ua1fd\ufcc1\u00ed\uff9b": [], "\u0b1f": [], "\u0b1f\u06aa": 242, "\u0b1f\u15ea\ua13f\ua370": [], "\u0b20\u2d23": 242, "\u0b21\u157e": [], "\u0b22\u0696\ua5a7": [], "\u0b22\u0926": 242, "\u0b23": [], "\u0b23\u1595\u114f": [], "\u0b24\u11fe\ufccf": [], "\u0b26\u304f\ufed5\u1277\u15a7\ua697\ufdb3\u312a\u1f14\u0f5e\u2caf\ufd36": [], "\u0b27": [], "\u0b2a\u17a1\u1648\u168a\u1b1e\ua411": [], "\u0b2a\ua72f\u1453\ua557": [], "\u0b2b": [], "\u0b2b\u130e\ua299\u110d\u2cab\ua651\u0ab3\uab2c": 242, "\u0b2c": [], "\u0b2d\u099e\u1697\ua310\u1d90\uaa12": 242, "\u0b2e\u099b\u1ecd\u1d57\u12ac\ua1e6\u0907\u016f\u10e1": [], "\u0b2e\ua363\ua4d0\u1786": [], "\u0b2f\ua197\ua57d\u1dad\u19b0": [], "\u0b30\u0e9c": [], "\u0b32": 242, "\u0b33\u107e": [], "\u0b35": [], "\u0b36\u2d85\uab5f": [], "\u0b37": [], "\u0b38\u0dac": [], "\u0b39": [], "\u0b5c\u1e98\ua915\ua5d5\u0515": 242, "\u0b5d": [], "\u0b5d\u1539": [], "\u0b5f": [], "\u0b5f\u1137": [], "\u0b60\u048d\u0729\u1e5f": 242, "\u0b61\ua655\ufd6a\u07da": [], "\u0b71\u158e": [], "\u0b83": [], "\u0b83\u1599": [], "\u0b85": [57, 106, 242], "\u0b86": [57, 106], "\u0b87": [57, 106], "\u0b88": [57, 106], "\u0b88\u1e7f": 242, "\u0b88\ufcdc\ua197": [], "\u0b89": [57, 106], "\u0b89\u074f": [], "\u0b89\u168b\u1d65": 242, "\u0b8e\ua0c9\ua241": [], "\u0b90": 242, "\u0b90\uffc2": [], "\u0b92\ufefa\u1c5e\u2c46\ua745": 242, "\u0b94": 242, "\u0b94\u1f50": [], "\u0b95\u2dc3": [], "\u0b95\ua0a0\u1723": 242, "\u0b99\u0219\u03fb\u3076\ua56f\ua04c\u16f5\ua517\u1a4e": 242, "\u0b9a\ua53e": [], "\u0b9c\u09e1": 242, "\u0b9c\u14f5": [], "\u0b9e": 242, "\u0b9f\u0da6\u1903": [], "\u0ba3\ua0e0": [], "\u0ba3\ua20c": [], "\u0ba4": 242, "\u0ba9": [], "\u0ba9\u2c95\ua845\ua1ec\ufe71": 242, "\u0baa\u0371\ufecc\u1d77\u1384": [], "\u0baa\u2dd3\u30d0\ua59a\ua311\uff97\u2d47\u1533": [], "\u0bae\ua32d": [], "\u0bae\ua432": [], "\u0bae\ua90e\u14a8\ua9fe\ufbff": 242, "\u0bb0": 242, "\u0bb1": 242, "\u0bb2": 242, "\u0bb3": [], "\u0bb4": 242, "\u0bb5\u14a2\u1ee3": 242, "\u0bb5\u165a\uaa88": [], "\u0bb7\ua56f": [], "\u0bb8\u1a50\u1a37\ua745\u01c0": [], "\u0bb9\ua606\uaa92\u1a54\ufb1d\u12cc": 242, "\u0bd0": 242, "\u0bd0\u1729\u1742\u2d14\u07d9\u1202": [], "\u0c05": 242, "\u0c06\ua315\u10fa\u1c79": [], "\u0c07": 242, "\u0c08\u16f4\u1872\ua243\ua5a5\u099d\ua6ab\ua008\u3151\u0648\u144d\ua3b9\ua977": 242, "\u0c09": [], "\u0c09\u0f5b\u0435": 242, "\u0c0a": [], "\u0c0b": [], "\u0c0b\u0e40\ua547\u1ec5\ud7f2\u30ce\ua017\u1968": [], "\u0c0c": [], "\u0c0e\ufc03\u314f\ua765\ua455\ua5de": 242, "\u0c0f": 242, "\u0c10\u03c5\ua45b\uabd3": [], "\u0c13\u3088\ua044\u0d37\uaa62\ufe91": 242, "\u0c16": [], "\u0c16\ua79f": [], "\u0c17\u156c": [], "\u0c18": [], "\u0c18\u0f46\u0209\u0469\ua0cf\ua0f9": 242, "\u0c1b": [], "\u0c1b\u1003": [], "\u0c1c": 242, "\u0c1d": [], "\u0c1e": [], "\u0c20": 242, "\u0c20\u2d54\ua91c\ua191\u0503\ua36b\ufe86\u03b2\u1c75\ua07d": [], "\u0c21": 242, "\u0c21\u1c6e\u3182\ufb65\u00f5": [], "\u0c22\ua3fc\ufd7e": 242, "\u0c23": [], "\u0c24": 242, "\u0c25\u1655\ufc68\ufdc4\u1500\ud7d2\u0563\ua9ab\ua79d": 242, "\u0c25\u1847\ua4f5\u045c": [], "\u0c26": 242, "\u0c27": 242, "\u0c28": [], "\u0c2a": [], "\u0c2c\ufcf9": [], "\u0c2e\ufc1a": [], "\u0c30\u2c49\ua460\u1414\ua002\u075c\u30eb": [], "\u0c30\u3150": [], "\u0c31": 242, "\u0c33\u0b9a\u1475\u2d41\uffd7\u0135\u2d23\u1fb4\u1227": [], "\u0c34\u3114": [], "\u0c34\ua9e7\u05d4": 242, "\u0c36": 242, "\u0c36\u2ca3\u0689": [], "\u0c37\ua3ac\ua9fb\u1a38\ua76f\u0155": [], "\u0c39\u0d8f\u1352": 242, "\u0c39\uaaa6": [], "\u0c59": 242, "\u0c59\uff58\u150a\ua313\ua300\u11f0\ufb13\ua5c8\u10e4\u02ac": [], "\u0c60": [], "\u0c60\u1681\ua041": [], "\u0c61": [], "\u0c61\ufec0": [], "\u0c85": 242, "\u0c86": [], "\u0c86\u0185": [], "\u0c87": [], "\u0c89\u07a1\ua316": 242, "\u0c8a\u14c2": 242, "\u0c8b\u16e8\u1836": [], "\u0c8e": [], "\u0c92\u1e05": 242, "\u0c93\u0b5c": [], "\u0c93\uaaaa\u0724\u1266": [], "\u0c94\u160d": [], "\u0c95\u026b": 242, "\u0c98": [], "\u0c98\u14c7\u1d6a\u12a4": 242, "\u0c99": [], "\u0c99\u03b9": [], "\u0c9b": [], "\u0c9c\u043e": [], "\u0c9f\u105b": 242, "\u0ca0\ua560\uff6a\u0a2a\ua5a9": [], "\u0ca0\uff54\ua179\u198b\ufe85\ua568\u014b\ua8a0": [], "\u0ca1\u0daf\u14e7": 242, "\u0ca1\ua33e": [], "\u0ca2": 242, "\u0ca3": 242, "\u0ca3\u1ed1\u0148": [], "\u0ca4\u0d1c": 242, "\u0ca5": [], "\u0ca6": [], "\u0ca8": 242, "\u0ca8\u11ba\ufd65\uffab\u0764\u1e79": [], "\u0caa\ufd51": [], "\u0cab": 242, "\u0cac": 242, "\u0cac\u0974\u3127": [], "\u0cae\ua84b\u0694\ua47e\uff69\u1709\u167e": 242, "\u0caf": [], "\u0cb0\u0e1e\u06ae\u1873": [], "\u0cb1\u077b\u050b\u2d17\u2c32": [], "\u0cb1\u0d07\ua20c\u10dc\ufc90\u2c85\u00fe\u1266\ua527\u01ef": [], "\u0cb3": 242, "\u0cb5\u1320\u02cd\u1053\ua3aa\u01e5\u04a7": [], "\u0cb7\u1120": [], "\u0cb8": [], "\u0cb8\u114f": 242, "\u0cb9\u1987\u11a2\ua5da\u0930\uab65\ua9ec": 242, "\u0ce0\u2c79\u166c\u196d": [], "\u0ce1\u1195\uab7a\uab3f\u077f\ua6a1\ufcad": [], "\u0ce1\u2c3e\ua9e0\u0213\u1579": 242, "\u0cf1": [], "\u0cf1\u037b": 242, "\u0d06": [], "\u0d08\u0c89": [], "\u0d0c\u1558": 242, "\u0d0f\u3148": 242, "\u0d12\u198b": [], "\u0d14\ua61f\u1078\u0207": 242, "\u0d15": 242, "\u0d16": [], "\u0d16\ua9fc\u19c0": 242, "\u0d17\u2c89\u045d\u210e": [], "\u0d19\u1348\ua042\ua993\u2c9b": [], "\u0d1a": [], "\u0d1b": [], "\u0d1d": 242, "\u0d20": [], "\u0d20\ufcbb\ua685\ua885": [], "\u0d25\ufbe5": 242, "\u0d26\ua2f9\u1e61": [], "\u0d28\uaa7f\ufb6a": 242, "\u0d2b": 242, "\u0d2b\u0435": [], "\u0d2e": 242, "\u0d2e\u1c05\ufd04\u1441\u0173\u1a47\u3188\ua550\u0c95": [], "\u0d2f": 242, "\u0d30\u114b": [], "\u0d30\u18dd": [], "\u0d32\u14a5": 242, "\u0d32\u14a7\u0988\u02a7\u1b8d": [], "\u0d34\ufd51": [], "\u0d36": [], "\u0d37\ua659\u1894": [], "\u0d38": [], "\u0d38\u0e2e\ua4de\u03c4": [], "\u0d38\ufcf4": 242, "\u0d39\u074d\u14d6\u1919": 242, "\u0d3a": 242, "\u0d3a\ua230\u114e": [], "\u0d3d": [], "\u0d60\u1792\u1e7f\u04af\u15c5": [], "\u0d7a": 242, "\u0d7a\u16bd": [], "\u0d7b": [], "\u0d7b\u0257\u1018\u18cf\u12c2\u2dce\u11ae\uabce\u1639": 242, "\u0d7d": [], "\u0d7d\u165c": [], "\u0d7e\ua916\u3169\u1c1d\ua335\u30d4\u1170\ua046": [], "\u0d7e\ua999": 242, "\u0d7f\u178f\u11da": [], "\u0d7f\uaa42\u1525\u0aaf": [], "\u0d86\ua861\u0c96\u0699": [], "\u0d87": 242, "\u0d87\u11c2\ua398": [], "\u0d88": [], "\u0d88\ua697\ua785\u142c\ua12d": [], "\u0d89": 242, "\u0d8a\ufe87\u2c78\u1549\u0373": 242, "\u0d8b\u0119\u07a0\u0913\u1f73": [], "\u0d8c": [], "\u0d8c\u0ae1\ua107\ua11b\ua90a\u1e25\ua55c\u2c36\u12ff\uffd2\u1782\u01ce\u1271\uaa0e\uab25\ufd55\u1d4e\u158b": [], "\u0d8d": [], "\u0d8d\ua3b9": [], "\u0d8e\u165f": [], "\u0d8e\u210f\ua755\ufcbd": 242, "\u0d8f": [], "\u0d90\u05d9\u0c16\u16ae\u1825\u1b06\u2d23": 242, "\u0d91": [], "\u0d92\ufcac": [], "\u0d94": [], "\u0d95": [], "\u0d96": 242, "\u0d96\u1e8d\ufb9c": [], "\u0d96\u30e1\ufc02\ua17b\u0296": [], "\u0d9b\ua3aa\u013a": [], "\u0d9c\u1967": [], "\u0d9d": [], "\u0d9d\u2c6c\ua6b5\u102a\uff4b\u03c4": 242, "\u0d9e\u10f8\ufea6": 242, "\u0d9f\u12ff": [], "\u0d9f\u1522\u1ebb\u0da9\uab98": 242, "\u0da0\u0268": [], "\u0da0\u118f\u1ed7\u184a": 242, "\u0da1\u0e2b\u11f9\ud7cc\u164a": [], "\u0da2\u134c\ufc3b\ua9a1": 242, "\u0da3": 242, "\u0da3\u12ef\u111b\u1123\u01d2": [], "\u0da5": [], "\u0da7\u16b5\u1e41": [], "\u0da8": [], "\u0da9\ua3ec\u1d1e": [], "\u0daa": [], "\u0dac\u1a16": 242, "\u0dad": [], "\u0dae\u1c73\u2d82": [], "\u0daf": [], "\u0db0\u01cc\u0442": [], "\u0db0\u2d24\uaaa2\u01b9": 242, "\u0db0\ua4d7": [], "\u0db3\u0c85": [], "\u0db3\ua89d": 242, "\u0db4\u11ab": [], "\u0db5": [], "\u0db6": [], "\u0db6\uab48\ua68f\u06c3\uff77": [], "\u0db7\u2dd3\u132d\u1708": 242, "\u0db8\u0c32\ua863\ud7cd": [], "\u0db9": [], "\u0dba": [], "\u0dba\u02a4\u0f5f": 242, "\u0dbd": [], "\u0dc1\u157e": 242, "\u0dc2": 242, "\u0dc2\u1512\u15ed\ua03a\u10e1": [], "\u0dc3\u12ce\ua42c\u097b": [], "\u0dc5": [], "\u0dc6": 242, "\u0e01\u10d9\u05e3": [], "\u0e02": 242, "\u0e02\uffbb\ua411": [], "\u0e05": [], "\u0e05\ufedf\u1593\u131e\u06b7\u075e\u1698\u1b2d": [], "\u0e06\ua5d7\ua683\u2ce4\u1e15\u063b\uabb8\u0247": 242, "\u0e06\ufe7f": [], "\u0e07\u1c6a": [], "\u0e09\u2d90\u043d\u0e43\ua067": [], "\u0e0a": 242, "\u0e0c": 242, "\u0e0d\u0d24\ua8ab\ufe81\u1188\u11f9\u155a": [], "\u0e0e": [], "\u0e0f": 242, "\u0e10\u12bc\uabb2": [], "\u0e11": [], "\u0e12": [], "\u0e12\ua71b\u0e94\ua80f\u2dden\ud7c6\u1d4b": [], "\u0e14\u2cad": 242, "\u0e15\ua52c\u1334\ufebe\u1f21": 242, "\u0e17\u1107\u2dd1": [], "\u0e18\u19bf": [], "\u0e19\uaadd": 242, "\u0e1b\u168e": [], "\u0e1c": [], "\u0e1c\u03cc": 242, "\u0e1c\u1335o\u1629\ua434": [], "\u0e1d": 242, "\u0e1e\u0565\ud7f0": 242, "\u0e1e\u1691": [], "\u0e1f": [], "\u0e1f\u3049": 242, "\u0e20\ua942\u1140\u0d9a\u1150": 242, "\u0e21": [], "\u0e21\u02b0\u2d23\ua9e6": [], "\u0e23": 242, "\u0e24": [], "\u0e26\u1489": [], "\u0e27": [], "\u0e2c\ufb43\ufb71\u09bd\ufd21\ufb61": [], "\u0e2f\ua13c": [], "\u0e32\u165e\ufc8b\u1572": [], "\u0e42\u1159": [], "\u0e42\u1ed7": [], "\u0e44\u123f": 242, "\u0e45\u2c8b": [], "\u0e46": [], "\u0e46\u126c\uabd0\u11d9\u0e8d\u2097": [], "\u0e81": 242, "\u0e84": [], "\u0e8a": [], "\u0e8d": 242, "\u0e8d\ufeef\u115c": [], "\u0e95\ua3f3\ua5b3": 242, "\u0e96\u0978\u172e\u10d8\u1669": [], "\u0e96\u19c6\u3117\u11b5\u13fa": 242, "\u0e97": 242, "\u0e99": [], "\u0e9a\u15c9\ua76b\u14da\ua423": [], "\u0e9b\u1687\ua527\ua135\ua1ed": 242, "\u0e9b\ua93a": [], "\u0e9e": [], "\u0e9f\u016d": [], "\u0e9f\u1527\u1f91": [], "\u0ea1\u0b16\u14d8": [], "\u0ea2\u310d": 242, "\u0ea3": [], "\u0ea5\u158f\u013a": 242, "\u0ea5\ua0c0\u07a2\u043b": [], "\u0ea7\u0c1f\ua2b2\u1d3b\u0443\u3175": [], "\u0eaa": [], "\u0eaa\u3051\u2d86\u00df": [], "\u0eab": [], "\u0eab\uab83\ua8fb\u1005\u1667\u07e4\uab36\ua6db\u1d0c\ua393\u188a\u1229": 242, "\u0ead\u0430\u1127\u043e\u090a\u1e83": [], "\u0eae": [], "\u0eaf": [], "\u0eaf\ufdbe\u2c79\u1e35\ufb13\ufeb5\u028f\u0e10\u0155\u14e1\u0843": 242, "\u0eb0\u11fc": [], "\u0eb2": [], "\u0eb2\u0990\u2133\u1b97": 242, "\u0eb2\u0b20": [], "\u0eb3": 242, "\u0ec1": 242, "\u0ec1\ua159\ua233": [], "\u0ec2\u1eb9\u1972": [], "\u0ec3\u0157\ufc3c\u1188\ua7fc\u2184\ua36c\u30ec": [], "\u0ec3\u2092": [], "\u0edc\u169a\u0a85": [], "\u0edd\u2c66": [], "\u0edd\ua6ae": [], "\u0ede": [], "\u0edf": [], "\u0f00": 242, "\u0f00\u1798\u1ef1\ufbe1\u1a0b\u14c4\u07d0\u0bb2": [], "\u0f44": [], "\u0f46": [], "\u0f47": [], "\u0f47\u14b4\u0b33\u1891": [], "\u0f4a": [], "\u0f4a\ua58c\ufbed": 242, "\u0f4a\ufb8b\u3183\u03d9": [], "\u0f4c\u2146\u1ff3": [], "\u0f4d": [], "\u0f4e\uabb6\u1be1": [], "\u0f4f": [], "\u0f4f\u11b9\ua2e4\u048f\u0edc": 242, "\u0f50": [], "\u0f51\u2c4a\u1693\ua72b": [], "\u0f53": [], "\u0f54\u1c7c\uffb6\u2d06": [], "\u0f56\u1a48\u1200": [], "\u0f57\u1ef5": 242, "\u0f59": [], "\u0f5c": [], "\u0f5c\ufe7d\u07a1\u1487": [], "\u0f5dk\ufd14\u2d05\ua1f2\ufc12\u1e9c\uffd4\ua3e9\u1511": 242, "\u0f5e": [], "\u0f5e\u1a2c\ua3d7\u167d": 242, "\u0f5f\ua227\ua20a": [], "\u0f60\u31b6": [], "\u0f61\uab4e\u01d6": [], "\u0f62\u1411\uff6a": [], "\u0f62\u2cc7\u0452\ufebd": [], "\u0f63": [], "\u0f63\u11f6\u1b96\u131f": [], "\u0f64": 242, "\u0f67\u1765": [], "\u0f67\u1dbd": 242, "\u0f69\ua1e5\ua4d6\u0292": 242, "\u0f6a": [], "\u0f6a\ufce3": 242, "\u0f6b": [], "\u0f6b\ufbe1": 242, "\u0f6c\u021f\ua369\u2c95": [], "\u0f6c\ua01a\u1408\u179d": [], "\u0f88\u1837\ua985\u01d0\u3065\u057b": [], "\u0f88\ufd71\u00e7": [], "\u0f89\u0f4f": [], "\u0f89\u2dc9\ufe8b\ua743\uff44\u018d\u2146\u3184": 242, "\u0f8b": 242, "\u1000\u07d8\u1240": [], "\u1001\u1d1a\u30e7\u0225": [], "\u1003\u1fb3\ua37e\u1827\uaa68\ufc65": 242, "\u1003\u31b7\u048f": [], "\u1005\u1018\u210f\u310f": [], "\u1006": 242, "\u1007": [], "\u1007\u0227\u0e26\u3060\u14ec\u03fb\u1f91\ua614\u30f7\uabc0\ufb23\u1133\u1795\u2db3\u07d5\u1578\u15ab": [], "\u1009": [], "\u1009\u07d5\u1654\u1164\u10d8\u1163": [], "\u1009\u1bc5\u1527": 242, "\u100a": [], "\u100c": 242, "\u100c\u06b1\ua91e": [], "\u100d\u15ce\u2c41\u1877\ua886\u1ec7": [], "\u100e\u03d9\u1306\u154d\u1d4b": 242, "\u100f\u2cb5": [], "\u1011": [], "\u1012": 242, "\u1012\ua52d\ua962\ufb7c": [], "\u1013": [], "\u1015": 242, "\u1016\ufc92\u1256": 242, "\u1017\u0da7\uab37": 242, "\u1019": [], "\u1019\u0db4\u1532": 242, "\u101b\u3186\u19bd\ua2fc\ufd3a": [], "\u101f\u0291": [], "\u101f\ua314\u099a": 242, "\u1022\u0f42\u0727": [], "\u1024": [], "\u1025\u0c37\u07a4\u143c": [], "\u1025\u1e33\u1e4d\u2c4d\ua476": 242, "\u1025\u1e73\u2da2\ufd6b\u07e1\ua6b7\ua810": [], "\u1026\u012f": [], "\u1027": 242, "\u1028": [], "\u1028\u11fa": 242, "\u1051\u1871": [], "\u1052\ua604\u19c4\u0519\u1546": [], "\u1053\u10fc\u184d\ua178": [], "\u1054": [], "\u1054\u2d62\u0774": 242, "\u1055": 242, "\u105a": 242, "\u105c": 242, "\u105d": [], "\u1066": 242, "\u106e": [], "\u106e\u313c\ua747\ua03d\u1a38": 242, "\u1070": [], "\u1075\ua133\u116a\u0795\u0457\u0561\u0f8a\u16ac": [], "\u1077\u0479\u1b0c\u1e09\u14c2\u314f\u2d1f\u0855\u15b6": [], "\u1078\ua5f3\ua17f\ua5ee\ud7ea\ua080\u03ba\u1832": [], "\u1078\ufd39": [], "\u107b": [], "\u107d": 242, "\u107d\u2cd1\ua258": [], "\u107e": 242, "\u107e\u2cd7": [], "\u107f": [], "\u107f\u119f": 242, "\u107f\u12f7\u15d0\u1297": [], "\u1080\u2c8f": [], "\u108e\u1fd1\ud7b6\u0649": [], "\u10d0": 242, "\u10d1\u02b6": [], "\u10d1\u30c4\u0444\u051b\u1ea3\ua07b\ufdad\ua16c": 242, "\u10d2": [], "\u10d3\u1d10\u03b9": [], "\u10d3\ua90f\u2d88\ua105\u07a0\uabaa\ufd68\u2cc5": 242, "\u10d5\u0794\u06c5\ufcc9": 242, "\u10d6\u307f": 242, "\u10d9": 242, "\u10da": 242, "\u10da\u2cf3": [], "\u10db": 242, "\u10db\u03cc": [], "\u10db\ua687\u12bb\ua97c": [], "\u10dc\ufb2e\ua2bf\u138a\u1724\u30c1\ua2cd\ud7c1\ua9ad\ufcfa\u06c0\uab96": [], "\u10dd": 242, "\u10dd\u018c\u121f": [], "\u10dd\u114a\u0180\u020f\u315e\ua42a": [], "\u10de": [], "\u10df\u056f\u1d90": [], "\u10e0": 242, "\u10e1\ua925\ufc7c\u1ff2\ua1b3": 242, "\u10e2\u112b": 242, "\u10e2\u142f\ua6db": [], "\u10e3": [], "\u10e4": [], "\u10e5\ua03e\ufcb7": [], "\u10e5\ua389\ua613\ufcde\ua6cd": [], "\u10e6\u113e\u1edd": 242, "\u10e7\u14f0\uabd3\u1858": 242, "\u10e9": 242, "\u10ea": 242, "\u10eb\u1205\u0649\ua2d3": [], "\u10ec\ua052": [], "\u10ee": 242, "\u10ef\u3083\ufc2f": [], "\u10ef\ua41b": [], "\u10f1\u1822": [], "\u10f2": [], "\u10f3": 242, "\u10f7\u1bce\ufb39\ua3d5": [], "\u10f9": 242, "\u10fc": 242, "\u10fc\u1f31\uabdb": [], "\u10fd": [], "\u10fd\u12e7\u1d7d": 242, "\u1100": 242, "\u1101\u014d": 242, "\u1102": [], "\u1105": [], "\u1105\u14e8\ufd95": 242, "\u1106\u188a\ua44e\u1c02": [], "\u1106\ua645\u0e8a\u1120": 242, "\u1108\u19ba\ua410\u0a19\u1313\ufb8a": 242, "\u1108\u31ad\ua15f\u1336\u1da6\ua76d\u1214\u2d09\u1da1": [], "\u1109": [], "\u110c\u16e9\u1c68": [], "\u110c\ufee4": [], "\u110e\u0635\u12f4": [], "\u110e\u12be": 242, "\u1111\u3182\ua1b5\ua32a": [], "\u1112": 242, "\u1112\u18f0\ua16e\ua641\u0d33": [], "\u1113": 242, "\u1116": 242, "\u1117\u11cb\ua5f8\u0b25\ua2fa\u0e06": [], "\u1117\u2d1c": [], "\u1118\ua0ef\u0f5d\u0db3\u30e4": [], "\u111a\ua5a2\u0d36": [], "\u111b\u152a": 242, "\u111c": [], "\u111c\u170c\ua0b3\u0780\ufc25\ua81d\ua8a7": 242, "\u111d\u0481\ua144": 242, "\u111d\u078f\u1a2c": [], "\u111e": [], "\u111f\u310b": [], "\u1121": [], "\u1122\u1f80\ua123\ua986\u1409\u18ec\ua5e6\ua7a1": [], "\u1123\u19a4\u14cc": 242, "\u1123\uabaa\u1633": [], "\u1124\ua56e\u0a26": [], "\u1125": 242, "\u1126\u0225\u0ec0\ua33c\u100a\u15fc\u31b2\u043d": 242, "\u1126\u2d5d\u2ca3\u303c": [], "\u1129": [], "\u1129\ufc3a\u317c": 242, "\u112c": [], "\u112e": [], "\u112f\u12d0": 242, "\u112f\u3151\ua0b0\u06d2": [], "\u1130\u147e\u06a0": 242, "\u1131": 242, "\u1132": 242, "\u1135": 242, "\u1135\u154f\u0213\u1b21": [], "\u1136": 242, "\u1136\u1e1d\u1e91": [], "\u1137\u144a": [], "\u1138": [], "\u1138\ua5b6": [], "\u1139\ua1f2": [], "\u113a": [], "\u113a\u0c8a\u1825\u0f5a\u1730": [], "\u113b\ufd8c\u1264\u03b8\u1b0b\ua50d\u162c\uff8b\u090e": [], "\u113b\ufdb5\u189b\u043b\u18db": 242, "\u113c": 242, "\u113c\ua1dc\u1916\ua55b\u1612\u0c19\u1258\u1d99\u1ff3\u18f4p": [], "\u113c\ua237\u0e08": [], "\u113e\u0c08\u2d63\ua165\ua379": [], "\u113f\ua0d4\u2d00\u0855\u125b\u1c77": 242, "\u1142\uff4f\u14eb\u195d": [], "\u1143": [], "\u1143\u08a8\u190b\u1ec3": 242, "\u1144\ua11e\ua737\u1a29\ufb9b": 242, "\u1145\uffc2": [], "\u1146": [], "\u1146\ua79b": [], "\u1148": [], "\u1148\u18b0\u15d5": [], "\u1148\ufe9d\u025c\u1079": 242, "\u1149": 242, "\u114a\u1d1e": 242, "\u114e": [], "\u114f": [], "\u1150": [], "\u1150\u0140\u11ca\uff4f\u07d1": [], "\u1151\u1747\u17a3": 242, "\u1152\ua51d\u04ad": [], "\u1153": [], "\u1153\u0257\u0437\u0b9e": [], "\u1153\u11b8\u18d1": 242, "\u1154": 242, "\u1155\u163e": [], "\u1156": [], "\u1158": 242, "\u115e": [], "\u115e\ufbef": 242, "\u1160\u0286": [], "\u1160\u1f52b\ua390": 242, "\u1161": [], "\u1162\u1dae": [], "\u1164\u0f65": [], "\u1165\u1c1b\u080f": [], "\u1166": [], "\u1167": [], "\u1167\u068b\u1d86": [], "\u1167\u14b2": 242, "\u1169\u121a": 242, "\u116b": [], "\u116b\u2134\ua1d9\ufca9": 242, "\u116d": 242, "\u116d\u04e1": [], "\u116d\u3150\u0804": [], "\u116e\ua4d6": [], "\u116e\ufc45\u0aa2\u1e4d\ua0a7\ufeb2": [], "\u1170\uaa14\u1051": [], "\u1171\ua013": [], "\u1172\ufc66\u04db\u17a2\ua359\ua64d\ufbdf": 242, "\u1173\u1eff": [], "\u1174": [], "\u1175\u10f5\u1f55": [], "\u1175\u2dbb\u00f6\u07d3\u1849\ua781\ufea1": 242, "\u1176": [], "\u1177": [], "\u1178\u16aa\ua481\u0642\uff44\u1eb5\u07e5": 242, "\u1179": 242, "\u1179\u017a\ua3e4\u0a22\u01ff": [], "\u117a\ua870\ufcd1\u1386": 242, "\u117b": [], "\u117c\ufd56\u1ed7": 242, "\u1180": [], "\u1181": [], "\u1182\u09a2\u1c00": [], "\u1184": [], "\u1185\u1340\u166a\uaa06\ufc1a\u16c5\u0717\u10d4\u1382\u1745": [], "\u1187": [], "\u1187\u1959\u143f\u142b\u1176": 242, "\u1189\ua66d\ua5c2\u152b\u0768\u051b\u116a\u1b8f\u2d4c\u1bd1\u0270\u128c\u17b2": [], "\u118a": [], "\u118a\ua298": 242, "\u118b": 242, "\u118c": [], "\u118e\u03ae\u1d5b": [], "\u118f": [], "\u118f\u024f": [], "\u1191\ua3e7\u0440": 242, "\u1193\u114d\u14f6\ufd84\u0abd": [], "\u1196": [], "\u1196\u15d5": [], "\u1196\ufcc5\u077c": 242, "\u1199": [], "\u119b": 242, "\u119c\ufc0a\u1bdc": [], "\u119d\u130c": [], "\u119d\ua431": 242, "\u119f": [], "\u11a0\u06b4\u0f56": [], "\u11a1": [], "\u11a2\ua207": [], "\u11a4": [], "\u11a5": [], "\u11a5\u189a\ufb39\u2c32\u10d7": 242, "\u11a7": [], "\u11a8": [], "\u11a8\u0475\u2cb3\u03c8": [], "\u11a8\u1992\u0e27": 242, "\u11aa": 242, "\u11aa\u1ecf\ufb04\ua06a\ua5ec\u159b\u16e3\u1c69\ua730": [], "\u11aa\u1f45": [], "\u11ab": [], "\u11ab\u3185\u1ecd": 242, "\u11ac": [], "\u11ac\u186e\u09bd\uffa6\uffb7": 242, "\u11af\u1314\ua11e\u160e\ua53d\u2ca9\ufc92\u154b\u0561": [], "\u11af\ua813\u1228\ufef2": 242, "\u11b1\u18d9\ufbe7\ua096\ufbde\u198a\u2095\u0219\u1643": [], "\u11b2\u0199": 242, "\u11b4": [], "\u11b5\u122a\ufb80": [], "\u11b6\u15bb\ua3e4": [], "\u11b7k\u2d5b": [], "\u11b8\u1621\u0167\u1967\uff48\u12e1": [], "\u11ba\u198e\u0129\u3111\ufd2d\u3006\u04d1\u0c33": [], "\u11bb\u2cad\ua54c\ud7f6\u1b4a\ufb8b\u3045\ua11f\uff42\u0270": [], "\u11bc\u0d95\u1d2c\ua5c1\ua934": [], "\u11bc\u304a\ufb8d\ua200": 242, "\u11bd": [], "\u11bd\u1637": 242, "\u11be\ua151": 242, "\u11bf\u11e8\ua093\u121e\u1242": [], "\u11bf\u1d43\ufeb0\u144c": [], "\u11c0\u115b": 242, "\u11c3": 242, "\u11c4": [], "\u11c5z\ufcde\u1154": [], "\u11c6": [], "\u11c7": 242, "\u11cc\u1ea1": 242, "\u11cd": [], "\u11cd\u1293\u1530\u18b1\u0dc3\u18ec\u2cee\u30a2": 242, "\u11ce\u1d77\ua577\ua84c\ua912": 242, "\u11cf\u0163\u0205": 242, "\u11cf\ud7d2": [], "\u11d0\u1e75\u0430\u0a9c\ua923\u16d1": 242, "\u11d0\ua1aa\ua888": [], "\u11d1\u0570\ua922": [], "\u11d1\u1332\ufd8a\u14dd\ua3f2\u0473": 242, "\u11d1\u210b\ua35b": [], "\u11d2": [], "\u11d2\u161b\ua094": 242, "\u11d3": [], "\u11d3\u1f37": 242, "\u11d5\u1553\u1e59": [], "\u11d6": [], "\u11d7": 242, "\u11d8\u05e5\u1c06\ua063": [], "\u11d9\u018c\ua2d0\u02bb\ua017\u147c": 242, "\u11da\ua0bf\u1a51\u1626": [], "\u11dc\u15e0": [], "\u11de\ua502": [], "\u11de\ufedd\ufeb3\ufb2f\ufea3\u0dc3\u1d7d": [], "\u11df": [], "\u11e0\u12af": [], "\u11e3": [], "\u11e3\u0505": [], "\u11e4\u16d9\u1da0\u0d20\uaaa7\u1516": 242, "\u11e5\u1e73": [], "\u11e6": 242, "\u11e8\uffb8": 242, "\u11ea\u1793": [], "\u11eb\uab97\u2c4c\u1567": [], "\u11ec": [], "\u11ec\u129c\u1e1d\u11eb\u0263\u052f\u0a17\u15a1": 242, "\u11f1": [], "\u11f2": [], "\u11f3\u1e45\u097a\u1d00\ua19b": [], "\u11f4\u189b\u2db5\ua286\ua62a\u0a21": [], "\u11f5\u03d9\u0c92": [], "\u11f5\u2cdb\u1431": 242, "\u11f7\ua089": [], "\u11fb\u016d": 242, "\u11fb\u04b1": [], "\u11fc": 242, "\u11fd\u2c46\u0571\u1513\u2d4c\u0c9c\u1d77d\u3084": [], "\u11fe\ufc77\u1430": [], "\u11ff\ua0cb": [], "\u1202\u1510": [], "\u1203\ua5b4": 242, "\u1204\u0272\u01f3\u016f": [], "\u1205": [], "\u1207": [], "\u1208": [], "\u1208\ufd5f\u076e\u00e1": 242, "\u120a\u0760\u0804": [], "\u120b\u1f7d\ua1d6": [], "\u120d\u01ad": 242, "\u120d\u02c8\u214e": [], "\u120f\u100c": [], "\u1210": 242, "\u1211\u2d91\u0dab": [], "\u1212\u0505": 242, "\u1215": [], "\u1216": 242, "\u1216\ufb1d": [], "\u1218\u01ef": [], "\u1219": 242, "\u121a": [], "\u121b\ua1d7\u0e22": [], "\u121c\u01f5": [], "\u1221": [], "\u1221\ua739": [], "\u1222": [], "\u1223\ua05f\u0572": 242, "\u1226": 242, "\u1227\u1e39\ua533\u2cd1\ua477\u045f\u1f71": 242, "\u1229": [], "\u1229\u1215\ua661\u0678\u03ac": [], "\u122a": [], "\u122b\ufc6e\u0db7\ua4f6\u1662": [], "\u122c": [], "\u122c\u028e\u3079": [], "\u122c\u1eb1\u1a3b": 242, "\u122e": [], "\u122e\u0a1a\u01ff": 242, "\u122f\u03c2\u1625\ufb06\u1e9f\ua749": [], "\u122f\u1329": [], "\u1230": [], "\u1231\u12de\u1419\u184d": [], "\u1233": [], "\u1234\u0b5f": 242, "\u1234\u1288\ua595": [], "\u1235": [], "\u1238": [], "\u123a\u1da0": [], "\u123a\u2d60\u0b61\u3177\u1bd4\u2c5d": 242, "\u123c": [], "\u123c\u1432\u04b9\u1388\ua9a0\u3106\u212f": 242, "\u123d\u146a": 242, "\u123e": [], "\u123e\u1e83\uabd4": [], "\u1240": 242, "\u1241\u08ae": 242, "\u1244\u013c\uff47\u167d": [], "\u1244\ua6ce\u18c9": [], "\u1245": [], "\u1246\ua40d": [], "\u1247\u2c5e\ud7df\ua429\u3126\u07f4\u1577\uab2d": [], "\u1247\ua318\ua791\u0432\u1e5f\u2d5c": 242, "\u1248\u1542": [], "\u1248\u1e25": [], "\u1248\u3077": 242, "\u124a": 242, "\u124c": [], "\u124d\u1861\u095b\u2db6": 242, "\u1250": [], "\u1253": [], "\u1254\ua759\u0444": [], "\u1256": [], "\u1258\u0227\u2091": [], "\u125a": 242, "\u125b\u199b\ua869\u12cd": [], "\u125c": [], "\u1260": 242, "\u1260\u2cdd\u0113": [], "\u1261": 242, "\u1261\u1848": [], "\u1262\u0849": [], "\u1263\u0800\u162b": 242, "\u1263\u16f6": [], "\u1264": [], "\u1265\u195c\u1c5b\ua0ff\ua6d1": 242, "\u1265\ua3fe": [], "\u1267": [], "\u1269": [], "\u1269\ua318\ua5d2": [], "\u126a": [], "\u126c\u1474": [], "\u126d\u1f36": 242, "\u126e\u1a45\u18d4": [], "\u126e\ua0f4\u1576": 242, "\u126f\u046d\ua749\ufb32": [], "\u1270\u210c": [], "\u1272\u19b6\ua594\ua88b": [], "\u1272\ua1e4\ud7e4\uab85\ua243\u1866": [], "\u1273\ua98e\ufeab\u0293\u1e79": 242, "\u1274": [], "\u1274\u01bd": 242, "\u1275": 242, "\u1276\u15a4\u1851": [], "\u1277": 242, "\u1278\u04ab": 242, "\u1279\ufb6b": [], "\u127a\u3156\ufe83": 242, "\u127c": 242, "\u127c\u2c4d": [], "\u127d\u0a5c\u03b2\u2c3f\uaa19\uff6f": [], "\u127e\ua2c5\ua168\u1eab\ua03c": [], "\u127f": [], "\u127f\u03e7": 242, "\u1280\u05f2\ua567\ufba9": [], "\u1281": 242, "\u1281\u12a9\ua693\u1626": [], "\u1282": 242, "\u1282\ufed9\u1db6\u3117\u1b09\ua1ed\ua987\u09ac": [], "\u1283\u1561": 242, "\u1284\u0575\u1230\u0973\ua73f\u15af": 242, "\u1284\u2d21": [], "\u1285\uabb5\u06ff\u063d": [], "\u1287\u1ec7\u06a1\u1612": 242, "\u1288": 242, "\u128a": [], "\u128b": [], "\u128b\u1462\u16aa\u1d5d\uff43\ua539\u2c8b\u07d7": [], "\u128c": 242, "\u1290": 242, "\u1292\u1ff6": [], "\u1292\ua0b8\u084b\u1156": 242, "\u1293\u0272\u012d\u0165\u0e84\u1900\ufd17": [], "\u1294\u3091\u01d6\u10f7": 242, "\u1294\ua4de\ufc22": [], "\u1296": [], "\u1296\u16e3": 242, "\u1297": 242, "\u1297\uab4f\ua483\ua793\u075c\u077a\u2c34": [], "\u129a": 242, "\u129a\u028e\u0448": [], "\u129a\u2cb5\u18e9\u0192\ua24a\ua8f4": [], "\u129b": [], "\u129e": [], "\u129e\u1d4f": [], "\u129f\u12e0\ua244\ua1f5": [], "\u129f\u15f4\ua0f6\u12c0\u1f62\u14f8": [], "\u12a0\ua1f4": [], "\u12a1\u1992\u05e1": [], "\u12a2\u1707": [], "\u12a2\ua31f\ua0a1\ua591": 242, "\u12a5\u189a\u0aa8\ua765\ufdaf\u3180\ua47c\ua687\u18a6\ufdf0\u0673": [], "\u12a7\u1ef5": [], "\u12aa": [], "\u12ab\uff91\u098c\u0c2d": [], "\u12ad": 242, "\u12b0": 242, "\u12b0\u1e5b\u1be5\ufd9f\u1418\u0921": [], "\u12b2": 242, "\u12b3\u00fb": [], "\u12b4": 242, "\u12b5\u1600\ufcec\u1a40": 242, "\u12b5\ua1c4\ua2aa\uabb2": [], "\u12b8\u0721": [], "\u12ba\u0712\u099e\u10f9\u3112": [], "\u12bb": 242, "\u12bc\u30d7\u1762\uff49\u03eb\ua374\u1861\u1ea5": [], "\u12bd\uab70\uff56": [], "\u12be": [], "\u12c0": 242, "\u12c3": [], "\u12c3\ua196\u3110": [], "\u12c4": [], "\u12c9\u1eb5": [], "\u12ca\u0454\u04ca\u0c10\ufe94\ufb02\ua6ce": 242, "\u12ca\u15c0\ua04f": [], "\u12cb": [], "\u12cf\u12fa\u124b\u1305": [], "\u12cf\u1f36\ua102\ua3ed": 242, "\u12d0\ua466\ua37b": [], "\u12d0\ua90e\u0bb6\u133c\ua858\ua941\ua1d3\u141d": [], "\u12d1\ua00d\u1d19": 242, "\u12d2s\u30a8\ufca4\ufeb2\u11c3\ufb81\u010b\u318d_": [], "\u12d3": [], "\u12d4": 242, "\u12d4\uabcd": [], "\u12d5\u317f": 242, "\u12d6\u0697\u10d6\ua185\u012b": [], "\u12d6\u1543\u1e11": 242, "\u12d8\u01b6\u11d6": [], "\u12d9": [], "\u12db\u0622\u166b\u2d27\u08a7\u1081\ufec2\u153f": [], "\u12dc": 242, "\u12dd\u0917": [], "\u12dd\ua47f": 242, "\u12dd\ufc62\u0249\ua809": [], "\u12df\u1604\u024d\u1f65": [], "\u12e0\ua4eb\ufcce\u0765\u010d\u0e81": [], "\u12e1\ua339\u0720\u0d2c\u03c6\u0d61\u188d": 242, "\u12e2\u132e": [], "\u12e4": [], "\u12e4\u2c57\u0d26\u18b9\u091b\u04c2": 242, "\u12e5\ua3c9\ufcd1\u107a": [], "\u12e6": 242, "\u12e6\u1b0e": [], "\u12e6\u1c63\u06b0\u084a": [], "\u12e8": 242, "\u12e9": [], "\u12e9\ufb4d\u04ef": [], "\u12ea": 242, "\u12eb\u1c76\u1fe3": [], "\u12ec\u2d46\ufce7\u3089\u1799\u1a11": [], "\u12ed": 242, "\u12ed\u2c3b\ua2a2": [], "\u12ef": [], "\u12ef\u1638\u1224\u199c\u1e7f\u0dab\ufc1b\u100f\u1ee5\u0b18": 242, "\u12f0": [], "\u12f1\u1e23\u2098\ua288\u1fa4": 242, "\u12f2": [], "\u12f2\ua235\ua453\u00ef\u016b\u12eb": 242, "\u12f3\u0781\u0473\u0d37\ua42d": [], "\u12f3\u16c7\u0d31\u1bd0\ua0c3": 242, "\u12f4": 242, "\u12f4\u02c0\ua330\uab7c\ua856\uaaa0\u0259": [], "\u12f5": [], "\u12f7": 242, "\u12f8\u12fe": 242, "\u12f9\u1232\ua062\u16de": 242, "\u12f9\ua2d7\u1111": [], "\u12fb": [], "\u12fc": [], "\u1300": [], "\u1300\u0259\u0a9a\ua335": 242, "\u1300\uab89\u174b\u1ebb\u09df\u1119\u30dd\ua2a1\u1a06\u01bf": [], "\u1301\ua727\ua946\uffa5\u1751\u025a": 242, "\u1302": [], "\u1303\u2da8": [], "\u1303\u3141\u09b7": [], "\u1305": 242, "\u1307\u01dd\ua785": 242, "\u1308": [], "\u1308\u2caf\ufcab\u2d6f\u12df\u1355": 242, "\u1309\u09f0\ua126\ua09d": [], "\u1309\u1204": [], "\u130c": [], "\u130d": [], "\u130d\u1333": [], "\u130e\ud7c4": [], "\u130f": 242, "\u130f\ua4d1\u00e9": [], "\u1310\ua40f\u0da8\u1645\ufbe3\u1e87\u15c1": 242, "\u1312\u15a7\ua5a2\ufe81\ua40a": 242, "\u1313\u0c1a\u06b5": [], "\u1315": [], "\u1315\u1681\u1a3f\u0ec3\u145e\u1f73": 242, "\u1319\ua54a\u3006\ua5d4\ua40b\uab2c": [], "\u1319\uabc1\ufe88": 242, "\u131a\u2d53": 242, "\u131c\ua33f\u0288\ufda5": [], "\u131e\u1588\ua064": 242, "\u131e\u1c5f": [], "\u131f": 242, "\u1320\u1d7a\u0b0b": [], "\u1321\u15a6": [], "\u1321\u18f2": [], "\u1322\u150b": [], "\u1322\ua861\ua78c": 242, "\u1323\u1845\u11a1": 242, "\u1323\u30b8": [], "\u1324": 242, "\u1325": [], "\u1326": 242, "\u1327": [], "\u1327\ua271\ua593": 242, "\u1328": [], "\u1328\ua562\u183e\u07e6": 242, "\u1329": [], "\u1329\ua5ed\u0296\ua338\ua767\ua04d\ufb76\ufc37\ufd9e\u148d\u16a5\u0125\u1225\u2c44\u1e03": 242, "\u132b\u0a9f\ua72f\u1228\u026f\u2c48\u2c33": [], "\u132c\u1570\u06aa\u0d2d": [], "\u132d\u1571": [], "\u132d\u15b2\u30e2\u09ae": [], "\u132e\u2d43\ufd75\u31fa\ua0ea\ua52b\u0563\u11db": 242, "\u1330\u1911": [], "\u1331": [], "\u1331\u31f8\uff49": 242, "\u1334\u174e\ua5e4\u2dad": [], "\u1336\u0569": 242, "\u1339\ua6df\u01ed\ua0a6": [], "\u133a": 242, "\u133b\ufd26\ufda3": 242, "\u133c\ua504\ua99d": 242, "\u133d\u0234\ua697\u1cf6\u0683\ua975": [], "\u133e\u18bf": 242, "\u133e\u3094\u0583": [], "\u133f": [], "\u133f\u1c20\u1957\ufebf\u1f55": 242, "\u1340": [], "\u1342": [], "\u1342\ufef0": 242, "\u1343\u1b2f\u100d": 242, "\u1344\u2d39\u0a1a\u2d41": [], "\u1345\ua98f\uab49": [], "\u1347\ua1d4": [], "\u1348": 242, "\u1348\uaa01": [], "\u1349": [], "\u1349\u1563": [], "\u134a": 242, "\u134b\ua1d3\u2dd2": [], "\u134c\u00f0": [], "\u134e\ua2a2": 242, "\u134f": 242, "\u1350\u08a5": 242, "\u1353\u15ad": [], "\u1354\u1d56\u30dc\u07e0": [], "\u1355\ua26c\u2d1c\u044d\ua974": [], "\u1356\u1169\ua3a5\u130a\u1864": [], "\u1357": 242, "\u1357\u021f\u0b86\u3189\ua5ea\u101d\u1194": [], "\u1357\uff5a": [], "\u1359": [], "\u1359\u0e19\u05d6": [], "\u1380\u2cb1\u1456\u146d": [], "\u1383\ua747\ufd88": [], "\u1384\u1874": [], "\u1384\ufed1\u1f34\u2db2": 242, "\u1385\u0a98\ufeb8": 242, "\u1385\ua984": [], "\u1385\ufbda": [], "\u1387\ufb67\ufd2c\u048d\ufcb1": [], "\u1388\u0721\u1be4\ua6a7\u309f": [], "\u1389": 242, "\u138a": 242, "\u138c\u025c\u027b": [], "\u138c\u09ab\u14d4\u16b1": [], "\u138c\u1e69": 242, "\u138d": 242, "\u138e\u01f3\u213c\u2c50": [], "\u138f\ufb5a\u2c3a\ua2f4\ua37a\u0f41": 242, "\u13f9\u3068\ufec0\u15ba": [], "\u13f9\ufdb1\ua038": 242, "\u13fa\u30da": [], "\u13fb\u1fe0": [], "\u13fc": [], "\u13fc\u3139": 242, "\u1401": 242, "\u1402\u1ff3": 242, "\u1404\ua6cb": [], "\u1405": 242, "\u1406\u154b": 242, "\u1406\u1f26": [], "\u1407\ua216\u0695\ua842": 242, "\u1407\ua321": [], "\u1408": 242, "\u1409\u02d0": [], "\u140a\u0cb7\u2147\u0eb0\u044b\ufb6c\u04fd\uff90\u2c65\u1641\u19c2": 242, "\u140b\u1016\ua6a0": [], "\u140c\ua0ee": 242, "\u140e\u1f04\u1288": [], "\u140f\u0d15": [], "\u140f\ua6bc": [], "\u1410\ufcf2\u1f51\ua24e\ua735\ua025": [], "\u1411": 242, "\u1413\u1d5e": [], "\u1414\u1636": [], "\u1414\u30cc\ua4ef": 242, "\u1415": [], "\u1419\u0457": 242, "\u141a\u18c2\uab04\ua30c\uab16\u315c": [], "\u141b\ua2ed\u2cc9\u1190": 242, "\u141c": 242, "\u141c\ua524\u1e29\u1168": [], "\u141d\ufc00\u069c": [], "\u141e\u0784": [], "\u141e\u0a2b": 242, "\u141f\u1d8f\u15b7": [], "\u1420\u04a5": [], "\u1421": [], "\u1421\u04f1\u3088\u03c8\u0bb2\u16b5\u02ba\u13fc\ua3e0\u050d\ua67f": [], "\u1422": 242, "\u1422\u2c93": [], "\u1424\ufc47": [], "\u1426\u2c37\u1d3a": [], "\u1426\ufd6d\u2cbf\u1d9a": 242, "\u1427": [], "\u1428": [], "\u1428\u1763": 242, "\u1429": [], "\u1429\ufd63\u2d8d": [], "\u142b\u1530\u1f14\ua07e\uff7f\u0c58\u209b": [], "\u142c\u1477": 242, "\u142c\u1d9d": [], "\u142d": 242, "\u142e": 242, "\u142f\u0475\ufc80": 242, "\u1430\u1d4f\u3109\u19be": 242, "\u1431": [], "\u1432": [], "\u1433\ua544\uff58\u2d0d\u1f32\uabc6\u0d24": [], "\u1434": [], "\u1436": 242, "\u1437": 242, "\u1438": [], "\u1438\u06ef\u0e45": 242, "\u1439": [], "\u1439\u1116\ua020\u1fd3\ua21f": [], "\u1439\u1859": 242, "\u143a": 242, "\u143b": [], "\u143c\u0a39\u2d8a": 242, "\u143d": [], "\u143e\u027a": [], "\u143f\u1c13": [], "\u143f\ua04d\u1192": [], "\u1440": 242, "\u1441": [], "\u1442": 242, "\u1443\u03c7\u0baa": 242, "\u1444": 242, "\u1445\u1460\u213d\ua05e\u0aa5\ua56a\ufe70\ua011": 242, "\u1445\u1820\u057e": [], "\u1448": 242, "\u1449": 242, "\u144a": [], "\u144b": 242, "\u144b\ua417\u3180\ufbd9\u18a7\u014f\u14ea\ua243": [], "\u144c": 242, "\u144d\ua38f\ud7e9": [], "\u144e\u1e83\u18f0": [], "\u144f\ua64f\u1d98\u099b\u1b9d": 242, "\u1450": [], "\u1450\ua447\uab14\ua012": 242, "\u1452": [], "\u1453\u1d8c": [], "\u1454": 242, "\u1455": [], "\u1455\u01be": 242, "\u1456\u132e": [], "\u1458\u14c1": 242, "\u145a\u0266": [], "\u145b": 242, "\u145c\u152d": 242, "\u145c\ufb98\u0ae0\u129c\u134d\u1a3f\u3031": [], "\u145e\u1b0d\ufc4e": [], "\u145f\ua0c2": 242, "\u1460\u19c6\u1f40": [], "\u1461": 242, "\u1461\ua973\u0a08\u1694\ua2c7\u16be\ufd83\ua210\ufd23": [], "\u1462": 242, "\u1463": 242, "\u1466\u18bc": [], "\u1467": 242, "\u1467\ua6aa\ua6b5": [], "\u1468": [], "\u1469": [], "\u1469\u1022": [], "\u146a\u1ecb\u15b8": [], "\u146b\u0432\u15e8": 242, "\u146b\u1d62\u0177\u3185\uaa4b\ua018": [], "\u146d": 242, "\u146d\u14bd\u1953\u1a14\uab85\u11e1\u1f7a\u1d76": [], "\u146e": [], "\u146e\u1ed9\u021d\u110a\u1724\u1341\u071b": 242, "\u146e\ua39b\u1284\ua2dc": [], "\u1470": [], "\u1470\ua72d\u0f8c\u0b0c\u1905\ua990\u020b\u06a7\ua821\ufc72": 242, "\u1471": [], "\u1471\u30ad": 242, "\u1472\u2c3b": [], "\u1472\uab99": 242, "\u1473": [], "\u1474\u16bd\u02ca\u3131\u1541": [], "\u1475\u12da": [], "\u1476": 242, "\u1476\uffaa": [], "\u1477": [], "\u1478\u14a9": 242, "\u1479": 242, "\u147b\u14ef\u0976": 242, "\u147c": [], "\u147d": 242, "\u147e": [], "\u147f": [], "\u1480": [], "\u1480\u0587": 242, "\u1481\u182c\ufbea\u0977\u147a\u0da0\u0137": [], "\u1483\ua602\ua90f": [], "\u1485\u1d14": [], "\u1485\uffbd\ufc8b": [], "\u1487u": 242, "\u1487\u1a44": [], "\u1488": 242, "\u1488\ua26b": [], "\u1489": 242, "\u148a": [], "\u148a\u1662\u12be\ua8fb\u0225\u0260\ua6a6\u15eb": [], "\u148b\u1a38": [], "\u148c": 242, "\u148d\ua351\u1895\ua135\ua0fe\u18f1\u016f": [], "\u148e\ua72f": 242, "\u148f\u126d\u2c3e\u115e\u11d8\u119e\u04ca\u11cd": [], "\u148f\ua945\u2d20": 242, "\u1491\u1ff2\ua472\u14f5\u128a\u1974\ua435\u1874\ufc85\u12ce\ua473": [], "\u1492": 242, "\u1493": [], "\u1493\u2c42\u0ead\u1213\u168a": 242, "\u1493\ua298\ufc8d\ua5b3": [], "\u1494": 242, "\u1495": [], "\u1495\ua665": 242, "\u1496\u16de\u17b3": [], "\u1497\u1a02\u037c\u11fa\ua14c\u2c38": [], "\u1498": [], "\u1498\u1648\ua148": [], "\u1498\u3122": 242, "\u1499\u0b20\ufdb2": [], "\u1499\u0b87\u1d9c\ufcc1\ua308\u101c\u028b\u0ae1": 242, "\u149a": [], "\u149b\u011d\ua3c0\ufd3a\ua71a": 242, "\u149d\u113f\u1e33\u0a28\uaaa1\u1223\u1468\ua0a6\uabc1\u0448\ua26f": [], "\u149d\ua0aa\ua14c\ua2ed\u1a15": [], "\u149e\u1731": [], "\u14a0\u12c8\ufdc1\u1076\u0630": [], "\u14a0\ua74d": 242, "\u14a1\uaa9c\u0499": 242, "\u14a3": 242, "\u14a3\ua5ac\ua488": [], "\u14a4\u1f45\u15f8\u1e99\ua2fa\u1869\ufd65\ufb58\u04e9\ua77a": [], "\u14a5\u01eb": [], "\u14a5\u30db\u03df": [], "\u14a7": 242, "\u14a9": [], "\u14a9\ua64b\ufeb7\uab9c": [], "\u14aa\ua386\u0479": [], "\u14aa\ufc31": 242, "\u14ab\u18d7": [], "\u14ac": 242, "\u14ac\ua3b4\u011b\ua1fa": [], "\u14af": 242, "\u14af\u106e\ua05b\ua216": [], "\u14af\u15c9\u0684\u1d12\u1e5d\ud7bd": [], "\u14b0\u0790\u1d86\u2d1b\u0828\u0cb5\ufb48\u2d04\u18ee\u050f\ua3ef": 242, "\u14b1": 242, "\u14b3\u052d\u1b29\u2c8d\u0138": [], "\u14b4\u044a\u1121\ua1e3": [], "\u14b5": [], "\u14b7": [], "\u14ba\u072d": [], "\u14bb": [], "\u14bb\u0d93\u2cdb\u00e0\ua717\ua79b\u0642": [], "\u14bd": [], "\u14be": 242, "\u14bf\u2cb3\u189d\u2cb7\u1403\ua32e": [], "\u14bf\ua939": 242, "\u14c0\u1668\ua937\ua3f4\ua3de": [], "\u14c1": [], "\u14c3": [], "\u14c4": [], "\u14c4\u1eb7": 242, "\u14c5": [], "\u14c5\u15a6\u044f\u12cb": 242, "\u14c6": [], "\u14c7\ua3fd\u10f9": [], "\u14c8\u1d80\u0259\u1e93": 242, "\u14c9": [], "\u14c9\u316f\u1f10\u1d72": [], "\u14ca": [], "\u14ca\u0285\u16b8": 242, "\u14ca\u1115": [], "\u14cb\ua931\u1590\u0c38": 242, "\u14cb\ufb4c\u2d0a": [], "\u14cc": [], "\u14cd\u18a7": 242, "\u14cf": [], "\u14d0\ufcac\u2d16": 242, "\u14d1": 242, "\u14d3": [], "\u14d3\u1f04\u0c96": 242, "\u14d4": 242, "\u14d5\u0201": [], "\u14d6\u1bd1\u1401": [], "\u14d6\ufc3b\ufefc": [], "\u14d7\u00ff": [], "\u14d9\u1621\ua4e5": 242, "\u14d9\ufb41\ua81f\ua104\ua313": [], "\u14da\u1dab\u15bc\ufd92": [], "\u14dc": 242, "\u14dc\u1991\u1edf\u310e\ua148\ua9fe\uaa28\ua743\u1310\u019a": [], "\u14dd\u1200\u1956\u14e8\u0180": [], "\u14df": [], "\u14e0": 242, "\u14e0\u0cb6\u0ec0\u1b2c\uaa6b": [], "\u14e3": [], "\u14e3\u153d": [], "\u14e4": 242, "\u14e4\ufda3": [], "\u14e5\u026c\u0858": [], "\u14e6\u0574\ua1e5\uff42": [], "\u14e9\ua058\ufdc1\u0e33\u1274\u019e\u1144\u1197": [], "\u14eb\u1596": 242, "\u14eb\u1e47\u1c5c\u1e75": [], "\u14ec": 242, "\u14ed": 242, "\u14ee\u0f50": [], "\u14ee\u1d02\ua3b4": 242, "\u14ee\ua645": [], "\u14f0": [], "\u14f2": [], "\u14f2\u2c52": [], "\u14f3": 242, "\u14f7\u1684": [], "\u14f7\ua65d\ufbf7": 242, "\u14f7\ufcff": [], "\u14fa": [], "\u14fb": [], "\u14fb\u049f\u120a\u163d\u1b92": 242, "\u14fc\u0908": 242, "\u14fc\u168b\u0439\u1a54\u1d7f": [], "\u14fd\u00f2": 242, "\u14ff\ua77f": 242, "\u1500": [], "\u1502\uab44\u1797\u0845\u1482": [], "\u1503\ua51e\u01a3": [], "\u1504\u00f8": 242, "\u1504\u02b1\u1e69": [], "\u1506": [], "\u1507": [], "\u1507\u1863": [], "\u1509": [], "\u1509\u1238\u1fa7": [], "\u150a": 242, "\u150c": 242, "\u150e\u1632\u048b\u2d42\u04af\u3105": 242, "\u150f\u0d1e\u10f3": [], "\u1510\u09a7\u048b": [], "\u1511\u1f13": [], "\u1511\u2c4f\ua72b\ua395\uff8e\u1227": [], "\u1512": 242, "\u1513\u1bc8": 242, "\u1514\u1c1d\u063d": 242, "\u1515\ua038\uab84": [], "\u1516\ua209\u1130\u0799\u2145": [], "\u1517": 242, "\u1517\u195a\u0dc4": [], "\u1518\ua394\u03b2": [], "\u151a\u1128\u0783\ua972\u1b0b\u0f56\u12c4\u0dc5\u3183\ufc2a": 242, "\u151b\u1214\u0a86\u057f\u18b6\ua5e8\ua3fb\u2d18": [], "\u151b\ua179\u116a\u2cc1\uaaad": 242, "\u151c\u186d\ua579\ua5ff": [], "\u151c\u209c": [], "\u151d": [], "\u151e": [], "\u151f": 242, "\u1520": 242, "\u1521": 242, "\u1522\u11a9\u2cb7": [], "\u1522\u15fc\u0564\u14e6": [], "\u1523\u0525\u1b92": [], "\u1523\ufb89\u1a09\ua43e\u0265\u1e6d\ua377": [], "\u1524\u1448": [], "\u1524\uaa69\u1f7b\ufec8\ua59f\u1210\u120b\u0d27": [], "\u1525\u03c7\ua3ad\ua2a0\ua4f4\u03bb": 242, "\u1525\u1b47": [], "\u1526\ua545\u0234": 242, "\u1528": [], "\u1528\u1906": 242, "\u1529\u182e\u19b5": [], "\u152a\u0148\u1c7b": [], "\u152b\u1d55\u14f6": 242, "\u152c\ua093\ua2d5\u11f4\ua1db\ufdae\ua5f2\u1518\u19ab": 242, "\u152e": [], "\u152e\ua045\u1e37": 242, "\u152f": 242, "\u1531\ua28f\ufe8e\ua74b\u1b21\u14f2\ua35f": 242, "\u1534": 242, "\u1535": 242, "\u1536\u1026": 242, "\u1537\uaa41\ua2e6": [], "\u1539\u1588": [], "\u153a\u1647": 242, "\u153b": [], "\u153b\u0105": 242, "\u153c\u107c": 242, "\u153d": [], "\u153e\ua725\u18d9": 242, "\u153f\u1304": [], "\u1541": 242, "\u1541\ua3c0": [], "\u1543": [], "\u1544": 242, "\u1545\u2dc8": 242, "\u1547": [], "\u154c\ufe96\u1607\ufced": [], "\u154d": [], "\u154e\u1e55\u0249\ufc69\ufec4\u0ea1": 242, "\u154e\ufcb2\u1e43\ua501": [], "\u154e\ufeb4\ufb87": [], "\u154f": 242, "\u1550": 242, "\u1551": [], "\u1551\u1a4b": [], "\u1552": 242, "\u1555\u1706\u11a9": 242, "\u1555\u1a30\u2c76\ufcf7\u0680\ua8b3\ufb74\u091a": [], "\u1556": [], "\u1557\ufbe0\u1fa2\u02ee\ua308\u31b1\ufea7\u12af\u1268": [], "\u1558\ua5d1\u074d\uabdf\ud7ed\ufd5f": [], "\u1559\ua985": [], "\u155a\u01e7\ufdaf\u14c9": 242, "\u155b": [], "\u155b\u1fd0": [], "\u155e\u0d23\uaa67\uff45\u06fa\ua424\ufc3f\u1e7b": 242, "\u1560\u1643\u1b4b\u04b5\u191d\u1fd6\u1d51\u211a": [], "\u1562\u1620\u1d3e\ua27d\u1862": [], "\u1562\u1e7d\ufbfc\u0972\ua088": 242, "\u1564": 242, "\u1565": [], "\u1565\ufef3": [], "\u156a": [], "\u156b\u0cb0": 242, "\u156b\u1d67\u125d": [], "\u156c\ua170\ua0f2\u2c54\u31ac\u14e2\u1d4c\u1f33\ua2d0\u2cc9": [], "\u1570": 242, "\u1572\ua5e7": [], "\u1572\ufd27\u1d12\u30ec\ua40e\ua48b\u2c31": 242, "\u1573\u1585": 242, "\u1573\u1917": [], "\u1573\u2cee\u30b0\ua567": [], "\u1574\ufea5": 242, "\u1575": 242, "\u1575\ua043\u021d\u0299": [], "\u1577": [], "\u1578\u04b5": [], "\u1578\ua4db": 242, "\u157a": 242, "\u157a\u1e81": [], "\u157b": [], "\u157c": [], "\u157f": [], "\u157f\ua034": [], "\u1580\u1c72\u1245\u2d80\ua30e\ua3b2\u0515\u16ab": 242, "\u1581": [], "\u1582\ua4e5\u1e2b": [], "\u1583": [], "\u1583\u0c88\u117f\u1fd1": 242, "\u1584": [], "\u1584\u0579\u02a2\u023f\u1865": [], "\u1585": [], "\u1585\ua2b2\u1eb9": [], "\u1586": [], "\u1586\ua143": [], "\u1587\u066f": [], "\u1589\ua6bf\ua099\u037d": [], "\u1589\ufb77\u06ad\u18c3\u1e8d\u15e0": [], "\u158a\u0177\u049b\u050d": 242, "\u158c": [], "\u158d\u04dd": 242, "\u158d\u3133\u1b48\u1678\u068b": [], "\u158e\u0f62\u10fe\u1876": 242, "\u158f": [], "\u1590": [], "\u1591\ua65b\u0562\u11a3\u05d3\u00f1\u18bd\u12a7\u0e0c\ua717": [], "\u1592\u016d\ua589\ua657\u303c": [], "\u1592\u11f0\u1339\ua212\uabc0\u1eab": 242, "\u1593\u01ed\u1512": [], "\u1594\u1255": 242, "\u1594\u1b8b\u1d95": [], "\u1595": 242, "\u1597\u2d20": [], "\u1598": 242, "\u1598\u1d8c": [], "\u1599": [], "\u1599\u3136\u310e\u0d0b": 242, "\u159a\u04a7": [], "\u159a\ua795\ud7b6\u179c\u307e\u1f42": 242, "\u159d\ua16b\u1f94": 242, "\u159e\u03f5\u08a6": 242, "\u159e\u1611\ua6dc\u1213\u16d6": [], "\u159f": 242, "\u15a0": [], "\u15a0\ua601\u189e\u0c2a": [], "\u15a1\ua609": [], "\u15a2": 242, "\u15a3\u2cdf\u2d57\u0d0c\u03ae\u0da6\u0626\ua431": [], "\u15a4\u1e7b\u12a6\u0192\ua35a": 242, "\u15a9": 242, "\u15aa": [], "\u15ac": [], "\u15ad": [], "\u15af\u074e\ud7c0\ua4ef": [], "\u15af\u1d5f": [], "\u15b0\ufb2d\ua547\ufe7d\u2d13": [], "\u15b2": [], "\u15b3": 242, "\u15b3\ufe79\ua0d9": [], "\u15b4\u1117": 242, "\u15b4\ua2b7": [], "\u15b5": [], "\u15b5\ua25e": 242, "\u15b6": [], "\u15b7": 242, "\u15b8\u12ec\u12eb\ua41f": [], "\u15b8\u2d17\u1741\u18e3\u1d79\uaa14": 242, "\u15b9": [], "\u15b9\u01da": 242, "\u15bb": [], "\u15bc": [], "\u15bd": 242, "\u15bd\ufbae\uab23": [], "\u15c0\ua3ad\u132f": [], "\u15c2\u2ccd": [], "\u15c3l\ufb36\ufdba\u3056\u084e\ufed6": [], "\u15c3\u037c\u1db1\u1963\ua85d\ufb7f": [], "\u15c4": 242, "\u15c4\u0756\u0521": [], "\u15c6\u0a19\ufbec\ua088\u18b2\ufc2b": [], "\u15c8": [], "\u15c8\ua043": 242, "\u15c9\u1185\u0778": 242, "\u15ca\ufea6\u178d": [], "\u15cb\u077a\u2da1\u2c61": [], "\u15cc": [], "\u15cc\ufcd1\ua93e": [], "\u15ce": 242, "\u15ce\u191b\ua2e4": [], "\u15cf": [], "\u15d0": 242, "\u15d2": [], "\u15d3": 242, "\u15d4\ufc58\u0450\u00e1\ufd2e": [], "\u15d4\ufe70": [], "\u15d6\ua5fc\u14c8\u1002\u1f62\u1422\u1f81\u0125\ua75d\u1426\u1f72\ua842\u2ccd": [], "\u15d7\ua527": [], "\u15d8": 242, "\u15da": [], "\u15da\u19b0\u1217": [], "\u15db\ua066\u1438\u2dbd\u1a47\ua53c\u127b\ua887\u1971": [], "\u15dd": [], "\u15de": 242, "\u15df": [], "\u15df\u04b3\u1d1b\u1ecb\u1344": 242, "\u15e0\u021f\u2c3b": 242, "\u15e1\u1f65\u1e73": [], "\u15e1\u31f1\uaa24\u1501\u01c3\uaae1\ua913": 242, "\u15e2\uaaa2": [], "\u15e3\u168c\u1705": [], "\u15e3\u1ef3\ufc75\ua08a\u1f78": [], "\u15e4\u12b9": [], "\u15e5": [], "\u15e6\u1312\u2099": [], "\u15e8": [], "\u15ea": 242, "\u15ef\u18a1": [], "\u15f0": [], "\u15f2": [], "\u15f2\ufcc3\u0575": [], "\u15f3": [], "\u15f4\u308c\ufe80\ua1e2": [], "\u15f5": [], "\u15f5\u30d7": 242, "\u15f6\u110b\u0d94\u1662": 242, "\u15f7": [], "\u15f7\uab11\ua269\ufb90\ufb9d\u043c": [], "\u15f8\ua152\ua13b": 242, "\u15f9": 242, "\u15fa\ufcb9": 242, "\u15fc\u14d1": [], "\u15fd\u09a8\u080c": [], "\u15fe": [], "\u15fe\ua0a1\u0440": [], "\u15fe\ua5cb": 242, "\u15ff\u14ea\u1988": 242, "\u1601": 242, "\u1603\u0c1b\uab76\u1ee7\u1ff7": 242, "\u1603\u15b3\u06a6\ua913\uab4b\u30f3j\u0f69\u0770": [], "\u1605\ua110\ua06b\ua5ec\ufd75": [], "\u1605\uff56\u1132": [], "\u1606\ua2a4": [], "\u1607\u0dbb": [], "\u1608\u0173": 242, "\u1608\u01b0": [], "\u1609": [], "\u1609\u174c": [], "\u160a\u1768\ua33c\ufd1a\u317e\u16ad\ufd97": [], "\u160b\u162f\ud7d3": 242, "\u160c\uffc7\u162c": [], "\u160d\u01fb\u063f\ua411\u179a": 242, "\u160e\ua5e1\ua3a5": 242, "\u1610": 242, "\u1610\ua349\u03f3\u1659\u0529": [], "\u1611\u1f7c\u118e": 242, "\u1615": [], "\u1616": [], "\u1617": 242, "\u1618\ua314": [], "\u1618\ua61b\u2d14\u051d\ua7f8": [], "\u1619": 242, "\u161a": 242, "\u161d\u0e0b\ua9eb": [], "\u161f": [], "\u161f\u0188": 242, "\u1620": [], "\u1620\ua137\u1f12\ua647\u159c\ua167": 242, "\u1624": 242, "\u1624\u2d88\ua883\u1554\u148f\u16bf\u17ab": [], "\u1625\u16c2\ua31c\ufb5f": [], "\u1627": [], "\u1627\u047d": [], "\u1628\u1987\ua68b": [], "\u162b": [], "\u162d\u2c4c": [], "\u162e\ua5de": [], "\u162e\ufe9c\ua163": 242, "\u1631\u01f5\u18b7": [], "\u1632\u13fa": [], "\u1632\u1600": [], "\u1633": [], "\u1633\ufd64\uffc2\ua2c1\u12bd\u0f44": 242, "\u1637": [], "\u1639\u1e49": [], "\u163a": 242, "\u163b": [], "\u163c": [], "\u163c\u0802\u0211\u2d25\u022f\ua07f\ua2f2\u0c1a\ua897": [], "\u163c\u1ed5\ua811": 242, "\u163e\u1915\u164a\u212c": 242, "\u163f\u1306\ufec5\ua42d\ua847\ufeb3\u07db\u19a5": [], "\u1640": [], "\u1641\ufd7c": [], "\u1642": 242, "\u1643\u0edd\u06ce\u211ag": 242, "\u1644": 242, "\u1645": [], "\u1646": 242, "\u1646\uaadd\u01a3\u18cf": [], "\u1649\u03d2\ua89a": [], "\u164c": [], "\u164c\ua16d\u15dc": 242, "\u164d": 242, "\u164d\ua6a3\uab3c": [], "\u164e\u0295\ua693\u14f3": [], "\u164e\ua0e3\ufb58\u154b": [], "\u164e\ua3b0\u0921\ufd6b\ua053": 242, "\u1651": 242, "\u1651\ua378\ua46a\ufb66": [], "\u1653\ua30f\u2cbd\ua544\u18e4": [], "\u1655\u2d38\ua3cc\ufe92": [], "\u1657": 242, "\u165c\uff8c\uabc4": 242, "\u165d\u160d": [], "\u165d\ufcdc\u0f53": 242, "\u1661": [], "\u1661\u0b85\u1b48": [], "\u1661\u308f": 242, "\u1663": 242, "\u1664\u0cb2\uab93": [], "\u1664\u1852": [], "\u1665\u07e2\u1029": 242, "\u1666\ua5c0\u02b5\u0853\u1d49\ufd2e\u1f57": 242, "\u1667\u1bcc\u050f\u1665": [], "\u1668\uaa72": [], "\u1669\u02b7\ua61c\u04ce\u095d\ua56c": [], "\u166b\u11cb\u2dae\u2c40": [], "\u166c": 242, "\u166f": [], "\u1671": 242, "\u1671\u0916": [], "\u1672\u0298\ufeb6": [], "\u1672\u0798\u2d13": 242, "\u1673\u1219": [], "\u1674": [], "\u1674\u1fc6\uab13\uaa9d": 242, "\u1674\u2d05\ua691": [], "\u1677": 242, "\u1677\ua0fb": [], "\u1678": 242, "\u1678\u2d3a": [], "\u1679\u1234\ufcf8\u0920\ufce5\u0682": [], "\u167a\ua53d\u2dcd\u046f": [], "\u167a\ua5db\uabb0": [], "\u167b": [], "\u167c": 242, "\u167f": [], "\u1682": 242, "\u1683": 242, "\u1684\u14d5\u1e27\ufe8d": [], "\u1686\u1833\u02bf": 242, "\u1689\u1a21": 242, "\u168b": [], "\u168d\u037d": 242, "\u168f": 242, "\u1690\u00e5\ua060\u057b\ufef3\u165d": [], "\u1691": 242, "\u1692\u3120\ua77f\u2d19": [], "\u1693": 242, "\u1694\u1e87\uaa1b": [], "\u1695": [], "\u1696": [], "\u1697\u12bd": [], "\u1698": 242, "\u16a0": [], "\u16a2\u0b10\u1ff7\u199b\u1f53": [], "\u16a3\u18a3": [], "\u16a5": [], "\u16a7\ua659": [], "\u16a9\u2d81": 242, "\u16ab\u30c1\u1bcb": [], "\u16af": 242, "\u16af\u18b3": [], "\u16af\ua79d\u1700\ua3ed\u120e\u3167\ua1c9\u043d\uff45\ua517\ua41a\uaa7a\ufdf2": [], "\u16b0": 242, "\u16b2": [], "\u16b3\u2d66\u0e28\u03cb": [], "\u16b7\u0794\uaa6f\ua800\u01f9\u1014\ua425": [], "\u16b8\ua32cj\u140d\u1f43\u07b1\u08a9": [], "\u16ba": 242, "\u16ba\ua25b\u14ef": [], "\u16bb\u2cc1": [], "\u16bc\u057b\uaba5\u06c4": 242, "\u16bc\ua078\u12a4\uaa86\u14e4\u3152\ua4e7\ufc7b\u1d53\u3146": [], "\u16bd\u1b85\u1fe1": 242, "\u16c0": [], "\u16c0\u1e3b\u2cc7\u1854": [], "\u16c1": 242, "\u16c3\u11dd\u04d1": 242, "\u16c3\u12cc\u0cac\ua3ee\u1114": [], "\u16c4": 242, "\u16c4\u18e7\u06a4": [], "\u16c6\ua182\u1635": [], "\u16c8": [], "\u16c8\u1568\ua1bc": 242, "\u16c9\u110e": [], "\u16ca": [], "\u16cb\u1eeb": [], "\u16cc\u0a15": [], "\u16cc\ua407": [], "\u16cd": 242, "\u16ce": [], "\u16ce\u10fe": [], "\u16ce\u2c34\u0271\ua29f\u0125\u1916\ua8f3": 242, "\u16cf\u04db\uabbb\ua79b": [], "\u16d0": [], "\u16d3": 242, "\u16d4\u3077\u1220\uab35\ud7cd\ufdf4\ua19a\u188e": [], "\u16d5\u0685": [], "\u16d6\ua45c": 242, "\u16d7\uff81\u1e13\u0446": [], "\u16d8": 242, "\u16d8\u3047\u1f87\u1d39": [], "\u16da": 242, "\u16dd": [], "\u16dd\ua254\u1ef7\ua40c": 242, "\u16df\u0b87": [], "\u16df\u12a6": [], "\u16df\u15cc": 242, "\u16e0": 242, "\u16e0\ua0cc": [], "\u16e1\u0710\u121e\ua460\u2138\u0913\u1dbf": 242, "\u16e2": 242, "\u16e2\u012d": [], "\u16e3\u16ac": [], "\u16e4": [], "\u16e4\ua75f": 242, "\u16e5": [], "\u16e5\ua429\u1907": 242, "\u16e6": 242, "\u16e6\ua5e8\u1ebd\ua81b": [], "\u16e7": 242, "\u16e7\u1517\u1e59": [], "\u16e7\ua531": [], "\u16e8": [], "\u16f1\u306b\ua3cd\u1e73\u0c8e\u1722\ua21f": 242, "\u16f4": [], "\u16f4\ua5ed\u1ebf\ua60c": [], "\u16f6": [], "\u16f6\ua2f6": 242, "\u16f7": [], "\u16f7\u18d4\ua503\u3113": [], "\u16f8\u1689\ufc8c\ua797": [], "\u16f8\u1ebf\u0458": [], "\u1701": [], "\u1701\u30ee\u18df": 242, "\u1702": 242, "\u1704": [], "\u1704\u1c0f\u1415": [], "\u1709\u2d24\u1079\u057f\u05e9": [], "\u170a": [], "\u170e": 242, "\u1710\u0a2e\ua37e\u14a8": [], "\u1711\u0b35": 242, "\u1711\u1d94": [], "\u1721\u1a3b": [], "\u1721\uaba9\u1b15": [], "\u1723": [], "\u1724\u110a": [], "\u1725\u0261": 242, "\u1726": [], "\u1727": 242, "\u1727\ua003": [], "\u1728k\u0a5b\u0da3\u11b6\u1865\ua6b8": [], "\u172a\uaaaf\u0111\ua109\u1789\u0d85\u3172": [], "\u172c\ua5d6\u016b\u132a\ua489": [], "\u172d": [], "\u172e": [], "\u172f": [], "\u1730\ua333": [], "\u1740\ua0a5\ua42f\u121f\ua772\ua924": 242, "\u1743": 242, "\u1743\ua357\u1d0f\u0c8f\u1fe6\u075b\ua72f": [], "\u1746\u0716\ua10d\ua47c\u304f": [], "\u1747\u0c2f\u14a0\u1536": [], "\u1747\ua759\ua0c2\uaa64": [], "\u1748\uffba\ua16a\uab7f\u071a\uff51": [], "\u174c": 242, "\u174c\uff45\u1404\u0d19\u16d0": [], "\u174d": [], "\u174e\u1326\u2d1c\ua6aa": [], "\u174f\u152b\u16ae": [], "\u1750\u01a1\ua9b0\u0ad0\ufca7": 242, "\u1750\u03ac\u0785\u1006": [], "\u1751\u07e7": [], "\u1760": [], "\u1760\ua10c": [], "\u1761": [], "\u1767\u2c36\u1688\ua778": 242, "\u1768\u1622\ufc67": [], "\u1768\ua228": 242, "\u1769\uab43": [], "\u176b\u02a8\ua188": [], "\u176c": [], "\u176e\ua2b6": [], "\u176e\ua761\u1434": [], "\u176f": [], "\u1770": 242, "\u1770\ua07a\u0223\u2c36\ufb6b\u0c2c\u14d4\u304d": [], "\u1780": [], "\u1781\ufc8a": [], "\u1782\uaa1c": [], "\u1783": [], "\u1783\u1e6b\u1441\ua458\uaa9a\u01d0\ua14e\u2dac\u1863\u00e5\u30b8\u18bd\u03fb\u1e93": 242, "\u1786\u1349\u03d4\u0e03\u0a14": 242, "\u1787\u163f\uffb2": 242, "\u1789\u1267\ua12d\ufcba": 242, "\u178a\ua649\ua469": 242, "\u178a\ufb97": [], "\u178b\ufc1a\ua2e0\u00f0": 242, "\u178c": [], "\u178e": 242, "\u178e\u185a\ua259\ua05f": [], "\u178f\u1c69\uab35\ua91b\u0d1f\u0449\uaa08\ua84d\ua0d5\u0371": 242, "\u1790": 242, "\u1791\u045c\u06cf\u1282\u1da4\u119b": [], "\u1792": 242, "\u1793\u1884": [], "\u1793\ua57f\ua17d\u121d\ufba6\uffa2\ufef3\ua246\u1286": 242, "\u1795\u0231": 242, "\u1795\u1e79": [], "\u1796\u1ea1": [], "\u1797": [], "\u1798\u1157": [], "\u179b\u0687\ufe77\u145c": [], "\u179b\u3123": 242, "\u179c\u1959": [], "\u179d\u0115\u072a": [], "\u179f\ua073\u1fb1\uab45\ua00a\ua04f": [], "\u17a0": [], "\u17a1\u0e9f\ufd31": 242, "\u17a2\u1c1c": [], "\u17a3\uaa99\u0572\uabc8\u0772\uaa1a\ua89d\u2cf3\u03b4": [], "\u17a6\ufba8\u156b\u1107\u1437\u1687\u18ca": [], "\u17ab": 242, "\u17ac": [], "\u17ac\ua33d\ufd21\ua80e\u07d0\u106f": 242, "\u17ac\ua727\u1f43": [], "\u17ad": [], "\u17ae\u09e0\u0521\u1b9b\u18b7\uab0d\uabcb\uffb7\uaa62": [], "\u17ae\u0f6b\u1c5c": [], "\u17ae\ua34d\ua366\u05e5\u1d5c": 242, "\u17af\u2d52\u0205": [], "\u17b1\u3162": 242, "\u17d7": [], "\u1820": 242, "\u1821\u1746\u0dad\u03ed\ua566": [], "\u1821\u1e5d": 242, "\u1822": 242, "\u1822\u3134\u1f40": [], "\u1824\u0279\u1e93": [], "\u1824\u188c\u1989": [], "\u1826": [], "\u1827\u1fa5\ufb71\u143a\u1a31\ua4e6\ua2fe\ua4ed\uff4c": [], "\u1828": [], "\u1828\u06b3": [], "\u1829": [], "\u182a": [], "\u182a\u1d1a\uab3f\u18e4\ua09a": 242, "\u182b": [], "\u182b\u1177": 242, "\u182c": 242, "\u182d\u1001\u30d9\u097f\u09b2": 242, "\u182e\u1649\ua2b6\u0ce0": 242, "\u182f": [], "\u182f\u1d7c\u310c\u1346": 242, "\u1830\u046f": [], "\u1831\u1e47": [], "\u1832\u0183": [], "\u1833\u146c\u1e71\ua126": [], "\u1834": 242, "\u1834\u1478a": [], "\u1836\u3186": 242, "\u1837\u16bf\ua76b\u1d5b": 242, "\u1837\u1d90\ua585\ufb93": [], "\u1839\u0444\u1d16": [], "\u183a": 242, "\u183b\u2c54\u1da5\u1f34\u0211": 242, "\u183c\u00ea": [], "\u183c\u1387\ua11b\u30c9\ua3c6": 242, "\u183d": [], "\u183d\ua604\u0933\u156e": 242, "\u1840": [], "\u1840\u11ae\ua3ed": [], "\u1842\u0698": 242, "\u1843": [], "\u1845": [], "\u1846\u12f3": [], "\u1848\u0685": [], "\u1848\ua4fd\u1587\u0435": 242, "\u1849": [], "\u184a\ua17f\u1bc6\u0631\u03b4": [], "\u184c": 242, "\u184c\u0287\ua2b5\ua7a9": [], "\u184c\ufca3": [], "\u184d\ua4e9\u03c1\u2c81\u30fa": 242, "\u184e\u02be": [], "\u184f\u04b1": [], "\u184f\u0b38\ua0bc\ufed5\u1d91": 242, "\u1850\u1f44\ufc94": 242, "\u1853\u0509\ua108": [], "\u1853\u18f3\u2c53": 242, "\u1855\u1191\u2d82": [], "\u1856": [], "\u1857": 242, "\u1857\ufd71": [], "\u1858": [], "\u1859\u029f": [], "\u185a": 242, "\u185b": [], "\u185b\u1d74": [], "\u185c\u056b\u0958": [], "\u185d": [], "\u185d\u1597": 242, "\u185e": [], "\u185f": 242, "\u1860": 242, "\u1860\u3058\ua5ca\ua751\u0f53\u1545\u0937\u1728\u2d02\uab8e\uaa05\u0841\u04a5": [], "\u1862\ua539\ufd61": 242, "\u1865": 242, "\u1866": 242, "\u1866\u0195": [], "\u1867\u0d93\ua751\u3146": 242, "\u1867\ufcb0\u2090\u029f\u14db": [], "\u1868": [], "\u186b\ua2d4": [], "\u186c\ua276\ua89e\u176b\u2d10": 242, "\u186d": [], "\u186e": [], "\u186f\u12a9": [], "\u186f\u2ce3": [], "\u1870\ua9a9": 242, "\u1874": 242, "\u1875": [], "\u1876": [], "\u1877\u16b6\u1bd3\u1538\u0463\u01c9m": [], "\u1880": [], "\u1880\u1d85\u309f\ufcf1\u3114": 242, "\u1880\ua095": [], "\u1882": 242, "\u1883": [], "\u1884": 242, "\u1887\ua471\uaa19\u0995\u1ec7\u2da8": [], "\u1888\ua64f": [], "\u1889": [], "\u1889\u1e1d\uab21\ufcb8\ufd9c\u15e2": 242, "\u188a\u18df": [], "\u188c": [], "\u188d\u1178\uffb4\u102a": [], "\u188e\u0c31\u2cec\u1db9": [], "\u1890\ua5c0\ufb78": [], "\u1891\u15bf\u11d4\u163a\u2caf": [], "\u1891\ua055": 242, "\u1892": 242, "\u1893\u0463\u107a\u3171\u09b7\ua258": [], "\u1897": [], "\u1898": 242, "\u189c\ufbd4\u0a36": 242, "\u189d\ufb57": [], "\u189f\ua058\ua466\u1f31\u2c9d\uabd9": 242, "\u18a0": [], "\u18a0\u1e5b": [], "\u18a3\u3111": 242, "\u18a5\u18ca\u06a2\u16d2": [], "\u18a5\ua013": [], "\u18a8": [], "\u18a8\ua661\u1cf1": [], "\u18aa\u15f2\u2db0\u0633": 242, "\u18b0": 242, "\u18b2": [], "\u18b4": [], "\u18b4\u0960": [], "\u18b6": [], "\u18b7\u1d0b": 242, "\u18b8\uaa1e\u2d53\uff93\ufc3b": [], "\u18b9": [], "\u18bb": [], "\u18bc": [], "\u18be": 242, "\u18c0": [], "\u18c0\u1726\ua0a2\ua58e": [], "\u18c1\u1070": [], "\u18c2": 242, "\u18c3": 242, "\u18c4": [], "\u18c4\u1b1b": [], "\u18c4\ufc96\u183f\ua38d": 242, "\u18c5\u1ea7\ufd28\u1699": [], "\u18c6\u0676\u3164\ufc04\u1e95": 242, "\u18c7": 242, "\u18c8": 242, "\u18cb": [], "\u18cbo": 242, "\u18cc": [], "\u18cc\u155f\ua166\u15f0": 242, "\u18cc\ua9fc\u1d85\ufee9\u00fd": [], "\u18cd": [], "\u18ce\ua2f0": 242, "\u18d0\u1e81": 242, "\u18d0\ua577\u18a6\u022d\uab21\ud7ec\u1631\u1601\u17dc\u1f85\u2dd9\ufe7a": [], "\u18d2\u1e45\u1d3d\ua9a5": [], "\u18d2\ua43e": 242, "\u18d3": 242, "\u18d4\u1673": 242, "\u18d5": [], "\u18d6\u3139\u31ae\ufe8a\ua1de\ua483\ua5f1\u03b3": [], "\u18d8\u1c1c\u2d16": [], "\u18d9\ua554": [], "\u18da\u1066\u0ec1\u15e9\ua819\u12d8\u2c7b\u1d39\u0baf\ua415": [], "\u18dc": [], "\u18de": 242, "\u18e0": 242, "\u18e0\u2119\u0441\u1199": [], "\u18e1": [], "\u18e1\u16aa": [], "\u18e2": [], "\u18e2\u07cb\u03ef\u027f\ua6de\ua9a7\ua482z\ua51a\ua370\u30d8\u0c90": 242, "\u18e3": [], "\u18e5\ua75f\ufdab": [], "\u18e6\u2c55": [], "\u18e6\ua500": [], "\u18e7": 242, "\u18e7\u08b1\u2dc9\ud7b8\ua516\u151a\ufcf1": [], "\u18ea": 242, "\u18eb\u0718\u1e83\ua5f5": 242, "\u18eb\u30d2": [], "\u18ec": [], "\u18ed": [], "\u18ed\u0685\uab92\uaa69": 242, "\u18ef": [], "\u18f3": [], "\u18f3\u04bd\uaa68": [], "\u18f5\ua172\u069d\u092a\ua257\u046d": 242, "\u1900\u1018": [], "\u1901\u2cab\ua72d\ufb92": [], "\u1902\u014d\u04fb": 242, "\u1902\u1d25\ua80e": [], "\u1904": 242, "\u1904\u029c\ua645\u15e4\uaa03": [], "\u1904\u0da5": [], "\u1906\u1198": [], "\u1906\u2da4\u0c19\u310d\ua1ce": [], "\u1908": [], "\u1909\u1641": [], "\u1909\ua45f": [], "\u190a": [], "\u190b\ufeb8\u1079\u1c4d": [], "\u190c": [], "\u190e\ua616\u1867": [], "\u1910\u1111\ua45b\ufed4\u0688\u1c76": 242, "\u1911": 242, "\u1912": 242, "\u1912\u04cc\u11c7\u1783\u11f6": [], "\u1912\u18b1\ufbdc\ua5b0\u2ca1\u1f93": [], "\u1913": [], "\u1914\u144b\u2ca9\ufd76": [], "\u1916\ua5cc\u178b": [], "\u1917": 242, "\u1919": [], "\u1919\u0e0a\u3075\u0233\u2dde\u095e\ua3b5\ufb63": [], "\u191a\ua480\ua19f\u1e05\u30ff\u13f8\u1bbf\uff4d\u028b": [], "\u191b\u30ad\u1c21\ua86d\u0b35\u2dca\u11a5\u0515\u0511\u16f1": [], "\u191c": 242, "\u191e": [], "\u191e\ufcbd": [], "\u1951\uff98": [], "\u1952\uaa44\u1141\ud7e5": 242, "\u1953\u04ed\u1b0d\u0a90\u1997\u2d05": 242, "\u1953\u1d17\ua0fa\ufb61\ua3f7": [], "\u1954\u0c05\ufb52": [], "\u1955\u1529\ua13d\ufcc6\u04d5\u117d": [], "\u1955\u1991\u1656": 242, "\u1956\ufc67\u1416": 242, "\u1957\u17a7": [], "\u1958": [], "\u1958\u1c0a\u03ef\ua061\ua439": [], "\u195a\u1143": [], "\u195b\u068a": [], "\u195b\ua36f\u1a07\ua38c\ufd32": 242, "\u195c": [], "\u195d": [], "\u195e\ua600\uaa94\ua1e6\u1f40": 242, "\u195f\u1728\u04b3": 242, "\u1960\ua865": [], "\u1962": [], "\u1963\u0227": 242, "\u1965\ua129\ua464\u090b\ufcd6": [], "\u1966": [], "\u1968": 242, "\u1969\ua86a\u0da7": [], "\u196b": [], "\u196b\ufef2\ua2c1": [], "\u196c\ua14f\u06ce": [], "\u196d": 242, "\u196d\u0c8b\u0133\ua153\ufc65\ufdbb\u2d88\u318c\u1983\u0686": [], "\u1970\u1bce": 242, "\u1971": [], "\u1973\u127b": [], "\u1981\u101e\u0a16": [], "\u1982": 242, "\u1983": 242, "\u1984": 242, "\u1984\u15b1\u1e4b\u0c20\ua5ee": [], "\u1985\ua1a5\ua401\u1286": [], "\u1988": [], "\u1989": [], "\u198c\u1e59": [], "\u1994": 242, "\u1995\u1d0a": [], "\u1996": [], "\u1996\ufed7\u1969\u11f3\u0256\uabd2": 242, "\u199a\u161b\u1e29\u1ecb\u03d2": [], "\u199a\u1e83\u3154\ufc95\ua892": 242, "\u199b\u0525\u188b": 242, "\u199c\ua028": [], "\u199d": 242, "\u199e\u1e1b\u1d10": 242, "\u199e\u3184\u03e5\ua4fa\u0b0c\u1464\u0c15": [], "\u199e\ua13c": [], "\u199f": 242, "\u199f\u15b5": [], "\u19a0": 242, "\u19a0\u1d9a": [], "\u19a0\u1e4f\ua092\ua445\ufb62": [], "\u19a2": 242, "\u19a2\u0ec4\u0935\u1e05": [], "\u19a3\u1b96\ufda1": 242, "\u19a3\u2d67": [], "\u19a7\uaac2\ua064\u3107\u15a9\u077e\ua4dc\ua80d\ufca4": [], "\u19a9\u131d": 242, "\u19b1\u2d54\u0286": 242, "\u19b2\u2ca5\ua33e\ua59c\u1236": 242, "\u19b3\ufd1f\u098c\u0b85": [], "\u19b4\u157e\u1e77\ua4f4": [], "\u19b6\ua5ee\u028a\u2d10": 242, "\u19b7": 242, "\u19b9\ufc6c\u1636": 242, "\u19ba\u0a24\ua73d\ua0fc\u12b5\u2c54": [], "\u19bc\u0d17\u0144\ua977\u1b0d\u2cc3\ua649\u067d": [], "\u19bc\ud7b3\u0ebd\u2cc3\u150d\u15e5\u0847\ufc63": 242, "\u19bd\ufc33\u0211\u03b7": [], "\u19be\ua37a\u120d\u1766\ua078": [], "\u19c1": 242, "\u19c3": [], "\u19c4\u0e41": [], "\u19c4\u1e87": 242, "\u19c5": [], "\u19c7": 242, "\u19c8": [], "\u19c9\u1e39": 242, "\u1a01\ua112\ua479": 242, "\u1a03": 242, "\u1a04\ua570": [], "\u1a04\ua6c8": [], "\u1a05": 242, "\u1a05\u16f3": [], "\u1a08\ua2ba\u0117\u1462": [], "\u1a0a\u07e9\ua27b\u017c": [], "\u1a0b": [], "\u1a0c": [], "\u1a0c\u141f": 242, "\u1a0d\u1f35": 242, "\u1a0d\ua038\u188b": [], "\u1a0e": [], "\u1a10": 242, "\u1a11\u16a0\ua2e9\ua418\ua6e2\u121b\u12e9\u196a\u1c68\u1659\u1f61\u1b4a": 242, "\u1a11\u210e": [], "\u1a12": [], "\u1a14\ua46a\u1f05": 242, "\u1a20": [], "\u1a20\u0848\u1c71\u18bc\ua25c\ua661\uaaba\u1529\u019b\u1e2b": 242, "\u1a21\u0107\u045c\u1839\u1a36\u1e13\ua9e8\ufb9a\u1ea7\ua342": [], "\u1a23\u11f7\u06a3\uab71\u19c0\u1e7d": [], "\u1a23\ua52f\u317a\ua651\ua943\u06b8\u1f83\u164b": [], "\u1a25": [], "\u1a25\u2c3e": [], "\u1a26\u1f26": [], "\u1a26\ua029": 242, "\u1a27": 242, "\u1a27\u0671\u1fc6\u1eb7": [], "\u1a27\u30b3\u1114": [], "\u1a28": 242, "\u1a29": [], "\u1a2a\u30ba": [], "\u1a2a\uab74": [], "\u1a2b\u0aa7\uff4b\u30f9": [], "\u1a2c\ua661": [], "\u1a2d\u1fa0\ufeab": [], "\u1a2f\u0626": [], "\u1a2f\u1871": 242, "\u1a30\u0c2b": 242, "\u1a30\uab90\ufb15": [], "\u1a32\u0959\u11d5\u18c1": [], "\u1a33": [], "\u1a34\uaa82\u02bb\u315f": [], "\u1a35\u2d4f\ua477": [], "\u1a37\u01eb\u106f\uaa45\u142f\u16f3\u1791\ua289\ufc8e": [], "\u1a39\u1176\u07e4\u0a8b\u1eb7\ufd18\u0e8a": [], "\u1a39\ua0b4\u0229\u0c9c": 242, "\u1a3a\ua5d9\u168d\uaaad": [], "\u1a3b\u105c\u1764\u3049\u0c13\u0846": [], "\u1a3c\u1c10": [], "\u1a3d": [], "\u1a3d\u186c\ufb2c\u025f\u0f4e": [], "\u1a3d\u30bd": 242, "\u1a42": [], "\u1a43": [], "\u1a43\u1bba": [], "\u1a46\u3069\ua410\ua381\ua280": [], "\u1a47": 242, "\u1a4a": 242, "\u1a4a\u30cc": [], "\u1a4c": [], "\u1a4c\ufedd": 242, "\u1a4d": 242, "\u1a4d\ua942\ufdc4": [], "\u1a4e": [], "\u1a4f": [], "\u1a50\ua39d\ufe8a": 242, "\u1a51\u03dd\u0513": [], "\u1a51\ua91f\u115c": 242, "\u1a52": [], "\u1a52\u2c52": [], "\u1aa7\u04e3": [], "\u1b05\u3032\u1d9b\ua6d6": 242, "\u1b06": [], "\u1b06\ua006\u075e\u12f5f\ua537\ua4d5\u1d79\u027d\u31a0": [], "\u1b07": 242, "\u1b08": [], "\u1b08\u0927\u03ed\u2d0d\u1fe2": 242, "\u1b0c\u164f": 242, "\u1b0e\u14db\ua0c1\uab59\ufb3a\u1107\u1506\u1d95": 242, "\u1b0f": [], "\u1b0f\ua510": 242, "\u1b0f\ufdbd\u1ec5": [], "\u1b10": 242, "\u1b10\u0525\u2c57\u10d5\uabde\u2c95": [], "\u1b11": 242, "\u1b12\u1d5e": [], "\u1b12\ua34c\ufcb1": 242, "\u1b14\u1382": 242, "\u1b16": 242, "\u1b16\u15ee\uaa9a": [], "\u1b17\u06be\ua0cf\ua3eb": [], "\u1b17\u2d6f": [], "\u1b17\u30a8": 242, "\u1b18": 242, "\u1b19": [], "\u1b1b\u14b0": [], "\u1b1b\u19a8\u1f7b\u0f58\ua3fe": 242, "\u1b1e": 242, "\u1b1f": 242, "\u1b20\u00f3": [], "\u1b25": 242, "\u1b25\ua0f3": [], "\u1b26": [], "\u1b26\u015b": [], "\u1b26\ufd2a\u0f68": 242, "\u1b28": [], "\u1b29u\ua0c2\u317e": [], "\u1b2a\u0448\ua1cf\ufd56": [], "\u1b2b\ua146": [], "\u1b2d": [], "\u1b2d\u1868\u1f81l\ufb20\ufb31\u00f5\ua263\u1195": 242, "\u1b2f": [], "\u1b30": [], "\u1b30\u105a": [], "\u1b31\u14dd\u1f55": [], "\u1b32\u1276": [], "\u1b32\u1513": [], "\u1b32\u30d6": 242, "\u1b33": [], "\u1b45\ua300": [], "\u1b49\u2d07\u306b\u1786": [], "\u1b4a": [], "\u1b83": 242, "\u1b83\u0103": [], "\u1b86\u2d67\ua6dd": 242, "\u1b86\uaa13": [], "\u1b87": 242, "\u1b88\ufcec\u190c\u16c7\u312d": [], "\u1b88\uffb1\uff83\u03b7": [], "\u1b8a": [], "\u1b8a\u1a22": [], "\u1b8b": [], "\u1b8c": [], "\u1b8c\u029e\u1985\u1908\u1137\u15e9\u0568\u123e\ua651i\u1766\ua249": 242, "\u1b8d\u16b4\u05e5": [], "\u1b8e\u1122\ufc98": [], "\u1b8f\u08a3": [], "\u1b94": [], "\u1b95": 242, "\u1b97": [], "\u1b98": [], "\u1b98\ufb73": [], "\u1b9a\u0a2f\u0517\u0299\u2cbf": 242, "\u1b9a\u1ee9": [], "\u1b9c": 242, "\u1b9c\u304c\u0471\u1465\ua815\u05e0": [], "\u1b9d\ud7b1\u0455\u049d": [], "\u1b9e\u03ed\u1496\u14d2\u048d\ua503\u2cd7\u2138": [], "\u1b9e\u0ab3\ufbd5": [], "\u1b9f": 242, "\u1b9f\uff76\ua505\u0f59\uab95": [], "\u1bae": [], "\u1baf\u1127\u0c14": [], "\u1baf\u1d50\ua9a8": 242, "\u1bba\u317f": [], "\u1bbc": 242, "\u1bbd\ua1dc\u1d33m\u1480": [], "\u1bbd\ua535": [], "\u1bbe": [], "\u1bbe\ufb75\ua5c5\u0b86": 242, "\u1bbf": 242, "\u1bc0\ua30b": 242, "\u1bc1\u1e77\ufb50": [], "\u1bc1\ua583": [], "\u1bc2\u022f\u1d3d\u198a\u30df\u1d40": 242, "\u1bc3": 242, "\u1bc3\ua591": [], "\u1bc4\u1706\u1835\u03c3": [], "\u1bc4\u2c9b\ua5b0\u11de\u0501\u00eb\u1537\u1a41": 242, "\u1bc5": [], "\u1bc5\u2113\u143c\ud7e5": [], "\u1bc6": [], "\u1bc6\u30d5\u03d1\ua3f9\u16f7\u132b\u3044\u0165\ua0ae\ua3d9\ua794\u16a2\u185c": 242, "\u1bc7\u1171\u149e": [], "\u1bc8": [], "\u1bc8\u10d1": [], "\u1bc9": [], "\u1bc9\u148b": 242, "\u1bca": 242, "\u1bcb\u1338": [], "\u1bcdl\ua380": 242, "\u1bcd\ua35c\u15ba\u1132\u1449\ua91b": [], "\u1bd0\ua77c\u0d18": [], "\u1bd2\u1077\u0697": [], "\u1bd4": [], "\u1bd5\u1973": [], "\u1bd6\ua606\u0373\u140a\u1d9e\u0bb9\ua417": [], "\u1bd7": 242, "\u1bd9": [], "\u1bda\ua52b": [], "\u1bdb": 242, "\u1bdb\u064a": [], "\u1bdc": 242, "\u1bdc\uab81\u0cb7\u184b\ua974": [], "\u1bdd": 242, "\u1bde": 242, "\u1bde\u1658": [], "\u1bdf\ufd9d\u1d69\u2dca\u3157\u1a01": [], "\u1be0\u2c68y\u11fc\u2c4a": [], "\u1be2": 242, "\u1be3\u091f": [], "\u1be5": [], "\u1c00": 242, "\u1c00\ua42b\u0e09\u2e2f": [], "\u1c01\u0256\uaabc\u090f\u0f6a": [], "\u1c01\u1bd5": 242, "\u1c03": [], "\u1c03\u11e7\ua422": 242, "\u1c04\u07cf": [], "\u1c04\u0c2b": [], "\u1c05\ua5ba\u1877": 242, "\u1c06": 242, "\u1c06\ua805": [], "\u1c07\u1615\u0931\ua0ba": [], "\u1c07\ua30d\ua3a1\ufca6\u1fc3\u1519": 242, "\u1c08\u0258": 242, "\u1c08\u108e": [], "\u1c09\u150e": [], "\u1c0b": [], "\u1c0c\ufce1\u30f2": 242, "\u1c0d\u0db9\u155c\u2090\ud7ea\u1e37\u1e81\u0ede\ud7d9\ufd53\u064a\u1b20": 242, "\u1c0e": 242, "\u1c10\u1634\uff4d": 242, "\u1c11": [], "\u1c11\ua16a\ua99d\ud7e8\ufcd0q": [], "\u1c13\u16c2\ua158": [], "\u1c14\u1587": [], "\u1c14\ua0b1\u0cb2\ua33a\u0f6c": 242, "\u1c15": [], "\u1c15\uff5a\u04e3\uff57": 242, "\u1c17\u0906\u0227\u123f\ua54f\ua683\u1634\ua0cd": [], "\u1c18": 242, "\u1c19": [], "\u1c19\u1e11\u2c91": [], "\u1c19\u30e2": 242, "\u1c1a": [], "\u1c1b\u0ec6": [], "\u1c1b\u1c7b": 242, "\u1c1d": [], "\u1c1f": 242, "\u1c1f\u1571\ufe9c\u0f8b\ua3e9\u03c1\u0727\u16cf\u0939\u131b\u1c6c\ua3a9": [], "\u1c20": [], "\u1c22\ua72f\u01c9\u027d": 242, "\u1c23\u0438": [], "\u1c23\u045f\u2d11\u03f3\u0371": [], "\u1c4e\u0636\ua695\ua88e\ua649\u1679\u1ea1": [], "\u1c4e\uab22": [], "\u1c4f\ua69b\ud7e6": [], "\u1c4f\uffb6": 242, "\u1c5a\u0566": 242, "\u1c5a\uaa72": [], "\u1c5a\ufea5\ufdb4\u0105\u084c\u18b9": [], "\u1c5d\ua253": [], "\u1c5e": [], "\u1c60": [], "\u1c60\u1070\u1edf": 242, "\u1c60\ua1e6\uaa02": [], "\u1c61": [], "\u1c61\uaa91\ua81a": [], "\u1c62": [], "\u1c62\u0582": [], "\u1c64\u03d7\ua34c": [], "\u1c64\u312c\ua0c0\u1883\u1b4b\ua71d\u00ba\uabaf": 242, "\u1c65": 242, "\u1c66\ua2f3": 242, "\u1c67\u10d5": [], "\u1c67\u2d89\u04ab": 242, "\u1c69\u305a\u1637\u15dd\ua36a": [], "\u1c6b": [], "\u1c6b\u18f5\u31aa\ua34e\u0e9d\u0497\u0d10\u1184": [], "\u1c6c": [], "\u1c6c\u16c2": 242, "\u1c6d": [], "\u1c6f\u1f92\ufbaf\u2c45\u02c9": [], "\u1c6f\ua389": [], "\u1c70\u1d41\uabbf\ua13d\u12a8": [], "\u1c72\u084b\u0a2b": [], "\u1c73\u1413": 242, "\u1c75": 242, "\u1c75\u30a1": [], "\u1c76": [], "\u1c77": [], "\u1c7a\u1a16\ua071g\ua2c3\ua3d9\u0998\u1cf6\u159b\u0234\u318e": [], "\u1c7a\u3183\ua0f3\ufb4e": [], "\u1c7a\ua567": 242, "\u1c7d\ufe8d\u2c42\u2da8": 242, "\u1ce9": 242, "\u1ce9\ua840\u2d8b\u0856": [], "\u1ceb": 242, "\u1cf0": [], "\u1cf0\ufbe4": [], "\u1cf5\u1fc6\ua537\ufbf1\u02bb\u0bb1\u1457\u03c8": [], "\u1d00\ua156\ua36c\u01ce": [], "\u1d01": 242, "\u1d01\u1544": [], "\u1d02\u1fa1": [], "\u1d03": [], "\u1d04\u1e95": [], "\u1d04\ua5fe\ua596\ua9af\u1f42\u07e0\u150d": [], "\u1d05\uabd6": [], "\u1d06": [], "\u1d06\u1627": 242, "\u1d07": [], "\u1d07\u1db4": 242, "\u1d07\u1eb5": [], "\u1d08\u0260": [], "\u1d09": [], "\u1d0a": 242, "\u1d0a\uaaf4\u1a07\u130b": [], "\u1d0c\u2d1f\ua3be\u31f1": [], "\u1d0e\ua0cb\u2c97\u2c9f\ua145\u2ddd": 242, "\u1d10\u0bb6": [], "\u1d13\ua125": 242, "\u1d13\ua2d6\u1f42\ua47d": [], "\u1d14": [], "\u1d16\ua267\u1e85": [], "\u1d17\ua31a\ufd78\u125a\u14a1\ua260\ua565\u1fd7": [], "\u1d18\ua106": [], "\u1d19\u04b3\u1c65\u1050\u03c7\u00e8": [], "\u1d19\ua584\u146f\u1d98": [], "\u1d1a\u174a\u1f43\u14ce\u0180\u1a4a": [], "\u1d1d": [], "\u1d1e": [], "\u1d1f\u1cf3\u1d50": [], "\u1d1f\u2d0a": [], "\u1d20\u03ca": [], "\u1d20\u1a22\ua378": 242, "\u1d21": [], "\u1d22": [], "\u1d23\u07dc\u168et": [], "\u1d23\ua25f\ua342\u1335\u0c60\u186d": 242, "\u1d24\u2d1e": [], "\u1d26\u1d7d\ufc9a\u17a1": [], "\u1d27\u0a25\u0e20\u04e3\u1192\ua21c": [], "\u1d27\u1ed1\u1127\u06ac\u179e\u0d24": 242, "\u1d28": [], "\u1d29": [], "\u1d2a": [], "\u1d2d\u31ff\uff8a": [], "\u1d2e": 242, "\u1d2e\u16b9\ua1c6\u04fb\u14df\u1854\u2111\u1242\ua5b5": [], "\u1d2f\u14ad\u30bf\u1304\u00fe\u1f55\u12f1\ua095\u304d\u11a3\u1955": [], "\u1d31": [], "\u1d32": [], "\u1d33\u12a0\ua50f\u30d5\ufc50\u06c2\u01f0\u0f64\u2d15\u1871": [], "\u1d34": 242, "\u1d35\u0d1a": [], "\u1d35\uab48": 242, "\u1d36": [], "\u1d36\u126f\u2110\ufc86\uab34\ua64b\ufdf4": 242, "\u1d37\uab09\u19a8": [], "\u1d38": [], "\u1d38\ua528\u1314\u164d\ufca5\u02b5\u08ad\uabb1": [], "\u1d3a": 242, "\u1d3a\u1081\ua180\ua416\u1b08\u1e9b": [], "\u1d3b": [], "\u1d3b\ufcda\ua75b\u0e21\u0c1d": 242, "\u1d3c\ua379\ua42f\u078a\u156d\u18c2\u31b8\u04a7\uab7a\u0a1e": [], "\u1d3d": [], "\u1d40\u06d5\u1b22\u1917": [], "\u1d40\u1986\uabce": [], "\u1d42": 242, "\u1d44": 242, "\u1d45": [], "\u1d46\u0b14\ua6d8": [], "\u1d46\u1e63\u0750\u0260\uffaa\u1346\u156a\u1731": [], "\u1d47\u0b88": [], "\u1d47\u2d34\u11f7": 242, "\u1d48": 242, "\u1d4a": [], "\u1d4a\u2c3f": [], "\u1d4c": 242, "\u1d50\u044c": [], "\u1d51\ua369\ua225\ua146\u1c5d": 242, "\u1d54": [], "\u1d54\u3031": 242, "\u1d56": 242, "\u1d57": [], "\u1d58\u07ca\u1d23\ua293\ua27c\u125d\u1b20": [], "\u1d58\u14fe\u1fe0\u02e4": 242, "\u1d59\u318b": [], "\u1d5a\u04d1\u132c\u0e30": [], "\u1d5c": [], "\u1d5c\u1673\u1479\uaab9": [], "\u1d5f\u057e": 242, "\u1d5f\ua16c\u0726": [], "\u1d60\u06d3": [], "\u1d60\u1892\u1fb7": [], "\u1d61": 242, "\u1d62\u00e6\ua5dd": [], "\u1d63\u01ff": [], "\u1d63\u0b2b\u1f70\u1722\u2dcb": [], "\u1d64": [], "\u1d65": [], "\u1d67\u1d6e": [], "\u1d67\uff74\ufe7e\uabcc\ua442\u0570": 242, "\u1d68\u0e1d\u078d\u16b0": [], "\u1d6c": 242, "\u1d6d": 242, "\u1d6e\u05f1\u072e\u1110\u1745\u03c0\ua177\u0127\u01dc": 242, "\u1d70": 242, "\u1d70\u30ac\ua355\u1a3f\u16a9\u196a\u1d2e\u2c57": [], "\u1d70\ua397\u09b2\u12e3\u30f4": [], "\u1d71\u10e0\u04d3": [], "\u1d72": [], "\u1d72\ua975\u3085\u16d2\ufe73": 242, "\u1d73\u06a1\ua20e\u1b91": [], "\u1d73\u1fa6\ua3a0\u0289": [], "\u1d74\u1da0\u1a01": [], "\u1d75\u02c1\u3050\u04db\ua33f\u1d7e\ua25b": 242, "\u1d76\ua100\ua2e8\u115d\ufc3c\u18c5\ufcad\u2d18": 242, "\u1d78\u09a3": [], "\u1d78\u3182": 242, "\u1d79": 242, "\u1d79\uab74\uffca\ufca8\uff54\u2c42": [], "\u1d7a\ufc81\u04b9\u0726\u1b90\ufeb1": 242, "\u1d7b\u1e81": [], "\u1d7b\ufe80": 242, "\u1d7c\u1619\u0b25\uab02\u0587": [], "\u1d7d\ua743": 242, "\u1d7e\u2d1e\u1423": [], "\u1d7f\u1e19": [], "\u1d80\u1542": [], "\u1d82": 242, "\u1d82\u0519\u1433\u12fe": [], "\u1d86\ua015\u0574\u2c37\u1435": [], "\u1d87": 242, "\u1d87\u2c39": [], "\u1d88": [], "\u1d89": 242, "\u1d89\uaa22\ua343\ua132": [], "\u1d89\ufc03\uab25\u10f4": [], "\u1d8a": 242, "\u1d8b": [], "\u1d8d\u1996": [], "\u1d8d\ufb7d\u1da6\u1504": [], "\u1d8e\u1251": [], "\u1d8e\u1255\ua600\u1319\u03b7": [], "\u1d8f": 242, "\u1d91\u311c": [], "\u1d93": [], "\u1d94": 242, "\u1d97": [], "\u1d98\uabdd\u1c73\u0da4": [], "\u1d9b\u1686": [], "\u1d9b\u18b8": [], "\u1d9e": 242, "\u1d9f\u0f55\u310b\ua542": [], "\u1da2\ua55c\ua5ff\uaa84\ua24f\ufc74\u07d1": 242, "\u1da3a\u133d\u043b\u30f2\u12e8": [], "\u1da4": 242, "\u1da5": [], "\u1da5\u30e9": [], "\u1da7\ua1b5\u3074": 242, "\u1da7\ua34a\ua3d2\ufd18": [], "\u1da8\u1f7d\ua3df\u1980\u30ce": 242, "\u1da9\u1efb": 242, "\u1daa\u0a27\u1193\u1f33": 242, "\u1daa\u16a8\u04dd\u07e8\u19b8": [], "\u1dac": 242, "\u1dac\ua2e0\ua487": [], "\u1dad\ua74b\uff88\ufb8f": 242, "\u1dae": 242, "\u1daf\u2db8": 242, "\u1db0\ufc5e\u0576": 242, "\u1db1": [], "\u1db1\u156c": 242, "\u1db2": 242, "\u1db3": 242, "\u1db3\u015d": [], "\u1db4": [], "\u1db5": 242, "\u1db6\ufc85": 242, "\u1db7\u3137\u0f55\u1ecb": [], "\u1db7\ua149": 242, "\u1db8\u0a88": [], "\u1db9\u158c": 242, "\u1dba\uab88\ua6a4": [], "\u1dbb": [], "\u1dbb\u150f\u2d87\ua54f": 242, "\u1dbc": [], "\u1dbd\ua587\u03e1": [], "\u1dbe\u2d05\u1352\u2c35\u06a5\u2d1b\u0201\u00e7\u0f5a\u126b": [], "\u1e01\u125c\u209a": [], "\u1e01\ua1c2\ua2ea\u1106\u07cb\u3149\ua0c5\ua367\u0692\uff54": [], "\u1e05": [], "\u1e05\ua0e3\u16f3\u103f\ua7a1": 242, "\u1e07\ufd17\ua1c0\ud7c5\u1076": [], "\u1e09": 242, "\u1e09\u1f26": [], "\u1e0b\u06b0\u1c7c\u0cae\u1015": [], "\u1e0b\ua5a0": 242, "\u1e0d": 242, "\u1e0d\ua75d\u04ff\ua489": [], "\u1e0f\ua7fc\u1bd3": [], "\u1e0f\ua844\u1061": [], "\u1e0f\ufc62\ua922\u1720": 242, "\u1e11": [], "\u1e11\u04e1": [], "\u1e11\u2d22\u1840": 242, "\u1e13": 242, "\u1e13\ufc4a\u1d6d": [], "\u1e13\ufe84": [], "\u1e15": [], "\u1e15\u0450\u06ef": [], "\u1e17": 242, "\u1e17\u1999\u0a85\ua73f\ua870\u0d9e": [], "\u1e1b": [], "\u1e1b\u1381\u05d1\u0d31\u2db8\u10f0": [], "\u1e1d\u0f4b\u1135": [], "\u1e1f": [], "\u1e1f\u1eeb": 242, "\u1e21": [], "\u1e21\u1bba\u0580\ufead\u11f2\u03b8": 242, "\u1e23\u010d\u077e\u1c05\u1432": [], "\u1e25": 242, "\u1e27": [], "\u1e27\u15cd": 242, "\u1e29": 242, "\u1e2b": [], "\u1e2b\u018d\u18db\u2c93\u0e96\ua2a7\u1437": [], "\u1e2b\u03ba": [], "\u1e2b\u31ae\u1613\u0157": 242, "\u1e2f\u0a96": [], "\u1e2f\u149a\u1b22": 242, "\u1e2f\ua316\u1bd4": [], "\u1e31\u183a\u30ef\ua767": [], "\u1e33\u00b5\ufb5d": [], "\u1e33\u12f0\u12fb": 242, "\u1e33\ufc0d\ua817": [], "\u1e35": 242, "\u1e37": [], "\u1e39\u03b0": [], "\u1e39\u1501": [], "\u1e39\uffbc": [], "\u1e3d\ufd16\uffac\u0442": 242, "\u1e3f": 242, "\u1e3f\u01a3\ua1e0": [], "\u1e3f\u1583\u1262\u0e16\u1c0c": [], "\u1e41\u1eb3\u2137\u056c": 242, "\u1e43": 242, "\u1e43\u1d83\u03fb\u1d84": [], "\u1e43\ua257\ua4d6": [], "\u1e43\uab58\ua38f\u1b94": 242, "\u1e45": 242, "\u1e45\ua12b\ua1f7\ua75b": [], "\u1e47": [], "\u1e47\ua054": [], "\u1e49\ua3dd": [], "\u1e4d": [], "\u1e4f\u19b2": [], "\u1e4f\ua6b4\u15e1": [], "\u1e4f\uab0b\u00ec\u0570\ua6b6\u0ce1": [], "\u1e4f\ud7cd\u02c6": 242, "\u1e51": [], "\u1e53": [], "\u1e53\u150b\ua781\u2cec\u0446": [], "\u1e57\u0142": 242, "\u1e57\ufc7c": [], "\u1e59": 242, "\u1e5b": 242, "\u1e5b\ua64f\u127a\u0846\u0e45\ua1b7\ua3e8\u1f74\ufc7a\ufdaf\ua5f5\ud7ea\u1103\u1dbe\u1e0f": [], "\u1e5d\u0454\ua124\uab0a\u0763\u101a\ua847": [], "\u1e5d\uabc3\u2c9d": 242, "\u1e5f": [], "\u1e61": 242, "\u1e63": 242, "\u1e63\ua588\u2d03\ua0e0": [], "\u1e65\u310a\ua5d9\uff78\u30f3\ufcb3": [], "\u1e67": [], "\u1e67\u2d38\ud7fb\ufd66": 242, "\u1e69": [], "\u1e6b\u0d2c\u2c77\u1e19\u057e\u1d7e\u307d\uab53\ufb16\u01fd\ua35c\u198f\ua3bd\u0b8f": [], "\u1e6b\ufc76\u0767\u0571\ua382\ua617": [], "\u1e6d": 242, "\u1e6d\u3050\ufe88\u0447\u0d15": [], "\u1e6f": 242, "\u1e6f\ua4d4": [], "\u1e6f\ua5e4": 242, "\u1e71": 242, "\u1e71\ua15a": 242, "\u1e73": 242, "\u1e75\u1481\u1121": 242, "\u1e77": 242, "\u1e77\ua4d7a\u2d09\ufbf4\u1295": 242, "\u1e79\u016f\u1fa6\ua0de": 242, "\u1e79\u0674\ua7fb\ua20d\ua2a3\u1027\u2d0e\ufb74\ua6ba": [], "\u1e7b": [], "\u1e7b\u179b\u0438": [], "\u1e7d\ua171\ua5ae\u14c0\ua08d\uaa71": [], "\u1e7f\u0d16": [], "\u1e7f\u1eab\ua96e": [], "\u1e81\ua17b\u1ed7\u0b3d\u10d4": [], "\u1e85": [], "\u1e85o\u149b": [], "\u1e87": [], "\u1e89": 242, "\u1e89\ua2d5": [], "\u1e8b": 242, "\u1e8b\u06a0\u1330\ua2a9": [], "\u1e8d": [], "\u1e8f": [], "\u1e91\u1831": 242, "\u1e91\uffb6\ua5b0\u2c6a": [], "\u1e93": [], "\u1e95": [], "\u1e95\u0cb3\u2148\ua51d\ua0dd\u0d22": [], "\u1e95\u1a2e": 242, "\u1e98": [], "\u1e99\u11c6\ua9a3\u14f4": [], "\u1e9b\u1ebb": 242, "\u1e9c\u057e": [], "\u1e9d\u084a": 242, "\u1e9d\u12e2\u2c58\u1335": [], "\u1e9d\ua114": [], "\u1e9f\u1b99": 242, "\u1ea1\u08aa": [], "\u1ea3\u011d": 242, "\u1ea5": 242, "\u1ea5\uabdf\u1539": 242, "\u1ea7": [], "\u1ea9": [], "\u1eab": [], "\u1ead": [], "\u1ead\u0115": [], "\u1eaf": [], "\u1eaf\uab88\u0a9f": [], "\u1eaf\ufcb8\u313d": [], "\u1eb1\ua9ac": [], "\u1eb3": [], "\u1eb3\u16ea\u0788\u3073\ua649\u1fb3\ud7de\u17b3\ua1d0\u0c25\u1464": [], "\u1eb5": [], "\u1eb5\u195f": [], "\u1eb7": 242, "\u1eb7\uaa26\u0939\u1f79": [], "\u1ebd": [], "\u1ebf": [], "\u1ebf\u03c9\ua0ef\u1116": [], "\u1ebf\u0a1e\u1d09": 242, "\u1ec1": [], "\u1ec1\u1ce9\u1514": [], "\u1ec1\u1f14": [], "\u1ec1\uab0a\u172c\u3189": 242, "\u1ec5\u1622\u18ca": 242, "\u1ec5\ua0f0": [], "\u1ec7\ufcd8": [], "\u1ec9\u1a04": 242, "\u1ec9\ua222\u1120\u1baf\ufd00\u124d": [], "\u1ec9\ua41d": [], "\u1ecb\ua155\u2c7d\u0564\u03b3\u162a\u16db\ua014\u14fd": [], "\u1ecb\ufecd\u03ad\u1584\ua18c\ua17a\u08af": 242, "\u1ecd\u091d": [], "\u1ecd\u1155\u1204": 242, "\u1ecd\u155f": [], "\u1ecf": 242, "\u1ed1": [], "\u1ed1\u1ee7": [], "\u1ed3": [], "\u1ed3\u1767": [], "\u1ed3\u1896\u0574\u132a\u1fa1\uaae2\ua787\u1e65": 242, "\u1ed5\u06ad": [], "\u1ed5\u1787\u1d11": [], "\u1ed9": 242, "\u1edb\u3161": [], "\u1edb\ua246\ufea4": [], "\u1edd": [], "\u1edd\u1ea9\u2d8d": [], "\u1ee1": 242, "\u1ee1\ua015\u044a": [], "\u1ee5": 242, "\u1ee5\ufb85\u03ae\u0159": [], "\u1ee9": 242, "\u1eeb": 242, "\u1eed": [], "\u1eed\ua036": 242, "\u1eed\ufc4e": [], "\u1eef": 242, "\u1eef\u0253\u3052\ua2ba\u06d3\u1c0b\u063a\ua32d": 242, "\u1ef1\u1e5f\ufc8f\uaa8e\u1502": [], "\u1ef1\ufd5b\u1b2a\u1b10\ua723\u1459\u19c2\u0282\u30d0\u0772\u00e6": [], "\u1ef3": 242, "\u1ef3\ua2a2\u1821\u3109\u0153\u1490\u158a\ua689\u0281": [], "\u1ef5": [], "\u1ef7\u30db": [], "\u1ef9": [], "\u1ef9\u0679": [], "\u1ef9\uff95\ua55e": 242, "\u1efb\u0c9a\u2d91": 242, "\u1efb\u1685": [], "\u1efb\u1d1c\ufea8": [], "\u1efd": 242, "\u1efd\u01da\u14a6": [], "\u1eff": [], "\u1eff\u151a": [], "\u1f00": [], "\u1f00\u03c4": [], "\u1f00\u0559\u1f33": [], "\u1f01": [], "\u1f02\u013e\u0a9a\ua346\u0292\u117a\u1ee7\u0268": [], "\u1f02\u1e8f\uffc5\u11e8\u1d88": [], "\u1f02\ua74b": [], "\u1f03\u1653": 242, "\u1f03\u1ee9\ua77a": 242, "\u1f03\u30f0": [], "\u1f04": 242, "\u1f04\u052b\u0566\u2d18\u2d2d\u04d5\u1d4d\u0123": [], "\u1f05": [], "\u1f05\uffaf\u1f06": [], "\u1f06": 242, "\u1f06\u1589": 242, "\u1f06\ua424\ufd16\u1b2e": [], "\u1f06\ud7e4": [], "\u1f07\u0d8d\u2cc9\u0814": 242, "\u1f10": [], "\u1f10\u3080\u116c\ua2e6": 242, "\u1f11": [], "\u1f11\ua3ba\ua8f5\uaab9\u0113\u12b3": 242, "\u1f12": [], "\u1f12\u15f6": [], "\u1f13": 242, "\u1f13\u15fa\u10ff": [], "\u1f13\ua270\u0cde\u0b21\u16ad\u1edb\u01e3\ua2d9\u057f\ua41b\ua541\ufea8\u04bf\u1459\ufd06\ua2f1": 242, "\u1f13\ufec7\u1a34\u0b2f\u1050\ua818": [], "\u1f14": 242, "\u1f14\ufc1e\u0907\u199c": [], "\u1f20\u12ee\u0770\u017a": [], "\u1f20\ua2e6\u11dd\ud7f5\uffae\u0142\u11b3\u18e9": [], "\u1f21\u1d21\u05d8\u134d\u0297\u0cb0\u01a8\u0e15\u1db0": [], "\u1f21\ua645\ufd13": [], "\u1f22\u04e5\u11e9\u0584": [], "\u1f22\u1500\u0726": [], "\u1f22\u30b1\ua2dd\u1482\u150a\u1f66\ua7fd": [], "\u1f23": [], "\u1f23\u00f4\u2c5e\ua237\ua5fa\u3154": [], "\u1f23\u07a1": [], "\u1f23\u0e41": 242, "\u1f24\u03df": 242, "\u1f24\u098b": 242, "\u1f24\u0d8b": [], "\u1f25\u1769\u078f": [], "\u1f25\ua3da\u0ca0\ufe9f": 242, "\u1f27\u024d": 242, "\u1f27\u1fd2\u029a\u0446": [], "\u1f30": 242, "\u1f30\u0d13_\ua446\ufd74\u1e3f": [], "\u1f30\ua049\u179f\u03e7": [], "\u1f30\ua10c\ua141\ufc60": [], "\u1f31": [], "\u1f31\u062f": [], "\u1f31\uabad\u04a1": [], "\u1f32": [], "\u1f32\u0aac\u0a90": [], "\u1f32\u1e98": [], "\u1f33": [], "\u1f34\u0503": [], "\u1f35\u1644": [], "\u1f36\ufc35\ua6e3\ua9fb\u0195": [], "\u1f37": 242, "\u1f40": [], "\u1f40\ua336": [], "\u1f40\ufec7": 242, "\u1f41\u2d4a": [], "\u1f43\u2dd6\u1f64": 242, "\u1f44": [], "\u1f45\ua3db": [], "\u1f51\u0173\u1883\u1f24\u2d40\ua278": [], "\u1f51\ua2fc\u11c6\u1bcc\u15ed": 242, "\u1f51\uab41\ua0ae\u043a\uffb8\u0849\u07f5\u2d11\u0d1f\u1887\u07cc": [], "\u1f52": [], "\u1f53": [], "\u1f53\u112d\ufd23": 242, "\u1f54": [], "\u1f55\u15ee\u1468\u01d6\uaa1c\ua16e\u1102\u0437\u31fd": 242, "\u1f56\ufda7\u1554": 242, "\u1f57": [], "\u1f57\ufd5a": [], "\u1f60\u09af\u1a29": [], "\u1f60\u0d9a\u1100\u068a\u10d7\ua0cb": [], "\u1f60\ufbf9": [], "\u1f61": [], "\u1f62\u04c6": [], "\u1f63": 242, "\u1f63\u0a39\u0436": [], "\u1f64": [], "\u1f64\u2d45\u1596\uff8c": [], "\u1f64\ua276": [], "\u1f64\uff6b\ua229": 242, "\u1f65\u0d89\u17ab": [], "\u1f66\u0789\ua338\u0e1d\u3127": [], "\u1f66\ufc44\u3094": [], "\u1f66\ufd72": 242, "\u1f67": 242, "\u1f67\uff42": [], "\u1f70": [], "\u1f70\uffdb": [], "\u1f71\u0577\u0b94\u1b2f\u1d55\ua021": [], "\u1f71\u1fd6\ua4e1\ufb32": 242, "\u1f71\ua10f": [], "\u1f71\ua3a7\ua0dd\ua6a5\ud7d3": [], "\u1f72": 242, "\u1f73": [], "\u1f74": [], "\u1f74\u1337": 242, "\u1f75\u31a3": [], "\u1f75\ua32f": 242, "\u1f75\ua601": 242, "\u1f76\u0db6": 242, "\u1f76\u1429": 242, "\u1f77": [], "\u1f77\u0188\u1050\u189e\u1f74\u1f82\ua653\u03dd\ufc8e\u30e8\ua1e7": 242, "\u1f79\ua2f0\u0e43\ua167\u0da9": [], "\u1f7a": [], "\u1f7a\u1ebb\u10fa\u167d\u1edb\u1d13": [], "\u1f7a\u2dc0\u167a": 242, "\u1f7a\ua364\ua409\ufda2\u0e2a\u1b89": [], "\u1f7b": [], "\u1f7b\u1882\u1e83\ua329": [], "\u1f7b\u1e55": 242, "\u1f7c": [], "\u1f7c\u09bd": [], "\u1f7d": [], "\u1f80\u04f7": [], "\u1f80\ufd54\ua65b": [], "\u1f81": [], "\u1f81\ua0eb": 242, "\u1f81\uff7e\u0783": [], "\u1f82\u160f": 242, "\u1f83\u1ee5": [], "\u1f84": 242, "\u1f84\u134f": [], "\u1f85": 242, "\u1f85\u10de\u1a2a": 242, "\u1f85\ua89c": [], "\u1f86": 242, "\u1f86\ua345": [], "\u1f87\u080d\u1f34\u170e\u30c6\ua507": [], "\u1f87\u1014": 242, "\u1f87\u3096\ua5a2": [], "\u1f90": 242, "\u1f90\uffb7": [], "\u1f91\u0686": [], "\u1f91\u1993\u1bd1\uaa04\ua807\u1bdf\u125c": 242, "\u1f91\ua50c": 242, "\u1f92": [], "\u1f92\u0582\u1109": 242, "\u1f93\u1d3f": [], "\u1f93\ua9ab\u140c\u06af\u183e\ua56e\uaa10\u1105\ufc79": [], "\u1f93\ufc1f\u0912": [], "\u1f95\ua77c\u10e3": 242, "\u1f96": [], "\u1f96\u16db\u1d18": [], "\u1f96\u1e55\u098f": [], "\u1f96\uab0e": 242, "\u1f96\uff42": 242, "\u1f97": 242, "\u1f97\ua03f\ua454\u19c7\ua5cc\u0d61\u2dce\ua12c\ua3f2": [], "\u1fa0": [], "\u1fa0\u00fb\ua5d9": 242, "\u1fa0\ua330": [], "\u1fa1": [], "\u1fa1\ua399\u1e9c\u314e\u1d9d\u1fd0\ufc69\u11ec\u16b1": [], "\u1fa2\u057e\ua5a0\u02ba\u05d2\u1650\u1f20\ua3d8": [], "\u1fa2\u14a4": 242, "\u1fa4": [], "\u1fa4\u08a2": [], "\u1fa5": 242, "\u1fa5\u3046\ufcd6": [], "\u1fa6": [], "\u1fa6\u10ec": 242, "\u1fa6\u1d03": [], "\u1fa7": 242, "\u1fb0": 242, "\u1fb0\u0433\ua735": 242, "\u1fb0\u153a\u2c4a\u1d6f": [], "\u1fb1": [], "\u1fb1\u1d46": 242, "\u1fb1\ua32e\ua936\ua587\ufe79": 242, "\u1fb2": [], "\u1fb2\ua12c\ufd2d": 242, "\u1fb4\u063e\u0ab5": [], "\u1fb4\u0c30\u0565": 242, "\u1fb7\ufe9a\u0b2c\u1b84\ua4d3": 242, "\u1fbe": 242, "\u1fbe\u1da7\uabe2": [], "\u1fc3": 242, "\u1fc3\ua042\u0c0a": [], "\u1fc4": 242, "\u1fc7": [], "\u1fd0": [], "\u1fd0\u1f32\u1f72": 242, "\u1fd1": 242, "\u1fd3\u3174\ua6be": 242, "\u1fe0\u1a44\u112c\u1c6f\u1c12\u309e\ua9a5": 242, "\u1fe1\u2d13\u1e5d\u149c\u15dc": [], "\u1fe1\ua3d1\ufb97\ua27f": [], "\u1fe3\ua070": 242, "\u1fe5": [], "\u1fe5\u1d60\u12ec\u1345": 242, "\u1fe6": 242, "\u1fe7": 242, "\u1ff3": 242, "\u1ff6": 242, "\u1ff7\u00ee\u1767\ua0fa": [], "\u2071\u1fe5\u16c3\u313b": [], "\u207f": [], "\u207f\u1ed1\ufbac\u010f\u179d": 242, "\u207f\ua15e\u1d66": [], "\u2092\u07e9\u2d47": 242, "\u2093\u03ac\u092f\u0505\u3184\ufe94\u09a8\u016b\u0e32\u1570\ua1b1": [], "\u2093\u132f": 242, "\u2094": [], "\u2095": [], "\u2095\u077b\u1582": 242, "\u2096": [], "\u2096\u1217": 242, "\u2097\u2d50\ufd7d": [], "\u2098\ua2db": [], "\u2099": [], "\u209b\ua4fa\uab87\u1890": 242, "\u209c": [], "\u209c\u0169\u1000": 242, "\u2107\u1417": [], "\u210a": [], "\u210a\ufc88\ua2d4\u116f\uab12": [], "\u210b": 242, "\u210e": 242, "\u210f\u30d9": [], "\u2110": [], "\u2110\ua12a": [], "\u2111": 192, "\u2112": [], "\u2112\u12a5\u1104\u1f10": 242, "\u2113\u1826": [], "\u2119\ufb50": [], "\u211a\u1f03\u2c59\u147d\ua134": [], "\u211b\u0195\u1eff": 242, "\u211c": 192, "\u211d\u0b60": [], "\u211d\u0f66\u2d3d": 242, "\u2124\u1338\u00fe": 242, "\u2124\uff77\u11e7\u07a5\ufb95": [], "\u2128": 242, "\u212c\ufb4b\u1899\u1b94\u3166": [], "\u212d\ufce5": 242, "\u212f\ua2c0\u19c7\ua39d\ua4e2": [], "\u2130": 242, "\u2131\u12ee\ua5a1": 242, "\u2131\u1a45": [], "\u2133": [], "\u2134": [], "\u2135": [192, 242], "\u2135\u0e87": [], "\u2137": [], "\u2137\u195c\u0773": [], "\u2138": [], "\u2139\ua0f8\uaa9c\ua0c6": [], "\u2139\ua74d": [], "\u213d": [], "\u213e": 242, "\u213e\uaa96": [], "\u213f": 242, "\u213f\ua27e": [], "\u2145\u0d1c\uabac\u1790\ua2f1\ua5ea\u2d5f\u011f\u0a27": [], "\u2148\uab8a": 242, "\u2149\u1c0e": [], "\u214e": 242, "\u2184\u0716": [], "\u2c30\ua2a0\u161f": [], "\u2c30\ufb9e\u0ca5": 242, "\u2c31": [], "\u2c32\u0275": [], "\u2c32\u315f\ua697\u12ac": 242, "\u2c33": 242, "\u2c33\u043e": [], "\u2c34": [], "\u2c34\u07ca\ua448\ua252": [], "\u2c34\u16a1": 242, "\u2c34\ua936": [], "\u2c35\u0d94\u090b\ua3a0\ua811\u0974\u1890\u143d": [], "\u2c35\ud7ef": [], "\u2c36": 242, "\u2c37": 242, "\u2c37\u119e\u141d": 242, "\u2c38\uabc3": [], "\u2c39": [], "\u2c39\u1271\ua267\u017c\u311f\u0439\u1781\ua19c\u1bbb\u31b4": 242, "\u2c3a\u11c3\u0e13b": [], "\u2c3a\u1e11": [], "\u2c3b\u1ef1\u10ed\u0195": 242, "\u2c3b\ufbef\uff57\u0507\ua0bb\u0b27": [], "\u2c3d": [], "\u2c3d\u1b28\ua163\ufbe3\u2c3f\u00e5\u1f45": [], "\u2c3d\ufc04\uff43\u023f": [], "\u2c3d\uff6a\ua5af": 242, "\u2c3e\u18b6\ua01c": 242, "\u2c40\u00eb\ua160\uab7d\u0260": 242, "\u2c40\u2dd1": 242, "\u2c41\u0563": [], "\u2c41\u2c50\u12d2": [], "\u2c42": [], "\u2c43": [], "\u2c43\ua0fd\u141a\u185e\ua176\ufc19": 242, "\u2c44": [], "\u2c45": [], "\u2c45\u1eab": 242, "\u2c45\u2cd7\u0e18": [], "\u2c45\ufca9\ufd83\uff44\u03c9": [], "\u2c46": [], "\u2c46\uffb3\u056d\u1619": [], "\u2c47": 242, "\u2c48\u0690\u067d": [], "\u2c48\u0b8f\u2c4d": 242, "\u2c48\ufbfb\uaa07\u01e7\u080a": [], "\u2c48\ufdf7": 242, "\u2c49": [], "\u2c49\u02b2\u0217": [], "\u2c4a\u1d28\ua847": 242, "\u2c4b\u1478\u1a22\u0529\u3162": [], "\u2c4c\u02bd\u2dbc\ua797\ud7bb\ua3cf": [], "\u2c4c\u3063\uff4e\uffbd\u1381\u03c6\u17dc\ua203\ua934\u31b9\ua1ef\ua941\ua234\ufb40\ufb73\u1272": 242, "\u2c4d": [], "\u2c4d\ufc73": [], "\u2c4e": [], "\u2c4e\u00f3\u0283": 242, "\u2c4e\u128b\ufbad\ua463\u1b1a": 242, "\u2c4e\u30b3": [], "\u2c4e\uaae3\u0d2c\u1623": [], "\u2c4f": [], "\u2c4f\u0a8c": 242, "\u2c4f\u1208\u2c4b\ua28e": [], "\u2c4f\ua2f3\u1000\ufd79": [], "\u2c50": [], "\u2c50\u0d27": 242, "\u2c50\ufd55\u1d0f\ua2cf\ua21d\u2ce1\u1101\ua2fb\u1964": [], "\u2c51": [], "\u2c51\u0254\u161d": 242, "\u2c52\u17a6\u14bb\u12a0\u0223": 242, "\u2c52\uff41": 242, "\u2c53\u142a\u1465\u0296": [], "\u2c53\u1896\u3116\uaab5\u010b\u049f\u0153\u1841": [], "\u2c53\u1b2a\u12fd": 242, "\u2c54": [], "\u2c55\ua2a1\ufc4b\u0aa6\ufc24": [], "\u2c56": [], "\u2c56\ua36a\u0e19\ufd9b\ua739\ua848\u14f4": [], "\u2c57": 242, "\u2c57\u0467\ua43f\u2d4e\ua421\u06ab": [], "\u2c58": 242, "\u2c58\u0e29": [], "\u2c59": [], "\u2c59\u0d1b\u0263\u129e\u2ce3": 242, "\u2c59\u30b7\u1f67\u1703": [], "\u2c59\ua5b4\u15db\u1f01": [], "\u2c5a": 242, "\u2c5a\u0252": [], "\u2c5a\u0856": [], "\u2c5a\ua00d\u1fa7": [], "\u2c5b": [], "\u2c5b\u1538\u1828": 242, "\u2c5b\ua05e": [], "\u2c5b\ua592": [], "\u2c5c\u0567": [], "\u2c5c\u06b7": 242, "\u2c5c\u1163\uaa8c": 242, "\u2c5c\ufcc1\u03ce": [], "\u2c5d\u0d2a": 242, "\u2c5d\u0d33\ua424": [], "\u2c5d\u3042\u0a8a": [], "\u2c5d\u30af\ua729": [], "\u2c5e\u1a34\u120f\u0431": 242, "\u2c61": [], "\u2c61\u1f07\u1615\u2db9": 242, "\u2c65\u1d24\ua3b2\u1175\u115b\uab95": [], "\u2c65\u1e0b\ua0b9\u0448": [], "\u2c66": 242, "\u2c66\u1505\u1d3c\u1f83": 242, "\u2c68": 242, "\u2c6a\u0e88\u14de\u11ea": [], "\u2c6a\ufd29\ua2d8\u176a\u0235\u0c31\uaa93\u1652": [], "\u2c6c": [], "\u2c71": [], "\u2c71\ua31f\u01aa\u0434\u189c\u121c\ua026\ufe9e": [], "\u2c73": [], "\u2c73\u115b\u1324\u2c5c": [], "\u2c73\ua016": 242, "\u2c73\uabe0\u06af\u1c04\u313a": 242, "\u2c74": [], "\u2c74\ua90c\u10d9\u0433": [], "\u2c76": 242, "\u2c77\u1fa1\u11cb\ufdab\u1180\u11bf": 242, "\u2c7a\u2147": [], "\u2c7b\ufd58\ua757": [], "\u2c7c": [], "\u2c7c\u0972": [], "\u2c7c\ua025": 242, "\u2c7d": 242, "\u2c81": 242, "\u2c81\u1ecf": [], "\u2c81\u30de": [], "\u2c83": 242, "\u2c83\u0b1a\u1022": 242, "\u2c85": [], "\u2c85\u1110": [], "\u2c85\u1346\u1d7d": [], "\u2c85\ua4f5\u1881\u1507\u143b\ud7de": 242, "\u2c87\u0db4\u044c\u15be\u1e45": [], "\u2c89\u1499\u0909\ua508": [], "\u2c89\uaa1e": [], "\u2c89\uaaa7\uff6d": [], "\u2c8b\u1bc2\ufeea": [], "\u2c8b\u2c4f\ua241\ua966\u1119": 242, "\u2c8d": 242, "\u2c8d\u1b12": [], "\u2c8f\u2c4b\ufdb4": 242, "\u2c8f\u305d\u1287": [], "\u2c8f\ua586": 242, "\u2c91": [], "\u2c91\ua1bb": 242, "\u2c91\ufeb9": 242, "\u2c93\u1171": 242, "\u2c95\u0572\ua791\ua7fe\ufc91\u12f8\u0a9a\u076f\u04e9": [], "\u2c95\u1d0d\u1da1\u072f\u0edf": [], "\u2c97\u1333\u05e3\ua227\u03b8\ua2af": [], "\u2c97\u31f9": 242, "\u2c97\ua270\ua9fa\u1d65\ua992\u0499": [], "\u2c99\u0451\u1508\u1551": 242, "\u2c99\u18e8": [], "\u2c99\u1b8d": 242, "\u2c9b\u30f4\u2d25\u0225\u0b89": [], "\u2c9b\ufd0f\u1ba0\u1d25\u03b8": [], "\u2c9d": [], "\u2c9d\u1e25\u31f2\u00ef": [], "\u2c9f": [], "\u2c9f\u09a8": 242, "\u2ca1": [], "\u2ca1\u198c\uab3e": 242, "\u2ca3\u0436": 242, "\u2ca3\u1f33\u1d66": [], "\u2ca3\ufc16": 242, "\u2ca5\u00f8": [], "\u2ca5\ua280\ufc2e": [], "\u2ca7": [], "\u2ca7\u1139\u0da4": [], "\u2ca7\u3157\u1b8a\u0e46\u0e82": 242, "\u2ca7\ua541\u149c": [], "\u2ca7\ufcd9\uaa01": 242, "\u2ca9\u31b6\ua00a\u092f\ua082\u1e9a\u0e22\u1744\ua1c9": 242, "\u2cab": [], "\u2cab\u0988\u0e0b\u1f7c\u1a45\u17a4\u0ab2\u11a4\u2115": 242, "\u2cab\u2ddc\u2e2f": [], "\u2cab\ua388\u062f": [], "\u2cad\ua37d\ua66b\ufd3c\u19c3\u19a4\u07d1\u080a\uabb8": [], "\u2caf\u2caf\u1c1ea\u1347\uaa08": [], "\u2caf\ua14d\ud7d8\u2daa\ufd94": 242, "\u2cb1\u11ad": [], "\u2cb1\u18e4\u037a\u149b": [], "\u2cb1\ua404\u050d": [], "\u2cb1\ua689": 242, "\u2cb5\u10eb\ua51b\ufbb1\ua3ca\u1569": 242, "\u2cb7": 242, "\u2cb7\u1124\u067c": 242, "\u2cb9\u044d\u16e1\ufead\ua3b1\u11c5": [], "\u2cb9\u0dc4\u1b48\u00ef": 242, "\u2cbb\u113d\ua641\u01e9": 242, "\u2cbb\ua007": [], "\u2cbd\uff9d\u0121\u0714\u16a1": [], "\u2cbf": [], "\u2cbf\ua407\u2db2\ua0d0\u0523": [], "\u2cbf\ua799\ua035\ua085\u1a28\u0455": [], "\u2cc1": [], "\u2cc1\u1245\u1bda\u0493\u110d\u091e\u07cd\ufbf3": [], "\u2cc3": [], "\u2cc3\u2da9\u1e4d\u3065": [], "\u2cc3\ua161\u0723\u1e53": 242, "\u2cc5": 242, "\u2cc5\u014f": [], "\u2cc5\u072f\ua66b\u1466\u1720\uabd7\ufd6e": [], "\u2cc9\ua111\uffda\u12cd\u130b": [], "\u2ccb\u12fa": [], "\u2ccb\ua514": [], "\u2ccb\ua590\ua5f0\ufc97\u043c": 242, "\u2ccd": 242, "\u2ccd\u051b\u1e77\uff7f": [], "\u2ccf": [], "\u2ccf\u1913\u1565\u1f31": 242, "\u2ccf\uaabb\u10f2": [], "\u2ccf\uffcd\ua2f5\ufd38": [], "\u2cd1": [], "\u2cd1\ua2cf": 242, "\u2cd1\ufd03": [], "\u2cd3": 242, "\u2cd3\u1e49": 242, "\u2cd3\ua21c": [], "\u2cd3\ua601": [], "\u2cd3\ua619": [], "\u2cd5\u1b98\uff7e\u158b\u2c4b": 242, "\u2cd5\ufbe9\uff82": [], "\u2cd7": 242, "\u2cd7\u15d2\u0450": 242, "\u2cd9": 242, "\u2cd9\u0813": [], "\u2cd9\ua56c\u02ce": 242, "\u2cd9\ufd5a\ua432\ua96d": [], "\u2cdb\u0c19": 242, "\u2cdb\ua0a0\u0763\u2098": [], "\u2cdd": 242, "\u2cdd\u03db\u2093\u1c21\u1195\uff9b\u025a\ua5ca\u117f\ua520\u1a40\ua014\ua02e\ua605\uaa80\ua3a4\ufbe4\ua0e9\ufbb0": [], "\u2cdd\u0da8": [], "\u2cdd\ua53e\uff82\u30c2": [], "\u2cdf\u18c3": [], "\u2cdf\ua0a8\uff92\u1bc3\ua01b": [], "\u2ce1\u1617": [], "\u2ce1\u2d0c": 242, "\u2ce1\ua54e\ua9e2\u18d7\u0235": 242, "\u2ce3": 242, "\u2ce3\ua99e": [], "\u2ce4": [], "\u2ce4\u2c7a\u19b7\u0515": [], "\u2cec\u07e8": 242, "\u2cec\ua276": [], "\u2cee": 242, "\u2cee\u1f22\u2c8f": [], "\u2cf3": 242, "\u2cf3\u14c6": [], "\u2cf3\ua402\ua2ad\uaba8\ua301\u026d": [], "\u2d00\u03e3\u133a": [], "\u2d00\u1278\u11a0\u1560\u190f\u1d34\ua8f7": [], "\u2d01\u1343\ufcce": [], "\u2d01\ua010\ua559\ud7b2": [], "\u2d01\ua47a\ufb90\ua22b\u1bdb": [], "\u2d02": [], "\u2d03\u0793\u1131": [], "\u2d04": 242, "\u2d05\u0c22\u1f11\ua33f\u1023": [], "\u2d05\ua291": [], "\u2d06": [], "\u2d06\u0e15\u2cc7\u04bf": [], "\u2d07\u027c\u02ee\ua26a\u0ec6\u16b5\u1d2d": 242, "\u2d07\u091d\u311a\ud7db": 242, "\u2d07\u0e08\u0562\u0146\u113f\u14ac": [], "\u2d08": [], "\u2d08\u0923": [], "\u2d09\ua5a6\u2d62\ua100": [], "\u2d0a\u18b3\ufc08": 242, "\u2d0a\u1b9d": [], "\u2d0a\u1e1f": [], "\u2d0b": [], "\u2d0b\u0263": [], "\u2d0b\u06b2\ua462\ua4f1": 242, "\u2d0c": [], "\u2d0c\ua9b0\u0435": [], "\u2d0d": [], "\u2d0e\u0d35\u1ceb": [], "\u2d0e\u121f\ua204\ufd9c": [], "\u2d0e\u1bd2\ufb84": 242, "\u2d0f": [], "\u2d0f\u12a6": [], "\u2d0f\ua681\ua78c\ua5bb\uab57": 242, "\u2d10": [], "\u2d11\u3053\ua319": [], "\u2d11\ufb6c": [], "\u2d12": [], "\u2d12\u1bbd": 242, "\u2d13\u1158\ufce8\uff89\u1b05\u03c1": [], "\u2d13\u1909\u1606\uab51\ud7ed\uabbc": 242, "\u2d14": 242, "\u2d14\u1f44": [], "\u2d15": [], "\u2d15\u3055\u1f13": [], "\u2d15\ua394": 242, "\u2d15\uaae4": [], "\u2d16\u1218\uaa60": [], "\u2d17\u2ca1\u165a\u0696\u1e96": 242, "\u2d19\u056a\ua096": 242, "\u2d19\ufd98": [], "\u2d1a": 242, "\u2d1a\ua06f\ua68f\u03ce\u1fd2": [], "\u2d1b": [], "\u2d1b\u305c\u0cf2\uff86\ua7a7": 242, "\u2d1c": 242, "\u2d1c\u1da1\u1eff": 242, "\u2d1d": [], "\u2d1d\u0d8e": [], "\u2d1d\ua242\uff6c": [], "\u2d1d\ua64f\u0ab2\u0b99\u1f37\u2d20": [], "\u2d1e": [], "\u2d1f\ua844\ua42e\u0511\u0463\u0c9b\u14ab": 242, "\u2d20": 242, "\u2d20\ua486\ua115\ua79f": [], "\u2d21\u11f8": [], "\u2d22": [], "\u2d22\u30d2\u0c0c\u157d\u161b\ua21a\uff80\u191c": [], "\u2d24": [], "\u2d25": 242, "\u2d27\ua058\ufc2e\u0a22\u1e51": [], "\u2d27\ua61a\ua030\u0b9f\ua2ff\u1b1f": [], "\u2d27\uabbf\u16f8\u0779\u312d\ua2c8": 242, "\u2d2d": [], "\u2d2d\u1fe7\u0443\u1e8b": [], "\u2d32": [], "\u2d32\u037d\u1e3d\ua1fa\u127f\ua19d\u1235\u2dad": [], "\u2d32\ufd84\u1d57": 242, "\u2d33": 242, "\u2d34": [], "\u2d35\u0f42\ua12e\u3172": 242, "\u2d35\ua375\ua8aa\ua800": [], "\u2d36\ua205\u06d5\u2ca5": [], "\u2d37": 242, "\u2d37\u121d\u1f55": [], "\u2d38\u130f\ua3ab": [], "\u2d3b\u0523\u3161\ua5ea\uff51\ufc2e\ua23f\u2d8c\u0ca7": 242, "\u2d3b\u30b4": [], "\u2d3b\ua0b6": [], "\u2d3c": 242, "\u2d3c\ua870\u172c\u0b38\u047d": [], "\u2d3d": [], "\u2d3e": [], "\u2d3e\u0976\u1131\uab8e": [], "\u2d3f\u15ac\ua532": 242, "\u2d3f\ua247\ua2de": [], "\u2d3f\ua2a8\ufc5f\u091b\ua471\u1420\uab20": [], "\u2d40\uab23": [], "\u2d42\u04fb\u18aa\u1cf1x": [], "\u2d43": [], "\u2d43\u048f\u1638\u1a46": [], "\u2d44\ua261": [], "\u2d44\uab64\u04b3\u0777": [], "\u2d45": [], "\u2d45\ua138\u02ab\u1826\u0714\u30f9": 242, "\u2d47\u0571\ua737": [], "\u2d48": [], "\u2d48\u1423\u026c\u1bce": [], "\u2d49": [], "\u2d4a": 242, "\u2d4a\ua41e\ua8b0\u1445": [], "\u2d4b": [], "\u2d4b\ua76b\u1616": 242, "\u2d4b\uaae4\ufeef\u0135\u0790": [], "\u2d4d\ua022": [], "\u2d4d\ua1c8\u0523\ua9ad": [], "\u2d4e\u11c8\uabdd": [], "\u2d50": [], "\u2d50\u03ac\u1832": 242, "\u2d51": 242, "\u2d52\u0e2d": [], "\u2d54": [], "\u2d55": [], "\u2d56\ua69d\u06cd\uabe1": [], "\u2d57\ua5d0\u15c2\u0d08\u01d4\u1b46": 242, "\u2d59\ua04c\ua20f\ua6d6\u0d39\ufc64\ua2df\u05ea": [], "\u2d5a\ua2df\uab53\u1a0b\ufd6e\u0b24\u02a8": 242, "\u2d5b\u04cf": 242, "\u2d5e\ua469\ua2f1": [], "\u2d5f\ufef1\u2da3": [], "\u2d63": 242, "\u2d64": 242, "\u2d65\u1b1d": [], "\u2d65\uab8b\uaa06": 242, "\u2d66\u0277": 242, "\u2d6f": [], "\u2d80": [], "\u2d81\u03b8": [], "\u2d83\u0441\u0573\ua24e\u1002\u0287\u03f8\u10f8\ua590\u2dd8\u1fe0\ua58d\u18c8\ufdb1\u0562\u2cdb\ua35e\uff57": [], "\u2d83\ufcb3\ua853": 242, "\u2d84": [], "\u2d84\ua2aa\u176a\u0d61": [], "\u2d84\ufccc": 242, "\u2d85": [], "\u2d86\u3058": 242, "\u2d8a": [], "\u2d8a\u2d03\u18bf\ua23e\u00f4\ua433\uffb4\ufd8a": [], "\u2d8b\u0586\u0266": 242, "\u2d8e": 242, "\u2d8f": [], "\u2d8f\u16a2": [], "\u2d90": [], "\u2d90\u0497": 242, "\u2d93": [], "\u2d94": [], "\u2d95": [], "\u2d96\uaa70\ua687\ufb68\u06c7": 242, "\u2da1\u0d34": [], "\u2da2": 242, "\u2da3": [], "\u2da5": 242, "\u2da6": [], "\u2da9": 242, "\u2daa\u15cf\u08a2": [], "\u2daa\ua19c\u0ad0": [], "\u2dab": [], "\u2dab\ua4e2\u1dae\u00df": [], "\u2dac": [], "\u2dad": 242, "\u2db0\u1c10": [], "\u2db1\u15a3\ua22a\ua7f7\u09dc": 242, "\u2db1\u1e1b\uff57\u10ec\u11ee\ua651": [], "\u2db3": 242, "\u2db3\u1e0f\u2d5c\u12b9\u02ce\u0ab7\u0a36": [], "\u2db4\u04ce": [], "\u2db4\u0521": [], "\u2db6\u01cc\u16cd": [], "\u2dbc": 242, "\u2dbc\ud7b3\u0527\ua2ad": [], "\u2dbd\ua04f\ufc15\u056a\ufdf2\ua1ae\ua6ac\u1a32\u151c\ud7b5": 242, "\u2dbd\ua050": [], "\u2dbe\u01b0\ua6c5\u1f30\u00f6": [], "\u2dc1\ua07d\ua1cb": 242, "\u2dc1\ua4e0\u14d1\ua915\u1e3d\uaa20\u1eeb": [], "\u2dc2\u0c0a\u0f54": 242, "\u2dc4\u19c3": 242, "\u2dc4\u1fb3": [], "\u2dc4\ua323": [], "\u2dc5": [], "\u2dc5\u1d02": [], "\u2dc6\u1ed3": 242, "\u2dc6\u3151\ufee4\ua512\u04a3\u010b\u16d7": [], "\u2dc8\u037b": [], "\u2dca\ua007\ufdb6\u318e": 242, "\u2dcc": 242, "\u2dcd": 242, "\u2dce\u0d92\ufe8c\u1a4f\u068d\u1e97": [], "\u2dd1\u1533\ua1bc": [], "\u2dd2\uffba\u0e9c\u0e1b\u118d": [], "\u2dd3": [], "\u2dd4": 242, "\u2dd4\u1b1c": [], "\u2dd6\ufc74": [], "\u2dd8": 242, "\u2dd8\u0211\ufdb7\u101a\ua323": [], "\u2dda": [], "\u2dda\u12a7\ua202\u0b13\ua2c3\u0f50": 242, "\u2dda\ua5b7\uaadc": [], "\u2ddb\u118d\ufe8f\u1326\u2cc5": [], "\u2ddc\u0a18\u14bc": [], "\u2ddd\u15c7\u0138\ua4eb": [], "\u2dde\uab11": 242, "\u3032\ua5b4\ua3e1": [], "\u3033\u078e\ua06a\u211c\u0188\u051d\u063a\u01c6\ufd70": [], "\u3033\ufdbc\ua0bf": 242, "\u3035\ua01d": 242, "\u3035\ua23c\uff72\uffc3\ufdb6\u2dd5\u0a89\u17a0\uabb6\u30d8\ua145\ua8ad": [], "\u3041\u1f94\u3032\u0ea1": [], "\u304b\ua031\ua753": [], "\u304c\u00e8\u0ab8\u1515\u03b2": 242, "\u304e\u158f\u052f\ufb8c": [], "\u3052\u30d6\ua13a\u078e\ufb5c": [], "\u3054\ua550\u15d1\ua14d": [], "\u3055\ua307\ua31c\uaa0f\u0728": [], "\u3056\ua154\ufedb": 242, "\u3057\u132f\u0e17\u1440\u0261": [], "\u3059\ua0d7\u30b5\u134b": 242, "\u305b\u0778\u2d0d": [], "\u305e\u1e37\u156e": [], "\u305f\ua1be\ua2b2": 242, "\u3060\u1bd7\u14d0\u1b85\u0775": [], "\u3061\ua378\ua3bf\u17a7\u095b\u16b6\u16c1": [], "\u3062\u02ab\u092a\u0b10": [], "\u3064\u11d6\u1485\ua797\u062a\u15ec": 242, "\u3066\u1e7d\u0259\uabbb\ua6a3\u0baf": [], "\u306e\u1f15\uff59\ua73b\u0d07\u1670\u3144\u0452\u1630\u045f\ua396\u1daf": [], "\u3072\ua3dd\ua603\u1222\u1d8b": [], "\u3074\u2c51\ud7b2\u1b1c": [], "\u3078\ua056\ua0d0\u2c38": 242, "\u307a\ua303\u18d8\ufea9\u30eb": [], "\u307d\ufebc\u1d3f\ua893\ua32b": 242, "\u307e\u308f\u3057\u8005": 351, "\u3084\u051b\u31ac": 242, "\u308b\u1a3c\u1a53\u1c13q\u01c6": 242, "\u308c\uaba6\ua200\uffa2\u1952": [], "\u308d\ua097\u1e4d": [], "\u308f\u08a1\u0e03\u2d81\u1e37": [], "\u3092\u0790\ua370": [], "\u3093\u1109\ua530\ua5bb\u0622\u11b0\u17afx\u0a20\u2d42": [], "\u3094\u0724": 242, "\u3095": 242, "\u3096\ua53b\ua4df": 242, "\u309d\u01f3\u17a8\u18f1": 242, "\u309d\ua32c\u1e27\u1351\ua57c": [], "\u309e": [], "\u30a1\u318a\ua244\u1278": [], "\u30a3\ufcf6\ua1b9\ua488": [], "\u30a4": [], "\u30a5": 242, "\u30a5\u1bd2\ufe8f\u12cc\u069a\ud7c2": [], "\u30a6\u0582\u11b1": [], "\u30a6\u1bd9\u2113": 242, "\u30a6\u311b\u30bc\u2c51\ua80d\u1fa2\u31a4\u134a": [], "\u30a7": 242, "\u30a7\u0da2\u12a3": [], "\u30a9\uabaa": [], "\u30a9\ufd30\ua2fd": 242, "\u30aa": 242, "\u30ab\ua442": [], "\u30ac\u00ed": 242, "\u30ac\ua0eb": [], "\u30ae": [], "\u30af\u1da2\u3179\u1476\u0801\u0d90": [], "\u30b0\ua220\ua41b\ud7f0\u105c\ua06b\u31b3\ufd0b": [], "\u30b1\u1d51\u1da8": [], "\u30b3\ua2f7\ua5e3": 242, "\u30b4\u2c31\u1fe1\u3085\u30bc\u2c87\u11b5\u159c\uaa8c\uab47": [], "\u30b4\u2cec": 242, "\u30b6\u080d\u1d5d": 242, "\u30b6\ud7ba\u0621\u1358\u2dc9\u0729\u2d87": [], "\u30b7\ua12f": 242, "\u30b8\u1b45": [], "\u30b9": 242, "\u30b9\u30d1\u30a4": 351, "\u30ba": [], "\u30bb\ua161\u0c59": [], "\u30bb\ua35d\u1bae\u1f7c\u0a1f\u117e\uaa61\ufeba\u11dd": [], "\u30be\u2ccd": 242, "\u30be\u3157\ua032\ua5ac\ua920\u1534": [], "\u30be\ua08c\u026f\ua113\ua1aa": [], "\u30c0\uaaa9\u17a9\u1d43": [], "\u30c1\ua69b": 242, "\u30c2": [], "\u30c3": 242, "\u30c4": [], "\u30c4\ufd54": [], "\u30c5": [], "\u30c5\ufed4\u19aa": [], "\u30c6\u1140": [], "\u30c7\u1451\u30f6\u1a15": 242, "\u30c8": [], "\u30c9\u15fd": [], "\u30ca\u0986\u1509": 242, "\u30ca\ua526\u0585\ua0c6": [], "\u30cb\u0b27\u2ca5\u1d25\ufc90": 242, "\u30cd\u0456\u0ca7\uaa8a": [], "\u30cd\u1a13\u1635\ua57a\u0932": [], "\u30ce": [], "\u30cf\u30ed\u30fc": 261, "\u30cf\ufba2\ua8a2": 242, "\u30d0\ufbf8\u0728\u3087\uab8e\u019a\u2d40": 242, "\u30d1": 242, "\u30d3\ua139\ua4f0\u03e9\u310c\u0d2f": [], "\u30d3\ua2ef\ua240": [], "\u30d4": 242, "\u30d5": [], "\u30d6": [], "\u30d7\ua5a8\u1110": [], "\u30d8\ua07c": [], "\u30da": 242, "\u30dc\ua3c6\uabce": [], "\u30dc\ufbf0\ua1bd\ua896\ud7cc": 242, "\u30dd\u03f3\u3090\u18a4": [], "\u30de\u1749": 242, "\u30df": [], "\u30e0\u0937\u043d": [], "\u30e1": 242, "\u30e3\u12afy\u0db5\u1168": 242, "\u30e3\ufbb1\ua5f4\u076b\u1a54": [], "\u30e5": [], "\u30e5\u11c4\ua140\u1501\ua8f6\u1be2\ua00e\u121e\ufd33\u0987\u123f\u0911": [], "\u30e5\ua99e\u1668": 242, "\u30e6\ua1db": [], "\u30e8": [], "\u30e9\u130a\ua14f\ua814\ud7e9\ua420\u178d": [], "\u30e9\uaa63": 242, "\u30ea\ua2ed\u115d": [], "\u30ea\ufd20\u0454\u0247\u14b5\ua98e\u0d31\u1f44\u02a2\ufc7f": [], "\u30ed": 242, "\u30ed\u12f6": [], "\u30ef\u1c6d": 242, "\u30ef\ua34d\uab56": [], "\u30f1": [], "\u30f1\u1281\u1c6a\u30e1\ua0aa\ua3ba": [], "\u30f3\u044a\ua7ff": 242, "\u30f4\u1c4d\u18e9\ua3a3\ua130": 242, "\u30f5": 242, "\u30f6": [], "\u30f6\u1f11\u1c74": [], "\u30f7": 242, "\u30f7\ua43c\u07ea\u191c\u1301\u09dd": [], "\u30f8": [], "\u30f8\ua0d9": [], "\u30fa": [], "\u30fc\u2d0f\u2dd0": 242, "\u30fd\ua3f5\u30d9": [], "\u30fd\ua66e": [], "\u30fe\uff4a": 242, "\u3105\ua462": [], "\u3106\u022f\ufc12\u052f\u15ff": [], "\u3108": [], "\u310a\uab25\uffc3": 242, "\u310b\ua3c5\ua9a2": 242, "\u310d\uab41\u10de\u0910\u1f77\u01c2": [], "\u3110\ufca3\u1835\ua0dd\u03b8\u09b8\u114d": 242, "\u3113\u12ba": [], "\u3115": 242, "\u3118": 242, "\u311b": [], "\u311b\uaba1\ua1cd\ua4d1": 242, "\u311c\u131d": [], "\u311c\ud7dc\u11c5": 242, "\u311d": [], "\u311e": [], "\u311e\u0622": 242, "\u311f\u0695\u12b3\u3168": [], "\u311f\u15cb": [], "\u3120\ud7eb": [], "\u3121": [], "\u3121\u15ba": 242, "\u3123": [], "\u3123\u0584\ufd79": [], "\u3125\ua60b": [], "\u3125\ufd78\ufef6": [], "\u3126\u14cd": [], "\u3126\ua735\u190f\u06d2": 242, "\u3127\u0575\u0521": 242, "\u3128": [], "\u3128\u0e2a": 242, "\u3128\ua525\u1e67\ua4e4": [], "\u3129\u0266\u0934": 242, "\u3129\ua523\u184b": [], "\u312a": [], "\u312a\u00e4\u117b": 242, "\u312b": [], "\u312b\u1266\u3179\ua04b": 242, "\u312b\ua521": [], "\u312c\u0f4d\u050b\u16b7\u1723\u01a1\u154a\u16a1": [], "\u312d": [], "\u3131\u1075\ua963": 242, "\u3132": 242, "\u3132\ua036": [], "\u3134\u013a": 242, "\u3134\u18dd": [], "\u3135": [], "\u3136\u1d42\u30f0\ua191\u160c\u0d85": [], "\u3137": 242, "\u3138": [], "\u3139\u1869": [], "\u313b": [], "\u313c\ua46d": [], "\u313d\u06a9\u00e0\u0439\u10f4\ufd7a": 242, "\u313e\u1261\u1388": [], "\u313e\u178c": 242, "\u313f": 242, "\u313f\ua699\ua98d\u2c30\ua6b2\u015d": [], "\u3140": [], "\u3140\uffd5\u0233\ua683\ua9a8": [], "\u3142": [], "\u3143\u0440\u0799": [], "\u3144": [], "\u3144\u0167\u1791\ua522\u188c": 242, "\u3145": [], "\u3145\u0b1c": [], "\u3147": 242, "\u3148": [], "\u3148\ua142\ufc08": [], "\u3149\u1452\ufb38": 242, "\u314a": [], "\u314a\u1796": 242, "\u314c": 242, "\u314d\u195a\ufc64\u1e4f\ua986\ufcdb\u027a\u1258\u1a06": 242, "\u314e\ufb25\u012f\ufec5": 242, "\u314f\ua663\ua9ef": [], "\u3152\uaa61\u0151\u0da1\u161d\ua23d\ua5c3\u1876": [], "\u3152\uabad\u3175": 242, "\u3153": [], "\u3153\ua37f\ua731": [], "\u3155\u056f\u101d\u03bf\u09a5\u1d17\u1ea1\u0ec2\u1fd7": 242, "\u3155\u103f": [], "\u3156": [], "\u3158": [], "\u3159\ua1bb": [], "\u315a": [], "\u315a\u0d92": 242, "\u315a\ua299\u00ee\u2c3f\u1c77\u1ec9\u0499\u2c99\ua37c\u1784": [], "\u315b": [], "\u315b\ua86b\u0aa4\u1d96": 242, "\u315c": [], "\u315c\u0e1b\ud7f2": 242, "\u315d\u1d96\ufeaa\u00eb\u11bb\uaa73\u01b4": [], "\u315e\ua61a": 242, "\u315e\ufb00\ua429\u1602\u00e3": [], "\u315f": [], "\u3160": [], "\u3160\ua739\ufd28\ua556": 242, "\u3163\u03bc\u10f5": [], "\u3164": [], "\u3164\u0a06\ua2f3\uab39": [], "\u3165\u1c0d\u1994\ua683\ua8f5\uff72": [], "\u3165\uaa11\ufb4c": 242, "\u3166": 242, "\u3167\u1899": 242, "\u3168\u101c\ua9fa\ufd26\u1897\ua65d": [], "\u3169\ufb63": 242, "\u3169\uffb9\ufcc9\u1c07": [], "\u316a\ua866\u0580\u2c81\u1302\u14d0\u1999\ua0cd\ua858": [], "\u316b": [], "\u316b\u0d39": [], "\u316c": [], "\u316d": [], "\u316e": 242, "\u316f": 242, "\u316f\ua307\ua74d": [], "\u3170": [], "\u3171\u0630\u04c8": [], "\u3173": 242, "\u3173\u08ab\ufc7f": [], "\u3175": [], "\u3176": 242, "\u3177": [], "\u3177\u0c24\u1fb0\u0694\u15d8\ufc87\u1458": [], "\u3178\u31f5\u0b30": 242, "\u3178\ua322\ua791\u1903g\ua18b\ua457": [], "\u3179": [], "\u317a\u0142\u1c66\ud7f6": [], "\u317b": [], "\u317c": [], "\u317c\u03e7\u020d\u056b\u0258": [], "\u317d": [], "\u317e\ua45f\u2d82": 242, "\u317f\u1c6e\u14b9\ua3ae\u1a00\ua1cf\ufb55\ua669": [], "\u3181": 242, "\u3181\uaa03\u09e0": [], "\u3185\u0950": [], "\u3186": [], "\u3187\u2c79\u1da9\u04a1\u1065\ua4d5\u01bd": [], "\u3187\ua17b\u11fd\u30b0\u15b2\u10fa": 242, "\u3187\ufcdc": [], "\u318b\u1020\u0e29": 242, "\u318c\u2d92\u31f4\ua454": [], "\u318d": 242, "\u318e": [], "\u31a0\ua605\u00ff": 242, "\u31a1\ufcd5\ua459\u03c5": [], "\u31a1\ufcf7\ua765\ua861\u0d2a": [], "\u31a2": [], "\u31a4\ufc43\u18e1": 242, "\u31a5": [], "\u31a5\u014f": [], "\u31a6\u1829\uaa7e": 242, "\u31a6\ua171\uaab9": [], "\u31a6\ua71e": [], "\u31a7": 242, "\u31a7\u1766": [], "\u31a8": 242, "\u31a8\u011b\u1e81": [], "\u31a9": [], "\u31a9\ua514\u09dd": [], "\u31a9\uaa19\u1380\u18c1": 242, "\u31aa": 242, "\u31aa\u31fa\u03d1\u305c\u1353": [], "\u31ab\ua75b\u0566": [], "\u31ac\u027a": [], "\u31ad\u1023\ua89a\uab46\u0bb6\u2c6c\uaba3": 242, "\u31ae\ua217\u30a4": [], "\u31b0": 242, "\u31b0\u01c1": [], "\u31b1\u045d\ua337\u1d97": [], "\u31b1\u2c4a\ua1bf\ua05b\ua416": 242, "\u31b2": [], "\u31b3\u149e": 242, "\u31b3\ua50a\u165e\ua6e1\u0e87\u1389\u1d09": [], "\u31b4": [], "\u31b5\u1725\u04bb\u0373": [], "\u31b5\uabd7\u03b0\u06d1": 242, "\u31b6\u1b1a": [], "\u31b7\ua529": 242, "\u31ba\u1443": [], "\u31ba\u1e03": 242, "\u31ba\ufcb5\u11a6": [], "\u31f2": [], "\u31f3": [], "\u31f3\u18d2\ufd08\u04bd\u01e3\uab72\u0c12": [], "\u31f4\u0993\u1f12\ufcb7\ua6d2\ua222\ufecb\u03e9\u1d2c": 242, "\u31f5\u1850": [], "\u31f5\u1fd1": [], "\u31f7\u3188": [], "\u31f8": [], "\u31f9": [], "\u31f9\ua8a6\u19b6\ufb84": [], "\u31fa\u03af": [], "\u31fb\u1986\uaba7\u3086\u1347\uab9b": 242, "\u31fb\ua315\u2c6c": [], "\u31fc\u30ee\u0d9c": [], "\u31fd": [], "\u31fd\u1156\ufedd\u044b\ua077\u1fb1\uff51\u07a0\uab38\u01cc\u2d1a\u1ecd": [], "\u31fe\u1188": 242, "\u31ff": 242, "\u4e0d\u9023\u7d9a": 261, "\u4e2d\u6587": 250, "\u5171": 261, "\u5206\u8bcd\u5668": 250, "\u56de\u3057\u8005": 351, "\u56de\u8005": 351, "\u5897\u52a0": 261, "\u5bc6\u5075": 351, "\u5de5\u4f5c\u54e1": 351, "\u5efb\u3057\u8005": 351, "\u5efb\u8005": 351, "\u63a2": 351, "\u63a2\u308a": 351, "\u65af\u5766\u798f": 250, "\u661f": 261, "\u662f": 250, "\u6709\u9650\u516c\u53f8": 242, "\u671f\u5f85": 261, "\u697d\u5929\u682a\u5f0f\u4f1a\u793e": 242, "\u6d4b\u8bd5": 250, "\u72ac": 351, "\u767d\u8272": 261, "\u793a\u3057": 261, "\u79d8\u5bc6\u635c\u67fb\u54e1": 351, "\u8adc\u5831\u54e1": 351, "\u8adc\u8005": 351, "\u8fd9": 250, "\u8fd9\u662f\u65af\u5766\u798f\u4e2d\u6587\u5206\u8bcd\u5668\u6d4b\u8bd5": 250, "\u9593\u8005": 351, "\u9593\u8adc": 351, "\u95a2\u6570": 261, "\u963f\u91cc\u5df4\u5df4\u96c6\u56e2\u63a7\u80a1": 242, "\u96a0\u5bc6": 351, "\ua000\u116c": [], "\ua000\u130b\ua8af\u026c\u0583": 242, "\ua000\ua69b\ua96c\uaa4a\ua615\u0f52": [], "\ua001\ufd55\u0aa1": 242, "\ua001\ufdbc\u1e41\ua443": [], "\ua003\u0aa6\u1e9a\u0219\u0117": [], "\ua004\u1881\u1a50\u11ed": [], "\ua004\u3138": 242, "\ua005": [], "\ua005\u0266\u1b07\ua22c\u0129\u2d80": [], "\ua005\u0857\ua3f4\ua98f": 242, "\ua006\u057a\u1598": [], "\ua007": [], "\ua008\u152d\u100b\ua91f\ufc23": [], "\ua00a\u1bd9\u04e7": [], "\ua00b": [], "\ua00c\u1425\ua355\u2d07\u1576\ua71c\u1550\ua6cf\u0431\ufb4a": [], "\ua00e\ufc23": 242, "\ua00f": [], "\ua00f\ua119\u179f\u1d64\ua663\u120c\u0e16\ufb52": 242, "\ua010": [], "\ua011": [], "\ua012": [], "\ua012\ua25a\u098a\u2c47\u04d9\u168f": [], "\ua013\ufb3e\u1fe1": 242, "\ua014\u1901\ufd93": 242, "\ua016\u1787\u0a33\u1722": [], "\ua019\ua0e8\u0a87": [], "\ua01a": [], "\ua01b\ua3d1": 242, "\ua01b\ua47b\ud7f8": [], "\ua01d": [], "\ua01e": [], "\ua01f\u1b13\ufc41": [], "\ua01f\u1c5f\ua592\u090a\u117e\u1a2d\ufee6\u2d08\u1118": 242, "\ua020": 242, "\ua022\u091c\ua643": 242, "\ua022\uabc3\u30cf\uaae9\u1e71\ua00d": [], "\ua023\ua2a9": 242, "\ua024\u1f06": [], "\ua024\uaa80": 242, "\ua025": [], "\ua026\u0457": [], "\ua026\ua1f6\u1c0f\ud7d0\u308e\ud7f1\ufc11\ua169\u30d2": 242, "\ua027\u06af\u1449\u1833\u01d6\u114c\u1d44\u1e9f": [], "\ua027\u0e97": [], "\ua027\ua2b9\u1560": 242, "\ua028": 242, "\ua028\u0475\ua7a7": [], "\ua029\ua402\uabbd": [], "\ua02a\u020b\u1b87\u0119": [], "\ua02a\u1edd": 242, "\ua02b": [], "\ua02c\ufb4d\u12db\u0499": 242, "\ua02c\ufd29\ua2ff\ua3c3\ua229\u03ce\u0569\uaa21\u2dae": [], "\ua02e\u01dc": 242, "\ua02f": [], "\ua02f\ua582\ufe85\u2c55\ua1cc\u09a3": 242, "\ua030\u1c1c\u0e0d\u2c71\u0d07\u0792\u0d35\u2d1e": 242, "\ua031": 242, "\ua032": [], "\ua033\u072e\u1568\u1dbf\ufb70\u1a20\ua10e\u15ab\u0d14\u164c\ua46d\u0e22\u0d1e\u1408": [], "\ua033\u317b\ua619": 242, "\ua034": [], "\ua035\u1e3b": [], "\ua036\u30ee": [], "\ua037": [], "\ua037\u0931\ua8ae": 242, "\ua039\u04e7\u101f\u012d\u02c1\u1ee9": [], "\ua039\u1707": 242, "\ua039\ua55a\ua065": [], "\ua03a\u1420": 242, "\ua03b\u01d6\uaa97\u0250\u18cf\ua04a": [], "\ua03b\u153f": 242, "\ua03b\ua24d\ufc4a\uff6c": [], "\ua03c\u2c4c\u1298\u1cf5\ua208\u00f9\u12da\ufe93\u150e": [], "\ua03d\ua2dc\u026c\u079a\u0e40\u1006": [], "\ua03d\ua72d\ufd04": [], "\ua03e": 242, "\ua03e\u3110\u04a9\ua1b3": [], "\ua03f": [], "\ua03f\u0e84": 242, "\ua040": [], "\ua043\uab15\u02a6": [], "\ua045\ua577\u1232": [], "\ua046\u01d6c": [], "\ua047\u12c2\u1301": [], "\ua047\ua34a": 242, "\ua048\u0157\u04c8": [], "\ua048\uffd6": [], "\ua04a\u1407\u068f\u1c16": [], "\ua04a\ufbb0\u14ae\u16b2\ua6b7": 242, "\ua04b": [], "\ua04e": 242, "\ua04e\u1f78\ua128\u0c92": [], "\ua050": 242, "\ua051\u0507\uab3b\u0db1\uabba": [], "\ua051\uaa16": [], "\ua052\u1dab\ua118": [], "\ua056\u1a16": [], "\ua056\ua73b\u0c0e\u146a": [], "\ua057\ua26b\ua354": 242, "\ua059": [], "\ua059\u1900": 242, "\ua059\ua1e4\u0d7c\u0784\ufba6\u00eb": [], "\ua05a": [], "\ua05a\ua788\uff75\u1453\uaab5\ua1fb": 242, "\ua05b\u03b9\u046d": [], "\ua05c\u0c22": [], "\ua05c\ua0c4\ufe89\u15dd\u0c1e": 242, "\ua05d": [], "\ua05d\u1864\u1081\ua8b2\u130d\u198d\u2d39\u0850\u072f": 242, "\ua05f": [], "\ua060": 242, "\ua061\u1241": [], "\ua062\u124b\u03c4\u0938\ua0ce": [], "\ua062\ua851\u1d2f\ua3dc\u100b\u16a6\u04ed\uff75\u072c\u1c4d\u0990": [], "\ua063": 242, "\ua064\u1aa7": [], "\ua065\u095e\u04b5": 242, "\ua065\ua849\u0251": [], "\ua066\u147b\ua665\uab79": [], "\ua066\u1b8f\ua208": 242, "\ua067\u06c3": 242, "\ua068\u0255": 242, "\ua069": [], "\ua069\ua30d\ua3c0\ufd94": [], "\ua06a\uff7f\u1c70\u0d95": 242, "\ua06b\u0987\ua749\u1d4d\ua3eb": 242, "\ua06c": 242, "\ua06c\u1d9c\u0c9e\u0e44\uab32": [], "\ua06c\u1e71\ua767\ua755\u1d41\u04df\u1e0d": [], "\ua06d": [], "\ua06d\u0dc4": [], "\ua06e": [], "\ua06e\u3170\u11f1\u03c1": 242, "\ua06e\uff92": [], "\ua06f\u2c44": 242, "\ua06f\ua15a\ua24f\ua2a9": [], "\ua070\u01c6\u2d1b\u12a2\ufdaa": [], "\ua070\ufef8": [], "\ua071\ua5d1\ua923\u14b8": [], "\ua071\ua805\ua18a\u0262": 242, "\ua072\u164b": 242, "\ua072\u2184\u2d56\ufda1\u0507\u155a": [], "\ua073": [], "\ua073\u30c8": 242, "\ua074\ua3d4": 242, "\ua074\uaadb": [], "\ua075": 242, "\ua075\ua7a9": [], "\ua076": 242, "\ua077\u30c6\ua400": 242, "\ua078": 242, "\ua079\u06d0\u3070": [], "\ua079\u0c88": [], "\ua079\ua85b\ua98d": 242, "\ua07a\uaa72\u1c17\u0a09\u045e\u011b": 242, "\ua07c": 242, "\ua07c\u1575\u119f\u0453": [], "\ua07d\u11a9": [], "\ua07e\u1f50\u1ec3\ua436\ua001\u0db7\u1a10\ua0c0": [], "\ua080": 242, "\ua081": 242, "\ua081\u01a3\u0eb3": [], "\ua082": [], "\ua083": [], "\ua084\ufb3b\u0e28": 242, "\ua085\ua29d": 242, "\ua085\ufba7": [], "\ua086": [], "\ua086\u11b4\u196c": 242, "\ua087\u02c7": [], "\ua089": [], "\ua08a\ua3a7\ua933\ua518\u0f63": 242, "\ua08b\ua275": [], "\ua08c\ua91c\u0d86": 242, "\ua08d\u1021\u1847\u1568\ufc05\u2d0c\ufd5e\u1b24": [], "\ua08e\u1894\u0675": [], "\ua08e\u18a8": 242, "\ua08f": [], "\ua08f\u0f47": 242, "\ua08f\u12f6\u2dcc": [], "\ua090": [], "\ua090\u1d06\ufcd7": [], "\ua090\ua126\u11c4\ufc5b": 242, "\ua091": [], "\ua091\ua970\ufeeb": [], "\ua092\u14c6\ufd15\u0ab6\u07fa\ufe93": 242, "\ua093\u165b\u185e": [], "\ua094\u072a\u152f\ua3e6": [], "\ua095\u1d29": 242, "\ua096\u15f0\u1990\u0165\u04bf": [], "\ua098": [], "\ua099": 242, "\ua09a": [], "\ua09b": [], "\ua09c\ua643\ufc8b\u0a18\ua111\u0274\u02b3\u11e1\ua46d\u02a7\ua2e2\u189d\u2184": 242, "\ua09d\ua1b8\u15d9\u3180\uff82\u1973": 242, "\ua09e": [], "\ua09f": [], "\ua0a1\u2c52\u10ea\u0dc0\u1c78": [], "\ua0a2\u0cbd\u0236\u11be": [], "\ua0a2\u1ec7\u12ff\ua886": 242, "\ua0a3\u3068\ufb2b": [], "\ua0a4\ua842\ua132": [], "\ua0a6\ua894\uab79": 242, "\ua0a7\u188e\ua5b8": 242, "\ua0a8\u1907\u131a\u0254\u315d": [], "\ua0a9\ua3c1": [], "\ua0aa\u1765\u1e31": 242, "\ua0ac\uab56\ua1c3": 242, "\ua0ad\u1f65": 242, "\ua0af\ufd33\ua76d": 242, "\ua0b0\ufe7c\u14fa\u0c15\ua2bc\ua9b1\u166b\ua2ad\u1115": 242, "\ua0b2": [], "\ua0b2\ua8a1": 242, "\ua0b3": [], "\ua0b4": [], "\ua0b4\u2cbb": [], "\ua0b5\ua291": [], "\ua0b6\uffab\ua1a9\u0443\u1010\u1235": 242, "\ua0b7\u1f42": 242, "\ua0b7\ua0b0\ua2c9": [], "\ua0b8\u0b0a\ua6ca\u17a3\u3146": [], "\ua0b9": 242, "\ua0ba\u116f\u1cea\ua6b6\ud7b4": 242, "\ua0bb\ua414\ua11d\uffd3": 242, "\ua0bc": [], "\ua0be\ua125": [], "\ua0bf\uab24\u0165\u09a1\u1d0e\ua157\u0787\u0272\u14ef\u1d85\u1896": [], "\ua0c1": [], "\ua0c1\ufed0\u10fd\ufb81\u043a\ua975": [], "\ua0c3\u1edd": [], "\ua0c4": [], "\ua0c5\uaa75": [], "\ua0c6\ua415": 242, "\ua0c8\u14b0\uaa60\ua598\u3155\u14b9": [], "\ua0c8\u172b": [], "\ua0c9": 242, "\ua0c9\u2c5b\ua8a1": [], "\ua0ca\u0759": [], "\ua0ca\u1b49\uaa69\u1961": [], "\ua0cc\ufc79\u0e0e\u14bd": 242, "\ua0cd\ua37d\u0639\u1e63\u1147": 242, "\ua0ce\u1594": [], "\ua0ce\u18e8\u0507\uaac0": 242, "\ua0cf": [], "\ua0d0\ufc03\ua12eq\u05f0\u02a1\u00e4": [], "\ua0d1\u025b": [], "\ua0d2": 242, "\ua0d2\ua729\uaa46\ud7d2": [], "\ua0d2\uaabb\u1611\u18e3\u311e\ufb1f\u0377": [], "\ua0d3\ua388\u0f41\u1959\uab05\u022b\u1b14": [], "\ua0d4\u0b07\u0f40": [], "\ua0d4\uff4c\ua393\u1f57": [], "\ua0d5": [], "\ua0d5\u045d\ua785\u105b\u1f71\ufcc2\u03b4": [], "\ua0d6\u04dd\u1844\ua1a8\u2da9\ua91a\u1472\u0b32\u1430": [], "\ua0d7\u1e2d": [], "\ua0d8": [], "\ua0d8\u068f\u15d1\u307c": 242, "\ua0d8\u09dc": [], "\ua0da\u1d9a\ua0e2\ua0a3": [], "\ua0da\ufcb6\u0c38\u18d0": [], "\ua0db": 242, "\ua0dc": 242, "\ua0df": 242, "\ua0e1": 242, "\ua0e1\u18cd": [], "\ua0e1\ua7a5": [], "\ua0e2\ua98d\ud7f1\uff4cq\u0e88\u084d\u1681": [], "\ua0e3\u01e5": [], "\ua0e4\ua56b\u119b\uaa90v": [], "\ua0e4\ua594": [], "\ua0e5": [], "\ua0e7\u1230": [], "\ua0e8\ua179\ua16e\u029e": [], "\ua0eb\ufcd3\u1130\u1178": [], "\ua0ec": [], "\ua0ed\u1998\u11d5\u1251\u1e47\ua0ab": 242, "\ua0ed\u2d30\u1e33\u16b3": [], "\ua0f0": 242, "\ua0f0\u3129": [], "\ua0f1\u03cd\u1f77\u1b31\u0e99\u1e03": [], "\ua0f2\ua47b\u156d": 242, "\ua0f4": [], "\ua0f4\ua403": [], "\ua0f5": 242, "\ua0f6\u1e41": 242, "\ua0f8": 242, "\ua0f8\ua1d5\u1b91\ua2e1\ua78e": [], "\ua0fc": [], "\ua0fc\u0d60": 242, "\ua0ff\ufd7f": [], "\ua101\u3119": [], "\ua102": [], "\ua102\u2cd5\ua12e\u1c6d\u0aaa": [], "\ua103": 242, "\ua104\u0cb1\u2c41\u04e5": 242, "\ua104\u209a\u1b19\u2c7d\ua2ab\u0e27": [], "\ua106\u0266": [], "\ua106\ua7a7\u076d\u0914\u1964": 242, "\ua109": [], "\ua109\u2dd9\ua6d0\u078e\ufc18": 242, "\ua10a": 242, "\ua10b": [], "\ua10b\u1796": [], "\ua10d\u146f": 242, "\ua10f": 242, "\ua110": 242, "\ua112": [], "\ua113": [], "\ua114\u0231": [], "\ua114\ua889\u148a": 242, "\ua115\u1112": [], "\ua115\u2d06\ufd04": 242, "\ua116": [], "\ua116\ufd24": [], "\ua117\u12cf": [], "\ua118\u0171\ua971\u11b4\ua978\u14ff\u1b99\ua889\ufc3d\u0a09\u2d16\ua1a3": [], "\ua118\ua841\u06c6\ua571\u1483\ua50f": 242, "\ua119\ua98c\u12f7": [], "\ua119\ufd26": [], "\ua11a": [], "\ua11b\uff54\u1e07\uff58": [], "\ua11c\u0280\ua2e5\u0567\u0b14": [], "\ua11d\u30e4": [], "\ua11e": [], "\ua11f\ufb85\u1bd6\ua345": 242, "\ua120": 242, "\ua120\u1790\ufc89\u30b6": [], "\ua121\u1554\u1ee3\u1ba0\u10e8\u186b\ua9a1\u183e\ua400\u153e\u1f35\u16a8\u12ae\ua368\ua1d8\u155e\u1827\uff69\uaa8d\u0294\ua58c": [], "\ua123": 242, "\ua123\u153b\u18b5": [], "\ua124\ua331\u2c3a": [], "\ua124\ua9e8\u2cb5\u1605\u162d": 242, "\ua127\ua46f": [], "\ua128\u067b\ufca8\ua40d\ua188\u1660\u1563\ua914\ufb60\ufe9e\u1206": 242, "\ua128\ua592": [], "\ua129\u0923": 242, "\ua129\u2d64\u1676\u1bdd\u1bbe": [], "\ua12a\ufef6": 242, "\ua12b\u30ae\u1497\ua107\ua1c6\u03f0\uffcb\ua25a": 242, "\ua12f\ua2a0\ua74b\ua21e": [], "\ua12f\ua447\u018c\ua5a3\u155e": [], "\ua131": [], "\ua131\u099c\u0a13\ua480\ua6c4\u0566": 242, "\ua132\u1ee3\u2c35\u037c\u1f62\u3140\uaa97": 242, "\ua133\ufb6a": [], "\ua134\u1ec3": 242, "\ua135": [], "\ua136": 242, "\ua137\ua416": [], "\ua139": 242, "\ua13a": 242, "\ua13b\ufbf9\ufda8\ua403\ufe80": [], "\ua13c\ufeb7": 242, "\ua13e\u0171\u1d31": 242, "\ua13e\ufc0e": [], "\ua13f\ua2fd\ua3d0\ua663": [], "\ua140\u10e7": [], "\ua141\u0439": [], "\ua141\ua221\u3079": 242, "\ua143": [], "\ua143\u191b\u1d62\ufb9d\u168e": 242, "\ua144\u049d\u03b5\uffbe": [], "\ua146": [], "\ua147\ua68d\u00ea\u15aa": [], "\ua148": 242, "\ua14a\u1f41": [], "\ua14b\u1ee5\u12f8": [], "\ua14d\u1dbc": [], "\ua14e": [], "\ua14e\ua371q\ua6df": [], "\ua14f": 242, "\ua150": [], "\ua150\u0465\u1eb1": [], "\ua152": [], "\ua154": [], "\ua155": [], "\ua155\u043a\uffa9": 242, "\ua156\u1950\u01ad\u210a\u04d7\u18c9": 242, "\ua157\u0797\u1f22": 242, "\ua157\u1650\u179e\u16f2": [], "\ua159\u1748\ufebc\u044f": [], "\ua159\ua1c2\ua1d2\u1a36\u3060\u0280\u186a\u00e5\ufd25\u174e\u0950\ufb57\ufd1a\u2c7a\u074e": 242, "\ua15a": [], "\ua15b\ua8f3\uab58\u06c3": [], "\ua15c\ua1e9\uaa47\u172b\ufec6\u119a": [], "\ua15d\ufcf6\u04c4": [], "\ua15e\ua09b": 242, "\ua162\ua097\uabe1\u126e": [], "\ua164\ua333\ufce4": [], "\ua164\ufb7c": 242, "\ua165": 242, "\ua167\ua3c7": [], "\ua168": [], "\ua169\u3108\u078c\u1697\u2090": [], "\ua16a\u16bb\u1a09": 242, "\ua16b\ufbfe": [], "\ua16d": [], "\ua16d\ua667\ufdb8": [], "\ua170\u1d5a\ufd9b\ua3e8\u1008\u31fc": 242, "\ua170\ua331\u010d": [], "\ua172": [], "\ua174": 242, "\ua174\u09a0": [], "\ua175": [], "\ua175\uffa0\uab2b\ufbea": 242, "\ua176\ua4e9": [], "\ua177\u11a6": [], "\ua177\ufb41": [], "\ua178\u03bd": 242, "\ua178\ua761\u0249\u00e2\u1341": [], "\ua17c": [], "\ua17d\ua65d\ud7b7\u06a3\u1d2a": [], "\ua17e\u12c9\u0211\u2d27": 242, "\ua180\u131b": 242, "\ua180\u15b4\ua1b2\ua5ba": [], "\ua181\u30b2": 242, "\ua182\u1856\u0d28": [], "\ua182\u18f2": 242, "\ua183": [], "\ua184": 242, "\ua186\u04d3\ua655": 242, "\ua186\u1f61\u1e3d\u1451\u15a2": [], "\ua187\u1338\u1ed9\u1972": [], "\ua189\ua217\u03d2\u1e8f\ufbeb\u01e7": 242, "\ua18a": [], "\ua18b\ufebb\u1f94": [], "\ua18c\ua0e7": [], "\ua18d\u1761\u1d41\ua27d\ufdfb": 242, "\ua18d\ua19d\ua311\u0123\u2c81\u0ab3": [], "\ua18e\ua4f0": 242, "\ua18f": [], "\ua18f\u11ee\u1b9c\u0807": [], "\ua190\u1d4c\u166a": [], "\ua191\u0a5e\uaaa0\u2d46\ud7fa": 242, "\ua192\u142e\uaa81\ufd36": [], "\ua192\u1fe5\u0857": [], "\ua193": [], "\ua193\ufb3a": [], "\ua194\u16c8": [], "\ua194\ua6bd": 242, "\ua195": [], "\ua196\u0a86\u2cbd\u026c\uaa17\uab05": 242, "\ua197\u0159\ua657\ua6bc": 242, "\ua198\u025b\u162b\u1352\ua04e": [], "\ua198\u212d": [], "\ua199\ua86d": [], "\ua19a": [], "\ua19b\u0977\ua158": 242, "\ua19c\ua1ba": [], "\ua19d\u0477\u0267": 242, "\ua19e": [], "\ua19e\u2d3e\u00fb\u2d18\u01a5": 242, "\ua19f\ua999": [], "\ua19f\ufd78\u15bf\u310f": 242, "\ua1a0\u04f9": [], "\ua1a1\u1f07": [], "\ua1a3\u071e\ua4d9\u2c8f": [], "\ua1a4": [], "\ua1a4\u1e3b\u1f20": 242, "\ua1a4\u1efd": [], "\ua1a5\u174b": [], "\ua1a5\ua374": 242, "\ua1a6": [], "\ua1a6\u1427\u1403": 242, "\ua1a6\u18e5": [], "\ua1a7\ua254\ua6b1\u179a\ua0af\ua4d2": [], "\ua1a8\u00f0": [], "\ua1a8\u068d\u154a\ua021\ua049\u0449": 242, "\ua1a9\u079e\ua9e0\ufca6": [], "\ua1aa\uffb3\u0a16\u0b14\u0644\u127b": 242, "\ua1ab": [], "\ua1ab\ua5d5\u12fe\u04c8\ufc68\u1325": [], "\ua1ac": 242, "\ua1ad": [], "\ua1ad\ua81e\uff8f\u1c74\uaa10": 242, "\ua1ad\ufed7\u1f07": [], "\ua1ae\ufc16\u00f8\u0758\uff4a\u18aa\u09ae\u1c0f\u0263": [], "\ua1af\ua17e\u04c4\ua6e2": [], "\ua1b0\u168a\u0455\u1657\u019e\u06c7\u06bd\u10ea\u1e63\ua3a8\ufc9d\ufbf6": [], "\ua1b0\u2cb7\u0774\ufe73\u1872": [], "\ua1b0\ua432\ufcd2\u0c17\u172e\u1e3d\u166f": 242, "\ua1b1": [], "\ua1b3": [], "\ua1b4\u15de\ua564": [], "\ua1b4\ua737\u1892\uaa8f": [], "\ua1b7": 242, "\ua1b7\u14bf\ua5c5\u1c14\ua520\ua5ab\u163e\u1b23": [], "\ua1b8": [], "\ua1b9": [], "\ua1ba\u1280\u1075": [], "\ua1ba\ufefb\u170f\u03c9\u2d02\ua3f8\u1d68\u1e45\u15c6": 242, "\ua1bc\ufcdd": [], "\ua1bf\uaa21": [], "\ua1c0\ua044\ufb52\u1cf2": [], "\ua1c1\u1764\u0a8f\u18f0\ua869": 242, "\ua1c1\ufd95\ua077\ufd56\u2d12\ufb54\ua1e2\u1d30": [], "\ua1c4": [], "\ua1c5": [], "\ua1c7": [], "\ua1c7\ua8a9\u1e29\u0810\u06c2": [], "\ua1c8": 242, "\ua1c9\u1a14": [], "\ua1ca": [], "\ua1cb": [], "\ua1cc\ufc46\ufc7e": [], "\ua1cc\uff75\u0f00": [], "\ua1cf\u2d16": 242, "\ua1d0\u017a\u0760\u130a\u02ae\u1e15\u304b\u0a0a\uaa76": 242, "\ua1d0\ua32f\ua5b2": [], "\ua1d1\u147c\u1f75\ua3f0\ua868\uaa8b": [], "\ua1d1\ufc26\u0c93": 242, "\ua1d1\ufd7c": [], "\ua1d3": 242, "\ua1d4\u0105": [], "\ua1d5\ua227\uaaa4\ua1f3\ufb74\u0281": 242, "\ua1d6\u2cb3\ua084": [], "\ua1d7": [], "\ua1d8": 242, "\ua1da\u11eb": [], "\ua1db": [], "\ua1dc\ud7ee\u0997": 242, "\ua1dd\u0433\ufb88": [], "\ua1de": 242, "\ua1df\u050d\u092b": [], "\ua1df\u0529\u0f52\uff45\u015b\u305d\u1359": 242, "\ua1e0\ua35e\u1586": 242, "\ua1e0\ufb48": [], "\ua1e1": [], "\ua1e1\uaa66": 242, "\ua1e2": 242, "\ua1e4": 242, "\ua1e5\ua2be\u05e4": [], "\ua1e7": [], "\ua1e7\u1488\u0c06\ua322\u1788\uab13\uabb9\u019e\ua719": [], "\ua1e8": 242, "\ua1e8\ufeaa": [], "\ua1e9\ud7d5\u2d62\ufb6c": [], "\ua1ea": [], "\ua1ea\ufd2f\uff67\u00ed\u10d8\u2c47": 242, "\ua1eb\u01ed\u1d8f\u0ba8\u1e7b": [], "\ua1eb\ua1ee": 242, "\ua1eb\ua5c8": [], "\ua1ec\u2ca3": [], "\ua1ed\ufee8\uff50\u2c5d": [], "\ua1ef": [], "\ua1f1\u2111\ua1af": 242, "\ua1f1\ua2e7\ua6c8\ua067\u1483\ufe94\u1e85": [], "\ua1f2\u0d26\u1101\u1293\u1486": [], "\ua1f3\uaa13\ua0b9\ua39c": [], "\ua1f4": [], "\ua1f5\u1954": 242, "\ua1f5\ua4f1": [], "\ua1f6\ufc31": [], "\ua1f7\ufd1d": [], "\ua1f8": 242, "\ua1f9\u1660": [], "\ua1f9\ufc49\u14bc\u1220\uff48": 242, "\ua1fa\u0979\u144a\u04c4\u1893\ua091": 242, "\ua1fb": [], "\ua1fb\u11a2": [], "\ua1fd": [], "\ua1fd\u0282\u0269": 242, "\ua1fe": 242, "\ua1fe\u1e93": [], "\ua1ff\uff8b": [], "\ua201\uaa0b\uff51\u076a": 242, "\ua201\ufc54\ua074\u17a9\ua604": [], "\ua202\u046b": [], "\ua203\u01ad\ua3d7\u16c5": [], "\ua204\u10f0\ua0a8\ua793\u0294\u1d0d": 242, "\ua205\u1ec7\u124d\ua184": [], "\ua206": 242, "\ua206\u1e57": [], "\ua207": [], "\ua207\ua0c5\u0edf\ua1c4\ua1f4\u1383\ua6e5\u1e51": 242, "\ua208\ua436": [], "\ua209\u03bb": [], "\ua20a": [], "\ua20b": 242, "\ua20c": 242, "\ua20d\u18ba\ua2f2\ua461\u31f3": 242, "\ua20e": 242, "\ua20e\ua73d\u1543": [], "\ua210": 242, "\ua211": 242, "\ua213\ua773\u1ecf\u148b\ufccc": [], "\ua214\u0623\ua0c7\ufc54\ufb3e\u1d6b\u0c07\u1209": [], "\ua214\ua334\ua26e": [], "\ua215\u02a6": [], "\ua215\u0521\ufcc6\u1d4e": 242, "\ua217\ua3a8\uffb3": [], "\ua218\ua511": [], "\ua219": [], "\ua219\u0242": [], "\ua219\u0b37\u0e87\u120e\u02aa": 242, "\ua21a\u0445\u1d9c\u12e4\u01df": [], "\ua21b": [], "\ua21b\u0ca2": [], "\ua21d\ua24c\ufb9a": [], "\ua21d\ua7fa\u1502\u1fa5": 242, "\ua21e": [], "\ua21e\ufd2c\uabbb\u07dd": 242, "\ua221": [], "\ua221\ud7bf": [], "\ua223": [], "\ua223\ua72b": 242, "\ua224\u0e1f": [], "\ua225\u03bc\u0d23": [], "\ua225\ua891\u0268\u06aa\ua0f5\ua41c\ufbf7\u07cd\u1536\ua151\u14cd\u1e49\uff69\u2d65": [], "\ua226\u14dc\u18da": [], "\ua228\u076a\ufb14\u16e9": [], "\ua228\u30de\ua820": [], "\ua229\u0edc\u1323": [], "\ua22a": [], "\ua22b": 242, "\ua22c\u010b\ua5ac": 242, "\ua22d\u127e\ua58a": 242, "\ua22e": [], "\ua22e\u0a1c": [], "\ua22f": [], "\ua231": 242, "\ua231\u3149": [], "\ua232\ua97c": [], "\ua232\ufec3": [], "\ua233\u1729": 242, "\ua233\ua047\u118a": [], "\ua234\ua28a\ufd75\u1eb3\u1d0c\u12ed\u2dd5\ufc84\u1265": [], "\ua234\ua467": [], "\ua235\u2c73\u0d0e": [], "\ua236\u0eaa\u1218\ua0d3\u1325\u2d4f\u057c\u1415\ufd97\u315d\u1e4b": 242, "\ua236\ua431\u1be0\u0b15": [], "\ua238\u02b3": [], "\ua239": [], "\ua23a\u00e0\ua44c\ua1f1": [], "\ua23a\u1345": [], "\ua23a\u1699\u153d": 242, "\ua23b\u15b1\u1f22\u1f61": 242, "\ua23b\u1e59\ufccb\u13f9\u0289": [], "\ua23c\u2d06\ufee0": 242, "\ua23e\u1f76\ua8af\u1481\u178f\ud7fa\ua181": [], "\ua23e\ufb51\u0684\u1d4a": 242, "\ua23f\u0519\u12d9\ua522\ua4fb\ua76f": [], "\ua23f\ufda0\u183a": [], "\ua240\ua8a8\u0276": [], "\ua244": 242, "\ua245": [], "\ua245\u0131": [], "\ua245\u04b1\u1076\u028c\u1851\u1a0f": 242, "\ua246": [], "\ua248\ufb34\u2c4b\ua435\u0229\u0431\ua186\u1f53\u15a2\uff90": [], "\ua249\u0848\u1d4b\ua1ec\u1895\ufd72\u06cc\u1e57\u1969\u2c37": [], "\ua24a\u0aa7": 242, "\ua24a\ufc5d\u1621": [], "\ua24b": [], "\ua24b\u11f1": [], "\ua24c": [], "\ua24d\u18ce\u2d18": [], "\ua24e\u0a08\u04df\u1a02\ufb41\ua27b\ufb8e\u0479\ufcce\u00e3\ufdb8": 242, "\ua251\u112e\u04ef\ufd3b\u304b": [], "\ua251\u1f95\u18ba": [], "\ua252t\ua0a9": 242, "\ua253a": 242, "\ua253\u19a9\ufc2d": [], "\ua254": [], "\ua255": [], "\ua255\u1b9b\u3006": 242, "\ua256\u0253\u01c3": [], "\ua256\u18ef": 242, "\ua258\u0912\uabe2": 242, "\ua259": 242, "\ua25a\u1640\u03e3\ua4e9\ufdb0\u057b\u2c5e": [], "\ua25b\u1db8\u3173\ua967\u0471\u309f\ufdbf\u0aad\u1ea3\ua381\ua3be": [], "\ua25c\ua2c6": [], "\ua25d\u03b6": [], "\ua25d\u1649": [], "\ua25d\u1e0d\ua0fb\u047b\u04e7": 242, "\ua25e": [], "\ua25e\ua38c\u2c44\u185d\u14a7\ua07f": [], "\ua261": 242, "\ua261\u1a3a": [], "\ua262": [], "\ua264": 242, "\ua265": 242, "\ua265\ua4fc\ua07a\uaa1a\u1a3e\ua3b3": [], "\ua265\ua917": [], "\ua266": [], "\ua266\u1ebd\u1152\u1721\u15fd\u0620": 242, "\ua268\u15a9": [], "\ua268\u2ccb\ua5bc\u317a\u1a46\u0505": 242, "\ua268\uff9c\u0129\ua17a\ua5ad\ufc66": [], "\ua269\u209a\u0a74\u1a49": 242, "\ua26a": [], "\ua26d": 242, "\ua26e\ua747\u2d35\ua329\ufc17\ua17e\u1d30": [], "\ua270": [], "\ua271\u1252\u0242": [], "\ua272\uaa02\ua2a1\u1a3a\u03d6\u2c61\u2dab": 242, "\ua273": 242, "\ua273\u1f86": [], "\ua274": [], "\ua274\u157b\u30c0\u092b\u012b": 242, "\ua274\ua53a\u0c23\ua6d2\u1d91\ufb62\u02a9\u133c\u2dd0\u113b": [], "\ua275\u1358\uff6e\u2c55\ufb2c\ua610\uaa6a\u0146": 242, "\ua275\u307f": [], "\ua277": [], "\ua277\u306e\ufd31\ua0dc\u0718\ua029\ua890\ua211": [], "\ua277\ua7fd": 242, "\ua278": 242, "\ua279\ufba0": [], "\ua27a": [], "\ua27a\u1515\u026b\u1172\u1588\u1fbe": [], "\ua27c\u0ab9": [], "\ua27d": [], "\ua27e\u01d8\u05df\u30d4\u1243\ua0de": [], "\ua280\ufceeb": 242, "\ua281\u12d5\u09ad\u18b3\u1ef5\u1f10": [], "\ua282\u1fe0\u0828": [], "\ua282\ua465\u1695": [], "\ua282\ua6c6": 242, "\ua283": [], "\ua283\u2dd2\u11f8\u1b0a": 242, "\ua284\u06ef\ufdbf\u3067\ua31f": [], "\ua284\u183d": [], "\ua285\u12de\u1285\u1c5b\ua843\u01dc\ua257\u30c8\u1470\u157c\uaa11\ufb9c\u0d0f": [], "\ua285\u16a3\ua4db\ua88d\u1c03\u116f\u1f63\ua6a9\u1f15\u15ed": [], "\ua286\ua080\ua255\ua866\u0453": [], "\ua286\ufe77\uff49": 242, "\ua288": [], "\ua288\u1638\ua337\ua57e": [], "\ua28b\u146f": [], "\ua28b\ua894": [], "\ua28c": 242, "\ua28e": [], "\ua290\u0577\u04cc\ufc71": [], "\ua290\u2cb3\u2d0b": 242, "\ua290\uaa01\u18db": [], "\ua291\u1133\ufeb2\u0813": 242, "\ua293\u0125": [], "\ua293\u2c3a\ua3f1\ua693\u1e3b\u0586\u2d0c": 242, "\ua295\ua65f\u12e5": 242, "\ua296\u11e1\u0e0b\u317b\ua31a\u1781\ufd9b\u0797\u1fc2\u0e28": [], "\ua297": [], "\ua298": [], "\ua299\ua563\ua57e\ua5b9\ufb7a\ufc14": [], "\ua29a\u0db1\ua916\u1914": 242, "\ua29b\u0c97\u18a1\ua93f": [], "\ua29b\u15f8\u0199": [], "\ua29c": [], "\ua29e": [], "\ua29e\u05ea\u1731": 242, "\ua29e\u2c43\u178e\uff76\ua3cc": [], "\ua29f\u18df\u04b7": [], "\ua2a3\ua5d4\u0767\u077d": 242, "\ua2a4\u04f3\u0135": 242, "\ua2a5\ua6bf": [], "\ua2a5\ufbde\ufe74\u1b8e": 242, "\ua2a6\u015d\ua1fc\u1b2b\ua994": [], "\ua2a6\u14b9": 242, "\ua2a7": 242, "\ua2aa": 242, "\ua2ab\u0c12\ua364\ufb7a": 242, "\ua2ab\ua44d": [], "\ua2ac": [], "\ua2ae": 242, "\ua2af\u1edf": [], "\ua2af\u1f7d\u11ca": 242, "\ua2b0\ua6a1\ua346\u1652": 242, "\ua2b1": [], "\ua2b1\u098a\u12f5\u1961": 242, "\ua2b3": [], "\ua2b4\u126d\u0e04": [], "\ua2b4\ua0d6": 242, "\ua2b5\u0443\u0567": 242, "\ua2b5\u188f\ua64d": [], "\ua2b6\ua38e\u0768\ua1ee\ua26d\ua867\u0137": [], "\ua2b7": [], "\ua2b7\u1f90\u02d0\u0a72\u02ca": 242, "\ua2b8\u2c32\u1447": [], "\ua2b9\u0107\ua930\u1d5b\u0458\u167e": [], "\ua2b9\ud7c5\u11db\u0491\u0c9f\u2c36": [], "\ua2bb\u10d4\ua55a\uff8d\uaadb": 242, "\ua2bb\u158a\ua801\u1e23": [], "\ua2bb\u15e5": [], "\ua2bd\u16ca\uaa25\u199d\u0d7e": [], "\ua2be": 242, "\ua2be\u2d51\ufc7a": [], "\ua2bf\u1486\u2c9f\u2cd5": [], "\ua2bf\ua775": 242, "\ua2c0": 242, "\ua2c1": [], "\ua2c2\u14f1\ua38b": [], "\ua2c4\uabbc": [], "\ua2c5\u0d17\u1958\u0f4e\ua08b": 242, "\ua2c5\u3165": [], "\ua2c6\u1151": [], "\ua2c7": 242, "\ua2c8": [], "\ua2c8\ufc57": [], "\ua2ca": 242, "\ua2cc\u09ae\u11c8": 242, "\ua2cc\u107b\u3062": [], "\ua2cd\u3136\u16d3\u0a13\ua50f": [], "\ua2ce\u0155": [], "\ua2ce\ufb49": 242, "\ua2cf\u1d28": [], "\ua2d0": [], "\ua2d3": [], "\ua2d3\ua3b6\u126c\ua649\u1e6d": 242, "\ua2d6\ua43a\ua938": [], "\ua2d6\ufd0e": 242, "\ua2d7": 242, "\ua2d7\u0277\ua43c": [], "\ua2d8": 242, "\ua2d9\ud7b4": [], "\ua2da": 242, "\ua2da\ua0b8\u1e5f": [], "\ua2db": [], "\ua2dc\ua419\uaae9\u1577\u0b09\u1080": 242, "\ua2dd\uff43": [], "\ua2de\u06e6\u185c\ua795\ufceb\u0d12": [], "\ua2e2": [], "\ua2e2\ufc4d\ua387\uff4f\ua22d\u0b39": [], "\ua2e3\ud7d0\ua15d": [], "\ua2e4\ua6b8": [], "\ua2e5\u1c11\uab74": 242, "\ua2e5\ua844": [], "\ua2e7\u158e\u1026\u0a9e": [], "\ua2e8\ua55e\ua9fc": [], "\ua2ea": 242, "\ua2ec\u014d": [], "\ua2ec\u1166\u15c3\ufd37\u0223\uffc7\uab4e\uaa18": 242, "\ua2ef": [], "\ua2ef\u1760\ufda9\ua79f\u018c": 242, "\ua2f0\u057a\ufeba": [], "\ua2f2\u0ae0\u15d8": [], "\ua2f4\u14e5": [], "\ua2f5": 242, "\ua2f5\ua589\ua01c\ud7e3\u1d76": [], "\ua2f7\u0c88": [], "\ua2f7\u1201\uff48": [], "\ua2f8": 242, "\ua2f8\ua739\ua651\ua9a1\ua591\u1a0e\u09b9\u198d": [], "\ua2f9\u00e6\u04e1": 242, "\ua2fb": 242, "\ua2fc\u0e82\u1e61\u0d22": [], "\ua2ff\ufd67": 242, "\ua300\ua019": 242, "\ua301": [], "\ua302\ua723\ua655\uab77\uaa85\u1658": 242, "\ua302\ufd95\u14ec\u06ee\u1e1d\u015b\uab2a\ua43b\u1b05": [], "\ua302\ufdf8": [], "\ua303\u0456\ufbf3\ufc2f": 242, "\ua303\u189a": [], "\ua304\u15a8": [], "\ua305\ua5c8": 242, "\ua305\ua915": [], "\ua306\u04a3\ua4e3\u165e\ufc98\ufc7d": 242, "\ua306\u11e6\u057f\u1381\u1838\uff43\ufc9b\uab59": [], "\ua306\u1299\u16be\u1530\u1ea1": [], "\ua307\ufcd0\ua446": 242, "\ua309\uab03": 242, "\ua30a": 242, "\ua30b\ufee0": [], "\ua30b\uff74": [], "\ua30d\ua7a9\u12f2": [], "\ua30e\u0713": [], "\ua30f\ua42d\u1447\ua16f\ua3e3": 242, "\ua310\u31f6\uab8c\u14ea\u2d55": [], "\ua311": 242, "\ua312": [], "\ua312\ua2ee\u1435\u05d1\u2d5e": 242, "\ua312\ua33a": [], "\ua313\u15d6\u1e2f": 242, "\ua314\ua6d5\ufc28": [], "\ua317\u1f78\u12da\u16cf": 242, "\ua317\uffa1": [], "\ua318\ufccd": [], "\ua319": 242, "\ua31a\u10d2\u0911\ua53e\ud7b2\ufc22\ufcbe\ufd34\u0e01\ua509\ufc5c\u3051": 242, "\ua31b\u138f": [], "\ua31b\u1561": [], "\ua31c\u2c30": 242, "\ua31d": 242, "\ua31d\u095a\ufbf8\ua593\ufb91\u0575\u1312\uaaa8": [], "\ua31e\u1436\u1c18": [], "\ua31e\ufb6f": 242, "\ua321": [], "\ua322\u0275\u0511": 242, "\ua324\u0565": [], "\ua324\u2d03": [], "\ua325": 242, "\ua325\u0140\u0a9e\u1d2c\ufdac": [], "\ua326\u0854": [], "\ua327\u02b9\u0d2d": 242, "\ua327\ua581\u0229\u09ce\u01da\u1cea\ud7dc\u0501\ua645": [], "\ua328\u144e\u31f2": 242, "\ua329\ua33b\ua0d1\ua003": 242, "\ua32a": 242, "\ua32b": [], "\ua32b\ufead": [], "\ua32c": 242, "\ua32d": [], "\ua32e\u1538\u04d5": [], "\ua32f\ua922": [], "\ua330\ua2de\u1d88\u1769": 242, "\ua331\ua962\u01ce\u122f": 242, "\ua332\u1fb6": 242, "\ua333\ua15c\ufb64\u0171\ua75f": 242, "\ua334\u2d58\ua6b4\uaae4": 242, "\ua335\ud7c6\ufb8f\u0455": [], "\ua336\u1154\ua173\ua6ad": [], "\ua337\uab28\u03b3": 242, "\ua338": [], "\ua33d\u01eb\u1d94\ua77f\u0576\u015f": [], "\ua33d\u056d\u10f0\uab28\ua194\u1e09": [], "\ua340": [], "\ua341": 242, "\ua341\u1658": [], "\ua344": 242, "\ua345": [], "\ua346": [], "\ua347": 242, "\ua347\ufe74": [], "\ua348\u03f2\ua5a7": 242, "\ua348\u14f3\u12e7": [], "\ua349\ufee7\u03ef\u06d2\ufb7b\u01c6": [], "\ua34a\u117e\uab51": [], "\ua34b\u014f": 242, "\ua34b\ua641\ua2c0\uaaf3": [], "\ua34b\ufcc6": [], "\ua34e": 242, "\ua34f": [], "\ua34f\ufce8\u160f": [], "\ua350": [], "\ua350\ufb6f\u17aa\u30c3\ua3a7": [], "\ua351": [], "\ua351\ufdfa": 242, "\ua352\u1c4f": [], "\ua352\ua88b\ufba3": 242, "\ua352\uabe2\u159f": [], "\ua353\u06a1\u09a7": [], "\ua354": [], "\ua356": [], "\ua357\u19aa\u15e3\u170a": 242, "\ua358": 242, "\ua358\u134e": [], "\ua359\u0842": [], "\ua359\ufd34": [], "\ua35a\ua62b\u1860\u0285\u3174": [], "\ua35a\ua693": [], "\ua35d\u15ec\u0e9e\u1d7c\u03b6\ua4f0": [], "\ua35d\u2c5b": 242, "\ua35e": [], "\ua35f\ua608\u1ec9\ufd10\ufc0e\u1579\u1838\u1fe6\u2146\ua93b\ua599\uff59": [], "\ua35f\ua774\ua811": [], "\ua360\u049d\ua505\u03e7\ufce7\u04dd\u014f\ua820": 242, "\ua360\ua3f9\ua48c\u0c08\ud7bc\u178b": [], "\ua361\u1a4f": 242, "\ua361\ua5e1": [], "\ua362": [], "\ua363": [], "\ua364\u11e4\u2ccb\u02c8\u182d\u0cf2": [], "\ua366\u14ed": [], "\ua367": [], "\ua368\u176c\ufe95": 242, "\ua369": [], "\ua36b": [], "\ua36d\ua4f3\ua8ae": [], "\ua36e": [], "\ua36e\ua521": 242, "\ua36f\u1f74\u2d59\ua969": [], "\ua371\u1b93": 242, "\ua371\ua7a7\u046d\u06a7": [], "\ua372": [], "\ua372\u1581\uff79": [], "\ua372\ud7df": 242, "\ua373": [], "\ua374": [], "\ua375": 242, "\ua375\ua0ba\ufc9e": [], "\ua376\u1463": [], "\ua379\ua408\u02c7\u1841\u165f": 242, "\ua37a\ua516\ua81a\u198c\u308a": [], "\ua37b\u07e1": [], "\ua37c\ufec3\u1d8a\u1442": [], "\ua37e": [], "\ua37f": [], "\ua380": [], "\ua380\u0b22\ua3c8\ua76f": [], "\ua381\u2c59\u17ad": 242, "\ua382": [], "\ua383\u1457\ufb5c": 242, "\ua383\ua466": [], "\ua383\ua555\u029c\u0571": [], "\ua384\ua935\u0445": [], "\ua385": [], "\ua386\u2c74\u1856\u0275": 242, "\ua387": 242, "\ua387\u024d": [], "\ua388\ufbdb": 242, "\ua389\u091e\u0bb8": 242, "\ua38a": [], "\ua38a\u1145\u14ad": [], "\ua38b\u100e\u1c1e": [], "\ua38c": [], "\ua390": [], "\ua390\ua783\ua0db\ua36e\ua38d\u11c0": [], "\ua391": [], "\ua391\ufc0f\ua72b\ua5a4\ufd61": [], "\ua392\ua573\u0585\u16c5\u190a\u1bd3": 242, "\ua393\u1f7d\uaa00\ua395": [], "\ua394\ufd2a\u0cf1": [], "\ua395": 242, "\ua396": 242, "\ua397": [], "\ua397\u30bc": 242, "\ua398\u0da1": 242, "\ua398\ua5c1\u0c3d\u134f\u1458\u17a8\u1a3c\u0171\u31f4\ua8b3\u1a32": [], "\ua399": 242, "\ua39a": [], "\ua39a\ua5c9\ua433\ua1f0\u0922\ua6e4": 242, "\ua39b": [], "\ua39b\u1d32": 242, "\ua39c\u19b8\u11df": 242, "\ua39e\uffd4\u04cf": [], "\ua39f": 242, "\ua3a1\u210d": [], "\ua3a2": 242, "\ua3a2\ua3f8": [], "\ua3a3": [], "\ua3a6\uab0d\ua173\u1659\u1236\ua71a\ua681\u1220\u1675": [], "\ua3a8\uaa82\u03cc\uab97\ua10e": 242, "\ua3a9": 242, "\ua3aa\u1f60": 242, "\ua3ab\ua81f\ufca4\ufcc3\u14da": 242, "\ua3ac\u01e9": 242, "\ua3ad\u0855\u131a": [], "\ua3ae": 242, "\ua3ae\u1be2": [], "\ua3af": [], "\ua3af\ua22f\u2d41\ua524\u168c": 242, "\ua3b0\u1d3f": [], "\ua3b0\ua347\u128d": [], "\ua3b1\u01e9": [], "\ua3b2\u0844\ud7e8\ua46a\u154c\u30fc\u30cb\u1255": [], "\ua3b3\u1535\u03bd": [], "\ua3b4\ufc1b": [], "\ua3b5\u0507\u30b5": [], "\ua3b6\u12aa\u190b": [], "\ua3b7": [], "\ua3b8": 242, "\ua3b8\u0146": [], "\ua3b8\ua5f8\u0256": [], "\ua3ba\ua414\ua11c\u1324": [], "\ua3bbg\u2184\ufe98\u189c": [], "\ua3bb\u0240\ua994\ufc7a": 242, "\ua3bb\u2c41\u3189\u0264": [], "\ua3bc": 242, "\ua3bc\ufcb5": [], "\ua3bd\u097e": 242, "\ua3bf\u0169\u12c5": [], "\ua3bf\u0e43\u01bb\u1fa7\u1ef3\ua5a9": 242, "\ua3c2": [], "\ua3c2\u0252\u0b07\u0649": 242, "\ua3c2\ua0ed": [], "\ua3c3": [], "\ua3c4\u1fc7\ua549\u15a5\ua238": [], "\ua3c5": [], "\ua3c7": [], "\ua3c9\u0c26": [], "\ua3ca\u0b87": [], "\ua3cb\u114b\ua0f1\ua2a8": 242, "\ua3cb\u120c\u1834\u131f\u1fc3\ua99f\u30a2\ua6c6": [], "\ua3cb\u1231\u1f02\u161a": [], "\ua3cc": 242, "\ua3ce\ua9e7": [], "\ua3cf": [], "\ua3cf\u067d\u1da6\u11a7\ua47a\u0dc0": 242, "\ua3d0\ua08a\u1f54\u3176": [], "\ua3d2\ua655\uff73\u2d57\u1b86": [], "\ua3d3\u0107\u15bf\u1291\ufd85\u145d": [], "\ua3d3\u2c3e\u0295\ua564\u052b\u19bf": [], "\ua3d5": 242, "\ua3d5\ua22b\u0b99": [], "\ua3d6": [], "\ua3d6\uff44\u0262\u0161\uab54": [], "\ua3d7": [], "\ua3d8": 242, "\ua3d9\ufb6e": [], "\ua3db\ua6c9\u06ab\u160b": [], "\ua3dc": 242, "\ua3dd\u0a15": 242, "\ua3de\u1c78": 242, "\ua3e0\u17a4\u30aa": [], "\ua3e1": [], "\ua3e1\u02a1\u1640": 242, "\ua3e2": [], "\ua3e2\u044c": 242, "\ua3e2\uff6b\ua996": [], "\ua3e3": [], "\ua3e5\u1202\u1320\ua8ac\u0513\u138e": 242, "\ua3e5\ufef7\u133f": [], "\ua3e6": 242, "\ua3e7\u1306\u063e\ua149\u0909\ua3d1": [], "\ua3e7\uffdc\u16ea": [], "\ua3ea": 242, "\ua3eb\ua309\u0185\u1c66": [], "\ua3ec": 242, "\ua3ec\ua44d\u1997\u1157\u11f2": [], "\ua3ee\u30a4\u1d7f\u107b\ufd81\u0135": 242, "\ua3ef": [], "\ua3ef\u06a2\u148c\u14c2\u1e43": [], "\ua3f0\u03b7": 242, "\ua3f2\uff85\ufdc0\u0719\u0b09": [], "\ua3f5\u0b0a": 242, "\ua3f6": 242, "\ua3f8\ua4e3\u1d08\u1765\u027d": [], "\ua3f9": [], "\ua3fa\u0584\u0915": 242, "\ua3fb\ufcc8": [], "\ua3fc\u1fd1\u0437\u018c": [], "\ua3fd": 242, "\ua3ff": 242, "\ua400\uff51\u12d6\ua262\u15f3\u1915\u0676\uaae0": [], "\ua401": [], "\ua402\ufb14\uaae5": 242, "\ua403\uab30": 242, "\ua404\u1eed": 242, "\ua405\u30c3\u04f7\u04dd\u00f5": [], "\ua406\u020d\u182b": [], "\ua406\u14d9\ua1bd": [], "\ua407\u14f9": 242, "\ua408": [], "\ua408\u0461\u2d02\u150d\u00e1": [], "\ua409": 242, "\ua409\ud7be\ua932": [], "\ua40a\u0e0a": [], "\ua40a\ufb38\ufbe0\u092c\u18e2\u15a7": [], "\ua40b\u19ba\u2d10\uffdb": [], "\ua40b\ua205\ua8f7\u0f55\u1553": 242, "\ua40c\u00e4": [], "\ua40e\uaa09\ua48a\u1d0b\uffac\u071d\ua45d\uffa6": [], "\ua40e\ufb55": [], "\ua40f\u31f8\u2db5": [], "\ua410\u18a2\ua7f9\ufc5e\ufedb\ufd32\u12d1\ua3c6\ua0af": [], "\ua413\ua812\u02c9\u31a8\ufd8b\u1b93": [], "\ua414\ua61e": [], "\ua415\u0853\ufc6f": [], "\ua417\u1d05\ua506\u0681": 242, "\ua418\u056a": [], "\ua419": [], "\ua41a\u1da3": 242, "\ua41e": 242, "\ua41f": 242, "\ua41f\u017e\u15b7\ufe8b\u1e07": [], "\ua420": [], "\ua421\ufc00\u15f1\u2dcc": [], "\ua422\ua259": [], "\ua422\ufce3\u1794\ua868": [], "\ua425\ua850": 242, "\ua426": [], "\ua426\u1d54\ua055\ua4dd\ufbeb\u1998": [], "\ua426\ua647": 242, "\ua427": [], "\ua428": 242, "\ua42a": 242, "\ua42b": 242, "\ua42c": [], "\ua42e": [], "\ua42e\u1f41\u021b\u056c\u1104\u0a23\u2c61": [], "\ua42f\u06d0": [], "\ua430\u0207\u0dc6\u2db8": [], "\ua430\u1798\ua224": 242, "\ua433\uabb3\u1852": [], "\ua434\u1590\u0959": [], "\ua435\ufb79\ua2eb": 242, "\ua436\u069f\uab12\u1b2e\ua324": 242, "\ua437": 242, "\ua437\ud7c0": [], "\ua438": 242, "\ua438\u2c78": [], "\ua438\uffad\u03f2\u12ae\u1610\u198f\ufcbc\u1532\u0215\u1d4e\u1b18\u1c63\u170f": [], "\ua439\ufd01": 242, "\ua43a\u069c\ufd7e\u095c": [], "\ua43a\ua218\u15ef\u1dbe\ua2bd": 242, "\ua43d\ufe82\ufb9f\ua02d\ufc61\ufdc2": [], "\ua440": 242, "\ua441": [], "\ua441\u0237": 242, "\ua443\u2130": [], "\ua444": 242, "\ua445\ua373\u1699\uaa6b\u0d23\u0c97\u0ca4\u16c6\ua121": [], "\ua447": [], "\ua448": [], "\ua449": [], "\ua449\u1344\u2cad": [], "\ua449\ufc9a\u0b23\u1276\ufdc3\u1edf\uff50\u020f\ufcea": 242, "\ua44a": 242, "\ua44a\u0d4e\u1905\u09b8\u2d33\ufc09\u0da2": [], "\ua44b": [], "\ua44b\u020f": 242, "\ua44b\u1889": [], "\ua44c": [], "\ua44d\ua79f\u2d4e": 242, "\ua44e\u1412\u1f85\ua28f\ufecf": [], "\ua44f": [], "\ua44f\ua20f": 242, "\ua450": [], "\ua450\u0436": 242, "\ua451\ua986": [], "\ua451\uab5f\u1b33\u1e01": 242, "\ua452\ua0e5\u0562\ufd98": 242, "\ua454\ua551": 242, "\ua455": [], "\ua456\u03e5": 242, "\ua456\ua0a0": [], "\ua457\u0167\u1f00": 242, "\ua458": [], "\ua459": [], "\ua45a": [], "\ua45a\u057b\u15cd": [], "\ua45a\ua38b\u1609\u1421\u1690": 242, "\ua45c\u1e5b\ufd8d\ua2c3": [], "\ua45c\ua747": [], "\ua45d\u1e1f\ufbfe\u1899\ua9e4\ufdb9\ufed3\u1a0a": [], "\ua45e": [], "\ua45e\u131b": [], "\ua45e\ufd7b\u174bg\u1855": 242, "\ua461": [], "\ua461\u0908": [], "\ua462\ua425\u0aa5": [], "\ua464\ufb01\ua24b": 242, "\ua465": 242, "\ua465\u1eef": [], "\ua467\u146c": [], "\ua46b": [], "\ua46b\ufc8d\u00e8": [], "\ua46c": 242, "\ua46c\u1ee1\ufb36": [], "\ua46e": 242, "\ua46e\ua08e\u1e3f\u0681\ua0ee": [], "\ua470": [], "\ua470\ua88d\u1d08\u091a\ua2db\u0471\u1b24": 242, "\ua472\ua443\ua77c\u1013\u1423\u0503\u2c3d": 242, "\ua474\u1a53\u2c87\u04b5": [], "\ua475": [], "\ua475\ua814": 242, "\ua476": [], "\ua476\u155c\u051f": [], "\ua478": 242, "\ua479\ufc01\uaa16": [], "\ua47b": [], "\ua47c\u075f\u03df": 242, "\ua47d\u04d3\ua5cb\u1452\u1bcf\u049b\u31b9": [], "\ua47e\ua2e8": [], "\ua47e\uabd8": [], "\ua47f\uff44\u14fe": [], "\ua480\u3142": [], "\ua481\u029b\ua93d\u028b\u0f5d": [], "\ua481\ua613\u2d22\uabca\ua579\u1617\u174a\u2d8c": [], "\ua482": [], "\ua483\u172a\u30e0\ufc9b\ua6d9\u0185\ufb2d": 242, "\ua484\u0a89\u07db": 242, "\ua484\uabcd\ua43b": [], "\ua484\ufcfb\u16d1": [], "\ua485\u11b9\u03cb\u0b2c\u1b21": [], "\ua485\ua26f": 242, "\ua485\ua970": [], "\ua487": 242, "\ua487\u0dbb": [], "\ua489\u1304": 242, "\ua48a": [], "\ua48a\u01cc\uaaa9": 242, "\ua48b\ufc09\u3147": [], "\ua4d0": 242, "\ua4d1": [], "\ua4d2\u1546": 242, "\ua4d2\ua58a\u15ff\u30e7": [], "\ua4d4": 242, "\ua4d4\u02b8\u1d6a\ufcf8\u158d": [], "\ua4d5\u19c8\u1122\ua0e2": 242, "\ua4d7\u011b\ufc53": [], "\ua4d8\u075f\ua5c4\u1ec3\u028c": [], "\ua4d8\ufb8d\u157b\u138b\u028a": [], "\ua4d9\ua7a3\uabde\ufedc": [], "\ua4da": 242, "\ua4da\u2c42\u2d46\ufcca\u1e2d\u0cde": [], "\ua4dc\ua015\u02c8\ufc32": 242, "\ua4dd\u01cc": 242, "\ua4df": [], "\ua4e0\u0929\u1113\u30c0\u01ce": [], "\ua4e0\ua52f": 242, "\ua4e1": [], "\ua4e1\u1158": [], "\ua4e2\u01f5": 242, "\ua4e3\u0199\u0280": [], "\ua4e4\u0812": 242, "\ua4e5\u0a1d\u1bc0": [], "\ua4e6": 242, "\ua4e7": [], "\ua4e7\u14b5\u1ecf": 242, "\ua4e8\ua920\u0c99": 242, "\ua4ea": 242, "\ua4eav\ua855\u11e0": [], "\ua4eb": 242, "\ua4ec": [], "\ua4ee\u0521\ua295\u1a44\u02bf\u1b22\u066e\u14c7\ua242\u0f52\ua3df\ufc4d": [], "\ua4ee\ufc0b": 242, "\ua4ef\u1ed7": [], "\ua4f1\ua58f": [], "\ua4f2": 242, "\ua4f2\u141b": [], "\ua4f3\ua683\u05e2": 242, "\ua4f4\u15d7\u11d2": [], "\ua4f5": [], "\ua4f7": 242, "\ua4f7\uff9f\u056b": [], "\ua4f8\ua943": 242, "\ua4f9\ufc2b\u0a20\u1d9f": [], "\ua4fb": [], "\ua4fc\u1404\u0958\ufe90\u2d1e\ufc36": 242, "\ua4fc\ufdb6\u134b\u155f\u15bd": [], "\ua4fd\uaa48": [], "\ua4fd\uab49": [], "\ua501": [], "\ua501\u0a5c": 242, "\ua502": 242, "\ua503": 242, "\ua504\u06b4\u1292\ua966\ufe9a\u0780\u07d3\u1273": [], "\ua505\ua5d8\uff88": [], "\ua506": [], "\ua507\u0dc5\u2ccf\uaaf2\uab13": [], "\ua507\u31ab\ua0ef\ua214\ua99f\ufd51": 242, "\ua508": 242, "\ua50b": 242, "\ua50b\u1fe7": [], "\ua50b\ua56d": [], "\ua50c\u06c6\u1198": [], "\ua50d": 242, "\ua50e": [], "\ua50e\u1952\u2c76": [], "\ua50e\u1e57\uab06\u1d38\ua1fc": 242, "\ua510": [], "\ua510\u151f\ua99b": [], "\ua511": [], "\ua512\ufd6d": [], "\ua513\u0637\ua55f": [], "\ua515\u161c\u1a42\u3050\ua5cb\ua6be\uff4d\u0e94": [], "\ua515\ua730\u1608\u0c10": [], "\ua515\ua7fb\u01eb": 242, "\ua516": 242, "\ua517\u1a49": [], "\ua518": [], "\ua519": [], "\ua51a\u1ea3": [], "\ua51b\u0a14": [], "\ua51c\u1c22": [], "\ua51c\ua6a8\u1f95\ua535\ua807\u02af\u0b05\u0ead\u0f67": [], "\ua51c\ufb87": 242, "\ua51d\ufed3": 242, "\ua51e\ufe88\u1f87": [], "\ua520": 242, "\ua522\u0431\u0239": [], "\ua523": 242, "\ua523\ufe78": [], "\ua525": 242, "\ua525\u0261\u14e1\u1606\u161e": [], "\ua526": 242, "\ua528": 242, "\ua528\ud7bd\u0565\u15ec": [], "\ua529\ufb9f\u1703\u1636": [], "\ua52a\u1e7d\u01a8\u1742": [], "\ua52b\u1212": [], "\ua52c": [], "\ua52d": [], "\ua52e": 242, "\ua52e\ufb35\ua896\u1692\u2dd0": [], "\ua52f\uaa12": [], "\ua530": 242, "\ua531\uff53": 242, "\ua532\u05e1\u0a2d\ua753\u2dc2\u309e\u2d61": [], "\ua533\u0111\u18cb": [], "\ua533\u3051\u0f5f\u140b\ud7de": [], "\ua535": 242, "\ua536d\ua6c7": [], "\ua537\u1d1d": 242, "\ua538": [], "\ua538\u15ad\ua5c3\u1183": 242, "\ua538\u1e0d\ua9a0": [], "\ua539\u063f\ua57c\ufc13\u0111": [], "\ua53b": [], "\ua53b\ufb43": [], "\ua53c\uaa49\u03df": [], "\ua53f\u12ab\ufd63\ua817\u04df\u0b33": 242, "\ua53f\ua667\u2c56\u10df\ua00b": [], "\ua540": [], "\ua541\ua1d2\ua935\u1851\ua0b1\uaa89": [], "\ua542\u04f7\u16a4\ua5f6\ud7d7\ua448": 242, "\ua543": [], "\ua543\uaa48\ufcd7\ufba1": 242, "\ua544": 242, "\ua546\u1be4": [], "\ua546\ua44e\u127d\u1cf1\uffd6\u1695\u0c1f\u1614\u1ec1": 242, "\ua547": 242, "\ua548\u15b6": 242, "\ua548\ua3ab": [], "\ua549\u1d30\u00e9\ua645\ua43c\u1a08": 242, "\ua54b": [], "\ua54c\u2d04": [], "\ua54d": [], "\ua54d\u1b8b\u02a0": 242, "\ua54d\ua6a2": [], "\ua54e": [], "\ua54f\u09b8\ua10e\u079c\u14db": [], "\ua552\u0b71": 242, "\ua554\ua6b1\u1e23\u1581": 242, "\ua554\uaa12": [], "\ua555": 242, "\ua556\u2c8d": [], "\ua556\ufc49": [], "\ua557\u1670\u185b": 242, "\ua558\u0d29\u2c44": [], "\ua558\u2d0d": 242, "\ua559": 242, "\ua55b\ua185": 242, "\ua55c": [], "\ua55d": [], "\ua55d\uff56": 242, "\ua55e\u155c": [], "\ua55f\u028d\uaaa0\ua9a7": [], "\ua560": 242, "\ua560\u1479\ufc59\u2c3c\ufc25\uaaa8\u07d4\u0e82\u2d39\u0231": [], "\ua561": [], "\ua561\u11ba": 242, "\ua562": [], "\ua562\u06d1\u11db\u0a10": [], "\ua563\u0b9f\u3113\u0270\u2c87\u0b25": 242, "\ua563\ua3a4": [], "\ua564\u1021\u107a\u12d3\u1966\ua37b": 242, "\ua565\u056b": [], "\ua566": 242, "\ua566\ufc79\ua25f": [], "\ua569": 242, "\ua569\u1ee3\u1e0b\u12a8": [], "\ua569\ufc47": [], "\ua56a": [], "\ua56b": 242, "\ua56b\u122b": [], "\ua56c\ua368\u0689\u1ff4\u138a\ua452\u04a1": [], "\ua56d\u03b7\u0e05\u1c79": 242, "\ua56d\ufe9a\u1f36\ua5d5": [], "\ua56e\ufef8": 242, "\ua570\u1d99\ua65d": [], "\ua571\uff94\u044c\u120c\u30fe\u03c0\u0f89\u10d7\ua3f6\u1d12": [], "\ua572\u2dc5": 242, "\ua572\u3135\u0713": [], "\ua573\u1d31": [], "\ua573\u2d8b": [], "\ua574\u3048": [], "\ua574\ua59a\ua5ec": 242, "\ua574\ufdc3": [], "\ua575": [], "\ua575\ua862": 242, "\ua576": [], "\ua576\u1186\ua595": 242, "\ua578": [], "\ua578\ua46f": [], "\ua57a": [], "\ua57b\u0131\u0dbb": 242, "\ua57c\u140f": 242, "\ua57d\uffb1\ua3f4\ua00e\u0b05\ua0fd\u0bb4": [], "\ua57e\uff4c": 242, "\ua57f\ua72f": [], "\ua581\u12a3\u03b1\u0673": 242, "\ua582\uaa4a": [], "\ua582\ufb4e": [], "\ua583x": [], "\ua584": [], "\ua585": 242, "\ua586\u0c8c\ufb8f\u1b0a": [], "\ua586\uabc7\ua54a\u14e7": [], "\ua588\u0e14\ua199\u051f\ud7b4\u0437": [], "\ua58a\ua96b\ud7c1": [], "\ua58bi": [], "\ua58b\u0e9a\ufb04\ufd38\u15be\u01ed\u0e18\u12c5\u1e31\uaa45": 242, "\ua58e": 242, "\ua58f\u0cad\ua152\ufe83": [], "\ua590\ua940\u16cb": [], "\ua593\u123b\u0d0b\ufc1e": [], "\ua594": 242, "\ua595": [], "\ua596\u1a49\u30a3\u02a0\ua89b": [], "\ua596\ua512\u30ba": 242, "\ua597\ua05a\u15f6": [], "\ua598": [], "\ua599\u1e4b": [], "\ua59a": [], "\ua59b": [], "\ua59b\u010b": [], "\ua59d\u1124\u1318": [], "\ua59e\u0278": [], "\ua59f\u1473\ua1a3": 242, "\ua5a1\u0629\uaa9e\ua5de\ua693\u0696\uff45\u31ad": [], "\ua5a1\u0796": [], "\ua5a4\u15c2": [], "\ua5a4\uab43\u0751\ua420\u1f84\u1182": 242, "\ua5a5": [], "\ua5a5\u1e31\ua9e1\u04f1\u18eb\u049d\ua365\u0bb1": [], "\ua5a6": 242, "\ua5a8\ua8b1\u1b25\u112b\uab5d\u0d28\ua5c6\ufcbe\u3166\u069b\u313a\ua9a4": [], "\ua5aa\u0aac\u04eb": [], "\ua5aa\ufb27": 242, "\ua5ab\u1f80\ua568": 242, "\ua5ab\ua1af\ufb53": [], "\ua5ad\u1b23": [], "\ua5ae\u11f6\u0495": 242, "\ua5b1": [], "\ua5b3\u1159": [], "\ua5b5\u1657\u30c9\u1eb9\u1162\u146b\u1d71": [], "\ua5b6\u03f8\u1556\u0717": 242, "\ua5b7\uaaad\u162f": [], "\ua5b7\ufd20": 242, "\ua5b8": [], "\ua5b8\u043c": [], "\ua5b9": 242, "\ua5b9\ufc7e\u1870": [], "\ua5ba\u049b": [], "\ua5bb": [], "\ua5bd\u14b3": 242, "\ua5be\u01e5\u14f4": 242, "\ua5be\ua911\u03b2": [], "\ua5be\uabd2\ua2ba\ua418": [], "\ua5bf": [], "\ua5bf\u162c": 242, "\ua5c2\u2c31\u1d24": 242, "\ua5c4\u050f": [], "\ua5c4\u118d\u12de\ua8a9\u14d8\ufcd6\u2d85": 242, "\ua5c5": [], "\ua5c6\u2d02": [], "\ua5c7\u18f4\ua260": 242, "\ua5ca\ufc1f\ua68b": 242, "\ua5cd\u08a4\u16bb\ua5c3\u306b\u15c8": [], "\ua5cd\u1991\u1337\ua540\u0d3d\u0461": [], "\ua5ce\u03ad\uab9f": [], "\ua5ce\uaa25\ud7b1": 242, "\ua5d0\ud7f7\u140a\ua057": [], "\ua5d0\ufc5c\u2d09": [], "\ua5d2\u0568\ua589\u145d": 242, "\ua5d2\ufb47\ua91a\ua1ea": [], "\ua5d3": 242, "\ua5d3\u0275\u2c39\ua857\u1023\u02a8\u10e8\ua871\ua90b\uaa06\u1628": [], "\ua5d4": [], "\ua5d6\u31b8\u1fe4": 242, "\ua5d6\ufbe5\u311d\u1017\ua763\ufbf4\uff78\ua0e5": [], "\ua5d7": [], "\ua5d7\u0283": [], "\ua5d8": 242, "\ua5da": [], "\ua5da\ua77f": [], "\ua5db\ua2b0\ua6dd\ua85b\u0275": [], "\ua5dc": [], "\ua5dc\ufcfb\u1412": [], "\ua5dd\u01f3": [], "\ua5df\u2c39": [], "\ua5e0": [], "\ua5e0\u113d": [], "\ua5e1\ufc6f\u1557\u2d1f\ua90b\uff6d\u313c\u0b86": [], "\ua5e2": 242, "\ua5e2\ufefa\ua653\u0297\u1d48\u3122\u310a\ua287": [], "\ua5e3\u0253\ua452\u1dba": [], "\ua5e5": [], "\ua5e5\ua5f9\u190e": 242, "\ua5e6\u14e3\ua773\uab73\ua27f\u30a1": 242, "\ua5e6\u1d27": [], "\ua5e7": [], "\ua5e7\ua47d": 242, "\ua5e8\u0c06\uaa7a\u0497\u2d3a": 242, "\ua5e9": [], "\ua5e9\u1fe2\ud7fb\u1b27\ua1de\u2db9": [], "\ua5eb\u1547\u2d94\ua094": [], "\ua5ed\ua2ee\u148d\ua15b\u2db6\u01dd\u2d3c\u0435\u1295": [], "\ua5ef": [], "\ua5ef\u025e\ua6c2\u1e07\u2c30\u1898\ua69b\ua3cd\ua138\u0217\u0450\ua28d\u117b": [], "\ua5f1": [], "\ua5f1\ua42c\ufb65": 242, "\ua5f2\ua7a7": [], "\ua5f3\u1a05\ufcbc\u1842\u0a93": [], "\ua5f4\u0276\ua99c\u045c": 242, "\ua5f4\ua361\ua204": [], "\ua5f6": [], "\ua5f7\u0ea2\u1677": [], "\ua5f9": [], "\ua5f9\uabe0": [], "\ua5fa\u1fe1\ua46c": [], "\ua5fa\u2db4\u0f4d\u160a\uaa27\u0697": 242, "\ua5fb": [], "\ua5fc": [], "\ua5fc\ua220\u18b5\u1a43\ua0c7": 242, "\ua5fd\ua269\u0452": [], "\ua5fd\ufdba\u1655\ufd10\u318a": [], "\ua5fe\uab31": 242, "\ua5ff\u1382\u0dba\u2c51\u0e0c\ua77a\ufdc7\u1b2c\u0851": [], "\ua603": [], "\ua605\u1b47\u3118": [], "\ua606": [], "\ua607": 242, "\ua607\u1f96\u1983\ua38d\u1f67": [], "\ua607\ua79d\u07d9\u1693\ufbaa\u1706\ua453\ua01f\uaa0c\uff6e": [], "\ua608": [], "\ua608\u019e\ua0ca\u2d44\ua089\u167f\u1eb9\u306d": 242, "\ua609\ua10b": 242, "\ua60a\u1b96\u015f": [], "\ua60a\ua930": 242, "\ua60b": 242, "\ua60b\u06a7\ua48c\ua1f0": [], "\ua610\u01e5\ufbee\u11f0": [], "\ua610\ufda0\u1f07\uffcet\u1653\u2dc2\u06c4\ua0a5\u126b": [], "\ua611\u0242\u1f41\u0b36\ud7c4\u04f3": 242, "\ua612\u1f91\uff59\u2d1e\ua681\u0c9f": [], "\ua612\u2d1a\u2d22\uabb4": 242, "\ua613\u3142\u0289\u1a13": 242, "\ua614\uab5a\u0577\ua916\ua9a6": [], "\ua615\u1c63\u0b28\u1134\ua0d9\u03e5\u04d3\u3108": 242, "\ua615\u1daa\ufd8f\u1133\ua39e\u15a4": [], "\ua616\u0998": [], "\ua617\ufdc6\u0493\u04d1": [], "\ua618": 242, "\ua618\ua919\u1b2e\u1d5d\ua71f\u1505": [], "\ua619\ua3f1\u1db5": [], "\ua61b\ufd13\u05da\u08aa": 242, "\ua61c": [], "\ua61e\ua9a4": 242, "\ua61f": [], "\ua62a\ufe8c\u18a5\u0a99": 242, "\ua62a\uff51\uff9c\ua890\u0288\u0e44\ua15e": [], "\ua62b\ua96e\ufc2c\u1c02": 242, "\ua641": 242, "\ua641\u0b1a\u012d\u1a39\ufcbd": [], "\ua643": [], "\ua643\u1e23\u0b26\u1970": [], "\ua643\u2c40\ufc32\ua1a2": [], "\ua647": [], "\ua64b": 242, "\ua64b\ua532\ua37d\ufcf5": [], "\ua64d": [], "\ua64f": 242, "\ua64f\u1a0f\ua0ff\ufc52": [], "\ua651": [], "\ua653": [], "\ua653\ufb46\u3066\ua09f": 242, "\ua655\u2d22": [], "\ua657": 242, "\ua657\u1966\u1f42\u0cbd": [], "\ua659": 242, "\ua659\u0570\u134e\u1514\u1e69\u11c8": [], "\ua65b": [], "\ua65b\ua6cf\u02a2\u0773\u09ad": 242, "\ua65d": [], "\ua65d\ua816\uab5c\ua0f3": 242, "\ua65f": 242, "\ua65f\ufcd5\ufb73\u0b61\u1db7": [], "\ua661\ufcaf": 242, "\ua663": [], "\ua663\u1b23\u04eb\u1356": 242, "\ua663\u1f72\u0c17": [], "\ua665": 242, "\ua667\u045f\ua153\u0c9d\ua53f\u0d09\u1f20\u1749\u1780": [], "\ua667\ua723\u3137\u1a41": [], "\ua667\ud7dd": 242, "\ua669": 242, "\ua669\u04a7\ufed3\ua33a": [], "\ua669\ud7ba\uff7d\ua237\u1d52": 242, "\ua66b\ua971\ua101\u1474": 242, "\ua66b\uaa73\u182e\u03be\ua687": [], "\ua66d\u1182\u2cdb\ufbf7": [], "\ua66d\uff68\ufb36": 242, "\ua66e": 242, "\ua67f": 242, "\ua681": 242, "\ua681\ud7e2\u144f\u156e\ua354\ufd15\ufb4d\u1187\u3096\u114d\u0d9b": [], "\ua683": [], "\ua685\u149d\u078b\ua4d9\ua00c\u0640\u1354": 242, "\ua687": 242, "\ua687\u2c99\u19b1\ua149": [], "\ua689": 242, "\ua689\u1417": [], "\ua689\ufd3d": [], "\ua68b": [], "\ua68b\u04a7\ua405": 242, "\ua68d\u16d8": [], "\ua68d\ufd9a\ua5f2\u3156\u1219": [], "\ua68f": 242, "\ua68f\u1ef7": 242, "\ua68f\ua0fb": [], "\ua691\ua61d": 242, "\ua691\ufbed": [], "\ua695": 242, "\ua695\u03bf\ufec6\u1f33": 242, "\ua695\u0930": [], "\ua697": [], "\ua697\uff83\u1e17\ua61c\ufb96\u2c4c\u30ea\u111f": 242, "\ua699\u1d78\ua28c\ua6ac\uaa70": [], "\ua699\ua46e\uaa0d\u1f25\ufc2a": [], "\ua699\uabc6": 242, "\ua69c": [], "\ua69c\u02c0\ufb88": [], "\ua69d": [], "\ua69d\u04eb\u14ba\ua3b3h": 242, "\ua6a0": [], "\ua6a0\uab0b": 242, "\ua6a2\u2c6a": 242, "\ua6a2\uaa94\u176f\uab90\u1690": [], "\ua6a3\ua68d\ua434\u1fd0": 242, "\ua6a5": 242, "\ua6a6": [], "\ua6a7": 242, "\ua6a7\u0188": [], "\ua6a8\u1f61": [], "\ua6a9\u1f21\u076b": 242, "\ua6ab": [], "\ua6ac\u0b9c\u1745\ua6c5": [], "\ua6ad\u0c3d": [], "\ua6ae\u128a\u0149\u1f70": 242, "\ua6af\u0151\u0bb0": [], "\ua6af\u1484\u2d3d": [], "\ua6af\ufc4e\ufed9": 242, "\ua6b0": [], "\ua6b0\u0a95": 242, "\ua6b1": [], "\ua6b2\u0643": 242, "\ua6b3\uffae\ua486\ua863\u0461": 242, "\ua6b5\u10f3": [], "\ua6b9": [], "\ua6ba": 242, "\ua6ba\u1125": [], "\ua6bb": 242, "\ua6bb\u1f21\ua294": [], "\ua6bb\ufeb0": [], "\ua6bc\u2d16\uaa66": [], "\ua6bd\u0e20\ua175\u1484": [], "\ua6bd\ua913\u2147": [], "\ua6be\ua2d9\u097c\u0e33": [], "\ua6bf\uab8f": 242, "\ua6c0": [], "\ua6c1": [], "\ua6c1\u05d3\u31a3": 242, "\ua6c1\u1b27": [], "\ua6c2\u0434\u12d2\u1269\u1b49": 242, "\ua6c2\ua9ee\ua1c3\u01d0\u026e\u15ae\ua160": [], "\ua6c3\ua816\uab7b": [], "\ua6c3\uabd1": 242, "\ua6c4\u0a17": [], "\ua6c5\u092d\u0628\u049f": 242, "\ua6c6d\u1118\u0791": [], "\ua6c7": 242, "\ua6c9\u1596\ua339": [], "\ua6ca\u0c0c\u00ee\u2c8b\u1533": 242, "\ua6ca\u1161\u056f\ufb39\u2cbd\u151d\u14ae\ua5b6": [], "\ua6cc": 242, "\ua6cc\uabb8\ua9b2\u03b5\u0467": [], "\ua6cd\u075b": 242, "\ua6ce": [], "\ua6d1\u0287\u1457\ufc27\u120e\ua85f": [], "\ua6d1\uaa85\ufc5b": [], "\ua6d3\u0144\ua083": [], "\ua6d3\uaa47": 242, "\ua6d4": [], "\ua6d5\uffd3": [], "\ua6d6\ufe7e\uff90\u1c74\u2cb5\u1fb7\ua767": [], "\ua6d7": 242, "\ua6d7\u1ea3\ufb72": [], "\ua6d9\u0240": [], "\ua6da\ufbfe\u0583": 242, "\ua6da\ufd02\u1e97": [], "\ua6dc": 242, "\ua6dc\ufca2\ua068\uaa6d": [], "\ua6de": [], "\ua6de\uaaaf\u11d0": [], "\ua6df": 242, "\ua6e0": [], "\ua6e0\u1225\ua04d\u0237": [], "\ua6e0\ufed2": 242, "\ua6e1": [], "\ua6e1\ua190\ufcd5\u2145": 242, "\ua6e2\ufd5d\u141a\uabc4\u18c7": [], "\ua6e3\u1464": 242, "\ua6e5": [], "\ua718": [], "\ua718\u076c\ufbd5": 242, "\ua719": 242, "\ua719\ufd7d\uffb5\ua3c1\ufda4": [], "\ua71a\u11e2\u03d9": [], "\ua71b\u1fd6": [], "\ua71c\ua985\u1995\u1f80": 242, "\ua71d\uff83\ua1ef": [], "\ua71f\u1626\u0503\u12f6": 242, "\ua723\u00f2\u2071\ua88c\u1172\ua2ee\u3052": [], "\ua725\u1d37\ua3fc\u099b\u100d": [], "\ua725\u2c93": [], "\ua729": 242, "\ua729\ua296\u1136": [], "\ua72b": 242, "\ua72b\ufe72": [], "\ua72d\u099c\u0137\ua9fe": [], "\ua72d\ua3f3": [], "\ua731\ua3a1": [], "\ua733": [], "\ua733\u1915\u02cb": [], "\ua733\ua29c": 242, "\ua735": [], "\ua735\ua77c": [], "\ua737\u0d21\u1e6f": [], "\ua739\ua8a8\ua6a4\u16b1": 242, "\ua739\uff88\u1567\u2d31\u00fc\u2c55\ua041\u06fa": [], "\ua73b\u15ca": 242, "\ua73b\u2119\uff59\u2c49": 242, "\ua73dw\u15bb\u18e6": 242, "\ua73d\u0f5b": [], "\ua73f": 242, "\ua73f\u16dc": [], "\ua73f\ua2a6": [], "\ua741\u190c\u1785": 242, "\ua741\u1c1a": 242, "\ua741\u1d26\ua137": [], "\ua741\u2d23": [], "\ua743": [], "\ua743\u30e0": [], "\ua745\u0572": 242, "\ua745\u1e21\u14ae\ua41a": [], "\ua749\u313d\ua993\u0267\uaa97": [], "\ua749\ua896\u1630\u0a38": [], "\ua74b": [], "\ua74f": 242, "\ua74f\ua66b\u2d4c\u0517\u2d36\u1971\uaa71\u0a5a\u30fd\uaaa8\u0621\u0e25": 242, "\ua74f\uab81\u0ea7\u1206": [], "\ua751": 242, "\ua751\u1055": [], "\ua751\ufb59\ufee6\ua6cb": [], "\ua753\u11ed": 242, "\ua753\ua004\uab9e\u014b\u0e1a": [], "\ua755": [], "\ua755\u0648\u186a": [], "\ua757\u044a": 242, "\ua757\ua920\ua93c": [], "\ua759\uab73\ufbee\u2c31": [], "\ua759\ufec8\u1d0f\u0784": 242, "\ua75b\ua10d\u19a6\u3077\u013e": [], "\ua75b\uffc5": [], "\ua75d\u0808\u1331": [], "\ua75d\u1225\u0451": [], "\ua75d\u163b\ufd07": 242, "\ua75f": [], "\ua761": 242, "\ua761\ua037": [], "\ua761\ua3b1": 242, "\ua763": [], "\ua763\u0996\u0252": [], "\ua763\u0aae\u0aac\u1e07": 242, "\ua765\u0d1f": [], "\ua765\u12f9": [], "\ua767\u3083": 242, "\ua769": 242, "\ua769\u0ec0\ua04c\ua45f\u12ab": [], "\ua769\u1f37": [], "\ua76b": [], "\ua76d\u02a4\u14e7\u19c1": [], "\ua76d\ua0ad\ua58d": [], "\ua76d\ua4e8\u08a4": [], "\ua76f": 242, "\ua76f\u0935\ufd9f\u186c": [], "\ua770": [], "\ua770\u0e94\u1703\u075e\u2d21\ua5b1\uab9a": 242, "\ua771": [], "\ua772": [], "\ua774": [], "\ua775": [], "\ua775\u1f21": [], "\ua776\ufb5f": [], "\ua776\ufb99\ua15f\ua350\ua083": 242, "\ua777": [], "\ua778\ufcc5": [], "\ua778\ufeb1\u0e9d\u1425": [], "\ua77a\u0934\u1888\ua2ca\ua26a\u164b\ua1bd": [], "\ua77a\u123b\ua86f\u1c1e\ua07e\u2d25\ua3a4\u1696\ua68d\u04fb\u07e0\u17a5": 242, "\ua77a\ua7fa\u0436": [], "\ua77c\u15a5": [], "\ua77c\ua17d\u069d\u11e2": [], "\ua77f": [], "\ua781": 242, "\ua781\ua011\ua8aa": [], "\ua781\ua055\ufbd7\ua130\ua162\ua96a\u1c0e\u06b9\ufc67": [], "\ua783": 242, "\ua783\u14a4\ua453\ua71f": [], "\ua783\u2c65\u01aa\u099f": [], "\ua783\ufd66\ua1ac": [], "\ua785": 242, "\ua785\u2d60": [], "\ua785\uaba4": [], "\ua787": 242, "\ua787\u01a5\u0ea2": [], "\ua787\u0479\ufd05": [], "\ua788\u14be": [], "\ua788\ufcc9\ua464\u117a": [], "\ua78c": [], "\ua78c\ua93e\ufdab\u00fe\ua07b\ua439": [], "\ua78e": 242, "\ua793": [], "\ua793\u0456\u1bbb": [], "\ua793\u0b93\u2c5e\u3111": [], "\ua793\u1209\u1780\u0807": 242, "\ua794": [], "\ua795\u165b\ua69b\ua2f6": [], "\ua797\u03ba\u140d": 242, "\ua797\ua8f7\u1741\ua990\u0183": [], "\ua799": [], "\ua799\ua151\u080d\ufe83\ua581\u1d58": [], "\ua799\uab7d\ua0cc": [], "\ua79b": [], "\ua79b\ua488\u1231": 242, "\ua79d\u0463\u16da\ufed1\ua74d": [], "\ua79d\ufc38\u0623\ufb8a\uab0b\ufbec": [], "\ua79d\uffd7\u1b27\u1f86\u10df\u0d1a\ua580": 242, "\ua7a1\u1405\u2dcb\u2cb5\u19b1": [], "\ua7a1\u1e69\u0b28\u012f": [], "\ua7a1\ua1c0": 242, "\ua7a1\ua43f": [], "\ua7a3": [], "\ua7a3\u213c": [], "\ua7a5": 242, "\ua7a7": [], "\ua7a9": 242, "\ua7f7\u1494\u16c7": [], "\ua7f7\u17ad": [], "\ua7f8\ufcfc": 242, "\ua7f9": 242, "\ua7f9\ufb72": [], "\ua7fa\u11b8\u049b": [], "\ua7fd": [], "\ua7fe": 242, "\ua7fe\u2d17\u1bd6": [], "\ua7ff": [], "\ua7ff\u3162\u149a": [], "\ua803\u121d": [], "\ua803\uffd5": 242, "\ua804": [], "\ua804\uaa42\u0215": 242, "\ua805": [], "\ua807": [], "\ua808\u062c\ua040\u056e\u3091\u14a1\u1386": [], "\ua808\ua5c9\ufb64": [], "\ua808\ua685\ufb2e\u1237\ua048": 242, "\ua809\uabb7\ua26b\u1647\ufedb\u132a": [], "\ua809\ufbd3\ua195\u1523": 242, "\ua80a\ua992\u01b0": [], "\ua80c": [], "\ua80c\u1c20": [], "\ua80d\ua26e": 242, "\ua80f": 242, "\ua80f\u2c68\u11ce": [], "\ua810\ufdf5": [], "\ua813\u144f\u2dac": [], "\ua815": [], "\ua815\u1e27": 242, "\ua816\ufece\u0d25": [], "\ua819": 242, "\ua81b\u0e17": 242, "\ua81c": [], "\ua81c\u0caf\ua588\u02ac\uaae8\u15cb\u2dba\ua232\uabb5": 242, "\ua81d\ua230": [], "\ua81e\u1b9a\u141f": [], "\ua81f\ufd33\ua669": [], "\ua820\u1c08": [], "\ua822": [], "\ua822\ufbf3": [], "\ua840": 242, "\ua840\u12b4": [], "\ua843\uaaa5\ua777\u1d00\u04f9": 242, "\ua845\ua873\u0c1c\u14ff\u18f1": [], "\ua846": 242, "\ua846\u0788\u1bde\u04a9": [], "\ua848\ufcb4\u0148\u2184": 242, "\ua849": [], "\ua849\u06a8\u1602\u072a": 242, "\ua84a": [], "\ua84a\u01eb": 242, "\ua84b\ua5f5": [], "\ua84b\ufbe2\u1a06": [], "\ua84c\u02d0\u0a91\ua3a5\u2cd5\u06cf\u30b5": [], "\ua84c\ufcf0": [], "\ua84d\u09b6\u126f": [], "\ua84d\ua4dc\ua723\uffad\u3047\u1836\ufed8": [], "\ua84e": 242, "\ua84f": [], "\ua84f\u11ee\u186b\u0192\ua59e\u12b9\u1967": 242, "\ua850": [], "\ua851\ua40f\u119e\u2cd9\u1174\u19bb\ufd8f\u0b8e": [], "\ua852\u112d": [], "\ua852\u2d96": [], "\ua852\ufcc7": 242, "\ua854": [], "\ua854\u1cf5\u1d2b\u11a6": 242, "\ua855\u1b30\ua5a8\ufea2": 242, "\ua856\u17d7": 242, "\ua858\ua4f6\u06fc\u1888\u1c6e\u05d7": 242, "\ua859\u01b6\ua69c": 242, "\ua859\u1233\u0209\u0e9b\u04f5": [], "\ua859\u1e65\u15a1\u1e7f\u2dc3": [], "\ua85a\u02a9\u0a21": 242, "\ua85a\u02ad": [], "\ua85a\u196a\u17a4\u0904\u1505\u160e\u1e31\ufc3f\u115f\u1c0d\u1c22": [], "\ua85b\ua97a\uaa92\u1e27\u09b9\u1f7d": [], "\ua85c": [], "\ua85c\u1c79\u1bbf": [], "\ua85c\ua6c9\ufb92": 242, "\ua85d\u15de\u0c1f\u117c": [], "\ua85e\ua7a3\ua3c7": 242, "\ua85e\uff84": [], "\ua85f": 242, "\ua85f\u03f8\u097d": [], "\ua860\uaa16": 242, "\ua862\u0858\u1855\ua6cf": [], "\ua864\u30e8": [], "\ua864\ua39c": [], "\ua865\u1f25\u0a2a\ua213\u1417": 242, "\ua865\ua327": [], "\ua866\u1199y\u1252": 242, "\ua867\ua44c": 242, "\ua868": 242, "\ua869\u0148": [], "\ua86a\u0458": 242, "\ua86a\u0672\ua3fe": [], "\ua86b": [], "\ua86b\u051b\ua50c": [], "\ua86c": 242, "\ua86c\ua59d\ufda3\ua611\ua181\u1616\ufc38\u1bc4\u3072": [], "\ua86e": [], "\ua86e\u10f6\u11a7\ua61e\u31a2\u3119\ua377\ua2ae": [], "\ua86e\u1e7d": 242, "\ua86f\u092b\u11e4\u06c5\uff48\ua755\ufc0c": [], "\ua86f\uaa8d": [], "\ua871\ua150": 242, "\ua872\u1612\ua821\uaa07\ua5c7": [], "\ua872\u2ccf\ua098": 242, "\ua872\u3080\ua91d": [], "\ua873\u1340\ua93e\u126a": 242, "\ua882": 242, "\ua882\u03e5": [], "\ua882\ud7da\u2dc8\uaae2\uffa0\u1b84": [], "\ua883\ua385\ufcf0\u15b0": [], "\ua883\ufd7f": 242, "\ua887\ud7b8": 242, "\ua888": [], "\ua888\u0109": 242, "\ua889\uff55": [], "\ua88a\u16b7\u1a33\ua14c": 242, "\ua88b\u028b\u1eef\u0691\u124c": [], "\ua88c\u0d90": [], "\ua88f\u3035\u1e96\u314d\u017c": [], "\ua88f\uab7b": 242, "\ua890\uff85\uab45": 242, "\ua891\u0568\u1a10\ufb6a\ua745\ua43d": [], "\ua891\u1972": 242, "\ua892\u03bd\u0c21": [], "\ua892\u04a5\ufb7e\u1c72\u0684\ua853\uab91\u07e4\u01ff": [], "\ua893\u1526\ua404\u0c90\u0638": [], "\ua894": [], "\ua897\ua3e5\ua30c": [], "\ua898": 242, "\ua898\u02c1\u1217": [], "\ua898\ufc98\u1820\u2c30\ua1f9\u0f4b\u1d59\u0971": [], "\ua899": [], "\ua899\uff9d\u12cb": [], "\ua89a\u156f": [], "\ua89b": 242, "\ua89b\u3109\ua551\u2cb9\u11ef": [], "\ua89c\u0a28\u1454\ua427\ua103\ua292\ua1c6\ufd64\ua105\ua33c\u0755": [], "\ua89d": [], "\ua89e\u3116": [], "\ua89f": 242, "\ua8a1\ufc86\u16ba\u1f94\u0db8": [], "\ua8a2\u14de\u1e51\u1998\u2136\ua1ac\u1151": [], "\ua8a3\u0eaf\u0bb0\u1256\uab43\uffac\u1380\u1fb3\uff50\u2d0b\u1471\ua553\u0931": [], "\ua8a4\ufd31\u1446\u0c32": [], "\ua8a4\ufd76\u15f3\ua09e": 242, "\ua8a5": [], "\ua8a5\u0463\ua9ed": 242, "\ua8a6": 242, "\ua8a6\ua30e\u1318": [], "\ua8a7\u037c\u05d5\u17b0\u1183\u12c8": [], "\ua8a7\u0aa1\u2c78\ud7dd\ufca2": [], "\ua8a8": [], "\ua8a9": [], "\ua8aa\u115f\u16db\u1a0a\uff93\u024b\u16b6": 242, "\ua8ab": 242, "\ua8ab\ua18d": [], "\ua8ac\ua0bd": [], "\ua8af\u0801\u0813\uaa46\ua081\ua01c\u131d\ua0a9\u2130": [], "\ua8b0": [], "\ua8b0\u165b": 242, "\ua8b2": [], "\ua8b3": 242, "\ua8f2": [], "\ua8f2\u10d6": [], "\ua8f2\ua0c8": 242, "\ua8f3": [], "\ua8f5\ua97a": [], "\ua8f6\ua113": 242, "\ua8fb\u189b\u12c4\ufbf4\u00f8": [], "\ua90a\u1e6b": [], "\ua90a\ua899\u15c5": 242, "\ua90b": 242, "\ua90c\u198b\u0d9b\u1f02\u02b8": 242, "\ua90c\ua853": [], "\ua90d": 242, "\ua90d\u1823": [], "\ua90e\u1700\uffca\u1134\u1152": [], "\ua90f\u160a\u08ab": [], "\ua910\u1542\u1d18": 242, "\ua910\u3133\ua30f": [], "\ua911\u00fc": [], "\ua912\u0699\u057d": [], "\ua912\ua4f3": [], "\ua917": [], "\ua917\u16ac": 242, "\ua918": 242, "\ua918\ua931": [], "\ua91b": [], "\ua91c": [], "\ua91f\ua96a\ua979\ua3a6": [], "\ua921": [], "\ua921\uff47\uab5d\u15a8\uab38": 242, "\ua923\ua5cf": [], "\ua924\u0572\ua58e": [], "\ua924\u18a2\u1416\ua976\u1e55\u03c0\ufb5b\ua7fb\u00ec\u12dc\u10e6\u1992\u16d1\ua68b\ufbf2\ua65f\ua600\uaab1": [], "\ua925": [], "\ua931\ua84a\ua154\ua557\u1386\u0778\u0751\u30cf\ufd92\u0caf": [], "\ua932": [], "\ua932\u0aab": 242, "\ua933": [], "\ua934\u0121": [], "\ua935\u07d8": 242, "\ua938": [], "\ua939\u11c9\u18c7\ua19b\u1957\u0628\u1689": [], "\ua93a": 242, "\ua93b\u100e\ufb49": [], "\ua93c": 242, "\ua93d\uffa3\u0d91": 242, "\ua93f\u1114": 242, "\ua940": 242, "\ua940\u0715": [], "\ua941": [], "\ua942\u11e7\u03e9\ua08b\ufbfc\u03b1\u01b6": [], "\ua943\u1eb9\ua895\u16a6\ua344\ua741\uff5a": [], "\ua945": [], "\ua945\u166f\u11b2\u1212\ua6d7\ufdb0\u0a25\ufc93": [], "\ua946": [], "\ua960": [], "\ua960\u0217\ufdb3": 242, "\ua961\u00e2": [], "\ua961\u0247": 242, "\ua961\u1647": [], "\ua963": [], "\ua963\u063b\u0928": [], "\ua964": [], "\ua964\ufc3d\u0229\u1e8f\ua401": 242, "\ua964\ufc3f\ua2fe": [], "\ua965": 242, "\ua965\ufceb": [], "\ua966": [], "\ua967": [], "\ua967\u0939\u0109\u1557\u063c\ua15b\u2d0e\u1e91\u04a3\u149c\u122b\ua2d2\ua296\u30c5": 242, "\ua968\u025f\u1f67\u15b0\u2c56\u0e24": 242, "\ua968\u1ed3\uab29\u05d4\u0639": [], "\ua969\ua3f7\u18d3\u2c9f\ua130\ua0f6\u1532\ua3c8\ufb69\u0ca3\ua468": [], "\ua96b\u1279\u1682": [], "\ua96c\u1e49\ua002\u1f93": 242, "\ua96c\ua559": [], "\ua96d": [], "\ua96d\ua11a\u2d56\ua5c1\ua93b": 242, "\ua96e": [], "\ua96f\u1d8d\u0e2c\u04f5": 242, "\ua970\ua336\u098c\u1f15": 242, "\ua971": [], "\ua972\u1545": [], "\ua973": [], "\ua973\ua03c\u1a35\u00e6\u02c0\u1be3": 242, "\ua974\u135a": 242, "\ua976": [], "\ua976\uff57": 242, "\ua977\ua59c\u163d": [], "\ua978": 242, "\ua979": [], "\ua979\u151d\u12a1\u0e2f": 242, "\ua97b\u1f82\ufc66": [], "\ua97b\ua3c1": 242, "\ua97c\ua996\u15cf\u1604": 242, "\ua984": [], "\ua984\ua326\uff6f\u14e2\u02b1\u1fa2\ua57a\u1e69": 242, "\ua987\u1066\u183c\u2c47\u0a73": [], "\ua988": [], "\ua988\ua9e4": 242, "\ua989\ua602": 242, "\ua989\uaaac": [], "\ua98a\u1f78\u0371": [], "\ua98b": 242, "\ua98c\u024f\ua5f7": 242, "\ua98c\ufdbe\u2092": [], "\ua98e\u2c9f\ua2bd\ufb91\u1591\ua513\u16e5": [], "\ua98f": [], "\ua991\u16bc": [], "\ua991\ua6cb\u044d\ua513": 242, "\ua992\u1e6b\u1198": 242, "\ua994\u1418": [], "\ua995": [], "\ua995\u021b\u1ebf\u1142\u167b": 242, "\ua995\u211c\ufb01\u1ef9": [], "\ua997\u0a90\u05dc": [], "\ua997\ua248": 242, "\ua998": [], "\ua998\u1d0b": [], "\ua998\ua009\u1f87": 242, "\ua999": [], "\ua99a\ufb5d\u046b\u1b28\ua230\ua5fd\u30b1\u06a6": 242, "\ua99b\ua51f\u2c40\ufbeb\ua6b2": [], "\ua99c\u1f04": [], "\ua99d\u0ca2": [], "\ua99f": [], "\ua9a2": [], "\ua9a3\ufb1f\ua1e3\u30af\u174f\u184b\ua38a\u11c1\u1e47\u1f65": 242, "\ua9a4": [], "\ua9a5\u2ddb\u1fe2": [], "\ua9a6\u0935": 242, "\ua9a7\ufcb7": [], "\ua9a8\u2134": [], "\ua9a9": [], "\ua9a9\u101e": [], "\ua9aa": [], "\ua9aa\u0293": [], "\ua9ac\ufc4c\ua084\ufc74": [], "\ua9ae\u1fa2": [], "\ua9af\ua500\uabd4\u1ef7": [], "\ua9b0\ufbad\u1da8\ufbf8\u0f43\u0459": [], "\ua9b1": [], "\ua9cf": [], "\ua9e0": [], "\ua9e1\u0467\u07d2\u1e8d": 242, "\ua9e2\ufd81\u2d0f\u17b2": [], "\ua9e3": 242, "\ua9e3\u0d87\u071a\u0157": [], "\ua9e4\u04b9\uabc9\ua2d1\u0ba8\u11be\u1fa0\u30b2\u10f6": [], "\ua9e7\u0f51": [], "\ua9e7\u0f51\ua161\u165c\u057d": [], "\ua9e8": [], "\ua9e9": [], "\ua9ea\ufd1b\u11d4": [], "\ua9eb": [], "\ua9ec\u1d92\ua0ec\u147b": [], "\ua9ed\u04bb": [], "\ua9ed\u0d27\u3115": [], "\ua9ee\ufd1c\uab50\u131c\u140e": 242, "\ua9ef\u02e3\ufc1c": [], "\ua9ef\u0918": 242, "\ua9fa\u0e26\u1484\ufc4f": 242, "\ua9fb": 242, "\ua9fd\u125d": 242, "\ua9fd\u1db0\ua2d2\u00ea\ufd1c": [], "\uaa00": 242, "\uaa02": [], "\uaa03\u19a5": 242, "\uaa04": [], "\uaa04\ufba2": [], "\uaa05\ua2bc": [], "\uaa07": 242, "\uaa09": [], "\uaa09\u1207\u1e0f\u12fa": 242, "\uaa0a": [], "\uaa0a\u10d0\u0b60": [], "\uaa0b\ua55d\u12a5": [], "\uaa0c\u026f": [], "\uaa0c\ua3a6\u18c0\u0846\ua297": 242, "\uaa0d": 242, "\uaa0d\ua727": [], "\uaa0e\u132c": 242, "\uaa0e\u1ef7": [], "\uaa0f\u122a\ua28e\uaa95": 242, "\uaa13\uabac\u0203": 242, "\uaa14\ufd7f\u0f46\ua060\u1e75": [], "\uaa15\u0c1a\u122d\u1dbc\u2149\ua11c\ua15d\u0f4c": 242, "\uaa17": [], "\uaa17\u2cbb": [], "\uaa18": [], "\uaa18\u1761\ua172\ua2ec\u04e1\u062c\u2d14": [], "\uaa1b": [], "\uaa1b\ufbdc": 242, "\uaa1c\uaa1d": [], "\uaa1d\ua24d\ufd77\u04f5\ufb95": 242, "\uaa1e": 242, "\uaa1f\u0c05": [], "\uaa1f\u1164": 242, "\uaa1f\uab0a": [], "\uaa20\u14df": 242, "\uaa21\u30db\ufc6a\u0c2d\u18dc": 242, "\uaa22": 242, "\uaa22\u0681\u1701\ua107\ua3a2\u1e19\u112f\u01dc\ufe87\ufd6e": [], "\uaa23": [], "\uaa23\u15bc\uaa6e\ua054\uab64\ua13d\u1a3e\u0207\u1962": 242, "\uaa23\ufc91": [], "\uaa24\u1950\u00ec\u1e03\u2c83": [], "\uaa24\u307b": [], "\uaa26": [], "\uaa27\u05e6\ua5a3\ufd15\u2d5a\u1298\u214e\u0aa2\ud7d0": [], "\uaa27\u313a\u11a1\ua930": [], "\uaa28\u14b8\u04ca\u10ef": 242, "\uaa28\u2cc7\ua66d\ufc22\u1bd8\ua9e6\u1495\u1fc4\u0f66": [], "\uaa40\u155d\ua727\ufc88": [], "\uaa40\ufd53\u17d7\u16bf": [], "\uaa42\ua0d6\ua176\u072b\u2c47\ua5df\u165f": [], "\uaa44\ua164\uabb4": [], "\uaa45\u1a35\u1965\u05f1": [], "\uaa46\uab4a": 242, "\uaa47\ufce6\ufec5\u1bc2\u1358\u1cef": [], "\uaa48\u0797\ua855\u318b\u1f51\ua733\u0581": [], "\uaa49\uaaaf": 242, "\uaa4a": 242, "\uaa4b\ufba5": 242, "\uaa60\uab4f\u1b1c\ua23d": 242, "\uaa61\uff71\u0bb7": 242, "\uaa62\u03df\u1a07": [], "\uaa63\u1f12\uaa6c\u1f35\ufebf": [], "\uaa65\u2ce1\uab76": [], "\uaa65\ua09c\ua6a1\u16b2\u025b\u079c\u05e8": [], "\uaa66\u189f\ufcd8\u0842\ufb65": [], "\uaa67\u3034": [], "\uaa67\ua187": [], "\uaa6a\ua61d": [], "\uaa6b": 242, "\uaa6c\u02a5\u0c18": [], "\uaa6c\u2d8f": 242, "\uaa6d\u1d21\ufb59": 242, "\uaa6e\u1e5d": [], "\uaa6e\ua57b\u1c64\ufdbe": [], "\uaa71": [], "\uaa73\ufb56": 242, "\uaa76": [], "\uaa76\u08ac": [], "\uaa7a\u0f4c\ufbd8\u1e2f": [], "\uaa7e\u1527\ua66b": [], "\uaa7f\u01f9\u31f0": [], "\uaa81\u1f79": 242, "\uaa81\ua9a0": [], "\uaa82": [], "\uaa83": 242, "\uaa83\u01df\ua553\u1eff\u05d2\u1f97": [], "\uaa83\u0e10\ua469\ua5e5": [], "\uaa84": [], "\uaa86\u3133\ufcb6\ufd80": 242, "\uaa87": [], "\uaa87\u1ff4": 242, "\uaa87\u2094\ua767\u174f": [], "\uaa88\u1be5": 242, "\uaa89\ua5f8\u07da\ua173": 242, "\uaa8a\ua5a7\ufda4": [], "\uaa8b\ua1fe\u160b\ua105\u1263\u12f0\ufcac": [], "\uaa8d\u01a3\u1f27\u06cf\ufb4a\u2d19\u1e1f": 242, "\uaa8e\ua192\u03dd\u1f41\u0e07\ufb26\ufbf2\u0c32\u057f\ua061\ua3fb": 242, "\uaa8f\u19bf\ua58d\ua570\ua9ea\u0f43\ua822": 242, "\uaa90\u15fb\uaaea\u1862": [], "\uaa90\ua376\ua774\u16ca\ua340\u0165": 242, "\uaa91\u2dba\ua51f\ufd87\u17a6\u213e": [], "\uaa92\u1ebd\uab38\u308a": [], "\uaa93": 242, "\uaa93\ud7d4\u1c5b\u11fd\u1f95\u0850": [], "\uaa95\ua9a2": [], "\uaa95\ufe9c\u1d64\u1fa3": [], "\uaa96": 242, "\uaa98\ua320\uaaa1": [], "\uaa98\ua6cd": [], "\uaa98\ufc78\u046d": 242, "\uaa99\u04ab\u183b": [], "\uaa99\u1004\u1559\ufee5\u0c9d": 242, "\uaa9b": [], "\uaa9b\u078f": 242, "\uaa9c": [], "\uaa9d\u311a\ufbe9": [], "\uaa9e": [], "\uaa9e\u012b": 242, "\uaa9f\ua1a1\ua885\ufcf5": 242, "\uaaa2": [], "\uaaa3\u0692\u1f53": 242, "\uaaa4\u0390\u0a1a": [], "\uaaa4\u10e9\ua2f9\u0bd0": [], "\uaaa5\ufed0\u140e": [], "\uaaa6\ufcd9\u1e61\u1128\u1fd7\uabcc": [], "\uaaa7\ufdbd": [], "\uaaa9": [], "\uaaab\u12dc\u0769\u111b": [], "\uaaac\u0119\u108e\u1cf0": 242, "\uaaae\u044e\ua91d\ua45b\u1260\ua57f": [], "\uaaae\ua3e9\ufc48": [], "\uaaae\ufd0d": 242, "\uaab1": 242, "\uaab5\u027e\u1491\u1f25\u102a\u155d\u1960b": [], "\uaab6": [], "\uaab6\u0634\u1eb5\u155b\ufb15\u11ad": 242, "\uaaba\u3086": [], "\uaaba\ua2d8": [], "\uaabb\u0c94\u2d03": 242, "\uaabc": [], "\uaabd\uab28\ua71d\ua18a\u0513\u190f\u1f72": [], "\uaac0\ua685\ua85e\u01d4": [], "\uaac2": 242, "\uaadb\u313f\u3167\u0471\u162f": [], "\uaadc\ua727\u04ad\u16d5\u0a2c": [], "\uaae0": 242, "\uaae0\u0b15\ua725\uaa8e\uab4b": [], "\uaae2\u3057\ua6b3": [], "\uaae3": 242, "\uaae3\ua1df\ua996": [], "\uaae5": [], "\uaae6": [], "\uaae7": [], "\uaae7\ufcb2": [], "\uaae8": [], "\uaae8\u15ee\ua51b": [], "\uaae9\ua1f8": [], "\uaaea": [], "\uaaea\u04e7\ua01e\ua5eb\ufb67\ua8ad\u080a\ufc4c\u1aa7\ua0da\ua91d": 242, "\uaaf2\u1d14": 242, "\uaaf2\ua52a": [], "\uaaf3\uff52": 242, "\uaaf4": 242, "\uab01\ufca3\u1237\u19c0": [], "\uab01\ufcb4\u110d": [], "\uab03": [], "\uab03\u1d92\uff94": [], "\uab05r": [], "\uab06\u028f": [], "\uab09": [], "\uab0c\u1bc7\u1314\u0aa0\u0719\u069a\u0e1a\u1e59\u14e5\u0974\u16ea\uabb3\ufc6b\ufc2b\ufcf2": 242, "\uab0c\ua0d3\u0c9a\ua033\u1770\u15dc\u2d24\u30aa\u0960\u2cc9\ua392\ufd2b": [], "\uab0e": [], "\uab11\u1489\ufb9e": [], "\uab12\u011d\u06cc": [], "\uab14": [], "\uab15": [], "\uab15\uffcf": 242, "\uab16\u01a5\u1995": [], "\uab16\u0e9c\ufeda\ufce9\u2dc3\u084c\u03b2\u0b8e\u30bf": 242, "\uab20\u14f8": [], "\uab21\u0780\u1bd0\u013e\u092c\u1994\ua42b": [], "\uab22\u01bf": 242, "\uab23\u1e2d\ud7c6\u1d16\u1280": 242, "\uab24j\ua68d\ua843\u125a\ufcf2\ua6d3\ufd86": [], "\uab26\u1829": [], "\uab2b\u0119": [], "\uab2c\ua165\uff47\u077f\u05e7\u212d": [], "\uab2d\uffbe": 242, "\uab2e": [], "\uab2e\ua723": 242, "\uab2e\ua747": [], "\uab31": [], "\uab31\u00fc\ua16f\ua64d\ua263r\u025d": [], "\uab32\u0750\ua745\u0cf2\ua944\u092e\u09a5\u0aa1\u101d": [], "\uab32\ua667\u04e9": 242, "\uab33": [], "\uab33\u0138\ua27e\u1748\u067e\u0796": 242, "\uab33\u19c9\u2c33\uaaaa": [], "\uab34": [], "\uab37": [], "\uab3a": [], "\uab3b\ua321\u0909": 242, "\uab3c\u0c1e\u1d3e": [], "\uab3d": [], "\uab3e\u30ec\ufd1e\u30ca\u14fc\u151e\u19ab\ufcb0": [], "\uab3f\ua6b0": [], "\uab40\u011f\u0585": [], "\uab40\u1540": 242, "\uab40\u2c76\u1f34": [], "\uab41": 242, "\uab42": 242, "\uab44": [], "\uab45": [], "\uab46": [], "\uab46\u1efb": [], "\uab47\u0225\ua5df": 242, "\uab47\u047b\u1c0c\u133b": [], "\uab48": [], "\uab49\u045f": 242, "\uab4a": [], "\uab4b": 242, "\uab4c": 242, "\uab4d": [], "\uab4d\u04bd": [], "\uab4e\ufc7d\u212f\u1efb": [], "\uab4f\u1566": [], "\uab50": [], "\uab50\ua6db\ua99e": [], "\uab51\u050f\u112a\u2124\ua1f6\u30f5": [], "\uab52\u1548\u31a0\ufc0b\ua3c4\uffc4": [], "\uab52\ua993": 242, "\uab53\u1e41": [], "\uab54": [], "\uab55": [], "\uab55\u01d4": [], "\uab56\ua122\ua9ab\u30e2\u1011": [], "\uab57": [], "\uab57\u1444": [], "\uab58": [], "\uab59": [], "\uab5a": 242, "\uab5c": [], "\uab5d\u1bd5\ua1e1": [], "\uab5e": 242, "\uab65\ufd3c\ua224\ua279\u1552\ua9b1\ua203\u30f2\ufed1\u12fc": [], "\uab71\u3041\ua1f3\uab06\u0cde": [], "\uab71\ua382\u1895\ua578": 242, "\uab72": [], "\uab73": [], "\uab75\u0e14": [], "\uab75\u2c85\u1007\ua3e4": 242, "\uab76\u1411": [], "\uab77": [], "\uab77\ua8ae\uaba7\ufb78": [], "\uab78\u0250\ua6d4\u18d5\u1264\u1159\ua3b5\uabdd\uaa6f": 242, "\uab7a\ua2d1": 242, "\uab7b\ua48b\ua099\u1494": [], "\uab7c": 242, "\uab7e": 242, "\uab7e\u0908\u1e05": [], "\uab7e\u1015": [], "\uab7f": [], "\uab7f\uff54": 242, "\uab80\ua27a": 242, "\uab82\uabd2": [], "\uab82\ufcaa\ufb75\u037b\ufbe1": [], "\uab83\u11bd\u19b5": [], "\uab84\u0e88": 242, "\uab85\u0148\ufced": 242, "\uab86\u1e7b\u2c76": [], "\uab87\u2131": [], "\uab88": 242, "\uab89": [], "\uab89\u047d": 242, "\uab8a": [], "\uab8a\u03bf": [], "\uab8b": [], "\uab8b\u153c\u075a": [], "\uab8c\u0c23\u11d4": 242, "\uab8d": [], "\uab8d\u1180\u0850\u1290\ua19e\ua51a\ufdc4\u0b92\u2ce1o\ua89f": [], "\uab8d\ufd03\u3158\u1be0\u04ef\u1139\u1475": 242, "\uab8f\u1f75\ua4ee": [], "\uab8f\ua2b8\ua531\u1667": [], "\uab90\u057d\ua9aa\ud7f6\u1e01\u190d\u1f20": 242, "\uab91\u11bb\ua474\u1f14\u0c14\u0998": 242, "\uab91\u1f12\u143e\u03bb\u03c7": [], "\uab92": [], "\uab93\uab9e\u1688": [], "\uab94": [], "\uab94\u14c0\ua121\ua7a3\u0802": 242, "\uab94\ua6c3": [], "\uab95": 242, "\uab96\u0236": 242, "\uab96\u199d": [], "\uab98": [], "\uab99\u107d\ua4df\u1a40\u1a41\uabd0": [], "\uab99\u2cec": [], "\uab9a": [], "\uab9b": [], "\uab9c": 242, "\uab9c\u15a3": [], "\uab9d": [], "\uab9d\u2c51\ua1e9\ufbd7": 242, "\uaba0\u0aa8": [], "\uaba1\u1012\ua5af": [], "\uaba1\u19b3": [], "\uaba2": 242, "\uaba2\ua0f7": [], "\uaba3\ua22f\ufbe6\ua98b": [], "\uaba4\u1635\uaba0\u0ab0\u0e9e\u14de\u01f3\u316d": 242, "\uaba5": [], "\uaba5\u1446\u0f57\u138e\u1448\u0e2b\u114c\u1fa3": [], "\uaba7\ua34d\u01c0\ufc52\u1db2\ufb30": [], "\uaba9\ua804\u1508\u162a": [], "\uabab": [], "\uabac": [], "\uabae\u1c5c\uabd4": 242, "\uabaf": [], "\uabaf\ua235": [], "\uabb0": [], "\uabb3\u14b3": [], "\uabb9\ua2ac": 242, "\uabba": [], "\uabbd": 242, "\uabbe": 242, "\uabbe\ua325\u1be3\ua463\u1528\ua24f\u0729\u01b6\u0469\u158c": [], "\uabbf\ua914\u0a9d\u04cc\u0752\u1c0a\u0b1e": [], "\uabc0\ufc81": [], "\uabc1": [], "\uabc2": [], "\uabc2\ua534": [], "\uabc4\u2096\u2ddd": [], "\uabc5\u1a03\u1e87": [], "\uabc5\ufd89": 242, "\uabc6\u05dd": [], "\uabc7\ua353": [], "\uabc8\ufc3e\u1d75": [], "\uabc9": [], "\uabc9\u066f": 242, "\uabca\u03cd": [], "\uabcd\u3143\u0c28": 242, "\uabcf": 242, "\uabd0\uff41\u15ae\ua0bd\u10e5\ud7b9\u0280": 242, "\uabd1": [], "\uabd5": 242, "\uabd5\u09a6\u1868\ua78c\u18c8\u1e1d\u0219": [], "\uabd6\ufdc5\u0b1c\u1309\u2c3f": 242, "\uabd7\u1193": [], "\uabd8": 242, "\uabd9\u310e\u2dd9\ua0e9\u1540\u1fa6\ufc82\ua092\u0a2f": [], "\uabda": [], "\uabda\u01a3\u0268\ua051\ufc54\ua6b9": 242, "\uabda\ufd3d\ua4e4": [], "\uabdb": [], "\uabdc\u0578\ua430\ufcab\u1600\ua572\ua74d\u0f8c\uff4a\u0109\ua691\u0dc1\u316d": [], "\uabdc\u17a2": [], "\uabde": 242, "\uabdf\ufb48\u1447": [], "\uabe0\u160f\ua17c\u1d2b": [], "\uabe1\uaa75\u16dc\u0b17\u30dd\u1873\u15fb": 242, "\ud7b0\u025d\u1f01": 242, "\ud7b0\u0a74": [], "\ud7b0\u2d19": [], "\ud7b3": [], "\ud7b5\u15c1": [], "\ud7b6\ua247\u1562": [], "\ud7b7\u0762\u14f6\u1edf\u1ef3": [], "\ud7b7\uffa8": 242, "\ud7b8": [], "\ud7b9": [], "\ud7ba\u07db\uff4e\ufb68": [], "\ud7bb": [], "\ud7bc": 242, "\ud7bd\ua035\ua1ab\u16d7\uff5a\u14e6": 242, "\ud7be": [], "\ud7bf\u16e2\u0987\u081a\ua52c\ud7fb": [], "\ud7c0\u0f51": 242, "\ud7c2\u1224\uabab": [], "\ud7c2\u1f35": 242, "\ud7c3\u1d52\u18d6\u0278\u0bb4": [], "\ud7c5\uff59\ua737\u1194\ua3f7\u0d7d\ufc28\u314b": 242, "\ud7cb\u0e04": 242, "\ud7cb\u1850\u1710": [], "\ud7ce": [], "\ud7ce\ua19a": 242, "\ud7cf": [], "\ud7cf\u06c9\u18de\u1f82": [], "\ud7d1": 242, "\ud7d4\uff79\u1eaf\u1ee1": 242, "\ud7d5\u03d7": 242, "\ud7d6\u123d\u0eb0": [], "\ud7d7": [], "\ud7d8": [], "\ud7d8\u1f74\ufb59": [], "\ud7d9": [], "\ud7d9\ufd9c\ufb8a": [], "\ud7da": 242, "\ud7da\u0447\u150f": [], "\ud7db": [], "\ud7dc": [], "\ud7df": [], "\ud7e0\ua873\ufe97\u0503\u1911\u0a2e": [], "\ud7e1\u1788\u11e9\ua262\u195d": 242, "\ud7e1\ua597": [], "\ud7e1\uaa11\u0dc2\u2db0\u1db6": [], "\ud7e2": 242, "\ud7e3": 242, "\ud7e3\ua761\u0918\u02ae\ua6e5\ua99a\u1b4b": [], "\ud7e4\u311d": 242, "\ud7e5\ufebb\u12ca\u3034\u1ead\u0a86\ua463": [], "\ud7e6\u1307": [], "\ud7e7\u18a4": 242, "\ud7e7\ua0f7\ufbf1": [], "\ud7e7\ua787\u0c27\u149f": [], "\ud7ed\uff53": [], "\ud7ee\u3086\u153a\u174d": [], "\ud7ef\u1a26\u045a": [], "\ud7f2": [], "\ud7f3\u04c8": [], "\ud7f3\ua22d": [], "\ud7f4": 242, "\ud7f4\u154a\u1b8e": [], "\ud7f5\u0284\u14d7\ufece": 242, "\ud7f9": [], "\ud7f9\u114c\u07d4": 242, "\ud7f9\ua3cd": [], "\ud7fa": [], "\ufb00": 242, "\ufb01\ua450\u0e07\u1c7b": [], "\ufb02": [], "\ufb03": 242, "\ufb03\u04ef\u14e8\u1561": [], "\ufb03\u3090": [], "\ufb04": [], "\ufb05\ufd2a\ufeed\u1e15\u04f1\u05d9": [], "\ufb06": 242, "\ufb14\u1020\u0581\u1518": [], "\ufb16": 242, "\ufb16\u19b9": [], "\ufb17": 242, "\ufb17\ufbd7": [], "\ufb1d\u2ca9\ua3df\u145e": [], "\ufb20\u0447\u18ea": [], "\ufb21": [], "\ufb22\u0d86\u0111\u044f\u1d95": [], "\ufb23\ua171\u05df\uab9f\u18d6": 242, "\ufb25\ua0f2\ua587": [], "\ufb26": [], "\ufb27": [], "\ufb28\u043b\ufc5a": 242, "\ufb28\u138b": [], "\ufb2a\u06bb\u1a31\ud7ee": [], "\ufb2a\u1163\u0d9e\u0276": [], "\ufb2a\ua617": 242, "\ufb2b\u0c9a\u1141": [], "\ufb2d": [], "\ufb2e\u1b0c\u10ee\u31af": [], "\ufb2f\u1fa5": [], "\ufb2f\u2d00\ua0e7": 242, "\ufb30": [], "\ufb30\uab0d": 242, "\ufb32": [], "\ufb33": 242, "\ufb33\u0a8c\u0db5\ua3e8": [], "\ufb33\ua8a0": [], "\ufb34": 242, "\ufb35": [], "\ufb35\u020b\u0925": 242, "\ufb38\ua442\uffcc\ua98a": [], "\ufb3a\ua2ca\ua794\u2cb9\u1d81\u026b": [], "\ufb3b\ua71c\u06c9\u0a74\u2136\u10d2": [], "\ufb3b\ufe76\u1401\u2d0f\u16d9\ua5b2\u0997\u1f83": [], "\ufb3c": 242, "\ufb3c\u115a\u04d5\u2c77\u06fb": [], "\ufb3c\u1d1d\u1eb1\ua18c\u1246": [], "\ufb3e\u027b\ufe91\u3124\u1682\u1521": [], "\ufb40\u0463\ua5bd": [], "\ufb40\u07ea": [], "\ufb43\uabca": 242, "\ufb44\u1918\u2c41": 242, "\ufb46": [], "\ufb47\u174d": 242, "\ufb47\u2c83\u147e\ua281": [], "\ufb4a": [], "\ufb4b\ua841\u1342": [], "\ufb4e\ufee9\u0442": 242, "\ufb4f": [], "\ufb4f\u0d0e": [], "\ufb51": [], "\ufb51\u1e15": [], "\ufb53\u1291": 242, "\ufb54": 242, "\ufb55": 242, "\ufb56\u0255": [], "\ufb57\u1ef7\u3114\ua25c\u1169": [], "\ufb58": 242, "\ufb5a": [], "\ufb5a\u043f": [], "\ufb5b\u062e": [], "\ufb5b\ufc24": 242, "\ufb5d\ua910": [], "\ufb5e": [], "\ufb5f\ufe9b\u0e33": 242, "\ufb60\ua1ca\u1185": [], "\ufb62\u3043": 242, "\ufb63\ua61d\u00ed\u125b\u2d4f\u062e\u105a\u158b\u1209\ua725": [], "\ufb64\u1d53\ua2bc\u1403\u0b9e\u03cd\u0927\ud7cc\u0d89\u02e2": [], "\ufb66\u0786": 242, "\ufb66\u1fb2": [], "\ufb67": [], "\ufb69\u09df\u03e1": 242, "\ufb69\ua585\u03af": [], "\ufb6b": 242, "\ufb6d": [], "\ufb6d\u1275\ufcc0\ufede": [], "\ufb6e\u0e2f\uff8d\ufbe2\uaa20": [], "\ufb6f\uffa3\u31a3": [], "\ufb70": 242, "\ufb71\u1ea9\u2d61\ua519\u0493": 242, "\ufb72\ua57d": 242, "\ufb75": [], "\ufb76\ua718": [], "\ufb77\ufcfd": 242, "\ufb79": [], "\ufb7b\u0795": 242, "\ufb7c\u3176\u16c4": [], "\ufb7d\ua010\u014b\u043d\u12b8\u0d8b": 242, "\ufb7d\ufccf\u1389\u02e2": [], "\ufb7e": 242, "\ufb7e\u1b90": [], "\ufb7f": 242, "\ufb80": 242, "\ufb80\u2d33\u210d\u1f60": [], "\ufb82": [], "\ufb82\u03eb": [], "\ufb82\ua911\u1b09\ua0e0\u0f60\ua69b\u1e25\u2cb9": 242, "\ufb83": [], "\ufb83\u09a0": [], "\ufb83\u1051": 242, "\ufb84\u043f\u0155\u0d1d\ua568": [], "\ufb85": [], "\ufb86": [], "\ufb86\u11ef\ufd6f": 242, "\ufb87\ufb95": [], "\ufb88\ua51f\u110f": 242, "\ufb89\u03c1\ua158\u1186": [], "\ufb89\ufef1\ufe92\ua35c\u03c3\u044b\ufbf1": 242, "\ufb8b\ud7e6\ufc7f\uaba8\ua97a\u080f": 242, "\ufb8c": 242, "\ufb8c\u01e3": [], "\ufb8d\u0271": [], "\ufb8e\u15b9\u10d3\u044f": [], "\ufb8e\ufe82": [], "\ufb91\u1f26": 242, "\ufb92\ua08c\u3044\u1563": [], "\ufb93\u00f0\u14cb\u1d0e\u314a\u159f": [], "\ufb94": [], "\ufb94\u1669\u0454\u02c9\ua323": 242, "\ufb96": [], "\ufb96\ua3b9\u30c7\u3174\u1149\u314b": [], "\ufb97\u07ca\ua51e": 242, "\ufb98\u0756": 242, "\ufb98\uab3e": [], "\ufb9b\u080f\uffd2": [], "\ufb9c": 242, "\ufb9e\ua236\u316a\u129c\u0c13": [], "\ufb9f\ua373\u2d12\u0d1e\u0d8c\u1285\uaa74\ufccd\u3163\ua6a6": 242, "\ufba0\u11c2\u095f\ufc27\u123b\u1e91\uaa9a\u11b2\u027f": [], "\ufba1\u06e6\u1210\u19c6": [], "\ufba2\u0573\u1edb": [], "\ufba3": [], "\ufba3\u1254\u3122": [], "\ufba4\u099d\uaa0f\ua2cb": [], "\ufba5": [], "\ufba6\u01e3\u2c68": [], "\ufba7\ufbf6": 242, "\ufba8": 242, "\ufba8\ufc3d\u3160\ufc53\u03eb": [], "\ufba9\u01a8": [], "\ufbaa\u11ed\u0203\u0177": [], "\ufbaa\u124b\ua937": 242, "\ufbab": 242, "\ufbab\u0977\ufe99\u15c6\u0171\u0d2d": [], "\ufbab\u3076": [], "\ufbac": [], "\ufbad": [], "\ufbae": 242, "\ufbaf": [], "\ufbd3\u2d08": [], "\ufbd4": [], "\ufbd5\ua2df\ua818": [], "\ufbd6\u1279\u0916\u1bc1n": 242, "\ufbd6\ua80a\u1016\u1f80\uabbe": [], "\ufbd6\ufc37\ua0de\ufe89\u117d\u1da9": [], "\ufbd8": [], "\ufbd8\u15a5\u2099": 242, "\ufbd9": [], "\ufbd9\u1d92": 242, "\ufbda\u00df": 242, "\ufbda\u0dab\u11d7\ufcf5\u1825\u069e\u1ed5": [], "\ufbdb": [], "\ufbdd": [], "\ufbdf\u1e79": [], "\ufbe0\ua2c4\ua5cf\u1e53\ud7c1": 242, "\ufbe2\u1b91\u03e1\ua43b": 242, "\ufbe3\u043b\u2dbb\u2d89\u0b90": [], "\ufbe4\ua391\u1e0b\uab4d\u1e4b\u1782\u2da3": 242, "\ufbe5": [], "\ufbe6\u00e2": 242, "\ufbe7\u03c9\u2dd5\u12a9\ua0f7\ufdbf\u16c6": 242, "\ufbe7\u071b\u0723\u0153": [], "\ufbe8\u0113\u00df\ua087\ua4f9": [], "\ufbe8\u11a3": 242, "\ufbe8\ud7d7\u1f62\u062a\u0d1c\u0517\u0d0a": [], "\ufbe9\u2c65\u112e": 242, "\ufbea": [], "\ufbed": [], "\ufbf0": [], "\ufbf0\ua3f1\u0766\ufd59\u1764": [], "\ufbf2\ufeb9": [], "\ufbf5": [], "\ufbf5\u049f\u10e6\ua33e\u10ff\uab80\u06c8\u07f5": [], "\ufbf5\u1065\u1d45\uff76\ua1b1": 242, "\ufbf9\ufeea\u0d22\ufb24": 242, "\ufbfa": [], "\ufbfa\ua565": 242, "\ufbfa\uff45": [], "\ufbfb": [], "\ufbfb\u1524": 242, "\ufbfd": [], "\ufbfd\u047b\u115a": [], "\ufbfd\u2c3c\u16a7\u30ab\u18da\u2d48\ua198\u3188": 242, "\ufbff\ufeae": [], "\ufc00\u1c21": 242, "\ufc01\u138b": 242, "\ufc02\u044e\u01ef\u0da5\u1700": 242, "\ufc02\u0a10\u17a5\u1962": [], "\ufc04\u308f\ua226\u1789\u08a8\u1843\u1d49\u1503\ua6d0": [], "\ufc05\u1f75\u2d04": [], "\ufc05\u30e6\u07df\u1f44\ufbdd": 242, "\ufc06": [], "\ufc07\u067c": [], "\ufc07\u2dbe": [], "\ufc07\ua71e\ufc0d\u0578\u02e2\ufb4f": 242, "\ufc0a\u1fb6\u0620": [], "\ufc0a\ua1ff\u1d93": 242, "\ufc0b": [], "\ufc0c\u010d\ufdf1\u14c3\u18a2\ud7eb\ua96a": 242, "\ufc0c\ua28a\u199a\u091e\u310c": [], "\ufc0d": [], "\ufc0e\u1f11\u1200\ud7cf": 242, "\ufc0f": [], "\ufc10": 242, "\ufc10\u18ee": [], "\ufc11\ua295": [], "\ufc11\ua519": [], "\ufc12\u115c\ufc6c": [], "\ufc13\u14cf\ua79b": 242, "\ufc13\u2d00\ua163\ua884\u0c27\u0491": [], "\ufc14\u03b1": [], "\ufc14\u306e": 242, "\ufc16\ua10f\ua248": [], "\ufc17": 242, "\ufc18": [], "\ufc19\u14c8\u1e1f\ua5bc\u1f92": [], "\ufc19\u1fc3\ua166": [], "\ufc1c": 242, "\ufc1d\u07cc\u2c89\u0dad": 242, "\ufc1d\u11f3\u2d17\uaa85": [], "\ufc1d\u1d05\u195e\ua772": [], "\ufc1e\ua10c\u1be1\u0ab7": 242, "\ufc1f\ua1c2": [], "\ufc20": [], "\ufc20\ufea1": [], "\ufc21\u2d13\uaba6\u1028\u131c": [], "\ufc23\u06c6\u16b9": [], "\ufc24\u0d05\u1273\uff81\u01d0": [], "\ufc25": [], "\ufc26": [], "\ufc26z": [], "\ufc27\u1ea7": 242, "\ufc29\u1549": [], "\ufc29\u16b3\u1510": 242, "\ufc2a\u02cf\ua534\u3172\u01cc\ufefc\u1729": [], "\ufc2c\u1f83": [], "\ufc2c\ua5e4\ua524": [], "\ufc2d": [], "\ufc2d\u1302\ufd96\u2db5": 242, "\ufc30": [], "\ufc30\u0a5e\u2c93": [], "\ufc30\ua81a\uffcd": 242, "\ufc31\u017e": [], "\ufc33\u11e5": 242, "\ufc33\ufd8d\ua103\ufb49\u0e24": [], "\ufc34": [], "\ufc34\ua328": [], "\ufc35\u0849\uab02\u1f15": 242, "\ufc35\ua1b6": [], "\ufc38": 242, "\ufc39": 242, "\ufc39\ua6b6\u1e89": [], "\ufc39\ufcc5\ua0d1": [], "\ufc3a": [], "\ufc3a\ufed8": [], "\ufc3c": [], "\ufc3e\u0d12\u1145": 242, "\ufc40\u1631\u2cbb": 242, "\ufc40\ua20f\ufcdb": [], "\ufc40\uab9a\ua28d": [], "\ufc41\ua2e9": [], "\ufc42\u0848": [], "\ufc42\u0c28\u2c6c\u0239\u02af\u01a1\ua506\u1207": [], "\ufc43\u18be": [], "\ufc43\uaab6\u2c73": [], "\ufc44\ud7bf\u0129\u057b": 242, "\ufc45": 242, "\ufc46": 242, "\ufc46\ufb7f": [], "\ufc47": 242, "\ufc48": [], "\ufc48\ua108\u0d34\ufd8c": 242, "\ufc49\u1f27\ua419\u2d83\u2c66\u1eb7\ua2b3\u3073\ua857": [], "\ufc4a\ufdbb\ua5d1": 242, "\ufc4b": [], "\ufc4b\uff46\ufdc0\u1d43": 242, "\ufc4c": [], "\ufc4f\u0430": [], "\ufc50": 242, "\ufc51": [], "\ufc51\ufd19\u11dc": 242, "\ufc52\u18cd\ua58f\u1852\u1ef9\ufebd\u0e32\u017a\u3168\u2dbe\u11d8": 242, "\ufc53": 242, "\ufc55\u1d1c": [], "\ufc55\ua2ce\u1656\u0249\u0a18\u1165\u16a4\u00e5": [], "\ufc55\ufc8c\u19bb\u1cef": 242, "\ufc56": 242, "\ufc56\u0b24": [], "\ufc59\u0919\u2c35\u3073\u15d4\ufee4\ud7d6\ua514": 242, "\ufc59\u10ed\u19c9\ua649\u044b": [], "\ufc5a": [], "\ufc5d\u1cec": 242, "\ufc5d\u1fa7": [], "\ufc5e\ua946\u1918\ufebc": [], "\ufc60\u1410\u080b\u105d": 242, "\ufc60\ua16f\ufb4c\u057d": [], "\ufc61\u0117": 242, "\ufc61\u1f86\ufe71\u1b24\u107c\u3031\ua305\ua156\u084b": [], "\ufc62\u03e3\ufb9d\ua3d8": [], "\ufc63\u1b13": [], "\ufc65\ufebd\u1f97": [], "\ufc68\u1e3d\u1243\u2c66\u1f79\u00f5\ua1ae": [], "\ufc69": [], "\ufc6a\u0f60": [], "\ufc6a\u2c3c": [], "\ufc6b": [], "\ufc6b\u079d": [], "\ufc6c\ua76b\u1008": [], "\ufc6d": [], "\ufc6d\u063e": 242, "\ufc6d\u0db1": [], "\ufc70": 242, "\ufc71": [], "\ufc71\ua60c\ufd1f": 242, "\ufc72\u1ed3\ua1da\u1f36\u0a59": [], "\ufc72\ua5c0\u03be\u0525\uaa1d\u123a\uab02\u1e0b\u3112\u1f23\u0563": [], "\ufc73\u0501\u029d": 242, "\ufc73\ufe89": [], "\ufc76\u1d69\uab55\u0441": 242, "\ufc76\ufcef": [], "\ufc77\u0469": 242, "\ufc78\u1a2d\ua44a": [], "\ufc7c\u19c5\ufca0": [], "\ufc7d\ua360\u1f36": [], "\ufc80\u151b": [], "\ufc82\u0f43\u1e63": [], "\ufc83": 242, "\ufc83\u14fb": [], "\ufc83\ufcda\uab30\u0693\ua884\u00f9\u2cd3\u1e8f\ua049\u0454\u1702\u045b\u14c1\u0cb8\u145b": [], "\ufc84": [], "\ufc85": [], "\ufc86": [], "\ufc88": 242, "\ufc89\u1784": [], "\ufc8a\u1785\ua2f4": [], "\ufc8a\u2dae\u1077\ua459": 242, "\ufc8e\u167e\u02b0\u062b\ua289\ua457\ufb17": [], "\ufc8f": [], "\ufc8f\u0f40": 242, "\ufc90\ufec9": [], "\ufc91": 242, "\ufc92": [], "\ufc93": [], "\ufc94": [], "\ufc95\u069b\u1698\ua50d\u14ed": [], "\ufc95\u141e\u1d7d\ua21f": [], "\ufc97\u0a95\ufd8c\u0cb6\ufd61\u1275\ua341": [], "\ufc99": [], "\ufc99\u15ab\u19c5": 242, "\ufc9a": [], "\ufc9b": [], "\ufc9c": [], "\ufc9c\u0c2f": [], "\ufc9c\u2d31\u0a33\u186f\u1d6f": 242, "\ufc9d": 242, "\ufc9e\u03c8": [], "\ufc9e\u075a": 242, "\ufc9f": [], "\ufc9f\u0519\u15f1": 242, "\ufca0\u0272\ufe98\ua1c5\u1456\ua614": 242, "\ufca0\ua437": [], "\ufca1": 242, "\ufca2": 242, "\ufca5": 242, "\ufca7\ua40c\u0a5a": [], "\ufca8\u1531\u147f\uaadd\ua405": [], "\ufcaa": 242, "\ufcaa\u0b8a": [], "\ufcab\u0cb5": [], "\ufcad\u0793\u19a4\ua29a\uaa9d\ua66d\u18f5\u043a": [], "\ufcae": [], "\ufcaf": [], "\ufcb0\u1211\u1685\u2c39\u0242\u0f45\u03eb\u3135\ufcf8": 242, "\ufcb1\u18a4": [], "\ufcb2\u1f26\u1694": 242, "\ufcb4\u120a": [], "\ufcb5\ua6c8": 242, "\ufcb6\ua294\u2148\u1d36": [], "\ufcb8": [], "\ufcb9\u0519": [], "\ufcb9\uff7e\u1b84\ua202\u1db9\u1951\u14aa\ua886\ua5c2\u1613\ufb02\u025e\u0f69\u2c9d": [], "\ufcba\u0133\uaa9f": [], "\ufcbb": [], "\ufcbe\ua249": [], "\ufcbf": [], "\ufcbf\u017e": [], "\ufcc0": [], "\ufcc0\u00ec\u095a": 242, "\ufcc2\u1f92": 242, "\ufcc3": [], "\ufcc4\u0101": [], "\ufcc4\u0905": 242, "\ufcc4\u1893\u17b1\ua23d": [], "\ufcc7\u198a\u04af": [], "\ufcc8\u0d06": 242, "\ufcc8\uab3bk": [], "\ufcca": 242, "\ufccb\ufeaf": [], "\ufccc": [], "\ufccd\ua3a3": [], "\ufccf\u1ba0\ua0be\ua919\u1d53": 242, "\ufcd2\u02e0\ua0ea": [], "\ufcd2\u0d2a": [], "\ufcd3\ua1be\u0b95": [], "\ufcd4\u0140\u067a": 242, "\ufcd4\u0d10\u1142\u1b11": [], "\ufcd8": 242, "\ufcda\u14f1": [], "\ufcdb\ufb24\u0509\ua101\u13fb": [], "\ufcdf": [], "\ufce0": [], "\ufce0\u2c40\ua86c": [], "\ufce0\uab04\ua1a2": 242, "\ufce1": [], "\ufce1\u1455": [], "\ufce2": 242, "\ufce2\u1497": [], "\ufce3": [], "\ufce4": 242, "\ufce6": [], "\ufce7\u308e": [], "\ufce8": 242, "\ufce9\u0cb9\u10d0\u05e2": [], "\ufce9\u10f7": [], "\ufceb": 242, "\ufcec\u0453\u0572\u1295\u2c6a\u0f49\uaaf4\uff41": [], "\ufced\u1d32\u1f53": [], "\ufcee\u1405\u311a": [], "\ufcee\uab0e\u09f0\u0529\u0c39\u1065": [], "\ufcf0": 242, "\ufcf1\ua18e": [], "\ufcf3": 242, "\ufcf3e\u0f61\u0567\u1061\u168d": [], "\ufcf4": [], "\ufcf6": 242, "\ufcf7": 242, "\ufcf9\u0511\u14a2": [], "\ufcfa": 242, "\ufcfb\u0ab5\uaa0a\u1146\u0cb6": 242, "\ufcfcc": [], "\ufcfd": [], "\ufcfd\u1f57\ua9e9\ua2a7\u0430": [], "\ufcfe\u1740\u1f03\u191a\u2c32\u2d96": [], "\ufcff": 242, "\ufd00": 242, "\ufd00\u14a8\u14e2\u2d06": [], "\ufd01": [], "\ufd01\ufd16\u0bb8": [], "\ufd02\u1496\ua5cc": 242, "\ufd02\ufcea\ua02b\ua933\u050f\u12b8": [], "\ufd03\ua423\ufb7a\u00fa\ua6cc": [], "\ufd05\u0233": 242, "\ufd05\u12c9\u1f10": [], "\ufd06\u0432": [], "\ufd06\u0c9e": [], "\ufd07\u08aa": [], "\ufd08": 242, "\ufd09": [], "\ufd09\ua239\u1f50\u12e3": 242, "\ufd09\ua548": [], "\ufd0a": [], "\ufd0a\u056b": 242, "\ufd0a\u1b0b\u2c52\u30ab\u1907\ufba4\uaa0b": [], "\ufd0b": [], "\ufd0b\ua140\u176f\uaba6\u00fc": 242, "\ufd0c": 242, "\ufd0c\u0b37": [], "\ufd0d\u0f64\u123c\uabd3\u170c": [], "\ufd0e\u1339": [], "\ufd0e\uff80\ua13b": [], "\ufd0f\u0f5b\u1203\ua960": [], "\ufd0f\uab93\u172f\u069c\u0ea7\u2ddc\u120b": 242, "\ufd10": 242, "\ufd11": 242, "\ufd11\ua138": [], "\ufd12\u0456": [], "\ufd13\u1642": [], "\ufd14": [], "\ufd17\uab39\u19b5": 242, "\ufd18\u213c\u14ad": 242, "\ufd19\u1286": [], "\ufd1a\u1d52\u1fd1\u2dbb\ua68f\ufbdf": [], "\ufd1b\ua36d\u046f": [], "\ufd1d": 242, "\ufd1e": 242, "\ufd1f\ua41c": [], "\ufd22\u04c2": 242, "\ufd22\ua73b\u1950": [], "\ufd23": [], "\ufd24": 242, "\ufd24\u0169\u0436\u1908": [], "\ufd25": [], "\ufd25\ua3da\u3033": [], "\ufd27\u0722\ua6e4\ufd14": [], "\ufd27\u1727\u12d1": [], "\ufd29\ufd82\u1edb": 242, "\ufd2b\ua801": [], "\ufd2c": [], "\ufd2e": [], "\ufd2f\ufd11\u2d21\u1ee3": [], "\ufd30": [], "\ufd30\u019b\ua2cc": [], "\ufd32\u2d5c\u1580": [], "\ufd35": 242, "\ufd36\u07d9\ua385\ua3c9": 242, "\ufd37": [], "\ufd37\ua6c7\u07cc\u0b1d\ud7e0\u1614": [], "\ufd38": [], "\ufd39": [], "\ufd3a\u08a1": [], "\ufd3b": 242, "\ufd3b\ufb99\ua38f": [], "\ufd3c\u1db8\u1a25\u024b\ua88e\uabc7\u0808": 242, "\ufd3d": 242, "\ufd50\u1298\u1fa3\ufd5d\u1875\ufb61": 242, "\ufd50\u1720": [], "\ufd52\u06d5\u0917\u151e": 242, "\ufd52\u1fc4\ua362\ua43e": [], "\ufd53\ufec6": [], "\ufd54\u12fc": 242, "\ufd57\u1503": 242, "\ufd57\u1ff6\u1e51\u10f1": [], "\ufd5a\ua21c\ua24c\u04c8\u1623\u1d33": 242, "\ufd5b\u0f57": [], "\ufd5b\ua2b8": 242, "\ufd5c\u164a": [], "\ufd5c\u2d2d\ua14a\ua7fc": 242, "\ufd5d": [], "\ufd5e\u0aa2\u16b4": 242, "\ufd5e\u3147": [], "\ufd5f\u098a\u0288\u01ba\u127d\ua0b7": [], "\ufd60": 242, "\ufd60\ua777": [], "\ufd62": [], "\ufd62\u1e09\u1d03\u128d\ua5e0\u3046": 242, "\ufd62\ua27f\u11d9\u1902\u1670\u1ed1\ua609\uff71\ua3d4\u0d2f\ua0ee\uaa86\ua80e\u1634\ua733": [], "\ufd63\ua166\u1846\u30a8\u0b1a": [], "\ufd64\ufd2d": [], "\ufd65\u30f8\ua791\u081a\ua39e\u10e4": 242, "\ufd66\u027f\u0105\u0e25\u2d49": [], "\ufd67": [], "\ufd68\u0c8c": [], "\ufd68\u16b4": [], "\ufd69\u14b4\u2c33": 242, "\ufd6a\u144d": [], "\ufd6b\u1194": [], "\ufd6c": [], "\ufd6d\u0167\ua3da\u16d2\u0815\u079b\ua885\ua2f6\u01f9\ua5a9": [], "\ufd6f": [], "\ufd70\u1c12": [], "\ufd70\ua473\u03ac\u145a": 242, "\ufd73": [], "\ufd73\ua42a\u2c4b\u1656\u1a09": [], "\ufd74": [], "\ufd74\u16cc": 242, "\ufd76\u10eb": [], "\ufd79\u1974": 242, "\ufd7a\u114b": [], "\ufd7a\ua89e\u1ee9\u1b09\ua841": [], "\ufd7b": [], "\ufd7c\u0107\u1d5e": 242, "\ufd7d": 242, "\ufd80": [], "\ufd82\u1201\ua023": [], "\ufd82\ua11a\u0692\ua28f": [], "\ufd83\ufc34\u03e3\ua1c7": 242, "\ufd85\u1173\u316a": 242, "\ufd86\u0a10": 242, "\ufd87\ufd81": [], "\ufd88\u023f\u0c2e": 242, "\ufd89\u08ad\u08af\u1416\u1f15": [], "\ufd89\uab97": [], "\ufd8a\u044b": [], "\ufd8b\u1cf3": 242, "\ufd8b\ufcc7": [], "\ufd8d\ufba4": 242, "\ufd8e\u0caa\u1660": [], "\ufd8e\ufe8e\u31fc\u1e9b": [], "\ufd8f\u0f4b\u1566\u18b2\u1f45\u08a1\u1189\u1f79": 242, "\ufd92": 242, "\ufd93\ua189": [], "\ufd93\ufcdf\u1651": [], "\ufd94\u14cc\ua1bf": [], "\ufd96\u129d": [], "\ufd96\ua6ae\ua009": [], "\ufd97\u0c2b\u1639\u2c3c\u00f6": [], "\ufd99": [], "\ufd99\u1785": [], "\ufd9a\u1b83\ua647\u03cc\u31a7": [], "\ufd9a\u1c6b\ua238\ufcde": 242, "\ufd9e\u0b1b\ua39f": [], "\ufd9f\u16c9": 242, "\ufda1\uff74\u1ceb\ufd57\u1574\uab83": [], "\ufda2\ua526\u0563\u142d": [], "\ufda5\u1571": 242, "\ufda6\u1321": 242, "\ufda6\ua213": [], "\ufda8": 242, "\ufda8\ufc97\u2cc5": [], "\ufda9": [], "\ufdaa": 242, "\ufdaa\u15c5\u0ab6\uab3d": [], "\ufdad": [], "\ufdad\u1b89\u1c5d\uaac0\ufb26": [], "\ufdae": [], "\ufdae\u1526\u1bd8\u1831\u0847\u024b\u04ed\u0523\u0eae": [], "\ufdb0\uff52\ua59b\u31af": 242, "\ufdb1\ua74b\ua3f3": [], "\ufdb2": [], "\ufdb3\uab87": [], "\ufdb4\u1e2d": [], "\ufdb5": [], "\ufdb5\u1e6d\ua344\u2dd6\ua5d3\uaba8\ufb56\ua2d2\u1844\u314b\u11ef\u1f05\u0135": [], "\ufdb7\ua897\ud7f7\u012d\u2cd5\ua52d\u067f": 242, "\ufdb8\uffc6": [], "\ufdb9": 242, "\ufdb9\u0515\u19b4\u0792": [], "\ufdba\u1b47\u0481": 242, "\ufdbb\u107c": [], "\ufdbc\u1ee3": [], "\ufdc0": [], "\ufdc1\u1b13\ua226\ufd1b\u1e67": 242, "\ufdc2\u019e": [], "\ufdc2\u1433\u0b2f": 242, "\ufdc5": [], "\ufdc5\u11c7\u049f\uaa68": [], "\ufdc6": 242, "\ufdc7": [], "\ufdc7\u19a6\u1a4b\u3141": 242, "\ufdf0": 242, "\ufdf1\u0254": [], "\ufdf1\u0ab2\u0481": [], "\ufdf2": [], "\ufdf3\u0a32": [], "\ufdf4\u214e\ufc8c\ufb05\uab9d\u09ad\u05d0\u044f": [], "\ufdf5": 242, "\ufdf6\u0283": 242, "\ufdf6\ufe79": [], "\ufdf7\u04ca\u0d35": [], "\ufdf8": 242, "\ufdf9": 242, "\ufdf9\u1e21\ua0b2\ua185\u3141": [], "\ufdf9\ua0fe": [], "\ufdfa\u14f0\u1010\ua131": [], "\ufdfb\u1ec1\ua15f": [], "\ufe71": [], "\ufe72": 242, "\ufe74": [], "\ufe76\u03b3": 242, "\ufe76\ufe9d\u0905": [], "\ufe77\ufeda\u0769\ua30a\u316c\u0776\u190d": [], "\ufe78": 242, "\ufe78\u1f79\u1e01\u1424\ufc63": [], "\ufe7a": 242, "\ufe7a\ua84f\u04ab\u2c68\ua2eb": [], "\ufe7b\u0215": [], "\ufe7b\u188d\u113e\u1e89": [], "\ufe7b\u1f02\u0e40\u1846": 242, "\ufe7c": [], "\ufe7c\ufe8c": [], "\ufe7d": 242, "\ufe7e\u121a": [], "\ufe7f\u134d\uaa64": 242, "\ufe81": [], "\ufe82\ua06d": 242, "\ufe85\u15fb": [], "\ufe86": 242, "\ufe87\u14c5\ua0a4\u01ef": [], "\ufe8a": [], "\ufe8b": [], "\ufe8d": [], "\ufe8e\uaa4b\u1cee\u2c38\u063d\u0633\u062d\ua939\u1008\u2cbf\u1964\u19a6": [], "\ufe90": [], "\ufe90\u0578\u1cee\u211b\ua075\u1336\u1328\ufede": [], "\ufe91\u00e7\ufbd3\ufbf6": [], "\ufe92": [], "\ufe93\u16d3\ua272\ufda9h\u2db2\ua1c1\u1f24\ua9ae": [], "\ufe95\u30b7\ua451": [], "\ufe96\u1233": 242, "\ufe96\u30e6": [], "\ufe97": [], "\ufe97\u1d59": 242, "\ufe98\u0a9c\u00f2": [], "\ufe99\ua800\u0e11": 242, "\ufe9b\u0a8a\u112c\u1029\u1ebd\u1017": [], "\ufe9d\u1197\u16c9\u2db1\u1ea5\uabbd\ufc01\ua22c\u0269": [], "\ufe9e\uffa1\ufd72\u307d\u30d1\ufd98\u1f76\u162e": [], "\ufe9f": [], "\ufe9f\u1e91\u18ed": [], "\ufea0\u0699": 242, "\ufea0\u195b": [], "\ufea2": [], "\ufea3\u1125\u0a8f\ua4d3\ufee0\u11bc\u03f5\u317d\ufef4": [], "\ufea3\ufb22\ua5b2\u0441\u1d11\u18d8": 242, "\ufea4\ua21b\ufb90\ua127\u01d0\u117d\u1353": 242, "\ufea4\uaa49\ua086": [], "\ufea5\u04db": [], "\ufea6": [], "\ufea7\u0677": 242, "\ufea8": [], "\ufea9\u069f\u0989": [], "\ufeaa\u1e4d": 242, "\ufeab\u18c5\u0517": [], "\ufeac": 242, "\ufeae": 242, "\ufeaf": [], "\ufeb0\u0755\u052b": 242, "\ufeb1\ufcb3\u31b0\ua1a1\u01ff": [], "\ufeb3\u2d5d": 242, "\ufeb5\u0247\u1232\u07e9\u15d9\u2cdf\u1a4b\ua14a\u01e5": [], "\ufeb5\uff67": [], "\ufeb6": 242, "\ufeb7\u1290\u019b": [], "\ufeb9": [], "\ufebb": 242, "\ufebe": [], "\ufebf\u091c\u029d\u16a4\u01df": [], "\ufec0\u0f61": 242, "\ufec1": 242, "\ufec2": 242, "\ufec2\u1bcd\u0ba4\ufb25\u11df\ua741": [], "\ufec7": [], "\ufec8\u1741\ua4db\u1eb3\ud7dd\u01dd": [], "\ufec9": 242, "\ufeca": [], "\ufecb\u01e9\u046f\u015d\ua169\ua6b7b\ua821\u1bc9\u1edf\u0c34": [], "\ufecb\ua819\u1270\u02a3\u06ac": [], "\ufecc": 242, "\ufecc\u0ec6": [], "\ufecd": [], "\ufecd\u138f": [], "\ufece\ua271": [], "\ufecf": 242, "\ufecf\ua017\u03b8": [], "\ufed2": [], "\ufed2\u0961\u0640\u16e4t\ua283": [], "\ufed4\u00ea\ua308": [], "\ufed5": [], "\ufed6\u00fe\u1e71": [], "\ufed8": 242, "\ufed9": [], "\ufedc": [], "\ufede\ua1a7\u0a32\ufeb4\ufb21": 242, "\ufedf": 242, "\ufee1": [], "\ufee1\ua856\u1305\u0e95\u00ba\ua002\ufb15": [], "\ufee2": 242, "\ufee3": [], "\ufee3\ua536": 242, "\ufee5\ua5bf\u2d67\u1354\u1702": [], "\ufee7": 242, "\ufee7\u2db9": [], "\ufee8": 242, "\ufee9\u2c53\u09aa\u0f44\ua470\ua5af\ufb06\u0449\u0e95\u1f42\ua136\u0e1a": [], "\ufeea\u03d4": [], "\ufeeb": 242, "\ufeeb\u16dd": [], "\ufeec": 242, "\ufeed": [], "\ufeee\u0d25": [], "\ufeee\u3041\u1e65\u1a2b\ua251\u021b": 242, "\ufeef\ua18f\u101e": 242, "\ufef0\u0b5c\u1b16\u068d\ua04b": [], "\ufef1\ua0bd\u0291\ua1a7\u3064": [], "\ufef4": [], "\ufef4\uab81": 242, "\ufef5\u0b92\ufd85\ufb13\u2d19": [], "\ufef6": [], "\ufef7": [], "\ufef7\ud7e8": 242, "\ufef8": [], "\ufef9\u3161\uab35\ua0b1": [], "\ufef9\ua549\u03ca\u163a\ufcf4\ufdf8": [], "\ufefa\u0ca4": [], "\ufefb": [], "\ufefc": 242, "\uff41\u0811\u110f": [], "\uff41\u0c14": [], "\uff41\u2dc6\u15e7\u1d55\u0b3d": [], "\uff42": 242, "\uff43\u1318\uab3a": 242, "\uff44\u0d3a\ufcef": [], "\uff46\u0262": [], "\uff46\u0c2e\ua803": [], "\uff46\ua647\u10e7": [], "\uff47": [], "\uff47\u1ea3": [], "\uff48\u0b83": 242, "\uff49": [], "\uff49\u1750\u1efd": [], "\uff49\ua9cf\ua3b6": [], "\uff4a": [], "\uff4a\ua468\u0b0b": [], "\uff4b\u1294": [], "\uff4b\u1d6e\u1d2d": [], "\uff4c": [242, 261], "\uff4d": 242, "\uff4d\u304c\u04a9": [], "\uff4e": 242, "\uff4e\u1a21\ua144\u03b0\ud7cb\u01ad\u0477": [], "\uff4e\u2102\ua6e3\u15e7\u186e\ufd19": [], "\uff4f\u2d15\u154c": 242, "\uff4f\ua54e\u1fa1": [], "\uff50\ua2e7\u0ec4": 242, "\uff50\uaae5\ua0dc\u116b\ua10a\uab14\u04d7": [], "\uff52": [], "\uff52\ufbb1": [], "\uff53": [], "\uff53\u0580\u0127": [], "\uff54\u1794\u1f63\uff80": 242, "\uff55\u31fe": [], "\uff55\ua223\ua791\ufcdd": [], "\uff56\u0211\u195e\u127a\u153c\ua5f0\ua661": [], "\uff56\u1708\u1019\u2107\u0153\uff4c\u2da2\u1d79": [], "\uff56\ua5dc": 242, "\uff57": [], "\uff58\u067a\u097f": [], "\uff59\u0c94": [], "\uff5a\ua054\ua59f\u04bf": [], "\uff66": 242, "\uff66\u0cb9": [], "\uff67": [], "\uff68": [], "\uff68\u2d86\u0c98\u15ef\ufd86": [], "\uff6b\u1055": [], "\uff6c": 242, "\uff6e\u1711\u066e\u06c5\ua3af\u0469": [], "\uff6f": [], "\uff70": [], "\uff70\u116e": 242, "\uff72": 242, "\uff73\ua561\u04c2": [], "\uff79": [], "\uff7a": [], "\uff7a\u0f88": 242, "\uff7a\u130e": [], "\uff7b\u101c\u05d7\u1ea5": [], "\uff7b\u1cf6": 242, "\uff7b\u2c42\ufe7f\u01ed\ua653": [], "\uff7c\u0e2b\u028a\u1242\u0c9e\u14ce": 242, "\uff7d\ua509\ua8a2": [], "\uff81": 242, "\uff84\u0b19": [], "\uff84\ua2c6\u1be4\u2c9b": 242, "\uff85": [], "\uff86\u196c\u18c6": [], "\uff87": [], "\uff87\ufbde": [], "\uff89\ua35b\u11b3\ufcbf\ua76d": 242, "\uff89\ufcfe": [], "\uff8a\u1981\ufbaf\u0985\uff55": 242, "\uff8b\u08a2\u0674\u1f30": 242, "\uff8d": [], "\uff8e\ua2e1": [], "\uff8e\ua938\u1676": 242, "\uff8f\u1c16\ua222\u0233": [], "\uff91\u116c": [], "\uff91\u1654": 242, "\uff92\u02cd\u097c\ua363\ua733\uab54\uaae7": 242, "\uff94\u04ad": 242, "\uff95\u012b": [], "\uff96": 242, "\uff97": [], "\uff97\u1567\u07ea\u045d\u100b\u11c9\u08a3\u13f8\ua193\ufef5\u1e8b": 242, "\uff98": 242, "\uff98\ua1ff\ua342\ua456": [], "\uff99": 242, "\uff99\u0985\u1fd3": [], "\uff9a": [], "\uff9a\u19b3": 242, "\uff9a\ua38e\u1f26\u1993\u0808\u118b\ua643": [], "\uff9b\u06d0": 242, "\uff9c\u157f\u0c2c\ua2e3": 242, "\uff9d\u2d30\ua01a\u0775\uaaaa": 242, "\uff9e\u1824": 242, "\uff9e\u2c97": [], "\uff9f\u119d": [], "\uff9f\u2cbd\u0a88\u1f73": 242, "\uffa0\u133e": [], "\uffa1": 242, "\uffa2": [], "\uffa3\ua1d9\ua580": [], "\uffa4": 242, "\uffa4\u1492\u1830\u12e5\ua216": [], "\uffa5": [], "\uffa6\u0109\ua647\u143b\ua551\ua773\ua7a5\u044d": [], "\uffa7\u1262": 242, "\uffa7\u1918": [], "\uffa7\ua62b\u0562\u0223\u11af": [], "\uffa8\u1603\u0ab0": [], "\uffa8\ua0d7w\u0146\ud7eb\uabd8\u1980": [], "\uffa9\u0a17": [], "\uffa9\u0f45\u1ff4\u14fd": [], "\uffaa\u1a24": 242, "\uffad\ua599": 242, "\uffae": [], "\uffaf": [], "\uffb0": [], "\uffb0\ua133\u03cb\u12bc\u17b0\u1887\u03b8\ua018\ufb6e\u07cd": 242, "\uffb2": [], "\uffb2\u01a1\ufc75\u1520": [], "\uffb4\u0dbd\u0157\u0d18\u02a6\u2c54": 242, "\uffb5": [], "\uffb5\u1607\u2cad": 242, "\uffb8": [], "\uffb9": 242, "\uffba\ufc87\uab44\u316c\u0635\u0447\u14b7\u140b\u155d\u1d63\ufef9\ufe84": 242, "\uffbb": 242, "\uffbc": [], "\uffbc\u118c\u14d2\ua28b\uff6d\u1e85": 242, "\uffbd\u00f3\ua871": [], "\uffbe": [], "\uffc3\u16f1\ua812\u168f\uffa4\u30bf\u0e0f\ua67f\u11dc": [], "\uffc4": 242, "\uffc5": 242, "\uffc6": 242, "\uffc7": [], "\uffcb\u1799\u04fd\ua99c\ua25f\u12fb\u1eeb": [], "\uffcb\u1823": [], "\uffcc": 242, "\uffcd\u0914\ua542\u0144": [], "\uffce\u03ae\u1303\ua17c\u14f1\ufdb2\ua3a0\u0c2a\u1c16\u1ea7": 242, "\uffce\u2d66\ufd20": [], "\uffcf\u1e41\ufc15\ufc57": [], "\uffd2\u1fc7\ua755\uab3d": 242, "\uffd4\ua854\u1d1b": [], "\uffd6\uffc4\ua02e": [], "\uffda\u06bf\u0b93\u0dc1\u1ed9\ufb5e\u1d75\u1ed9\ufc87": [], "\uffdb": 242, "\uffdc": 242, "\uffdc\ua4f7\ua396": []}, "titles": ["nltk package", "nltk.app package", "nltk.app.chartparser_app module", "nltk.app.chunkparser_app module", "nltk.app.collocations_app module", "nltk.app.concordance_app module", "nltk.app.nemo_app module", "nltk.app.rdparser_app module", "nltk.app.srparser_app module", "nltk.app.wordfreq_app module", "nltk.app.wordnet_app module", "nltk.book module", "nltk.ccg package", "nltk.ccg.api module", "nltk.ccg.chart module", "nltk.ccg.combinator module", "nltk.ccg.lexicon module", "nltk.ccg.logic module", "nltk.chat package", "nltk.chat.eliza module", "nltk.chat.iesha module", "nltk.chat.rude module", "nltk.chat.suntsu module", "nltk.chat.util module", "nltk.chat.zen module", "nltk.chunk package", "nltk.chunk.api module", "nltk.chunk.named_entity module", "nltk.chunk.regexp module", "nltk.chunk.util module", "nltk.classify package", "nltk.classify.api module", "nltk.classify.decisiontree module", "nltk.classify.maxent module", "nltk.classify.megam module", "nltk.classify.naivebayes module", "nltk.classify.positivenaivebayes module", "nltk.classify.rte_classify module", "nltk.classify.scikitlearn module", "nltk.classify.senna module", "nltk.classify.svm module", "nltk.classify.tadm module", "nltk.classify.textcat module", "nltk.classify.util module", "nltk.classify.weka module", "nltk.cli module", "nltk.cluster package", "nltk.cluster.api module", "nltk.cluster.em module", "nltk.cluster.gaac module", "nltk.cluster.kmeans module", "nltk.cluster.util module", "nltk.collections module", "nltk.collocations module", "nltk.compat module", "nltk.corpus package", "nltk.corpus.europarl_raw module", "nltk.corpus.reader package", "nltk.corpus.reader.aligned module", "nltk.corpus.reader.api module", "nltk.corpus.reader.bcp47 module", "nltk.corpus.reader.bnc module", "nltk.corpus.reader.bracket_parse module", "nltk.corpus.reader.categorized_sents module", "nltk.corpus.reader.chasen module", "nltk.corpus.reader.childes module", "nltk.corpus.reader.chunked module", "nltk.corpus.reader.cmudict module", "nltk.corpus.reader.comparative_sents module", "nltk.corpus.reader.conll module", "nltk.corpus.reader.crubadan module", "nltk.corpus.reader.dependency module", "nltk.corpus.reader.framenet module", "nltk.corpus.reader.ieer module", "nltk.corpus.reader.indian module", "nltk.corpus.reader.ipipan module", "nltk.corpus.reader.knbc module", "nltk.corpus.reader.lin module", "nltk.corpus.reader.markdown module", "nltk.corpus.reader.mte module", "nltk.corpus.reader.nkjp module", "nltk.corpus.reader.nombank module", "nltk.corpus.reader.nps_chat module", "nltk.corpus.reader.opinion_lexicon module", "nltk.corpus.reader.panlex_lite module", "nltk.corpus.reader.panlex_swadesh module", "nltk.corpus.reader.pl196x module", "nltk.corpus.reader.plaintext module", "nltk.corpus.reader.ppattach module", "nltk.corpus.reader.propbank module", "nltk.corpus.reader.pros_cons module", "nltk.corpus.reader.reviews module", "nltk.corpus.reader.rte module", "nltk.corpus.reader.semcor module", "nltk.corpus.reader.senseval module", "nltk.corpus.reader.sentiwordnet module", "nltk.corpus.reader.sinica_treebank module", "nltk.corpus.reader.string_category module", "nltk.corpus.reader.switchboard module", "nltk.corpus.reader.tagged module", "nltk.corpus.reader.timit module", "nltk.corpus.reader.toolbox module", "nltk.corpus.reader.twitter module", "nltk.corpus.reader.udhr module", "nltk.corpus.reader.util module", "nltk.corpus.reader.verbnet module", "nltk.corpus.reader.wordlist module", "nltk.corpus.reader.wordnet module", "nltk.corpus.reader.xmldocs module", "nltk.corpus.reader.ycoe module", "nltk.corpus.util module", "nltk.data module", "nltk.decorators module", "nltk.downloader module", "nltk.draw package", "nltk.draw.cfg module", "nltk.draw.dispersion module", "nltk.draw.table module", "nltk.draw.tree module", "nltk.draw.util module", "nltk.featstruct module", "nltk.grammar module", "nltk.help module", "nltk.inference package", "nltk.inference.api module", "nltk.inference.discourse module", "nltk.inference.mace module", "nltk.inference.nonmonotonic module", "nltk.inference.prover9 module", "nltk.inference.resolution module", "nltk.inference.tableau module", "nltk.internals module", "nltk.jsontags module", "nltk.langnames module", "nltk.lazyimport module", "nltk.lm package", "nltk.lm.api module", "nltk.lm.counter module", "nltk.lm.models module", "nltk.lm.preprocessing module", "nltk.lm.smoothing module", "nltk.lm.util module", "nltk.lm.vocabulary module", "nltk.metrics package", "nltk.metrics.agreement module", "nltk.metrics.aline module", "nltk.metrics.association module", "nltk.metrics.confusionmatrix module", "nltk.metrics.distance module", "nltk.metrics.paice module", "nltk.metrics.scores module", "nltk.metrics.segmentation module", "nltk.metrics.spearman module", "nltk.misc package", "nltk.misc.babelfish module", "nltk.misc.chomsky module", "nltk.misc.minimalset module", "nltk.misc.sort module", "nltk.misc.wordfinder module", "nltk.parse package", "nltk.parse.api module", "nltk.parse.bllip module", "nltk.parse.chart module", "nltk.parse.corenlp module", "nltk.parse.dependencygraph module", "nltk.parse.earleychart module", "nltk.parse.evaluate module", "nltk.parse.featurechart module", "nltk.parse.generate module", "nltk.parse.malt module", "nltk.parse.nonprojectivedependencyparser module", "nltk.parse.pchart module", "nltk.parse.projectivedependencyparser module", "nltk.parse.recursivedescent module", "nltk.parse.shiftreduce module", "nltk.parse.stanford module", "nltk.parse.transitionparser module", "nltk.parse.util module", "nltk.parse.viterbi module", "nltk.probability module", "nltk.sem package", "nltk.sem.boxer module", "nltk.sem.chat80 module", "nltk.sem.cooper_storage module", "nltk.sem.drt module", "nltk.sem.drt_glue_demo module", "nltk.sem.evaluate module", "nltk.sem.glue module", "nltk.sem.hole module", "nltk.sem.lfg module", "nltk.sem.linearlogic module", "nltk.sem.logic module", "nltk.sem.relextract module", "nltk.sem.skolemize module", "nltk.sem.util module", "nltk.sentiment package", "nltk.sentiment.sentiment_analyzer module", "nltk.sentiment.util module", "nltk.sentiment.vader module", "nltk.stem package", "nltk.stem.api module", "nltk.stem.arlstem module", "nltk.stem.arlstem2 module", "nltk.stem.cistem module", "nltk.stem.isri module", "nltk.stem.lancaster module", "nltk.stem.porter module", "nltk.stem.regexp module", "nltk.stem.rslp module", "nltk.stem.snowball module", "nltk.stem.util module", "nltk.stem.wordnet module", "nltk.tabdata module", "nltk.tag package", "nltk.tag.api module", "nltk.tag.brill module", "nltk.tag.brill_trainer module", "nltk.tag.crf module", "nltk.tag.hmm module", "nltk.tag.hunpos module", "nltk.tag.mapping module", "nltk.tag.perceptron module", "nltk.tag.senna module", "nltk.tag.sequential module", "nltk.tag.stanford module", "nltk.tag.tnt module", "nltk.tag.util module", "nltk.tbl package", "nltk.tbl.api module", "nltk.tbl.demo module", "nltk.tbl.erroranalysis module", "nltk.tbl.feature module", "nltk.tbl.rule module", "nltk.tbl.template module", "nltk.text module", "nltk.tgrep module", "nltk.tokenize package", "nltk.tokenize.api module", "nltk.tokenize.casual module", "nltk.tokenize.destructive module", "nltk.tokenize.legality_principle module", "nltk.tokenize.mwe module", "nltk.tokenize.nist module", "nltk.tokenize.punkt module", "nltk.tokenize.regexp module", "nltk.tokenize.repp module", "nltk.tokenize.sexpr module", "nltk.tokenize.simple module", "nltk.tokenize.sonority_sequencing module", "nltk.tokenize.stanford module", "nltk.tokenize.stanford_segmenter module", "nltk.tokenize.texttiling module", "nltk.tokenize.toktok module", "nltk.tokenize.treebank module", "nltk.tokenize.util module", "nltk.toolbox module", "nltk.translate package", "nltk.translate.api module", "nltk.translate.bleu_score module", "nltk.translate.chrf_score module", "nltk.translate.gale_church module", "nltk.translate.gdfa module", "nltk.translate.gleu_score module", "nltk.translate.ibm1 module", "nltk.translate.ibm2 module", "nltk.translate.ibm3 module", "nltk.translate.ibm4 module", "nltk.translate.ibm5 module", "nltk.translate.ibm_model module", "nltk.translate.meteor_score module", "nltk.translate.metrics module", "nltk.translate.nist_score module", "nltk.translate.phrase_based module", "nltk.translate.ribes_score module", "nltk.translate.stack_decoder module", "nltk.tree package", "nltk.tree.immutable module", "nltk.tree.parented module", "nltk.tree.parsing module", "nltk.tree.prettyprinter module", "nltk.tree.probabilistic module", "nltk.tree.transforms module", "nltk.tree.tree module", "nltk.treeprettyprinter module", "nltk.treetransforms module", "nltk.twitter package", "nltk.twitter.api module", "nltk.twitter.common module", "nltk.twitter.twitter_demo module", "nltk.twitter.twitterclient module", "nltk.twitter.util module", "nltk.util module", "nltk.wsd module", "Contributing to NLTK", "Installing NLTK Data", "Example usage of NLTK modules", "Sample usage for bleu", "Sample usage for bnc", "Sample usage for ccg", "Sample usage for ccg_semantics", "Sample usage for chat80", "Sample usage for childes", "Sample usage for chunk", "Sample usage for classify", "Sample usage for collections", "Sample usage for collocations", "Sample usage for concordance", "Sample usage for corpus", "Sample usage for crubadan", "Sample usage for data", "Sample usage for dependency", "Sample usage for discourse", "Sample usage for drt", "Sample usage for featgram", "Sample usage for featstruct", "Sample usage for framenet", "Sample usage for generate", "Sample usage for gensim", "Sample usage for gluesemantics", "Sample usage for gluesemantics_malt", "Sample usage for grammar", "Sample usage for grammartestsuites", "Sample usage for inference", "Sample usage for internals", "Sample usage for japanese", "Sample usage for lm", "Sample usage for logic", "Sample usage for meteor", "Sample usage for metrics", "Sample usage for misc", "Sample usage for nonmonotonic", "Sample usage for paice", "Sample usage for parse", "Sample usage for portuguese_en", "Sample usage for probability", "Sample usage for propbank", "Sample usage for relextract", "Sample usage for resolution", "Sample usage for semantics", "Sample usage for sentiment", "Sample usage for sentiwordnet", "Sample usage for simple", "Sample usage for stem", "Sample usage for tag", "Sample usage for tokenize", "Sample usage for toolbox", "Sample usage for translate", "Sample usage for tree", "Sample usage for treeprettyprinter", "Sample usage for treetransforms", "Sample usage for util", "Sample usage for wordnet", "Sample usage for wordnet_lch", "Sample usage for wsd", "Natural Language Toolkit", "Installing NLTK", "Release Notes", "Index", "NLTK Team"], "titleterms": {"": 331, "1": [346, 351], "1025": 343, "167": 325, "2": 351, "2005": 356, "2006": 356, "2007": 356, "2008": 356, "2009": 356, "2010": 356, "2011": 356, "2012": 356, "2013": 356, "2014": 356, "2015": 356, "2016": 356, "2017": 356, "2018": 356, "2019": 356, "2020": 356, "2021": 356, "2022": 356, "2023": 356, "2024": 356, "2088": 306, "2483": 343, "32": 355, "367": 325, "380": 325, "80": [182, 300], "A": [297, 318], "No": [299, 327], "The": 322, "With": 319, "access": [297, 307, 308, 314, 324, 333, 351], "acyclic_tre": 351, "ad": 311, "aer": 346, "agreement": 144, "algorithm": [331, 346, 353], "align": [58, 327, 346], "align_token": 344, "alin": 145, "all": 351, "alpha": 326, "altern": 351, "analysi": 339, "annot": 315, "answer": 337, "api": [13, 26, 31, 47, 59, 124, 136, 160, 200, 214, 228, 237, 257, 286], "app": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "applic": 338, "argument": [307, 338], "arlstem": [201, 342], "arlstem2": [202, 342], "associ": [146, 305, 328], "assumpt": 330, "autom": 319, "automat": 307, "avail": 55, "babelfish": 154, "back": 307, "background": 311, "base": [327, 338], "basic": 301, "batch": 338, "bcp47": 60, "bell": 334, "betaconversiontestsuit": 326, "better": 351, "binari": [317, 355], "bind": [313, 314], "bit": 355, "blackburn": 338, "bleu": 296, "bleu_scor": 258, "bllip": 161, "bnc": [61, 297], "bo": 338, "book": [11, 311], "bound": 312, "boxer": 181, "bracket_pars": 62, "brill": [215, 343], "brill_train": 216, "buffer": 309, "bug": [307, 314, 334, 347], "build": 322, "builder": 322, "cach": 309, "calculu": 326, "can": 354, "candid": 305, "case": 345, "casual": 238, "categor": 307, "categori": [298, 299, 307], "categorized_s": 63, "caveat": 235, "ccg": [12, 13, 14, 15, 16, 17, 298, 299], "ccg_semant": 299, "cfg": [115, 332], "charact": 333, "chart": [14, 162, 299, 332], "chartparser_app": 2, "chase": 318, "chasen": 64, "chat": [18, 19, 20, 21, 22, 23, 24, 182, 300], "chat80": [182, 300], "check": [297, 311], "child": [65, 301], "childescorpusread": 301, "chomski": 155, "chrf_score": 259, "chunk": [25, 26, 27, 28, 29, 66, 302, 307], "chunkparser_app": 3, "chunkparseri": 302, "chunkstr": 302, "cistem": 203, "class": [307, 329, 332, 349], "classifi": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 303], "claus": 298, "cli": 45, "close": [330, 345], "closur": 351, "cluster": [46, 47, 48, 49, 50, 51], "cmudict": 67, "code": 308, "collect": [52, 304], "colloc": [53, 305], "collocations_app": 4, "combin": [15, 299], "combinatori": [298, 299], "command": 294, "common": [287, 307, 352], "comparative_s": 68, "comparative_sent": 307, "compat": 54, "compil": 318, "complex": 299, "comput": 299, "concaten": 307, "concept": [182, 300], "concord": 306, "concordanc": 333, "concordance_app": 5, "conditionalfreqdist": 334, "conflict": 314, "confus": 328, "confusionmatrix": 147, "conjunct": [298, 299], "conll": [69, 310], "consist": 311, "constructor": 307, "content": [0, 1, 12, 18, 25, 30, 46, 55, 57, 100, 114, 123, 135, 143, 153, 159, 180, 195, 199, 213, 227, 236, 256, 275, 285, 307], "context": [316, 332], "conting": 305, "contribut": 293, "convers": 326, "convert": 33, "cooper": 338, "cooper_storag": 183, "copi": 309, "corenlp": 163, "corpora": [55, 307, 333], "corpu": [55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 301, 307, 308, 324, 333, 346], "correl": 305, "counter": 137, "creat": 307, "crf": 217, "crubadan": [70, 308], "custom": [91, 314], "data": [111, 135, 294, 307, 309, 310, 355], "decisiontre": 32, "decod": 309, "decor": [112, 330], "default": 330, "demo": [229, 318], "demonstr": 317, "depend": [71, 310, 318, 319], "dependencygraph": 164, "deriv": 319, "descent": 332, "design": 307, "destruct": 239, "dict": 314, "dictionari": 314, "directori": 113, "disambigu": 353, "discours": [125, 311, 312], "dispers": 116, "distanc": [148, 328], "do": 354, "document": 315, "dog": 318, "domain": 330, "don": 307, "doubl": 312, "download": 113, "draw": [114, 115, 116, 117, 118, 119], "drt": [184, 312], "drt_glue_demo": 185, "dure": 326, "earleychart": 165, "easyinstal": 341, "effici": 25, "eliza": 19, "em": [48, 346], "emac": 25, "embed": 317, "encod": [309, 333], "endless": 351, "entiti": 336, "environ": 355, "equal": [314, 326], "equiv": [312, 322], "error": [312, 326, 346], "erroranalysi": 230, "estim": 334, "europarl_raw": 56, "evalu": [166, 186, 331, 338, 343, 346], "everi": 318, "exampl": [145, 258, 295, 306, 327, 330, 333], "express": 314, "extract": 336, "f": 318, "featgram": 313, "featstruct": [120, 314], "featstructnontermin": 332, "featur": [30, 33, 120, 231, 313, 314, 332, 341], "featurechart": 167, "featureset": 30, "field": 345, "file": [182, 300, 309, 332], "filter": 305, "find": [309, 314], "finder": 305, "first": 351, "floresta": 333, "fol": 312, "former": 358, "formula": [318, 338], "frame": [315, 351], "framenet": [72, 307, 315], "free": [316, 326, 332], "freqdist": 334, "frequenc": 308, "from": [299, 309, 311, 316, 338], "fromlist": 347, "function": [55, 57, 329, 338, 345, 350], "gaac": 49, "gale_church": 260, "gdfa": 261, "gener": [168, 316], "gensim": 317, "girl": 318, "gleu_scor": 262, "glue": [187, 318, 319], "gluesemant": 318, "gluesemantics_malt": 319, "grammar": [121, 298, 299, 310, 313, 316, 320, 321, 332], "grammartestsuit": 321, "graph": [313, 318], "gzip": 309, "hash": 314, "help": 122, "helper": 308, "hmm": [218, 334], "hole": 188, "how": 301, "hunpo": 219, "hypernym": 352, "i": 338, "ibm": 346, "ibm1": 263, "ibm2": 264, "ibm3": 265, "ibm4": 266, "ibm5": 267, "ibm_model": 268, "ieer": 73, "iesha": 20, "immut": 276, "immutablemultiparentedtre": 347, "immutableparentedtre": 347, "implement": [235, 307], "import": 348, "increment": 332, "index": 357, "indian": 74, "individu": [182, 300], "infer": [123, 124, 125, 126, 127, 128, 129, 130, 319, 322], "inform": [83, 91, 311, 336], "initi": 319, "input": 33, "instal": [294, 322, 355], "instanc": 307, "integr": 310, "interact": 294, "interfac": [322, 340, 351], "intern": [131, 323], "intract": 351, "introduct": [311, 322], "ipipan": 75, "ir": 328, "is_tautologi": 337, "isri": 204, "issu": [25, 235, 306, 325, 343], "item": [182, 300], "iter": 307, "japanes": 324, "jeita": 324, "john": 318, "joint": 33, "json": 309, "jsontag": 132, "keyword": 305, "kmean": 50, "knb": 324, "knbc": 76, "kneser": 334, "knowledg": 311, "known": 235, "lambda": 326, "lancast": 205, "langnam": 133, "languag": [135, 137, 308, 324, 354], "larg": 332, "lazi": [297, 309], "lazyimport": 134, "lazyiteratorlist": 304, "legality_principl": 240, "lemma": 351, "lesk": 353, "lexic": [182, 300, 315], "lexicon": [16, 83, 299, 307], "lfg": [189, 318], "light": 314, "lightweight": 120, "likelihood": 334, "lin": 77, "line": 294, "line_num": 345, "linear": 318, "linearlog": 190, "list": [306, 307, 314, 333], "lm": [135, 136, 137, 138, 139, 140, 141, 142, 325], "load": [309, 332, 351], "loader": [297, 309], "local": 309, "logic": [17, 191, 318, 322, 326], "lookup": 340, "lowest": 352, "mac": 355, "mace": 126, "mace4": 322, "machado": 333, "macmorpho": 333, "make": 309, "malt": [169, 310], "man": 318, "manual": 294, "map": [220, 308, 338], "markdown": [78, 307], "marker": 345, "matrix": 328, "maxent": 33, "maximum": 334, "measur": [305, 328], "megam": 34, "member": 358, "meteor": 327, "meteor_scor": 269, "method": [307, 308, 314, 322, 347], "metric": [143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 270, 328, 341], "minimalset": 156, "misc": [153, 154, 155, 156, 157, 158, 329], "miscellan": [328, 329], "model": [135, 137, 138, 317, 322, 338, 346], "modul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 323], "morphi": 351, "most_general_unif": 337, "mst": 351, "mte": 79, "multext_east": 307, "multi": 330, "multiparentedtre": 347, "multipl": 307, "mutat": 314, "mwe": 241, "mwetoken": 344, "naivebay": 35, "name": [330, 336], "named_ent": 27, "natur": 354, "nei": 334, "nemo_app": 6, "new": 307, "next": 354, "ngram": 308, "nist": 242, "nist_scor": 271, "nkjp": 80, "nltk": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 309, 322, 323, 347, 348, 354, 355, 358], "nltkwordtoken": 344, "nombank": 81, "non": [310, 314], "nonmonoton": [127, 330], "nonprojectivedependencypars": 170, "notat": [263, 264, 265, 266, 267], "note": [235, 356], "nps_chat": [82, 307], "numer": 326, "object": [307, 346], "open": 345, "open_str": 345, "oper": 313, "opinion": 83, "opinion_lexicon": [83, 307], "other": [307, 309, 312], "overridden": 323, "overstem": 331, "overview": [182, 305, 307, 309, 312, 314, 326, 342], "packag": [0, 1, 12, 18, 25, 30, 46, 55, 57, 113, 114, 123, 135, 143, 153, 159, 180, 195, 199, 213, 227, 236, 256, 275, 285, 309], "paic": [149, 331], "panlex_lit": 84, "panlex_swadesh": 85, "paper": 299, "parent": [277, 347], "parentedtre": 347, "pars": [159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 278, 307, 310, 312, 313, 314, 320, 326, 332, 341, 345, 347], "parser": [310, 312, 319, 326, 332], "part": 333, "parti": 355, "patch": 306, "path": 314, "pattern": 25, "pchart": 171, "perceptron": 221, "persist": [182, 300], "phrase_bas": 272, "pl": 326, "pl196x": 86, "plaintext": [87, 307], "porter": [206, 342], "portugues": 333, "portuguese_en": 333, "positivenaivebay": 36, "ppattach": [88, 307], "pre": 317, "precis": 346, "prepar": 135, "preprocess": 139, "pretti": 312, "prettyprint": [279, 348], "print": 312, "probabilist": [280, 332], "probabilistictre": 347, "probabl": [179, 334], "process": [324, 333, 338], "product_reviews_1": 307, "product_reviews_2": 307, "program": 333, "project": 310, "projectivedependencypars": 172, "proof": 337, "propbank": [89, 307, 335], "proposit": 338, "pros_con": [90, 307], "prove": 337, "prover": [322, 337], "prover9": [128, 322], "provercommand": 322, "proxi": 294, "prune": 317, "publish": 299, "punkt": 243, "punktsentencetoken": 344, "python": [333, 355], "queri": 300, "question": 337, "rank": 305, "rate": 346, "raw_field": 345, "rd": 332, "rdparser_app": 7, "read": [182, 300, 307, 309, 311, 314, 333], "read_str": 323, "reader": [55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 301, 307, 308, 346], "reason": 330, "recal": 346, "recurs": 332, "recursivedesc": 173, "reduc": 332, "reentranc": 314, "refer": [263, 264, 265, 266, 267], "regexp": [28, 207, 244, 344], "regexpchunkpars": [25, 302], "regexpchunkrul": 25, "regexppars": 302, "regress": [302, 303, 307, 309, 311, 312, 314, 325, 326, 343, 344, 347, 351], "reinvent": 307, "rel": 298, "relat": [336, 338, 351], "releas": 356, "relextract": [192, 336], "remov": 314, "replac": [312, 326], "repp": 245, "represent": 312, "resolut": [129, 337], "resolve_anaphora": 312, "resourc": 309, "retract": 314, "retriev": 309, "review": 91, "ribes_scor": 273, "rslp": 208, "rte": [92, 307], "rte_classifi": 37, "rude": 21, "rule": [232, 302], "same": 312, "sampl": [296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "satisfi": 338, "scikitlearn": 38, "score": [150, 328], "search": [235, 333], "seek": 307, "seekableunicodestreamread": 307, "segment": [151, 333], "sem": [180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194], "semant": [299, 312, 318, 319, 338], "semcor": [93, 307], "senna": [39, 222], "sens": 353, "sensev": [94, 307], "sentenc": [297, 316, 333], "sentence_polar": 307, "sentiment": [195, 196, 197, 198, 339], "sentiment_analyz": 196, "sentisynset": 340, "sentiwordnet": [95, 307, 340], "sequenti": [223, 343], "server": [113, 294], "set": [314, 355], "setup": [301, 311, 328], "sexpr": 246, "shakespear": 307, "shift": 332, "shiftreduc": 174, "side": 312, "similar": 351, "simpl": [247, 299, 333, 341, 354], "simplifi": [312, 326], "sinica_treebank": 96, "size": 307, "skolem": 193, "slice": 307, "smooth": 140, "snowbal": [209, 342], "softwar": 355, "solut": 351, "some": [334, 354], "sonority_sequenc": 248, "sort": [157, 329], "sourc": 309, "spearman": 152, "speech": 333, "sql": 300, "squash": [307, 314, 334, 347], "sr": 332, "srparser_app": 8, "stack_decod": 274, "standard": 328, "standardformat": 345, "stanford": [175, 224, 249], "stanford_segment": 250, "statist": 331, "stem": [199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 331, 333, 342], "stemmer": 342, "step": 354, "stopword": 333, "storag": 338, "stream": 307, "string": 314, "string_categori": 97, "structur": [120, 313, 314, 318, 341], "stuff": 301, "subject": 307, "submodul": [0, 1, 12, 18, 25, 30, 46, 55, 57, 114, 123, 135, 143, 153, 159, 180, 195, 199, 213, 227, 236, 256, 275, 285], "subpackag": [0, 55], "subsum": 337, "suit": 321, "suntsu": 22, "support": 298, "svm": 40, "switchboard": 98, "synset": 351, "syntax": 338, "t": 307, "tabdata": 212, "tabl": [117, 305, 307], "tableau": 130, "tadm": 41, "tag": [25, 99, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 307, 333, 343], "tagger": 343, "task": 333, "tbl": [227, 228, 229, 230, 231, 232, 233], "team": 358, "teardown": 351, "tell": 307, "templat": 233, "terminologi": [33, 266, 267], "test": [296, 297, 299, 302, 303, 307, 309, 311, 312, 314, 321, 323, 325, 326, 327, 329, 332, 334, 337, 338, 341, 342, 343, 344, 345, 347, 348, 349, 351], "testsuit": 338, "text": [234, 333], "textcat": 42, "texttil": 251, "texttilingtoken": 344, "tgrep": 235, "theorem": [322, 337], "theori": 312, "thing": 354, "third": 355, "thread": 311, "timit": [100, 307], "tip": 25, "tnt": 225, "to_sfm_str": 345, "token": [236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 341, 344], "toktok": 252, "toktoktoken": 344, "toolbox": [101, 255, 307, 345], "toolboxdata": 345, "toolkit": 354, "trace": [314, 332], "train": [30, 135, 317], "trainer": 343, "transform": 281, "transitionpars": 176, "translat": [256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 346], "tree": [118, 235, 275, 276, 277, 278, 279, 280, 281, 282, 347, 348, 351], "treebank": [253, 333], "treeprettyprint": [283, 348], "treetransform": [284, 349], "trie": 304, "tupl": 314, "tweettoken": 344, "twitter": [102, 285, 286, 287, 288, 289, 290], "twitter_demo": 288, "twitter_sampl": 307, "twittercli": 289, "type": [307, 314, 326], "typedmaxentfeatureencod": 303, "udhr": 103, "unbound": 312, "under": 326, "understem": 331, "unicod": 298, "unif": 314, "unifi": 337, "uniqu": 330, "unit": [312, 315, 323, 329, 332, 338, 342, 345, 347, 348, 349], "unix": 355, "unresolv": 25, "untyp": 326, "up": 355, "us": [135, 299, 300, 301, 305, 317, 318, 322], "usag": [145, 181, 235, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "util": [23, 29, 43, 51, 104, 110, 119, 141, 177, 194, 197, 210, 226, 254, 290, 291, 323, 350], "v": 351, "vader": [198, 339], "valu": [305, 314, 331], "valuat": [300, 338], "variabl": [314, 326], "verb": 351, "verbnet": [105, 307], "version": 351, "via": 294, "view": 307, "viterbi": [178, 332], "vocabulari": 142, "walk": 318, "web": 294, "weight": 314, "weka": 44, "wheel": 307, "wikipedia": 327, "window": 355, "witten": 334, "word": [297, 307, 317, 333, 351, 353], "wordfind": [158, 329], "wordfreq_app": 9, "wordlist": 106, "wordnet": [107, 211, 307, 351, 352], "wordnet_app": 10, "wordnet_lch": 352, "world": 330, "write": [307, 309], "wsd": [292, 353], "xmldoc": 108, "ycoe": 109, "you": 354, "zen": 24}})