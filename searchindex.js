Search.setIndex({"alltitles": {"1. Endlessness": [[417, "endlessness"]], "2. Intractability": [[417, "intractability"]], "2.1 First solution: acyclic_tree()": [[417, "first-solution-acyclic-tree"]], "2.2 Better solution: mst()": [[417, "better-solution-mst"]], "2005": [[422, "id20"]], "2006": [[422, "id19"]], "2007": [[422, "id18"]], "2008": [[422, "id17"]], "2009": [[422, "id16"]], "2010": [[422, "id15"]], "2011": [[422, "id14"]], "2012": [[422, "id13"]], "2013": [[422, "id12"]], "2014": [[422, "id11"]], "2015": [[422, "id10"]], "2016": [[422, "id9"]], "2017": [[422, "id8"]], "2018": [[422, "id7"]], "2019": [[422, "id6"]], "2020": [[422, "id5"]], "2021": [[422, "id4"]], "2022": [[422, "id3"]], "2023": [[422, "id2"]], "2024": [[422, "id1"]], "32-bit binary installation": [[421, "bit-binary-installation"]], "A not lazy loader.": [[363, "a-not-lazy-loader"]], "Access to all Synsets": [[417, "access-to-all-synsets"]], "Accessing ngram frequencies": [[374, "accessing-ngram-frequencies"]], "Accessing the Floresta Portuguese Treebank": [[399, "accessing-the-floresta-portuguese-treebank"]], "Accessing the MacMorpho Tagged Corpus": [[399, "accessing-the-macmorpho-tagged-corpus"]], "Accessing the Machado Text Corpus": [[399, "accessing-the-machado-text-corpus"]], "Adding Background Knowledge": [[377, "adding-background-knowledge"]], "Alignment": [[412, "alignment"]], "Alignment Algorithms": [[412, "alignment-algorithms"]], "Alignment Error Rate (AER)": [[412, "alignment-error-rate-aer"]], "Alignment Objects": [[412, "alignment-objects"]], "Annotated Documents": [[381, "annotated-documents"]], "Association measures": [[371, "association-measures"], [394, "association-measures"]], "Automated Derivation": [[385, "automated-derivation"]], "Automatically Created Corpus Reader Instances": [[373, "automatically-created-corpus-reader-instances"]], "Available Corpora": [[55, "available-corpora"]], "BLEU tests": [[362, "bleu-tests"]], "Basic stuff": [[367, "basic-stuff"]], "Batch Processing": [[404, "batch-processing"]], "Brill Trainer with evaluation": [[409, "brill-trainer-with-evaluation"]], "Buffered Gzip Reading and Writing": [[375, "buffered-gzip-reading-and-writing"]], "CCG combinator semantics computation": [[365, "ccg-combinator-semantics-computation"]], "CHILDES Corpus Readers": [[367, "childes-corpus-readers"]], "Categories": [[373, "categories"]], "Categorized Corpora": [[373, "categorized-corpora"]], "Categorized Markdown Corpus Reader": [[373, "categorized-markdown-corpus-reader"]], "Caveats:": [[301, "caveats"]], "Character Encodings": [[399, "character-encodings"]], "Chart": [[365, "chart"]], "Chat-80": [[366, "chat-80"]], "Checking Consistency": [[377, "checking-consistency"]], "Checking Informativity": [[377, "checking-informativity"]], "Checking the word access.": [[363, "checking-the-word-access"]], "ChunkParserI": [[368, "chunkparseri"]], "ChunkString": [[368, "chunkstring"]], "Chunked Corpora": [[373, "chunked-corpora"]], "Chunking": [[368, "chunking"]], "Chunking Rules": [[368, "chunking-rules"]], "Classifiers": [[369, "classifiers"]], "Closed Domain Assumption": [[396, "closed-domain-assumption"]], "Closed World Assumption": [[396, "closed-world-assumption"]], "CoNLL Data": [[376, "conll-data"]], "Collections": [[370, "collections"]], "Collocations": [[371, "collocations"]], "Combinatory Categorial Grammar": [[364, "combinatory-categorial-grammar"]], "Combinatory Categorial Grammar with semantics": [[365, "combinatory-categorial-grammar-with-semantics"]], "Command line installation": [[360, "command-line-installation"]], "Common Corpus Reader Methods": [[373, "common-corpus-reader-methods"]], "Compilation": [[384, "compilation"]], "Complex semantics": [[365, "complex-semantics"]], "Concatenation": [[373, "concatenation"]], "Concepts": [[182, "concepts"], [366, "concepts"]], "Concordance Example": [[372, "concordance-example"]], "Concordance List": [[372, "concordance-list"]], "ConditionalFreqDist": [[400, "conditionalfreqdist"]], "Confusion Matrix": [[394, "confusion-matrix"]], "Conjunction": [[364, "conjunction"]], "Constructor": [[373, "constructor"]], "Contributing to NLTK": [[359, null]], "Converting Input-Features to Joint-Features": [[33, "converting-input-features-to-joint-features"]], "Cooper Storage": [[404, "cooper-storage"]], "Corpus Access": [[390, "corpus-access"]], "Corpus Reader": [[412, "corpus-reader"]], "Corpus Reader Classes": [[373, "corpus-reader-classes"]], "Corpus Reader Functions": [[55, "corpus-reader-functions"], [57, "corpus-reader-functions"]], "Corpus Reader Objects": [[373, "corpus-reader-objects"]], "Corpus Readers": [[373, "corpus-readers"]], "Corpus Types": [[373, "corpus-types"]], "Corpus View Regression Tests": [[373, "corpus-view-regression-tests"]], "Corpus Views": [[373, "corpus-views"]], "Creating New Corpus Reader Instances": [[373, "creating-new-corpus-reader-instances"]], "Crubadan Corpus Reader": [[374, "crubadan-corpus-reader"]], "Custom Feature Values": [[380, "custom-feature-values"]], "Customer Review Corpus information": [[91, "customer-review-corpus-information"]], "Data Access Methods": [[373, "data-access-methods"], [373, "id1"]], "Default Reasoning": [[396, "default-reasoning"]], "Demo of \u2018a man walks\u2019 using Compilation": [[384, "demo-of-a-man-walks-using-compilation"]], "Demo of \u2018every girl chases a dog\u2019": [[384, "demo-of-every-girl-chases-a-dog"]], "Demo of \u201cA dog walks\u201d": [[384, "demo-of-a-dog-walks"]], "Demo of \u201cJohn walks\u201d": [[384, "demo-of-john-walks"]], "Demonstrate word embedding using Gensim": [[383, "demonstrate-word-embedding-using-gensim"]], "Dependency Grammars": [[376, "dependency-grammars"]], "Dependency Graph to Glue Formulas": [[384, "dependency-graph-to-glue-formulas"]], "Dependency Graph to LFG f-structure": [[384, "dependency-graph-to-lfg-f-structure"]], "Design": [[373, "design"]], "Dictionary access methods (mutating)": [[380, "dictionary-access-methods-mutating"]], "Dictionary access methods (non-mutating)": [[380, "dictionary-access-methods-non-mutating"]], "Discourse Checking": [[377, "discourse-checking"]], "Discourse Representation Theory": [[378, "discourse-representation-theory"]], "Distance Metrics": [[394, "distance-metrics"]], "Don\u2019t Reinvent the Wheel": [[373, "don-t-reinvent-the-wheel"]], "Download Directory": [[113, "download-directory"]], "Downloading Packages": [[113, "downloading-packages"]], "EM for IBM Model 1": [[412, "em-for-ibm-model-1"]], "EasyInstall Tests": [[407, "easyinstall-tests"]], "Efficiency": [[25, "efficiency"]], "Emacs Tip": [[25, "emacs-tip"]], "Endlessness vs. intractability in relation trees": [[417, "endlessness-vs-intractability-in-relation-trees"]], "Equality & Hashing": [[380, "equality-hashing"]], "Evaluation": [[404, "evaluation"], [412, "evaluation"]], "Evaluation of Taggers": [[409, "evaluation-of-taggers"]], "Example usage": [[145, "example-usage"]], "Example usage of NLTK modules": [[361, null]], "Examples": [[324, "examples"]], "Examples for Portuguese Processing": [[399, "examples-for-portuguese-processing"]], "Expressions": [[380, "expressions"]], "Feature Grammar Parsing": [[379, "feature-grammar-parsing"]], "Feature Paths": [[380, "feature-paths"], [380, "id1"]], "Feature Structure Equality": [[380, "feature-structure-equality"]], "Feature Structure Types": [[380, "feature-structure-types"]], "Feature Structures": [[407, "feature-structures"]], "Feature Structures & Unification": [[380, "feature-structures-unification"]], "Feature Structures as Graphs": [[379, "feature-structures-as-graphs"]], "Feature Value Sets & Feature Value Tuples": [[380, "feature-value-sets-feature-value-tuples"]], "Features": [[30, "features"]], "Featuresets": [[30, "featuresets"]], "Filtering candidates": [[371, "filtering-candidates"]], "Finders": [[371, "finders"]], "Finding Conflicts": [[380, "finding-conflicts"]], "Finding Files in the NLTK Data Package": [[375, "finding-files-in-the-nltk-data-package"]], "Former NLTK Team Members": [[424, "former-nltk-team-members"]], "FrameNet": [[373, "framenet"], [381, "framenet"]], "Frames": [[381, "frames"]], "FreqDist": [[400, "freqdist"]], "Generating sentences from context-free grammars": [[382, "generating-sentences-from-context-free-grammars"]], "Glue": [[384, "glue"]], "Glue Semantics": [[384, "glue-semantics"], [385, "glue-semantics"]], "Grammar Parsing": [[386, "grammar-parsing"]], "Grammar with Binding Operators": [[379, "grammar-with-binding-operators"]], "How to use CHILDESCorpusReader": [[367, "how-to-use-childescorpusreader"]], "ImmutableMultiParentedTree Regression Tests": [[413, "immutablemultiparentedtree-regression-tests"]], "ImmutableParentedTree Regression Tests": [[413, "immutableparentedtree-regression-tests"]], "Implementation": [[373, "implementation"]], "Implementation notes": [[301, "implementation-notes"]], "Importing TreePrettyPrinter": [[414, "importing-treeprettyprinter"]], "Index": [[423, null]], "Individuals and Lexical Items": [[182, "individuals-and-lexical-items"], [366, "individuals-and-lexical-items"]], "Information Extraction": [[402, "information-extraction"]], "Initialize the Dependency Parser": [[385, "initialize-the-dependency-parser"]], "Installing NLTK": [[421, null]], "Installing NLTK Data": [[360, null], [421, "installing-nltk-data"]], "Installing Third-Party Software": [[421, "installing-third-party-software"]], "Installing via a proxy web server": [[360, "installing-via-a-proxy-web-server"]], "Integration with MALT parser": [[376, "integration-with-malt-parser"]], "Interactive installer": [[360, "interactive-installer"]], "Introduction": [[377, "introduction"], [388, "introduction"]], "Issue 167": [[391, "issue-167"]], "Issue 367": [[391, "issue-367"]], "Issue 380": [[391, "issue-380"]], "JEITA Corpus": [[390, "jeita-corpus"]], "JSON Encoding and Decoding": [[375, "json-encoding-and-decoding"]], "Japanese Language Processing": [[390, "japanese-language-processing"]], "KNB Corpus": [[390, "knb-corpus"]], "Keywords": [[371, "keywords"]], "Kneser Ney Estimation": [[400, "kneser-ney-estimation"]], "Known Issues:": [[301, "known-issues"]], "LFG f-structure to Glue": [[384, "lfg-f-structure-to-glue"]], "Language Model Counter": [[137, "language-model-counter"]], "Language code mapping and helper methods": [[374, "language-code-mapping-and-helper-methods"]], "Lazy Loader": [[375, "lazy-loader"]], "LazyIteratorList": [[370, "lazyiteratorlist"]], "Lemmas": [[417, "lemmas"]], "Lesk Algorithm": [[419, "lesk-algorithm"]], "Lexical Units": [[381, "lexical-units"]], "Lexicon": [[365, "lexicon"]], "Light-weight Feature Structures": [[380, "light-weight-feature-structures"]], "Lightweight Feature Structures": [[120, "lightweight-feature-structures"]], "Linear logic": [[384, "linear-logic"]], "Loading Data Files": [[375, "loading-data-files"]], "Loading Resources From the Data Package": [[375, "loading-resources-from-the-data-package"]], "Loading alternative Wordnet versions": [[417, "loading-alternative-wordnet-versions"]], "Logic & Lambda Calculus": [[392, "logic-lambda-calculus"]], "Logical Inference and Model Building": [[388, "logical-inference-and-model-building"]], "Lookup": [[406, "lookup"]], "METEOR tests": [[393, "meteor-tests"]], "Mac/Unix": [[421, "mac-unix"]], "Mace4": [[388, "mace4"]], "Mace4 Installation": [[388, "mace4-installation"]], "Making Local Copies": [[375, "making-local-copies"]], "Manual installation": [[360, "manual-installation"]], "Maximum Likelihood Estimation": [[400, "maximum-likelihood-estimation"]], "Metrics": [[394, "metrics"], [407, "metrics"]], "Miscellaneous Measures": [[394, "miscellaneous-measures"]], "Model Tests": [[404, "model-tests"]], "Module contents": [[0, "module-nltk"], [1, "module-nltk.app"], [12, "module-nltk.ccg"], [18, "module-nltk.chat"], [25, "module-nltk.chunk"], [30, "module-nltk.classify"], [46, "module-nltk.cluster"], [55, "module-nltk.corpus"], [57, "module-nltk.corpus.reader"], [100, "module-contents"], [114, "module-nltk.draw"], [123, "module-nltk.inference"], [135, "module-nltk.lm"], [143, "module-nltk.metrics"], [153, "module-nltk.misc"], [159, "module-nltk.parse"], [180, "module-nltk.sem"], [195, "module-nltk.sentiment"], [199, "module-nltk.stem"], [213, "module-nltk.tag"], [227, "module-nltk.tbl"], [302, "module-nltk.tokenize"], [322, "module-nltk.translate"], [341, "module-nltk.tree"], [351, "module-nltk.twitter"]], "Morphy": [[417, "morphy"]], "Multi-Decorator Example": [[396, "multi-decorator-example"]], "MultiParentedTree Regression Tests": [[413, "multiparentedtree-regression-tests"]], "Multiple Iterators": [[373, "multiple-iterators"]], "NLTK Download Server": [[113, "nltk-download-server"]], "NLTK Interface to Model Builders": [[388, "nltk-interface-to-model-builders"]], "NLTK Interface to Theorem Provers": [[388, "nltk-interface-to-theorem-provers"]], "NLTK Language Modeling Module.": [[135, "nltk-language-modeling-module"]], "NLTK Team": [[424, null]], "Named Entities": [[402, "named-entities"]], "Natural Language Toolkit": [[420, null]], "Next Steps": [[420, "next-steps"]], "No Alignment test": [[393, "no-alignment-test"]], "No semantics": [[365, "no-semantics"]], "Non-Projective Dependency Parsing": [[376, "non-projective-dependency-parsing"]], "Nonmonotonic Reasoning": [[396, "nonmonotonic-reasoning"]], "Notations": [[329, "notations"], [330, "notations"], [331, "notations"], [332, "notations"], [333, "notations"]], "Opinion Lexicon information": [[83, "opinion-lexicon-information"]], "Other Corpora": [[373, "other-corpora"]], "Overview": [[182, "overview"], [371, "overview"], [373, "overview"], [375, "overview"], [378, "overview"], [380, "overview"], [392, "overview"], [408, "overview"]], "PAICE\u2019s evaluation statistics for stemming algorithms": [[397, "paice-s-evaluation-statistics-for-stemming-algorithms"]], "Parented Tree Methods": [[413, "parented-tree-methods"]], "Parented Trees": [[413, "parented-trees"]], "ParentedTree Regression Tests": [[413, "parentedtree-regression-tests"]], "Parse errors": [[378, "parse-errors"], [392, "parse-errors"]], "Parse to semantics": [[378, "parse-to-semantics"]], "Parsed Corpora": [[373, "parsed-corpora"]], "Parser": [[378, "parser"]], "Parsing": [[398, "parsing"], [407, "parsing"]], "Parsing Feature Structure Strings": [[380, "parsing-feature-structure-strings"]], "Part-of-Speech Tagging": [[399, "part-of-speech-tagging"]], "Patching Issue #2088": [[372, "patching-issue-2088"]], "Persistence": [[182, "persistence"], [366, "persistence"]], "Plaintext Corpora": [[373, "plaintext-corpora"]], "Plaintext Corpus Reader": [[373, "plaintext-corpus-reader"]], "Precision": [[412, "precision"]], "Preparing Data": [[135, "preparing-data"]], "Pretty Printing": [[378, "pretty-printing"]], "ProbabilisticTree Regression Tests": [[413, "probabilistictree-regression-tests"]], "Probability": [[400, "probability"]], "Processing Tasks": [[399, "processing-tasks"]], "Projective Dependency Parsing": [[376, "projective-dependency-parsing"]], "PropBank": [[373, "propbank"], [401, "propbank"]], "Propositional Model Test": [[404, "propositional-model-test"]], "Prover9": [[388, "prover9"]], "Prover9 Installation": [[388, "prover9-installation"]], "Prune the trained binary model": [[383, "prune-the-trained-binary-model"]], "Python Programming, with Portuguese Examples": [[399, "python-programming-with-portuguese-examples"]], "Question Answering": [[403, "question-answering"]], "Ranking and correlation": [[371, "ranking-and-correlation"]], "Reading Chat-80 Files": [[182, "reading-chat-80-files"], [366, "reading-chat-80-files"]], "Reading Corpora": [[399, "reading-corpora"]], "Reading Feature Structures": [[380, "reading-feature-structures"]], "Readings and Threads": [[377, "readings-and-threads"]], "Recall": [[412, "recall"]], "Reentrance": [[380, "reentrance"]], "References": [[329, "references"], [330, "references"], [331, "references"], [332, "references"], [333, "references"]], "RegexpChunkParser": [[25, "regexpchunkparser"], [368, "regexpchunkparser"]], "RegexpChunkRules": [[25, "regexpchunkrules"]], "RegexpParser": [[368, "regexpparser"]], "Regression Testing for issue #1025": [[409, "regression-testing-for-issue-1025"]], "Regression Testing for issue #2483": [[409, "regression-testing-for-issue-2483"]], "Regression Testing from book": [[377, "regression-testing-from-book"]], "Regression Tests": [[368, "regression-tests"], [369, "regression-tests"], [373, "regression-tests"], [375, "regression-tests"], [380, "regression-tests"], [391, "regression-tests"], [392, "regression-tests"], [409, "regression-tests"], [417, "regression-tests"]], "Regression Tests: MWETokenizer": [[410, "regression-tests-mwetokenizer"]], "Regression Tests: NLTKWordTokenizer": [[410, "regression-tests-nltkwordtokenizer"]], "Regression Tests: PunktSentenceTokenizer": [[410, "regression-tests-punktsentencetokenizer"]], "Regression Tests: Regexp Tokenizer": [[410, "regression-tests-regexp-tokenizer"]], "Regression Tests: TextTilingTokenizer": [[410, "regression-tests-texttilingtokenizer"]], "Regression Tests: ToktokTokenizer": [[410, "regression-tests-toktoktokenizer"]], "Regression Tests: TweetTokenizer": [[410, "regression-tests-tweettokenizer"]], "Regression Tests: align_tokens": [[410, "regression-tests-align-tokens"]], "Regression tests for TypedMaxentFeatureEncoding": [[369, "regression-tests-for-typedmaxentfeatureencoding"]], "Relation Extraction": [[402, "relation-extraction"]], "Relative Clauses": [[364, "relative-clauses"]], "Release Notes": [[422, null]], "Remove Variables": [[380, "remove-variables"]], "Replace": [[392, "replace"]], "Resolution Theorem Prover": [[403, "resolution-theorem-prover"]], "Resource Caching": [[375, "resource-caching"]], "Retracting Bindings": [[380, "retracting-bindings"]], "Retrieving other Data Sources": [[375, "retrieving-other-data-sources"]], "SQL Query": [[366, "sql-query"]], "Sample usage for bleu": [[362, null]], "Sample usage for bnc": [[363, null]], "Sample usage for ccg": [[364, null]], "Sample usage for ccg_semantics": [[365, null]], "Sample usage for chat80": [[366, null]], "Sample usage for childes": [[367, null]], "Sample usage for chunk": [[368, null]], "Sample usage for classify": [[369, null]], "Sample usage for collections": [[370, null]], "Sample usage for collocations": [[371, null]], "Sample usage for concordance": [[372, null]], "Sample usage for corpus": [[373, null]], "Sample usage for crubadan": [[374, null]], "Sample usage for data": [[375, null]], "Sample usage for dependency": [[376, null]], "Sample usage for discourse": [[377, null]], "Sample usage for drt": [[378, null]], "Sample usage for featgram": [[379, null]], "Sample usage for featstruct": [[380, null]], "Sample usage for framenet": [[381, null]], "Sample usage for generate": [[382, null]], "Sample usage for gensim": [[383, null]], "Sample usage for gluesemantics": [[384, null]], "Sample usage for gluesemantics_malt": [[385, null]], "Sample usage for grammar": [[386, null]], "Sample usage for grammartestsuites": [[387, null]], "Sample usage for inference": [[388, null]], "Sample usage for internals": [[389, null]], "Sample usage for japanese": [[390, null]], "Sample usage for lm": [[391, null]], "Sample usage for logic": [[392, null]], "Sample usage for meteor": [[393, null]], "Sample usage for metrics": [[394, null]], "Sample usage for misc": [[395, null]], "Sample usage for nonmonotonic": [[396, null]], "Sample usage for paice": [[397, null]], "Sample usage for parse": [[398, null]], "Sample usage for portuguese_en": [[399, null]], "Sample usage for probability": [[400, null]], "Sample usage for propbank": [[401, null]], "Sample usage for relextract": [[402, null]], "Sample usage for resolution": [[403, null]], "Sample usage for semantics": [[404, null]], "Sample usage for sentiment": [[405, null]], "Sample usage for sentiwordnet": [[406, null]], "Sample usage for simple": [[407, null]], "Sample usage for stem": [[408, null]], "Sample usage for tag": [[409, null]], "Sample usage for tokenize": [[410, null]], "Sample usage for toolbox": [[411, null]], "Sample usage for translate": [[412, null]], "Sample usage for tree": [[413, null]], "Sample usage for treeprettyprinter": [[414, null]], "Sample usage for treetransforms": [[415, null]], "Sample usage for util": [[416, null]], "Sample usage for wordnet": [[417, null]], "Sample usage for wordnet_lch": [[418, null]], "Sample usage for wsd": [[419, null]], "Satisfier Tests": [[404, "satisfier-tests"]], "Searching Text": [[399, "searching-text"]], "Seek and Tell": [[373, "seek-and-tell"]], "SeekableUnicodeStreamReader": [[373, "seekableunicodestreamreader"]], "Semantics": [[404, "semantics"]], "Sentence Segmentation": [[399, "sentence-segmentation"]], "SentiSynsets": [[406, "sentisynsets"]], "SentiWordNet": [[373, "sentiwordnet"]], "SentiWordNet Interface": [[406, "sentiwordnet-interface"]], "Sentiment Analysis": [[405, "sentiment-analysis"]], "Sequential Taggers": [[409, "sequential-taggers"]], "Setting up a Python Environment (Mac/Unix/Windows)": [[421, "setting-up-a-python-environment-mac-unix-windows"]], "Setup": [[367, "setup"], [377, "setup"], [394, "setup"]], "Similarity": [[417, "similarity"]], "Simple Concordancing": [[399, "simple-concordancing"]], "Simple semantics": [[365, "simple-semantics"]], "Simplify": [[392, "simplify"]], "Size argument to read()": [[373, "size-argument-to-read"]], "Slicing": [[373, "slicing"]], "Some simple things you can do with NLTK": [[420, "some-simple-things-you-can-do-with-nltk"]], "Squashed Bugs": [[373, "squashed-bugs"], [380, "squashed-bugs"], [413, "squashed-bugs"]], "Squashed bugs": [[400, "squashed-bugs"]], "Standard IR Scores": [[394, "standard-ir-scores"]], "Stemmers": [[408, "stemmers"]], "Stemming": [[399, "stemming"]], "Stopwords": [[399, "stopwords"]], "Stream Backed Corpus Views": [[373, "stream-backed-corpus-views"]], "Submodules": [[0, "submodules"], [1, "submodules"], [12, "submodules"], [18, "submodules"], [25, "submodules"], [30, "submodules"], [46, "submodules"], [55, "submodules"], [57, "submodules"], [114, "submodules"], [123, "submodules"], [135, "submodules"], [143, "submodules"], [153, "submodules"], [159, "submodules"], [180, "submodules"], [195, "submodules"], [199, "submodules"], [213, "submodules"], [227, "submodules"], [234, "submodules"], [246, "submodules"], [247, "submodules"], [288, "submodules"], [302, "submodules"], [322, "submodules"], [341, "submodules"], [351, "submodules"]], "Subpackages": [[0, "subpackages"], [55, "subpackages"], [234, "subpackages"], [246, "subpackages"]], "Synset Closures": [[417, "synset-closures"]], "Synsets": [[417, "synsets"]], "TGrep search implementation for NLTK trees": [[301, "tgrep-search-implementation-for-nltk-trees"]], "Table of Contents": [[373, "table-of-contents"]], "Tag Patterns": [[25, "tag-patterns"]], "Tagged Corpora": [[373, "tagged-corpora"]], "Tagged Corpus Reader": [[373, "tagged-corpus-reader"]], "Teardown test": [[417, "teardown-test"]], "Terminology": [[332, "terminology"], [333, "terminology"]], "Terminology: \u2018feature\u2019": [[33, "terminology-feature"]], "Test Parser": [[392, "test-parser"]], "Test Suites for Grammars": [[387, "test-suites-for-grammars"]], "Test for equality under alpha-conversion": [[392, "test-for-equality-under-alpha-conversion"]], "Test for formulas in Model": [[404, "test-for-formulas-in-model"]], "Test is_tautology()": [[403, "test-is-tautology"]], "Test most_general_unification()": [[403, "test-most-general-unification"]], "Test numerals": [[392, "test-numerals"]], "Test of i Function": [[404, "test-of-i-function"]], "Test proof()": [[403, "test-proof"]], "Test prove()": [[403, "test-prove"]], "Test subsumes()": [[403, "test-subsumes"]], "Test unify()": [[403, "test-unify"]], "Testing access to the sentences.": [[363, "testing-access-to-the-sentences"]], "Testing some HMM estimators": [[400, "testing-some-hmm-estimators"]], "Tests based on the Blackburn & Bos testsuite": [[404, "tests-based-on-the-blackburn-bos-testsuite"]], "Tests based on wikipedia examples": [[393, "tests-based-on-wikipedia-examples"]], "Tests for loading feature grammar files": [[398, "tests-for-loading-feature-grammar-files"]], "Tests for mapping from syntax to semantics": [[404, "tests-for-mapping-from-syntax-to-semantics"]], "Tests from published papers": [[365, "tests-from-published-papers"]], "Texts as List of Words": [[399, "texts-as-list-of-words"]], "The ProverCommand": [[388, "the-provercommand"]], "The equiv() method": [[388, "the-equiv-method"]], "Tokenization": [[407, "tokenization"]], "Tracing": [[380, "tracing"]], "Tracing the Feature Chart Parser": [[398, "tracing-the-feature-chart-parser"]], "Train the model": [[383, "train-the-model"]], "Training": [[135, "training"]], "Training Classifiers": [[30, "training-classifiers"]], "Tree Parsing": [[413, "tree-parsing"]], "Tree.fromlist()": [[413, "tree-fromlist"]], "Trie": [[370, "trie"]], "Type error during parsing": [[392, "type-error-during-parsing"]], "Typed Logic": [[392, "typed-logic"]], "Understemming and Overstemming values": [[397, "understemming-and-overstemming-values"]], "Unicode support": [[364, "unicode-support"]], "Unification": [[380, "unification"]], "Unification Bindings": [[380, "unification-bindings"]], "Unification on Dicts & Lists": [[380, "unification-on-dicts-lists"]], "Unique Names Assumption": [[396, "unique-names-assumption"]], "Unit Tests": [[378, "unit-tests"], [404, "unit-tests"]], "Unit test cases for toolbox": [[411, "unit-test-cases-for-toolbox"]], "Unit tests for ARLSTem Stemmer": [[408, "unit-tests-for-arlstem-stemmer"]], "Unit tests for ARLSTem2 Stemmer": [[408, "unit-tests-for-arlstem2-stemmer"]], "Unit tests for LARGE context-free grammars": [[398, "unit-tests-for-large-context-free-grammars"]], "Unit tests for Snowball stemmer": [[408, "unit-tests-for-snowball-stemmer"]], "Unit tests for Wordfinder class": [[395, "unit-tests-for-wordfinder-class"]], "Unit tests for function argument application in a Model": [[404, "unit-tests-for-function-argument-application-in-a-model"]], "Unit tests for nltk.tree.Tree": [[413, "unit-tests-for-nltk-tree-tree"]], "Unit tests for nltk.tree.prettyprinter.TreePrettyPrinter": [[414, "unit-tests-for-nltk-tree-prettyprinter-treeprettyprinter"]], "Unit tests for relations and valuations": [[404, "unit-tests-for-relations-and-valuations"]], "Unit tests for the Chart Parser class": [[398, "unit-tests-for-the-chart-parser-class"]], "Unit tests for the Context Free Grammar class": [[398, "unit-tests-for-the-context-free-grammar-class"]], "Unit tests for the FeatStructNonterminal class": [[398, "unit-tests-for-the-featstructnonterminal-class"]], "Unit tests for the Feature Chart Parser classes": [[398, "unit-tests-for-the-feature-chart-parser-classes"]], "Unit tests for the Incremental Chart Parser class": [[398, "unit-tests-for-the-incremental-chart-parser-class"]], "Unit tests for the Porter stemmer": [[408, "unit-tests-for-the-porter-stemmer"]], "Unit tests for the Probabilistic CFG class": [[398, "unit-tests-for-the-probabilistic-cfg-class"]], "Unit tests for the Probabilistic Chart Parse classes": [[398, "unit-tests-for-the-probabilistic-chart-parse-classes"]], "Unit tests for the TreeTransformation class": [[415, "unit-tests-for-the-treetransformation-class"]], "Unit tests for the Viterbi Parse classes": [[398, "unit-tests-for-the-viterbi-parse-classes"]], "Unit tests for the miscellaneous sort functions.": [[395, "unit-tests-for-the-miscellaneous-sort-functions"]], "Unit tests for the nltk.utilities module": [[389, "unit-tests-for-the-nltk-utilities-module"]], "Unit tests for the rd (Recursive Descent Parser) class": [[398, "unit-tests-for-the-rd-recursive-descent-parser-class"]], "Unit tests for the sr (Shift Reduce Parser) class": [[398, "unit-tests-for-the-sr-shift-reduce-parser-class"]], "Unresolved Issues": [[25, "unresolved-issues"]], "Untyped Logic": [[392, "untyped-logic"]], "Usage": [[181, "usage"], [301, "usage"]], "Using Mace4": [[388, "using-mace4"]], "Using Prover9": [[388, "using-prover9"]], "Using Valuations": [[366, "using-valuations"]], "Using a Trained Model": [[135, "using-a-trained-model"]], "Using conjunctions": [[365, "using-conjunctions"]], "Using contingency table values": [[371, "using-contingency-table-values"]], "Using the pre-trained model": [[383, "using-the-pre-trained-model"]], "Utility functions": [[416, "utility-functions"]], "Vader": [[405, "vader"]], "Variables / Free": [[392, "variables-free"]], "Verb Frames": [[417, "verb-frames"]], "Verbnet Corpus Reader": [[373, "verbnet-corpus-reader"]], "Windows": [[421, "windows"]], "With inference": [[385, "with-inference"]], "Witten Bell Estimation": [[400, "witten-bell-estimation"]], "Word Lists and Lexicons": [[373, "word-lists-and-lexicons"]], "Word Sense Disambiguation": [[419, "word-sense-disambiguation"]], "WordNet": [[373, "wordnet"]], "WordNet Interface": [[417, "wordnet-interface"]], "WordNet Lowest Common Hypernyms": [[418, "wordnet-lowest-common-hypernyms"]], "Words": [[417, "words"]], "Writing New Corpus Readers": [[373, "writing-new-corpus-readers"]], "betaConversionTestSuite.pl": [[392, "betaconversiontestsuite-pl"]], "comparative_sentences": [[373, "comparative-sentences"]], "equiv():": [[378, "equiv"]], "fol()": [[378, "fol"]], "markers": [[411, "markers"]], "multext_east": [[373, "multext-east"]], "nltk package": [[0, null]], "nltk.app package": [[1, null]], "nltk.app.chartparser_app module": [[2, null]], "nltk.app.chunkparser_app module": [[3, null]], "nltk.app.collocations_app module": [[4, null]], "nltk.app.concordance_app module": [[5, null]], "nltk.app.nemo_app module": [[6, null]], "nltk.app.rdparser_app module": [[7, null]], "nltk.app.srparser_app module": [[8, null]], "nltk.app.wordfreq_app module": [[9, null]], "nltk.app.wordnet_app module": [[10, null]], "nltk.book module": [[11, null]], "nltk.ccg package": [[12, null]], "nltk.ccg.api module": [[13, null]], "nltk.ccg.chart module": [[14, null]], "nltk.ccg.combinator module": [[15, null]], "nltk.ccg.lexicon module": [[16, null]], "nltk.ccg.logic module": [[17, null]], "nltk.chat package": [[18, null]], "nltk.chat.eliza module": [[19, null]], "nltk.chat.iesha module": [[20, null]], "nltk.chat.rude module": [[21, null]], "nltk.chat.suntsu module": [[22, null]], "nltk.chat.util module": [[23, null]], "nltk.chat.zen module": [[24, null]], "nltk.chunk package": [[25, null]], "nltk.chunk.api module": [[26, null]], "nltk.chunk.named_entity module": [[27, null]], "nltk.chunk.regexp module": [[28, null]], "nltk.chunk.util module": [[29, null]], "nltk.classify package": [[30, null]], "nltk.classify.api module": [[31, null]], "nltk.classify.decisiontree module": [[32, null]], "nltk.classify.maxent module": [[33, null]], "nltk.classify.megam module": [[34, null]], "nltk.classify.naivebayes module": [[35, null]], "nltk.classify.positivenaivebayes module": [[36, null]], "nltk.classify.rte_classify module": [[37, null]], "nltk.classify.scikitlearn module": [[38, null]], "nltk.classify.senna module": [[39, null]], "nltk.classify.svm module": [[40, null]], "nltk.classify.tadm module": [[41, null]], "nltk.classify.textcat module": [[42, null]], "nltk.classify.util module": [[43, null]], "nltk.classify.weka module": [[44, null]], "nltk.cli module": [[45, null]], "nltk.cluster package": [[46, null]], "nltk.cluster.api module": [[47, null]], "nltk.cluster.em module": [[48, null]], "nltk.cluster.gaac module": [[49, null]], "nltk.cluster.kmeans module": [[50, null]], "nltk.cluster.util module": [[51, null]], "nltk.collections module": [[52, null]], "nltk.collocations module": [[53, null]], "nltk.compat module": [[54, null]], "nltk.corpus package": [[55, null]], "nltk.corpus.europarl_raw module": [[56, null]], "nltk.corpus.reader package": [[57, null]], "nltk.corpus.reader.aligned module": [[58, null]], "nltk.corpus.reader.api module": [[59, null]], "nltk.corpus.reader.bcp47 module": [[60, null]], "nltk.corpus.reader.bnc module": [[61, null]], "nltk.corpus.reader.bracket_parse module": [[62, null]], "nltk.corpus.reader.categorized_sents module": [[63, null]], "nltk.corpus.reader.chasen module": [[64, null]], "nltk.corpus.reader.childes module": [[65, null]], "nltk.corpus.reader.chunked module": [[66, null]], "nltk.corpus.reader.cmudict module": [[67, null]], "nltk.corpus.reader.comparative_sents module": [[68, null]], "nltk.corpus.reader.conll module": [[69, null]], "nltk.corpus.reader.crubadan module": [[70, null]], "nltk.corpus.reader.dependency module": [[71, null]], "nltk.corpus.reader.framenet module": [[72, null]], "nltk.corpus.reader.ieer module": [[73, null]], "nltk.corpus.reader.indian module": [[74, null]], "nltk.corpus.reader.ipipan module": [[75, null]], "nltk.corpus.reader.knbc module": [[76, null]], "nltk.corpus.reader.lin module": [[77, null]], "nltk.corpus.reader.markdown module": [[78, null]], "nltk.corpus.reader.mte module": [[79, null]], "nltk.corpus.reader.nkjp module": [[80, null]], "nltk.corpus.reader.nombank module": [[81, null]], "nltk.corpus.reader.nps_chat module": [[82, null]], "nltk.corpus.reader.opinion_lexicon module": [[83, null]], "nltk.corpus.reader.panlex_lite module": [[84, null]], "nltk.corpus.reader.panlex_swadesh module": [[85, null]], "nltk.corpus.reader.pl196x module": [[86, null]], "nltk.corpus.reader.plaintext module": [[87, null]], "nltk.corpus.reader.ppattach module": [[88, null]], "nltk.corpus.reader.propbank module": [[89, null]], "nltk.corpus.reader.pros_cons module": [[90, null]], "nltk.corpus.reader.reviews module": [[91, null]], "nltk.corpus.reader.rte module": [[92, null]], "nltk.corpus.reader.semcor module": [[93, null]], "nltk.corpus.reader.senseval module": [[94, null]], "nltk.corpus.reader.sentiwordnet module": [[95, null]], "nltk.corpus.reader.sinica_treebank module": [[96, null]], "nltk.corpus.reader.string_category module": [[97, null]], "nltk.corpus.reader.switchboard module": [[98, null]], "nltk.corpus.reader.tagged module": [[99, null]], "nltk.corpus.reader.timit module": [[100, null]], "nltk.corpus.reader.toolbox module": [[101, null]], "nltk.corpus.reader.twitter module": [[102, null]], "nltk.corpus.reader.udhr module": [[103, null]], "nltk.corpus.reader.util module": [[104, null]], "nltk.corpus.reader.verbnet module": [[105, null]], "nltk.corpus.reader.wordlist module": [[106, null]], "nltk.corpus.reader.wordnet module": [[107, null]], "nltk.corpus.reader.xmldocs module": [[108, null]], "nltk.corpus.reader.ycoe module": [[109, null]], "nltk.corpus.util module": [[110, null]], "nltk.data module": [[111, null]], "nltk.decorators module": [[112, null]], "nltk.downloader module": [[113, null]], "nltk.draw package": [[114, null]], "nltk.draw.cfg module": [[115, null]], "nltk.draw.dispersion module": [[116, null]], "nltk.draw.table module": [[117, null]], "nltk.draw.tree module": [[118, null]], "nltk.draw.util module": [[119, null]], "nltk.featstruct module": [[120, null]], "nltk.grammar module": [[121, null]], "nltk.help module": [[122, null]], "nltk.inference package": [[123, null]], "nltk.inference.api module": [[124, null]], "nltk.inference.discourse module": [[125, null]], "nltk.inference.mace module": [[126, null]], "nltk.inference.nonmonotonic module": [[127, null]], "nltk.inference.prover9 module": [[128, null]], "nltk.inference.resolution module": [[129, null]], "nltk.inference.tableau module": [[130, null]], "nltk.internals module": [[131, null]], "nltk.jsontags module": [[132, null]], "nltk.langnames module": [[133, null]], "nltk.lazyimport module": [[134, null]], "nltk.lm package": [[135, null]], "nltk.lm.api module": [[136, null]], "nltk.lm.counter module": [[137, null]], "nltk.lm.models module": [[138, null]], "nltk.lm.preprocessing module": [[139, null]], "nltk.lm.smoothing module": [[140, null]], "nltk.lm.util module": [[141, null]], "nltk.lm.vocabulary module": [[142, null]], "nltk.metrics package": [[143, null]], "nltk.metrics.agreement module": [[144, null]], "nltk.metrics.aline module": [[145, null]], "nltk.metrics.association module": [[146, null]], "nltk.metrics.confusionmatrix module": [[147, null]], "nltk.metrics.distance module": [[148, null]], "nltk.metrics.paice module": [[149, null]], "nltk.metrics.scores module": [[150, null]], "nltk.metrics.segmentation module": [[151, null]], "nltk.metrics.spearman module": [[152, null]], "nltk.misc package": [[153, null]], "nltk.misc.babelfish module": [[154, null]], "nltk.misc.chomsky module": [[155, null]], "nltk.misc.minimalset module": [[156, null]], "nltk.misc.sort module": [[157, null]], "nltk.misc.wordfinder module": [[158, null]], "nltk.parse package": [[159, null]], "nltk.parse.api module": [[160, null]], "nltk.parse.bllip module": [[161, null]], "nltk.parse.chart module": [[162, null]], "nltk.parse.corenlp module": [[163, null]], "nltk.parse.dependencygraph module": [[164, null]], "nltk.parse.earleychart module": [[165, null]], "nltk.parse.evaluate module": [[166, null]], "nltk.parse.featurechart module": [[167, null]], "nltk.parse.generate module": [[168, null]], "nltk.parse.malt module": [[169, null]], "nltk.parse.nonprojectivedependencyparser module": [[170, null]], "nltk.parse.pchart module": [[171, null]], "nltk.parse.projectivedependencyparser module": [[172, null]], "nltk.parse.recursivedescent module": [[173, null]], "nltk.parse.shiftreduce module": [[174, null]], "nltk.parse.stanford module": [[175, null]], "nltk.parse.transitionparser module": [[176, null]], "nltk.parse.util module": [[177, null]], "nltk.parse.viterbi module": [[178, null]], "nltk.probability module": [[179, null]], "nltk.sem package": [[180, null]], "nltk.sem.boxer module": [[181, null]], "nltk.sem.chat80 module": [[182, null]], "nltk.sem.cooper_storage module": [[183, null]], "nltk.sem.drt module": [[184, null]], "nltk.sem.drt_glue_demo module": [[185, null]], "nltk.sem.evaluate module": [[186, null]], "nltk.sem.glue module": [[187, null]], "nltk.sem.hole module": [[188, null]], "nltk.sem.lfg module": [[189, null]], "nltk.sem.linearlogic module": [[190, null]], "nltk.sem.logic module": [[191, null]], "nltk.sem.relextract module": [[192, null]], "nltk.sem.skolemize module": [[193, null]], "nltk.sem.util module": [[194, null]], "nltk.sentiment package": [[195, null]], "nltk.sentiment.sentiment_analyzer module": [[196, null]], "nltk.sentiment.util module": [[197, null]], "nltk.sentiment.vader module": [[198, null]], "nltk.stem package": [[199, null]], "nltk.stem.api module": [[200, null]], "nltk.stem.arlstem module": [[201, null]], "nltk.stem.arlstem2 module": [[202, null]], "nltk.stem.cistem module": [[203, null]], "nltk.stem.isri module": [[204, null]], "nltk.stem.lancaster module": [[205, null]], "nltk.stem.porter module": [[206, null]], "nltk.stem.regexp module": [[207, null]], "nltk.stem.rslp module": [[208, null]], "nltk.stem.snowball module": [[209, null]], "nltk.stem.util module": [[210, null]], "nltk.stem.wordnet module": [[211, null]], "nltk.tabdata module": [[212, null]], "nltk.tag package": [[213, null]], "nltk.tag.api module": [[214, null]], "nltk.tag.brill module": [[215, null]], "nltk.tag.brill_trainer module": [[216, null]], "nltk.tag.crf module": [[217, null]], "nltk.tag.hmm module": [[218, null]], "nltk.tag.hunpos module": [[219, null]], "nltk.tag.mapping module": [[220, null]], "nltk.tag.perceptron module": [[221, null]], "nltk.tag.senna module": [[222, null]], "nltk.tag.sequential module": [[223, null]], "nltk.tag.stanford module": [[224, null]], "nltk.tag.tnt module": [[225, null]], "nltk.tag.util module": [[226, null]], "nltk.tbl package": [[227, null]], "nltk.tbl.api module": [[228, null]], "nltk.tbl.demo module": [[229, null]], "nltk.tbl.erroranalysis module": [[230, null]], "nltk.tbl.feature module": [[231, null]], "nltk.tbl.rule module": [[232, null]], "nltk.tbl.template module": [[233, null]], "nltk.test package": [[234, null]], "nltk.test.all module": [[235, null]], "nltk.test.childes_fixt module": [[236, null]], "nltk.test.classify_fixt module": [[237, null]], "nltk.test.conftest module": [[238, null]], "nltk.test.discourse_fixt module": [[239, null]], "nltk.test.gensim_fixt module": [[240, null]], "nltk.test.gluesemantics_malt_fixt module": [[241, null]], "nltk.test.inference_fixt module": [[242, null]], "nltk.test.nonmonotonic_fixt module": [[243, null]], "nltk.test.portuguese_en_fixt module": [[244, null]], "nltk.test.probability_fixt module": [[245, null]], "nltk.test.unit package": [[246, null]], "nltk.test.unit.lm package": [[247, null]], "nltk.test.unit.lm.test_counter module": [[248, null]], "nltk.test.unit.lm.test_models module": [[249, null]], "nltk.test.unit.lm.test_preprocessing module": [[250, null]], "nltk.test.unit.lm.test_vocabulary module": [[251, null]], "nltk.test.unit.test_aline module": [[252, null]], "nltk.test.unit.test_bllip module": [[253, null]], "nltk.test.unit.test_brill module": [[254, null]], "nltk.test.unit.test_cfd_mutation module": [[255, null]], "nltk.test.unit.test_cfg2chomsky module": [[256, null]], "nltk.test.unit.test_chunk module": [[257, null]], "nltk.test.unit.test_classify module": [[258, null]], "nltk.test.unit.test_collocations module": [[259, null]], "nltk.test.unit.test_concordance module": [[260, null]], "nltk.test.unit.test_corenlp module": [[261, null]], "nltk.test.unit.test_corpora module": [[262, null]], "nltk.test.unit.test_corpus_views module": [[263, null]], "nltk.test.unit.test_data module": [[264, null]], "nltk.test.unit.test_disagreement module": [[265, null]], "nltk.test.unit.test_distance module": [[266, null]], "nltk.test.unit.test_downloader module": [[267, null]], "nltk.test.unit.test_freqdist module": [[268, null]], "nltk.test.unit.test_hmm module": [[269, null]], "nltk.test.unit.test_json2csv_corpus module": [[270, null]], "nltk.test.unit.test_json_serialization module": [[271, null]], "nltk.test.unit.test_metrics module": [[272, null]], "nltk.test.unit.test_naivebayes module": [[273, null]], "nltk.test.unit.test_nombank module": [[274, null]], "nltk.test.unit.test_pl196x module": [[275, null]], "nltk.test.unit.test_pos_tag module": [[276, null]], "nltk.test.unit.test_ribes module": [[277, null]], "nltk.test.unit.test_rte_classify module": [[278, null]], "nltk.test.unit.test_seekable_unicode_stream_reader module": [[279, null]], "nltk.test.unit.test_senna module": [[280, null]], "nltk.test.unit.test_stem module": [[281, null]], "nltk.test.unit.test_tag module": [[282, null]], "nltk.test.unit.test_tgrep module": [[283, null]], "nltk.test.unit.test_tokenize module": [[284, null]], "nltk.test.unit.test_twitter_auth module": [[285, null]], "nltk.test.unit.test_util module": [[286, null]], "nltk.test.unit.test_wordnet module": [[287, null]], "nltk.test.unit.translate package": [[288, null]], "nltk.test.unit.translate.test_bleu module": [[289, null]], "nltk.test.unit.translate.test_gdfa module": [[290, null]], "nltk.test.unit.translate.test_ibm1 module": [[291, null]], "nltk.test.unit.translate.test_ibm2 module": [[292, null]], "nltk.test.unit.translate.test_ibm3 module": [[293, null]], "nltk.test.unit.translate.test_ibm4 module": [[294, null]], "nltk.test.unit.translate.test_ibm5 module": [[295, null]], "nltk.test.unit.translate.test_ibm_model module": [[296, null]], "nltk.test.unit.translate.test_meteor module": [[297, null]], "nltk.test.unit.translate.test_nist module": [[298, null]], "nltk.test.unit.translate.test_stack_decoder module": [[299, null]], "nltk.text module": [[300, null]], "nltk.tgrep module": [[301, null]], "nltk.tokenize package": [[302, null]], "nltk.tokenize.api module": [[303, null]], "nltk.tokenize.casual module": [[304, null]], "nltk.tokenize.destructive module": [[305, null]], "nltk.tokenize.legality_principle module": [[306, null]], "nltk.tokenize.mwe module": [[307, null]], "nltk.tokenize.nist module": [[308, null]], "nltk.tokenize.punkt module": [[309, null]], "nltk.tokenize.regexp module": [[310, null]], "nltk.tokenize.repp module": [[311, null]], "nltk.tokenize.sexpr module": [[312, null]], "nltk.tokenize.simple module": [[313, null]], "nltk.tokenize.sonority_sequencing module": [[314, null]], "nltk.tokenize.stanford module": [[315, null]], "nltk.tokenize.stanford_segmenter module": [[316, null]], "nltk.tokenize.texttiling module": [[317, null]], "nltk.tokenize.toktok module": [[318, null]], "nltk.tokenize.treebank module": [[319, null]], "nltk.tokenize.util module": [[320, null]], "nltk.toolbox module": [[321, null]], "nltk.translate package": [[322, null]], "nltk.translate.api module": [[323, null]], "nltk.translate.bleu_score module": [[324, null]], "nltk.translate.chrf_score module": [[325, null]], "nltk.translate.gale_church module": [[326, null]], "nltk.translate.gdfa module": [[327, null]], "nltk.translate.gleu_score module": [[328, null]], "nltk.translate.ibm1 module": [[329, null]], "nltk.translate.ibm2 module": [[330, null]], "nltk.translate.ibm3 module": [[331, null]], "nltk.translate.ibm4 module": [[332, null]], "nltk.translate.ibm5 module": [[333, null]], "nltk.translate.ibm_model module": [[334, null]], "nltk.translate.meteor_score module": [[335, null]], "nltk.translate.metrics module": [[336, null]], "nltk.translate.nist_score module": [[337, null]], "nltk.translate.phrase_based module": [[338, null]], "nltk.translate.ribes_score module": [[339, null]], "nltk.translate.stack_decoder module": [[340, null]], "nltk.tree package": [[341, null]], "nltk.tree.immutable module": [[342, null]], "nltk.tree.parented module": [[343, null]], "nltk.tree.parsing module": [[344, null]], "nltk.tree.prettyprinter module": [[345, null]], "nltk.tree.probabilistic module": [[346, null]], "nltk.tree.transforms module": [[347, null]], "nltk.tree.tree module": [[348, null]], "nltk.treeprettyprinter module": [[349, null]], "nltk.treetransforms module": [[350, null]], "nltk.twitter package": [[351, null]], "nltk.twitter.api module": [[352, null]], "nltk.twitter.common module": [[353, null]], "nltk.twitter.twitter_demo module": [[354, null]], "nltk.twitter.twitterclient module": [[355, null]], "nltk.twitter.util module": [[356, null]], "nltk.util module": [[357, null]], "nltk.wsd module": [[358, null]], "nps_chat": [[373, "nps-chat"]], "opinion_lexicon": [[373, "opinion-lexicon"]], "overridden()": [[389, "overridden"]], "ppattach": [[373, "ppattach"]], "product_reviews_1 and product_reviews_2": [[373, "product-reviews-1-and-product-reviews-2"]], "pros_cons": [[373, "pros-cons"]], "read_str()": [[389, "read-str"]], "regression tests": [[378, "regression-tests"]], "replace bound": [[378, "replace-bound"], [378, "id2"]], "replace unbound": [[378, "replace-unbound"], [378, "id1"]], "replace unbound with bound": [[378, "replace-unbound-with-bound"]], "replace unbound with bound on other side": [[378, "replace-unbound-with-bound-on-other-side"]], "replace unbound with bound on same side": [[378, "replace-unbound-with-bound-on-same-side"]], "replace unbound with double bound": [[378, "replace-unbound-with-double-bound"]], "replace unbound with unbound": [[378, "replace-unbound-with-unbound"], [378, "id3"]], "replace():": [[378, "replace"]], "resolve_anaphora()": [[378, "resolve-anaphora"]], "rte": [[373, "rte"]], "semcor": [[373, "semcor"]], "senseval": [[373, "senseval"]], "sentence_polarity": [[373, "sentence-polarity"]], "shakespeare": [[373, "shakespeare"]], "simplify()": [[378, "simplify"]], "subjectivity": [[373, "subjectivity"]], "timit": [[373, "timit"]], "toolbox": [[373, "toolbox"]], "toolbox functions": [[411, "toolbox-functions"]], "toolbox.StandardFormat": [[411, "toolbox-standardformat"]], "toolbox.StandardFormat.close()": [[411, "toolbox-standardformat-close"]], "toolbox.StandardFormat.fields()": [[411, "toolbox-standardformat-fields"]], "toolbox.StandardFormat.line_num": [[411, "toolbox-standardformat-line-num"]], "toolbox.StandardFormat.open()": [[411, "toolbox-standardformat-open"]], "toolbox.StandardFormat.open_string()": [[411, "toolbox-standardformat-open-string"]], "toolbox.StandardFormat.raw_fields()": [[411, "toolbox-standardformat-raw-fields"]], "toolbox.ToolboxData": [[411, "toolbox-toolboxdata"]], "toolbox.ToolboxData.parse()": [[411, "toolbox-toolboxdata-parse"]], "toolbox.to_sfm_string()": [[411, "toolbox-to-sfm-string"]], "twitter_samples": [[373, "twitter-samples"]], "verbnet": [[373, "verbnet"]]}, "docnames": ["api/nltk", "api/nltk.app", "api/nltk.app.chartparser_app", "api/nltk.app.chunkparser_app", "api/nltk.app.collocations_app", "api/nltk.app.concordance_app", "api/nltk.app.nemo_app", "api/nltk.app.rdparser_app", "api/nltk.app.srparser_app", "api/nltk.app.wordfreq_app", "api/nltk.app.wordnet_app", "api/nltk.book", "api/nltk.ccg", "api/nltk.ccg.api", "api/nltk.ccg.chart", "api/nltk.ccg.combinator", "api/nltk.ccg.lexicon", "api/nltk.ccg.logic", "api/nltk.chat", "api/nltk.chat.eliza", "api/nltk.chat.iesha", "api/nltk.chat.rude", "api/nltk.chat.suntsu", "api/nltk.chat.util", "api/nltk.chat.zen", "api/nltk.chunk", "api/nltk.chunk.api", "api/nltk.chunk.named_entity", "api/nltk.chunk.regexp", "api/nltk.chunk.util", "api/nltk.classify", "api/nltk.classify.api", "api/nltk.classify.decisiontree", "api/nltk.classify.maxent", "api/nltk.classify.megam", "api/nltk.classify.naivebayes", "api/nltk.classify.positivenaivebayes", "api/nltk.classify.rte_classify", "api/nltk.classify.scikitlearn", "api/nltk.classify.senna", "api/nltk.classify.svm", "api/nltk.classify.tadm", "api/nltk.classify.textcat", "api/nltk.classify.util", "api/nltk.classify.weka", "api/nltk.cli", "api/nltk.cluster", "api/nltk.cluster.api", "api/nltk.cluster.em", "api/nltk.cluster.gaac", "api/nltk.cluster.kmeans", "api/nltk.cluster.util", "api/nltk.collections", "api/nltk.collocations", "api/nltk.compat", "api/nltk.corpus", "api/nltk.corpus.europarl_raw", "api/nltk.corpus.reader", "api/nltk.corpus.reader.aligned", "api/nltk.corpus.reader.api", "api/nltk.corpus.reader.bcp47", "api/nltk.corpus.reader.bnc", "api/nltk.corpus.reader.bracket_parse", "api/nltk.corpus.reader.categorized_sents", "api/nltk.corpus.reader.chasen", "api/nltk.corpus.reader.childes", "api/nltk.corpus.reader.chunked", "api/nltk.corpus.reader.cmudict", "api/nltk.corpus.reader.comparative_sents", "api/nltk.corpus.reader.conll", "api/nltk.corpus.reader.crubadan", "api/nltk.corpus.reader.dependency", "api/nltk.corpus.reader.framenet", "api/nltk.corpus.reader.ieer", "api/nltk.corpus.reader.indian", "api/nltk.corpus.reader.ipipan", "api/nltk.corpus.reader.knbc", "api/nltk.corpus.reader.lin", "api/nltk.corpus.reader.markdown", "api/nltk.corpus.reader.mte", "api/nltk.corpus.reader.nkjp", "api/nltk.corpus.reader.nombank", "api/nltk.corpus.reader.nps_chat", "api/nltk.corpus.reader.opinion_lexicon", "api/nltk.corpus.reader.panlex_lite", "api/nltk.corpus.reader.panlex_swadesh", "api/nltk.corpus.reader.pl196x", "api/nltk.corpus.reader.plaintext", "api/nltk.corpus.reader.ppattach", "api/nltk.corpus.reader.propbank", "api/nltk.corpus.reader.pros_cons", "api/nltk.corpus.reader.reviews", "api/nltk.corpus.reader.rte", "api/nltk.corpus.reader.semcor", "api/nltk.corpus.reader.senseval", "api/nltk.corpus.reader.sentiwordnet", "api/nltk.corpus.reader.sinica_treebank", "api/nltk.corpus.reader.string_category", "api/nltk.corpus.reader.switchboard", "api/nltk.corpus.reader.tagged", "api/nltk.corpus.reader.timit", "api/nltk.corpus.reader.toolbox", "api/nltk.corpus.reader.twitter", "api/nltk.corpus.reader.udhr", "api/nltk.corpus.reader.util", "api/nltk.corpus.reader.verbnet", "api/nltk.corpus.reader.wordlist", "api/nltk.corpus.reader.wordnet", "api/nltk.corpus.reader.xmldocs", "api/nltk.corpus.reader.ycoe", "api/nltk.corpus.util", "api/nltk.data", "api/nltk.decorators", "api/nltk.downloader", "api/nltk.draw", "api/nltk.draw.cfg", "api/nltk.draw.dispersion", "api/nltk.draw.table", "api/nltk.draw.tree", "api/nltk.draw.util", "api/nltk.featstruct", "api/nltk.grammar", "api/nltk.help", "api/nltk.inference", "api/nltk.inference.api", "api/nltk.inference.discourse", "api/nltk.inference.mace", "api/nltk.inference.nonmonotonic", "api/nltk.inference.prover9", "api/nltk.inference.resolution", "api/nltk.inference.tableau", "api/nltk.internals", "api/nltk.jsontags", "api/nltk.langnames", "api/nltk.lazyimport", "api/nltk.lm", "api/nltk.lm.api", "api/nltk.lm.counter", "api/nltk.lm.models", "api/nltk.lm.preprocessing", "api/nltk.lm.smoothing", "api/nltk.lm.util", "api/nltk.lm.vocabulary", "api/nltk.metrics", "api/nltk.metrics.agreement", "api/nltk.metrics.aline", "api/nltk.metrics.association", "api/nltk.metrics.confusionmatrix", "api/nltk.metrics.distance", "api/nltk.metrics.paice", "api/nltk.metrics.scores", "api/nltk.metrics.segmentation", "api/nltk.metrics.spearman", "api/nltk.misc", "api/nltk.misc.babelfish", "api/nltk.misc.chomsky", "api/nltk.misc.minimalset", "api/nltk.misc.sort", "api/nltk.misc.wordfinder", "api/nltk.parse", "api/nltk.parse.api", "api/nltk.parse.bllip", "api/nltk.parse.chart", "api/nltk.parse.corenlp", "api/nltk.parse.dependencygraph", "api/nltk.parse.earleychart", "api/nltk.parse.evaluate", "api/nltk.parse.featurechart", "api/nltk.parse.generate", "api/nltk.parse.malt", "api/nltk.parse.nonprojectivedependencyparser", "api/nltk.parse.pchart", "api/nltk.parse.projectivedependencyparser", "api/nltk.parse.recursivedescent", "api/nltk.parse.shiftreduce", "api/nltk.parse.stanford", "api/nltk.parse.transitionparser", "api/nltk.parse.util", "api/nltk.parse.viterbi", "api/nltk.probability", "api/nltk.sem", "api/nltk.sem.boxer", "api/nltk.sem.chat80", "api/nltk.sem.cooper_storage", "api/nltk.sem.drt", "api/nltk.sem.drt_glue_demo", "api/nltk.sem.evaluate", "api/nltk.sem.glue", "api/nltk.sem.hole", "api/nltk.sem.lfg", "api/nltk.sem.linearlogic", "api/nltk.sem.logic", "api/nltk.sem.relextract", "api/nltk.sem.skolemize", "api/nltk.sem.util", "api/nltk.sentiment", "api/nltk.sentiment.sentiment_analyzer", "api/nltk.sentiment.util", "api/nltk.sentiment.vader", "api/nltk.stem", "api/nltk.stem.api", "api/nltk.stem.arlstem", "api/nltk.stem.arlstem2", "api/nltk.stem.cistem", "api/nltk.stem.isri", "api/nltk.stem.lancaster", "api/nltk.stem.porter", "api/nltk.stem.regexp", "api/nltk.stem.rslp", "api/nltk.stem.snowball", "api/nltk.stem.util", "api/nltk.stem.wordnet", "api/nltk.tabdata", "api/nltk.tag", "api/nltk.tag.api", "api/nltk.tag.brill", "api/nltk.tag.brill_trainer", "api/nltk.tag.crf", "api/nltk.tag.hmm", "api/nltk.tag.hunpos", "api/nltk.tag.mapping", "api/nltk.tag.perceptron", "api/nltk.tag.senna", "api/nltk.tag.sequential", "api/nltk.tag.stanford", "api/nltk.tag.tnt", "api/nltk.tag.util", "api/nltk.tbl", "api/nltk.tbl.api", "api/nltk.tbl.demo", "api/nltk.tbl.erroranalysis", "api/nltk.tbl.feature", "api/nltk.tbl.rule", "api/nltk.tbl.template", "api/nltk.test", "api/nltk.test.all", "api/nltk.test.childes_fixt", "api/nltk.test.classify_fixt", "api/nltk.test.conftest", "api/nltk.test.discourse_fixt", "api/nltk.test.gensim_fixt", "api/nltk.test.gluesemantics_malt_fixt", "api/nltk.test.inference_fixt", "api/nltk.test.nonmonotonic_fixt", "api/nltk.test.portuguese_en_fixt", "api/nltk.test.probability_fixt", "api/nltk.test.unit", "api/nltk.test.unit.lm", "api/nltk.test.unit.lm.test_counter", "api/nltk.test.unit.lm.test_models", "api/nltk.test.unit.lm.test_preprocessing", "api/nltk.test.unit.lm.test_vocabulary", "api/nltk.test.unit.test_aline", "api/nltk.test.unit.test_bllip", "api/nltk.test.unit.test_brill", "api/nltk.test.unit.test_cfd_mutation", "api/nltk.test.unit.test_cfg2chomsky", "api/nltk.test.unit.test_chunk", "api/nltk.test.unit.test_classify", "api/nltk.test.unit.test_collocations", "api/nltk.test.unit.test_concordance", "api/nltk.test.unit.test_corenlp", "api/nltk.test.unit.test_corpora", "api/nltk.test.unit.test_corpus_views", "api/nltk.test.unit.test_data", "api/nltk.test.unit.test_disagreement", "api/nltk.test.unit.test_distance", "api/nltk.test.unit.test_downloader", "api/nltk.test.unit.test_freqdist", "api/nltk.test.unit.test_hmm", "api/nltk.test.unit.test_json2csv_corpus", "api/nltk.test.unit.test_json_serialization", "api/nltk.test.unit.test_metrics", "api/nltk.test.unit.test_naivebayes", "api/nltk.test.unit.test_nombank", "api/nltk.test.unit.test_pl196x", "api/nltk.test.unit.test_pos_tag", "api/nltk.test.unit.test_ribes", "api/nltk.test.unit.test_rte_classify", "api/nltk.test.unit.test_seekable_unicode_stream_reader", "api/nltk.test.unit.test_senna", "api/nltk.test.unit.test_stem", "api/nltk.test.unit.test_tag", "api/nltk.test.unit.test_tgrep", "api/nltk.test.unit.test_tokenize", "api/nltk.test.unit.test_twitter_auth", "api/nltk.test.unit.test_util", "api/nltk.test.unit.test_wordnet", "api/nltk.test.unit.translate", "api/nltk.test.unit.translate.test_bleu", "api/nltk.test.unit.translate.test_gdfa", "api/nltk.test.unit.translate.test_ibm1", "api/nltk.test.unit.translate.test_ibm2", "api/nltk.test.unit.translate.test_ibm3", "api/nltk.test.unit.translate.test_ibm4", "api/nltk.test.unit.translate.test_ibm5", "api/nltk.test.unit.translate.test_ibm_model", "api/nltk.test.unit.translate.test_meteor", "api/nltk.test.unit.translate.test_nist", "api/nltk.test.unit.translate.test_stack_decoder", "api/nltk.text", "api/nltk.tgrep", "api/nltk.tokenize", "api/nltk.tokenize.api", "api/nltk.tokenize.casual", "api/nltk.tokenize.destructive", "api/nltk.tokenize.legality_principle", "api/nltk.tokenize.mwe", "api/nltk.tokenize.nist", "api/nltk.tokenize.punkt", "api/nltk.tokenize.regexp", "api/nltk.tokenize.repp", "api/nltk.tokenize.sexpr", "api/nltk.tokenize.simple", "api/nltk.tokenize.sonority_sequencing", "api/nltk.tokenize.stanford", "api/nltk.tokenize.stanford_segmenter", "api/nltk.tokenize.texttiling", "api/nltk.tokenize.toktok", "api/nltk.tokenize.treebank", "api/nltk.tokenize.util", "api/nltk.toolbox", "api/nltk.translate", "api/nltk.translate.api", "api/nltk.translate.bleu_score", "api/nltk.translate.chrf_score", "api/nltk.translate.gale_church", "api/nltk.translate.gdfa", "api/nltk.translate.gleu_score", "api/nltk.translate.ibm1", "api/nltk.translate.ibm2", "api/nltk.translate.ibm3", "api/nltk.translate.ibm4", "api/nltk.translate.ibm5", "api/nltk.translate.ibm_model", "api/nltk.translate.meteor_score", "api/nltk.translate.metrics", "api/nltk.translate.nist_score", "api/nltk.translate.phrase_based", "api/nltk.translate.ribes_score", "api/nltk.translate.stack_decoder", "api/nltk.tree", "api/nltk.tree.immutable", "api/nltk.tree.parented", "api/nltk.tree.parsing", "api/nltk.tree.prettyprinter", "api/nltk.tree.probabilistic", "api/nltk.tree.transforms", "api/nltk.tree.tree", "api/nltk.treeprettyprinter", "api/nltk.treetransforms", "api/nltk.twitter", "api/nltk.twitter.api", "api/nltk.twitter.common", "api/nltk.twitter.twitter_demo", "api/nltk.twitter.twitterclient", "api/nltk.twitter.util", "api/nltk.util", "api/nltk.wsd", "contribute", "data", "howto", "howto/bleu", "howto/bnc", "howto/ccg", "howto/ccg_semantics", "howto/chat80", "howto/childes", "howto/chunk", "howto/classify", "howto/collections", "howto/collocations", "howto/concordance", "howto/corpus", "howto/crubadan", "howto/data", "howto/dependency", "howto/discourse", "howto/drt", "howto/featgram", "howto/featstruct", "howto/framenet", "howto/generate", "howto/gensim", "howto/gluesemantics", "howto/gluesemantics_malt", "howto/grammar", "howto/grammartestsuites", "howto/inference", "howto/internals", "howto/japanese", "howto/lm", "howto/logic", "howto/meteor", "howto/metrics", "howto/misc", "howto/nonmonotonic", "howto/paice", "howto/parse", "howto/portuguese_en", "howto/probability", "howto/propbank", "howto/relextract", "howto/resolution", "howto/semantics", "howto/sentiment", "howto/sentiwordnet", "howto/simple", "howto/stem", "howto/tag", "howto/tokenize", "howto/toolbox", "howto/translate", "howto/tree", "howto/treeprettyprinter", "howto/treetransforms", "howto/util", "howto/wordnet", "howto/wordnet_lch", "howto/wsd", "index", "install", "news", "py-modindex", "team"], "envversion": {"sphinx": 63, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1}, "filenames": ["api/nltk.rst", "api/nltk.app.rst", "api/nltk.app.chartparser_app.rst", "api/nltk.app.chunkparser_app.rst", "api/nltk.app.collocations_app.rst", "api/nltk.app.concordance_app.rst", "api/nltk.app.nemo_app.rst", "api/nltk.app.rdparser_app.rst", "api/nltk.app.srparser_app.rst", "api/nltk.app.wordfreq_app.rst", "api/nltk.app.wordnet_app.rst", "api/nltk.book.rst", "api/nltk.ccg.rst", "api/nltk.ccg.api.rst", "api/nltk.ccg.chart.rst", "api/nltk.ccg.combinator.rst", "api/nltk.ccg.lexicon.rst", "api/nltk.ccg.logic.rst", "api/nltk.chat.rst", "api/nltk.chat.eliza.rst", "api/nltk.chat.iesha.rst", "api/nltk.chat.rude.rst", "api/nltk.chat.suntsu.rst", "api/nltk.chat.util.rst", "api/nltk.chat.zen.rst", "api/nltk.chunk.rst", "api/nltk.chunk.api.rst", "api/nltk.chunk.named_entity.rst", "api/nltk.chunk.regexp.rst", "api/nltk.chunk.util.rst", "api/nltk.classify.rst", "api/nltk.classify.api.rst", "api/nltk.classify.decisiontree.rst", "api/nltk.classify.maxent.rst", "api/nltk.classify.megam.rst", "api/nltk.classify.naivebayes.rst", "api/nltk.classify.positivenaivebayes.rst", "api/nltk.classify.rte_classify.rst", "api/nltk.classify.scikitlearn.rst", "api/nltk.classify.senna.rst", "api/nltk.classify.svm.rst", "api/nltk.classify.tadm.rst", "api/nltk.classify.textcat.rst", "api/nltk.classify.util.rst", "api/nltk.classify.weka.rst", "api/nltk.cli.rst", "api/nltk.cluster.rst", "api/nltk.cluster.api.rst", "api/nltk.cluster.em.rst", "api/nltk.cluster.gaac.rst", "api/nltk.cluster.kmeans.rst", "api/nltk.cluster.util.rst", "api/nltk.collections.rst", "api/nltk.collocations.rst", "api/nltk.compat.rst", "api/nltk.corpus.rst", "api/nltk.corpus.europarl_raw.rst", "api/nltk.corpus.reader.rst", "api/nltk.corpus.reader.aligned.rst", "api/nltk.corpus.reader.api.rst", "api/nltk.corpus.reader.bcp47.rst", "api/nltk.corpus.reader.bnc.rst", "api/nltk.corpus.reader.bracket_parse.rst", "api/nltk.corpus.reader.categorized_sents.rst", "api/nltk.corpus.reader.chasen.rst", "api/nltk.corpus.reader.childes.rst", "api/nltk.corpus.reader.chunked.rst", "api/nltk.corpus.reader.cmudict.rst", "api/nltk.corpus.reader.comparative_sents.rst", "api/nltk.corpus.reader.conll.rst", "api/nltk.corpus.reader.crubadan.rst", "api/nltk.corpus.reader.dependency.rst", "api/nltk.corpus.reader.framenet.rst", "api/nltk.corpus.reader.ieer.rst", "api/nltk.corpus.reader.indian.rst", "api/nltk.corpus.reader.ipipan.rst", "api/nltk.corpus.reader.knbc.rst", "api/nltk.corpus.reader.lin.rst", "api/nltk.corpus.reader.markdown.rst", "api/nltk.corpus.reader.mte.rst", "api/nltk.corpus.reader.nkjp.rst", "api/nltk.corpus.reader.nombank.rst", "api/nltk.corpus.reader.nps_chat.rst", "api/nltk.corpus.reader.opinion_lexicon.rst", "api/nltk.corpus.reader.panlex_lite.rst", "api/nltk.corpus.reader.panlex_swadesh.rst", "api/nltk.corpus.reader.pl196x.rst", "api/nltk.corpus.reader.plaintext.rst", "api/nltk.corpus.reader.ppattach.rst", "api/nltk.corpus.reader.propbank.rst", "api/nltk.corpus.reader.pros_cons.rst", "api/nltk.corpus.reader.reviews.rst", "api/nltk.corpus.reader.rte.rst", "api/nltk.corpus.reader.semcor.rst", "api/nltk.corpus.reader.senseval.rst", "api/nltk.corpus.reader.sentiwordnet.rst", "api/nltk.corpus.reader.sinica_treebank.rst", "api/nltk.corpus.reader.string_category.rst", "api/nltk.corpus.reader.switchboard.rst", "api/nltk.corpus.reader.tagged.rst", "api/nltk.corpus.reader.timit.rst", "api/nltk.corpus.reader.toolbox.rst", "api/nltk.corpus.reader.twitter.rst", "api/nltk.corpus.reader.udhr.rst", "api/nltk.corpus.reader.util.rst", "api/nltk.corpus.reader.verbnet.rst", "api/nltk.corpus.reader.wordlist.rst", "api/nltk.corpus.reader.wordnet.rst", "api/nltk.corpus.reader.xmldocs.rst", "api/nltk.corpus.reader.ycoe.rst", "api/nltk.corpus.util.rst", "api/nltk.data.rst", "api/nltk.decorators.rst", "api/nltk.downloader.rst", "api/nltk.draw.rst", "api/nltk.draw.cfg.rst", "api/nltk.draw.dispersion.rst", "api/nltk.draw.table.rst", "api/nltk.draw.tree.rst", "api/nltk.draw.util.rst", "api/nltk.featstruct.rst", "api/nltk.grammar.rst", "api/nltk.help.rst", "api/nltk.inference.rst", "api/nltk.inference.api.rst", "api/nltk.inference.discourse.rst", "api/nltk.inference.mace.rst", "api/nltk.inference.nonmonotonic.rst", "api/nltk.inference.prover9.rst", "api/nltk.inference.resolution.rst", "api/nltk.inference.tableau.rst", "api/nltk.internals.rst", "api/nltk.jsontags.rst", "api/nltk.langnames.rst", "api/nltk.lazyimport.rst", "api/nltk.lm.rst", "api/nltk.lm.api.rst", "api/nltk.lm.counter.rst", "api/nltk.lm.models.rst", "api/nltk.lm.preprocessing.rst", "api/nltk.lm.smoothing.rst", "api/nltk.lm.util.rst", "api/nltk.lm.vocabulary.rst", "api/nltk.metrics.rst", "api/nltk.metrics.agreement.rst", "api/nltk.metrics.aline.rst", "api/nltk.metrics.association.rst", "api/nltk.metrics.confusionmatrix.rst", "api/nltk.metrics.distance.rst", "api/nltk.metrics.paice.rst", "api/nltk.metrics.scores.rst", "api/nltk.metrics.segmentation.rst", "api/nltk.metrics.spearman.rst", "api/nltk.misc.rst", "api/nltk.misc.babelfish.rst", "api/nltk.misc.chomsky.rst", "api/nltk.misc.minimalset.rst", "api/nltk.misc.sort.rst", "api/nltk.misc.wordfinder.rst", "api/nltk.parse.rst", "api/nltk.parse.api.rst", "api/nltk.parse.bllip.rst", "api/nltk.parse.chart.rst", "api/nltk.parse.corenlp.rst", "api/nltk.parse.dependencygraph.rst", "api/nltk.parse.earleychart.rst", "api/nltk.parse.evaluate.rst", "api/nltk.parse.featurechart.rst", "api/nltk.parse.generate.rst", "api/nltk.parse.malt.rst", "api/nltk.parse.nonprojectivedependencyparser.rst", "api/nltk.parse.pchart.rst", "api/nltk.parse.projectivedependencyparser.rst", "api/nltk.parse.recursivedescent.rst", "api/nltk.parse.shiftreduce.rst", "api/nltk.parse.stanford.rst", "api/nltk.parse.transitionparser.rst", "api/nltk.parse.util.rst", "api/nltk.parse.viterbi.rst", "api/nltk.probability.rst", "api/nltk.sem.rst", "api/nltk.sem.boxer.rst", "api/nltk.sem.chat80.rst", "api/nltk.sem.cooper_storage.rst", "api/nltk.sem.drt.rst", "api/nltk.sem.drt_glue_demo.rst", "api/nltk.sem.evaluate.rst", "api/nltk.sem.glue.rst", "api/nltk.sem.hole.rst", "api/nltk.sem.lfg.rst", "api/nltk.sem.linearlogic.rst", "api/nltk.sem.logic.rst", "api/nltk.sem.relextract.rst", "api/nltk.sem.skolemize.rst", "api/nltk.sem.util.rst", "api/nltk.sentiment.rst", "api/nltk.sentiment.sentiment_analyzer.rst", "api/nltk.sentiment.util.rst", "api/nltk.sentiment.vader.rst", "api/nltk.stem.rst", "api/nltk.stem.api.rst", "api/nltk.stem.arlstem.rst", "api/nltk.stem.arlstem2.rst", "api/nltk.stem.cistem.rst", "api/nltk.stem.isri.rst", "api/nltk.stem.lancaster.rst", "api/nltk.stem.porter.rst", "api/nltk.stem.regexp.rst", "api/nltk.stem.rslp.rst", "api/nltk.stem.snowball.rst", "api/nltk.stem.util.rst", "api/nltk.stem.wordnet.rst", "api/nltk.tabdata.rst", "api/nltk.tag.rst", "api/nltk.tag.api.rst", "api/nltk.tag.brill.rst", "api/nltk.tag.brill_trainer.rst", "api/nltk.tag.crf.rst", "api/nltk.tag.hmm.rst", "api/nltk.tag.hunpos.rst", "api/nltk.tag.mapping.rst", "api/nltk.tag.perceptron.rst", "api/nltk.tag.senna.rst", "api/nltk.tag.sequential.rst", "api/nltk.tag.stanford.rst", "api/nltk.tag.tnt.rst", "api/nltk.tag.util.rst", "api/nltk.tbl.rst", "api/nltk.tbl.api.rst", "api/nltk.tbl.demo.rst", "api/nltk.tbl.erroranalysis.rst", "api/nltk.tbl.feature.rst", "api/nltk.tbl.rule.rst", "api/nltk.tbl.template.rst", "api/nltk.test.rst", "api/nltk.test.all.rst", "api/nltk.test.childes_fixt.rst", "api/nltk.test.classify_fixt.rst", "api/nltk.test.conftest.rst", "api/nltk.test.discourse_fixt.rst", "api/nltk.test.gensim_fixt.rst", "api/nltk.test.gluesemantics_malt_fixt.rst", "api/nltk.test.inference_fixt.rst", "api/nltk.test.nonmonotonic_fixt.rst", "api/nltk.test.portuguese_en_fixt.rst", "api/nltk.test.probability_fixt.rst", "api/nltk.test.unit.rst", "api/nltk.test.unit.lm.rst", "api/nltk.test.unit.lm.test_counter.rst", "api/nltk.test.unit.lm.test_models.rst", "api/nltk.test.unit.lm.test_preprocessing.rst", "api/nltk.test.unit.lm.test_vocabulary.rst", "api/nltk.test.unit.test_aline.rst", "api/nltk.test.unit.test_bllip.rst", "api/nltk.test.unit.test_brill.rst", "api/nltk.test.unit.test_cfd_mutation.rst", "api/nltk.test.unit.test_cfg2chomsky.rst", "api/nltk.test.unit.test_chunk.rst", "api/nltk.test.unit.test_classify.rst", "api/nltk.test.unit.test_collocations.rst", "api/nltk.test.unit.test_concordance.rst", "api/nltk.test.unit.test_corenlp.rst", "api/nltk.test.unit.test_corpora.rst", "api/nltk.test.unit.test_corpus_views.rst", "api/nltk.test.unit.test_data.rst", "api/nltk.test.unit.test_disagreement.rst", "api/nltk.test.unit.test_distance.rst", "api/nltk.test.unit.test_downloader.rst", "api/nltk.test.unit.test_freqdist.rst", "api/nltk.test.unit.test_hmm.rst", "api/nltk.test.unit.test_json2csv_corpus.rst", "api/nltk.test.unit.test_json_serialization.rst", "api/nltk.test.unit.test_metrics.rst", "api/nltk.test.unit.test_naivebayes.rst", "api/nltk.test.unit.test_nombank.rst", "api/nltk.test.unit.test_pl196x.rst", "api/nltk.test.unit.test_pos_tag.rst", "api/nltk.test.unit.test_ribes.rst", "api/nltk.test.unit.test_rte_classify.rst", "api/nltk.test.unit.test_seekable_unicode_stream_reader.rst", "api/nltk.test.unit.test_senna.rst", "api/nltk.test.unit.test_stem.rst", "api/nltk.test.unit.test_tag.rst", "api/nltk.test.unit.test_tgrep.rst", "api/nltk.test.unit.test_tokenize.rst", "api/nltk.test.unit.test_twitter_auth.rst", "api/nltk.test.unit.test_util.rst", "api/nltk.test.unit.test_wordnet.rst", "api/nltk.test.unit.translate.rst", "api/nltk.test.unit.translate.test_bleu.rst", "api/nltk.test.unit.translate.test_gdfa.rst", "api/nltk.test.unit.translate.test_ibm1.rst", "api/nltk.test.unit.translate.test_ibm2.rst", "api/nltk.test.unit.translate.test_ibm3.rst", "api/nltk.test.unit.translate.test_ibm4.rst", "api/nltk.test.unit.translate.test_ibm5.rst", "api/nltk.test.unit.translate.test_ibm_model.rst", "api/nltk.test.unit.translate.test_meteor.rst", "api/nltk.test.unit.translate.test_nist.rst", "api/nltk.test.unit.translate.test_stack_decoder.rst", "api/nltk.text.rst", "api/nltk.tgrep.rst", "api/nltk.tokenize.rst", "api/nltk.tokenize.api.rst", "api/nltk.tokenize.casual.rst", "api/nltk.tokenize.destructive.rst", "api/nltk.tokenize.legality_principle.rst", "api/nltk.tokenize.mwe.rst", "api/nltk.tokenize.nist.rst", "api/nltk.tokenize.punkt.rst", "api/nltk.tokenize.regexp.rst", "api/nltk.tokenize.repp.rst", "api/nltk.tokenize.sexpr.rst", "api/nltk.tokenize.simple.rst", "api/nltk.tokenize.sonority_sequencing.rst", "api/nltk.tokenize.stanford.rst", "api/nltk.tokenize.stanford_segmenter.rst", "api/nltk.tokenize.texttiling.rst", "api/nltk.tokenize.toktok.rst", "api/nltk.tokenize.treebank.rst", "api/nltk.tokenize.util.rst", "api/nltk.toolbox.rst", "api/nltk.translate.rst", "api/nltk.translate.api.rst", "api/nltk.translate.bleu_score.rst", "api/nltk.translate.chrf_score.rst", "api/nltk.translate.gale_church.rst", "api/nltk.translate.gdfa.rst", "api/nltk.translate.gleu_score.rst", "api/nltk.translate.ibm1.rst", "api/nltk.translate.ibm2.rst", "api/nltk.translate.ibm3.rst", "api/nltk.translate.ibm4.rst", "api/nltk.translate.ibm5.rst", "api/nltk.translate.ibm_model.rst", "api/nltk.translate.meteor_score.rst", "api/nltk.translate.metrics.rst", "api/nltk.translate.nist_score.rst", "api/nltk.translate.phrase_based.rst", "api/nltk.translate.ribes_score.rst", "api/nltk.translate.stack_decoder.rst", "api/nltk.tree.rst", "api/nltk.tree.immutable.rst", "api/nltk.tree.parented.rst", "api/nltk.tree.parsing.rst", "api/nltk.tree.prettyprinter.rst", "api/nltk.tree.probabilistic.rst", "api/nltk.tree.transforms.rst", "api/nltk.tree.tree.rst", "api/nltk.treeprettyprinter.rst", "api/nltk.treetransforms.rst", "api/nltk.twitter.rst", "api/nltk.twitter.api.rst", "api/nltk.twitter.common.rst", "api/nltk.twitter.twitter_demo.rst", "api/nltk.twitter.twitterclient.rst", "api/nltk.twitter.util.rst", "api/nltk.util.rst", "api/nltk.wsd.rst", "contribute.rst", "data.rst", "howto.rst", "howto/bleu.rst", "howto/bnc.rst", "howto/ccg.rst", "howto/ccg_semantics.rst", "howto/chat80.rst", "howto/childes.rst", "howto/chunk.rst", "howto/classify.rst", "howto/collections.rst", "howto/collocations.rst", "howto/concordance.rst", "howto/corpus.rst", "howto/crubadan.rst", "howto/data.rst", "howto/dependency.rst", "howto/discourse.rst", "howto/drt.rst", "howto/featgram.rst", "howto/featstruct.rst", "howto/framenet.rst", "howto/generate.rst", "howto/gensim.rst", "howto/gluesemantics.rst", "howto/gluesemantics_malt.rst", "howto/grammar.rst", "howto/grammartestsuites.rst", "howto/inference.rst", "howto/internals.rst", "howto/japanese.rst", "howto/lm.rst", "howto/logic.rst", "howto/meteor.rst", "howto/metrics.rst", "howto/misc.rst", "howto/nonmonotonic.rst", "howto/paice.rst", "howto/parse.rst", "howto/portuguese_en.rst", "howto/probability.rst", "howto/propbank.rst", "howto/relextract.rst", "howto/resolution.rst", "howto/semantics.rst", "howto/sentiment.rst", "howto/sentiwordnet.rst", "howto/simple.rst", "howto/stem.rst", "howto/tag.rst", "howto/tokenize.rst", "howto/toolbox.rst", "howto/translate.rst", "howto/tree.rst", "howto/treeprettyprinter.rst", "howto/treetransforms.rst", "howto/util.rst", "howto/wordnet.rst", "howto/wordnet_lch.rst", "howto/wsd.rst", "index.rst", "install.rst", "news.rst", "py-modindex.rst", "team.rst"], "indexentries": {"__init__() (nltk.ccg.api.ccgvar method)": [[13, "nltk.ccg.api.CCGVar.__init__", false]], "__init__() (nltk.ccg.api.direction method)": [[13, "nltk.ccg.api.Direction.__init__", false]], "__init__() (nltk.ccg.api.functionalcategory method)": [[13, "nltk.ccg.api.FunctionalCategory.__init__", false]], "__init__() (nltk.ccg.api.primitivecategory method)": [[13, "nltk.ccg.api.PrimitiveCategory.__init__", false]], "__init__() (nltk.ccg.chart.backwardtyperaiserule method)": [[14, "nltk.ccg.chart.BackwardTypeRaiseRule.__init__", false]], "__init__() (nltk.ccg.chart.binarycombinatorrule method)": [[14, "nltk.ccg.chart.BinaryCombinatorRule.__init__", false]], "__init__() (nltk.ccg.chart.ccgchart method)": [[14, "nltk.ccg.chart.CCGChart.__init__", false]], "__init__() (nltk.ccg.chart.ccgchartparser method)": [[14, "nltk.ccg.chart.CCGChartParser.__init__", false]], "__init__() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.__init__", false]], "__init__() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.__init__", false]], "__init__() (nltk.ccg.chart.forwardtyperaiserule method)": [[14, "nltk.ccg.chart.ForwardTypeRaiseRule.__init__", false]], "__init__() (nltk.ccg.combinator.backwardcombinator method)": [[15, "nltk.ccg.combinator.BackwardCombinator.__init__", false]], "__init__() (nltk.ccg.combinator.forwardcombinator method)": [[15, "nltk.ccg.combinator.ForwardCombinator.__init__", false]], "__init__() (nltk.ccg.lexicon.ccglexicon method)": [[16, "nltk.ccg.lexicon.CCGLexicon.__init__", false]], "__init__() (nltk.ccg.lexicon.token method)": [[16, "nltk.ccg.lexicon.Token.__init__", false]], "__init__() (nltk.chat.util.chat method)": [[23, "nltk.chat.util.Chat.__init__", false]], "__init__() (nltk.chunk.named_entity.maxent_ne_chunker method)": [[27, "nltk.chunk.named_entity.Maxent_NE_Chunker.__init__", false]], "__init__() (nltk.chunk.named_entity.nechunkparser method)": [[27, "nltk.chunk.named_entity.NEChunkParser.__init__", false]], "__init__() (nltk.chunk.named_entity.nechunkparsertagger method)": [[27, "nltk.chunk.named_entity.NEChunkParserTagger.__init__", false]], "__init__() (nltk.chunk.regexp.chunkrule method)": [[28, "nltk.chunk.regexp.ChunkRule.__init__", false]], "__init__() (nltk.chunk.regexp.chunkrulewithcontext method)": [[28, "nltk.chunk.regexp.ChunkRuleWithContext.__init__", false]], "__init__() (nltk.chunk.regexp.chunkstring method)": [[28, "nltk.chunk.regexp.ChunkString.__init__", false]], "__init__() (nltk.chunk.regexp.expandleftrule method)": [[28, "nltk.chunk.regexp.ExpandLeftRule.__init__", false]], "__init__() (nltk.chunk.regexp.expandrightrule method)": [[28, "nltk.chunk.regexp.ExpandRightRule.__init__", false]], "__init__() (nltk.chunk.regexp.mergerule method)": [[28, "nltk.chunk.regexp.MergeRule.__init__", false]], "__init__() (nltk.chunk.regexp.regexpchunkparser method)": [[28, "nltk.chunk.regexp.RegexpChunkParser.__init__", false]], "__init__() (nltk.chunk.regexp.regexpchunkrule method)": [[28, "nltk.chunk.regexp.RegexpChunkRule.__init__", false]], "__init__() (nltk.chunk.regexp.regexpparser method)": [[28, "nltk.chunk.regexp.RegexpParser.__init__", false]], "__init__() (nltk.chunk.regexp.splitrule method)": [[28, "nltk.chunk.regexp.SplitRule.__init__", false]], "__init__() (nltk.chunk.regexp.striprule method)": [[28, "nltk.chunk.regexp.StripRule.__init__", false]], "__init__() (nltk.chunk.regexp.unchunkrule method)": [[28, "nltk.chunk.regexp.UnChunkRule.__init__", false]], "__init__() (nltk.chunk.util.chunkscore method)": [[29, "nltk.chunk.util.ChunkScore.__init__", false]], "__init__() (nltk.classify.decisiontree.decisiontreeclassifier method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.__init__", false]], "__init__() (nltk.classify.maxent.binarymaxentfeatureencoding method)": [[33, "nltk.classify.maxent.BinaryMaxentFeatureEncoding.__init__", false]], "__init__() (nltk.classify.maxent.functionbackedmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.FunctionBackedMaxentFeatureEncoding.__init__", false]], "__init__() (nltk.classify.maxent.gisencoding method)": [[33, "nltk.classify.maxent.GISEncoding.__init__", false]], "__init__() (nltk.classify.maxent.maxentclassifier method)": [[33, "nltk.classify.maxent.MaxentClassifier.__init__", false]], "__init__() (nltk.classify.maxent.tadmeventmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.TadmEventMaxentFeatureEncoding.__init__", false]], "__init__() (nltk.classify.maxent.typedmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.TypedMaxentFeatureEncoding.__init__", false]], "__init__() (nltk.classify.naivebayes.naivebayesclassifier method)": [[35, "nltk.classify.naivebayes.NaiveBayesClassifier.__init__", false]], "__init__() (nltk.classify.rte_classify.rtefeatureextractor method)": [[37, "nltk.classify.rte_classify.RTEFeatureExtractor.__init__", false]], "__init__() (nltk.classify.scikitlearn.sklearnclassifier method)": [[38, "nltk.classify.scikitlearn.SklearnClassifier.__init__", false]], "__init__() (nltk.classify.senna.senna method)": [[39, "nltk.classify.senna.Senna.__init__", false]], "__init__() (nltk.classify.svm.svmclassifier method)": [[40, "nltk.classify.svm.SvmClassifier.__init__", false]], "__init__() (nltk.classify.textcat.textcat method)": [[42, "nltk.classify.textcat.TextCat.__init__", false]], "__init__() (nltk.classify.util.cutoffchecker method)": [[43, "nltk.classify.util.CutoffChecker.__init__", false]], "__init__() (nltk.classify.weka.arff_formatter method)": [[44, "nltk.classify.weka.ARFF_Formatter.__init__", false]], "__init__() (nltk.classify.weka.wekaclassifier method)": [[44, "nltk.classify.weka.WekaClassifier.__init__", false]], "__init__() (nltk.cluster.em.emclusterer method)": [[48, "nltk.cluster.em.EMClusterer.__init__", false]], "__init__() (nltk.cluster.gaac.gaaclusterer method)": [[49, "nltk.cluster.gaac.GAAClusterer.__init__", false]], "__init__() (nltk.cluster.kmeans.kmeansclusterer method)": [[50, "nltk.cluster.kmeans.KMeansClusterer.__init__", false]], "__init__() (nltk.cluster.util.dendrogram method)": [[51, "nltk.cluster.util.Dendrogram.__init__", false]], "__init__() (nltk.cluster.util.vectorspaceclusterer method)": [[51, "nltk.cluster.util.VectorSpaceClusterer.__init__", false]], "__init__() (nltk.collections.lazyconcatenation method)": [[52, "nltk.collections.LazyConcatenation.__init__", false]], "__init__() (nltk.collections.lazyenumerate method)": [[52, "nltk.collections.LazyEnumerate.__init__", false]], "__init__() (nltk.collections.lazyiteratorlist method)": [[52, "nltk.collections.LazyIteratorList.__init__", false]], "__init__() (nltk.collections.lazymap method)": [[52, "nltk.collections.LazyMap.__init__", false]], "__init__() (nltk.collections.lazysubsequence method)": [[52, "nltk.collections.LazySubsequence.__init__", false]], "__init__() (nltk.collections.lazyzip method)": [[52, "nltk.collections.LazyZip.__init__", false]], "__init__() (nltk.collections.ordereddict method)": [[52, "nltk.collections.OrderedDict.__init__", false]], "__init__() (nltk.collections.trie method)": [[52, "nltk.collections.Trie.__init__", false]], "__init__() (nltk.collocations.bigramcollocationfinder method)": [[53, "nltk.collocations.BigramCollocationFinder.__init__", false]], "__init__() (nltk.collocations.quadgramcollocationfinder method)": [[53, "nltk.collocations.QuadgramCollocationFinder.__init__", false]], "__init__() (nltk.collocations.trigramcollocationfinder method)": [[53, "nltk.collocations.TrigramCollocationFinder.__init__", false]], "__init__() (nltk.corpus.reader.aligned.alignedcorpusreader method)": [[58, "nltk.corpus.reader.aligned.AlignedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.aligned.alignedsentcorpusview method)": [[58, "nltk.corpus.reader.aligned.AlignedSentCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.alignedcorpusreader method)": [[57, "nltk.corpus.reader.AlignedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.alpinocorpusreader method)": [[57, "nltk.corpus.reader.AlpinoCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.api.categorizedcorpusreader method)": [[59, "nltk.corpus.reader.api.CategorizedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.api.corpusreader method)": [[59, "nltk.corpus.reader.api.CorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.bcp47.bcp47corpusreader method)": [[60, "nltk.corpus.reader.bcp47.BCP47CorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.bcp47corpusreader method)": [[57, "nltk.corpus.reader.BCP47CorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.bnc.bnccorpusreader method)": [[61, "nltk.corpus.reader.bnc.BNCCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.bnc.bncsentence method)": [[61, "nltk.corpus.reader.bnc.BNCSentence.__init__", false]], "__init__() (nltk.corpus.reader.bnc.bncwordview method)": [[61, "nltk.corpus.reader.bnc.BNCWordView.__init__", false]], "__init__() (nltk.corpus.reader.bnccorpusreader method)": [[57, "nltk.corpus.reader.BNCCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.bracket_parse.alpinocorpusreader method)": [[62, "nltk.corpus.reader.bracket_parse.AlpinoCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.bracket_parse.bracketparsecorpusreader method)": [[62, "nltk.corpus.reader.bracket_parse.BracketParseCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.bracket_parse.categorizedbracketparsecorpusreader method)": [[62, "nltk.corpus.reader.bracket_parse.CategorizedBracketParseCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.bracketparsecorpusreader method)": [[57, "nltk.corpus.reader.BracketParseCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.categorized_sents.categorizedsentencescorpusreader method)": [[63, "nltk.corpus.reader.categorized_sents.CategorizedSentencesCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.categorizedbracketparsecorpusreader method)": [[57, "nltk.corpus.reader.CategorizedBracketParseCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.categorizedcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.categorizedplaintextcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedPlaintextCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.categorizedsentencescorpusreader method)": [[57, "nltk.corpus.reader.CategorizedSentencesCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.categorizedtaggedcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedTaggedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.chasen.chasencorpusreader method)": [[64, "nltk.corpus.reader.chasen.ChasenCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.chasen.chasencorpusview method)": [[64, "nltk.corpus.reader.chasen.ChasenCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.chasencorpusreader method)": [[57, "nltk.corpus.reader.ChasenCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.childes.childescorpusreader method)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.childescorpusreader method)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.chunked.chunkedcorpusreader method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.chunked.chunkedcorpusview method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.chunkedcorpusreader method)": [[57, "nltk.corpus.reader.ChunkedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.comparative_sents.comparativesentencescorpusreader method)": [[68, "nltk.corpus.reader.comparative_sents.ComparativeSentencesCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.comparative_sents.comparison method)": [[68, "nltk.corpus.reader.comparative_sents.Comparison.__init__", false]], "__init__() (nltk.corpus.reader.comparativesentencescorpusreader method)": [[57, "nltk.corpus.reader.ComparativeSentencesCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.conll.conllchunkcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllChunkCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.conll.conllsrlinstance method)": [[69, "nltk.corpus.reader.conll.ConllSRLInstance.__init__", false]], "__init__() (nltk.corpus.reader.conll.conllsrlinstancelist method)": [[69, "nltk.corpus.reader.conll.ConllSRLInstanceList.__init__", false]], "__init__() (nltk.corpus.reader.conllchunkcorpusreader method)": [[57, "nltk.corpus.reader.ConllChunkCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.corpusreader method)": [[57, "nltk.corpus.reader.CorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.crubadan.crubadancorpusreader method)": [[70, "nltk.corpus.reader.crubadan.CrubadanCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.crubadancorpusreader method)": [[57, "nltk.corpus.reader.CrubadanCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.dependency.dependencycorpusreader method)": [[71, "nltk.corpus.reader.dependency.DependencyCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.dependency.dependencycorpusview method)": [[71, "nltk.corpus.reader.dependency.DependencyCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.dependencycorpusreader method)": [[57, "nltk.corpus.reader.DependencyCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.framenet.attrdict method)": [[72, "nltk.corpus.reader.framenet.AttrDict.__init__", false]], "__init__() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.framenet.future method)": [[72, "nltk.corpus.reader.framenet.Future.__init__", false]], "__init__() (nltk.corpus.reader.framenet.prettydict method)": [[72, "nltk.corpus.reader.framenet.PrettyDict.__init__", false]], "__init__() (nltk.corpus.reader.framenet.prettylist method)": [[72, "nltk.corpus.reader.framenet.PrettyList.__init__", false]], "__init__() (nltk.corpus.reader.framenet.speciallist method)": [[72, "nltk.corpus.reader.framenet.SpecialList.__init__", false]], "__init__() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.ieer.ieerdocument method)": [[73, "nltk.corpus.reader.ieer.IEERDocument.__init__", false]], "__init__() (nltk.corpus.reader.indian.indiancorpusview method)": [[74, "nltk.corpus.reader.indian.IndianCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.ipipan.ipipancorpusreader method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.ipipan.ipipancorpusview method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.ipipancorpusreader method)": [[57, "nltk.corpus.reader.IPIPANCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.knbc.knbcorpusreader method)": [[76, "nltk.corpus.reader.knbc.KNBCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.knbcorpusreader method)": [[57, "nltk.corpus.reader.KNBCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.lin.linthesauruscorpusreader method)": [[77, "nltk.corpus.reader.lin.LinThesaurusCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.linthesauruscorpusreader method)": [[57, "nltk.corpus.reader.LinThesaurusCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.macmorphocorpusreader method)": [[57, "nltk.corpus.reader.MacMorphoCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.markdown.codeblock method)": [[78, "nltk.corpus.reader.markdown.CodeBlock.__init__", false]], "__init__() (nltk.corpus.reader.markdown.markdownblock method)": [[78, "nltk.corpus.reader.markdown.MarkdownBlock.__init__", false]], "__init__() (nltk.corpus.reader.markdown.markdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.MarkdownCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.markdown.markdownsection method)": [[78, "nltk.corpus.reader.markdown.MarkdownSection.__init__", false]], "__init__() (nltk.corpus.reader.mte.mtecorpusreader method)": [[79, "nltk.corpus.reader.mte.MTECorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.mte.mtecorpusview method)": [[79, "nltk.corpus.reader.mte.MTECorpusView.__init__", false]], "__init__() (nltk.corpus.reader.mte.mtefilereader method)": [[79, "nltk.corpus.reader.mte.MTEFileReader.__init__", false]], "__init__() (nltk.corpus.reader.mtecorpusreader method)": [[57, "nltk.corpus.reader.MTECorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.nkjp.nkjpcorpus_header_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Header_View.__init__", false]], "__init__() (nltk.corpus.reader.nkjp.nkjpcorpus_morph_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Morph_View.__init__", false]], "__init__() (nltk.corpus.reader.nkjp.nkjpcorpus_segmentation_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Segmentation_View.__init__", false]], "__init__() (nltk.corpus.reader.nkjp.nkjpcorpus_text_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Text_View.__init__", false]], "__init__() (nltk.corpus.reader.nkjp.nkjpcorpusreader method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.nkjp.xml_tool method)": [[80, "nltk.corpus.reader.nkjp.XML_Tool.__init__", false]], "__init__() (nltk.corpus.reader.nkjpcorpusreader method)": [[57, "nltk.corpus.reader.NKJPCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.nombank.nombankchaintreepointer method)": [[81, "nltk.corpus.reader.nombank.NombankChainTreePointer.__init__", false]], "__init__() (nltk.corpus.reader.nombank.nombankcorpusreader method)": [[81, "nltk.corpus.reader.nombank.NombankCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.nombank.nombankinstance method)": [[81, "nltk.corpus.reader.nombank.NombankInstance.__init__", false]], "__init__() (nltk.corpus.reader.nombank.nombankpointer method)": [[81, "nltk.corpus.reader.nombank.NombankPointer.__init__", false]], "__init__() (nltk.corpus.reader.nombank.nombanksplittreepointer method)": [[81, "nltk.corpus.reader.nombank.NombankSplitTreePointer.__init__", false]], "__init__() (nltk.corpus.reader.nombank.nombanktreepointer method)": [[81, "nltk.corpus.reader.nombank.NombankTreePointer.__init__", false]], "__init__() (nltk.corpus.reader.nombankcorpusreader method)": [[57, "nltk.corpus.reader.NombankCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.nps_chat.npschatcorpusreader method)": [[82, "nltk.corpus.reader.nps_chat.NPSChatCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.npschatcorpusreader method)": [[57, "nltk.corpus.reader.NPSChatCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.opinion_lexicon.ignorereadmecorpusview method)": [[83, "nltk.corpus.reader.opinion_lexicon.IgnoreReadmeCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.panlex_lite.meaning method)": [[84, "nltk.corpus.reader.panlex_lite.Meaning.__init__", false]], "__init__() (nltk.corpus.reader.panlex_lite.panlexlitecorpusreader method)": [[84, "nltk.corpus.reader.panlex_lite.PanLexLiteCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.panlex_swadesh.panlexswadeshcorpusreader method)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexSwadeshCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.panlexlitecorpusreader method)": [[57, "nltk.corpus.reader.PanLexLiteCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.panlexswadeshcorpusreader method)": [[57, "nltk.corpus.reader.PanlexSwadeshCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.pl196x.pl196xcorpusreader method)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.pl196x.teicorpusview method)": [[86, "nltk.corpus.reader.pl196x.TEICorpusView.__init__", false]], "__init__() (nltk.corpus.reader.pl196xcorpusreader method)": [[57, "nltk.corpus.reader.Pl196xCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.plaintext.categorizedplaintextcorpusreader method)": [[87, "nltk.corpus.reader.plaintext.CategorizedPlaintextCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.plaintext.plaintextcorpusreader method)": [[87, "nltk.corpus.reader.plaintext.PlaintextCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.plaintext.portuguesecategorizedplaintextcorpusreader method)": [[87, "nltk.corpus.reader.plaintext.PortugueseCategorizedPlaintextCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.plaintextcorpusreader method)": [[57, "nltk.corpus.reader.PlaintextCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.portuguesecategorizedplaintextcorpusreader method)": [[57, "nltk.corpus.reader.PortugueseCategorizedPlaintextCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.ppattach.ppattachment method)": [[88, "nltk.corpus.reader.ppattach.PPAttachment.__init__", false]], "__init__() (nltk.corpus.reader.propbank.propbankchaintreepointer method)": [[89, "nltk.corpus.reader.propbank.PropbankChainTreePointer.__init__", false]], "__init__() (nltk.corpus.reader.propbank.propbankcorpusreader method)": [[89, "nltk.corpus.reader.propbank.PropbankCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.propbank.propbankinflection method)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.__init__", false]], "__init__() (nltk.corpus.reader.propbank.propbankinstance method)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.__init__", false]], "__init__() (nltk.corpus.reader.propbank.propbankpointer method)": [[89, "nltk.corpus.reader.propbank.PropbankPointer.__init__", false]], "__init__() (nltk.corpus.reader.propbank.propbanksplittreepointer method)": [[89, "nltk.corpus.reader.propbank.PropbankSplitTreePointer.__init__", false]], "__init__() (nltk.corpus.reader.propbank.propbanktreepointer method)": [[89, "nltk.corpus.reader.propbank.PropbankTreePointer.__init__", false]], "__init__() (nltk.corpus.reader.propbankcorpusreader method)": [[57, "nltk.corpus.reader.PropbankCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.pros_cons.prosconscorpusreader method)": [[90, "nltk.corpus.reader.pros_cons.ProsConsCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.prosconscorpusreader method)": [[57, "nltk.corpus.reader.ProsConsCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.reviews.review method)": [[91, "nltk.corpus.reader.reviews.Review.__init__", false]], "__init__() (nltk.corpus.reader.reviews.reviewline method)": [[91, "nltk.corpus.reader.reviews.ReviewLine.__init__", false]], "__init__() (nltk.corpus.reader.reviews.reviewscorpusreader method)": [[91, "nltk.corpus.reader.reviews.ReviewsCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.reviewscorpusreader method)": [[57, "nltk.corpus.reader.ReviewsCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.rte.rtepair method)": [[92, "nltk.corpus.reader.rte.RTEPair.__init__", false]], "__init__() (nltk.corpus.reader.semcor.semcorcorpusreader method)": [[93, "nltk.corpus.reader.semcor.SemcorCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.semcor.semcorsentence method)": [[93, "nltk.corpus.reader.semcor.SemcorSentence.__init__", false]], "__init__() (nltk.corpus.reader.semcor.semcorwordview method)": [[93, "nltk.corpus.reader.semcor.SemcorWordView.__init__", false]], "__init__() (nltk.corpus.reader.semcorcorpusreader method)": [[57, "nltk.corpus.reader.SemcorCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.senseval.sensevalcorpusview method)": [[94, "nltk.corpus.reader.senseval.SensevalCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.senseval.sensevalinstance method)": [[94, "nltk.corpus.reader.senseval.SensevalInstance.__init__", false]], "__init__() (nltk.corpus.reader.sentisynset method)": [[57, "nltk.corpus.reader.SentiSynset.__init__", false]], "__init__() (nltk.corpus.reader.sentiwordnet.sentisynset method)": [[95, "nltk.corpus.reader.sentiwordnet.SentiSynset.__init__", false]], "__init__() (nltk.corpus.reader.sentiwordnet.sentiwordnetcorpusreader method)": [[95, "nltk.corpus.reader.sentiwordnet.SentiWordNetCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.sentiwordnetcorpusreader method)": [[57, "nltk.corpus.reader.SentiWordNetCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.string_category.stringcategorycorpusreader method)": [[97, "nltk.corpus.reader.string_category.StringCategoryCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.stringcategorycorpusreader method)": [[57, "nltk.corpus.reader.StringCategoryCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.switchboard.switchboardcorpusreader method)": [[98, "nltk.corpus.reader.switchboard.SwitchboardCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.switchboard.switchboardturn method)": [[98, "nltk.corpus.reader.switchboard.SwitchboardTurn.__init__", false]], "__init__() (nltk.corpus.reader.switchboardcorpusreader method)": [[57, "nltk.corpus.reader.SwitchboardCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.tagged.categorizedtaggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.CategorizedTaggedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.tagged.macmorphocorpusreader method)": [[99, "nltk.corpus.reader.tagged.MacMorphoCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.tagged.taggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.TaggedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.tagged.taggedcorpusview method)": [[99, "nltk.corpus.reader.tagged.TaggedCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.tagged.timittaggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.TimitTaggedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.taggedcorpusreader method)": [[57, "nltk.corpus.reader.TaggedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.teicorpusview method)": [[57, "nltk.corpus.reader.TEICorpusView.__init__", false]], "__init__() (nltk.corpus.reader.timit.speakerinfo method)": [[100, "nltk.corpus.reader.timit.SpeakerInfo.__init__", false]], "__init__() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.timittaggedcorpusreader method)": [[57, "nltk.corpus.reader.TimitTaggedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.twitter.twittercorpusreader method)": [[102, "nltk.corpus.reader.twitter.TwitterCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.twittercorpusreader method)": [[57, "nltk.corpus.reader.TwitterCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.udhr.udhrcorpusreader method)": [[103, "nltk.corpus.reader.udhr.UdhrCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.udhrcorpusreader method)": [[57, "nltk.corpus.reader.UdhrCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.util.concatenatedcorpusview method)": [[104, "nltk.corpus.reader.util.ConcatenatedCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.util.streambackedcorpusview method)": [[104, "nltk.corpus.reader.util.StreamBackedCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.__init__", false]], "__init__() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.__init__", false]], "__init__() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.wordnet.wordneticcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetICCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.wordneticcorpusreader method)": [[57, "nltk.corpus.reader.WordNetICCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.xmlcorpusreader method)": [[57, "nltk.corpus.reader.XMLCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.xmldocs.xmlcorpusreader method)": [[108, "nltk.corpus.reader.xmldocs.XMLCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.xmldocs.xmlcorpusview method)": [[108, "nltk.corpus.reader.xmldocs.XMLCorpusView.__init__", false]], "__init__() (nltk.corpus.reader.ycoe.ycoecorpusreader method)": [[109, "nltk.corpus.reader.ycoe.YCOECorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.ycoe.ycoetaggedcorpusreader method)": [[109, "nltk.corpus.reader.ycoe.YCOETaggedCorpusReader.__init__", false]], "__init__() (nltk.corpus.reader.ycoecorpusreader method)": [[57, "nltk.corpus.reader.YCOECorpusReader.__init__", false]], "__init__() (nltk.corpus.util.lazycorpusloader method)": [[110, "nltk.corpus.util.LazyCorpusLoader.__init__", false]], "__init__() (nltk.data.filesystempathpointer method)": [[111, "nltk.data.FileSystemPathPointer.__init__", false]], "__init__() (nltk.data.lazyloader method)": [[111, "nltk.data.LazyLoader.__init__", false]], "__init__() (nltk.data.openondemandzipfile method)": [[111, "nltk.data.OpenOnDemandZipFile.__init__", false]], "__init__() (nltk.data.seekableunicodestreamreader method)": [[111, "nltk.data.SeekableUnicodeStreamReader.__init__", false]], "__init__() (nltk.downloader.collection method)": [[113, "nltk.downloader.Collection.__init__", false]], "__init__() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.__init__", false]], "__init__() (nltk.downloader.downloadergui method)": [[113, "nltk.downloader.DownloaderGUI.__init__", false]], "__init__() (nltk.downloader.downloadershell method)": [[113, "nltk.downloader.DownloaderShell.__init__", false]], "__init__() (nltk.downloader.errormessage method)": [[113, "nltk.downloader.ErrorMessage.__init__", false]], "__init__() (nltk.downloader.finishcollectionmessage method)": [[113, "nltk.downloader.FinishCollectionMessage.__init__", false]], "__init__() (nltk.downloader.finishdownloadmessage method)": [[113, "nltk.downloader.FinishDownloadMessage.__init__", false]], "__init__() (nltk.downloader.finishpackagemessage method)": [[113, "nltk.downloader.FinishPackageMessage.__init__", false]], "__init__() (nltk.downloader.finishunzipmessage method)": [[113, "nltk.downloader.FinishUnzipMessage.__init__", false]], "__init__() (nltk.downloader.package method)": [[113, "nltk.downloader.Package.__init__", false]], "__init__() (nltk.downloader.progressmessage method)": [[113, "nltk.downloader.ProgressMessage.__init__", false]], "__init__() (nltk.downloader.selectdownloaddirmessage method)": [[113, "nltk.downloader.SelectDownloadDirMessage.__init__", false]], "__init__() (nltk.downloader.stalemessage method)": [[113, "nltk.downloader.StaleMessage.__init__", false]], "__init__() (nltk.downloader.startcollectionmessage method)": [[113, "nltk.downloader.StartCollectionMessage.__init__", false]], "__init__() (nltk.downloader.startdownloadmessage method)": [[113, "nltk.downloader.StartDownloadMessage.__init__", false]], "__init__() (nltk.downloader.startpackagemessage method)": [[113, "nltk.downloader.StartPackageMessage.__init__", false]], "__init__() (nltk.downloader.startunzipmessage method)": [[113, "nltk.downloader.StartUnzipMessage.__init__", false]], "__init__() (nltk.downloader.uptodatemessage method)": [[113, "nltk.downloader.UpToDateMessage.__init__", false]], "__init__() (nltk.draw.cfg.cfgdemo method)": [[115, "nltk.draw.cfg.CFGDemo.__init__", false]], "__init__() (nltk.draw.cfg.cfgeditor method)": [[115, "nltk.draw.cfg.CFGEditor.__init__", false]], "__init__() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.__init__", false]], "__init__() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.__init__", false]], "__init__() (nltk.draw.tree.treesegmentwidget method)": [[118, "nltk.draw.tree.TreeSegmentWidget.__init__", false]], "__init__() (nltk.draw.tree.treeview method)": [[118, "nltk.draw.tree.TreeView.__init__", false]], "__init__() (nltk.draw.tree.treewidget method)": [[118, "nltk.draw.tree.TreeWidget.__init__", false]], "__init__() (nltk.draw.util.abstractcontainerwidget method)": [[119, "nltk.draw.util.AbstractContainerWidget.__init__", false]], "__init__() (nltk.draw.util.boxwidget method)": [[119, "nltk.draw.util.BoxWidget.__init__", false]], "__init__() (nltk.draw.util.bracketwidget method)": [[119, "nltk.draw.util.BracketWidget.__init__", false]], "__init__() (nltk.draw.util.canvasframe method)": [[119, "nltk.draw.util.CanvasFrame.__init__", false]], "__init__() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.__init__", false]], "__init__() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.__init__", false]], "__init__() (nltk.draw.util.entrydialog method)": [[119, "nltk.draw.util.EntryDialog.__init__", false]], "__init__() (nltk.draw.util.mutableoptionmenu method)": [[119, "nltk.draw.util.MutableOptionMenu.__init__", false]], "__init__() (nltk.draw.util.ovalwidget method)": [[119, "nltk.draw.util.OvalWidget.__init__", false]], "__init__() (nltk.draw.util.parenwidget method)": [[119, "nltk.draw.util.ParenWidget.__init__", false]], "__init__() (nltk.draw.util.scrollwatcherwidget method)": [[119, "nltk.draw.util.ScrollWatcherWidget.__init__", false]], "__init__() (nltk.draw.util.sequencewidget method)": [[119, "nltk.draw.util.SequenceWidget.__init__", false]], "__init__() (nltk.draw.util.showtext method)": [[119, "nltk.draw.util.ShowText.__init__", false]], "__init__() (nltk.draw.util.spacewidget method)": [[119, "nltk.draw.util.SpaceWidget.__init__", false]], "__init__() (nltk.draw.util.stackwidget method)": [[119, "nltk.draw.util.StackWidget.__init__", false]], "__init__() (nltk.draw.util.symbolwidget method)": [[119, "nltk.draw.util.SymbolWidget.__init__", false]], "__init__() (nltk.draw.util.textwidget method)": [[119, "nltk.draw.util.TextWidget.__init__", false]], "__init__() (nltk.featstruct.featdict method)": [[120, "nltk.featstruct.FeatDict.__init__", false]], "__init__() (nltk.featstruct.featlist method)": [[120, "nltk.featstruct.FeatList.__init__", false]], "__init__() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.__init__", false]], "__init__() (nltk.featstruct.feature method)": [[120, "nltk.featstruct.Feature.__init__", false]], "__init__() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.__init__", false]], "__init__() (nltk.grammar.dependencygrammar method)": [[121, "nltk.grammar.DependencyGrammar.__init__", false]], "__init__() (nltk.grammar.nonterminal method)": [[121, "nltk.grammar.Nonterminal.__init__", false]], "__init__() (nltk.grammar.pcfg method)": [[121, "nltk.grammar.PCFG.__init__", false]], "__init__() (nltk.grammar.probabilisticdependencygrammar method)": [[121, "nltk.grammar.ProbabilisticDependencyGrammar.__init__", false]], "__init__() (nltk.grammar.probabilisticproduction method)": [[121, "nltk.grammar.ProbabilisticProduction.__init__", false]], "__init__() (nltk.grammar.production method)": [[121, "nltk.grammar.Production.__init__", false]], "__init__() (nltk.inference.api.basemodelbuildercommand method)": [[124, "nltk.inference.api.BaseModelBuilderCommand.__init__", false]], "__init__() (nltk.inference.api.baseprovercommand method)": [[124, "nltk.inference.api.BaseProverCommand.__init__", false]], "__init__() (nltk.inference.api.basetheoremtoolcommand method)": [[124, "nltk.inference.api.BaseTheoremToolCommand.__init__", false]], "__init__() (nltk.inference.api.modelbuildercommanddecorator method)": [[124, "nltk.inference.api.ModelBuilderCommandDecorator.__init__", false]], "__init__() (nltk.inference.api.parallelproverbuilder method)": [[124, "nltk.inference.api.ParallelProverBuilder.__init__", false]], "__init__() (nltk.inference.api.parallelproverbuildercommand method)": [[124, "nltk.inference.api.ParallelProverBuilderCommand.__init__", false]], "__init__() (nltk.inference.api.provercommanddecorator method)": [[124, "nltk.inference.api.ProverCommandDecorator.__init__", false]], "__init__() (nltk.inference.api.theoremtoolcommanddecorator method)": [[124, "nltk.inference.api.TheoremToolCommandDecorator.__init__", false]], "__init__() (nltk.inference.api.theoremtoolthread method)": [[124, "nltk.inference.api.TheoremToolThread.__init__", false]], "__init__() (nltk.inference.discourse.cfgreadingcommand method)": [[125, "nltk.inference.discourse.CfgReadingCommand.__init__", false]], "__init__() (nltk.inference.discourse.discoursetester method)": [[125, "nltk.inference.discourse.DiscourseTester.__init__", false]], "__init__() (nltk.inference.discourse.drtgluereadingcommand method)": [[125, "nltk.inference.discourse.DrtGlueReadingCommand.__init__", false]], "__init__() (nltk.inference.mace.mace method)": [[126, "nltk.inference.mace.Mace.__init__", false]], "__init__() (nltk.inference.mace.macecommand method)": [[126, "nltk.inference.mace.MaceCommand.__init__", false]], "__init__() (nltk.inference.nonmonotonic.predholder method)": [[127, "nltk.inference.nonmonotonic.PredHolder.__init__", false]], "__init__() (nltk.inference.prover9.prover9 method)": [[128, "nltk.inference.prover9.Prover9.__init__", false]], "__init__() (nltk.inference.prover9.prover9command method)": [[128, "nltk.inference.prover9.Prover9Command.__init__", false]], "__init__() (nltk.inference.prover9.prover9exception method)": [[128, "nltk.inference.prover9.Prover9Exception.__init__", false]], "__init__() (nltk.inference.resolution.bindingdict method)": [[129, "nltk.inference.resolution.BindingDict.__init__", false]], "__init__() (nltk.inference.resolution.bindingexception method)": [[129, "nltk.inference.resolution.BindingException.__init__", false]], "__init__() (nltk.inference.resolution.clause method)": [[129, "nltk.inference.resolution.Clause.__init__", false]], "__init__() (nltk.inference.resolution.debugobject method)": [[129, "nltk.inference.resolution.DebugObject.__init__", false]], "__init__() (nltk.inference.resolution.resolutionprovercommand method)": [[129, "nltk.inference.resolution.ResolutionProverCommand.__init__", false]], "__init__() (nltk.inference.resolution.unificationexception method)": [[129, "nltk.inference.resolution.UnificationException.__init__", false]], "__init__() (nltk.inference.tableau.agenda method)": [[130, "nltk.inference.tableau.Agenda.__init__", false]], "__init__() (nltk.inference.tableau.debug method)": [[130, "nltk.inference.tableau.Debug.__init__", false]], "__init__() (nltk.inference.tableau.tableauprovercommand method)": [[130, "nltk.inference.tableau.TableauProverCommand.__init__", false]], "__init__() (nltk.internals.counter method)": [[131, "nltk.internals.Counter.__init__", false]], "__init__() (nltk.internals.elementwrapper method)": [[131, "nltk.internals.ElementWrapper.__init__", false]], "__init__() (nltk.internals.readerror method)": [[131, "nltk.internals.ReadError.__init__", false]], "__init__() (nltk.lazyimport.lazymodule method)": [[134, "nltk.lazyimport.LazyModule.__init__", false]], "__init__() (nltk.lm.absolutediscountinginterpolated method)": [[135, "nltk.lm.AbsoluteDiscountingInterpolated.__init__", false]], "__init__() (nltk.lm.api.languagemodel method)": [[136, "nltk.lm.api.LanguageModel.__init__", false]], "__init__() (nltk.lm.api.smoothing method)": [[136, "nltk.lm.api.Smoothing.__init__", false]], "__init__() (nltk.lm.counter.ngramcounter method)": [[137, "nltk.lm.counter.NgramCounter.__init__", false]], "__init__() (nltk.lm.kneserneyinterpolated method)": [[135, "nltk.lm.KneserNeyInterpolated.__init__", false]], "__init__() (nltk.lm.laplace method)": [[135, "nltk.lm.Laplace.__init__", false]], "__init__() (nltk.lm.lidstone method)": [[135, "nltk.lm.Lidstone.__init__", false]], "__init__() (nltk.lm.models.absolutediscountinginterpolated method)": [[138, "nltk.lm.models.AbsoluteDiscountingInterpolated.__init__", false]], "__init__() (nltk.lm.models.interpolatedlanguagemodel method)": [[138, "nltk.lm.models.InterpolatedLanguageModel.__init__", false]], "__init__() (nltk.lm.models.kneserneyinterpolated method)": [[138, "nltk.lm.models.KneserNeyInterpolated.__init__", false]], "__init__() (nltk.lm.models.laplace method)": [[138, "nltk.lm.models.Laplace.__init__", false]], "__init__() (nltk.lm.models.lidstone method)": [[138, "nltk.lm.models.Lidstone.__init__", false]], "__init__() (nltk.lm.models.stupidbackoff method)": [[138, "nltk.lm.models.StupidBackoff.__init__", false]], "__init__() (nltk.lm.models.wittenbellinterpolated method)": [[138, "nltk.lm.models.WittenBellInterpolated.__init__", false]], "__init__() (nltk.lm.ngramcounter method)": [[135, "nltk.lm.NgramCounter.__init__", false]], "__init__() (nltk.lm.smoothing.absolutediscounting method)": [[140, "nltk.lm.smoothing.AbsoluteDiscounting.__init__", false]], "__init__() (nltk.lm.smoothing.kneserney method)": [[140, "nltk.lm.smoothing.KneserNey.__init__", false]], "__init__() (nltk.lm.smoothing.wittenbell method)": [[140, "nltk.lm.smoothing.WittenBell.__init__", false]], "__init__() (nltk.lm.stupidbackoff method)": [[135, "nltk.lm.StupidBackoff.__init__", false]], "__init__() (nltk.lm.vocabulary method)": [[135, "nltk.lm.Vocabulary.__init__", false]], "__init__() (nltk.lm.vocabulary.vocabulary method)": [[142, "nltk.lm.vocabulary.Vocabulary.__init__", false]], "__init__() (nltk.lm.wittenbellinterpolated method)": [[135, "nltk.lm.WittenBellInterpolated.__init__", false]], "__init__() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.__init__", false]], "__init__() (nltk.metrics.association.contingencymeasures method)": [[146, "nltk.metrics.association.ContingencyMeasures.__init__", false]], "__init__() (nltk.metrics.confusionmatrix.confusionmatrix method)": [[147, "nltk.metrics.confusionmatrix.ConfusionMatrix.__init__", false]], "__init__() (nltk.metrics.paice.paice method)": [[149, "nltk.metrics.paice.Paice.__init__", false]], "__init__() (nltk.misc.minimalset.minimalset method)": [[156, "nltk.misc.minimalset.MinimalSet.__init__", false]], "__init__() (nltk.parse.bllip.bllipparser method)": [[161, "nltk.parse.bllip.BllipParser.__init__", false]], "__init__() (nltk.parse.chart.bottomupchartparser method)": [[162, "nltk.parse.chart.BottomUpChartParser.__init__", false]], "__init__() (nltk.parse.chart.bottomupleftcornerchartparser method)": [[162, "nltk.parse.chart.BottomUpLeftCornerChartParser.__init__", false]], "__init__() (nltk.parse.chart.cachedtopdownpredictrule method)": [[162, "nltk.parse.chart.CachedTopDownPredictRule.__init__", false]], "__init__() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.__init__", false]], "__init__() (nltk.parse.chart.chartparser method)": [[162, "nltk.parse.chart.ChartParser.__init__", false]], "__init__() (nltk.parse.chart.edgei method)": [[162, "nltk.parse.chart.EdgeI.__init__", false]], "__init__() (nltk.parse.chart.leafedge method)": [[162, "nltk.parse.chart.LeafEdge.__init__", false]], "__init__() (nltk.parse.chart.leftcornerchartparser method)": [[162, "nltk.parse.chart.LeftCornerChartParser.__init__", false]], "__init__() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.__init__", false]], "__init__() (nltk.parse.chart.topdownchartparser method)": [[162, "nltk.parse.chart.TopDownChartParser.__init__", false]], "__init__() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.__init__", false]], "__init__() (nltk.parse.corenlp.corenlpserver method)": [[163, "nltk.parse.corenlp.CoreNLPServer.__init__", false]], "__init__() (nltk.parse.corenlp.genericcorenlpparser method)": [[163, "nltk.parse.corenlp.GenericCoreNLPParser.__init__", false]], "__init__() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.__init__", false]], "__init__() (nltk.parse.earleychart.earleychartparser method)": [[165, "nltk.parse.earleychart.EarleyChartParser.__init__", false]], "__init__() (nltk.parse.earleychart.featureearleychartparser method)": [[165, "nltk.parse.earleychart.FeatureEarleyChartParser.__init__", false]], "__init__() (nltk.parse.earleychart.featureincrementalbottomupchartparser method)": [[165, "nltk.parse.earleychart.FeatureIncrementalBottomUpChartParser.__init__", false]], "__init__() (nltk.parse.earleychart.featureincrementalbottomupleftcornerchartparser method)": [[165, "nltk.parse.earleychart.FeatureIncrementalBottomUpLeftCornerChartParser.__init__", false]], "__init__() (nltk.parse.earleychart.featureincrementalchartparser method)": [[165, "nltk.parse.earleychart.FeatureIncrementalChartParser.__init__", false]], "__init__() (nltk.parse.earleychart.featureincrementaltopdownchartparser method)": [[165, "nltk.parse.earleychart.FeatureIncrementalTopDownChartParser.__init__", false]], "__init__() (nltk.parse.earleychart.incrementalbottomupchartparser method)": [[165, "nltk.parse.earleychart.IncrementalBottomUpChartParser.__init__", false]], "__init__() (nltk.parse.earleychart.incrementalbottomupleftcornerchartparser method)": [[165, "nltk.parse.earleychart.IncrementalBottomUpLeftCornerChartParser.__init__", false]], "__init__() (nltk.parse.earleychart.incrementalchartparser method)": [[165, "nltk.parse.earleychart.IncrementalChartParser.__init__", false]], "__init__() (nltk.parse.earleychart.incrementalleftcornerchartparser method)": [[165, "nltk.parse.earleychart.IncrementalLeftCornerChartParser.__init__", false]], "__init__() (nltk.parse.earleychart.incrementaltopdownchartparser method)": [[165, "nltk.parse.earleychart.IncrementalTopDownChartParser.__init__", false]], "__init__() (nltk.parse.evaluate.dependencyevaluator method)": [[166, "nltk.parse.evaluate.DependencyEvaluator.__init__", false]], "__init__() (nltk.parse.featurechart.featurebottomupchartparser method)": [[167, "nltk.parse.featurechart.FeatureBottomUpChartParser.__init__", false]], "__init__() (nltk.parse.featurechart.featurebottomupleftcornerchartparser method)": [[167, "nltk.parse.featurechart.FeatureBottomUpLeftCornerChartParser.__init__", false]], "__init__() (nltk.parse.featurechart.featurechartparser method)": [[167, "nltk.parse.featurechart.FeatureChartParser.__init__", false]], "__init__() (nltk.parse.featurechart.featuretopdownchartparser method)": [[167, "nltk.parse.featurechart.FeatureTopDownChartParser.__init__", false]], "__init__() (nltk.parse.featurechart.featuretreeedge method)": [[167, "nltk.parse.featurechart.FeatureTreeEdge.__init__", false]], "__init__() (nltk.parse.featurechart.instantiatevarschart method)": [[167, "nltk.parse.featurechart.InstantiateVarsChart.__init__", false]], "__init__() (nltk.parse.malt.maltparser method)": [[169, "nltk.parse.malt.MaltParser.__init__", false]], "__init__() (nltk.parse.nonprojectivedependencyparser.dependencyscoreri method)": [[170, "nltk.parse.nonprojectivedependencyparser.DependencyScorerI.__init__", false]], "__init__() (nltk.parse.nonprojectivedependencyparser.naivebayesdependencyscorer method)": [[170, "nltk.parse.nonprojectivedependencyparser.NaiveBayesDependencyScorer.__init__", false]], "__init__() (nltk.parse.nonprojectivedependencyparser.nonprojectivedependencyparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.NonprojectiveDependencyParser.__init__", false]], "__init__() (nltk.parse.nonprojectivedependencyparser.probabilisticnonprojectiveparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser.__init__", false]], "__init__() (nltk.parse.pchart.bottomupprobabilisticchartparser method)": [[171, "nltk.parse.pchart.BottomUpProbabilisticChartParser.__init__", false]], "__init__() (nltk.parse.pchart.probabilistictreeedge method)": [[171, "nltk.parse.pchart.ProbabilisticTreeEdge.__init__", false]], "__init__() (nltk.parse.projectivedependencyparser.chartcell method)": [[172, "nltk.parse.projectivedependencyparser.ChartCell.__init__", false]], "__init__() (nltk.parse.projectivedependencyparser.dependencyspan method)": [[172, "nltk.parse.projectivedependencyparser.DependencySpan.__init__", false]], "__init__() (nltk.parse.projectivedependencyparser.probabilisticprojectivedependencyparser method)": [[172, "nltk.parse.projectivedependencyparser.ProbabilisticProjectiveDependencyParser.__init__", false]], "__init__() (nltk.parse.projectivedependencyparser.projectivedependencyparser method)": [[172, "nltk.parse.projectivedependencyparser.ProjectiveDependencyParser.__init__", false]], "__init__() (nltk.parse.recursivedescent.recursivedescentparser method)": [[173, "nltk.parse.recursivedescent.RecursiveDescentParser.__init__", false]], "__init__() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.__init__", false]], "__init__() (nltk.parse.shiftreduce.shiftreduceparser method)": [[174, "nltk.parse.shiftreduce.ShiftReduceParser.__init__", false]], "__init__() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.__init__", false]], "__init__() (nltk.parse.stanford.genericstanfordparser method)": [[175, "nltk.parse.stanford.GenericStanfordParser.__init__", false]], "__init__() (nltk.parse.stanford.stanforddependencyparser method)": [[175, "nltk.parse.stanford.StanfordDependencyParser.__init__", false]], "__init__() (nltk.parse.stanford.stanfordneuraldependencyparser method)": [[175, "nltk.parse.stanford.StanfordNeuralDependencyParser.__init__", false]], "__init__() (nltk.parse.stanford.stanfordparser method)": [[175, "nltk.parse.stanford.StanfordParser.__init__", false]], "__init__() (nltk.parse.transitionparser.configuration method)": [[176, "nltk.parse.transitionparser.Configuration.__init__", false]], "__init__() (nltk.parse.transitionparser.transition method)": [[176, "nltk.parse.transitionparser.Transition.__init__", false]], "__init__() (nltk.parse.transitionparser.transitionparser method)": [[176, "nltk.parse.transitionparser.TransitionParser.__init__", false]], "__init__() (nltk.parse.util.testgrammar method)": [[177, "nltk.parse.util.TestGrammar.__init__", false]], "__init__() (nltk.parse.viterbi.viterbiparser method)": [[178, "nltk.parse.viterbi.ViterbiParser.__init__", false]], "__init__() (nltk.probability.conditionalfreqdist method)": [[179, "nltk.probability.ConditionalFreqDist.__init__", false]], "__init__() (nltk.probability.conditionalprobdist method)": [[179, "nltk.probability.ConditionalProbDist.__init__", false]], "__init__() (nltk.probability.conditionalprobdisti method)": [[179, "nltk.probability.ConditionalProbDistI.__init__", false]], "__init__() (nltk.probability.crossvalidationprobdist method)": [[179, "nltk.probability.CrossValidationProbDist.__init__", false]], "__init__() (nltk.probability.dictionaryconditionalprobdist method)": [[179, "nltk.probability.DictionaryConditionalProbDist.__init__", false]], "__init__() (nltk.probability.dictionaryprobdist method)": [[179, "nltk.probability.DictionaryProbDist.__init__", false]], "__init__() (nltk.probability.eleprobdist method)": [[179, "nltk.probability.ELEProbDist.__init__", false]], "__init__() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.__init__", false]], "__init__() (nltk.probability.heldoutprobdist method)": [[179, "nltk.probability.HeldoutProbDist.__init__", false]], "__init__() (nltk.probability.kneserneyprobdist method)": [[179, "nltk.probability.KneserNeyProbDist.__init__", false]], "__init__() (nltk.probability.laplaceprobdist method)": [[179, "nltk.probability.LaplaceProbDist.__init__", false]], "__init__() (nltk.probability.lidstoneprobdist method)": [[179, "nltk.probability.LidstoneProbDist.__init__", false]], "__init__() (nltk.probability.mleprobdist method)": [[179, "nltk.probability.MLEProbDist.__init__", false]], "__init__() (nltk.probability.mutableprobdist method)": [[179, "nltk.probability.MutableProbDist.__init__", false]], "__init__() (nltk.probability.probabilisticmixin method)": [[179, "nltk.probability.ProbabilisticMixIn.__init__", false]], "__init__() (nltk.probability.probdisti method)": [[179, "nltk.probability.ProbDistI.__init__", false]], "__init__() (nltk.probability.simplegoodturingprobdist method)": [[179, "nltk.probability.SimpleGoodTuringProbDist.__init__", false]], "__init__() (nltk.probability.uniformprobdist method)": [[179, "nltk.probability.UniformProbDist.__init__", false]], "__init__() (nltk.probability.wittenbellprobdist method)": [[179, "nltk.probability.WittenBellProbDist.__init__", false]], "__init__() (nltk.sem.boxer.boxer method)": [[181, "nltk.sem.boxer.Boxer.__init__", false]], "__init__() (nltk.sem.boxer.boxercard method)": [[181, "nltk.sem.boxer.BoxerCard.__init__", false]], "__init__() (nltk.sem.boxer.boxerdrs method)": [[181, "nltk.sem.boxer.BoxerDrs.__init__", false]], "__init__() (nltk.sem.boxer.boxerdrsparser method)": [[181, "nltk.sem.boxer.BoxerDrsParser.__init__", false]], "__init__() (nltk.sem.boxer.boxereq method)": [[181, "nltk.sem.boxer.BoxerEq.__init__", false]], "__init__() (nltk.sem.boxer.boxerindexed method)": [[181, "nltk.sem.boxer.BoxerIndexed.__init__", false]], "__init__() (nltk.sem.boxer.boxernamed method)": [[181, "nltk.sem.boxer.BoxerNamed.__init__", false]], "__init__() (nltk.sem.boxer.boxernot method)": [[181, "nltk.sem.boxer.BoxerNot.__init__", false]], "__init__() (nltk.sem.boxer.boxeror method)": [[181, "nltk.sem.boxer.BoxerOr.__init__", false]], "__init__() (nltk.sem.boxer.boxeroutputdrsparser method)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser.__init__", false]], "__init__() (nltk.sem.boxer.boxerpred method)": [[181, "nltk.sem.boxer.BoxerPred.__init__", false]], "__init__() (nltk.sem.boxer.boxerprop method)": [[181, "nltk.sem.boxer.BoxerProp.__init__", false]], "__init__() (nltk.sem.boxer.boxerrel method)": [[181, "nltk.sem.boxer.BoxerRel.__init__", false]], "__init__() (nltk.sem.boxer.boxerwhq method)": [[181, "nltk.sem.boxer.BoxerWhq.__init__", false]], "__init__() (nltk.sem.boxer.nltkdrtboxerdrsinterpreter method)": [[181, "nltk.sem.boxer.NltkDrtBoxerDrsInterpreter.__init__", false]], "__init__() (nltk.sem.chat80.concept method)": [[182, "nltk.sem.chat80.Concept.__init__", false]], "__init__() (nltk.sem.cooper_storage.cooperstore method)": [[183, "nltk.sem.cooper_storage.CooperStore.__init__", false]], "__init__() (nltk.sem.drt.drs method)": [[184, "nltk.sem.drt.DRS.__init__", false]], "__init__() (nltk.sem.drt.drsdrawer method)": [[184, "nltk.sem.drt.DrsDrawer.__init__", false]], "__init__() (nltk.sem.drt.drtconcatenation method)": [[184, "nltk.sem.drt.DrtConcatenation.__init__", false]], "__init__() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.__init__", false]], "__init__() (nltk.sem.drt.drtproposition method)": [[184, "nltk.sem.drt.DrtProposition.__init__", false]], "__init__() (nltk.sem.drt_glue_demo.drswidget method)": [[185, "nltk.sem.drt_glue_demo.DrsWidget.__init__", false]], "__init__() (nltk.sem.drt_glue_demo.drtgluedemo method)": [[185, "nltk.sem.drt_glue_demo.DrtGlueDemo.__init__", false]], "__init__() (nltk.sem.evaluate.assignment method)": [[186, "nltk.sem.evaluate.Assignment.__init__", false]], "__init__() (nltk.sem.evaluate.model method)": [[186, "nltk.sem.evaluate.Model.__init__", false]], "__init__() (nltk.sem.evaluate.valuation method)": [[186, "nltk.sem.evaluate.Valuation.__init__", false]], "__init__() (nltk.sem.glue.drtglue method)": [[187, "nltk.sem.glue.DrtGlue.__init__", false]], "__init__() (nltk.sem.glue.drtglueformula method)": [[187, "nltk.sem.glue.DrtGlueFormula.__init__", false]], "__init__() (nltk.sem.glue.glue method)": [[187, "nltk.sem.glue.Glue.__init__", false]], "__init__() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.__init__", false]], "__init__() (nltk.sem.glue.glueformula method)": [[187, "nltk.sem.glue.GlueFormula.__init__", false]], "__init__() (nltk.sem.hole.constraint method)": [[188, "nltk.sem.hole.Constraint.__init__", false]], "__init__() (nltk.sem.hole.holesemantics method)": [[188, "nltk.sem.hole.HoleSemantics.__init__", false]], "__init__() (nltk.sem.linearlogic.applicationexpression method)": [[190, "nltk.sem.linearlogic.ApplicationExpression.__init__", false]], "__init__() (nltk.sem.linearlogic.atomicexpression method)": [[190, "nltk.sem.linearlogic.AtomicExpression.__init__", false]], "__init__() (nltk.sem.linearlogic.bindingdict method)": [[190, "nltk.sem.linearlogic.BindingDict.__init__", false]], "__init__() (nltk.sem.linearlogic.impexpression method)": [[190, "nltk.sem.linearlogic.ImpExpression.__init__", false]], "__init__() (nltk.sem.linearlogic.linearlogicparser method)": [[190, "nltk.sem.linearlogic.LinearLogicParser.__init__", false]], "__init__() (nltk.sem.linearlogic.unificationexception method)": [[190, "nltk.sem.linearlogic.UnificationException.__init__", false]], "__init__() (nltk.sem.logic.abstractvariableexpression method)": [[191, "nltk.sem.logic.AbstractVariableExpression.__init__", false]], "__init__() (nltk.sem.logic.anytype method)": [[191, "nltk.sem.logic.AnyType.__init__", false]], "__init__() (nltk.sem.logic.applicationexpression method)": [[191, "nltk.sem.logic.ApplicationExpression.__init__", false]], "__init__() (nltk.sem.logic.binaryexpression method)": [[191, "nltk.sem.logic.BinaryExpression.__init__", false]], "__init__() (nltk.sem.logic.complextype method)": [[191, "nltk.sem.logic.ComplexType.__init__", false]], "__init__() (nltk.sem.logic.expectedmoretokensexception method)": [[191, "nltk.sem.logic.ExpectedMoreTokensException.__init__", false]], "__init__() (nltk.sem.logic.illegaltypeexception method)": [[191, "nltk.sem.logic.IllegalTypeException.__init__", false]], "__init__() (nltk.sem.logic.inconsistenttypehierarchyexception method)": [[191, "nltk.sem.logic.InconsistentTypeHierarchyException.__init__", false]], "__init__() (nltk.sem.logic.logicalexpressionexception method)": [[191, "nltk.sem.logic.LogicalExpressionException.__init__", false]], "__init__() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.__init__", false]], "__init__() (nltk.sem.logic.negatedexpression method)": [[191, "nltk.sem.logic.NegatedExpression.__init__", false]], "__init__() (nltk.sem.logic.typeexception method)": [[191, "nltk.sem.logic.TypeException.__init__", false]], "__init__() (nltk.sem.logic.typeresolutionexception method)": [[191, "nltk.sem.logic.TypeResolutionException.__init__", false]], "__init__() (nltk.sem.logic.unexpectedtokenexception method)": [[191, "nltk.sem.logic.UnexpectedTokenException.__init__", false]], "__init__() (nltk.sem.logic.variable method)": [[191, "nltk.sem.logic.Variable.__init__", false]], "__init__() (nltk.sem.logic.variablebinderexpression method)": [[191, "nltk.sem.logic.VariableBinderExpression.__init__", false]], "__init__() (nltk.sentiment.sentiment_analyzer.sentimentanalyzer method)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer.__init__", false]], "__init__() (nltk.sentiment.vader.sentimentintensityanalyzer method)": [[198, "nltk.sentiment.vader.SentimentIntensityAnalyzer.__init__", false]], "__init__() (nltk.sentiment.vader.sentitext method)": [[198, "nltk.sentiment.vader.SentiText.__init__", false]], "__init__() (nltk.sentiment.vader.vaderconstants method)": [[198, "nltk.sentiment.vader.VaderConstants.__init__", false]], "__init__() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.__init__", false]], "__init__() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.__init__", false]], "__init__() (nltk.stem.cistem.cistem method)": [[203, "nltk.stem.cistem.Cistem.__init__", false]], "__init__() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.__init__", false]], "__init__() (nltk.stem.lancaster.lancasterstemmer method)": [[205, "nltk.stem.lancaster.LancasterStemmer.__init__", false]], "__init__() (nltk.stem.porter.porterstemmer method)": [[206, "nltk.stem.porter.PorterStemmer.__init__", false]], "__init__() (nltk.stem.regexp.regexpstemmer method)": [[207, "nltk.stem.regexp.RegexpStemmer.__init__", false]], "__init__() (nltk.stem.rslp.rslpstemmer method)": [[208, "nltk.stem.rslp.RSLPStemmer.__init__", false]], "__init__() (nltk.stem.snowball.porterstemmer method)": [[209, "nltk.stem.snowball.PorterStemmer.__init__", false]], "__init__() (nltk.stem.snowball.snowballstemmer method)": [[209, "nltk.stem.snowball.SnowballStemmer.__init__", false]], "__init__() (nltk.tag.brill.brilltagger method)": [[215, "nltk.tag.brill.BrillTagger.__init__", false]], "__init__() (nltk.tag.brill_trainer.brilltaggertrainer method)": [[216, "nltk.tag.brill_trainer.BrillTaggerTrainer.__init__", false]], "__init__() (nltk.tag.crf.crftagger method)": [[217, "nltk.tag.crf.CRFTagger.__init__", false]], "__init__() (nltk.tag.hmm.hiddenmarkovmodeltagger method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.__init__", false]], "__init__() (nltk.tag.hmm.hiddenmarkovmodeltrainer method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTrainer.__init__", false]], "__init__() (nltk.tag.hunpos.hunpostagger method)": [[219, "nltk.tag.hunpos.HunposTagger.__init__", false]], "__init__() (nltk.tag.perceptron.averagedperceptron method)": [[221, "nltk.tag.perceptron.AveragedPerceptron.__init__", false]], "__init__() (nltk.tag.perceptron.perceptrontagger method)": [[221, "nltk.tag.perceptron.PerceptronTagger.__init__", false]], "__init__() (nltk.tag.senna.sennachunktagger method)": [[222, "nltk.tag.senna.SennaChunkTagger.__init__", false]], "__init__() (nltk.tag.senna.sennanertagger method)": [[222, "nltk.tag.senna.SennaNERTagger.__init__", false]], "__init__() (nltk.tag.senna.sennatagger method)": [[222, "nltk.tag.senna.SennaTagger.__init__", false]], "__init__() (nltk.tag.sequential.affixtagger method)": [[223, "nltk.tag.sequential.AffixTagger.__init__", false]], "__init__() (nltk.tag.sequential.bigramtagger method)": [[223, "nltk.tag.sequential.BigramTagger.__init__", false]], "__init__() (nltk.tag.sequential.classifierbasedtagger method)": [[223, "nltk.tag.sequential.ClassifierBasedTagger.__init__", false]], "__init__() (nltk.tag.sequential.contexttagger method)": [[223, "nltk.tag.sequential.ContextTagger.__init__", false]], "__init__() (nltk.tag.sequential.defaulttagger method)": [[223, "nltk.tag.sequential.DefaultTagger.__init__", false]], "__init__() (nltk.tag.sequential.ngramtagger method)": [[223, "nltk.tag.sequential.NgramTagger.__init__", false]], "__init__() (nltk.tag.sequential.regexptagger method)": [[223, "nltk.tag.sequential.RegexpTagger.__init__", false]], "__init__() (nltk.tag.sequential.sequentialbackofftagger method)": [[223, "nltk.tag.sequential.SequentialBackoffTagger.__init__", false]], "__init__() (nltk.tag.sequential.trigramtagger method)": [[223, "nltk.tag.sequential.TrigramTagger.__init__", false]], "__init__() (nltk.tag.sequential.unigramtagger method)": [[223, "nltk.tag.sequential.UnigramTagger.__init__", false]], "__init__() (nltk.tag.stanford.stanfordnertagger method)": [[224, "nltk.tag.stanford.StanfordNERTagger.__init__", false]], "__init__() (nltk.tag.stanford.stanfordpostagger method)": [[224, "nltk.tag.stanford.StanfordPOSTagger.__init__", false]], "__init__() (nltk.tag.stanford.stanfordtagger method)": [[224, "nltk.tag.stanford.StanfordTagger.__init__", false]], "__init__() (nltk.tag.tnt.tnt method)": [[225, "nltk.tag.tnt.TnT.__init__", false]], "__init__() (nltk.tbl.feature.feature method)": [[231, "nltk.tbl.feature.Feature.__init__", false]], "__init__() (nltk.tbl.rule.rule method)": [[232, "nltk.tbl.rule.Rule.__init__", false]], "__init__() (nltk.tbl.rule.tagrule method)": [[232, "nltk.tbl.rule.TagRule.__init__", false]], "__init__() (nltk.tbl.template.template method)": [[233, "nltk.tbl.template.Template.__init__", false]], "__init__() (nltk.text.concordanceindex method)": [[300, "nltk.text.ConcordanceIndex.__init__", false]], "__init__() (nltk.text.contextindex method)": [[300, "nltk.text.ContextIndex.__init__", false]], "__init__() (nltk.text.text method)": [[300, "nltk.text.Text.__init__", false]], "__init__() (nltk.text.textcollection method)": [[300, "nltk.text.TextCollection.__init__", false]], "__init__() (nltk.text.tokensearcher method)": [[300, "nltk.text.TokenSearcher.__init__", false]], "__init__() (nltk.tokenize.casual.tweettokenizer method)": [[304, "nltk.tokenize.casual.TweetTokenizer.__init__", false]], "__init__() (nltk.tokenize.legality_principle.legalitysyllabletokenizer method)": [[306, "nltk.tokenize.legality_principle.LegalitySyllableTokenizer.__init__", false]], "__init__() (nltk.tokenize.mwe.mwetokenizer method)": [[307, "nltk.tokenize.mwe.MWETokenizer.__init__", false]], "__init__() (nltk.tokenize.punkt.punktbaseclass method)": [[309, "nltk.tokenize.punkt.PunktBaseClass.__init__", false]], "__init__() (nltk.tokenize.punkt.punktparameters method)": [[309, "nltk.tokenize.punkt.PunktParameters.__init__", false]], "__init__() (nltk.tokenize.punkt.punktsentencetokenizer method)": [[309, "nltk.tokenize.punkt.PunktSentenceTokenizer.__init__", false]], "__init__() (nltk.tokenize.punkt.punkttoken method)": [[309, "nltk.tokenize.punkt.PunktToken.__init__", false]], "__init__() (nltk.tokenize.punkt.punkttokenizer method)": [[309, "nltk.tokenize.punkt.PunktTokenizer.__init__", false]], "__init__() (nltk.tokenize.punkt.punkttrainer method)": [[309, "nltk.tokenize.punkt.PunktTrainer.__init__", false]], "__init__() (nltk.tokenize.regexp.blanklinetokenizer method)": [[310, "nltk.tokenize.regexp.BlanklineTokenizer.__init__", false]], "__init__() (nltk.tokenize.regexp.regexptokenizer method)": [[310, "nltk.tokenize.regexp.RegexpTokenizer.__init__", false]], "__init__() (nltk.tokenize.regexp.whitespacetokenizer method)": [[310, "nltk.tokenize.regexp.WhitespaceTokenizer.__init__", false]], "__init__() (nltk.tokenize.regexp.wordpuncttokenizer method)": [[310, "nltk.tokenize.regexp.WordPunctTokenizer.__init__", false]], "__init__() (nltk.tokenize.repp.repptokenizer method)": [[311, "nltk.tokenize.repp.ReppTokenizer.__init__", false]], "__init__() (nltk.tokenize.sexpr.sexprtokenizer method)": [[312, "nltk.tokenize.sexpr.SExprTokenizer.__init__", false]], "__init__() (nltk.tokenize.simple.linetokenizer method)": [[313, "nltk.tokenize.simple.LineTokenizer.__init__", false]], "__init__() (nltk.tokenize.sonority_sequencing.syllabletokenizer method)": [[314, "nltk.tokenize.sonority_sequencing.SyllableTokenizer.__init__", false]], "__init__() (nltk.tokenize.stanford.stanfordtokenizer method)": [[315, "nltk.tokenize.stanford.StanfordTokenizer.__init__", false]], "__init__() (nltk.tokenize.stanford_segmenter.stanfordsegmenter method)": [[316, "nltk.tokenize.stanford_segmenter.StanfordSegmenter.__init__", false]], "__init__() (nltk.tokenize.texttiling.texttilingtokenizer method)": [[317, "nltk.tokenize.texttiling.TextTilingTokenizer.__init__", false]], "__init__() (nltk.tokenize.texttiling.tokensequence method)": [[317, "nltk.tokenize.texttiling.TokenSequence.__init__", false]], "__init__() (nltk.tokenize.texttiling.tokentablefield method)": [[317, "nltk.tokenize.texttiling.TokenTableField.__init__", false]], "__init__() (nltk.toolbox.standardformat method)": [[321, "nltk.toolbox.StandardFormat.__init__", false]], "__init__() (nltk.toolbox.toolboxsettings method)": [[321, "nltk.toolbox.ToolboxSettings.__init__", false]], "__init__() (nltk.translate.api.alignedsent method)": [[323, "nltk.translate.api.AlignedSent.__init__", false]], "__init__() (nltk.translate.api.phrasetable method)": [[323, "nltk.translate.api.PhraseTable.__init__", false]], "__init__() (nltk.translate.bleu_score.smoothingfunction method)": [[324, "nltk.translate.bleu_score.SmoothingFunction.__init__", false]], "__init__() (nltk.translate.ibm1.ibmmodel1 method)": [[329, "nltk.translate.ibm1.IBMModel1.__init__", false]], "__init__() (nltk.translate.ibm2.ibmmodel2 method)": [[330, "nltk.translate.ibm2.IBMModel2.__init__", false]], "__init__() (nltk.translate.ibm2.model2counts method)": [[330, "nltk.translate.ibm2.Model2Counts.__init__", false]], "__init__() (nltk.translate.ibm3.ibmmodel3 method)": [[331, "nltk.translate.ibm3.IBMModel3.__init__", false]], "__init__() (nltk.translate.ibm3.model3counts method)": [[331, "nltk.translate.ibm3.Model3Counts.__init__", false]], "__init__() (nltk.translate.ibm4.ibmmodel4 method)": [[332, "nltk.translate.ibm4.IBMModel4.__init__", false]], "__init__() (nltk.translate.ibm4.model4counts method)": [[332, "nltk.translate.ibm4.Model4Counts.__init__", false]], "__init__() (nltk.translate.ibm5.ibmmodel5 method)": [[333, "nltk.translate.ibm5.IBMModel5.__init__", false]], "__init__() (nltk.translate.ibm5.model5counts method)": [[333, "nltk.translate.ibm5.Model5Counts.__init__", false]], "__init__() (nltk.translate.ibm5.slots method)": [[333, "nltk.translate.ibm5.Slots.__init__", false]], "__init__() (nltk.translate.ibm_model.alignmentinfo method)": [[334, "nltk.translate.ibm_model.AlignmentInfo.__init__", false]], "__init__() (nltk.translate.ibm_model.counts method)": [[334, "nltk.translate.ibm_model.Counts.__init__", false]], "__init__() (nltk.translate.ibm_model.ibmmodel method)": [[334, "nltk.translate.ibm_model.IBMModel.__init__", false]], "__init__() (nltk.translate.stack_decoder.stackdecoder method)": [[340, "nltk.translate.stack_decoder.StackDecoder.__init__", false]], "__init__() (nltk.tree.immutable.immutableprobabilistictree method)": [[342, "nltk.tree.immutable.ImmutableProbabilisticTree.__init__", false]], "__init__() (nltk.tree.immutable.immutabletree method)": [[342, "nltk.tree.immutable.ImmutableTree.__init__", false]], "__init__() (nltk.tree.immutableprobabilistictree method)": [[341, "nltk.tree.ImmutableProbabilisticTree.__init__", false]], "__init__() (nltk.tree.immutabletree method)": [[341, "nltk.tree.ImmutableTree.__init__", false]], "__init__() (nltk.tree.multiparentedtree method)": [[341, "nltk.tree.MultiParentedTree.__init__", false]], "__init__() (nltk.tree.parented.multiparentedtree method)": [[343, "nltk.tree.parented.MultiParentedTree.__init__", false]], "__init__() (nltk.tree.parented.parentedtree method)": [[343, "nltk.tree.parented.ParentedTree.__init__", false]], "__init__() (nltk.tree.parentedtree method)": [[341, "nltk.tree.ParentedTree.__init__", false]], "__init__() (nltk.tree.prettyprinter.treeprettyprinter method)": [[345, "nltk.tree.prettyprinter.TreePrettyPrinter.__init__", false]], "__init__() (nltk.tree.probabilistic.probabilistictree method)": [[346, "nltk.tree.probabilistic.ProbabilisticTree.__init__", false]], "__init__() (nltk.tree.probabilistictree method)": [[341, "nltk.tree.ProbabilisticTree.__init__", false]], "__init__() (nltk.tree.tree method)": [[341, "nltk.tree.Tree.__init__", false]], "__init__() (nltk.tree.tree.tree method)": [[348, "nltk.tree.tree.Tree.__init__", false]], "__init__() (nltk.tree.treeprettyprinter method)": [[341, "nltk.tree.TreePrettyPrinter.__init__", false]], "__init__() (nltk.twitter.api.basictweethandler method)": [[352, "nltk.twitter.api.BasicTweetHandler.__init__", false]], "__init__() (nltk.twitter.api.tweethandleri method)": [[352, "nltk.twitter.api.TweetHandlerI.__init__", false]], "__init__() (nltk.twitter.twitterclient.query method)": [[355, "nltk.twitter.twitterclient.Query.__init__", false]], "__init__() (nltk.twitter.twitterclient.streamer method)": [[355, "nltk.twitter.twitterclient.Streamer.__init__", false]], "__init__() (nltk.twitter.twitterclient.tweetwriter method)": [[355, "nltk.twitter.twitterclient.TweetWriter.__init__", false]], "__init__() (nltk.twitter.twitterclient.twitter method)": [[355, "nltk.twitter.twitterclient.Twitter.__init__", false]], "__init__() (nltk.twitter.util.authenticate method)": [[356, "nltk.twitter.util.Authenticate.__init__", false]], "__init__() (nltk.util.index method)": [[357, "nltk.util.Index.__init__", false]], "__new__() (nltk.collections.lazysubsequence static method)": [[52, "nltk.collections.LazySubsequence.__new__", false]], "__new__() (nltk.corpus.reader.markdown.image static method)": [[78, "nltk.corpus.reader.markdown.Image.__new__", false]], "__new__() (nltk.corpus.reader.markdown.link static method)": [[78, "nltk.corpus.reader.markdown.Link.__new__", false]], "__new__() (nltk.corpus.reader.markdown.list static method)": [[78, "nltk.corpus.reader.markdown.List.__new__", false]], "__new__() (nltk.corpus.reader.panlex_swadesh.panlexlanguage static method)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexLanguage.__new__", false]], "__new__() (nltk.featstruct.featstruct static method)": [[120, "nltk.featstruct.FeatStruct.__new__", false]], "__new__() (nltk.internals.deprecated static method)": [[131, "nltk.internals.Deprecated.__new__", false]], "__new__() (nltk.internals.elementwrapper static method)": [[131, "nltk.internals.ElementWrapper.__new__", false]], "__new__() (nltk.translate.api.alignment static method)": [[323, "nltk.translate.api.Alignment.__new__", false]], "__new__() (nltk.translate.api.phrasetableentry static method)": [[323, "nltk.translate.api.PhraseTableEntry.__new__", false]], "__new__() (nltk.translate.bleu_score.fraction static method)": [[324, "nltk.translate.bleu_score.Fraction.__new__", false]], "abbr (nltk.tokenize.punkt.punkttoken attribute)": [[309, "nltk.tokenize.punkt.PunktToken.abbr", false]], "abbrev (nltk.tokenize.punkt.punkttrainer attribute)": [[309, "nltk.tokenize.punkt.PunktTrainer.ABBREV", false]], "abbrev_backoff (nltk.tokenize.punkt.punkttrainer attribute)": [[309, "nltk.tokenize.punkt.PunktTrainer.ABBREV_BACKOFF", false]], "abbrev_types (nltk.tokenize.punkt.punktparameters attribute)": [[309, "nltk.tokenize.punkt.PunktParameters.abbrev_types", false]], "about() (nltk.downloader.downloadergui method)": [[113, "nltk.downloader.DownloaderGUI.about", false]], "about() (nltk.sem.drt_glue_demo.drtgluedemo method)": [[185, "nltk.sem.drt_glue_demo.DrtGlueDemo.about", false]], "absolute_discounting_trigram_model() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.absolute_discounting_trigram_model", false]], "absolutediscounting (class in nltk.lm.smoothing)": [[140, "nltk.lm.smoothing.AbsoluteDiscounting", false]], "absolutediscountinginterpolated (class in nltk.lm)": [[135, "nltk.lm.AbsoluteDiscountingInterpolated", false]], "absolutediscountinginterpolated (class in nltk.lm.models)": [[138, "nltk.lm.models.AbsoluteDiscountingInterpolated", false]], "abspath() (nltk.corpus.reader.api.corpusreader method)": [[59, "nltk.corpus.reader.api.CorpusReader.abspath", false]], "abspath() (nltk.corpus.reader.corpusreader method)": [[57, "nltk.corpus.reader.CorpusReader.abspath", false]], "abspaths() (nltk.corpus.reader.api.corpusreader method)": [[59, "nltk.corpus.reader.api.CorpusReader.abspaths", false]], "abspaths() (nltk.corpus.reader.corpusreader method)": [[57, "nltk.corpus.reader.CorpusReader.abspaths", false]], "abstractboxerdrs (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.AbstractBoxerDrs", false]], "abstractccgcategory (class in nltk.ccg.api)": [[13, "nltk.ccg.api.AbstractCCGCategory", false]], "abstractchartrule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.AbstractChartRule", false]], "abstractcontainerwidget (class in nltk.draw.util)": [[119, "nltk.draw.util.AbstractContainerWidget", false]], "abstractlazysequence (class in nltk.collections)": [[52, "nltk.collections.AbstractLazySequence", false]], "abstractvariableexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.AbstractVariableExpression", false]], "accuracy() (in module nltk.chunk.util)": [[29, "nltk.chunk.util.accuracy", false]], "accuracy() (in module nltk.classify.util)": [[43, "nltk.classify.util.accuracy", false]], "accuracy() (in module nltk.metrics.scores)": [[150, "nltk.metrics.scores.accuracy", false]], "accuracy() (nltk.chunk.api.chunkparseri method)": [[26, "nltk.chunk.api.ChunkParserI.accuracy", false]], "accuracy() (nltk.chunk.util.chunkscore method)": [[29, "nltk.chunk.util.ChunkScore.accuracy", false]], "accuracy() (nltk.tag.api.taggeri method)": [[214, "nltk.tag.api.TaggerI.accuracy", false]], "activate() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.activate", false]], "active (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.ACTIVE", false]], "acyclic_branches_depth_first() (in module nltk.util)": [[357, "nltk.util.acyclic_branches_depth_first", false]], "acyclic_breadth_first() (in module nltk.util)": [[357, "nltk.util.acyclic_breadth_first", false]], "acyclic_depth_first() (in module nltk.util)": [[357, "nltk.util.acyclic_depth_first", false]], "acyclic_dic2tree() (in module nltk.util)": [[357, "nltk.util.acyclic_dic2tree", false]], "acyclic_tree() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.acyclic_tree", false]], "add() (nltk.draw.util.mutableoptionmenu method)": [[119, "nltk.draw.util.MutableOptionMenu.add", false]], "add() (nltk.misc.minimalset.minimalset method)": [[156, "nltk.misc.minimalset.MinimalSet.add", false]], "add() (nltk.parse.projectivedependencyparser.chartcell method)": [[172, "nltk.parse.projectivedependencyparser.ChartCell.add", false]], "add() (nltk.sem.evaluate.assignment method)": [[186, "nltk.sem.evaluate.Assignment.add", false]], "add() (nltk.translate.api.phrasetable method)": [[323, "nltk.translate.api.PhraseTable.add", false]], "add_access_token() (in module nltk.twitter.util)": [[356, "nltk.twitter.util.add_access_token", false]], "add_arc() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.add_arc", false]], "add_assumptions() (nltk.inference.api.basetheoremtoolcommand method)": [[124, "nltk.inference.api.BaseTheoremToolCommand.add_assumptions", false]], "add_assumptions() (nltk.inference.api.theoremtoolcommand method)": [[124, "nltk.inference.api.TheoremToolCommand.add_assumptions", false]], "add_assumptions() (nltk.inference.api.theoremtoolcommanddecorator method)": [[124, "nltk.inference.api.TheoremToolCommandDecorator.add_assumptions", false]], "add_background() (nltk.inference.discourse.discoursetester method)": [[125, "nltk.inference.discourse.DiscourseTester.add_background", false]], "add_blank_lines() (in module nltk.toolbox)": [[321, "nltk.toolbox.add_blank_lines", false]], "add_callback() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.add_callback", false]], "add_child() (nltk.draw.util.scrollwatcherwidget method)": [[119, "nltk.draw.util.ScrollWatcherWidget.add_child", false]], "add_default_fields() (in module nltk.toolbox)": [[321, "nltk.toolbox.add_default_fields", false]], "add_exomw() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.add_exomw", false]], "add_exomw() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.add_exomw", false]], "add_feat_extractor() (nltk.sentiment.sentiment_analyzer.sentimentanalyzer method)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer.add_feat_extractor", false]], "add_line() (nltk.corpus.reader.reviews.review method)": [[91, "nltk.corpus.reader.reviews.Review.add_line", false]], "add_logs() (in module nltk.probability)": [[179, "nltk.probability.add_logs", false]], "add_missing_dependencies() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.add_missing_dependencies", false]], "add_mwe() (nltk.tokenize.mwe.mwetokenizer method)": [[307, "nltk.tokenize.mwe.MWETokenizer.add_mwe", false]], "add_node() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.add_node", false]], "add_omw() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.add_omw", false]], "add_omw() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.add_omw", false]], "add_ortho_context() (nltk.tokenize.punkt.punktparameters method)": [[309, "nltk.tokenize.punkt.PunktParameters.add_ortho_context", false]], "add_provs() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.add_provs", false]], "add_provs() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.add_provs", false]], "add_py3_data() (in module nltk.compat)": [[54, "nltk.compat.add_py3_data", false]], "add_root() (nltk.corpus.reader.nkjp.nkjpcorpusreader method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.add_root", false]], "add_root() (nltk.corpus.reader.nkjpcorpusreader method)": [[57, "nltk.corpus.reader.NKJPCorpusReader.add_root", false]], "add_sentence() (nltk.inference.discourse.discoursetester method)": [[125, "nltk.inference.discourse.DiscourseTester.add_sentence", false]], "add_widget() (nltk.draw.util.canvasframe method)": [[119, "nltk.draw.util.CanvasFrame.add_widget", false]], "additional_tests() (in module nltk.test.all)": [[235, "nltk.test.all.additional_tests", false]], "adj (nltk.corpus.reader.wordnet.wordnetcorpusreader attribute)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.ADJ", false]], "adj (nltk.corpus.reader.wordnetcorpusreader attribute)": [[57, "nltk.corpus.reader.WordNetCorpusReader.ADJ", false]], "adj_sat (nltk.corpus.reader.wordnet.wordnetcorpusreader attribute)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.ADJ_SAT", false]], "adj_sat (nltk.corpus.reader.wordnetcorpusreader attribute)": [[57, "nltk.corpus.reader.WordNetCorpusReader.ADJ_SAT", false]], "adjective() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.adjective", false]], "adv (nltk.corpus.reader.wordnet.wordnetcorpusreader attribute)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.ADV", false]], "adv (nltk.corpus.reader.wordnetcorpusreader attribute)": [[57, "nltk.corpus.reader.WordNetCorpusReader.ADV", false]], "ae_kappa() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.Ae_kappa", false]], "affixtagger (class in nltk.tag.sequential)": [[223, "nltk.tag.sequential.AffixTagger", false]], "age() (nltk.corpus.reader.childes.childescorpusreader method)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.age", false]], "age() (nltk.corpus.reader.childescorpusreader method)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.age", false]], "agenda (class in nltk.inference.tableau)": [[130, "nltk.inference.tableau.Agenda", false]], "agr() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.agr", false]], "algorithms (nltk.classify.maxent.maxentclassifier attribute)": [[33, "nltk.classify.maxent.MaxentClassifier.ALGORITHMS", false]], "align() (in module nltk.metrics.aline)": [[145, "nltk.metrics.aline.align", false]], "align() (nltk.translate.ibm1.ibmmodel1 method)": [[329, "nltk.translate.ibm1.IBMModel1.align", false]], "align() (nltk.translate.ibm2.ibmmodel2 method)": [[330, "nltk.translate.ibm2.IBMModel2.align", false]], "align_all() (nltk.translate.ibm1.ibmmodel1 method)": [[329, "nltk.translate.ibm1.IBMModel1.align_all", false]], "align_all() (nltk.translate.ibm2.ibmmodel2 method)": [[330, "nltk.translate.ibm2.IBMModel2.align_all", false]], "align_blocks() (in module nltk.translate.gale_church)": [[326, "nltk.translate.gale_church.align_blocks", false]], "align_log_prob() (in module nltk.translate.gale_church)": [[326, "nltk.translate.gale_church.align_log_prob", false]], "align_texts() (in module nltk.translate.gale_church)": [[326, "nltk.translate.gale_church.align_texts", false]], "align_tokens() (in module nltk.tokenize.util)": [[320, "nltk.tokenize.util.align_tokens", false]], "align_words() (in module nltk.translate.meteor_score)": [[335, "nltk.translate.meteor_score.align_words", false]], "aligned_sents() (nltk.corpus.reader.aligned.alignedcorpusreader method)": [[58, "nltk.corpus.reader.aligned.AlignedCorpusReader.aligned_sents", false]], "aligned_sents() (nltk.corpus.reader.alignedcorpusreader method)": [[57, "nltk.corpus.reader.AlignedCorpusReader.aligned_sents", false]], "alignedcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.AlignedCorpusReader", false]], "alignedcorpusreader (class in nltk.corpus.reader.aligned)": [[58, "nltk.corpus.reader.aligned.AlignedCorpusReader", false]], "alignedsent (class in nltk.translate.api)": [[323, "nltk.translate.api.AlignedSent", false]], "alignedsentcorpusview (class in nltk.corpus.reader.aligned)": [[58, "nltk.corpus.reader.aligned.AlignedSentCorpusView", false]], "alignment (class in nltk.translate.api)": [[323, "nltk.translate.api.Alignment", false]], "alignment (nltk.translate.api.alignedsent property)": [[323, "nltk.translate.api.AlignedSent.alignment", false]], "alignment (nltk.translate.ibm_model.alignmentinfo attribute)": [[334, "nltk.translate.ibm_model.AlignmentInfo.alignment", false]], "alignment_error_rate() (in module nltk.translate.metrics)": [[336, "nltk.translate.metrics.alignment_error_rate", false]], "alignmentinfo (class in nltk.translate.ibm_model)": [[334, "nltk.translate.ibm_model.AlignmentInfo", false]], "all (in module nltk.twitter.twitter_demo)": [[354, "nltk.twitter.twitter_demo.ALL", false]], "all (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.ALL", false]], "all (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.ALL", false]], "all (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.ALL", false]], "all_eng_synsets() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.all_eng_synsets", false]], "all_eng_synsets() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.all_eng_synsets", false]], "all_lemma_names() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.all_lemma_names", false]], "all_lemma_names() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.all_lemma_names", false]], "all_list (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.ALL_LIST", false]], "all_omw_synsets() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.all_omw_synsets", false]], "all_omw_synsets() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.all_omw_synsets", false]], "all_senti_synsets() (nltk.corpus.reader.sentiwordnet.sentiwordnetcorpusreader method)": [[95, "nltk.corpus.reader.sentiwordnet.SentiWordNetCorpusReader.all_senti_synsets", false]], "all_senti_synsets() (nltk.corpus.reader.sentiwordnetcorpusreader method)": [[57, "nltk.corpus.reader.SentiWordNetCorpusReader.all_senti_synsets", false]], "all_synsets() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.all_synsets", false]], "all_synsets() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.all_synsets", false]], "all_words() (nltk.sentiment.sentiment_analyzer.sentimentanalyzer method)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer.all_words", false]], "allcap_differential() (nltk.sentiment.vader.sentitext method)": [[198, "nltk.sentiment.vader.SentiText.allcap_differential", false]], "allexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.AllExpression", false]], "alltemplates (nltk.tbl.template.template attribute)": [[233, "nltk.tbl.template.Template.ALLTEMPLATES", false]], "alpha() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.alpha", false]], "alpha_convert() (nltk.sem.drt.drtlambdaexpression method)": [[184, "nltk.sem.drt.DrtLambdaExpression.alpha_convert", false]], "alpha_convert() (nltk.sem.logic.variablebinderexpression method)": [[191, "nltk.sem.logic.VariableBinderExpression.alpha_convert", false]], "alpha_gamma() (nltk.lm.api.smoothing method)": [[136, "nltk.lm.api.Smoothing.alpha_gamma", false]], "alpha_gamma() (nltk.lm.smoothing.absolutediscounting method)": [[140, "nltk.lm.smoothing.AbsoluteDiscounting.alpha_gamma", false]], "alpha_gamma() (nltk.lm.smoothing.kneserney method)": [[140, "nltk.lm.smoothing.KneserNey.alpha_gamma", false]], "alpha_gamma() (nltk.lm.smoothing.wittenbell method)": [[140, "nltk.lm.smoothing.WittenBell.alpha_gamma", false]], "alpinocorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.AlpinoCorpusReader", false]], "alpinocorpusreader (class in nltk.corpus.reader.bracket_parse)": [[62, "nltk.corpus.reader.bracket_parse.AlpinoCorpusReader", false]], "ampercent (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.AMPERCENT", false]], "anaphoraresolutionexception": [[184, "nltk.sem.drt.AnaphoraResolutionException", false]], "ancestors() (in module nltk.tgrep)": [[301, "nltk.tgrep.ancestors", false]], "and (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.AND", false]], "and (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.AND", false]], "and (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.AND", false]], "and_list (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.AND_LIST", false]], "andexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.AndExpression", false]], "annotations() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.annotations", false]], "annotations() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.annotations", false]], "annotationtask (class in nltk.metrics.agreement)": [[144, "nltk.metrics.agreement.AnnotationTask", false]], "answer_key (nltk.inference.resolution.resolutionprover attribute)": [[129, "nltk.inference.resolution.ResolutionProver.ANSWER_KEY", false]], "antonyms() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.antonyms", false]], "anytype (class in nltk.sem.logic)": [[191, "nltk.sem.logic.AnyType", false]], "ao() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.Ao", false]], "api_call() (nltk.parse.corenlp.genericcorenlpparser method)": [[163, "nltk.parse.corenlp.GenericCoreNLPParser.api_call", false]], "app (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.APP", false]], "app() (in module nltk.app.chartparser_app)": [[2, "nltk.app.chartparser_app.app", false]], "app() (in module nltk.app.chunkparser_app)": [[3, "nltk.app.chunkparser_app.app", false]], "app() (in module nltk.app.collocations_app)": [[4, "nltk.app.collocations_app.app", false]], "app() (in module nltk.app.concordance_app)": [[5, "nltk.app.concordance_app.app", false]], "app() (in module nltk.app.nemo_app)": [[6, "nltk.app.nemo_app.app", false]], "app() (in module nltk.app.rdparser_app)": [[7, "nltk.app.rdparser_app.app", false]], "app() (in module nltk.app.srparser_app)": [[8, "nltk.app.srparser_app.app", false]], "app() (in module nltk.app.wordnet_app)": [[10, "nltk.app.wordnet_app.app", false]], "append() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.append", false]], "append() (nltk.featstruct.featlist method)": [[120, "nltk.featstruct.FeatList.append", false]], "append() (nltk.tree.immutable.immutabletree method)": [[342, "nltk.tree.immutable.ImmutableTree.append", false]], "append() (nltk.tree.immutabletree method)": [[341, "nltk.tree.ImmutableTree.append", false]], "append_prop() (nltk.inference.nonmonotonic.predholder method)": [[127, "nltk.inference.nonmonotonic.PredHolder.append_prop", false]], "append_sig() (nltk.inference.nonmonotonic.predholder method)": [[127, "nltk.inference.nonmonotonic.PredHolder.append_sig", false]], "applicable_rules() (nltk.tbl.template.brilltemplatei method)": [[233, "nltk.tbl.template.BrillTemplateI.applicable_rules", false]], "applicable_rules() (nltk.tbl.template.template method)": [[233, "nltk.tbl.template.Template.applicable_rules", false]], "applicationexpression (class in nltk.sem.linearlogic)": [[190, "nltk.sem.linearlogic.ApplicationExpression", false]], "applicationexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.ApplicationExpression", false]], "applies() (nltk.tbl.rule.rule method)": [[232, "nltk.tbl.rule.Rule.applies", false]], "applies() (nltk.tbl.rule.tagrule method)": [[232, "nltk.tbl.rule.TagRule.applies", false]], "apply() (nltk.ccg.chart.backwardtyperaiserule method)": [[14, "nltk.ccg.chart.BackwardTypeRaiseRule.apply", false]], "apply() (nltk.ccg.chart.binarycombinatorrule method)": [[14, "nltk.ccg.chart.BinaryCombinatorRule.apply", false]], "apply() (nltk.ccg.chart.forwardtyperaiserule method)": [[14, "nltk.ccg.chart.ForwardTypeRaiseRule.apply", false]], "apply() (nltk.chunk.regexp.regexpchunkrule method)": [[28, "nltk.chunk.regexp.RegexpChunkRule.apply", false]], "apply() (nltk.parse.chart.abstractchartrule method)": [[162, "nltk.parse.chart.AbstractChartRule.apply", false]], "apply() (nltk.parse.chart.bottomuppredictcombinerule method)": [[162, "nltk.parse.chart.BottomUpPredictCombineRule.apply", false]], "apply() (nltk.parse.chart.bottomuppredictrule method)": [[162, "nltk.parse.chart.BottomUpPredictRule.apply", false]], "apply() (nltk.parse.chart.cachedtopdownpredictrule method)": [[162, "nltk.parse.chart.CachedTopDownPredictRule.apply", false]], "apply() (nltk.parse.chart.chartrulei method)": [[162, "nltk.parse.chart.ChartRuleI.apply", false]], "apply() (nltk.parse.chart.emptypredictrule method)": [[162, "nltk.parse.chart.EmptyPredictRule.apply", false]], "apply() (nltk.parse.chart.filteredbottomuppredictcombinerule method)": [[162, "nltk.parse.chart.FilteredBottomUpPredictCombineRule.apply", false]], "apply() (nltk.parse.chart.fundamentalrule method)": [[162, "nltk.parse.chart.FundamentalRule.apply", false]], "apply() (nltk.parse.chart.leafinitrule method)": [[162, "nltk.parse.chart.LeafInitRule.apply", false]], "apply() (nltk.parse.chart.singleedgefundamentalrule method)": [[162, "nltk.parse.chart.SingleEdgeFundamentalRule.apply", false]], "apply() (nltk.parse.chart.topdowninitrule method)": [[162, "nltk.parse.chart.TopDownInitRule.apply", false]], "apply() (nltk.parse.chart.topdownpredictrule method)": [[162, "nltk.parse.chart.TopDownPredictRule.apply", false]], "apply() (nltk.parse.earleychart.completerrule method)": [[165, "nltk.parse.earleychart.CompleterRule.apply", false]], "apply() (nltk.parse.earleychart.filteredcompletefundamentalrule method)": [[165, "nltk.parse.earleychart.FilteredCompleteFundamentalRule.apply", false]], "apply() (nltk.parse.earleychart.scannerrule method)": [[165, "nltk.parse.earleychart.ScannerRule.apply", false]], "apply() (nltk.parse.featurechart.featurebottomuppredictcombinerule method)": [[167, "nltk.parse.featurechart.FeatureBottomUpPredictCombineRule.apply", false]], "apply() (nltk.parse.featurechart.featurebottomuppredictrule method)": [[167, "nltk.parse.featurechart.FeatureBottomUpPredictRule.apply", false]], "apply() (nltk.parse.featurechart.featureemptypredictrule method)": [[167, "nltk.parse.featurechart.FeatureEmptyPredictRule.apply", false]], "apply() (nltk.parse.featurechart.featurefundamentalrule method)": [[167, "nltk.parse.featurechart.FeatureFundamentalRule.apply", false]], "apply() (nltk.parse.featurechart.featuretopdowninitrule method)": [[167, "nltk.parse.featurechart.FeatureTopDownInitRule.apply", false]], "apply() (nltk.parse.featurechart.featuretopdownpredictrule method)": [[167, "nltk.parse.featurechart.FeatureTopDownPredictRule.apply", false]], "apply() (nltk.parse.pchart.probabilisticbottomupinitrule method)": [[171, "nltk.parse.pchart.ProbabilisticBottomUpInitRule.apply", false]], "apply() (nltk.parse.pchart.probabilisticbottomuppredictrule method)": [[171, "nltk.parse.pchart.ProbabilisticBottomUpPredictRule.apply", false]], "apply() (nltk.parse.pchart.probabilisticfundamentalrule method)": [[171, "nltk.parse.pchart.ProbabilisticFundamentalRule.apply", false]], "apply() (nltk.parse.pchart.singleedgeprobabilisticfundamentalrule method)": [[171, "nltk.parse.pchart.SingleEdgeProbabilisticFundamentalRule.apply", false]], "apply() (nltk.tbl.rule.tagrule method)": [[232, "nltk.tbl.rule.TagRule.apply", false]], "apply_everywhere() (nltk.parse.chart.abstractchartrule method)": [[162, "nltk.parse.chart.AbstractChartRule.apply_everywhere", false]], "apply_everywhere() (nltk.parse.chart.chartrulei method)": [[162, "nltk.parse.chart.ChartRuleI.apply_everywhere", false]], "apply_features() (in module nltk.classify.util)": [[43, "nltk.classify.util.apply_features", false]], "apply_features() (nltk.sentiment.sentiment_analyzer.sentimentanalyzer method)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer.apply_features", false]], "apply_rule() (nltk.stem.rslp.rslpstemmer method)": [[208, "nltk.stem.rslp.RSLPStemmer.apply_rule", false]], "applyto() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.applyto", false]], "applyto() (nltk.sem.glue.glueformula method)": [[187, "nltk.sem.glue.GlueFormula.applyto", false]], "applyto() (nltk.sem.linearlogic.expression method)": [[190, "nltk.sem.linearlogic.Expression.applyto", false]], "applyto() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.applyto", false]], "approxrand() (in module nltk.metrics.scores)": [[150, "nltk.metrics.scores.approxrand", false]], "arabicstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.ArabicStemmer", false]], "arc_eager (nltk.parse.transitionparser.transitionparser attribute)": [[176, "nltk.parse.transitionparser.TransitionParser.ARC_EAGER", false]], "arc_standard (nltk.parse.transitionparser.transitionparser attribute)": [[176, "nltk.parse.transitionparser.TransitionParser.ARC_STANDARD", false]], "arff_formatter (class in nltk.classify.weka)": [[44, "nltk.classify.weka.ARFF_Formatter", false]], "arg() (nltk.ccg.api.functionalcategory method)": [[13, "nltk.ccg.api.FunctionalCategory.arg", false]], "args (nltk.sem.logic.applicationexpression property)": [[191, "nltk.sem.logic.ApplicationExpression.args", false]], "arguments (nltk.corpus.reader.conll.conllsrlinstance attribute)": [[69, "nltk.corpus.reader.conll.ConllSRLInstance.arguments", false]], "arguments (nltk.corpus.reader.nombank.nombankinstance attribute)": [[81, "nltk.corpus.reader.nombank.NombankInstance.arguments", false]], "arguments (nltk.corpus.reader.propbank.propbankinstance attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.arguments", false]], "arity() (in module nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.arity", false]], "arity_parse_demo() (in module nltk.parse.projectivedependencyparser)": [[172, "nltk.parse.projectivedependencyparser.arity_parse_demo", false]], "arlstem (class in nltk.stem.arlstem)": [[201, "nltk.stem.arlstem.ARLSTem", false]], "arlstem2 (class in nltk.stem.arlstem2)": [[202, "nltk.stem.arlstem2.ARLSTem2", false]], "arrow (nltk.draw.cfg.cfgeditor attribute)": [[115, "nltk.draw.cfg.CFGEditor.ARROW", false]], "arrow (nltk.draw.cfg.productionlist attribute)": [[115, "nltk.draw.cfg.ProductionList.ARROW", false]], "assert_classifier_correct() (in module nltk.test.unit.test_classify)": [[258, "nltk.test.unit.test_classify.assert_classifier_correct", false]], "assertnexttoken() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.assertNextToken", false]], "asserttoken() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.assertToken", false]], "assign_values() (nltk.tokenize.sonority_sequencing.syllabletokenizer method)": [[314, "nltk.tokenize.sonority_sequencing.SyllableTokenizer.assign_values", false]], "assignment (class in nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.Assignment", false]], "assumptions() (nltk.inference.api.basetheoremtoolcommand method)": [[124, "nltk.inference.api.BaseTheoremToolCommand.assumptions", false]], "assumptions() (nltk.inference.api.theoremtoolcommand method)": [[124, "nltk.inference.api.TheoremToolCommand.assumptions", false]], "assumptions() (nltk.inference.api.theoremtoolcommanddecorator method)": [[124, "nltk.inference.api.TheoremToolCommandDecorator.assumptions", false]], "assumptions() (nltk.inference.nonmonotonic.closeddomainprover method)": [[127, "nltk.inference.nonmonotonic.ClosedDomainProver.assumptions", false]], "assumptions() (nltk.inference.nonmonotonic.closedworldprover method)": [[127, "nltk.inference.nonmonotonic.ClosedWorldProver.assumptions", false]], "assumptions() (nltk.inference.nonmonotonic.uniquenamesprover method)": [[127, "nltk.inference.nonmonotonic.UniqueNamesProver.assumptions", false]], "atom (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.ATOM", false]], "atomicexpression (class in nltk.sem.linearlogic)": [[190, "nltk.sem.linearlogic.AtomicExpression", false]], "atoms() (nltk.sem.boxer.abstractboxerdrs method)": [[181, "nltk.sem.boxer.AbstractBoxerDrs.atoms", false]], "atoms() (nltk.sem.boxer.boxerdrs method)": [[181, "nltk.sem.boxer.BoxerDrs.atoms", false]], "atoms() (nltk.sem.boxer.boxereq method)": [[181, "nltk.sem.boxer.BoxerEq.atoms", false]], "atoms() (nltk.sem.boxer.boxerindexed method)": [[181, "nltk.sem.boxer.BoxerIndexed.atoms", false]], "atoms() (nltk.sem.boxer.boxernot method)": [[181, "nltk.sem.boxer.BoxerNot.atoms", false]], "atoms() (nltk.sem.boxer.boxeror method)": [[181, "nltk.sem.boxer.BoxerOr.atoms", false]], "atoms() (nltk.sem.boxer.boxerprop method)": [[181, "nltk.sem.boxer.BoxerProp.atoms", false]], "atoms() (nltk.sem.boxer.boxerwhq method)": [[181, "nltk.sem.boxer.BoxerWhq.atoms", false]], "attachments() (nltk.corpus.reader.ppattach.ppattachmentcorpusreader method)": [[88, "nltk.corpus.reader.ppattach.PPAttachmentCorpusReader.attachments", false]], "attachments() (nltk.corpus.reader.ppattachmentcorpusreader method)": [[57, "nltk.corpus.reader.PPAttachmentCorpusReader.attachments", false]], "attempt_adjuncts() (nltk.sem.boxer.boxerdrsparser method)": [[181, "nltk.sem.boxer.BoxerDrsParser.attempt_adjuncts", false]], "attempt_adjuncts() (nltk.sem.boxer.boxeroutputdrsparser method)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser.attempt_adjuncts", false]], "attempt_adjuncts() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.attempt_adjuncts", false]], "attempt_applicationexpression() (nltk.sem.linearlogic.linearlogicparser method)": [[190, "nltk.sem.linearlogic.LinearLogicParser.attempt_ApplicationExpression", false]], "attempt_applicationexpression() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.attempt_ApplicationExpression", false]], "attempt_booleanexpression() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.attempt_BooleanExpression", false]], "attempt_equalityexpression() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.attempt_EqualityExpression", false]], "attested_labels() (in module nltk.classify.util)": [[43, "nltk.classify.util.attested_labels", false]], "attrdict (class in nltk.corpus.reader.framenet)": [[72, "nltk.corpus.reader.framenet.AttrDict", false]], "audiodata() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.audiodata", false]], "audiodata() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.audiodata", false]], "augment() (nltk.sem.chat80.concept method)": [[182, "nltk.sem.chat80.Concept.augment", false]], "augparsecategory() (in module nltk.ccg.lexicon)": [[16, "nltk.ccg.lexicon.augParseCategory", false]], "auth() (in module nltk.test.unit.test_twitter_auth)": [[285, "nltk.test.unit.test_twitter_auth.auth", false]], "authenticate (class in nltk.twitter.util)": [[356, "nltk.twitter.util.Authenticate", false]], "author (nltk.corpus.reader.bnc.bncwordview attribute)": [[61, "nltk.corpus.reader.bnc.BNCWordView.author", false]], "author (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.author", false]], "auto_formats (in module nltk.data)": [[111, "nltk.data.AUTO_FORMATS", false]], "available_categories (nltk.corpus.reader.unicharscorpusreader attribute)": [[57, "nltk.corpus.reader.UnicharsCorpusReader.available_categories", false]], "available_categories (nltk.corpus.reader.wordlist.unicharscorpusreader attribute)": [[106, "nltk.corpus.reader.wordlist.UnicharsCorpusReader.available_categories", false]], "available_langs (nltk.corpus.reader.nonbreakingprefixescorpusreader attribute)": [[57, "nltk.corpus.reader.NonbreakingPrefixesCorpusReader.available_langs", false]], "available_langs (nltk.corpus.reader.wordlist.nonbreakingprefixescorpusreader attribute)": [[106, "nltk.corpus.reader.wordlist.NonbreakingPrefixesCorpusReader.available_langs", false]], "average_characters (nltk.translate.gale_church.languageindependent attribute)": [[326, "nltk.translate.gale_church.LanguageIndependent.AVERAGE_CHARACTERS", false]], "average_weights() (nltk.tag.perceptron.averagedperceptron method)": [[221, "nltk.tag.perceptron.AveragedPerceptron.average_weights", false]], "averagedperceptron (class in nltk.tag.perceptron)": [[221, "nltk.tag.perceptron.AveragedPerceptron", false]], "avg_ao() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.avg_Ao", false]], "b() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.B", false]], "b_decr (nltk.sentiment.vader.vaderconstants attribute)": [[198, "nltk.sentiment.vader.VaderConstants.B_DECR", false]], "b_incr (nltk.sentiment.vader.vaderconstants attribute)": [[198, "nltk.sentiment.vader.VaderConstants.B_INCR", false]], "babelize_shell() (in module nltk.misc.babelfish)": [[154, "nltk.misc.babelfish.babelize_shell", false]], "background() (nltk.inference.discourse.discoursetester method)": [[125, "nltk.inference.discourse.DiscourseTester.background", false]], "backoff (nltk.tag.sequential.sequentialbackofftagger property)": [[223, "nltk.tag.sequential.SequentialBackoffTagger.backoff", false]], "backtrack() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.backtrack", false]], "backwardbxconstraint() (in module nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.backwardBxConstraint", false]], "backwardcombinator (class in nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.BackwardCombinator", false]], "backwardonly() (in module nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.backwardOnly", false]], "backwardsxconstraint() (in module nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.backwardSxConstraint", false]], "backwardtconstraint() (in module nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.backwardTConstraint", false]], "backwardtyperaiserule (class in nltk.ccg.chart)": [[14, "nltk.ccg.chart.BackwardTypeRaiseRule", false]], "base_fdist() (nltk.probability.heldoutprobdist method)": [[179, "nltk.probability.HeldoutProbDist.base_fdist", false]], "baseform (nltk.corpus.reader.nombank.nombankinstance attribute)": [[81, "nltk.corpus.reader.nombank.NombankInstance.baseform", false]], "baseform (nltk.corpus.reader.propbank.propbankinstance property)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.baseform", false]], "basemodelbuildercommand (class in nltk.inference.api)": [[124, "nltk.inference.api.BaseModelBuilderCommand", false]], "baseprovercommand (class in nltk.inference.api)": [[124, "nltk.inference.api.BaseProverCommand", false]], "basetheoremtoolcommand (class in nltk.inference.api)": [[124, "nltk.inference.api.BaseTheoremToolCommand", false]], "basic_sent_chop() (in module nltk.tag.tnt)": [[225, "nltk.tag.tnt.basic_sent_chop", false]], "basictweethandler (class in nltk.twitter.api)": [[352, "nltk.twitter.api.BasicTweetHandler", false]], "basictype (class in nltk.sem.logic)": [[191, "nltk.sem.logic.BasicType", false]], "batch_tag_incremental() (nltk.tag.brill.brilltagger method)": [[215, "nltk.tag.brill.BrillTagger.batch_tag_incremental", false]], "bbox() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.bbox", false]], "bbox() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.bbox", false]], "bcp47corpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.BCP47CorpusReader", false]], "bcp47corpusreader (class in nltk.corpus.reader.bcp47)": [[60, "nltk.corpus.reader.bcp47.BCP47CorpusReader", false]], "beam_threshold (nltk.translate.stack_decoder.stackdecoder attribute)": [[340, "nltk.translate.stack_decoder.StackDecoder.beam_threshold", false]], "best_binary_stump() (nltk.classify.decisiontree.decisiontreeclassifier static method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.best_binary_stump", false]], "best_incoming_arc() (nltk.parse.nonprojectivedependencyparser.probabilisticnonprojectiveparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser.best_incoming_arc", false]], "best_model2_alignment() (nltk.translate.ibm_model.ibmmodel method)": [[334, "nltk.translate.ibm_model.IBMModel.best_model2_alignment", false]], "best_path() (nltk.tag.hmm.hiddenmarkovmodeltagger method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.best_path", false]], "best_path_simple() (nltk.tag.hmm.hiddenmarkovmodeltagger method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.best_path_simple", false]], "best_stump() (nltk.classify.decisiontree.decisiontreeclassifier static method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.best_stump", false]], "bigram_collocation_feats() (nltk.sentiment.sentiment_analyzer.sentimentanalyzer method)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer.bigram_collocation_feats", false]], "bigram_finder() (nltk.collocations.trigramcollocationfinder method)": [[53, "nltk.collocations.TrigramCollocationFinder.bigram_finder", false]], "bigram_training_data() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.bigram_training_data", false]], "bigramassocmeasures (class in nltk.metrics.association)": [[146, "nltk.metrics.association.BigramAssocMeasures", false]], "bigramcollocationfinder (class in nltk.collocations)": [[53, "nltk.collocations.BigramCollocationFinder", false]], "bigrams() (in module nltk.util)": [[357, "nltk.util.bigrams", false]], "bigramtagger (class in nltk.tag.sequential)": [[223, "nltk.tag.sequential.BigramTagger", false]], "binarize() (nltk.grammar.cfg class method)": [[121, "nltk.grammar.CFG.binarize", false]], "binary_concept() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.binary_concept", false]], "binary_distance() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.binary_distance", false]], "binary_locations() (nltk.inference.prover9.prover9parent method)": [[128, "nltk.inference.prover9.Prover9Parent.binary_locations", false]], "binary_names_demo_features() (in module nltk.classify.util)": [[43, "nltk.classify.util.binary_names_demo_features", false]], "binary_search_file() (in module nltk.util)": [[357, "nltk.util.binary_search_file", false]], "binary_stump() (nltk.classify.decisiontree.decisiontreeclassifier static method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.binary_stump", false]], "binarycombinatorrule (class in nltk.ccg.chart)": [[14, "nltk.ccg.chart.BinaryCombinatorRule", false]], "binaryexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.BinaryExpression", false]], "binarymaxentfeatureencoding (class in nltk.classify.maxent)": [[33, "nltk.classify.maxent.BinaryMaxentFeatureEncoding", false]], "bind() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.bind", false]], "bind_click() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.bind_click", false]], "bind_click_leaves() (nltk.draw.tree.treewidget method)": [[118, "nltk.draw.tree.TreeWidget.bind_click_leaves", false]], "bind_click_nodes() (nltk.draw.tree.treewidget method)": [[118, "nltk.draw.tree.TreeWidget.bind_click_nodes", false]], "bind_click_trees() (nltk.draw.tree.treewidget method)": [[118, "nltk.draw.tree.TreeWidget.bind_click_trees", false]], "bind_drag() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.bind_drag", false]], "bind_drag_leaves() (nltk.draw.tree.treewidget method)": [[118, "nltk.draw.tree.TreeWidget.bind_drag_leaves", false]], "bind_drag_nodes() (nltk.draw.tree.treewidget method)": [[118, "nltk.draw.tree.TreeWidget.bind_drag_nodes", false]], "bind_drag_trees() (nltk.draw.tree.treewidget method)": [[118, "nltk.draw.tree.TreeWidget.bind_drag_trees", false]], "bind_to_columns() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.bind_to_columns", false]], "bind_to_columns() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.bind_to_columns", false]], "bind_to_labels() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.bind_to_labels", false]], "bind_to_labels() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.bind_to_labels", false]], "bind_to_listboxes() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.bind_to_listboxes", false]], "bind_to_listboxes() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.bind_to_listboxes", false]], "binding_ops() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.binding_ops", false]], "bindingdict (class in nltk.inference.resolution)": [[129, "nltk.inference.resolution.BindingDict", false]], "bindingdict (class in nltk.sem.linearlogic)": [[190, "nltk.sem.linearlogic.BindingDict", false]], "bindingexception": [[129, "nltk.inference.resolution.BindingException", false]], "bindings() (nltk.parse.featurechart.featuretreeedge method)": [[167, "nltk.parse.featurechart.FeatureTreeEdge.bindings", false]], "binops (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.BINOPS", false]], "bio_to_chunks() (nltk.tag.senna.sennachunktagger method)": [[222, "nltk.tag.senna.SennaChunkTagger.bio_to_chunks", false]], "blankline_tokenize() (in module nltk.tokenize.regexp)": [[310, "nltk.tokenize.regexp.blankline_tokenize", false]], "blanklinetokenizer (class in nltk.tokenize.regexp)": [[310, "nltk.tokenize.regexp.BlanklineTokenizer", false]], "bllipparser (class in nltk.parse.bllip)": [[161, "nltk.parse.bllip.BllipParser", false]], "blockquote_reader() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.blockquote_reader", false]], "blockquotes() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.blockquotes", false]], "bnccorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.BNCCorpusReader", false]], "bnccorpusreader (class in nltk.corpus.reader.bnc)": [[61, "nltk.corpus.reader.bnc.BNCCorpusReader", false]], "bncsentence (class in nltk.corpus.reader.bnc)": [[61, "nltk.corpus.reader.bnc.BNCSentence", false]], "bncwordview (class in nltk.corpus.reader.bnc)": [[61, "nltk.corpus.reader.bnc.BNCWordView", false]], "boolean_ops() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.boolean_ops", false]], "booleanexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.BooleanExpression", false]], "booster_dict (nltk.sentiment.vader.vaderconstants attribute)": [[198, "nltk.sentiment.vader.VaderConstants.BOOSTER_DICT", false]], "bothbackward() (in module nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.bothBackward", false]], "bothforward() (in module nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.bothForward", false]], "bottomupchartparser (class in nltk.parse.chart)": [[162, "nltk.parse.chart.BottomUpChartParser", false]], "bottomupleftcornerchartparser (class in nltk.parse.chart)": [[162, "nltk.parse.chart.BottomUpLeftCornerChartParser", false]], "bottomuppredictcombinerule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.BottomUpPredictCombineRule", false]], "bottomuppredictrule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.BottomUpPredictRule", false]], "bottomupprobabilisticchartparser (class in nltk.parse.pchart)": [[171, "nltk.parse.pchart.BottomUpProbabilisticChartParser", false]], "boxer (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.Boxer", false]], "boxercard (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerCard", false]], "boxerdrs (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerDrs", false]], "boxerdrsparser (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerDrsParser", false]], "boxereq (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerEq", false]], "boxerindexed (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerIndexed", false]], "boxernamed (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerNamed", false]], "boxernot (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerNot", false]], "boxeror (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerOr", false]], "boxeroutputdrsparser (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser", false]], "boxerpred (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerPred", false]], "boxerprop (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerProp", false]], "boxerrel (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerRel", false]], "boxerwhq (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.BoxerWhq", false]], "boxwidget (class in nltk.draw.util)": [[119, "nltk.draw.util.BoxWidget", false]], "bracket_parse() (in module nltk.tree)": [[341, "nltk.tree.bracket_parse", false]], "bracket_parse() (in module nltk.tree.parsing)": [[344, "nltk.tree.parsing.bracket_parse", false]], "bracketparsecorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.BracketParseCorpusReader", false]], "bracketparsecorpusreader (class in nltk.corpus.reader.bracket_parse)": [[62, "nltk.corpus.reader.bracket_parse.BracketParseCorpusReader", false]], "bracketwidget (class in nltk.draw.util)": [[119, "nltk.draw.util.BracketWidget", false]], "breadth_first() (in module nltk.util)": [[357, "nltk.util.breadth_first", false]], "brevity_penalty() (in module nltk.translate.bleu_score)": [[324, "nltk.translate.bleu_score.brevity_penalty", false]], "brill24() (in module nltk.tag.brill)": [[215, "nltk.tag.brill.brill24", false]], "brilltagger (class in nltk.tag.brill)": [[215, "nltk.tag.brill.BrillTagger", false]], "brilltaggertrainer (class in nltk.tag.brill_trainer)": [[216, "nltk.tag.brill_trainer.BrillTaggerTrainer", false]], "brilltemplatei (class in nltk.tbl.template)": [[233, "nltk.tbl.template.BrillTemplateI", false]], "brown_tagset() (in module nltk.help)": [[122, "nltk.help.brown_tagset", false]], "bubble() (in module nltk.misc.sort)": [[157, "nltk.misc.sort.bubble", false]], "buffer (nltk.sem.drt.drsdrawer attribute)": [[184, "nltk.sem.drt.DrsDrawer.BUFFER", false]], "bufferedgzipfile() (in module nltk.data)": [[111, "nltk.data.BufferedGzipFile", false]], "build_index() (in module nltk.downloader)": [[113, "nltk.downloader.build_index", false]], "build_model() (in module nltk.chunk.named_entity)": [[27, "nltk.chunk.named_entity.build_model", false]], "build_model() (nltk.inference.api.basemodelbuildercommand method)": [[124, "nltk.inference.api.BaseModelBuilderCommand.build_model", false]], "build_model() (nltk.inference.api.modelbuilder method)": [[124, "nltk.inference.api.ModelBuilder.build_model", false]], "build_model() (nltk.inference.api.modelbuildercommand method)": [[124, "nltk.inference.api.ModelBuilderCommand.build_model", false]], "build_model() (nltk.inference.api.modelbuildercommanddecorator method)": [[124, "nltk.inference.api.ModelBuilderCommandDecorator.build_model", false]], "build_model() (nltk.inference.api.parallelproverbuildercommand method)": [[124, "nltk.inference.api.ParallelProverBuilderCommand.build_model", false]], "build_preprocessed_file() (nltk.corpus.reader.nkjp.xml_tool method)": [[80, "nltk.corpus.reader.nkjp.XML_Tool.build_preprocessed_file", false]], "buildindexes() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.buildindexes", false]], "buildindexes() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.buildindexes", false]], "bytebuffer (nltk.data.seekableunicodestreamreader attribute)": [[111, "nltk.data.SeekableUnicodeStreamReader.bytebuffer", false]], "c (nltk.classify.maxent.gisencoding property)": [[33, "nltk.classify.maxent.GISEncoding.C", false]], "c (nltk.downloader.downloadergui attribute)": [[113, "nltk.downloader.DownloaderGUI.c", false]], "c_incr (nltk.sentiment.vader.vaderconstants attribute)": [[198, "nltk.sentiment.vader.VaderConstants.C_INCR", false]], "cachedtopdownpredictrule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.CachedTopDownPredictRule", false]], "calc_dist() (nltk.classify.textcat.textcat method)": [[42, "nltk.classify.textcat.TextCat.calc_dist", false]], "calculate_deltas() (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.calculate_deltas", false]], "calculate_empirical_fcount() (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.calculate_empirical_fcount", false]], "calculate_estimated_fcount() (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.calculate_estimated_fcount", false]], "calculate_nfmap() (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.calculate_nfmap", false]], "call_megam() (in module nltk.classify.megam)": [[34, "nltk.classify.megam.call_megam", false]], "call_tadm() (in module nltk.classify.tadm)": [[41, "nltk.classify.tadm.call_tadm", false]], "can_combine() (nltk.ccg.combinator.backwardcombinator method)": [[15, "nltk.ccg.combinator.BackwardCombinator.can_combine", false]], "can_combine() (nltk.ccg.combinator.directedbinarycombinator method)": [[15, "nltk.ccg.combinator.DirectedBinaryCombinator.can_combine", false]], "can_combine() (nltk.ccg.combinator.forwardcombinator method)": [[15, "nltk.ccg.combinator.ForwardCombinator.can_combine", false]], "can_combine() (nltk.ccg.combinator.undirectedbinarycombinator method)": [[15, "nltk.ccg.combinator.UndirectedBinaryCombinator.can_combine", false]], "can_combine() (nltk.ccg.combinator.undirectedcomposition method)": [[15, "nltk.ccg.combinator.UndirectedComposition.can_combine", false]], "can_combine() (nltk.ccg.combinator.undirectedfunctionapplication method)": [[15, "nltk.ccg.combinator.UndirectedFunctionApplication.can_combine", false]], "can_combine() (nltk.ccg.combinator.undirectedsubstitution method)": [[15, "nltk.ccg.combinator.UndirectedSubstitution.can_combine", false]], "can_combine() (nltk.ccg.combinator.undirectedtyperaise method)": [[15, "nltk.ccg.combinator.UndirectedTypeRaise.can_combine", false]], "can_compose() (nltk.ccg.api.direction method)": [[13, "nltk.ccg.api.Direction.can_compose", false]], "can_cross() (nltk.ccg.api.direction method)": [[13, "nltk.ccg.api.Direction.can_cross", false]], "can_unify() (nltk.ccg.api.abstractccgcategory method)": [[13, "nltk.ccg.api.AbstractCCGCategory.can_unify", false]], "can_unify() (nltk.ccg.api.ccgvar method)": [[13, "nltk.ccg.api.CCGVar.can_unify", false]], "can_unify() (nltk.ccg.api.direction method)": [[13, "nltk.ccg.api.Direction.can_unify", false]], "can_unify() (nltk.ccg.api.functionalcategory method)": [[13, "nltk.ccg.api.FunctionalCategory.can_unify", false]], "can_unify() (nltk.ccg.api.primitivecategory method)": [[13, "nltk.ccg.api.PrimitiveCategory.can_unify", false]], "candidate (nltk.test.unit.translate.test_meteor.testmeteor attribute)": [[297, "nltk.test.unit.translate.test_meteor.TestMETEOR.candidate", false]], "canvas() (nltk.draw.util.canvasframe method)": [[119, "nltk.draw.util.CanvasFrame.canvas", false]], "canvas() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.canvas", false]], "canvasframe (class in nltk.draw.util)": [[119, "nltk.draw.util.CanvasFrame", false]], "canvaswidget (class in nltk.draw.util)": [[119, "nltk.draw.util.CanvasWidget", false]], "casual_tokenize() (in module nltk.tokenize.casual)": [[304, "nltk.tokenize.casual.casual_tokenize", false]], "categ() (nltk.ccg.api.primitivecategory method)": [[13, "nltk.ccg.api.PrimitiveCategory.categ", false]], "categ() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.categ", false]], "categ() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.categ", false]], "categ() (nltk.ccg.lexicon.token method)": [[16, "nltk.ccg.lexicon.Token.categ", false]], "categories (class in nltk.inference.tableau)": [[130, "nltk.inference.tableau.Categories", false]], "categories() (nltk.ccg.lexicon.ccglexicon method)": [[16, "nltk.ccg.lexicon.CCGLexicon.categories", false]], "categories() (nltk.corpus.reader.api.categorizedcorpusreader method)": [[59, "nltk.corpus.reader.api.CategorizedCorpusReader.categories", false]], "categories() (nltk.corpus.reader.categorizedcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedCorpusReader.categories", false]], "categories() (nltk.corpus.reader.ipipan.ipipancorpusreader method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader.categories", false]], "categories() (nltk.corpus.reader.ipipancorpusreader method)": [[57, "nltk.corpus.reader.IPIPANCorpusReader.categories", false]], "categories() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.categories", false]], "categorizedbracketparsecorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.CategorizedBracketParseCorpusReader", false]], "categorizedbracketparsecorpusreader (class in nltk.corpus.reader.bracket_parse)": [[62, "nltk.corpus.reader.bracket_parse.CategorizedBracketParseCorpusReader", false]], "categorizedcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.CategorizedCorpusReader", false]], "categorizedcorpusreader (class in nltk.corpus.reader.api)": [[59, "nltk.corpus.reader.api.CategorizedCorpusReader", false]], "categorizedmarkdowncorpusreader (class in nltk.corpus.reader.markdown)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader", false]], "categorizedplaintextcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.CategorizedPlaintextCorpusReader", false]], "categorizedplaintextcorpusreader (class in nltk.corpus.reader.plaintext)": [[87, "nltk.corpus.reader.plaintext.CategorizedPlaintextCorpusReader", false]], "categorizedsentencescorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.CategorizedSentencesCorpusReader", false]], "categorizedsentencescorpusreader (class in nltk.corpus.reader.categorized_sents)": [[63, "nltk.corpus.reader.categorized_sents.CategorizedSentencesCorpusReader", false]], "categorizedtaggedcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.CategorizedTaggedCorpusReader", false]], "categorizedtaggedcorpusreader (class in nltk.corpus.reader.tagged)": [[99, "nltk.corpus.reader.tagged.CategorizedTaggedCorpusReader", false]], "ccgchart (class in nltk.ccg.chart)": [[14, "nltk.ccg.chart.CCGChart", false]], "ccgchartparser (class in nltk.ccg.chart)": [[14, "nltk.ccg.chart.CCGChartParser", false]], "ccgedge (class in nltk.ccg.chart)": [[14, "nltk.ccg.chart.CCGEdge", false]], "ccgleafedge (class in nltk.ccg.chart)": [[14, "nltk.ccg.chart.CCGLeafEdge", false]], "ccglexicon (class in nltk.ccg.lexicon)": [[16, "nltk.ccg.lexicon.CCGLexicon", false]], "ccgvar (class in nltk.ccg.api)": [[13, "nltk.ccg.api.CCGVar", false]], "center_of_cept() (nltk.translate.ibm_model.alignmentinfo method)": [[334, "nltk.translate.ibm_model.AlignmentInfo.center_of_cept", false]], "cepts (nltk.translate.ibm_model.alignmentinfo attribute)": [[334, "nltk.translate.ibm_model.AlignmentInfo.cepts", false]], "cfg (class in nltk.grammar)": [[121, "nltk.grammar.CFG", false]], "cfgdemo (class in nltk.draw.cfg)": [[115, "nltk.draw.cfg.CFGDemo", false]], "cfgeditor (class in nltk.draw.cfg)": [[115, "nltk.draw.cfg.CFGEditor", false]], "cfgreadingcommand (class in nltk.inference.discourse)": [[125, "nltk.inference.discourse.CfgReadingCommand", false]], "change_var() (nltk.sem.boxer.boxernamed method)": [[181, "nltk.sem.boxer.BoxerNamed.change_var", false]], "change_var() (nltk.sem.boxer.boxerpred method)": [[181, "nltk.sem.boxer.BoxerPred.change_var", false]], "channels() (nltk.corpus.reader.ipipan.ipipancorpusreader method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader.channels", false]], "channels() (nltk.corpus.reader.ipipancorpusreader method)": [[57, "nltk.corpus.reader.IPIPANCorpusReader.channels", false]], "chapters() (nltk.corpus.reader.europarlcorpusreader method)": [[57, "nltk.corpus.reader.EuroparlCorpusReader.chapters", false]], "chapters() (nltk.corpus.reader.plaintext.europarlcorpusreader method)": [[87, "nltk.corpus.reader.plaintext.EuroparlCorpusReader.chapters", false]], "char_seek_forward() (nltk.data.seekableunicodestreamreader method)": [[111, "nltk.data.SeekableUnicodeStreamReader.char_seek_forward", false]], "chars() (nltk.corpus.reader.unicharscorpusreader method)": [[57, "nltk.corpus.reader.UnicharsCorpusReader.chars", false]], "chars() (nltk.corpus.reader.wordlist.unicharscorpusreader method)": [[106, "nltk.corpus.reader.wordlist.UnicharsCorpusReader.chars", false]], "chart (class in nltk.parse.chart)": [[162, "nltk.parse.chart.Chart", false]], "chart() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.chart", false]], "chart_parse() (nltk.parse.chart.chartparser method)": [[162, "nltk.parse.chart.ChartParser.chart_parse", false]], "chart_parse() (nltk.parse.earleychart.incrementalchartparser method)": [[165, "nltk.parse.earleychart.IncrementalChartParser.chart_parse", false]], "chartcell (class in nltk.parse.projectivedependencyparser)": [[172, "nltk.parse.projectivedependencyparser.ChartCell", false]], "chartokenizer (class in nltk.tokenize.simple)": [[313, "nltk.tokenize.simple.CharTokenizer", false]], "chartparser (class in nltk.parse.chart)": [[162, "nltk.parse.chart.ChartParser", false]], "chartrulei (class in nltk.parse.chart)": [[162, "nltk.parse.chart.ChartRuleI", false]], "chasencorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.ChasenCorpusReader", false]], "chasencorpusreader (class in nltk.corpus.reader.chasen)": [[64, "nltk.corpus.reader.chasen.ChasenCorpusReader", false]], "chasencorpusview (class in nltk.corpus.reader.chasen)": [[64, "nltk.corpus.reader.chasen.ChasenCorpusView", false]], "chat (class in nltk.chat.util)": [[23, "nltk.chat.util.Chat", false]], "chatbots() (in module nltk.chat)": [[18, "nltk.chat.chatbots", false]], "check() (in module nltk.misc.wordfinder)": [[158, "nltk.misc.wordfinder.check", false]], "check() (nltk.classify.util.cutoffchecker method)": [[43, "nltk.classify.util.CutoffChecker.check", false]], "check() (nltk.probability.simplegoodturingprobdist method)": [[179, "nltk.probability.SimpleGoodTuringProbDist.check", false]], "check_coverage() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.check_coverage", false]], "check_date_limit() (nltk.twitter.api.tweethandleri method)": [[352, "nltk.twitter.api.TweetHandlerI.check_date_limit", false]], "check_megam_config() (in module nltk.classify.util)": [[43, "nltk.classify.util.check_megam_config", false]], "check_reader() (in module nltk.test.unit.test_seekable_unicode_stream_reader)": [[279, "nltk.test.unit.test_seekable_unicode_stream_reader.check_reader", false]], "check_stdout() (nltk.test.unit.test_pos_tag.testpostag method)": [[276, "nltk.test.unit.test_pos_tag.TestPosTag.check_stdout", false]], "checksum (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.checksum", false]], "chi_sq() (nltk.metrics.association.bigramassocmeasures class method)": [[146, "nltk.metrics.association.BigramAssocMeasures.chi_sq", false]], "chi_sq() (nltk.metrics.association.ngramassocmeasures class method)": [[146, "nltk.metrics.association.NgramAssocMeasures.chi_sq", false]], "child() (nltk.draw.util.abstractcontainerwidget method)": [[119, "nltk.draw.util.AbstractContainerWidget.child", false]], "child_pointer_lists() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.child_pointer_lists", false]], "child_widgets() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.child_widgets", false]], "childes_url_base (nltk.corpus.reader.childes.childescorpusreader attribute)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.childes_url_base", false]], "childes_url_base (nltk.corpus.reader.childescorpusreader attribute)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.childes_url_base", false]], "childescorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.CHILDESCorpusReader", false]], "childescorpusreader (class in nltk.corpus.reader.childes)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader", false]], "children (nltk.downloader.collection attribute)": [[113, "nltk.downloader.Collection.children", false]], "children() (nltk.draw.util.sequencewidget method)": [[119, "nltk.draw.util.SequenceWidget.children", false]], "children() (nltk.draw.util.stackwidget method)": [[119, "nltk.draw.util.StackWidget.children", false]], "chomsky_normal_form() (in module nltk.tree)": [[341, "nltk.tree.chomsky_normal_form", false]], "chomsky_normal_form() (in module nltk.tree.transforms)": [[347, "nltk.tree.transforms.chomsky_normal_form", false]], "chomsky_normal_form() (in module nltk.treetransforms)": [[350, "nltk.treetransforms.chomsky_normal_form", false]], "chomsky_normal_form() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.chomsky_normal_form", false]], "chomsky_normal_form() (nltk.tree.tree method)": [[341, "nltk.tree.Tree.chomsky_normal_form", false]], "chomsky_normal_form() (nltk.tree.tree.tree method)": [[348, "nltk.tree.tree.Tree.chomsky_normal_form", false]], "chomskynormalformforcfgtest (class in nltk.test.unit.test_cfg2chomsky)": [[256, "nltk.test.unit.test_cfg2chomsky.ChomskyNormalFormForCFGTest", false]], "choose() (in module nltk.util)": [[357, "nltk.util.choose", false]], "choose_tag() (nltk.tag.sequential.classifierbasedtagger method)": [[223, "nltk.tag.sequential.ClassifierBasedTagger.choose_tag", false]], "choose_tag() (nltk.tag.sequential.contexttagger method)": [[223, "nltk.tag.sequential.ContextTagger.choose_tag", false]], "choose_tag() (nltk.tag.sequential.defaulttagger method)": [[223, "nltk.tag.sequential.DefaultTagger.choose_tag", false]], "choose_tag() (nltk.tag.sequential.regexptagger method)": [[223, "nltk.tag.sequential.RegexpTagger.choose_tag", false]], "choose_tag() (nltk.tag.sequential.sequentialbackofftagger method)": [[223, "nltk.tag.sequential.SequentialBackoffTagger.choose_tag", false]], "chrf_precision_recall_fscore_support() (in module nltk.translate.chrf_score)": [[325, "nltk.translate.chrf_score.chrf_precision_recall_fscore_support", false]], "chunk (nltk.corpus.reader.conll.conllcorpusreader attribute)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.CHUNK", false]], "chunk (nltk.corpus.reader.conllcorpusreader attribute)": [[57, "nltk.corpus.reader.ConllCorpusReader.CHUNK", false]], "chunk_sents() (nltk.corpus.reader.semcor.semcorcorpusreader method)": [[93, "nltk.corpus.reader.semcor.SemcorCorpusReader.chunk_sents", false]], "chunk_sents() (nltk.corpus.reader.semcorcorpusreader method)": [[57, "nltk.corpus.reader.SemcorCorpusReader.chunk_sents", false]], "chunk_tag (nltk.chunk.regexp.chunkstring attribute)": [[28, "nltk.chunk.regexp.ChunkString.CHUNK_TAG", false]], "chunk_tag_char (nltk.chunk.regexp.chunkstring attribute)": [[28, "nltk.chunk.regexp.ChunkString.CHUNK_TAG_CHAR", false]], "chunked_paras() (nltk.corpus.reader.chunked.chunkedcorpusreader method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusReader.chunked_paras", false]], "chunked_paras() (nltk.corpus.reader.chunkedcorpusreader method)": [[57, "nltk.corpus.reader.ChunkedCorpusReader.chunked_paras", false]], "chunked_sents() (nltk.corpus.reader.chunked.chunkedcorpusreader method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusReader.chunked_sents", false]], "chunked_sents() (nltk.corpus.reader.chunkedcorpusreader method)": [[57, "nltk.corpus.reader.ChunkedCorpusReader.chunked_sents", false]], "chunked_sents() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.chunked_sents", false]], "chunked_sents() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.chunked_sents", false]], "chunked_words() (nltk.corpus.reader.chunked.chunkedcorpusreader method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusReader.chunked_words", false]], "chunked_words() (nltk.corpus.reader.chunkedcorpusreader method)": [[57, "nltk.corpus.reader.ChunkedCorpusReader.chunked_words", false]], "chunked_words() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.chunked_words", false]], "chunked_words() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.chunked_words", false]], "chunkedcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.ChunkedCorpusReader", false]], "chunkedcorpusreader (class in nltk.corpus.reader.chunked)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusReader", false]], "chunkedcorpusview (class in nltk.corpus.reader.chunked)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusView", false]], "chunkparseri (class in nltk.chunk.api)": [[26, "nltk.chunk.api.ChunkParserI", false]], "chunkrule (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.ChunkRule", false]], "chunkrulewithcontext (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.ChunkRuleWithContext", false]], "chunks() (nltk.corpus.reader.semcor.semcorcorpusreader method)": [[93, "nltk.corpus.reader.semcor.SemcorCorpusReader.chunks", false]], "chunks() (nltk.corpus.reader.semcorcorpusreader method)": [[57, "nltk.corpus.reader.SemcorCorpusReader.chunks", false]], "chunkscore (class in nltk.chunk.util)": [[29, "nltk.chunk.util.ChunkScore", false]], "chunkstring (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.ChunkString", false]], "cistem (class in nltk.stem.cistem)": [[203, "nltk.stem.cistem.Cistem", false]], "citation() (nltk.corpus.reader.api.corpusreader method)": [[59, "nltk.corpus.reader.api.CorpusReader.citation", false]], "citation() (nltk.corpus.reader.corpusreader method)": [[57, "nltk.corpus.reader.CorpusReader.citation", false]], "citation() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.citation", false]], "citation() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.citation", false]], "cities2table() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.cities2table", false]], "cjk_compatibility_forms (nltk.tokenize.util.cjkchars attribute)": [[320, "nltk.tokenize.util.CJKChars.CJK_Compatibility_Forms", false]], "cjk_compatibility_ideographs (nltk.tokenize.util.cjkchars attribute)": [[320, "nltk.tokenize.util.CJKChars.CJK_Compatibility_Ideographs", false]], "cjk_radicals (nltk.tokenize.util.cjkchars attribute)": [[320, "nltk.tokenize.util.CJKChars.CJK_Radicals", false]], "cjkchars (class in nltk.tokenize.util)": [[320, "nltk.tokenize.util.CJKChars", false]], "class_abbrev() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.class_abbrev", false]], "classids() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.classids", false]], "classids() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.classids", false]], "classification_probdist() (nltk.cluster.api.clusteri method)": [[47, "nltk.cluster.api.ClusterI.classification_probdist", false]], "classifier() (nltk.tag.sequential.classifierbasedtagger method)": [[223, "nltk.tag.sequential.ClassifierBasedTagger.classifier", false]], "classifierbasedpostagger (class in nltk.tag.sequential)": [[223, "nltk.tag.sequential.ClassifierBasedPOSTagger", false]], "classifierbasedtagger (class in nltk.tag.sequential)": [[223, "nltk.tag.sequential.ClassifierBasedTagger", false]], "classifieri (class in nltk.classify.api)": [[31, "nltk.classify.api.ClassifierI", false]], "classify() (nltk.classify.api.classifieri method)": [[31, "nltk.classify.api.ClassifierI.classify", false]], "classify() (nltk.classify.api.multiclassifieri method)": [[31, "nltk.classify.api.MultiClassifierI.classify", false]], "classify() (nltk.classify.decisiontree.decisiontreeclassifier method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.classify", false]], "classify() (nltk.classify.maxent.maxentclassifier method)": [[33, "nltk.classify.maxent.MaxentClassifier.classify", false]], "classify() (nltk.classify.naivebayes.naivebayesclassifier method)": [[35, "nltk.classify.naivebayes.NaiveBayesClassifier.classify", false]], "classify() (nltk.cluster.api.clusteri method)": [[47, "nltk.cluster.api.ClusterI.classify", false]], "classify() (nltk.cluster.util.vectorspaceclusterer method)": [[51, "nltk.cluster.util.VectorSpaceClusterer.classify", false]], "classify() (nltk.sentiment.sentiment_analyzer.sentimentanalyzer method)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer.classify", false]], "classify_many() (nltk.classify.api.classifieri method)": [[31, "nltk.classify.api.ClassifierI.classify_many", false]], "classify_many() (nltk.classify.api.multiclassifieri method)": [[31, "nltk.classify.api.MultiClassifierI.classify_many", false]], "classify_many() (nltk.classify.scikitlearn.sklearnclassifier method)": [[38, "nltk.classify.scikitlearn.SklearnClassifier.classify_many", false]], "classify_many() (nltk.classify.weka.wekaclassifier method)": [[44, "nltk.classify.weka.WekaClassifier.classify_many", false]], "classify_vectorspace() (nltk.cluster.em.emclusterer method)": [[48, "nltk.cluster.em.EMClusterer.classify_vectorspace", false]], "classify_vectorspace() (nltk.cluster.gaac.gaaclusterer method)": [[49, "nltk.cluster.gaac.GAAClusterer.classify_vectorspace", false]], "classify_vectorspace() (nltk.cluster.kmeans.kmeansclusterer method)": [[50, "nltk.cluster.kmeans.KMeansClusterer.classify_vectorspace", false]], "classify_vectorspace() (nltk.cluster.util.vectorspaceclusterer method)": [[51, "nltk.cluster.util.VectorSpaceClusterer.classify_vectorspace", false]], "clause (class in nltk.inference.resolution)": [[129, "nltk.inference.resolution.Clause", false]], "clause() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.clause", false]], "clause2concepts() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.clause2concepts", false]], "clausify() (in module nltk.inference.resolution)": [[129, "nltk.inference.resolution.clausify", false]], "claws5_tagset() (in module nltk.help)": [[122, "nltk.help.claws5_tagset", false]], "clean() (nltk.sem.boxer.abstractboxerdrs method)": [[181, "nltk.sem.boxer.AbstractBoxerDrs.clean", false]], "clean() (nltk.sem.boxer.boxerdrs method)": [[181, "nltk.sem.boxer.BoxerDrs.clean", false]], "clean() (nltk.sem.boxer.boxernamed method)": [[181, "nltk.sem.boxer.BoxerNamed.clean", false]], "clean() (nltk.sem.boxer.boxernot method)": [[181, "nltk.sem.boxer.BoxerNot.clean", false]], "clean() (nltk.sem.boxer.boxeror method)": [[181, "nltk.sem.boxer.BoxerOr.clean", false]], "clean() (nltk.sem.boxer.boxerpred method)": [[181, "nltk.sem.boxer.BoxerPred.clean", false]], "clean() (nltk.sem.boxer.boxerprop method)": [[181, "nltk.sem.boxer.BoxerProp.clean", false]], "clean() (nltk.sem.boxer.boxerrel method)": [[181, "nltk.sem.boxer.BoxerRel.clean", false]], "clean() (nltk.sem.boxer.boxerwhq method)": [[181, "nltk.sem.boxer.BoxerWhq.clean", false]], "clean_html() (in module nltk.util)": [[357, "nltk.util.clean_html", false]], "clean_url() (in module nltk.util)": [[357, "nltk.util.clean_url", false]], "clear() (nltk.collections.ordereddict method)": [[52, "nltk.collections.OrderedDict.clear", false]], "clear() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.clear", false]], "clear() (nltk.featstruct.featdict method)": [[120, "nltk.featstruct.FeatDict.clear", false]], "clear() (nltk.sem.drt_glue_demo.drswidget method)": [[185, "nltk.sem.drt_glue_demo.DrsWidget.clear", false]], "clear_abbrevs() (nltk.tokenize.punkt.punktparameters method)": [[309, "nltk.tokenize.punkt.PunktParameters.clear_abbrevs", false]], "clear_cache() (in module nltk.data)": [[111, "nltk.data.clear_cache", false]], "clear_collocations() (nltk.tokenize.punkt.punktparameters method)": [[309, "nltk.tokenize.punkt.PunktParameters.clear_collocations", false]], "clear_ortho_context() (nltk.tokenize.punkt.punktparameters method)": [[309, "nltk.tokenize.punkt.PunktParameters.clear_ortho_context", false]], "clear_sent_starters() (nltk.tokenize.punkt.punktparameters method)": [[309, "nltk.tokenize.punkt.PunktParameters.clear_sent_starters", false]], "clear_status_cache() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.clear_status_cache", false]], "clone() (nltk.inference.tableau.agenda method)": [[130, "nltk.inference.tableau.Agenda.clone", false]], "close (nltk.sem.linearlogic.tokens attribute)": [[190, "nltk.sem.linearlogic.Tokens.CLOSE", false]], "close (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.CLOSE", false]], "close() (nltk.corpus.reader.util.concatenatedcorpusview method)": [[104, "nltk.corpus.reader.util.ConcatenatedCorpusView.close", false]], "close() (nltk.corpus.reader.util.streambackedcorpusview method)": [[104, "nltk.corpus.reader.util.StreamBackedCorpusView.close", false]], "close() (nltk.data.seekableunicodestreamreader method)": [[111, "nltk.data.SeekableUnicodeStreamReader.close", false]], "close() (nltk.sem.chat80.concept method)": [[182, "nltk.sem.chat80.Concept.close", false]], "close() (nltk.tag.hunpos.hunpostagger method)": [[219, "nltk.tag.hunpos.HunposTagger.close", false]], "close() (nltk.toolbox.standardformat method)": [[321, "nltk.toolbox.StandardFormat.close", false]], "close_bracket (nltk.sem.drt.drttokens attribute)": [[184, "nltk.sem.drt.DrtTokens.CLOSE_BRACKET", false]], "close_enough() (in module nltk.test.unit.test_collocations)": [[259, "nltk.test.unit.test_collocations.close_enough", false]], "close_punct (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.CLOSE_PUNCT", false]], "close_punct_re (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.CLOSE_PUNCT_RE", false]], "closed (nltk.data.seekableunicodestreamreader property)": [[111, "nltk.data.SeekableUnicodeStreamReader.closed", false]], "closed_domain_demo() (in module nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.closed_domain_demo", false]], "closed_world_demo() (in module nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.closed_world_demo", false]], "closeddomainprover (class in nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.ClosedDomainProver", false]], "closedworldprover (class in nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.ClosedWorldProver", false]], "closest_ref_length() (in module nltk.translate.bleu_score)": [[324, "nltk.translate.bleu_score.closest_ref_length", false]], "closure() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.closure", false]], "cluster() (nltk.cluster.api.clusteri method)": [[47, "nltk.cluster.api.ClusterI.cluster", false]], "cluster() (nltk.cluster.gaac.gaaclusterer method)": [[49, "nltk.cluster.gaac.GAAClusterer.cluster", false]], "cluster() (nltk.cluster.util.vectorspaceclusterer method)": [[51, "nltk.cluster.util.VectorSpaceClusterer.cluster", false]], "cluster_name() (nltk.cluster.api.clusteri method)": [[47, "nltk.cluster.api.ClusterI.cluster_name", false]], "cluster_names() (nltk.cluster.api.clusteri method)": [[47, "nltk.cluster.api.ClusterI.cluster_names", false]], "cluster_vectorspace() (nltk.cluster.em.emclusterer method)": [[48, "nltk.cluster.em.EMClusterer.cluster_vectorspace", false]], "cluster_vectorspace() (nltk.cluster.gaac.gaaclusterer method)": [[49, "nltk.cluster.gaac.GAAClusterer.cluster_vectorspace", false]], "cluster_vectorspace() (nltk.cluster.kmeans.kmeansclusterer method)": [[50, "nltk.cluster.kmeans.KMeansClusterer.cluster_vectorspace", false]], "cluster_vectorspace() (nltk.cluster.util.vectorspaceclusterer method)": [[51, "nltk.cluster.util.VectorSpaceClusterer.cluster_vectorspace", false]], "clusteri (class in nltk.cluster.api)": [[47, "nltk.cluster.api.ClusterI", false]], "cmp_chunks() (in module nltk.chunk.named_entity)": [[27, "nltk.chunk.named_entity.cmp_chunks", false]], "cmudictcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.CMUDictCorpusReader", false]], "cmudictcorpusreader (class in nltk.corpus.reader.cmudict)": [[67, "nltk.corpus.reader.cmudict.CMUDictCorpusReader", false]], "code_block_reader() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.code_block_reader", false]], "code_blocks() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.code_blocks", false]], "codeblock (class in nltk.corpus.reader.markdown)": [[78, "nltk.corpus.reader.markdown.CodeBlock", false]], "collapse_nodes() (nltk.parse.nonprojectivedependencyparser.probabilisticnonprojectiveparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser.collapse_nodes", false]], "collapse_unary() (in module nltk.tree)": [[341, "nltk.tree.collapse_unary", false]], "collapse_unary() (in module nltk.tree.transforms)": [[347, "nltk.tree.transforms.collapse_unary", false]], "collapse_unary() (in module nltk.treetransforms)": [[350, "nltk.treetransforms.collapse_unary", false]], "collapse_unary() (nltk.tree.tree method)": [[341, "nltk.tree.Tree.collapse_unary", false]], "collapse_unary() (nltk.tree.tree.tree method)": [[348, "nltk.tree.tree.Tree.collapse_unary", false]], "collapsed_tree() (nltk.draw.tree.treewidget method)": [[118, "nltk.draw.tree.TreeWidget.collapsed_tree", false]], "collection (class in nltk.downloader)": [[113, "nltk.downloader.Collection", false]], "collections() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.collections", false]], "collocation (nltk.tokenize.punkt.punkttrainer attribute)": [[309, "nltk.tokenize.punkt.PunktTrainer.COLLOCATION", false]], "collocation_list() (nltk.text.text method)": [[300, "nltk.text.Text.collocation_list", false]], "collocations (nltk.tokenize.punkt.punktparameters attribute)": [[309, "nltk.tokenize.punkt.PunktParameters.collocations", false]], "collocations() (nltk.text.text method)": [[300, "nltk.text.Text.collocations", false]], "colon (nltk.sem.drt.drttokens attribute)": [[184, "nltk.sem.drt.DrtTokens.COLON", false]], "colorizedlist (class in nltk.draw.util)": [[119, "nltk.draw.util.ColorizedList", false]], "column_index() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.column_index", false]], "column_labels (nltk.draw.table.multilistbox property)": [[117, "nltk.draw.table.MultiListbox.column_labels", false]], "column_names (nltk.draw.table.multilistbox property)": [[117, "nltk.draw.table.MultiListbox.column_names", false]], "column_names (nltk.draw.table.table property)": [[117, "nltk.draw.table.Table.column_names", false]], "column_types (nltk.corpus.reader.conll.conllcorpusreader attribute)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.COLUMN_TYPES", false]], "column_types (nltk.corpus.reader.conllcorpusreader attribute)": [[57, "nltk.corpus.reader.ConllCorpusReader.COLUMN_TYPES", false]], "column_weights (nltk.downloader.downloadergui attribute)": [[113, "nltk.downloader.DownloaderGUI.COLUMN_WEIGHTS", false]], "column_widths (nltk.downloader.downloadergui attribute)": [[113, "nltk.downloader.DownloaderGUI.COLUMN_WIDTHS", false]], "columnconfig() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.columnconfig", false]], "columnconfig() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.columnconfig", false]], "columnconfigure() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.columnconfigure", false]], "columnconfigure() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.columnconfigure", false]], "columns (nltk.downloader.downloadergui attribute)": [[113, "nltk.downloader.DownloaderGUI.COLUMNS", false]], "combination_prover_demo() (in module nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.combination_prover_demo", false]], "combine() (nltk.ccg.combinator.backwardcombinator method)": [[15, "nltk.ccg.combinator.BackwardCombinator.combine", false]], "combine() (nltk.ccg.combinator.directedbinarycombinator method)": [[15, "nltk.ccg.combinator.DirectedBinaryCombinator.combine", false]], "combine() (nltk.ccg.combinator.forwardcombinator method)": [[15, "nltk.ccg.combinator.ForwardCombinator.combine", false]], "combine() (nltk.ccg.combinator.undirectedbinarycombinator method)": [[15, "nltk.ccg.combinator.UndirectedBinaryCombinator.combine", false]], "combine() (nltk.ccg.combinator.undirectedcomposition method)": [[15, "nltk.ccg.combinator.UndirectedComposition.combine", false]], "combine() (nltk.ccg.combinator.undirectedfunctionapplication method)": [[15, "nltk.ccg.combinator.UndirectedFunctionApplication.combine", false]], "combine() (nltk.ccg.combinator.undirectedsubstitution method)": [[15, "nltk.ccg.combinator.UndirectedSubstitution.combine", false]], "combine() (nltk.ccg.combinator.undirectedtyperaise method)": [[15, "nltk.ccg.combinator.UndirectedTypeRaise.combine", false]], "combine_readings() (nltk.inference.discourse.cfgreadingcommand method)": [[125, "nltk.inference.discourse.CfgReadingCommand.combine_readings", false]], "combine_readings() (nltk.inference.discourse.drtgluereadingcommand method)": [[125, "nltk.inference.discourse.DrtGlueReadingCommand.combine_readings", false]], "combine_readings() (nltk.inference.discourse.readingcommand method)": [[125, "nltk.inference.discourse.ReadingCommand.combine_readings", false]], "comma (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.COMMA", false]], "comma_in_num (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.COMMA_IN_NUM", false]], "comma_separated_string_args() (in module nltk.corpus.reader.markdown)": [[78, "nltk.corpus.reader.markdown.comma_separated_string_args", false]], "common_contexts() (nltk.text.contextindex method)": [[300, "nltk.text.ContextIndex.common_contexts", false]], "common_contexts() (nltk.text.text method)": [[300, "nltk.text.Text.common_contexts", false]], "common_hypernyms() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.common_hypernyms", false]], "comparativesentencescorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.ComparativeSentencesCorpusReader", false]], "comparativesentencescorpusreader (class in nltk.corpus.reader.comparative_sents)": [[68, "nltk.corpus.reader.comparative_sents.ComparativeSentencesCorpusReader", false]], "comparison (class in nltk.corpus.reader.comparative_sents)": [[68, "nltk.corpus.reader.comparative_sents.Comparison", false]], "comparisons() (nltk.corpus.reader.comparative_sents.comparativesentencescorpusreader method)": [[68, "nltk.corpus.reader.comparative_sents.ComparativeSentencesCorpusReader.comparisons", false]], "comparisons() (nltk.corpus.reader.comparativesentencescorpusreader method)": [[57, "nltk.corpus.reader.ComparativeSentencesCorpusReader.comparisons", false]], "compile() (nltk.sem.glue.glueformula method)": [[187, "nltk.sem.glue.GlueFormula.compile", false]], "compile_neg() (nltk.sem.linearlogic.atomicexpression method)": [[190, "nltk.sem.linearlogic.AtomicExpression.compile_neg", false]], "compile_neg() (nltk.sem.linearlogic.impexpression method)": [[190, "nltk.sem.linearlogic.ImpExpression.compile_neg", false]], "compile_pos() (nltk.sem.linearlogic.atomicexpression method)": [[190, "nltk.sem.linearlogic.AtomicExpression.compile_pos", false]], "compile_pos() (nltk.sem.linearlogic.impexpression method)": [[190, "nltk.sem.linearlogic.ImpExpression.compile_pos", false]], "completefundamentalrule (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.CompleteFundamentalRule", false]], "completerrule (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.CompleterRule", false]], "complextype (class in nltk.sem.logic)": [[191, "nltk.sem.logic.ComplexType", false]], "compute_composition_semantics() (in module nltk.ccg.logic)": [[17, "nltk.ccg.logic.compute_composition_semantics", false]], "compute_function_semantics() (in module nltk.ccg.logic)": [[17, "nltk.ccg.logic.compute_function_semantics", false]], "compute_future_scores() (nltk.translate.stack_decoder.stackdecoder method)": [[340, "nltk.translate.stack_decoder.StackDecoder.compute_future_scores", false]], "compute_max_subtract_score() (nltk.parse.nonprojectivedependencyparser.probabilisticnonprojectiveparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser.compute_max_subtract_score", false]], "compute_original_indexes() (nltk.parse.nonprojectivedependencyparser.probabilisticnonprojectiveparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser.compute_original_indexes", false]], "compute_prob() (nltk.parse.projectivedependencyparser.probabilisticprojectivedependencyparser method)": [[172, "nltk.parse.projectivedependencyparser.ProbabilisticProjectiveDependencyParser.compute_prob", false]], "compute_semantics() (in module nltk.ccg.chart)": [[14, "nltk.ccg.chart.compute_semantics", false]], "compute_substitution_semantics() (in module nltk.ccg.logic)": [[17, "nltk.ccg.logic.compute_substitution_semantics", false]], "compute_type_raised_semantics() (in module nltk.ccg.logic)": [[17, "nltk.ccg.logic.compute_type_raised_semantics", false]], "concat() (in module nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.concat", false]], "concatenate() (nltk.parse.projectivedependencyparser.probabilisticprojectivedependencyparser method)": [[172, "nltk.parse.projectivedependencyparser.ProbabilisticProjectiveDependencyParser.concatenate", false]], "concatenate() (nltk.parse.projectivedependencyparser.projectivedependencyparser method)": [[172, "nltk.parse.projectivedependencyparser.ProjectiveDependencyParser.concatenate", false]], "concatenated_view() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.concatenated_view", false]], "concatenatedcorpusview (class in nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.ConcatenatedCorpusView", false]], "concept (class in nltk.sem.chat80)": [[182, "nltk.sem.chat80.Concept", false]], "concepts() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.concepts", false]], "concordance() (nltk.text.text method)": [[300, "nltk.text.Text.concordance", false]], "concordance_list() (nltk.text.text method)": [[300, "nltk.text.Text.concordance_list", false]], "concordanceindex (class in nltk.text)": [[300, "nltk.text.ConcordanceIndex", false]], "conditionalexponentialclassifier (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.ConditionalExponentialClassifier", false]], "conditionalfreqdist (class in nltk.probability)": [[179, "nltk.probability.ConditionalFreqDist", false]], "conditionalprobdist (class in nltk.probability)": [[179, "nltk.probability.ConditionalProbDist", false]], "conditionalprobdisti (class in nltk.probability)": [[179, "nltk.probability.ConditionalProbDistI", false]], "conditions() (nltk.probability.conditionalfreqdist method)": [[179, "nltk.probability.ConditionalFreqDist.conditions", false]], "conditions() (nltk.probability.conditionalprobdisti method)": [[179, "nltk.probability.ConditionalProbDistI.conditions", false]], "config_java() (in module nltk.internals)": [[131, "nltk.internals.config_java", false]], "config_megam() (in module nltk.classify.megam)": [[34, "nltk.classify.megam.config_megam", false]], "config_prover9() (nltk.inference.prover9.prover9parent method)": [[128, "nltk.inference.prover9.Prover9Parent.config_prover9", false]], "config_tadm() (in module nltk.classify.tadm)": [[41, "nltk.classify.tadm.config_tadm", false]], "config_weka() (in module nltk.classify.weka)": [[44, "nltk.classify.weka.config_weka", false]], "configuration (class in nltk.parse.transitionparser)": [[176, "nltk.parse.transitionparser.Configuration", false]], "configure() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.configure", false]], "conflicts() (in module nltk.featstruct)": [[120, "nltk.featstruct.conflicts", false]], "confusion() (nltk.tag.api.taggeri method)": [[214, "nltk.tag.api.TaggerI.confusion", false]], "confusionmatrix (class in nltk.metrics.confusionmatrix)": [[147, "nltk.metrics.confusionmatrix.ConfusionMatrix", false]], "conll_demo() (in module nltk.parse.dependencygraph)": [[164, "nltk.parse.dependencygraph.conll_demo", false]], "conll_file_demo() (in module nltk.parse.dependencygraph)": [[164, "nltk.parse.dependencygraph.conll_file_demo", false]], "conllchunkcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.ConllChunkCorpusReader", false]], "conllchunkcorpusreader (class in nltk.corpus.reader.conll)": [[69, "nltk.corpus.reader.conll.ConllChunkCorpusReader", false]], "conllcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.ConllCorpusReader", false]], "conllcorpusreader (class in nltk.corpus.reader.conll)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader", false]], "conllesp() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.conllesp", false]], "conllned() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.conllned", false]], "conllsrlinstance (class in nltk.corpus.reader.conll)": [[69, "nltk.corpus.reader.conll.ConllSRLInstance", false]], "conllsrlinstancelist (class in nltk.corpus.reader.conll)": [[69, "nltk.corpus.reader.conll.ConllSRLInstanceList", false]], "conllstr2tree() (in module nltk.chunk.util)": [[29, "nltk.chunk.util.conllstr2tree", false]], "conlltags2tree() (in module nltk.chunk.util)": [[29, "nltk.chunk.util.conlltags2tree", false]], "connect_graph() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.connect_graph", false]], "constantexpression (class in nltk.sem.linearlogic)": [[190, "nltk.sem.linearlogic.ConstantExpression", false]], "constantexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.ConstantExpression", false]], "constants (class in nltk.sem.hole)": [[188, "nltk.sem.hole.Constants", false]], "constants() (nltk.sem.logic.applicationexpression method)": [[191, "nltk.sem.logic.ApplicationExpression.constants", false]], "constants() (nltk.sem.logic.constantexpression method)": [[191, "nltk.sem.logic.ConstantExpression.constants", false]], "constants() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.constants", false]], "constants() (nltk.sem.logic.functionvariableexpression method)": [[191, "nltk.sem.logic.FunctionVariableExpression.constants", false]], "constants() (nltk.sem.logic.individualvariableexpression method)": [[191, "nltk.sem.logic.IndividualVariableExpression.constants", false]], "constraint (class in nltk.sem.hole)": [[188, "nltk.sem.hole.Constraint", false]], "contact (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.contact", false]], "contains() (nltk.grammar.dependencygrammar method)": [[121, "nltk.grammar.DependencyGrammar.contains", false]], "contains() (nltk.grammar.probabilisticdependencygrammar method)": [[121, "nltk.grammar.ProbabilisticDependencyGrammar.contains", false]], "contains_address() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.contains_address", false]], "contains_cycle() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.contains_cycle", false]], "context() (nltk.tag.sequential.affixtagger method)": [[223, "nltk.tag.sequential.AffixTagger.context", false]], "context() (nltk.tag.sequential.contexttagger method)": [[223, "nltk.tag.sequential.ContextTagger.context", false]], "context() (nltk.tag.sequential.ngramtagger method)": [[223, "nltk.tag.sequential.NgramTagger.context", false]], "context() (nltk.tag.sequential.unigramtagger method)": [[223, "nltk.tag.sequential.UnigramTagger.context", false]], "context_counts() (nltk.lm.api.languagemodel method)": [[136, "nltk.lm.api.LanguageModel.context_counts", false]], "contextindex (class in nltk.text)": [[300, "nltk.text.ContextIndex", false]], "contexts() (nltk.misc.minimalset.minimalset method)": [[156, "nltk.misc.minimalset.MinimalSet.contexts", false]], "contexttagger (class in nltk.tag.sequential)": [[223, "nltk.tag.sequential.ContextTagger", false]], "contingencymeasures (class in nltk.metrics.association)": [[146, "nltk.metrics.association.ContingencyMeasures", false]], "contractions2 (nltk.tokenize.destructive.macintyrecontractions attribute)": [[305, "nltk.tokenize.destructive.MacIntyreContractions.CONTRACTIONS2", false]], "contractions2 (nltk.tokenize.destructive.nltkwordtokenizer attribute)": [[305, "nltk.tokenize.destructive.NLTKWordTokenizer.CONTRACTIONS2", false]], "contractions2 (nltk.tokenize.treebank.treebankworddetokenizer attribute)": [[319, "nltk.tokenize.treebank.TreebankWordDetokenizer.CONTRACTIONS2", false]], "contractions2 (nltk.tokenize.treebank.treebankwordtokenizer attribute)": [[319, "nltk.tokenize.treebank.TreebankWordTokenizer.CONTRACTIONS2", false]], "contractions3 (nltk.tokenize.destructive.macintyrecontractions attribute)": [[305, "nltk.tokenize.destructive.MacIntyreContractions.CONTRACTIONS3", false]], "contractions3 (nltk.tokenize.destructive.nltkwordtokenizer attribute)": [[305, "nltk.tokenize.destructive.NLTKWordTokenizer.CONTRACTIONS3", false]], "contractions3 (nltk.tokenize.treebank.treebankworddetokenizer attribute)": [[319, "nltk.tokenize.treebank.TreebankWordDetokenizer.CONTRACTIONS3", false]], "contractions3 (nltk.tokenize.treebank.treebankwordtokenizer attribute)": [[319, "nltk.tokenize.treebank.TreebankWordTokenizer.CONTRACTIONS3", false]], "contractions4 (nltk.tokenize.destructive.macintyrecontractions attribute)": [[305, "nltk.tokenize.destructive.MacIntyreContractions.CONTRACTIONS4", false]], "converse() (nltk.chat.util.chat method)": [[23, "nltk.chat.util.Chat.converse", false]], "convert() (nltk.tree.immutable.immutableprobabilistictree class method)": [[342, "nltk.tree.immutable.ImmutableProbabilisticTree.convert", false]], "convert() (nltk.tree.immutableprobabilistictree class method)": [[341, "nltk.tree.ImmutableProbabilisticTree.convert", false]], "convert() (nltk.tree.probabilistic.probabilistictree class method)": [[346, "nltk.tree.probabilistic.ProbabilisticTree.convert", false]], "convert() (nltk.tree.probabilistictree class method)": [[341, "nltk.tree.ProbabilisticTree.convert", false]], "convert() (nltk.tree.tree class method)": [[341, "nltk.tree.Tree.convert", false]], "convert() (nltk.tree.tree.tree class method)": [[348, "nltk.tree.tree.Tree.convert", false]], "convert_age() (nltk.corpus.reader.childes.childescorpusreader method)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.convert_age", false]], "convert_age() (nltk.corpus.reader.childescorpusreader method)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.convert_age", false]], "convert_parentheses (nltk.tokenize.destructive.nltkwordtokenizer attribute)": [[305, "nltk.tokenize.destructive.NLTKWordTokenizer.CONVERT_PARENTHESES", false]], "convert_parentheses (nltk.tokenize.treebank.treebankworddetokenizer attribute)": [[319, "nltk.tokenize.treebank.TreebankWordDetokenizer.CONVERT_PARENTHESES", false]], "convert_parentheses (nltk.tokenize.treebank.treebankwordtokenizer attribute)": [[319, "nltk.tokenize.treebank.TreebankWordTokenizer.CONVERT_PARENTHESES", false]], "convert_to_prover9() (in module nltk.inference.prover9)": [[128, "nltk.inference.prover9.convert_to_prover9", false]], "cooperstore (class in nltk.sem.cooper_storage)": [[183, "nltk.sem.cooper_storage.CooperStore", false]], "copy() (nltk.collections.ordereddict method)": [[52, "nltk.collections.OrderedDict.copy", false]], "copy() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.copy", false]], "copy() (nltk.probability.conditionalfreqdist method)": [[179, "nltk.probability.ConditionalFreqDist.copy", false]], "copy() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.copy", false]], "copy() (nltk.sem.evaluate.assignment method)": [[186, "nltk.sem.evaluate.Assignment.copy", false]], "copy() (nltk.tree.immutable.immutableprobabilistictree method)": [[342, "nltk.tree.immutable.ImmutableProbabilisticTree.copy", false]], "copy() (nltk.tree.immutableprobabilistictree method)": [[341, "nltk.tree.ImmutableProbabilisticTree.copy", false]], "copy() (nltk.tree.parented.parentedtree method)": [[343, "nltk.tree.parented.ParentedTree.copy", false]], "copy() (nltk.tree.parentedtree method)": [[341, "nltk.tree.ParentedTree.copy", false]], "copy() (nltk.tree.probabilistic.probabilistictree method)": [[346, "nltk.tree.probabilistic.ProbabilisticTree.copy", false]], "copy() (nltk.tree.probabilistictree method)": [[341, "nltk.tree.ProbabilisticTree.copy", false]], "copy() (nltk.tree.tree method)": [[341, "nltk.tree.Tree.copy", false]], "copy() (nltk.tree.tree.tree method)": [[348, "nltk.tree.tree.Tree.copy", false]], "copyright (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.copyright", false]], "corenlpdependencyparser (class in nltk.parse.corenlp)": [[163, "nltk.parse.corenlp.CoreNLPDependencyParser", false]], "corenlpparser (class in nltk.parse.corenlp)": [[163, "nltk.parse.corenlp.CoreNLPParser", false]], "corenlpserver (class in nltk.parse.corenlp)": [[163, "nltk.parse.corenlp.CoreNLPServer", false]], "corenlpservererror": [[163, "nltk.parse.corenlp.CoreNLPServerError", false]], "corpora() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.corpora", false]], "corpus() (nltk.corpus.reader.childes.childescorpusreader method)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.corpus", false]], "corpus() (nltk.corpus.reader.childescorpusreader method)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.corpus", false]], "corpus_bleu() (in module nltk.translate.bleu_score)": [[324, "nltk.translate.bleu_score.corpus_bleu", false]], "corpus_chrf() (in module nltk.translate.chrf_score)": [[325, "nltk.translate.chrf_score.corpus_chrf", false]], "corpus_gleu() (in module nltk.translate.gleu_score)": [[328, "nltk.translate.gleu_score.corpus_gleu", false]], "corpus_nist() (in module nltk.translate.nist_score)": [[337, "nltk.translate.nist_score.corpus_nist", false]], "corpus_ribes() (in module nltk.translate.ribes_score)": [[339, "nltk.translate.ribes_score.corpus_ribes", false]], "corpus_size() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.corpus_size", false]], "corpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.CorpusReader", false]], "corpusreader (class in nltk.corpus.reader.api)": [[59, "nltk.corpus.reader.api.CorpusReader", false]], "corpusreader_demo() (in module nltk.twitter.twitter_demo)": [[354, "nltk.twitter.twitter_demo.corpusreader_demo", false]], "corpusview (nltk.corpus.reader.categorized_sents.categorizedsentencescorpusreader attribute)": [[63, "nltk.corpus.reader.categorized_sents.CategorizedSentencesCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.categorizedsentencescorpusreader attribute)": [[57, "nltk.corpus.reader.CategorizedSentencesCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.comparative_sents.comparativesentencescorpusreader attribute)": [[68, "nltk.corpus.reader.comparative_sents.ComparativeSentencesCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.comparativesentencescorpusreader attribute)": [[57, "nltk.corpus.reader.ComparativeSentencesCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.opinion_lexicon.opinionlexiconcorpusreader attribute)": [[83, "nltk.corpus.reader.opinion_lexicon.OpinionLexiconCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.opinionlexiconcorpusreader attribute)": [[57, "nltk.corpus.reader.OpinionLexiconCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.plaintext.plaintextcorpusreader attribute)": [[87, "nltk.corpus.reader.plaintext.PlaintextCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.plaintextcorpusreader attribute)": [[57, "nltk.corpus.reader.PlaintextCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.pros_cons.prosconscorpusreader attribute)": [[90, "nltk.corpus.reader.pros_cons.ProsConsCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.prosconscorpusreader attribute)": [[57, "nltk.corpus.reader.ProsConsCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.reviews.reviewscorpusreader attribute)": [[91, "nltk.corpus.reader.reviews.ReviewsCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.reviewscorpusreader attribute)": [[57, "nltk.corpus.reader.ReviewsCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.twitter.twittercorpusreader attribute)": [[102, "nltk.corpus.reader.twitter.TwitterCorpusReader.CorpusView", false]], "corpusview (nltk.corpus.reader.twittercorpusreader attribute)": [[57, "nltk.corpus.reader.TwitterCorpusReader.CorpusView", false]], "correct() (nltk.chunk.util.chunkscore method)": [[29, "nltk.chunk.util.ChunkScore.correct", false]], "cosine_distance() (in module nltk.cluster.util)": [[51, "nltk.cluster.util.cosine_distance", false]], "count() (nltk.collections.abstractlazysequence method)": [[52, "nltk.collections.AbstractLazySequence.count", false]], "count() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.count", false]], "count() (nltk.text.text method)": [[300, "nltk.text.Text.count", false]], "counter (class in nltk.internals)": [[131, "nltk.internals.Counter", false]], "counter (nltk.twitter.api.basictweethandler attribute)": [[352, "nltk.twitter.api.BasicTweetHandler.counter", false]], "counts (class in nltk.translate.ibm_model)": [[334, "nltk.translate.ibm_model.Counts", false]], "create_fake_language_model() (nltk.test.unit.translate.test_stack_decoder.teststackdecoder static method)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestStackDecoder.create_fake_language_model", false]], "create_fake_phrase_table() (nltk.test.unit.translate.test_stack_decoder.teststackdecoder static method)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestStackDecoder.create_fake_phrase_table", false]], "credsfromfile() (in module nltk.twitter.util)": [[356, "nltk.twitter.util.credsfromfile", false]], "crftagger (class in nltk.tag.crf)": [[217, "nltk.tag.crf.CRFTagger", false]], "crosseddirs() (in module nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.crossedDirs", false]], "crossvalidationprobdist (class in nltk.probability)": [[179, "nltk.probability.CrossValidationProbDist", false]], "crubadan_to_iso() (nltk.corpus.reader.crubadan.crubadancorpusreader method)": [[70, "nltk.corpus.reader.crubadan.CrubadanCorpusReader.crubadan_to_iso", false]], "crubadan_to_iso() (nltk.corpus.reader.crubadancorpusreader method)": [[57, "nltk.corpus.reader.CrubadanCorpusReader.crubadan_to_iso", false]], "crubadancorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.CrubadanCorpusReader", false]], "crubadancorpusreader (class in nltk.corpus.reader.crubadan)": [[70, "nltk.corpus.reader.crubadan.CrubadanCorpusReader", false]], "currency_sym (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.CURRENCY_SYM", false]], "currency_sym_re (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.CURRENCY_SYM_RE", false]], "current_chartrule() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.current_chartrule", false]], "currently_complete() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.currently_complete", false]], "curselection() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.curselection", false]], "custom_distance() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.custom_distance", false]], "custom_lemmas() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.custom_lemmas", false]], "custom_lemmas() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.custom_lemmas", false]], "cut_string() (in module nltk.util)": [[357, "nltk.util.cut_string", false]], "cutoff (nltk.lm.vocabulary property)": [[135, "nltk.lm.Vocabulary.cutoff", false]], "cutoff (nltk.lm.vocabulary.vocabulary property)": [[142, "nltk.lm.vocabulary.Vocabulary.cutoff", false]], "cutoffchecker (class in nltk.classify.util)": [[43, "nltk.classify.util.CutoffChecker", false]], "cycle_finding_demo() (in module nltk.parse.dependencygraph)": [[164, "nltk.parse.dependencygraph.cycle_finding_demo", false]], "cyclic() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.cyclic", false]], "d_neg (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.D_NEG", false]], "danishstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.DanishStemmer", false]], "dash_preceed_digit (nltk.tokenize.nist.nisttokenizer attribute)": [[308, "nltk.tokenize.nist.NISTTokenizer.DASH_PRECEED_DIGIT", false]], "data() (nltk.test.unit.test_corpus_views.testcorpusviews method)": [[263, "nltk.test.unit.test_corpus_views.TestCorpusViews.data", false]], "data_dict() (nltk.corpus.reader.bcp47.bcp47corpusreader method)": [[60, "nltk.corpus.reader.bcp47.BCP47CorpusReader.data_dict", false]], "data_dict() (nltk.corpus.reader.bcp47corpusreader method)": [[57, "nltk.corpus.reader.BCP47CorpusReader.data_dict", false]], "data_section() (nltk.classify.weka.arff_formatter method)": [[44, "nltk.classify.weka.ARFF_Formatter.data_section", false]], "debug (class in nltk.inference.tableau)": [[130, "nltk.inference.tableau.Debug", false]], "debug (nltk.data.seekableunicodestreamreader attribute)": [[111, "nltk.data.SeekableUnicodeStreamReader.DEBUG", false]], "debug_decisions() (nltk.tokenize.punkt.punktsentencetokenizer method)": [[309, "nltk.tokenize.punkt.PunktSentenceTokenizer.debug_decisions", false]], "debugobject (class in nltk.inference.resolution)": [[129, "nltk.inference.resolution.DebugObject", false]], "decisiontreeclassifier (class in nltk.classify.decisiontree)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier", false]], "decode (nltk.data.seekableunicodestreamreader attribute)": [[111, "nltk.data.SeekableUnicodeStreamReader.decode", false]], "decode() (nltk.jsontags.jsontaggeddecoder method)": [[132, "nltk.jsontags.JSONTaggedDecoder.decode", false]], "decode_json_obj() (nltk.tag.brill.brilltagger class method)": [[215, "nltk.tag.brill.BrillTagger.decode_json_obj", false]], "decode_json_obj() (nltk.tag.perceptron.averagedperceptron class method)": [[221, "nltk.tag.perceptron.AveragedPerceptron.decode_json_obj", false]], "decode_json_obj() (nltk.tag.perceptron.perceptrontagger class method)": [[221, "nltk.tag.perceptron.PerceptronTagger.decode_json_obj", false]], "decode_json_obj() (nltk.tag.sequential.affixtagger class method)": [[223, "nltk.tag.sequential.AffixTagger.decode_json_obj", false]], "decode_json_obj() (nltk.tag.sequential.defaulttagger class method)": [[223, "nltk.tag.sequential.DefaultTagger.decode_json_obj", false]], "decode_json_obj() (nltk.tag.sequential.ngramtagger class method)": [[223, "nltk.tag.sequential.NgramTagger.decode_json_obj", false]], "decode_json_obj() (nltk.tag.sequential.regexptagger class method)": [[223, "nltk.tag.sequential.RegexpTagger.decode_json_obj", false]], "decode_json_obj() (nltk.tbl.feature.feature class method)": [[231, "nltk.tbl.feature.Feature.decode_json_obj", false]], "decode_json_obj() (nltk.tbl.rule.rule class method)": [[232, "nltk.tbl.rule.Rule.decode_json_obj", false]], "decode_obj() (nltk.jsontags.jsontaggeddecoder class method)": [[132, "nltk.jsontags.JSONTaggedDecoder.decode_obj", false]], "decode_result() (in module nltk.inference.mace)": [[126, "nltk.inference.mace.decode_result", false]], "decode_tag() (nltk.corpus.reader.pl196x.pl196xcorpusreader method)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader.decode_tag", false]], "decode_tag() (nltk.corpus.reader.pl196xcorpusreader method)": [[57, "nltk.corpus.reader.Pl196xCorpusReader.decode_tag", false]], "decorate_proof() (nltk.inference.api.baseprovercommand method)": [[124, "nltk.inference.api.BaseProverCommand.decorate_proof", false]], "decorate_proof() (nltk.inference.api.provercommanddecorator method)": [[124, "nltk.inference.api.ProverCommandDecorator.decorate_proof", false]], "decorate_proof() (nltk.inference.prover9.prover9command method)": [[128, "nltk.inference.prover9.Prover9Command.decorate_proof", false]], "decorator() (in module nltk.decorators)": [[112, "nltk.decorators.decorator", false]], "deepcopy() (nltk.probability.conditionalfreqdist method)": [[179, "nltk.probability.ConditionalFreqDist.deepcopy", false]], "default (nltk.featstruct.feature property)": [[120, "nltk.featstruct.Feature.default", false]], "default() (nltk.jsontags.jsontaggedencoder method)": [[132, "nltk.jsontags.JSONTaggedEncoder.default", false]], "default_column_width (nltk.downloader.downloadergui attribute)": [[113, "nltk.downloader.DownloaderGUI.DEFAULT_COLUMN_WIDTH", false]], "default_config() (nltk.tokenize.stanford_segmenter.stanfordsegmenter method)": [[316, "nltk.tokenize.stanford_segmenter.StanfordSegmenter.default_config", false]], "default_download_dir() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.default_download_dir", false]], "default_reasoning_demo() (in module nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.default_reasoning_demo", false]], "default_rule_tuple (nltk.stem.lancaster.lancasterstemmer attribute)": [[205, "nltk.stem.lancaster.LancasterStemmer.default_rule_tuple", false]], "default_url (nltk.downloader.downloader attribute)": [[113, "nltk.downloader.Downloader.DEFAULT_URL", false]], "default_ws (nltk.collocations.bigramcollocationfinder attribute)": [[53, "nltk.collocations.BigramCollocationFinder.default_ws", false]], "default_ws (nltk.collocations.quadgramcollocationfinder attribute)": [[53, "nltk.collocations.QuadgramCollocationFinder.default_ws", false]], "default_ws (nltk.collocations.trigramcollocationfinder attribute)": [[53, "nltk.collocations.TrigramCollocationFinder.default_ws", false]], "defaulttagger (class in nltk.tag.sequential)": [[223, "nltk.tag.sequential.DefaultTagger", false]], "definition() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.definition", false]], "delete() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.delete", false]], "delta() (in module nltk.metrics.aline)": [[145, "nltk.metrics.aline.delta", false]], "demo() (in module nltk)": [[0, "nltk.demo", false]], "demo() (in module nltk.ccg.chart)": [[14, "nltk.ccg.chart.demo", false]], "demo() (in module nltk.chat.eliza)": [[19, "nltk.chat.eliza.demo", false]], "demo() (in module nltk.chat.iesha)": [[20, "nltk.chat.iesha.demo", false]], "demo() (in module nltk.chat.rude)": [[21, "nltk.chat.rude.demo", false]], "demo() (in module nltk.chat.suntsu)": [[22, "nltk.chat.suntsu.demo", false]], "demo() (in module nltk.chat.zen)": [[24, "nltk.chat.zen.demo", false]], "demo() (in module nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.demo", false]], "demo() (in module nltk.chunk.util)": [[29, "nltk.chunk.util.demo", false]], "demo() (in module nltk.classify.decisiontree)": [[32, "nltk.classify.decisiontree.demo", false]], "demo() (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.demo", false]], "demo() (in module nltk.classify.naivebayes)": [[35, "nltk.classify.naivebayes.demo", false]], "demo() (in module nltk.classify.positivenaivebayes)": [[36, "nltk.classify.positivenaivebayes.demo", false]], "demo() (in module nltk.classify.textcat)": [[42, "nltk.classify.textcat.demo", false]], "demo() (in module nltk.cluster.em)": [[48, "nltk.cluster.em.demo", false]], "demo() (in module nltk.cluster.gaac)": [[49, "nltk.cluster.gaac.demo", false]], "demo() (in module nltk.cluster.kmeans)": [[50, "nltk.cluster.kmeans.demo", false]], "demo() (in module nltk.corpus)": [[55, "nltk.corpus.demo", false]], "demo() (in module nltk.corpus.reader.chasen)": [[64, "nltk.corpus.reader.chasen.demo", false]], "demo() (in module nltk.corpus.reader.childes)": [[65, "nltk.corpus.reader.childes.demo", false]], "demo() (in module nltk.corpus.reader.framenet)": [[72, "nltk.corpus.reader.framenet.demo", false]], "demo() (in module nltk.corpus.reader.knbc)": [[76, "nltk.corpus.reader.knbc.demo", false]], "demo() (in module nltk.corpus.reader.lin)": [[77, "nltk.corpus.reader.lin.demo", false]], "demo() (in module nltk.corpus.reader.toolbox)": [[101, "nltk.corpus.reader.toolbox.demo", false]], "demo() (in module nltk.draw.cfg)": [[115, "nltk.draw.cfg.demo", false]], "demo() (in module nltk.draw.table)": [[117, "nltk.draw.table.demo", false]], "demo() (in module nltk.draw.tree)": [[118, "nltk.draw.tree.demo", false]], "demo() (in module nltk.draw.util)": [[119, "nltk.draw.util.demo", false]], "demo() (in module nltk.inference.discourse)": [[125, "nltk.inference.discourse.demo", false]], "demo() (in module nltk.inference.mace)": [[126, "nltk.inference.mace.demo", false]], "demo() (in module nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.demo", false]], "demo() (in module nltk.inference.prover9)": [[128, "nltk.inference.prover9.demo", false]], "demo() (in module nltk.inference.resolution)": [[129, "nltk.inference.resolution.demo", false]], "demo() (in module nltk.inference.tableau)": [[130, "nltk.inference.tableau.demo", false]], "demo() (in module nltk.metrics.aline)": [[145, "nltk.metrics.aline.demo", false]], "demo() (in module nltk.metrics.confusionmatrix)": [[147, "nltk.metrics.confusionmatrix.demo", false]], "demo() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.demo", false]], "demo() (in module nltk.metrics.paice)": [[149, "nltk.metrics.paice.demo", false]], "demo() (in module nltk.metrics.scores)": [[150, "nltk.metrics.scores.demo", false]], "demo() (in module nltk.misc.sort)": [[157, "nltk.misc.sort.demo", false]], "demo() (in module nltk.parse.chart)": [[162, "nltk.parse.chart.demo", false]], "demo() (in module nltk.parse.dependencygraph)": [[164, "nltk.parse.dependencygraph.demo", false]], "demo() (in module nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.demo", false]], "demo() (in module nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.demo", false]], "demo() (in module nltk.parse.generate)": [[168, "nltk.parse.generate.demo", false]], "demo() (in module nltk.parse.nonprojectivedependencyparser)": [[170, "nltk.parse.nonprojectivedependencyparser.demo", false]], "demo() (in module nltk.parse.pchart)": [[171, "nltk.parse.pchart.demo", false]], "demo() (in module nltk.parse.projectivedependencyparser)": [[172, "nltk.parse.projectivedependencyparser.demo", false]], "demo() (in module nltk.parse.recursivedescent)": [[173, "nltk.parse.recursivedescent.demo", false]], "demo() (in module nltk.parse.shiftreduce)": [[174, "nltk.parse.shiftreduce.demo", false]], "demo() (in module nltk.parse.transitionparser)": [[176, "nltk.parse.transitionparser.demo", false]], "demo() (in module nltk.parse.viterbi)": [[178, "nltk.parse.viterbi.demo", false]], "demo() (in module nltk.sem.cooper_storage)": [[183, "nltk.sem.cooper_storage.demo", false]], "demo() (in module nltk.sem.drt)": [[184, "nltk.sem.drt.demo", false]], "demo() (in module nltk.sem.drt_glue_demo)": [[185, "nltk.sem.drt_glue_demo.demo", false]], "demo() (in module nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.demo", false]], "demo() (in module nltk.sem.glue)": [[187, "nltk.sem.glue.demo", false]], "demo() (in module nltk.sem.linearlogic)": [[190, "nltk.sem.linearlogic.demo", false]], "demo() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.demo", false]], "demo() (in module nltk.sem.util)": [[194, "nltk.sem.util.demo", false]], "demo() (in module nltk.stem.porter)": [[206, "nltk.stem.porter.demo", false]], "demo() (in module nltk.stem.snowball)": [[209, "nltk.stem.snowball.demo", false]], "demo() (in module nltk.tag.hmm)": [[218, "nltk.tag.hmm.demo", false]], "demo() (in module nltk.tag.tnt)": [[225, "nltk.tag.tnt.demo", false]], "demo() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo", false]], "demo() (in module nltk.tokenize.punkt)": [[309, "nltk.tokenize.punkt.demo", false]], "demo() (in module nltk.tokenize.texttiling)": [[317, "nltk.tokenize.texttiling.demo", false]], "demo() (in module nltk.toolbox)": [[321, "nltk.toolbox.demo", false]], "demo2() (in module nltk.draw.cfg)": [[115, "nltk.draw.cfg.demo2", false]], "demo2() (in module nltk.tag.tnt)": [[225, "nltk.tag.tnt.demo2", false]], "demo3() (in module nltk.draw.cfg)": [[115, "nltk.draw.cfg.demo3", false]], "demo3() (in module nltk.tag.tnt)": [[225, "nltk.tag.tnt.demo3", false]], "demo_bw() (in module nltk.tag.hmm)": [[218, "nltk.tag.hmm.demo_bw", false]], "demo_error_analysis() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo_error_analysis", false]], "demo_errors() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.demo_errors", false]], "demo_eval() (in module nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.demo_eval", false]], "demo_generated_templates() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo_generated_templates", false]], "demo_grammar() (in module nltk.parse.chart)": [[162, "nltk.parse.chart.demo_grammar", false]], "demo_grammar() (in module nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.demo_grammar", false]], "demo_high_accuracy_rules() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo_high_accuracy_rules", false]], "demo_learning_curve() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo_learning_curve", false]], "demo_legacy_grammar() (in module nltk.sem.util)": [[194, "nltk.sem.util.demo_legacy_grammar", false]], "demo_liu_hu_lexicon() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.demo_liu_hu_lexicon", false]], "demo_model0() (in module nltk.sem.util)": [[194, "nltk.sem.util.demo_model0", false]], "demo_movie_reviews() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.demo_movie_reviews", false]], "demo_multifeature_template() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo_multifeature_template", false]], "demo_multiposition_feature() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo_multiposition_feature", false]], "demo_pos() (in module nltk.tag.hmm)": [[218, "nltk.tag.hmm.demo_pos", false]], "demo_pos_bw() (in module nltk.tag.hmm)": [[218, "nltk.tag.hmm.demo_pos_bw", false]], "demo_read_depgraph() (in module nltk.sem.lfg)": [[189, "nltk.sem.lfg.demo_read_depgraph", false]], "demo_repr_rule_format() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo_repr_rule_format", false]], "demo_sent_subjectivity() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.demo_sent_subjectivity", false]], "demo_serialize_tagger() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo_serialize_tagger", false]], "demo_str_rule_format() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo_str_rule_format", false]], "demo_subjectivity() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.demo_subjectivity", false]], "demo_template_statistics() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo_template_statistics", false]], "demo_tweets() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.demo_tweets", false]], "demo_vader_instance() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.demo_vader_instance", false]], "demo_vader_tweets() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.demo_vader_tweets", false]], "demo_verbose_rule_format() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.demo_verbose_rule_format", false]], "demoexception() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.demoException", false]], "demoscorer (class in nltk.parse.nonprojectivedependencyparser)": [[170, "nltk.parse.nonprojectivedependencyparser.DemoScorer", false]], "dendrogram (class in nltk.cluster.util)": [[51, "nltk.cluster.util.Dendrogram", false]], "dendrogram() (nltk.cluster.gaac.gaaclusterer method)": [[49, "nltk.cluster.gaac.GAAClusterer.dendrogram", false]], "denominator (nltk.translate.bleu_score.fraction property)": [[324, "nltk.translate.bleu_score.Fraction.denominator", false]], "dep_parse() (nltk.sem.glue.glue method)": [[187, "nltk.sem.glue.Glue.dep_parse", false]], "dependencycorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.DependencyCorpusReader", false]], "dependencycorpusreader (class in nltk.corpus.reader.dependency)": [[71, "nltk.corpus.reader.dependency.DependencyCorpusReader", false]], "dependencycorpusview (class in nltk.corpus.reader.dependency)": [[71, "nltk.corpus.reader.dependency.DependencyCorpusView", false]], "dependencyevaluator (class in nltk.parse.evaluate)": [[166, "nltk.parse.evaluate.DependencyEvaluator", false]], "dependencygrammar (class in nltk.grammar)": [[121, "nltk.grammar.DependencyGrammar", false]], "dependencygraph (class in nltk.parse.dependencygraph)": [[164, "nltk.parse.dependencygraph.DependencyGraph", false]], "dependencygrapherror": [[164, "nltk.parse.dependencygraph.DependencyGraphError", false]], "dependencyproduction (class in nltk.grammar)": [[121, "nltk.grammar.DependencyProduction", false]], "dependencyscoreri (class in nltk.parse.nonprojectivedependencyparser)": [[170, "nltk.parse.nonprojectivedependencyparser.DependencyScorerI", false]], "dependencyspan (class in nltk.parse.projectivedependencyparser)": [[172, "nltk.parse.projectivedependencyparser.DependencySpan", false]], "depgraph_to_glue() (nltk.sem.glue.glue method)": [[187, "nltk.sem.glue.Glue.depgraph_to_glue", false]], "deprecated (class in nltk.internals)": [[131, "nltk.internals.Deprecated", false]], "deprecated() (in module nltk.internals)": [[131, "nltk.internals.deprecated", false]], "derivationally_related_forms() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.derivationally_related_forms", false]], "descape_entity() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.descape_entity", false]], "descr() (nltk.chunk.regexp.regexpchunkrule method)": [[28, "nltk.chunk.regexp.RegexpChunkRule.descr", false]], "describe() (nltk.classify.maxent.binarymaxentfeatureencoding method)": [[33, "nltk.classify.maxent.BinaryMaxentFeatureEncoding.describe", false]], "describe() (nltk.classify.maxent.functionbackedmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.FunctionBackedMaxentFeatureEncoding.describe", false]], "describe() (nltk.classify.maxent.gisencoding method)": [[33, "nltk.classify.maxent.GISEncoding.describe", false]], "describe() (nltk.classify.maxent.maxentfeatureencodingi method)": [[33, "nltk.classify.maxent.MaxentFeatureEncodingI.describe", false]], "describe() (nltk.classify.maxent.tadmeventmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.TadmEventMaxentFeatureEncoding.describe", false]], "describe() (nltk.classify.maxent.typedmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.TypedMaxentFeatureEncoding.describe", false]], "describe_template_sets() (in module nltk.tag.brill)": [[215, "nltk.tag.brill.describe_template_sets", false]], "destroy() (nltk.downloader.downloadergui method)": [[113, "nltk.downloader.DownloaderGUI.destroy", false]], "destroy() (nltk.draw.cfg.cfgdemo method)": [[115, "nltk.draw.cfg.CFGDemo.destroy", false]], "destroy() (nltk.draw.tree.treeview method)": [[118, "nltk.draw.tree.TreeView.destroy", false]], "destroy() (nltk.draw.util.canvasframe method)": [[119, "nltk.draw.util.CanvasFrame.destroy", false]], "destroy() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.destroy", false]], "destroy() (nltk.draw.util.mutableoptionmenu method)": [[119, "nltk.draw.util.MutableOptionMenu.destroy", false]], "destroy() (nltk.draw.util.showtext method)": [[119, "nltk.draw.util.ShowText.destroy", false]], "destroy() (nltk.sem.drt_glue_demo.drtgluedemo method)": [[185, "nltk.sem.drt_glue_demo.DrtGlueDemo.destroy", false]], "destroy_widget() (nltk.draw.util.canvasframe method)": [[119, "nltk.draw.util.CanvasFrame.destroy_widget", false]], "detokenize() (nltk.tokenize.treebank.treebankworddetokenizer method)": [[319, "nltk.tokenize.treebank.TreebankWordDetokenizer.detokenize", false]], "dice() (nltk.metrics.association.bigramassocmeasures static method)": [[146, "nltk.metrics.association.BigramAssocMeasures.dice", false]], "dict() (nltk.corpus.reader.cmudict.cmudictcorpusreader method)": [[67, "nltk.corpus.reader.cmudict.CMUDictCorpusReader.dict", false]], "dict() (nltk.corpus.reader.cmudictcorpusreader method)": [[57, "nltk.corpus.reader.CMUDictCorpusReader.dict", false]], "dict2tab() (nltk.tabdata.tabencoder method)": [[212, "nltk.tabdata.TabEncoder.dict2tab", false]], "dictionaryconditionalprobdist (class in nltk.probability)": [[179, "nltk.probability.DictionaryConditionalProbDist", false]], "dictionaryprobdist (class in nltk.probability)": [[179, "nltk.probability.DictionaryProbDist", false]], "diff() (in module nltk.metrics.aline)": [[145, "nltk.metrics.aline.diff", false]], "digraph() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.digraph", false]], "digraph() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.digraph", false]], "dir() (nltk.ccg.api.direction method)": [[13, "nltk.ccg.api.Direction.dir", false]], "dir() (nltk.ccg.api.functionalcategory method)": [[13, "nltk.ccg.api.FunctionalCategory.dir", false]], "directedbinarycombinator (class in nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.DirectedBinaryCombinator", false]], "direction (class in nltk.ccg.api)": [[13, "nltk.ccg.api.Direction", false]], "disable_custom_lemmas() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.disable_custom_lemmas", false]], "disable_custom_lemmas() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.disable_custom_lemmas", false]], "disagreement() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.Disagreement", false]], "discard_line() (nltk.data.seekableunicodestreamreader method)": [[111, "nltk.data.SeekableUnicodeStreamReader.discard_line", false]], "discount() (nltk.probability.crossvalidationprobdist method)": [[179, "nltk.probability.CrossValidationProbDist.discount", false]], "discount() (nltk.probability.heldoutprobdist method)": [[179, "nltk.probability.HeldoutProbDist.discount", false]], "discount() (nltk.probability.kneserneyprobdist method)": [[179, "nltk.probability.KneserNeyProbDist.discount", false]], "discount() (nltk.probability.lidstoneprobdist method)": [[179, "nltk.probability.LidstoneProbDist.discount", false]], "discount() (nltk.probability.probdisti method)": [[179, "nltk.probability.ProbDistI.discount", false]], "discount() (nltk.probability.simplegoodturingprobdist method)": [[179, "nltk.probability.SimpleGoodTuringProbDist.discount", false]], "discount() (nltk.probability.wittenbellprobdist method)": [[179, "nltk.probability.WittenBellProbDist.discount", false]], "discourse_demo() (in module nltk.inference.discourse)": [[125, "nltk.inference.discourse.discourse_demo", false]], "discourses() (nltk.corpus.reader.switchboard.switchboardcorpusreader method)": [[98, "nltk.corpus.reader.switchboard.SwitchboardCorpusReader.discourses", false]], "discourses() (nltk.corpus.reader.switchboardcorpusreader method)": [[57, "nltk.corpus.reader.SwitchboardCorpusReader.discourses", false]], "discoursetester (class in nltk.inference.discourse)": [[125, "nltk.inference.discourse.DiscourseTester", false]], "dispersion_plot() (in module nltk.draw.dispersion)": [[116, "nltk.draw.dispersion.dispersion_plot", false]], "dispersion_plot() (nltk.text.text method)": [[300, "nltk.text.Text.dispersion_plot", false]], "display (nltk.featstruct.feature property)": [[120, "nltk.featstruct.Feature.display", false]], "display() (nltk.misc.minimalset.minimalset method)": [[156, "nltk.misc.minimalset.MinimalSet.display", false]], "display_all() (nltk.misc.minimalset.minimalset method)": [[156, "nltk.misc.minimalset.MinimalSet.display_all", false]], "distortion_factor (nltk.translate.stack_decoder.stackdecoder property)": [[340, "nltk.translate.stack_decoder.StackDecoder.distortion_factor", false]], "distortion_score() (nltk.translate.stack_decoder.stackdecoder method)": [[340, "nltk.translate.stack_decoder.StackDecoder.distortion_score", false]], "do_continue() (nltk.twitter.api.basictweethandler method)": [[352, "nltk.twitter.api.BasicTweetHandler.do_continue", false]], "do_continue() (nltk.twitter.twitterclient.tweetwriter method)": [[355, "nltk.twitter.twitterclient.TweetWriter.do_continue", false]], "do_kw() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.Do_Kw", false]], "do_kw_pairwise() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.Do_Kw_pairwise", false]], "do_stop (nltk.twitter.api.basictweethandler attribute)": [[352, "nltk.twitter.api.BasicTweetHandler.do_stop", false]], "doc() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.doc", false]], "doc() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.doc", false]], "doc() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.doc", false]], "doc() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.doc", false]], "docs() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.docs", false]], "docs() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.docs", false]], "docs() (nltk.corpus.reader.ieer.ieercorpusreader method)": [[73, "nltk.corpus.reader.ieer.IEERCorpusReader.docs", false]], "docs() (nltk.corpus.reader.ieercorpusreader method)": [[57, "nltk.corpus.reader.IEERCorpusReader.docs", false]], "docs() (nltk.corpus.reader.twitter.twittercorpusreader method)": [[102, "nltk.corpus.reader.twitter.TwitterCorpusReader.docs", false]], "docs() (nltk.corpus.reader.twittercorpusreader method)": [[57, "nltk.corpus.reader.TwitterCorpusReader.docs", false]], "docs_metadata() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.docs_metadata", false]], "docs_metadata() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.docs_metadata", false]], "documents (in module nltk.corpus.reader.ieer)": [[73, "nltk.corpus.reader.ieer.documents", false]], "documents (in module nltk.corpus.reader.ycoe)": [[109, "nltk.corpus.reader.ycoe.documents", false]], "documents() (nltk.corpus.reader.ycoe.ycoecorpusreader method)": [[109, "nltk.corpus.reader.ycoe.YCOECorpusReader.documents", false]], "documents() (nltk.corpus.reader.ycoecorpusreader method)": [[57, "nltk.corpus.reader.YCOECorpusReader.documents", false]], "domain (nltk.sem.evaluate.valuation property)": [[186, "nltk.sem.evaluate.Valuation.domain", false]], "domains() (nltk.corpus.reader.ipipan.ipipancorpusreader method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader.domains", false]], "domains() (nltk.corpus.reader.ipipancorpusreader method)": [[57, "nltk.corpus.reader.IPIPANCorpusReader.domains", false]], "dot (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.DOT", false]], "dot() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.dot", false]], "dot() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.dot", false]], "dot() (nltk.parse.chart.edgei method)": [[162, "nltk.parse.chart.EdgeI.dot", false]], "dot() (nltk.parse.chart.leafedge method)": [[162, "nltk.parse.chart.LeafEdge.dot", false]], "dot() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.dot", false]], "dot2img() (in module nltk.parse.dependencygraph)": [[164, "nltk.parse.dependencygraph.dot2img", false]], "dot_digraph() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.dot_digraph", false]], "double_dashes (nltk.tokenize.destructive.nltkwordtokenizer attribute)": [[305, "nltk.tokenize.destructive.NLTKWordTokenizer.DOUBLE_DASHES", false]], "double_dashes (nltk.tokenize.treebank.treebankworddetokenizer attribute)": [[319, "nltk.tokenize.treebank.TreebankWordDetokenizer.DOUBLE_DASHES", false]], "double_dashes (nltk.tokenize.treebank.treebankwordtokenizer attribute)": [[319, "nltk.tokenize.treebank.TreebankWordTokenizer.DOUBLE_DASHES", false]], "download() (in module nltk.downloader)": [[113, "nltk.downloader.download", false]], "download() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.download", false]], "download_dir (nltk.downloader.downloader property)": [[113, "nltk.downloader.Downloader.download_dir", false]], "download_gui() (in module nltk.downloader)": [[113, "nltk.downloader.download_gui", false]], "download_shell() (in module nltk.downloader)": [[113, "nltk.downloader.download_shell", false]], "downloader (class in nltk.downloader)": [[113, "nltk.downloader.Downloader", false]], "downloadergui (class in nltk.downloader)": [[113, "nltk.downloader.DownloaderGUI", false]], "downloadermessage (class in nltk.downloader)": [[113, "nltk.downloader.DownloaderMessage", false]], "downloadershell (class in nltk.downloader)": [[113, "nltk.downloader.DownloaderShell", false]], "draw() (nltk.sem.drt.drsdrawer method)": [[184, "nltk.sem.drt.DrsDrawer.draw", false]], "draw() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.draw", false]], "draw() (nltk.sem.drt_glue_demo.drswidget method)": [[185, "nltk.sem.drt_glue_demo.DrsWidget.draw", false]], "draw() (nltk.tree.tree method)": [[341, "nltk.tree.Tree.draw", false]], "draw() (nltk.tree.tree.tree method)": [[348, "nltk.tree.tree.Tree.draw", false]], "draw_trees() (in module nltk.draw.tree)": [[118, "nltk.draw.tree.draw_trees", false]], "drs (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DRS", false]], "drs (nltk.sem.drt.drttokens attribute)": [[184, "nltk.sem.drt.DrtTokens.DRS", false]], "drs_conc (nltk.sem.drt.drttokens attribute)": [[184, "nltk.sem.drt.DrtTokens.DRS_CONC", false]], "drsdrawer (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrsDrawer", false]], "drswidget (class in nltk.sem.drt_glue_demo)": [[185, "nltk.sem.drt_glue_demo.DrsWidget", false]], "drt_discourse_demo() (in module nltk.inference.discourse)": [[125, "nltk.inference.discourse.drt_discourse_demo", false]], "drtabstractvariableexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtAbstractVariableExpression", false]], "drtapplicationexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtApplicationExpression", false]], "drtbinaryexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtBinaryExpression", false]], "drtbooleanexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtBooleanExpression", false]], "drtconcatenation (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtConcatenation", false]], "drtconstantexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtConstantExpression", false]], "drtequalityexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtEqualityExpression", false]], "drteventvariableexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtEventVariableExpression", false]], "drtexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtExpression", false]], "drtfunctionvariableexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtFunctionVariableExpression", false]], "drtglue (class in nltk.sem.glue)": [[187, "nltk.sem.glue.DrtGlue", false]], "drtgluedemo (class in nltk.sem.drt_glue_demo)": [[185, "nltk.sem.drt_glue_demo.DrtGlueDemo", false]], "drtgluedict (class in nltk.sem.glue)": [[187, "nltk.sem.glue.DrtGlueDict", false]], "drtglueformula (class in nltk.sem.glue)": [[187, "nltk.sem.glue.DrtGlueFormula", false]], "drtgluereadingcommand (class in nltk.inference.discourse)": [[125, "nltk.inference.discourse.DrtGlueReadingCommand", false]], "drtindividualvariableexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtIndividualVariableExpression", false]], "drtlambdaexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtLambdaExpression", false]], "drtnegatedexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtNegatedExpression", false]], "drtorexpression (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtOrExpression", false]], "drtparser (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtParser", false]], "drtproposition (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtProposition", false]], "drttokens (class in nltk.sem.drt)": [[184, "nltk.sem.drt.DrtTokens", false]], "drtvariableexpression() (in module nltk.sem.drt)": [[184, "nltk.sem.drt.DrtVariableExpression", false]], "dstoffset (nltk.twitter.api.localtimezoneoffsetwithutc attribute)": [[352, "nltk.twitter.api.LocalTimezoneOffsetWithUTC.DSTOFFSET", false]], "dump() (nltk.tokenize.punkt.punktsentencetokenizer method)": [[309, "nltk.tokenize.punkt.PunktSentenceTokenizer.dump", false]], "dutchstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.DutchStemmer", false]], "earleychartparser (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.EarleyChartParser", false]], "edge_closure() (in module nltk.util)": [[357, "nltk.util.edge_closure", false]], "edgei (class in nltk.parse.chart)": [[162, "nltk.parse.chart.EdgeI", false]], "edges() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.edges", false]], "edges() (nltk.parse.earleychart.incrementalchart method)": [[165, "nltk.parse.earleychart.IncrementalChart.edges", false]], "edges2dot() (in module nltk.util)": [[357, "nltk.util.edges2dot", false]], "edit_distance() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.edit_distance", false]], "edit_distance_align() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.edit_distance_align", false]], "editor (nltk.corpus.reader.bnc.bncwordview attribute)": [[61, "nltk.corpus.reader.bnc.BNCWordView.editor", false]], "elementtree_indent() (in module nltk.util)": [[357, "nltk.util.elementtree_indent", false]], "elementwrapper (class in nltk.internals)": [[131, "nltk.internals.ElementWrapper", false]], "eleprobdist (class in nltk.probability)": [[179, "nltk.probability.ELEProbDist", false]], "eliminate_equality() (nltk.sem.drt.drs method)": [[184, "nltk.sem.drt.DRS.eliminate_equality", false]], "eliminate_equality() (nltk.sem.drt.drtabstractvariableexpression method)": [[184, "nltk.sem.drt.DrtAbstractVariableExpression.eliminate_equality", false]], "eliminate_equality() (nltk.sem.drt.drtconcatenation method)": [[184, "nltk.sem.drt.DrtConcatenation.eliminate_equality", false]], "eliminate_equality() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.eliminate_equality", false]], "eliminate_equality() (nltk.sem.drt.drtproposition method)": [[184, "nltk.sem.drt.DrtProposition.eliminate_equality", false]], "eliminate_start() (nltk.grammar.cfg class method)": [[121, "nltk.grammar.CFG.eliminate_start", false]], "eliza_chat() (in module nltk.chat.eliza)": [[19, "nltk.chat.eliza.eliza_chat", false]], "ellipsis (nltk.tokenize.punkt.punkttoken attribute)": [[309, "nltk.tokenize.punkt.PunktToken.ellipsis", false]], "emclusterer (class in nltk.cluster.em)": [[48, "nltk.cluster.em.EMClusterer", false]], "emptypredictrule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.EmptyPredictRule", false]], "en_em_dashes (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.EN_EM_DASHES", false]], "encode() (nltk.classify.maxent.binarymaxentfeatureencoding method)": [[33, "nltk.classify.maxent.BinaryMaxentFeatureEncoding.encode", false]], "encode() (nltk.classify.maxent.functionbackedmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.FunctionBackedMaxentFeatureEncoding.encode", false]], "encode() (nltk.classify.maxent.gisencoding method)": [[33, "nltk.classify.maxent.GISEncoding.encode", false]], "encode() (nltk.classify.maxent.maxentfeatureencodingi method)": [[33, "nltk.classify.maxent.MaxentFeatureEncodingI.encode", false]], "encode() (nltk.classify.maxent.tadmeventmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.TadmEventMaxentFeatureEncoding.encode", false]], "encode() (nltk.classify.maxent.typedmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.TypedMaxentFeatureEncoding.encode", false]], "encode_json_obj() (nltk.tag.brill.brilltagger method)": [[215, "nltk.tag.brill.BrillTagger.encode_json_obj", false]], "encode_json_obj() (nltk.tag.perceptron.averagedperceptron method)": [[221, "nltk.tag.perceptron.AveragedPerceptron.encode_json_obj", false]], "encode_json_obj() (nltk.tag.perceptron.perceptrontagger method)": [[221, "nltk.tag.perceptron.PerceptronTagger.encode_json_obj", false]], "encode_json_obj() (nltk.tag.sequential.affixtagger method)": [[223, "nltk.tag.sequential.AffixTagger.encode_json_obj", false]], "encode_json_obj() (nltk.tag.sequential.defaulttagger method)": [[223, "nltk.tag.sequential.DefaultTagger.encode_json_obj", false]], "encode_json_obj() (nltk.tag.sequential.ngramtagger method)": [[223, "nltk.tag.sequential.NgramTagger.encode_json_obj", false]], "encode_json_obj() (nltk.tag.sequential.regexptagger method)": [[223, "nltk.tag.sequential.RegexpTagger.encode_json_obj", false]], "encode_json_obj() (nltk.tbl.feature.feature method)": [[231, "nltk.tbl.feature.Feature.encode_json_obj", false]], "encode_json_obj() (nltk.tbl.rule.rule method)": [[232, "nltk.tbl.rule.Rule.encode_json_obj", false]], "encoding (nltk.data.seekableunicodestreamreader attribute)": [[111, "nltk.data.SeekableUnicodeStreamReader.encoding", false]], "encoding() (nltk.corpus.reader.api.corpusreader method)": [[59, "nltk.corpus.reader.api.CorpusReader.encoding", false]], "encoding() (nltk.corpus.reader.corpusreader method)": [[57, "nltk.corpus.reader.CorpusReader.encoding", false]], "encoding_demo() (in module nltk.classify.tadm)": [[41, "nltk.classify.tadm.encoding_demo", false]], "encodings (nltk.corpus.reader.udhr.udhrcorpusreader attribute)": [[103, "nltk.corpus.reader.udhr.UdhrCorpusReader.ENCODINGS", false]], "encodings (nltk.corpus.reader.udhrcorpusreader attribute)": [[57, "nltk.corpus.reader.UdhrCorpusReader.ENCODINGS", false]], "end (nltk.tag.perceptron.perceptrontagger attribute)": [[221, "nltk.tag.perceptron.PerceptronTagger.END", false]], "end() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.end", false]], "end() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.end", false]], "end() (nltk.parse.chart.edgei method)": [[162, "nltk.parse.chart.EdgeI.end", false]], "end() (nltk.parse.chart.leafedge method)": [[162, "nltk.parse.chart.LeafEdge.end", false]], "end() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.end", false]], "end_w5() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.end_w5", false]], "end_w6() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.end_w6", false]], "ending_quotes (nltk.tokenize.destructive.nltkwordtokenizer attribute)": [[305, "nltk.tokenize.destructive.NLTKWordTokenizer.ENDING_QUOTES", false]], "ending_quotes (nltk.tokenize.treebank.treebankworddetokenizer attribute)": [[319, "nltk.tokenize.treebank.TreebankWordDetokenizer.ENDING_QUOTES", false]], "ending_quotes (nltk.tokenize.treebank.treebankwordtokenizer attribute)": [[319, "nltk.tokenize.treebank.TreebankWordTokenizer.ENDING_QUOTES", false]], "englishstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.EnglishStemmer", false]], "ensure_loaded() (nltk.corpus.reader.api.corpusreader method)": [[59, "nltk.corpus.reader.api.CorpusReader.ensure_loaded", false]], "ensure_loaded() (nltk.corpus.reader.corpusreader method)": [[57, "nltk.corpus.reader.CorpusReader.ensure_loaded", false]], "entitytype (class in nltk.sem.logic)": [[191, "nltk.sem.logic.EntityType", false]], "entries() (nltk.corpus.reader.cmudict.cmudictcorpusreader method)": [[67, "nltk.corpus.reader.cmudict.CMUDictCorpusReader.entries", false]], "entries() (nltk.corpus.reader.cmudictcorpusreader method)": [[57, "nltk.corpus.reader.CMUDictCorpusReader.entries", false]], "entries() (nltk.corpus.reader.mwappdbcorpusreader method)": [[57, "nltk.corpus.reader.MWAPPDBCorpusReader.entries", false]], "entries() (nltk.corpus.reader.panlex_swadesh.panlexswadeshcorpusreader method)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexSwadeshCorpusReader.entries", false]], "entries() (nltk.corpus.reader.panlexswadeshcorpusreader method)": [[57, "nltk.corpus.reader.PanlexSwadeshCorpusReader.entries", false]], "entries() (nltk.corpus.reader.swadeshcorpusreader method)": [[57, "nltk.corpus.reader.SwadeshCorpusReader.entries", false]], "entries() (nltk.corpus.reader.toolbox.toolboxcorpusreader method)": [[101, "nltk.corpus.reader.toolbox.ToolboxCorpusReader.entries", false]], "entries() (nltk.corpus.reader.toolboxcorpusreader method)": [[57, "nltk.corpus.reader.ToolboxCorpusReader.entries", false]], "entries() (nltk.corpus.reader.wordlist.mwappdbcorpusreader method)": [[106, "nltk.corpus.reader.wordlist.MWAPPDBCorpusReader.entries", false]], "entries() (nltk.corpus.reader.wordlist.swadeshcorpusreader method)": [[106, "nltk.corpus.reader.wordlist.SwadeshCorpusReader.entries", false]], "entropy() (in module nltk.probability)": [[179, "nltk.probability.entropy", false]], "entropy() (nltk.lm.api.languagemodel method)": [[136, "nltk.lm.api.LanguageModel.entropy", false]], "entropy() (nltk.tag.hmm.hiddenmarkovmodeltagger method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.entropy", false]], "entrydialog (class in nltk.draw.util)": [[119, "nltk.draw.util.EntryDialog", false]], "epsilon (nltk.grammar.pcfg attribute)": [[121, "nltk.grammar.PCFG.EPSILON", false]], "eq (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.EQ", false]], "eq (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.EQ", false]], "eq_list (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.EQ_LIST", false]], "equal_values() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.equal_values", false]], "equality_preds() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.equality_preds", false]], "equalityexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.EqualityExpression", false]], "equiv() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.equiv", false]], "equiv() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.equiv", false]], "erfcc() (in module nltk.translate.gale_church)": [[326, "nltk.translate.gale_church.erfcc", false]], "error": [[186, "nltk.sem.evaluate.Error", false]], "error() (nltk.classify.decisiontree.decisiontreeclassifier method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.error", false]], "error_list() (in module nltk.tbl.erroranalysis)": [[230, "nltk.tbl.erroranalysis.error_list", false]], "errormessage (class in nltk.downloader)": [[113, "nltk.downloader.ErrorMessage", false]], "errors (nltk.data.seekableunicodestreamreader attribute)": [[111, "nltk.data.SeekableUnicodeStreamReader.errors", false]], "euclidean_distance() (in module nltk.cluster.util)": [[51, "nltk.cluster.util.euclidean_distance", false]], "europarlcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.EuroparlCorpusReader", false]], "europarlcorpusreader (class in nltk.corpus.reader.plaintext)": [[87, "nltk.corpus.reader.plaintext.EuroparlCorpusReader", false]], "eval() (nltk.parse.evaluate.dependencyevaluator method)": [[166, "nltk.parse.evaluate.DependencyEvaluator.eval", false]], "evaluate() (nltk.chunk.api.chunkparseri method)": [[26, "nltk.chunk.api.ChunkParserI.evaluate", false]], "evaluate() (nltk.metrics.confusionmatrix.confusionmatrix method)": [[147, "nltk.metrics.confusionmatrix.ConfusionMatrix.evaluate", false]], "evaluate() (nltk.sem.evaluate.model method)": [[186, "nltk.sem.evaluate.Model.evaluate", false]], "evaluate() (nltk.sentiment.sentiment_analyzer.sentimentanalyzer method)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer.evaluate", false]], "evaluate() (nltk.tag.api.taggeri method)": [[214, "nltk.tag.api.TaggerI.evaluate", false]], "evaluate_per_tag() (nltk.tag.api.taggeri method)": [[214, "nltk.tag.api.TaggerI.evaluate_per_tag", false]], "evaluate_sents() (in module nltk.sem.util)": [[194, "nltk.sem.util.evaluate_sents", false]], "eventtype (class in nltk.sem.logic)": [[191, "nltk.sem.logic.EventType", false]], "eventvariableexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.EventVariableExpression", false]], "everygram_input() (in module nltk.test.unit.test_util)": [[286, "nltk.test.unit.test_util.everygram_input", false]], "everygrams() (in module nltk.util)": [[357, "nltk.util.everygrams", false]], "exact_match() (in module nltk.translate.meteor_score)": [[335, "nltk.translate.meteor_score.exact_match", false]], "examples() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.examples", false]], "executable() (nltk.classify.senna.senna method)": [[39, "nltk.classify.senna.Senna.executable", false]], "exemplars() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.exemplars", false]], "exemplars() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.exemplars", false]], "exists (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.EXISTS", false]], "exists (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.EXISTS", false]], "exists (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.EXISTS", false]], "exists_list (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.EXISTS_LIST", false]], "existsexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.ExistsExpression", false]], "expand() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.expand", false]], "expand() (nltk.tbl.feature.feature class method)": [[231, "nltk.tbl.feature.Feature.expand", false]], "expand() (nltk.tbl.template.template class method)": [[233, "nltk.tbl.template.Template.expand", false]], "expand_threads() (nltk.inference.discourse.discoursetester method)": [[125, "nltk.inference.discourse.DiscourseTester.expand_threads", false]], "expand_tweetids() (nltk.twitter.twitterclient.query method)": [[355, "nltk.twitter.twitterclient.Query.expand_tweetids", false]], "expand_tweetids_demo() (in module nltk.twitter.twitter_demo)": [[354, "nltk.twitter.twitter_demo.expand_tweetids_demo", false]], "expandable_productions() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.expandable_productions", false]], "expanded_tree() (nltk.draw.tree.treewidget method)": [[118, "nltk.draw.tree.TreeWidget.expanded_tree", false]], "expandleftrule (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.ExpandLeftRule", false]], "expandrightrule (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.ExpandRightRule", false]], "expansion_score() (nltk.translate.stack_decoder.stackdecoder method)": [[340, "nltk.translate.stack_decoder.StackDecoder.expansion_score", false]], "expectedmoretokensexception": [[191, "nltk.sem.logic.ExpectedMoreTokensException", false]], "explain() (nltk.classify.maxent.maxentclassifier method)": [[33, "nltk.classify.maxent.MaxentClassifier.explain", false]], "expression (class in nltk.sem.linearlogic)": [[190, "nltk.sem.linearlogic.Expression", false]], "expression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.Expression", false]], "expressions() (nltk.corpus.reader.panlex_lite.meaning method)": [[84, "nltk.corpus.reader.panlex_lite.Meaning.expressions", false]], "extend() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.extend", false]], "extend() (nltk.featstruct.featlist method)": [[120, "nltk.featstruct.FeatList.extend", false]], "extend() (nltk.tree.immutable.immutabletree method)": [[342, "nltk.tree.immutable.ImmutableTree.extend", false]], "extend() (nltk.tree.immutabletree method)": [[341, "nltk.tree.ImmutableTree.extend", false]], "extract() (in module nltk.translate.phrase_based)": [[338, "nltk.translate.phrase_based.extract", false]], "extract_bigram_feats() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.extract_bigram_feats", false]], "extract_features() (nltk.parse.transitionparser.configuration method)": [[176, "nltk.parse.transitionparser.Configuration.extract_features", false]], "extract_features() (nltk.sentiment.sentiment_analyzer.sentimentanalyzer method)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer.extract_features", false]], "extract_fields() (in module nltk.twitter.common)": [[353, "nltk.twitter.common.extract_fields", false]], "extract_property() (nltk.tag.brill.pos static method)": [[215, "nltk.tag.brill.Pos.extract_property", false]], "extract_property() (nltk.tag.brill.word static method)": [[215, "nltk.tag.brill.Word.extract_property", false]], "extract_property() (nltk.tbl.feature.feature static method)": [[231, "nltk.tbl.feature.Feature.extract_property", false]], "extract_rels() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.extract_rels", false]], "extract_test_sentences() (in module nltk.parse.util)": [[177, "nltk.parse.util.extract_test_sentences", false]], "extract_unigram_feats() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.extract_unigram_feats", false]], "f() (in module nltk.classify.decisiontree)": [[32, "nltk.classify.decisiontree.f", false]], "f_measure() (in module nltk.metrics.scores)": [[150, "nltk.metrics.scores.f_measure", false]], "f_measure() (nltk.chunk.util.chunkscore method)": [[29, "nltk.chunk.util.ChunkScore.f_measure", false]], "f_measure() (nltk.metrics.confusionmatrix.confusionmatrix method)": [[147, "nltk.metrics.confusionmatrix.ConfusionMatrix.f_measure", false]], "f_measure() (nltk.tag.api.taggeri method)": [[214, "nltk.tag.api.TaggerI.f_measure", false]], "fe_relations() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.fe_relations", false]], "fe_relations() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.fe_relations", false]], "featdict (class in nltk.featstruct)": [[120, "nltk.featstruct.FeatDict", false]], "featlist (class in nltk.featstruct)": [[120, "nltk.featstruct.FeatList", false]], "featstruct (class in nltk.featstruct)": [[120, "nltk.featstruct.FeatStruct", false]], "featstructreader (class in nltk.featstruct)": [[120, "nltk.featstruct.FeatStructReader", false]], "feature (class in nltk.featstruct)": [[120, "nltk.featstruct.Feature", false]], "feature (class in nltk.tbl.feature)": [[231, "nltk.tbl.feature.Feature", false]], "feature_detector() (nltk.tag.sequential.classifierbasedpostagger method)": [[223, "nltk.tag.sequential.ClassifierBasedPOSTagger.feature_detector", false]], "feature_detector() (nltk.tag.sequential.classifierbasedtagger method)": [[223, "nltk.tag.sequential.ClassifierBasedTagger.feature_detector", false]], "featurebottomupchartparser (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureBottomUpChartParser", false]], "featurebottomupleftcornerchartparser (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureBottomUpLeftCornerChartParser", false]], "featurebottomuppredictcombinerule (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureBottomUpPredictCombineRule", false]], "featurebottomuppredictrule (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureBottomUpPredictRule", false]], "featurechart (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureChart", false]], "featurechartparser (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureChartParser", false]], "featurecompletefundamentalrule (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.FeatureCompleteFundamentalRule", false]], "featurecompleterrule (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.FeatureCompleterRule", false]], "featureearleychartparser (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.FeatureEarleyChartParser", false]], "featureemptypredictrule (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureEmptyPredictRule", false]], "featurefundamentalrule (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureFundamentalRule", false]], "featureincrementalbottomupchartparser (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.FeatureIncrementalBottomUpChartParser", false]], "featureincrementalbottomupleftcornerchartparser (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.FeatureIncrementalBottomUpLeftCornerChartParser", false]], "featureincrementalchart (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.FeatureIncrementalChart", false]], "featureincrementalchartparser (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.FeatureIncrementalChartParser", false]], "featureincrementaltopdownchartparser (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.FeatureIncrementalTopDownChartParser", false]], "featurepredictorrule (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.FeaturePredictorRule", false]], "features() (nltk.corpus.reader.reviews.review method)": [[91, "nltk.corpus.reader.reviews.Review.features", false]], "features() (nltk.corpus.reader.reviews.reviewscorpusreader method)": [[91, "nltk.corpus.reader.reviews.ReviewsCorpusReader.features", false]], "features() (nltk.corpus.reader.reviewscorpusreader method)": [[57, "nltk.corpus.reader.ReviewsCorpusReader.features", false]], "featurescannerrule (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.FeatureScannerRule", false]], "featuresettaggeri (class in nltk.tag.api)": [[214, "nltk.tag.api.FeaturesetTaggerI", false]], "featuresingleedgefundamentalrule (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureSingleEdgeFundamentalRule", false]], "featuretopdownchartparser (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureTopDownChartParser", false]], "featuretopdowninitrule (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureTopDownInitRule", false]], "featuretopdownpredictrule (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureTopDownPredictRule", false]], "featuretreeedge (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.FeatureTreeEdge", false]], "fem2masc() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.fem2masc", false]], "fem2masc() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.fem2masc", false]], "fertility_of_i() (nltk.translate.ibm_model.alignmentinfo method)": [[334, "nltk.translate.ibm_model.AlignmentInfo.fertility_of_i", false]], "fes() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.fes", false]], "fes() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.fes", false]], "fields() (nltk.corpus.reader.toolbox.toolboxcorpusreader method)": [[101, "nltk.corpus.reader.toolbox.ToolboxCorpusReader.fields", false]], "fields() (nltk.corpus.reader.toolboxcorpusreader method)": [[57, "nltk.corpus.reader.ToolboxCorpusReader.fields", false]], "fields() (nltk.toolbox.standardformat method)": [[321, "nltk.toolbox.StandardFormat.fields", false]], "file_size() (nltk.data.filesystempathpointer method)": [[111, "nltk.data.FileSystemPathPointer.file_size", false]], "file_size() (nltk.data.pathpointer method)": [[111, "nltk.data.PathPointer.file_size", false]], "fileid (nltk.corpus.reader.nombank.nombankinstance attribute)": [[81, "nltk.corpus.reader.nombank.NombankInstance.fileid", false]], "fileid (nltk.corpus.reader.propbank.propbankinstance attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.fileid", false]], "fileid (nltk.corpus.reader.util.streambackedcorpusview property)": [[104, "nltk.corpus.reader.util.StreamBackedCorpusView.fileid", false]], "fileids() (nltk.corpus.reader.api.categorizedcorpusreader method)": [[59, "nltk.corpus.reader.api.CategorizedCorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.api.corpusreader method)": [[59, "nltk.corpus.reader.api.CorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.categorizedcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedCorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.corpusreader method)": [[57, "nltk.corpus.reader.CorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.ipipan.ipipancorpusreader method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.ipipancorpusreader method)": [[57, "nltk.corpus.reader.IPIPANCorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.nkjp.nkjpcorpusreader method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.nkjpcorpusreader method)": [[57, "nltk.corpus.reader.NKJPCorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.ycoe.ycoecorpusreader method)": [[109, "nltk.corpus.reader.ycoe.YCOECorpusReader.fileids", false]], "fileids() (nltk.corpus.reader.ycoecorpusreader method)": [[57, "nltk.corpus.reader.YCOECorpusReader.fileids", false]], "filename (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.filename", false]], "files_are_identical() (in module nltk.test.unit.test_json2csv_corpus)": [[270, "nltk.test.unit.test_json2csv_corpus.files_are_identical", false]], "filestring() (in module nltk.util)": [[357, "nltk.util.filestring", false]], "filesystempathpointer (class in nltk.data)": [[111, "nltk.data.FileSystemPathPointer", false]], "filter() (nltk.twitter.twitterclient.streamer method)": [[355, "nltk.twitter.twitterclient.Streamer.filter", false]], "filteredbottomuppredictcombinerule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.FilteredBottomUpPredictCombineRule", false]], "filteredcompletefundamentalrule (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.FilteredCompleteFundamentalRule", false]], "filteredsingleedgefundamentalrule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.FilteredSingleEdgeFundamentalRule", false]], "final_period_1 (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.FINAL_PERIOD_1", false]], "final_period_2 (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.FINAL_PERIOD_2", false]], "finalize_training() (nltk.tokenize.punkt.punkttrainer method)": [[309, "nltk.tokenize.punkt.PunktTrainer.finalize_training", false]], "find() (in module nltk.data)": [[111, "nltk.data.find", false]], "find() (nltk.internals.elementwrapper method)": [[131, "nltk.internals.ElementWrapper.find", false]], "find_abbrev_types() (nltk.tokenize.punkt.punkttrainer method)": [[309, "nltk.tokenize.punkt.PunktTrainer.find_abbrev_types", false]], "find_all_src_phrases() (nltk.translate.stack_decoder.stackdecoder method)": [[340, "nltk.translate.stack_decoder.StackDecoder.find_all_src_phrases", false]], "find_answers() (nltk.inference.resolution.resolutionprovercommand method)": [[129, "nltk.inference.resolution.ResolutionProverCommand.find_answers", false]], "find_best_fit() (nltk.probability.simplegoodturingprobdist method)": [[179, "nltk.probability.SimpleGoodTuringProbDist.find_best_fit", false]], "find_binary() (in module nltk.internals)": [[131, "nltk.internals.find_binary", false]], "find_binary_iter() (in module nltk.internals)": [[131, "nltk.internals.find_binary_iter", false]], "find_concordance() (nltk.text.concordanceindex method)": [[300, "nltk.text.ConcordanceIndex.find_concordance", false]], "find_corpus_fileids() (in module nltk.corpus.reader)": [[57, "nltk.corpus.reader.find_corpus_fileids", false]], "find_corpus_fileids() (in module nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.find_corpus_fileids", false]], "find_dimentions() (nltk.draw.util.showtext method)": [[119, "nltk.draw.util.ShowText.find_dimentions", false]], "find_dir() (in module nltk.internals)": [[131, "nltk.internals.find_dir", false]], "find_file() (in module nltk.internals)": [[131, "nltk.internals.find_file", false]], "find_file_iter() (in module nltk.internals)": [[131, "nltk.internals.find_file_iter", false]], "find_increasing_sequences() (in module nltk.translate.ribes_score)": [[339, "nltk.translate.ribes_score.find_increasing_sequences", false]], "find_jar() (in module nltk.internals)": [[131, "nltk.internals.find_jar", false]], "find_jar_iter() (in module nltk.internals)": [[131, "nltk.internals.find_jar_iter", false]], "find_jars_within_path() (in module nltk.internals)": [[131, "nltk.internals.find_jars_within_path", false]], "find_label_name() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.find_label_name", false]], "find_legal_onsets() (nltk.tokenize.legality_principle.legalitysyllabletokenizer method)": [[306, "nltk.tokenize.legality_principle.LegalitySyllableTokenizer.find_legal_onsets", false]], "find_malt_model() (in module nltk.parse.malt)": [[169, "nltk.parse.malt.find_malt_model", false]], "find_maltparser() (in module nltk.parse.malt)": [[169, "nltk.parse.malt.find_maltparser", false]], "find_repptokenizer() (nltk.tokenize.repp.repptokenizer method)": [[311, "nltk.tokenize.repp.ReppTokenizer.find_repptokenizer", false]], "findall() (nltk.internals.elementwrapper method)": [[131, "nltk.internals.ElementWrapper.findall", false]], "findall() (nltk.text.text method)": [[300, "nltk.text.Text.findall", false]], "findall() (nltk.text.tokensearcher method)": [[300, "nltk.text.TokenSearcher.findall", false]], "findtype() (nltk.sem.logic.abstractvariableexpression method)": [[191, "nltk.sem.logic.AbstractVariableExpression.findtype", false]], "findtype() (nltk.sem.logic.applicationexpression method)": [[191, "nltk.sem.logic.ApplicationExpression.findtype", false]], "findtype() (nltk.sem.logic.binaryexpression method)": [[191, "nltk.sem.logic.BinaryExpression.findtype", false]], "findtype() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.findtype", false]], "findtype() (nltk.sem.logic.negatedexpression method)": [[191, "nltk.sem.logic.NegatedExpression.findtype", false]], "findtype() (nltk.sem.logic.variablebinderexpression method)": [[191, "nltk.sem.logic.VariableBinderExpression.findtype", false]], "fingerprints (nltk.classify.textcat.textcat attribute)": [[42, "nltk.classify.textcat.TextCat.fingerprints", false]], "finishcollectionmessage (class in nltk.downloader)": [[113, "nltk.downloader.FinishCollectionMessage", false]], "finishdownloadmessage (class in nltk.downloader)": [[113, "nltk.downloader.FinishDownloadMessage", false]], "finishpackagemessage (class in nltk.downloader)": [[113, "nltk.downloader.FinishPackageMessage", false]], "finishunzipmessage (class in nltk.downloader)": [[113, "nltk.downloader.FinishUnzipMessage", false]], "finite (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.FINITE", false]], "finnishstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.FinnishStemmer", false]], "first (nltk.sem.logic.anytype property)": [[191, "nltk.sem.logic.AnyType.first", false]], "first_case (nltk.tokenize.punkt.punkttoken property)": [[309, "nltk.tokenize.punkt.PunktToken.first_case", false]], "first_lower (nltk.tokenize.punkt.punkttoken property)": [[309, "nltk.tokenize.punkt.PunktToken.first_lower", false]], "first_upper (nltk.tokenize.punkt.punkttoken property)": [[309, "nltk.tokenize.punkt.PunktToken.first_upper", false]], "fisher() (nltk.metrics.association.bigramassocmeasures class method)": [[146, "nltk.metrics.association.BigramAssocMeasures.fisher", false]], "fisher_exact() (in module nltk.metrics.association)": [[146, "nltk.metrics.association.fisher_exact", false]], "fit() (nltk.lm.api.languagemodel method)": [[136, "nltk.lm.api.LanguageModel.fit", false]], "flatten() (in module nltk.lm.preprocessing)": [[139, "nltk.lm.preprocessing.flatten", false]], "flatten() (in module nltk.util)": [[357, "nltk.util.flatten", false]], "flatten() (nltk.tree.tree method)": [[341, "nltk.tree.Tree.flatten", false]], "flatten() (nltk.tree.tree.tree method)": [[348, "nltk.tree.tree.Tree.flatten", false]], "fntbl37() (in module nltk.tag.brill)": [[215, "nltk.tag.brill.fntbl37", false]], "focus() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.focus", false]], "focus() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.focus", false]], "fol() (nltk.sem.drt.drs method)": [[184, "nltk.sem.drt.DRS.fol", false]], "fol() (nltk.sem.drt.drtabstractvariableexpression method)": [[184, "nltk.sem.drt.DrtAbstractVariableExpression.fol", false]], "fol() (nltk.sem.drt.drtapplicationexpression method)": [[184, "nltk.sem.drt.DrtApplicationExpression.fol", false]], "fol() (nltk.sem.drt.drtconcatenation method)": [[184, "nltk.sem.drt.DrtConcatenation.fol", false]], "fol() (nltk.sem.drt.drtequalityexpression method)": [[184, "nltk.sem.drt.DrtEqualityExpression.fol", false]], "fol() (nltk.sem.drt.drtlambdaexpression method)": [[184, "nltk.sem.drt.DrtLambdaExpression.fol", false]], "fol() (nltk.sem.drt.drtnegatedexpression method)": [[184, "nltk.sem.drt.DrtNegatedExpression.fol", false]], "fol() (nltk.sem.drt.drtorexpression method)": [[184, "nltk.sem.drt.DrtOrExpression.fol", false]], "fol() (nltk.sem.drt.drtproposition method)": [[184, "nltk.sem.drt.DrtProposition.fol", false]], "foldemo() (in module nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.foldemo", false]], "followtoscreen_demo() (in module nltk.twitter.twitter_demo)": [[354, "nltk.twitter.twitter_demo.followtoscreen_demo", false]], "folmodel() (in module nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.folmodel", false]], "format() (nltk.classify.weka.arff_formatter method)": [[44, "nltk.classify.weka.ARFF_Formatter.format", false]], "format() (nltk.tbl.rule.rule method)": [[232, "nltk.tbl.rule.Rule.format", false]], "format_debug_decision() (in module nltk.tokenize.punkt)": [[309, "nltk.tokenize.punkt.format_debug_decision", false]], "formats (in module nltk.data)": [[111, "nltk.data.FORMATS", false]], "formula_tree() (nltk.sem.hole.holesemantics method)": [[188, "nltk.sem.hole.HoleSemantics.formula_tree", false]], "forwardcombinator (class in nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.ForwardCombinator", false]], "forwardonly() (in module nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.forwardOnly", false]], "forwardsconstraint() (in module nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.forwardSConstraint", false]], "forwardtconstraint() (in module nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.forwardTConstraint", false]], "forwardtyperaiserule (class in nltk.ccg.chart)": [[14, "nltk.ccg.chart.ForwardTypeRaiseRule", false]], "fraction (class in nltk.translate.bleu_score)": [[324, "nltk.translate.bleu_score.Fraction", false]], "fractional_presence() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.fractional_presence", false]], "frame() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.frame", false]], "frame() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.frame", false]], "frame_by_id() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.frame_by_id", false]], "frame_by_id() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.frame_by_id", false]], "frame_by_name() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.frame_by_name", false]], "frame_by_name() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.frame_by_name", false]], "frame_config (nltk.draw.table.multilistbox attribute)": [[117, "nltk.draw.table.MultiListbox.FRAME_CONFIG", false]], "frame_ids() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.frame_ids", false]], "frame_ids() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.frame_ids", false]], "frame_ids_and_names() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.frame_ids_and_names", false]], "frame_ids_and_names() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.frame_ids_and_names", false]], "frame_relation_types() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.frame_relation_types", false]], "frame_relation_types() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.frame_relation_types", false]], "frame_relations() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.frame_relations", false]], "frame_relations() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.frame_relations", false]], "frame_strings() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.frame_strings", false]], "framenetcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.FramenetCorpusReader", false]], "framenetcorpusreader (class in nltk.corpus.reader.framenet)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader", false]], "frameneterror": [[72, "nltk.corpus.reader.framenet.FramenetError", false]], "frames() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.frames", false]], "frames() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.frames", false]], "frames() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.frames", false]], "frames() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.frames", false]], "frames_by_lemma() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.frames_by_lemma", false]], "frames_by_lemma() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.frames_by_lemma", false]], "free() (nltk.inference.resolution.clause method)": [[129, "nltk.inference.resolution.Clause.free", false]], "free() (nltk.sem.drt.drs method)": [[184, "nltk.sem.drt.DRS.free", false]], "free() (nltk.sem.drt.possibleantecedents method)": [[184, "nltk.sem.drt.PossibleAntecedents.free", false]], "free() (nltk.sem.logic.constantexpression method)": [[191, "nltk.sem.logic.ConstantExpression.free", false]], "free() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.free", false]], "free() (nltk.sem.logic.functionvariableexpression method)": [[191, "nltk.sem.logic.FunctionVariableExpression.free", false]], "free() (nltk.sem.logic.individualvariableexpression method)": [[191, "nltk.sem.logic.IndividualVariableExpression.free", false]], "free() (nltk.sem.logic.variablebinderexpression method)": [[191, "nltk.sem.logic.VariableBinderExpression.free", false]], "freeze() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.freeze", false]], "freeze() (nltk.tree.tree method)": [[341, "nltk.tree.Tree.freeze", false]], "freeze() (nltk.tree.tree.tree method)": [[348, "nltk.tree.tree.Tree.freeze", false]], "frenchstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.FrenchStemmer", false]], "freq() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.freq", false]], "freq_threshold() (nltk.tokenize.punkt.punkttrainer method)": [[309, "nltk.tokenize.punkt.PunktTrainer.freq_threshold", false]], "freqdist (class in nltk.probability)": [[179, "nltk.probability.FreqDist", false]], "freqdist() (nltk.probability.lidstoneprobdist method)": [[179, "nltk.probability.LidstoneProbDist.freqdist", false]], "freqdist() (nltk.probability.mleprobdist method)": [[179, "nltk.probability.MLEProbDist.freqdist", false]], "freqdist() (nltk.probability.simplegoodturingprobdist method)": [[179, "nltk.probability.SimpleGoodTuringProbDist.freqdist", false]], "freqdist() (nltk.probability.wittenbellprobdist method)": [[179, "nltk.probability.WittenBellProbDist.freqdist", false]], "freqdists() (nltk.probability.crossvalidationprobdist method)": [[179, "nltk.probability.CrossValidationProbDist.freqdists", false]], "from_production() (nltk.parse.chart.treeedge static method)": [[162, "nltk.parse.chart.TreeEdge.from_production", false]], "from_production() (nltk.parse.featurechart.featuretreeedge static method)": [[167, "nltk.parse.featurechart.FeatureTreeEdge.from_production", false]], "from_production() (nltk.parse.pchart.probabilistictreeedge static method)": [[171, "nltk.parse.pchart.ProbabilisticTreeEdge.from_production", false]], "from_train() (nltk.classify.weka.arff_formatter static method)": [[44, "nltk.classify.weka.ARFF_Formatter.from_train", false]], "from_unified_model_dir() (nltk.parse.bllip.bllipparser class method)": [[161, "nltk.parse.bllip.BllipParser.from_unified_model_dir", false]], "from_words() (nltk.collocations.bigramcollocationfinder class method)": [[53, "nltk.collocations.BigramCollocationFinder.from_words", false]], "from_words() (nltk.collocations.quadgramcollocationfinder class method)": [[53, "nltk.collocations.QuadgramCollocationFinder.from_words", false]], "from_words() (nltk.collocations.trigramcollocationfinder class method)": [[53, "nltk.collocations.TrigramCollocationFinder.from_words", false]], "fromlist() (nltk.tree.tree class method)": [[341, "nltk.tree.Tree.fromlist", false]], "fromlist() (nltk.tree.tree.tree class method)": [[348, "nltk.tree.tree.Tree.fromlist", false]], "fromstring() (in module nltk.ccg.lexicon)": [[16, "nltk.ccg.lexicon.fromstring", false]], "fromstring() (nltk.chunk.regexp.regexpchunkrule static method)": [[28, "nltk.chunk.regexp.RegexpChunkRule.fromstring", false]], "fromstring() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.fromstring", false]], "fromstring() (nltk.grammar.cfg class method)": [[121, "nltk.grammar.CFG.fromstring", false]], "fromstring() (nltk.grammar.dependencygrammar class method)": [[121, "nltk.grammar.DependencyGrammar.fromstring", false]], "fromstring() (nltk.grammar.pcfg class method)": [[121, "nltk.grammar.PCFG.fromstring", false]], "fromstring() (nltk.sem.drt.drtexpression class method)": [[184, "nltk.sem.drt.DrtExpression.fromstring", false]], "fromstring() (nltk.sem.evaluate.valuation class method)": [[186, "nltk.sem.evaluate.Valuation.fromstring", false]], "fromstring() (nltk.sem.linearlogic.expression class method)": [[190, "nltk.sem.linearlogic.Expression.fromstring", false]], "fromstring() (nltk.sem.logic.expression class method)": [[191, "nltk.sem.logic.Expression.fromstring", false]], "fromstring() (nltk.sem.logic.type class method)": [[191, "nltk.sem.logic.Type.fromstring", false]], "fromstring() (nltk.translate.api.alignment class method)": [[323, "nltk.translate.api.Alignment.fromstring", false]], "fromstring() (nltk.tree.tree class method)": [[341, "nltk.tree.Tree.fromstring", false]], "fromstring() (nltk.tree.tree.tree class method)": [[348, "nltk.tree.tree.Tree.fromstring", false]], "fromxml() (nltk.downloader.collection static method)": [[113, "nltk.downloader.Collection.fromxml", false]], "fromxml() (nltk.downloader.package static method)": [[113, "nltk.downloader.Package.fromxml", false]], "frontier() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.frontier", false]], "frozen() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.frozen", false]], "fstructure (class in nltk.sem.lfg)": [[189, "nltk.sem.lfg.FStructure", false]], "ft_sents() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.ft_sents", false]], "ft_sents() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.ft_sents", false]], "functionalcategory (class in nltk.ccg.api)": [[13, "nltk.ccg.api.FunctionalCategory", false]], "functionbackedmaxentfeatureencoding (class in nltk.classify.maxent)": [[33, "nltk.classify.maxent.FunctionBackedMaxentFeatureEncoding", false]], "functionvariableexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.FunctionVariableExpression", false]], "fundamentalrule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.FundamentalRule", false]], "funky_punct_1 (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.FUNKY_PUNCT_1", false]], "funky_punct_2 (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.FUNKY_PUNCT_2", false]], "future (class in nltk.corpus.reader.framenet)": [[72, "nltk.corpus.reader.framenet.Future", false]], "future (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.FUTURE", false]], "future_score() (nltk.translate.stack_decoder.stackdecoder method)": [[340, "nltk.translate.stack_decoder.StackDecoder.future_score", false]], "gaaclusterer (class in nltk.cluster.gaac)": [[49, "nltk.cluster.gaac.GAAClusterer", false]], "generate() (in module nltk.parse.generate)": [[168, "nltk.parse.generate.generate", false]], "generate() (nltk.lm.api.languagemodel method)": [[136, "nltk.lm.api.LanguageModel.generate", false]], "generate() (nltk.probability.probdisti method)": [[179, "nltk.probability.ProbDistI.generate", false]], "generate() (nltk.text.text method)": [[300, "nltk.text.Text.generate", false]], "generate_chomsky() (in module nltk.misc.chomsky)": [[155, "nltk.misc.chomsky.generate_chomsky", false]], "generate_malt_command() (nltk.parse.malt.maltparser method)": [[169, "nltk.parse.malt.MaltParser.generate_malt_command", false]], "generate_repp_command() (nltk.tokenize.repp.repptokenizer method)": [[311, "nltk.tokenize.repp.ReppTokenizer.generate_repp_command", false]], "genericcorenlpparser (class in nltk.parse.corenlp)": [[163, "nltk.parse.corenlp.GenericCoreNLPParser", false]], "genericstanfordparser (class in nltk.parse.stanford)": [[175, "nltk.parse.stanford.GenericStanfordParser", false]], "germanstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.GermanStemmer", false]], "gerund (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.GERUND", false]], "get() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.get", false]], "get() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.get", false]], "get() (nltk.featstruct.featdict method)": [[120, "nltk.featstruct.FeatDict.get", false]], "get() (nltk.internals.counter method)": [[131, "nltk.internals.Counter.get", false]], "get_all_symbols() (nltk.sem.boxer.boxerdrsparser method)": [[181, "nltk.sem.boxer.BoxerDrsParser.get_all_symbols", false]], "get_all_symbols() (nltk.sem.boxer.boxeroutputdrsparser method)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser.get_all_symbols", false]], "get_all_symbols() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.get_all_symbols", false]], "get_all_symbols() (nltk.sem.linearlogic.linearlogicparser method)": [[190, "nltk.sem.linearlogic.LinearLogicParser.get_all_symbols", false]], "get_all_symbols() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.get_all_symbols", false]], "get_booleanexpression_factory() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.get_BooleanExpression_factory", false]], "get_booleanexpression_factory() (nltk.sem.linearlogic.linearlogicparser method)": [[190, "nltk.sem.linearlogic.LinearLogicParser.get_BooleanExpression_factory", false]], "get_booleanexpression_factory() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.get_BooleanExpression_factory", false]], "get_by_address() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.get_by_address", false]], "get_cycle_path() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.get_cycle_path", false]], "get_domain() (in module nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.get_domain", false]], "get_glue_dict() (nltk.sem.glue.drtglue method)": [[187, "nltk.sem.glue.DrtGlue.get_glue_dict", false]], "get_glue_dict() (nltk.sem.glue.glue method)": [[187, "nltk.sem.glue.Glue.get_glue_dict", false]], "get_glueformula_factory() (nltk.sem.glue.drtgluedict method)": [[187, "nltk.sem.glue.DrtGlueDict.get_GlueFormula_factory", false]], "get_glueformula_factory() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.get_GlueFormula_factory", false]], "get_glueformulas_from_semtype_entry() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.get_glueformulas_from_semtype_entry", false]], "get_header_field_list() (in module nltk.twitter.common)": [[353, "nltk.twitter.common.get_header_field_list", false]], "get_label() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.get_label", false]], "get_languages() (nltk.corpus.reader.panlex_swadesh.panlexswadeshcorpusreader method)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexSwadeshCorpusReader.get_languages", false]], "get_languages() (nltk.corpus.reader.panlexswadeshcorpusreader method)": [[57, "nltk.corpus.reader.PanlexSwadeshCorpusReader.get_languages", false]], "get_macrolanguages() (nltk.corpus.reader.panlex_swadesh.panlexswadeshcorpusreader method)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexSwadeshCorpusReader.get_macrolanguages", false]], "get_macrolanguages() (nltk.corpus.reader.panlexswadeshcorpusreader method)": [[57, "nltk.corpus.reader.PanlexSwadeshCorpusReader.get_macrolanguages", false]], "get_meaning_formula() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.get_meaning_formula", false]], "get_model_builder() (nltk.inference.api.basemodelbuildercommand method)": [[124, "nltk.inference.api.BaseModelBuilderCommand.get_model_builder", false]], "get_model_builder() (nltk.inference.api.modelbuildercommand method)": [[124, "nltk.inference.api.ModelBuilderCommand.get_model_builder", false]], "get_model_builder() (nltk.inference.api.modelbuildercommanddecorator method)": [[124, "nltk.inference.api.ModelBuilderCommandDecorator.get_model_builder", false]], "get_neighborhood() (nltk.tbl.template.brilltemplatei method)": [[233, "nltk.tbl.template.BrillTemplateI.get_neighborhood", false]], "get_neighborhood() (nltk.tbl.template.template method)": [[233, "nltk.tbl.template.Template.get_neighborhood", false]], "get_next_token_variable() (nltk.sem.boxer.boxerdrsparser method)": [[181, "nltk.sem.boxer.BoxerDrsParser.get_next_token_variable", false]], "get_next_token_variable() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.get_next_token_variable", false]], "get_params() (nltk.tokenize.punkt.punkttrainer method)": [[309, "nltk.tokenize.punkt.PunktTrainer.get_params", false]], "get_paths() (nltk.corpus.reader.nkjp.nkjpcorpusreader method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.get_paths", false]], "get_paths() (nltk.corpus.reader.nkjpcorpusreader method)": [[57, "nltk.corpus.reader.NKJPCorpusReader.get_paths", false]], "get_pos_tagger() (nltk.sem.glue.glue method)": [[187, "nltk.sem.glue.Glue.get_pos_tagger", false]], "get_prover() (nltk.inference.api.baseprovercommand method)": [[124, "nltk.inference.api.BaseProverCommand.get_prover", false]], "get_prover() (nltk.inference.api.provercommand method)": [[124, "nltk.inference.api.ProverCommand.get_prover", false]], "get_prover() (nltk.inference.api.provercommanddecorator method)": [[124, "nltk.inference.api.ProverCommandDecorator.get_prover", false]], "get_quantifiedexpression_factory() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.get_QuantifiedExpression_factory", false]], "get_readings() (nltk.sem.glue.glue method)": [[187, "nltk.sem.glue.Glue.get_readings", false]], "get_refs() (nltk.sem.drt.drs method)": [[184, "nltk.sem.drt.DRS.get_refs", false]], "get_refs() (nltk.sem.drt.drtabstractvariableexpression method)": [[184, "nltk.sem.drt.DrtAbstractVariableExpression.get_refs", false]], "get_refs() (nltk.sem.drt.drtapplicationexpression method)": [[184, "nltk.sem.drt.DrtApplicationExpression.get_refs", false]], "get_refs() (nltk.sem.drt.drtbinaryexpression method)": [[184, "nltk.sem.drt.DrtBinaryExpression.get_refs", false]], "get_refs() (nltk.sem.drt.drtconcatenation method)": [[184, "nltk.sem.drt.DrtConcatenation.get_refs", false]], "get_refs() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.get_refs", false]], "get_refs() (nltk.sem.drt.drtlambdaexpression method)": [[184, "nltk.sem.drt.DrtLambdaExpression.get_refs", false]], "get_refs() (nltk.sem.drt.drtnegatedexpression method)": [[184, "nltk.sem.drt.DrtNegatedExpression.get_refs", false]], "get_refs() (nltk.sem.drt.drtproposition method)": [[184, "nltk.sem.drt.DrtProposition.get_refs", false]], "get_segm_id() (nltk.corpus.reader.nkjp.nkjpcorpus_segmentation_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Segmentation_View.get_segm_id", false]], "get_segm_id() (nltk.corpus.reader.nkjp.nkjpcorpus_text_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Text_View.get_segm_id", false]], "get_semtypes() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.get_semtypes", false]], "get_sent_beg() (nltk.corpus.reader.nkjp.nkjpcorpus_segmentation_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Segmentation_View.get_sent_beg", false]], "get_sent_end() (nltk.corpus.reader.nkjp.nkjpcorpus_segmentation_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Segmentation_View.get_sent_end", false]], "get_sentences() (nltk.corpus.reader.nkjp.nkjpcorpus_segmentation_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Segmentation_View.get_sentences", false]], "get_version() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.get_version", false]], "get_version() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.get_version", false]], "get_words_from_dictionary() (in module nltk.metrics.paice)": [[149, "nltk.metrics.paice.get_words_from_dictionary", false]], "getchildren() (nltk.internals.elementwrapper method)": [[131, "nltk.internals.ElementWrapper.getchildren", false]], "getinfo() (in module nltk.decorators)": [[112, "nltk.decorators.getinfo", false]], "getiterator() (nltk.internals.elementwrapper method)": [[131, "nltk.internals.ElementWrapper.getiterator", false]], "getop() (nltk.sem.drt.drtconcatenation method)": [[184, "nltk.sem.drt.DrtConcatenation.getOp", false]], "getop() (nltk.sem.logic.andexpression method)": [[191, "nltk.sem.logic.AndExpression.getOp", false]], "getop() (nltk.sem.logic.equalityexpression method)": [[191, "nltk.sem.logic.EqualityExpression.getOp", false]], "getop() (nltk.sem.logic.iffexpression method)": [[191, "nltk.sem.logic.IffExpression.getOp", false]], "getop() (nltk.sem.logic.impexpression method)": [[191, "nltk.sem.logic.ImpExpression.getOp", false]], "getop() (nltk.sem.logic.orexpression method)": [[191, "nltk.sem.logic.OrExpression.getOp", false]], "getquantifier() (nltk.sem.logic.allexpression method)": [[191, "nltk.sem.logic.AllExpression.getQuantifier", false]], "getquantifier() (nltk.sem.logic.existsexpression method)": [[191, "nltk.sem.logic.ExistsExpression.getQuantifier", false]], "getquantifier() (nltk.sem.logic.iotaexpression method)": [[191, "nltk.sem.logic.IotaExpression.getQuantifier", false]], "gfl_to_compiled() (nltk.sem.glue.glue method)": [[187, "nltk.sem.glue.Glue.gfl_to_compiled", false]], "ghd() (in module nltk.metrics.segmentation)": [[151, "nltk.metrics.segmentation.ghd", false]], "gisencoding (class in nltk.classify.maxent)": [[33, "nltk.classify.maxent.GISEncoding", false]], "glue (class in nltk.sem.glue)": [[187, "nltk.sem.glue.Glue", false]], "gluedict (class in nltk.sem.glue)": [[187, "nltk.sem.glue.GlueDict", false]], "glueformula (class in nltk.sem.glue)": [[187, "nltk.sem.glue.GlueFormula", false]], "goal() (nltk.inference.api.basetheoremtoolcommand method)": [[124, "nltk.inference.api.BaseTheoremToolCommand.goal", false]], "goal() (nltk.inference.api.theoremtoolcommand method)": [[124, "nltk.inference.api.TheoremToolCommand.goal", false]], "goal() (nltk.inference.api.theoremtoolcommanddecorator method)": [[124, "nltk.inference.api.TheoremToolCommandDecorator.goal", false]], "goal() (nltk.inference.nonmonotonic.closeddomainprover method)": [[127, "nltk.inference.nonmonotonic.ClosedDomainProver.goal", false]], "grammar() (nltk.inference.discourse.discoursetester method)": [[125, "nltk.inference.discourse.DiscourseTester.grammar", false]], "grammar() (nltk.parse.api.parseri method)": [[160, "nltk.parse.api.ParserI.grammar", false]], "grammar() (nltk.parse.chart.chartparser method)": [[162, "nltk.parse.chart.ChartParser.grammar", false]], "grammar() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.grammar", false]], "grammar() (nltk.parse.pchart.bottomupprobabilisticchartparser method)": [[171, "nltk.parse.pchart.BottomUpProbabilisticChartParser.grammar", false]], "grammar() (nltk.parse.recursivedescent.recursivedescentparser method)": [[173, "nltk.parse.recursivedescent.RecursiveDescentParser.grammar", false]], "grammar() (nltk.parse.shiftreduce.shiftreduceparser method)": [[174, "nltk.parse.shiftreduce.ShiftReduceParser.grammar", false]], "grammar() (nltk.parse.viterbi.viterbiparser method)": [[178, "nltk.parse.viterbi.ViterbiParser.grammar", false]], "grid() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.grid", false]], "grid() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.grid", false]], "groups() (nltk.cluster.util.dendrogram method)": [[51, "nltk.cluster.util.Dendrogram.groups", false]], "grow_diag_final_and() (in module nltk.translate.gdfa)": [[327, "nltk.translate.gdfa.grow_diag_final_and", false]], "guess_encoding() (in module nltk.util)": [[357, "nltk.util.guess_encoding", false]], "guess_language() (nltk.classify.textcat.textcat method)": [[42, "nltk.classify.textcat.TextCat.guess_language", false]], "guess_path() (in module nltk.twitter.util)": [[356, "nltk.twitter.util.guess_path", false]], "guessed() (nltk.chunk.util.chunkscore method)": [[29, "nltk.chunk.util.ChunkScore.guessed", false]], "gzipfilesystempathpointer (class in nltk.data)": [[111, "nltk.data.GzipFileSystemPathPointer", false]], "hall_demo() (in module nltk.parse.nonprojectivedependencyparser)": [[170, "nltk.parse.nonprojectivedependencyparser.hall_demo", false]], "handle() (nltk.sem.boxer.boxerdrsparser method)": [[181, "nltk.sem.boxer.BoxerDrsParser.handle", false]], "handle() (nltk.sem.boxer.boxeroutputdrsparser method)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser.handle", false]], "handle() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.handle", false]], "handle() (nltk.sem.linearlogic.linearlogicparser method)": [[190, "nltk.sem.linearlogic.LinearLogicParser.handle", false]], "handle() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.handle", false]], "handle() (nltk.twitter.api.tweethandleri method)": [[352, "nltk.twitter.api.TweetHandlerI.handle", false]], "handle() (nltk.twitter.twitterclient.tweetviewer method)": [[355, "nltk.twitter.twitterclient.TweetViewer.handle", false]], "handle() (nltk.twitter.twitterclient.tweetwriter method)": [[355, "nltk.twitter.twitterclient.TweetWriter.handle", false]], "handle_condition() (nltk.sem.boxer.boxeroutputdrsparser method)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser.handle_condition", false]], "handle_conds() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.handle_conds", false]], "handle_drs() (nltk.sem.boxer.boxeroutputdrsparser method)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser.handle_drs", false]], "handle_drs() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.handle_DRS", false]], "handle_elt() (nltk.corpus.reader.bnc.bncwordview method)": [[61, "nltk.corpus.reader.bnc.BNCWordView.handle_elt", false]], "handle_elt() (nltk.corpus.reader.nkjp.nkjpcorpus_header_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Header_View.handle_elt", false]], "handle_elt() (nltk.corpus.reader.nkjp.nkjpcorpus_morph_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Morph_View.handle_elt", false]], "handle_elt() (nltk.corpus.reader.nkjp.nkjpcorpus_segmentation_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Segmentation_View.handle_elt", false]], "handle_elt() (nltk.corpus.reader.nkjp.nkjpcorpus_text_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Text_View.handle_elt", false]], "handle_elt() (nltk.corpus.reader.semcor.semcorwordview method)": [[93, "nltk.corpus.reader.semcor.SemcorWordView.handle_elt", false]], "handle_elt() (nltk.corpus.reader.xmldocs.xmlcorpusview method)": [[108, "nltk.corpus.reader.xmldocs.XMLCorpusView.handle_elt", false]], "handle_header() (nltk.corpus.reader.bnc.bncwordview method)": [[61, "nltk.corpus.reader.bnc.BNCWordView.handle_header", false]], "handle_lambda() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.handle_lambda", false]], "handle_negation() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.handle_negation", false]], "handle_open() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.handle_open", false]], "handle_prop() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.handle_prop", false]], "handle_quant() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.handle_quant", false]], "handle_query() (nltk.corpus.reader.nkjp.nkjpcorpus_header_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Header_View.handle_query", false]], "handle_query() (nltk.corpus.reader.nkjp.nkjpcorpus_morph_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Morph_View.handle_query", false]], "handle_query() (nltk.corpus.reader.nkjp.nkjpcorpus_segmentation_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Segmentation_View.handle_query", false]], "handle_query() (nltk.corpus.reader.nkjp.nkjpcorpus_text_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Text_View.handle_query", false]], "handle_refs() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.handle_refs", false]], "handle_sent() (nltk.corpus.reader.bnc.bncwordview method)": [[61, "nltk.corpus.reader.bnc.BNCWordView.handle_sent", false]], "handle_sent() (nltk.corpus.reader.semcor.semcorwordview method)": [[93, "nltk.corpus.reader.semcor.SemcorWordView.handle_sent", false]], "handle_variable() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.handle_variable", false]], "handle_word() (nltk.corpus.reader.bnc.bncwordview method)": [[61, "nltk.corpus.reader.bnc.BNCWordView.handle_word", false]], "handle_word() (nltk.corpus.reader.semcor.semcorwordview method)": [[93, "nltk.corpus.reader.semcor.SemcorWordView.handle_word", false]], "hangul_jamo (nltk.tokenize.util.cjkchars attribute)": [[320, "nltk.tokenize.util.CJKChars.Hangul_Jamo", false]], "hangul_syllables (nltk.tokenize.util.cjkchars attribute)": [[320, "nltk.tokenize.util.CJKChars.Hangul_Syllables", false]], "hapaxes() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.hapaxes", false]], "has_key() (nltk.featstruct.featdict method)": [[120, "nltk.featstruct.FeatDict.has_key", false]], "has_priority() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.has_priority", false]], "head_index() (nltk.parse.projectivedependencyparser.dependencyspan method)": [[172, "nltk.parse.projectivedependencyparser.DependencySpan.head_index", false]], "head_len (nltk.corpus.reader.pl196x.pl196xcorpusreader attribute)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader.head_len", false]], "head_len (nltk.corpus.reader.pl196xcorpusreader attribute)": [[57, "nltk.corpus.reader.Pl196xCorpusReader.head_len", false]], "header() (nltk.corpus.reader.nkjp.nkjpcorpusreader method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.header", false]], "header() (nltk.corpus.reader.nkjpcorpusreader method)": [[57, "nltk.corpus.reader.NKJPCorpusReader.header", false]], "header_mode (nltk.corpus.reader.nkjp.nkjpcorpusreader attribute)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.HEADER_MODE", false]], "header_mode (nltk.corpus.reader.nkjpcorpusreader attribute)": [[57, "nltk.corpus.reader.NKJPCorpusReader.HEADER_MODE", false]], "header_section() (nltk.classify.weka.arff_formatter method)": [[44, "nltk.classify.weka.ARFF_Formatter.header_section", false]], "height() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.height", false]], "height() (nltk.tree.tree method)": [[341, "nltk.tree.Tree.height", false]], "height() (nltk.tree.tree.tree method)": [[348, "nltk.tree.tree.Tree.height", false]], "heldout_fdist() (nltk.probability.heldoutprobdist method)": [[179, "nltk.probability.HeldoutProbDist.heldout_fdist", false]], "heldoutprobdist (class in nltk.probability)": [[179, "nltk.probability.HeldoutProbDist", false]], "help (nltk.downloader.downloadergui attribute)": [[113, "nltk.downloader.DownloaderGUI.HELP", false]], "help() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.help", false]], "help() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.help", false]], "help() (nltk.downloader.downloadergui method)": [[113, "nltk.downloader.DownloaderGUI.help", false]], "hidden() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.hidden", false]], "hiddenmarkovmodeltagger (class in nltk.tag.hmm)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger", false]], "hiddenmarkovmodeltrainer (class in nltk.tag.hmm)": [[218, "nltk.tag.hmm.HiddenMarkovModelTrainer", false]], "hide() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.hide", false]], "hide_column() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.hide_column", false]], "hide_column() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.hide_column", false]], "hillclimb() (nltk.translate.ibm5.ibmmodel5 method)": [[333, "nltk.translate.ibm5.IBMModel5.hillclimb", false]], "hillclimb() (nltk.translate.ibm_model.ibmmodel method)": [[334, "nltk.translate.ibm_model.IBMModel.hillclimb", false]], "hole (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.HOLE", false]], "hole_readings() (in module nltk.sem.hole)": [[188, "nltk.sem.hole.hole_readings", false]], "holesemantics (class in nltk.sem.hole)": [[188, "nltk.sem.hole.HoleSemantics", false]], "href (nltk.corpus.reader.markdown.link attribute)": [[78, "nltk.corpus.reader.markdown.Link.href", false]], "hungarianstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.HungarianStemmer", false]], "hunpostagger (class in nltk.tag.hunpos)": [[219, "nltk.tag.hunpos.HunposTagger", false]], "hyp_extra() (nltk.classify.rte_classify.rtefeatureextractor method)": [[37, "nltk.classify.rte_classify.RTEFeatureExtractor.hyp_extra", false]], "hypernym_distances() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.hypernym_distances", false]], "hypernym_paths() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.hypernym_paths", false]], "i() (nltk.sem.evaluate.model method)": [[186, "nltk.sem.evaluate.Model.i", false]], "ibmmodel (class in nltk.translate.ibm_model)": [[334, "nltk.translate.ibm_model.IBMModel", false]], "ibmmodel1 (class in nltk.translate.ibm1)": [[329, "nltk.translate.ibm1.IBMModel1", false]], "ibmmodel2 (class in nltk.translate.ibm2)": [[330, "nltk.translate.ibm2.IBMModel2", false]], "ibmmodel3 (class in nltk.translate.ibm3)": [[331, "nltk.translate.ibm3.IBMModel3", false]], "ibmmodel4 (class in nltk.translate.ibm4)": [[332, "nltk.translate.ibm4.IBMModel4", false]], "ibmmodel5 (class in nltk.translate.ibm5)": [[333, "nltk.translate.ibm5.IBMModel5", false]], "ic() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.ic", false]], "ic() (nltk.corpus.reader.wordnet.wordneticcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetICCorpusReader.ic", false]], "ic() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.ic", false]], "ic() (nltk.corpus.reader.wordneticcorpusreader method)": [[57, "nltk.corpus.reader.WordNetICCorpusReader.ic", false]], "id (nltk.downloader.collection attribute)": [[113, "nltk.downloader.Collection.id", false]], "id (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.id", false]], "id() (nltk.ccg.api.ccgvar method)": [[13, "nltk.ccg.api.CCGVar.id", false]], "id() (nltk.corpus.reader.panlex_lite.meaning method)": [[84, "nltk.corpus.reader.panlex_lite.Meaning.id", false]], "idf() (nltk.text.textcollection method)": [[300, "nltk.text.TextCollection.idf", false]], "ieer_headlines() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.ieer_headlines", false]], "ieercorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.IEERCorpusReader", false]], "ieercorpusreader (class in nltk.corpus.reader.ieer)": [[73, "nltk.corpus.reader.ieer.IEERCorpusReader", false]], "ieerdocument (class in nltk.corpus.reader.ieer)": [[73, "nltk.corpus.reader.ieer.IEERDocument", false]], "ieerstr2tree() (in module nltk.chunk.util)": [[29, "nltk.chunk.util.ieerstr2tree", false]], "iesha_chat() (in module nltk.chat.iesha)": [[20, "nltk.chat.iesha.iesha_chat", false]], "iff (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.IFF", false]], "iff (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.IFF", false]], "iff (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.IFF", false]], "iff_list (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.IFF_LIST", false]], "iffexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.IffExpression", false]], "ignore (nltk.corpus.reader.conll.conllcorpusreader attribute)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.IGNORE", false]], "ignore (nltk.corpus.reader.conllcorpusreader attribute)": [[57, "nltk.corpus.reader.ConllCorpusReader.IGNORE", false]], "ignore_abbrev_penalty (nltk.tokenize.punkt.punkttrainer attribute)": [[309, "nltk.tokenize.punkt.PunktTrainer.IGNORE_ABBREV_PENALTY", false]], "ignorereadmecorpusview (class in nltk.corpus.reader.opinion_lexicon)": [[83, "nltk.corpus.reader.opinion_lexicon.IgnoreReadmeCorpusView", false]], "illegaltypeexception": [[191, "nltk.sem.logic.IllegalTypeException", false]], "image (class in nltk.corpus.reader.markdown)": [[78, "nltk.corpus.reader.markdown.Image", false]], "image_reader() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.image_reader", false]], "images() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.images", false]], "immutablemultiparentedtree (class in nltk.tree)": [[341, "nltk.tree.ImmutableMultiParentedTree", false]], "immutablemultiparentedtree (class in nltk.tree.immutable)": [[342, "nltk.tree.immutable.ImmutableMultiParentedTree", false]], "immutableparentedtree (class in nltk.tree)": [[341, "nltk.tree.ImmutableParentedTree", false]], "immutableparentedtree (class in nltk.tree.immutable)": [[342, "nltk.tree.immutable.ImmutableParentedTree", false]], "immutableprobabilisticmixin (class in nltk.probability)": [[179, "nltk.probability.ImmutableProbabilisticMixIn", false]], "immutableprobabilistictree (class in nltk.tree)": [[341, "nltk.tree.ImmutableProbabilisticTree", false]], "immutableprobabilistictree (class in nltk.tree.immutable)": [[342, "nltk.tree.immutable.ImmutableProbabilisticTree", false]], "immutabletree (class in nltk.tree)": [[341, "nltk.tree.ImmutableTree", false]], "immutabletree (class in nltk.tree.immutable)": [[342, "nltk.tree.immutable.ImmutableTree", false]], "imp (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.IMP", false]], "imp (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.IMP", false]], "imp (nltk.sem.linearlogic.tokens attribute)": [[190, "nltk.sem.linearlogic.Tokens.IMP", false]], "imp (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.IMP", false]], "imp_list (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.IMP_LIST", false]], "impexpression (class in nltk.sem.linearlogic)": [[190, "nltk.sem.linearlogic.ImpExpression", false]], "impexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.ImpExpression", false]], "import_from_stdlib() (in module nltk.internals)": [[131, "nltk.internals.import_from_stdlib", false]], "in_chunk_pattern (nltk.chunk.regexp.chunkstring attribute)": [[28, "nltk.chunk.regexp.ChunkString.IN_CHUNK_PATTERN", false]], "in_demo() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.in_demo", false]], "in_idle() (in module nltk.util)": [[357, "nltk.util.in_idle", false]], "in_strip_pattern (nltk.chunk.regexp.chunkstring attribute)": [[28, "nltk.chunk.regexp.ChunkString.IN_STRIP_PATTERN", false]], "include_abbrev_collocs (nltk.tokenize.punkt.punkttrainer attribute)": [[309, "nltk.tokenize.punkt.PunktTrainer.INCLUDE_ABBREV_COLLOCS", false]], "include_all_collocs (nltk.tokenize.punkt.punkttrainer attribute)": [[309, "nltk.tokenize.punkt.PunktTrainer.INCLUDE_ALL_COLLOCS", false]], "inconsistenttypehierarchyexception": [[191, "nltk.sem.logic.InconsistentTypeHierarchyException", false]], "incorrect() (nltk.chunk.util.chunkscore method)": [[29, "nltk.chunk.util.ChunkScore.incorrect", false]], "incr_download() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.incr_download", false]], "incrementalbottomupchartparser (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.IncrementalBottomUpChartParser", false]], "incrementalbottomupleftcornerchartparser (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.IncrementalBottomUpLeftCornerChartParser", false]], "incrementalchart (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.IncrementalChart", false]], "incrementalchartparser (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.IncrementalChartParser", false]], "incrementalleftcornerchartparser (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.IncrementalLeftCornerChartParser", false]], "incrementaltopdownchartparser (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.IncrementalTopDownChartParser", false]], "index (class in nltk.util)": [[357, "nltk.util.Index", false]], "index() (nltk.collections.abstractlazysequence method)": [[52, "nltk.collections.AbstractLazySequence.index", false]], "index() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.index", false]], "index() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.index", false]], "index() (nltk.text.text method)": [[300, "nltk.text.Text.index", false]], "index_sense() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.index_sense", false]], "index_sense() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.index_sense", false]], "index_timeout (nltk.downloader.downloader attribute)": [[113, "nltk.downloader.Downloader.INDEX_TIMEOUT", false]], "indiancorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.IndianCorpusReader", false]], "indiancorpusreader (class in nltk.corpus.reader.indian)": [[74, "nltk.corpus.reader.indian.IndianCorpusReader", false]], "indiancorpusview (class in nltk.corpus.reader.indian)": [[74, "nltk.corpus.reader.indian.IndianCorpusView", false]], "individualvariableexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.IndividualVariableExpression", false]], "induce_pcfg() (in module nltk.grammar)": [[121, "nltk.grammar.induce_pcfg", false]], "infile() (in module nltk.test.unit.test_json2csv_corpus)": [[270, "nltk.test.unit.test_json2csv_corpus.infile", false]], "infinitive (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.INFINITIVE", false]], "inflection (nltk.corpus.reader.propbank.propbankinstance attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.inflection", false]], "info() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.info", false]], "information_content() (in module nltk.corpus.reader.wordnet)": [[107, "nltk.corpus.reader.wordnet.information_content", false]], "init_vocab() (nltk.translate.ibm_model.ibmmodel method)": [[334, "nltk.translate.ibm_model.IBMModel.init_vocab", false]], "initial_columns (nltk.downloader.downloadergui attribute)": [[113, "nltk.downloader.DownloaderGUI.INITIAL_COLUMNS", false]], "initialize() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.initialize", false]], "initialize() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.initialize", false]], "initialize() (nltk.parse.earleychart.incrementalchart method)": [[165, "nltk.parse.earleychart.IncrementalChart.initialize", false]], "initialize() (nltk.parse.featurechart.instantiatevarschart method)": [[167, "nltk.parse.featurechart.InstantiateVarsChart.initialize", false]], "initialize() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.initialize", false]], "initialize() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.initialize", false]], "initialize_edge_scores() (nltk.parse.nonprojectivedependencyparser.probabilisticnonprojectiveparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser.initialize_edge_scores", false]], "initialize_labels() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.initialize_labels", false]], "initialize_labels() (nltk.sem.linearlogic.atomicexpression method)": [[190, "nltk.sem.linearlogic.AtomicExpression.initialize_labels", false]], "initialize_labels() (nltk.sem.linearlogic.impexpression method)": [[190, "nltk.sem.linearlogic.ImpExpression.initialize_labels", false]], "innermostfunction() (in module nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.innermostFunction", false]], "inrange() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.inRange", false]], "insert() (nltk.collections.trie method)": [[52, "nltk.collections.Trie.insert", false]], "insert() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.insert", false]], "insert() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.insert", false]], "insert() (nltk.featstruct.featlist method)": [[120, "nltk.featstruct.FeatList.insert", false]], "insert() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.insert", false]], "insert() (nltk.parse.featurechart.instantiatevarschart method)": [[167, "nltk.parse.featurechart.InstantiateVarsChart.insert", false]], "insert_child() (nltk.draw.tree.treesegmentwidget method)": [[118, "nltk.draw.tree.TreeSegmentWidget.insert_child", false]], "insert_child() (nltk.draw.util.sequencewidget method)": [[119, "nltk.draw.util.SequenceWidget.insert_child", false]], "insert_child() (nltk.draw.util.stackwidget method)": [[119, "nltk.draw.util.StackWidget.insert_child", false]], "insert_with_backpointer() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.insert_with_backpointer", false]], "insidechartparser (class in nltk.parse.pchart)": [[171, "nltk.parse.pchart.InsideChartParser", false]], "inst_vars() (nltk.parse.featurechart.instantiatevarschart method)": [[167, "nltk.parse.featurechart.InstantiateVarsChart.inst_vars", false]], "installed (nltk.downloader.downloader attribute)": [[113, "nltk.downloader.Downloader.INSTALLED", false]], "instances() (nltk.corpus.reader.nombank.nombankcorpusreader method)": [[81, "nltk.corpus.reader.nombank.NombankCorpusReader.instances", false]], "instances() (nltk.corpus.reader.nombankcorpusreader method)": [[57, "nltk.corpus.reader.NombankCorpusReader.instances", false]], "instances() (nltk.corpus.reader.propbank.propbankcorpusreader method)": [[89, "nltk.corpus.reader.propbank.PropbankCorpusReader.instances", false]], "instances() (nltk.corpus.reader.propbankcorpusreader method)": [[57, "nltk.corpus.reader.PropbankCorpusReader.instances", false]], "instances() (nltk.corpus.reader.senseval.sensevalcorpusreader method)": [[94, "nltk.corpus.reader.senseval.SensevalCorpusReader.instances", false]], "instances() (nltk.corpus.reader.sensevalcorpusreader method)": [[57, "nltk.corpus.reader.SensevalCorpusReader.instances", false]], "instantiate_edge() (nltk.parse.featurechart.instantiatevarschart method)": [[167, "nltk.parse.featurechart.InstantiateVarsChart.instantiate_edge", false]], "instantiatevarschart (class in nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.InstantiateVarsChart", false]], "internal_punctuation (nltk.tokenize.punkt.punktlanguagevars attribute)": [[309, "nltk.tokenize.punkt.PunktLanguageVars.internal_punctuation", false]], "international_regexes (nltk.tokenize.nist.nisttokenizer attribute)": [[308, "nltk.tokenize.nist.NISTTokenizer.INTERNATIONAL_REGEXES", false]], "international_tokenize() (nltk.tokenize.nist.nisttokenizer method)": [[308, "nltk.tokenize.nist.NISTTokenizer.international_tokenize", false]], "interpolatedlanguagemodel (class in nltk.lm.models)": [[138, "nltk.lm.models.InterpolatedLanguageModel", false]], "interpret() (nltk.sem.boxer.boxer method)": [[181, "nltk.sem.boxer.Boxer.interpret", false]], "interpret() (nltk.sem.boxer.nltkdrtboxerdrsinterpreter method)": [[181, "nltk.sem.boxer.NltkDrtBoxerDrsInterpreter.interpret", false]], "interpret() (nltk.sem.boxer.passthroughboxerdrsinterpreter method)": [[181, "nltk.sem.boxer.PassthroughBoxerDrsInterpreter.interpret", false]], "interpret_multi() (nltk.sem.boxer.boxer method)": [[181, "nltk.sem.boxer.Boxer.interpret_multi", false]], "interpret_multi_sents() (nltk.sem.boxer.boxer method)": [[181, "nltk.sem.boxer.Boxer.interpret_multi_sents", false]], "interpret_sents() (in module nltk.sem.util)": [[194, "nltk.sem.util.interpret_sents", false]], "interpret_sents() (nltk.sem.boxer.boxer method)": [[181, "nltk.sem.boxer.Boxer.interpret_sents", false]], "intersects() (nltk.tbl.feature.feature method)": [[231, "nltk.tbl.feature.Feature.intersects", false]], "interval_distance() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.interval_distance", false]], "inverse_dict() (in module nltk.langnames)": [[133, "nltk.langnames.inverse_dict", false]], "invert() (nltk.translate.api.alignedsent method)": [[323, "nltk.translate.api.AlignedSent.invert", false]], "invert() (nltk.translate.api.alignment method)": [[323, "nltk.translate.api.Alignment.invert", false]], "invert_dict() (in module nltk.util)": [[357, "nltk.util.invert_dict", false]], "invert_graph() (in module nltk.util)": [[357, "nltk.util.invert_graph", false]], "iob_sents() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.iob_sents", false]], "iob_sents() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.iob_sents", false]], "iob_words() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.iob_words", false]], "iob_words() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.iob_words", false]], "iota (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.IOTA", false]], "iota_list (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.IOTA_LIST", false]], "iotaexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.IotaExpression", false]], "ipipancorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.IPIPANCorpusReader", false]], "ipipancorpusreader (class in nltk.corpus.reader.ipipan)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader", false]], "ipipancorpusview (class in nltk.corpus.reader.ipipan)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusView", false]], "is_alpha (nltk.tokenize.punkt.punkttoken property)": [[309, "nltk.tokenize.punkt.PunktToken.is_alpha", false]], "is_atom() (nltk.inference.tableau.tableauprover static method)": [[130, "nltk.inference.tableau.TableauProver.is_atom", false]], "is_atom() (nltk.sem.logic.applicationexpression method)": [[191, "nltk.sem.logic.ApplicationExpression.is_atom", false]], "is_backward() (nltk.ccg.api.direction method)": [[13, "nltk.ccg.api.Direction.is_backward", false]], "is_binarised() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.is_binarised", false]], "is_chomsky_normal_form() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.is_chomsky_normal_form", false]], "is_cjk() (in module nltk.tokenize.util)": [[320, "nltk.tokenize.util.is_cjk", false]], "is_complete() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.is_complete", false]], "is_complete() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.is_complete", false]], "is_complete() (nltk.parse.chart.edgei method)": [[162, "nltk.parse.chart.EdgeI.is_complete", false]], "is_complete() (nltk.parse.chart.leafedge method)": [[162, "nltk.parse.chart.LeafEdge.is_complete", false]], "is_complete() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.is_complete", false]], "is_defined (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.is_defined", false]], "is_ellipsis (nltk.tokenize.punkt.punkttoken property)": [[309, "nltk.tokenize.punkt.PunktToken.is_ellipsis", false]], "is_eventvar() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.is_eventvar", false]], "is_flexible_chomsky_normal_form() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.is_flexible_chomsky_normal_form", false]], "is_forward() (nltk.ccg.api.direction method)": [[13, "nltk.ccg.api.Direction.is_forward", false]], "is_function() (nltk.ccg.api.abstractccgcategory method)": [[13, "nltk.ccg.api.AbstractCCGCategory.is_function", false]], "is_function() (nltk.ccg.api.ccgvar method)": [[13, "nltk.ccg.api.CCGVar.is_function", false]], "is_function() (nltk.ccg.api.functionalcategory method)": [[13, "nltk.ccg.api.FunctionalCategory.is_function", false]], "is_function() (nltk.ccg.api.primitivecategory method)": [[13, "nltk.ccg.api.PrimitiveCategory.is_function", false]], "is_funcvar() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.is_funcvar", false]], "is_head_word() (nltk.translate.ibm_model.alignmentinfo method)": [[334, "nltk.translate.ibm_model.AlignmentInfo.is_head_word", false]], "is_incomplete() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.is_incomplete", false]], "is_incomplete() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.is_incomplete", false]], "is_incomplete() (nltk.parse.chart.edgei method)": [[162, "nltk.parse.chart.EdgeI.is_incomplete", false]], "is_incomplete() (nltk.parse.chart.leafedge method)": [[162, "nltk.parse.chart.LeafEdge.is_incomplete", false]], "is_incomplete() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.is_incomplete", false]], "is_indvar() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.is_indvar", false]], "is_initial (nltk.tokenize.punkt.punkttoken property)": [[309, "nltk.tokenize.punkt.PunktToken.is_initial", false]], "is_installed() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.is_installed", false]], "is_leftcorner() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.is_leftcorner", false]], "is_lexical() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.is_lexical", false]], "is_lexical() (nltk.grammar.production method)": [[121, "nltk.grammar.Production.is_lexical", false]], "is_node() (nltk.sem.hole.holesemantics method)": [[188, "nltk.sem.hole.HoleSemantics.is_node", false]], "is_non_punct (nltk.tokenize.punkt.punkttoken property)": [[309, "nltk.tokenize.punkt.PunktToken.is_non_punct", false]], "is_nonempty() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.is_nonempty", false]], "is_nonlexical() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.is_nonlexical", false]], "is_nonlexical() (nltk.grammar.production method)": [[121, "nltk.grammar.Production.is_nonlexical", false]], "is_noun (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.is_noun", false]], "is_number (nltk.tokenize.punkt.punkttoken property)": [[309, "nltk.tokenize.punkt.PunktToken.is_number", false]], "is_ordered (nltk.corpus.reader.markdown.list attribute)": [[78, "nltk.corpus.reader.markdown.List.is_ordered", false]], "is_primitive() (nltk.ccg.api.abstractccgcategory method)": [[13, "nltk.ccg.api.AbstractCCGCategory.is_primitive", false]], "is_primitive() (nltk.ccg.api.ccgvar method)": [[13, "nltk.ccg.api.CCGVar.is_primitive", false]], "is_primitive() (nltk.ccg.api.functionalcategory method)": [[13, "nltk.ccg.api.FunctionalCategory.is_primitive", false]], "is_primitive() (nltk.ccg.api.primitivecategory method)": [[13, "nltk.ccg.api.PrimitiveCategory.is_primitive", false]], "is_pronoun_function() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.is_pronoun_function", false]], "is_rel() (in module nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.is_rel", false]], "is_stale() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.is_stale", false]], "is_tautology() (nltk.inference.resolution.clause method)": [[129, "nltk.inference.resolution.Clause.is_tautology", false]], "is_var() (nltk.ccg.api.abstractccgcategory method)": [[13, "nltk.ccg.api.AbstractCCGCategory.is_var", false]], "is_var() (nltk.ccg.api.ccgvar method)": [[13, "nltk.ccg.api.CCGVar.is_var", false]], "is_var() (nltk.ccg.api.functionalcategory method)": [[13, "nltk.ccg.api.FunctionalCategory.is_var", false]], "is_var() (nltk.ccg.api.primitivecategory method)": [[13, "nltk.ccg.api.PrimitiveCategory.is_var", false]], "is_variable() (nltk.ccg.api.direction method)": [[13, "nltk.ccg.api.Direction.is_variable", false]], "is_verb (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.is_verb", false]], "is_writable() (in module nltk.internals)": [[131, "nltk.internals.is_writable", false]], "iso639 (nltk.corpus.reader.panlex_swadesh.panlexlanguage attribute)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexLanguage.iso639", false]], "iso639_type (nltk.corpus.reader.panlex_swadesh.panlexlanguage attribute)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexLanguage.iso639_type", false]], "iso_to_crubadan() (nltk.corpus.reader.crubadan.crubadancorpusreader method)": [[70, "nltk.corpus.reader.crubadan.CrubadanCorpusReader.iso_to_crubadan", false]], "iso_to_crubadan() (nltk.corpus.reader.crubadancorpusreader method)": [[57, "nltk.corpus.reader.CrubadanCorpusReader.iso_to_crubadan", false]], "isristemmer (class in nltk.stem.isri)": [[204, "nltk.stem.isri.ISRIStemmer", false]], "issubsetof() (nltk.inference.resolution.clause method)": [[129, "nltk.inference.resolution.Clause.isSubsetOf", false]], "issuperset() (nltk.tbl.feature.feature method)": [[231, "nltk.tbl.feature.Feature.issuperset", false]], "isvariable() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.isvariable", false]], "isvariable() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.isvariable", false]], "italianstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.ItalianStemmer", false]], "itemcget() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.itemcget", false]], "itemconfig() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.itemconfig", false]], "itemconfig() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.itemconfig", false]], "itemconfigure() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.itemconfigure", false]], "itemconfigure() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.itemconfigure", false]], "items (nltk.corpus.reader.markdown.list attribute)": [[78, "nltk.corpus.reader.markdown.List.items", false]], "items() (nltk.collections.ordereddict method)": [[52, "nltk.collections.OrderedDict.items", false]], "iterate_from() (nltk.collections.abstractlazysequence method)": [[52, "nltk.collections.AbstractLazySequence.iterate_from", false]], "iterate_from() (nltk.collections.lazyconcatenation method)": [[52, "nltk.collections.LazyConcatenation.iterate_from", false]], "iterate_from() (nltk.collections.lazyiteratorlist method)": [[52, "nltk.collections.LazyIteratorList.iterate_from", false]], "iterate_from() (nltk.collections.lazymap method)": [[52, "nltk.collections.LazyMap.iterate_from", false]], "iterate_from() (nltk.collections.lazysubsequence method)": [[52, "nltk.collections.LazySubsequence.iterate_from", false]], "iterate_from() (nltk.collections.lazyzip method)": [[52, "nltk.collections.LazyZip.iterate_from", false]], "iterate_from() (nltk.corpus.reader.util.concatenatedcorpusview method)": [[104, "nltk.corpus.reader.util.ConcatenatedCorpusView.iterate_from", false]], "iterate_from() (nltk.corpus.reader.util.streambackedcorpusview method)": [[104, "nltk.corpus.reader.util.StreamBackedCorpusView.iterate_from", false]], "iteredges() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.iteredges", false]], "iteredges() (nltk.parse.earleychart.incrementalchart method)": [[165, "nltk.parse.earleychart.IncrementalChart.iteredges", false]], "ivdict2tab() (nltk.tabdata.tabencoder method)": [[212, "nltk.tabdata.TabEncoder.ivdict2tab", false]], "jaccard() (nltk.metrics.association.ngramassocmeasures class method)": [[146, "nltk.metrics.association.NgramAssocMeasures.jaccard", false]], "jaccard_distance() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.jaccard_distance", false]], "jaro_similarity() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.jaro_similarity", false]], "jaro_winkler_similarity() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.jaro_winkler_similarity", false]], "java() (in module nltk.internals)": [[131, "nltk.internals.java", false]], "jcn_similarity() (in module nltk.corpus.reader.wordnet)": [[107, "nltk.corpus.reader.wordnet.jcn_similarity", false]], "jcn_similarity() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.jcn_similarity", false]], "jcn_similarity() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.jcn_similarity", false]], "jcn_similarity() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.jcn_similarity", false]], "join() (nltk.data.filesystempathpointer method)": [[111, "nltk.data.FileSystemPathPointer.join", false]], "join() (nltk.data.pathpointer method)": [[111, "nltk.data.PathPointer.join", false]], "json2csv() (in module nltk.twitter.common)": [[353, "nltk.twitter.common.json2csv", false]], "json2csv_entities() (in module nltk.twitter.common)": [[353, "nltk.twitter.common.json2csv_entities", false]], "json2csv_preprocess() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.json2csv_preprocess", false]], "json_tag (nltk.tag.brill.brilltagger attribute)": [[215, "nltk.tag.brill.BrillTagger.json_tag", false]], "json_tag (nltk.tag.brill.pos attribute)": [[215, "nltk.tag.brill.Pos.json_tag", false]], "json_tag (nltk.tag.brill.word attribute)": [[215, "nltk.tag.brill.Word.json_tag", false]], "json_tag (nltk.tag.perceptron.averagedperceptron attribute)": [[221, "nltk.tag.perceptron.AveragedPerceptron.json_tag", false]], "json_tag (nltk.tag.perceptron.perceptrontagger attribute)": [[221, "nltk.tag.perceptron.PerceptronTagger.json_tag", false]], "json_tag (nltk.tag.sequential.affixtagger attribute)": [[223, "nltk.tag.sequential.AffixTagger.json_tag", false]], "json_tag (nltk.tag.sequential.bigramtagger attribute)": [[223, "nltk.tag.sequential.BigramTagger.json_tag", false]], "json_tag (nltk.tag.sequential.defaulttagger attribute)": [[223, "nltk.tag.sequential.DefaultTagger.json_tag", false]], "json_tag (nltk.tag.sequential.ngramtagger attribute)": [[223, "nltk.tag.sequential.NgramTagger.json_tag", false]], "json_tag (nltk.tag.sequential.regexptagger attribute)": [[223, "nltk.tag.sequential.RegexpTagger.json_tag", false]], "json_tag (nltk.tag.sequential.trigramtagger attribute)": [[223, "nltk.tag.sequential.TrigramTagger.json_tag", false]], "json_tag (nltk.tag.sequential.unigramtagger attribute)": [[223, "nltk.tag.sequential.UnigramTagger.json_tag", false]], "json_tag (nltk.tbl.feature.feature attribute)": [[231, "nltk.tbl.feature.Feature.json_tag", false]], "json_tag (nltk.tbl.rule.rule attribute)": [[232, "nltk.tbl.rule.Rule.json_tag", false]], "jsontaggeddecoder (class in nltk.jsontags)": [[132, "nltk.jsontags.JSONTaggedDecoder", false]], "jsontaggedencoder (class in nltk.jsontags)": [[132, "nltk.jsontags.JSONTaggedEncoder", false]], "kappa() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.kappa", false]], "kappa_pairwise() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.kappa_pairwise", false]], "katakana_hangul_halfwidth (nltk.tokenize.util.cjkchars attribute)": [[320, "nltk.tokenize.util.CJKChars.Katakana_Hangul_Halfwidth", false]], "kendall_tau() (in module nltk.translate.ribes_score)": [[339, "nltk.translate.ribes_score.kendall_tau", false]], "key() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.key", false]], "key() (nltk.metrics.confusionmatrix.confusionmatrix method)": [[147, "nltk.metrics.confusionmatrix.ConfusionMatrix.key", false]], "keys() (nltk.collections.ordereddict method)": [[52, "nltk.collections.OrderedDict.keys", false]], "keywords() (nltk.corpus.reader.comparative_sents.comparativesentencescorpusreader method)": [[68, "nltk.corpus.reader.comparative_sents.ComparativeSentencesCorpusReader.keywords", false]], "keywords() (nltk.corpus.reader.comparativesentencescorpusreader method)": [[57, "nltk.corpus.reader.ComparativeSentencesCorpusReader.keywords", false]], "keywords_readme() (nltk.corpus.reader.comparative_sents.comparativesentencescorpusreader method)": [[68, "nltk.corpus.reader.comparative_sents.ComparativeSentencesCorpusReader.keywords_readme", false]], "keywords_readme() (nltk.corpus.reader.comparativesentencescorpusreader method)": [[57, "nltk.corpus.reader.ComparativeSentencesCorpusReader.keywords_readme", false]], "kmeansclusterer (class in nltk.cluster.kmeans)": [[50, "nltk.cluster.kmeans.KMeansClusterer", false]], "knbcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.KNBCorpusReader", false]], "knbcorpusreader (class in nltk.corpus.reader.knbc)": [[76, "nltk.corpus.reader.knbc.KNBCorpusReader", false]], "kneserney (class in nltk.lm.smoothing)": [[140, "nltk.lm.smoothing.KneserNey", false]], "kneserney_bigram_model() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.kneserney_bigram_model", false]], "kneserney_trigram_model() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.kneserney_trigram_model", false]], "kneserneyinterpolated (class in nltk.lm)": [[135, "nltk.lm.KneserNeyInterpolated", false]], "kneserneyinterpolated (class in nltk.lm.models)": [[138, "nltk.lm.models.KneserNeyInterpolated", false]], "kneserneyprobdist (class in nltk.probability)": [[179, "nltk.probability.KneserNeyProbDist", false]], "label (nltk.corpus.reader.markdown.image attribute)": [[78, "nltk.corpus.reader.markdown.Image.label", false]], "label (nltk.corpus.reader.markdown.link attribute)": [[78, "nltk.corpus.reader.markdown.Link.label", false]], "label (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.LABEL", false]], "label() (nltk.draw.tree.treesegmentwidget method)": [[118, "nltk.draw.tree.TreeSegmentWidget.label", false]], "label() (nltk.tree.tree method)": [[341, "nltk.tree.Tree.label", false]], "label() (nltk.tree.tree.tree method)": [[348, "nltk.tree.tree.Tree.label", false]], "label_config (nltk.draw.table.multilistbox attribute)": [[117, "nltk.draw.table.MultiListbox.LABEL_CONFIG", false]], "label_indivs() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.label_indivs", false]], "labels() (nltk.classify.api.classifieri method)": [[31, "nltk.classify.api.ClassifierI.labels", false]], "labels() (nltk.classify.api.multiclassifieri method)": [[31, "nltk.classify.api.MultiClassifierI.labels", false]], "labels() (nltk.classify.decisiontree.decisiontreeclassifier method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.labels", false]], "labels() (nltk.classify.maxent.binarymaxentfeatureencoding method)": [[33, "nltk.classify.maxent.BinaryMaxentFeatureEncoding.labels", false]], "labels() (nltk.classify.maxent.functionbackedmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.FunctionBackedMaxentFeatureEncoding.labels", false]], "labels() (nltk.classify.maxent.maxentclassifier method)": [[33, "nltk.classify.maxent.MaxentClassifier.labels", false]], "labels() (nltk.classify.maxent.maxentfeatureencodingi method)": [[33, "nltk.classify.maxent.MaxentFeatureEncodingI.labels", false]], "labels() (nltk.classify.maxent.tadmeventmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.TadmEventMaxentFeatureEncoding.labels", false]], "labels() (nltk.classify.maxent.typedmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.TypedMaxentFeatureEncoding.labels", false]], "labels() (nltk.classify.naivebayes.naivebayesclassifier method)": [[35, "nltk.classify.naivebayes.NaiveBayesClassifier.labels", false]], "labels() (nltk.classify.scikitlearn.sklearnclassifier method)": [[38, "nltk.classify.scikitlearn.SklearnClassifier.labels", false]], "labels() (nltk.classify.weka.arff_formatter method)": [[44, "nltk.classify.weka.ARFF_Formatter.labels", false]], "lambda (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.LAMBDA", false]], "lambda_abstract() (nltk.sem.glue.glueformula method)": [[187, "nltk.sem.glue.GlueFormula.lambda_abstract", false]], "lambda_list (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.LAMBDA_LIST", false]], "lambdaexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.LambdaExpression", false]], "lancasterstemmer (class in nltk.stem.lancaster)": [[205, "nltk.stem.lancaster.LancasterStemmer", false]], "lang() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.lang", false]], "lang2q() (in module nltk.langnames)": [[133, "nltk.langnames.lang2q", false]], "lang2str() (nltk.corpus.reader.bcp47.bcp47corpusreader method)": [[60, "nltk.corpus.reader.bcp47.BCP47CorpusReader.lang2str", false]], "lang2str() (nltk.corpus.reader.bcp47corpusreader method)": [[57, "nltk.corpus.reader.BCP47CorpusReader.lang2str", false]], "lang_dependent_regexes (nltk.tokenize.nist.nisttokenizer attribute)": [[308, "nltk.tokenize.nist.NISTTokenizer.LANG_DEPENDENT_REGEXES", false]], "lang_dists() (nltk.classify.textcat.textcat method)": [[42, "nltk.classify.textcat.TextCat.lang_dists", false]], "lang_freq() (nltk.corpus.reader.crubadan.crubadancorpusreader method)": [[70, "nltk.corpus.reader.crubadan.CrubadanCorpusReader.lang_freq", false]], "lang_freq() (nltk.corpus.reader.crubadancorpusreader method)": [[57, "nltk.corpus.reader.CrubadanCorpusReader.lang_freq", false]], "lang_independent_sub() (nltk.tokenize.nist.nisttokenizer method)": [[308, "nltk.tokenize.nist.NISTTokenizer.lang_independent_sub", false]], "langcode() (in module nltk.langnames)": [[133, "nltk.langnames.langcode", false]], "langname() (in module nltk.langnames)": [[133, "nltk.langnames.langname", false]], "langs() (nltk.corpus.reader.crubadan.crubadancorpusreader method)": [[70, "nltk.corpus.reader.crubadan.CrubadanCorpusReader.langs", false]], "langs() (nltk.corpus.reader.crubadancorpusreader method)": [[57, "nltk.corpus.reader.CrubadanCorpusReader.langs", false]], "langs() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.langs", false]], "langs() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.langs", false]], "language_codes() (nltk.corpus.reader.panlex_swadesh.panlexswadeshcorpusreader method)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexSwadeshCorpusReader.language_codes", false]], "language_codes() (nltk.corpus.reader.panlexswadeshcorpusreader method)": [[57, "nltk.corpus.reader.PanlexSwadeshCorpusReader.language_codes", false]], "language_varieties() (nltk.corpus.reader.panlex_lite.panlexlitecorpusreader method)": [[84, "nltk.corpus.reader.panlex_lite.PanLexLiteCorpusReader.language_varieties", false]], "language_varieties() (nltk.corpus.reader.panlexlitecorpusreader method)": [[57, "nltk.corpus.reader.PanLexLiteCorpusReader.language_varieties", false]], "languageindependent (class in nltk.translate.gale_church)": [[326, "nltk.translate.gale_church.LanguageIndependent", false]], "languagemodel (class in nltk.lm.api)": [[136, "nltk.lm.api.LanguageModel", false]], "languages (nltk.stem.snowball.snowballstemmer attribute)": [[209, "nltk.stem.snowball.SnowballStemmer.languages", false]], "langvar_uid (nltk.corpus.reader.panlex_swadesh.panlexlanguage attribute)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexLanguage.langvar_uid", false]], "laplace (class in nltk.lm)": [[135, "nltk.lm.Laplace", false]], "laplace (class in nltk.lm.models)": [[138, "nltk.lm.models.Laplace", false]], "laplace_bigram_model() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.laplace_bigram_model", false]], "laplaceprobdist (class in nltk.probability)": [[179, "nltk.probability.LaplaceProbDist", false]], "last_distances (nltk.classify.textcat.textcat attribute)": [[42, "nltk.classify.textcat.TextCat.last_distances", false]], "lazyconcatenation (class in nltk.collections)": [[52, "nltk.collections.LazyConcatenation", false]], "lazycorpusloader (class in nltk.corpus.util)": [[110, "nltk.corpus.util.LazyCorpusLoader", false]], "lazyenumerate (class in nltk.collections)": [[52, "nltk.collections.LazyEnumerate", false]], "lazyiteratorlist (class in nltk.collections)": [[52, "nltk.collections.LazyIteratorList", false]], "lazyloader (class in nltk.data)": [[111, "nltk.data.LazyLoader", false]], "lazymap (class in nltk.collections)": [[52, "nltk.collections.LazyMap", false]], "lazymodule (class in nltk.lazyimport)": [[134, "nltk.lazyimport.LazyModule", false]], "lazysubsequence (class in nltk.collections)": [[52, "nltk.collections.LazySubsequence", false]], "lazyzip (class in nltk.collections)": [[52, "nltk.collections.LazyZip", false]], "lch_similarity() (in module nltk.corpus.reader.wordnet)": [[107, "nltk.corpus.reader.wordnet.lch_similarity", false]], "lch_similarity() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.lch_similarity", false]], "lch_similarity() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.lch_similarity", false]], "lch_similarity() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.lch_similarity", false]], "leaf (nltk.collections.trie attribute)": [[52, "nltk.collections.Trie.LEAF", false]], "leaf() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.leaf", false]], "leaf() (nltk.classify.decisiontree.decisiontreeclassifier static method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.leaf", false]], "leaf() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.leaf", false]], "leaf_treeposition() (nltk.tree.tree method)": [[341, "nltk.tree.Tree.leaf_treeposition", false]], "leaf_treeposition() (nltk.tree.tree.tree method)": [[348, "nltk.tree.tree.Tree.leaf_treeposition", false]], "leafedge (class in nltk.parse.chart)": [[162, "nltk.parse.chart.LeafEdge", false]], "leafinitrule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.LeafInitRule", false]], "leaves() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.leaves", false]], "leaves() (nltk.tree.tree method)": [[341, "nltk.tree.Tree.leaves", false]], "leaves() (nltk.tree.tree.tree method)": [[348, "nltk.tree.tree.Tree.leaves", false]], "left_arc (nltk.parse.transitionparser.transition attribute)": [[176, "nltk.parse.transitionparser.Transition.LEFT_ARC", false]], "left_arc() (nltk.parse.transitionparser.transition method)": [[176, "nltk.parse.transitionparser.Transition.left_arc", false]], "left_children() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.left_children", false]], "left_sibling() (nltk.tree.parented.parentedtree method)": [[343, "nltk.tree.parented.ParentedTree.left_sibling", false]], "left_sibling() (nltk.tree.parentedtree method)": [[341, "nltk.tree.ParentedTree.left_sibling", false]], "left_siblings() (nltk.tree.multiparentedtree method)": [[341, "nltk.tree.MultiParentedTree.left_siblings", false]], "left_siblings() (nltk.tree.parented.multiparentedtree method)": [[343, "nltk.tree.parented.MultiParentedTree.left_siblings", false]], "leftcorner_parents() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.leftcorner_parents", false]], "leftcornerchartparser (class in nltk.parse.chart)": [[162, "nltk.parse.chart.LeftCornerChartParser", false]], "leftcorners() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.leftcorners", false]], "legalitysyllabletokenizer (class in nltk.tokenize.legality_principle)": [[306, "nltk.tokenize.legality_principle.LegalitySyllableTokenizer", false]], "lemma (class in nltk.corpus.reader.wordnet)": [[107, "nltk.corpus.reader.wordnet.Lemma", false]], "lemma() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.lemma", false]], "lemma() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.lemma", false]], "lemma_count() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.lemma_count", false]], "lemma_count() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.lemma_count", false]], "lemma_from_key() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.lemma_from_key", false]], "lemma_from_key() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.lemma_from_key", false]], "lemma_names() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.lemma_names", false]], "lemma_paras() (nltk.corpus.reader.mte.mtecorpusreader method)": [[79, "nltk.corpus.reader.mte.MTECorpusReader.lemma_paras", false]], "lemma_paras() (nltk.corpus.reader.mte.mtefilereader method)": [[79, "nltk.corpus.reader.mte.MTEFileReader.lemma_paras", false]], "lemma_paras() (nltk.corpus.reader.mtecorpusreader method)": [[57, "nltk.corpus.reader.MTECorpusReader.lemma_paras", false]], "lemma_sents() (nltk.corpus.reader.mte.mtecorpusreader method)": [[79, "nltk.corpus.reader.mte.MTECorpusReader.lemma_sents", false]], "lemma_sents() (nltk.corpus.reader.mte.mtefilereader method)": [[79, "nltk.corpus.reader.mte.MTEFileReader.lemma_sents", false]], "lemma_sents() (nltk.corpus.reader.mtecorpusreader method)": [[57, "nltk.corpus.reader.MTECorpusReader.lemma_sents", false]], "lemma_words() (nltk.corpus.reader.mte.mtecorpusreader method)": [[79, "nltk.corpus.reader.mte.MTECorpusReader.lemma_words", false]], "lemma_words() (nltk.corpus.reader.mte.mtefilereader method)": [[79, "nltk.corpus.reader.mte.MTEFileReader.lemma_words", false]], "lemma_words() (nltk.corpus.reader.mtecorpusreader method)": [[57, "nltk.corpus.reader.MTECorpusReader.lemma_words", false]], "lemmas() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.lemmas", false]], "lemmas() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.lemmas", false]], "lemmas() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.lemmas", false]], "lemmas() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.lemmas", false]], "lemmas() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.lemmas", false]], "lemmatize() (nltk.stem.wordnet.wordnetlemmatizer method)": [[211, "nltk.stem.wordnet.WordNetLemmatizer.lemmatize", false]], "length() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.length", false]], "length() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.length", false]], "length() (nltk.classify.maxent.binarymaxentfeatureencoding method)": [[33, "nltk.classify.maxent.BinaryMaxentFeatureEncoding.length", false]], "length() (nltk.classify.maxent.functionbackedmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.FunctionBackedMaxentFeatureEncoding.length", false]], "length() (nltk.classify.maxent.gisencoding method)": [[33, "nltk.classify.maxent.GISEncoding.length", false]], "length() (nltk.classify.maxent.maxentfeatureencodingi method)": [[33, "nltk.classify.maxent.MaxentFeatureEncodingI.length", false]], "length() (nltk.classify.maxent.tadmeventmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.TadmEventMaxentFeatureEncoding.length", false]], "length() (nltk.classify.maxent.typedmaxentfeatureencoding method)": [[33, "nltk.classify.maxent.TypedMaxentFeatureEncoding.length", false]], "length() (nltk.parse.chart.edgei method)": [[162, "nltk.parse.chart.EdgeI.length", false]], "length() (nltk.parse.chart.leafedge method)": [[162, "nltk.parse.chart.LeafEdge.length", false]], "length() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.length", false]], "leq (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.LEQ", false]], "lesk() (in module nltk.wsd)": [[358, "nltk.wsd.lesk", false]], "lexicon() (nltk.ccg.chart.ccgchartparser method)": [[14, "nltk.ccg.chart.CCGChartParser.lexicon", false]], "lexname() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.lexname", false]], "lhs() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.lhs", false]], "lhs() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.lhs", false]], "lhs() (nltk.grammar.production method)": [[121, "nltk.grammar.Production.lhs", false]], "lhs() (nltk.parse.chart.edgei method)": [[162, "nltk.parse.chart.EdgeI.lhs", false]], "lhs() (nltk.parse.chart.leafedge method)": [[162, "nltk.parse.chart.LeafEdge.lhs", false]], "lhs() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.lhs", false]], "license (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.license", false]], "license() (nltk.corpus.reader.api.corpusreader method)": [[59, "nltk.corpus.reader.api.CorpusReader.license", false]], "license() (nltk.corpus.reader.corpusreader method)": [[57, "nltk.corpus.reader.CorpusReader.license", false]], "license() (nltk.corpus.reader.panlex_swadesh.panlexswadeshcorpusreader method)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexSwadeshCorpusReader.license", false]], "license() (nltk.corpus.reader.panlexswadeshcorpusreader method)": [[57, "nltk.corpus.reader.PanlexSwadeshCorpusReader.license", false]], "license() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.license", false]], "license() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.license", false]], "lidstone (class in nltk.lm)": [[135, "nltk.lm.Lidstone", false]], "lidstone (class in nltk.lm.models)": [[138, "nltk.lm.models.Lidstone", false]], "lidstone_bigram_model() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.lidstone_bigram_model", false]], "lidstone_trigram_model() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.lidstone_trigram_model", false]], "lidstoneprobdist (class in nltk.probability)": [[179, "nltk.probability.LidstoneProbDist", false]], "likelihood() (nltk.cluster.api.clusteri method)": [[47, "nltk.cluster.api.ClusterI.likelihood", false]], "likelihood() (nltk.cluster.util.vectorspaceclusterer method)": [[51, "nltk.cluster.util.VectorSpaceClusterer.likelihood", false]], "likelihood_ratio() (nltk.metrics.association.ngramassocmeasures class method)": [[146, "nltk.metrics.association.NgramAssocMeasures.likelihood_ratio", false]], "likelihood_vectorspace() (nltk.cluster.em.emclusterer method)": [[48, "nltk.cluster.em.EMClusterer.likelihood_vectorspace", false]], "likelihood_vectorspace() (nltk.cluster.util.vectorspaceclusterer method)": [[51, "nltk.cluster.util.VectorSpaceClusterer.likelihood_vectorspace", false]], "limit_by_time_demo() (in module nltk.twitter.twitter_demo)": [[354, "nltk.twitter.twitter_demo.limit_by_time_demo", false]], "lin_similarity() (in module nltk.corpus.reader.wordnet)": [[107, "nltk.corpus.reader.wordnet.lin_similarity", false]], "lin_similarity() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.lin_similarity", false]], "lin_similarity() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.lin_similarity", false]], "lin_similarity() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.lin_similarity", false]], "line() (nltk.inference.resolution.debugobject method)": [[129, "nltk.inference.resolution.DebugObject.line", false]], "line() (nltk.inference.tableau.debug method)": [[130, "nltk.inference.tableau.Debug.line", false]], "line_tokenize() (in module nltk.tokenize.simple)": [[313, "nltk.tokenize.simple.line_tokenize", false]], "linearlogicapplicationexception": [[190, "nltk.sem.linearlogic.LinearLogicApplicationException", false]], "linearlogicparser (class in nltk.sem.linearlogic)": [[190, "nltk.sem.linearlogic.LinearLogicParser", false]], "linebuffer (nltk.data.seekableunicodestreamreader attribute)": [[111, "nltk.data.SeekableUnicodeStreamReader.linebuffer", false]], "lines (nltk.corpus.reader.markdown.codeblock property)": [[78, "nltk.corpus.reader.markdown.CodeBlock.lines", false]], "lines() (nltk.corpus.reader.nombank.nombankcorpusreader method)": [[81, "nltk.corpus.reader.nombank.NombankCorpusReader.lines", false]], "lines() (nltk.corpus.reader.nombankcorpusreader method)": [[57, "nltk.corpus.reader.NombankCorpusReader.lines", false]], "lines() (nltk.corpus.reader.propbank.propbankcorpusreader method)": [[89, "nltk.corpus.reader.propbank.PropbankCorpusReader.lines", false]], "lines() (nltk.corpus.reader.propbankcorpusreader method)": [[57, "nltk.corpus.reader.PropbankCorpusReader.lines", false]], "linestart (nltk.tokenize.punkt.punkttoken attribute)": [[309, "nltk.tokenize.punkt.PunktToken.linestart", false]], "linetok (nltk.test.unit.test_corpus_views.testcorpusviews attribute)": [[263, "nltk.test.unit.test_corpus_views.TestCorpusViews.linetok", false]], "linetokenizer (class in nltk.tokenize.simple)": [[313, "nltk.tokenize.simple.LineTokenizer", false]], "link (class in nltk.corpus.reader.markdown)": [[78, "nltk.corpus.reader.markdown.Link", false]], "link_reader() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.link_reader", false]], "links() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.links", false]], "linthesauruscorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.LinThesaurusCorpusReader", false]], "linthesauruscorpusreader (class in nltk.corpus.reader.lin)": [[77, "nltk.corpus.reader.lin.LinThesaurusCorpusReader", false]], "list (class in nltk.corpus.reader.markdown)": [[78, "nltk.corpus.reader.markdown.List", false]], "list() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.list", false]], "list2sym() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.list2sym", false]], "list2txt() (nltk.tabdata.tabencoder method)": [[212, "nltk.tabdata.TabEncoder.list2txt", false]], "list_reader() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.list_reader", false]], "listbox_config (nltk.draw.table.multilistbox attribute)": [[117, "nltk.draw.table.MultiListbox.LISTBOX_CONFIG", false]], "listboxes (nltk.draw.table.multilistbox property)": [[117, "nltk.draw.table.MultiListbox.listboxes", false]], "lists() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.lists", false]], "load() (in module nltk.data)": [[111, "nltk.data.load", false]], "load() (nltk.parse.dependencygraph.dependencygraph static method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.load", false]], "load() (nltk.tag.perceptron.averagedperceptron method)": [[221, "nltk.tag.perceptron.AveragedPerceptron.load", false]], "load_ace_data() (in module nltk.chunk.named_entity)": [[27, "nltk.chunk.named_entity.load_ace_data", false]], "load_ace_file() (in module nltk.chunk.named_entity)": [[27, "nltk.chunk.named_entity.load_ace_file", false]], "load_array() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.load_array", false]], "load_creds() (nltk.twitter.util.authenticate method)": [[356, "nltk.twitter.util.Authenticate.load_creds", false]], "load_fol() (in module nltk.inference.discourse)": [[125, "nltk.inference.discourse.load_fol", false]], "load_from_json() (nltk.tag.perceptron.perceptrontagger method)": [[221, "nltk.tag.perceptron.PerceptronTagger.load_from_json", false]], "load_lang() (nltk.tokenize.punkt.punkttokenizer method)": [[309, "nltk.tokenize.punkt.PunktTokenizer.load_lang", false]], "load_maxent_params() (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.load_maxent_params", false]], "load_params() (nltk.chunk.named_entity.maxent_ne_chunker method)": [[27, "nltk.chunk.named_entity.Maxent_NE_Chunker.load_params", false]], "load_parser() (in module nltk.parse.util)": [[177, "nltk.parse.util.load_parser", false]], "load_pos() (in module nltk.tag.hmm)": [[218, "nltk.tag.hmm.load_pos", false]], "load_punkt_params() (in module nltk.tokenize.punkt)": [[309, "nltk.tokenize.punkt.load_punkt_params", false]], "load_stanford_segmenter() (in module nltk.test.unit.test_tokenize)": [[284, "nltk.test.unit.test_tokenize.load_stanford_segmenter", false]], "load_wiki_q() (nltk.corpus.reader.bcp47.bcp47corpusreader method)": [[60, "nltk.corpus.reader.bcp47.BCP47CorpusReader.load_wiki_q", false]], "load_wiki_q() (nltk.corpus.reader.bcp47corpusreader method)": [[57, "nltk.corpus.reader.BCP47CorpusReader.load_wiki_q", false]], "localtimezoneoffsetwithutc (class in nltk.twitter.api)": [[352, "nltk.twitter.api.LocalTimezoneOffsetWithUTC", false]], "log_base2() (in module nltk.lm.util)": [[141, "nltk.lm.util.log_base2", false]], "log_likelihood() (in module nltk.classify.util)": [[43, "nltk.classify.util.log_likelihood", false]], "log_likelihood() (in module nltk.metrics.scores)": [[150, "nltk.metrics.scores.log_likelihood", false]], "log_likelihood() (in module nltk.probability)": [[179, "nltk.probability.log_likelihood", false]], "log_prob (nltk.translate.api.phrasetableentry attribute)": [[323, "nltk.translate.api.PhraseTableEntry.log_prob", false]], "log_probability() (nltk.tag.hmm.hiddenmarkovmodeltagger method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.log_probability", false]], "logicalexpressionexception": [[191, "nltk.sem.logic.LogicalExpressionException", false]], "logicparser (class in nltk.sem.logic)": [[191, "nltk.sem.logic.LogicParser", false]], "logprob() (nltk.probability.dictionaryprobdist method)": [[179, "nltk.probability.DictionaryProbDist.logprob", false]], "logprob() (nltk.probability.mutableprobdist method)": [[179, "nltk.probability.MutableProbDist.logprob", false]], "logprob() (nltk.probability.probabilisticmixin method)": [[179, "nltk.probability.ProbabilisticMixIn.logprob", false]], "logprob() (nltk.probability.probdisti method)": [[179, "nltk.probability.ProbDistI.logprob", false]], "logscore() (nltk.lm.api.languagemodel method)": [[136, "nltk.lm.api.LanguageModel.logscore", false]], "logsumexp2() (in module nltk.tag.hmm)": [[218, "nltk.tag.hmm.logsumexp2", false]], "longest_target_sentence_length() (in module nltk.translate.ibm_model)": [[334, "nltk.translate.ibm_model.longest_target_sentence_length", false]], "longestchartparser (class in nltk.parse.pchart)": [[171, "nltk.parse.pchart.LongestChartParser", false]], "longid() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.longid", false]], "longid() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.longid", false]], "lookup() (nltk.lm.vocabulary method)": [[135, "nltk.lm.Vocabulary.lookup", false]], "lookup() (nltk.lm.vocabulary.vocabulary method)": [[142, "nltk.lm.vocabulary.Vocabulary.lookup", false]], "lookup() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.lookup", false]], "lookup_by_userid_demo() (in module nltk.twitter.twitter_demo)": [[354, "nltk.twitter.twitter_demo.lookup_by_userid_demo", false]], "lookup_unique() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.lookup_unique", false]], "lowest_common_hypernyms() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.lowest_common_hypernyms", false]], "lstrip (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.LSTRIP", false]], "lu() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.lu", false]], "lu() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.lu", false]], "lu_basic() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.lu_basic", false]], "lu_basic() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.lu_basic", false]], "lu_ids_and_names() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.lu_ids_and_names", false]], "lu_ids_and_names() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.lu_ids_and_names", false]], "lus() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.lus", false]], "lus() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.lus", false]], "mace (class in nltk.inference.mace)": [[126, "nltk.inference.mace.Mace", false]], "macecommand (class in nltk.inference.mace)": [[126, "nltk.inference.mace.MaceCommand", false]], "macintyrecontractions (class in nltk.tokenize.destructive)": [[305, "nltk.tokenize.destructive.MacIntyreContractions", false]], "macmorphocorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.MacMorphoCorpusReader", false]], "macmorphocorpusreader (class in nltk.corpus.reader.tagged)": [[99, "nltk.corpus.reader.tagged.MacMorphoCorpusReader", false]], "main() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.main", false]], "mainloop() (nltk.downloader.downloadergui method)": [[113, "nltk.downloader.DownloaderGUI.mainloop", false]], "mainloop() (nltk.draw.cfg.cfgdemo method)": [[115, "nltk.draw.cfg.CFGDemo.mainloop", false]], "mainloop() (nltk.draw.tree.treeview method)": [[118, "nltk.draw.tree.TreeView.mainloop", false]], "mainloop() (nltk.draw.util.canvasframe method)": [[119, "nltk.draw.util.CanvasFrame.mainloop", false]], "mainloop() (nltk.draw.util.showtext method)": [[119, "nltk.draw.util.ShowText.mainloop", false]], "mainloop() (nltk.sem.drt_glue_demo.drtgluedemo method)": [[185, "nltk.sem.drt_glue_demo.DrtGlueDemo.mainloop", false]], "make_applicationexpression() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.make_ApplicationExpression", false]], "make_applicationexpression() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.make_ApplicationExpression", false]], "make_booleanexpression() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.make_BooleanExpression", false]], "make_booleanexpression() (nltk.sem.linearlogic.linearlogicparser method)": [[190, "nltk.sem.linearlogic.LinearLogicParser.make_BooleanExpression", false]], "make_booleanexpression() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.make_BooleanExpression", false]], "make_equalityexpression() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.make_EqualityExpression", false]], "make_equalityexpression() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.make_EqualityExpression", false]], "make_equalityexpression() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.make_EqualityExpression", false]], "make_lambdaexpression() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.make_LambdaExpression", false]], "make_lambdaexpression() (nltk.sem.glue.drtglueformula method)": [[187, "nltk.sem.glue.DrtGlueFormula.make_LambdaExpression", false]], "make_lambdaexpression() (nltk.sem.glue.glueformula method)": [[187, "nltk.sem.glue.GlueFormula.make_LambdaExpression", false]], "make_lambdaexpression() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.make_LambdaExpression", false]], "make_lex() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.make_lex", false]], "make_lex_dict() (nltk.sentiment.vader.sentimentintensityanalyzer method)": [[198, "nltk.sentiment.vader.SentimentIntensityAnalyzer.make_lex_dict", false]], "make_negatedexpression() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.make_NegatedExpression", false]], "make_negatedexpression() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.make_NegatedExpression", false]], "make_quanifiedexpression() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.make_QuanifiedExpression", false]], "make_tree() (nltk.parse.corenlp.corenlpdependencyparser method)": [[163, "nltk.parse.corenlp.CoreNLPDependencyParser.make_tree", false]], "make_tree() (nltk.parse.corenlp.corenlpparser method)": [[163, "nltk.parse.corenlp.CoreNLPParser.make_tree", false]], "make_valuation() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.make_valuation", false]], "make_variableexpression() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.make_VariableExpression", false]], "make_variableexpression() (nltk.sem.drt.drtparser method)": [[184, "nltk.sem.drt.DrtParser.make_VariableExpression", false]], "make_variableexpression() (nltk.sem.glue.drtglueformula method)": [[187, "nltk.sem.glue.DrtGlueFormula.make_VariableExpression", false]], "make_variableexpression() (nltk.sem.glue.glueformula method)": [[187, "nltk.sem.glue.GlueFormula.make_VariableExpression", false]], "make_variableexpression() (nltk.sem.linearlogic.linearlogicparser method)": [[190, "nltk.sem.linearlogic.LinearLogicParser.make_VariableExpression", false]], "make_variableexpression() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.make_VariableExpression", false]], "make_variableexpression() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.make_VariableExpression", false]], "makeelement() (nltk.internals.elementwrapper method)": [[131, "nltk.internals.ElementWrapper.makeelement", false]], "malt_demo() (in module nltk.parse.dependencygraph)": [[164, "nltk.parse.dependencygraph.malt_demo", false]], "malt_regex_tagger() (in module nltk.parse.malt)": [[169, "nltk.parse.malt.malt_regex_tagger", false]], "maltparser (class in nltk.parse.malt)": [[169, "nltk.parse.malt.MaltParser", false]], "manage() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.manage", false]], "map (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.MAP", false]], "map_tag() (in module nltk.tag.mapping)": [[220, "nltk.tag.mapping.map_tag", false]], "map_to_many() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.map_to_many", false]], "map_to_many() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.map_to_many", false]], "map_to_one() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.map_to_one", false]], "map_to_one() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.map_to_one", false]], "map_wn() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.map_wn", false]], "map_wn() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.map_wn", false]], "mapping_msd_universal (nltk.corpus.reader.mte.mtetagconverter attribute)": [[79, "nltk.corpus.reader.mte.MTETagConverter.mapping_msd_universal", false]], "mark() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.mark", false]], "mark_alls_fresh() (nltk.inference.tableau.agenda method)": [[130, "nltk.inference.tableau.Agenda.mark_alls_fresh", false]], "mark_negation() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.mark_negation", false]], "mark_neqs_fresh() (nltk.inference.tableau.agenda method)": [[130, "nltk.inference.tableau.Agenda.mark_neqs_fresh", false]], "markdownblock (class in nltk.corpus.reader.markdown)": [[78, "nltk.corpus.reader.markdown.MarkdownBlock", false]], "markdowncorpusreader (class in nltk.corpus.reader.markdown)": [[78, "nltk.corpus.reader.markdown.MarkdownCorpusReader", false]], "markdownsection (class in nltk.corpus.reader.markdown)": [[78, "nltk.corpus.reader.markdown.MarkdownSection", false]], "markonly() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.markonly", false]], "martin_extensions (nltk.stem.porter.porterstemmer attribute)": [[206, "nltk.stem.porter.PorterStemmer.MARTIN_EXTENSIONS", false]], "masi_distance() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.masi_distance", false]], "match() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.match", false]], "matchbrackets() (in module nltk.ccg.lexicon)": [[16, "nltk.ccg.lexicon.matchBrackets", false]], "matches() (nltk.sem.logic.anytype method)": [[191, "nltk.sem.logic.AnyType.matches", false]], "matches() (nltk.sem.logic.basictype method)": [[191, "nltk.sem.logic.BasicType.matches", false]], "matches() (nltk.sem.logic.complextype method)": [[191, "nltk.sem.logic.ComplexType.matches", false]], "max() (nltk.probability.dictionaryprobdist method)": [[179, "nltk.probability.DictionaryProbDist.max", false]], "max() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.max", false]], "max() (nltk.probability.heldoutprobdist method)": [[179, "nltk.probability.HeldoutProbDist.max", false]], "max() (nltk.probability.kneserneyprobdist method)": [[179, "nltk.probability.KneserNeyProbDist.max", false]], "max() (nltk.probability.lidstoneprobdist method)": [[179, "nltk.probability.LidstoneProbDist.max", false]], "max() (nltk.probability.mleprobdist method)": [[179, "nltk.probability.MLEProbDist.max", false]], "max() (nltk.probability.mutableprobdist method)": [[179, "nltk.probability.MutableProbDist.max", false]], "max() (nltk.probability.probdisti method)": [[179, "nltk.probability.ProbDistI.max", false]], "max() (nltk.probability.simplegoodturingprobdist method)": [[179, "nltk.probability.SimpleGoodTuringProbDist.max", false]], "max() (nltk.probability.uniformprobdist method)": [[179, "nltk.probability.UniformProbDist.max", false]], "max() (nltk.probability.wittenbellprobdist method)": [[179, "nltk.probability.WittenBellProbDist.max", false]], "max_depth() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.max_depth", false]], "max_len() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.max_len", false]], "maxent_ne_chunker (class in nltk.chunk.named_entity)": [[27, "nltk.chunk.named_entity.Maxent_NE_Chunker", false]], "maxent_pos_tagger() (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.maxent_pos_tagger", false]], "maxentclassifier (class in nltk.classify.maxent)": [[33, "nltk.classify.maxent.MaxentClassifier", false]], "maxentdecoder (class in nltk.tabdata)": [[212, "nltk.tabdata.MaxentDecoder", false]], "maxentencoder (class in nltk.tabdata)": [[212, "nltk.tabdata.MaxentEncoder", false]], "maxentfeatureencodingi (class in nltk.classify.maxent)": [[33, "nltk.classify.maxent.MaxentFeatureEncodingI", false]], "maximize_alignment_probabilities() (nltk.translate.ibm2.ibmmodel2 method)": [[330, "nltk.translate.ibm2.IBMModel2.maximize_alignment_probabilities", false]], "maximize_distortion_probabilities() (nltk.translate.ibm3.ibmmodel3 method)": [[331, "nltk.translate.ibm3.IBMModel3.maximize_distortion_probabilities", false]], "maximize_distortion_probabilities() (nltk.translate.ibm4.ibmmodel4 method)": [[332, "nltk.translate.ibm4.IBMModel4.maximize_distortion_probabilities", false]], "maximize_fertility_probabilities() (nltk.translate.ibm_model.ibmmodel method)": [[334, "nltk.translate.ibm_model.IBMModel.maximize_fertility_probabilities", false]], "maximize_lexical_translation_probabilities() (nltk.translate.ibm_model.ibmmodel method)": [[334, "nltk.translate.ibm_model.IBMModel.maximize_lexical_translation_probabilities", false]], "maximize_null_generation_probabilities() (nltk.translate.ibm_model.ibmmodel method)": [[334, "nltk.translate.ibm_model.IBMModel.maximize_null_generation_probabilities", false]], "maximize_vacancy_probabilities() (nltk.translate.ibm5.ibmmodel5 method)": [[333, "nltk.translate.ibm5.IBMModel5.maximize_vacancy_probabilities", false]], "md5_hexdigest() (in module nltk.downloader)": [[113, "nltk.downloader.md5_hexdigest", false]], "meaning (class in nltk.corpus.reader.panlex_lite)": [[84, "nltk.corpus.reader.panlex_lite.Meaning", false]], "meaning_q (nltk.corpus.reader.panlex_lite.panlexlitecorpusreader attribute)": [[84, "nltk.corpus.reader.panlex_lite.PanLexLiteCorpusReader.MEANING_Q", false]], "meaning_q (nltk.corpus.reader.panlexlitecorpusreader attribute)": [[57, "nltk.corpus.reader.PanLexLiteCorpusReader.MEANING_Q", false]], "meanings() (nltk.corpus.reader.panlex_lite.panlexlitecorpusreader method)": [[84, "nltk.corpus.reader.panlex_lite.PanLexLiteCorpusReader.meanings", false]], "meanings() (nltk.corpus.reader.panlexlitecorpusreader method)": [[57, "nltk.corpus.reader.PanLexLiteCorpusReader.meanings", false]], "means() (nltk.cluster.kmeans.kmeansclusterer method)": [[50, "nltk.cluster.kmeans.KMeansClusterer.means", false]], "merge() (in module nltk.misc.sort)": [[157, "nltk.misc.sort.merge", false]], "merge() (nltk.cluster.util.dendrogram method)": [[51, "nltk.cluster.util.Dendrogram.merge", false]], "merged_synsets() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.merged_synsets", false]], "merged_synsets() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.merged_synsets", false]], "mergerule (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.MergeRule", false]], "metadata() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.metadata", false]], "metadata_reader() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.metadata_reader", false]], "meteor_score() (in module nltk.translate.meteor_score)": [[335, "nltk.translate.meteor_score.meteor_score", false]], "method0() (nltk.translate.bleu_score.smoothingfunction method)": [[324, "nltk.translate.bleu_score.SmoothingFunction.method0", false]], "method1() (nltk.translate.bleu_score.smoothingfunction method)": [[324, "nltk.translate.bleu_score.SmoothingFunction.method1", false]], "method2() (nltk.translate.bleu_score.smoothingfunction method)": [[324, "nltk.translate.bleu_score.SmoothingFunction.method2", false]], "method3() (nltk.translate.bleu_score.smoothingfunction method)": [[324, "nltk.translate.bleu_score.SmoothingFunction.method3", false]], "method4() (nltk.translate.bleu_score.smoothingfunction method)": [[324, "nltk.translate.bleu_score.SmoothingFunction.method4", false]], "method5() (nltk.translate.bleu_score.smoothingfunction method)": [[324, "nltk.translate.bleu_score.SmoothingFunction.method5", false]], "method6() (nltk.translate.bleu_score.smoothingfunction method)": [[324, "nltk.translate.bleu_score.SmoothingFunction.method6", false]], "method7() (nltk.translate.bleu_score.smoothingfunction method)": [[324, "nltk.translate.bleu_score.SmoothingFunction.method7", false]], "mi_like() (nltk.metrics.association.ngramassocmeasures static method)": [[146, "nltk.metrics.association.NgramAssocMeasures.mi_like", false]], "mimic_wrap() (in module nltk.corpus.reader.framenet)": [[72, "nltk.corpus.reader.framenet.mimic_wrap", false]], "min_colloc_freq (nltk.tokenize.punkt.punkttrainer attribute)": [[309, "nltk.tokenize.punkt.PunktTrainer.MIN_COLLOC_FREQ", false]], "min_depth() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.min_depth", false]], "min_len() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.min_len", false]], "min_prob (nltk.translate.ibm_model.ibmmodel attribute)": [[334, "nltk.translate.ibm_model.IBMModel.MIN_PROB", false]], "min_score_factor (nltk.translate.ibm5.ibmmodel5 attribute)": [[333, "nltk.translate.ibm5.IBMModel5.MIN_SCORE_FACTOR", false]], "min_size (nltk.collections.lazysubsequence attribute)": [[52, "nltk.collections.LazySubsequence.MIN_SIZE", false]], "minimalset (class in nltk.misc.minimalset)": [[156, "nltk.misc.minimalset.MinimalSet", false]], "missed() (nltk.chunk.util.chunkscore method)": [[29, "nltk.chunk.util.ChunkScore.missed", false]], "mle (class in nltk.lm)": [[135, "nltk.lm.MLE", false]], "mle (class in nltk.lm.models)": [[138, "nltk.lm.models.MLE", false]], "mle_bigram_model() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.mle_bigram_model", false]], "mle_trigram_model() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.mle_trigram_model", false]], "mleprobdist (class in nltk.probability)": [[179, "nltk.probability.MLEProbDist", false]], "mlu() (nltk.corpus.reader.childes.childescorpusreader method)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.MLU", false]], "mlu() (nltk.corpus.reader.childescorpusreader method)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.MLU", false]], "mock_plot() (in module nltk.test.conftest)": [[238, "nltk.test.conftest.mock_plot", false]], "mode (nltk.data.seekableunicodestreamreader property)": [[111, "nltk.data.SeekableUnicodeStreamReader.mode", false]], "model (class in nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.Model", false]], "model() (nltk.inference.api.basemodelbuildercommand method)": [[124, "nltk.inference.api.BaseModelBuilderCommand.model", false]], "model() (nltk.inference.api.modelbuildercommand method)": [[124, "nltk.inference.api.ModelBuilderCommand.model", false]], "model() (nltk.inference.api.modelbuildercommanddecorator method)": [[124, "nltk.inference.api.ModelBuilderCommandDecorator.model", false]], "model2counts (class in nltk.translate.ibm2)": [[330, "nltk.translate.ibm2.Model2Counts", false]], "model3counts (class in nltk.translate.ibm3)": [[331, "nltk.translate.ibm3.Model3Counts", false]], "model4_prob_t_a_given_s() (nltk.translate.ibm4.ibmmodel4 static method)": [[332, "nltk.translate.ibm4.IBMModel4.model4_prob_t_a_given_s", false]], "model4counts (class in nltk.translate.ibm4)": [[332, "nltk.translate.ibm4.Model4Counts", false]], "model5counts (class in nltk.translate.ibm5)": [[333, "nltk.translate.ibm5.Model5Counts", false]], "modelbuilder (class in nltk.inference.api)": [[124, "nltk.inference.api.ModelBuilder", false]], "modelbuildercommand (class in nltk.inference.api)": [[124, "nltk.inference.api.ModelBuilderCommand", false]], "modelbuildercommanddecorator (class in nltk.inference.api)": [[124, "nltk.inference.api.ModelBuilderCommandDecorator", false]], "models() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.models", false]], "models() (nltk.inference.discourse.discoursetester method)": [[125, "nltk.inference.discourse.DiscourseTester.models", false]], "modified_precision() (in module nltk.translate.bleu_score)": [[324, "nltk.translate.bleu_score.modified_precision", false]], "module": [[0, "module-nltk", false], [1, "module-nltk.app", false], [2, "module-nltk.app.chartparser_app", false], [3, "module-nltk.app.chunkparser_app", false], [4, "module-nltk.app.collocations_app", false], [5, "module-nltk.app.concordance_app", false], [6, "module-nltk.app.nemo_app", false], [7, "module-nltk.app.rdparser_app", false], [8, "module-nltk.app.srparser_app", false], [10, "module-nltk.app.wordnet_app", false], [11, "module-nltk.book", false], [12, "module-nltk.ccg", false], [13, "module-nltk.ccg.api", false], [14, "module-nltk.ccg.chart", false], [15, "module-nltk.ccg.combinator", false], [16, "module-nltk.ccg.lexicon", false], [17, "module-nltk.ccg.logic", false], [18, "module-nltk.chat", false], [19, "module-nltk.chat.eliza", false], [20, "module-nltk.chat.iesha", false], [21, "module-nltk.chat.rude", false], [22, "module-nltk.chat.suntsu", false], [23, "module-nltk.chat.util", false], [24, "module-nltk.chat.zen", false], [25, "module-nltk.chunk", false], [26, "module-nltk.chunk.api", false], [27, "module-nltk.chunk.named_entity", false], [28, "module-nltk.chunk.regexp", false], [29, "module-nltk.chunk.util", false], [30, "module-nltk.classify", false], [31, "module-nltk.classify.api", false], [32, "module-nltk.classify.decisiontree", false], [33, "module-nltk.classify.maxent", false], [34, "module-nltk.classify.megam", false], [35, "module-nltk.classify.naivebayes", false], [36, "module-nltk.classify.positivenaivebayes", false], [37, "module-nltk.classify.rte_classify", false], [38, "module-nltk.classify.scikitlearn", false], [39, "module-nltk.classify.senna", false], [40, "module-nltk.classify.svm", false], [41, "module-nltk.classify.tadm", false], [42, "module-nltk.classify.textcat", false], [43, "module-nltk.classify.util", false], [44, "module-nltk.classify.weka", false], [45, "module-nltk.cli", false], [46, "module-nltk.cluster", false], [47, "module-nltk.cluster.api", false], [48, "module-nltk.cluster.em", false], [49, "module-nltk.cluster.gaac", false], [50, "module-nltk.cluster.kmeans", false], [51, "module-nltk.cluster.util", false], [52, "module-nltk.collections", false], [53, "module-nltk.collocations", false], [54, "module-nltk.compat", false], [55, "module-nltk.corpus", false], [56, "module-nltk.corpus.europarl_raw", false], [57, "module-nltk.corpus.reader", false], [58, "module-nltk.corpus.reader.aligned", false], [59, "module-nltk.corpus.reader.api", false], [60, "module-nltk.corpus.reader.bcp47", false], [61, "module-nltk.corpus.reader.bnc", false], [62, "module-nltk.corpus.reader.bracket_parse", false], [63, "module-nltk.corpus.reader.categorized_sents", false], [64, "module-nltk.corpus.reader.chasen", false], [65, "module-nltk.corpus.reader.childes", false], [66, "module-nltk.corpus.reader.chunked", false], [67, "module-nltk.corpus.reader.cmudict", false], [68, "module-nltk.corpus.reader.comparative_sents", false], [69, "module-nltk.corpus.reader.conll", false], [70, "module-nltk.corpus.reader.crubadan", false], [71, "module-nltk.corpus.reader.dependency", false], [72, "module-nltk.corpus.reader.framenet", false], [73, "module-nltk.corpus.reader.ieer", false], [74, "module-nltk.corpus.reader.indian", false], [75, "module-nltk.corpus.reader.ipipan", false], [76, "module-nltk.corpus.reader.knbc", false], [77, "module-nltk.corpus.reader.lin", false], [78, "module-nltk.corpus.reader.markdown", false], [79, "module-nltk.corpus.reader.mte", false], [80, "module-nltk.corpus.reader.nkjp", false], [81, "module-nltk.corpus.reader.nombank", false], [82, "module-nltk.corpus.reader.nps_chat", false], [83, "module-nltk.corpus.reader.opinion_lexicon", false], [84, "module-nltk.corpus.reader.panlex_lite", false], [85, "module-nltk.corpus.reader.panlex_swadesh", false], [86, "module-nltk.corpus.reader.pl196x", false], [87, "module-nltk.corpus.reader.plaintext", false], [88, "module-nltk.corpus.reader.ppattach", false], [89, "module-nltk.corpus.reader.propbank", false], [90, "module-nltk.corpus.reader.pros_cons", false], [91, "module-nltk.corpus.reader.reviews", false], [92, "module-nltk.corpus.reader.rte", false], [93, "module-nltk.corpus.reader.semcor", false], [94, "module-nltk.corpus.reader.senseval", false], [95, "module-nltk.corpus.reader.sentiwordnet", false], [96, "module-nltk.corpus.reader.sinica_treebank", false], [97, "module-nltk.corpus.reader.string_category", false], [98, "module-nltk.corpus.reader.switchboard", false], [99, "module-nltk.corpus.reader.tagged", false], [100, "module-nltk.corpus.reader.timit", false], [101, "module-nltk.corpus.reader.toolbox", false], [102, "module-nltk.corpus.reader.twitter", false], [103, "module-nltk.corpus.reader.udhr", false], [104, "module-nltk.corpus.reader.util", false], [105, "module-nltk.corpus.reader.verbnet", false], [106, "module-nltk.corpus.reader.wordlist", false], [107, "module-nltk.corpus.reader.wordnet", false], [108, "module-nltk.corpus.reader.xmldocs", false], [109, "module-nltk.corpus.reader.ycoe", false], [110, "module-nltk.corpus.util", false], [111, "module-nltk.data", false], [112, "module-nltk.decorators", false], [113, "module-nltk.downloader", false], [114, "module-nltk.draw", false], [115, "module-nltk.draw.cfg", false], [116, "module-nltk.draw.dispersion", false], [117, "module-nltk.draw.table", false], [118, "module-nltk.draw.tree", false], [119, "module-nltk.draw.util", false], [120, "module-nltk.featstruct", false], [121, "module-nltk.grammar", false], [122, "module-nltk.help", false], [123, "module-nltk.inference", false], [124, "module-nltk.inference.api", false], [125, "module-nltk.inference.discourse", false], [126, "module-nltk.inference.mace", false], [127, "module-nltk.inference.nonmonotonic", false], [128, "module-nltk.inference.prover9", false], [129, "module-nltk.inference.resolution", false], [130, "module-nltk.inference.tableau", false], [131, "module-nltk.internals", false], [132, "module-nltk.jsontags", false], [133, "module-nltk.langnames", false], [134, "module-nltk.lazyimport", false], [135, "module-nltk.lm", false], [136, "module-nltk.lm.api", false], [137, "module-nltk.lm.counter", false], [138, "module-nltk.lm.models", false], [139, "module-nltk.lm.preprocessing", false], [140, "module-nltk.lm.smoothing", false], [141, "module-nltk.lm.util", false], [142, "module-nltk.lm.vocabulary", false], [143, "module-nltk.metrics", false], [144, "module-nltk.metrics.agreement", false], [145, "module-nltk.metrics.aline", false], [146, "module-nltk.metrics.association", false], [147, "module-nltk.metrics.confusionmatrix", false], [148, "module-nltk.metrics.distance", false], [149, "module-nltk.metrics.paice", false], [150, "module-nltk.metrics.scores", false], [151, "module-nltk.metrics.segmentation", false], [152, "module-nltk.metrics.spearman", false], [153, "module-nltk.misc", false], [154, "module-nltk.misc.babelfish", false], [155, "module-nltk.misc.chomsky", false], [156, "module-nltk.misc.minimalset", false], [157, "module-nltk.misc.sort", false], [158, "module-nltk.misc.wordfinder", false], [159, "module-nltk.parse", false], [160, "module-nltk.parse.api", false], [161, "module-nltk.parse.bllip", false], [162, "module-nltk.parse.chart", false], [163, "module-nltk.parse.corenlp", false], [164, "module-nltk.parse.dependencygraph", false], [165, "module-nltk.parse.earleychart", false], [166, "module-nltk.parse.evaluate", false], [167, "module-nltk.parse.featurechart", false], [168, "module-nltk.parse.generate", false], [169, "module-nltk.parse.malt", false], [170, "module-nltk.parse.nonprojectivedependencyparser", false], [171, "module-nltk.parse.pchart", false], [172, "module-nltk.parse.projectivedependencyparser", false], [173, "module-nltk.parse.recursivedescent", false], [174, "module-nltk.parse.shiftreduce", false], [175, "module-nltk.parse.stanford", false], [176, "module-nltk.parse.transitionparser", false], [177, "module-nltk.parse.util", false], [178, "module-nltk.parse.viterbi", false], [179, "module-nltk.probability", false], [180, "module-nltk.sem", false], [181, "module-nltk.sem.boxer", false], [182, "module-nltk.sem.chat80", false], [183, "module-nltk.sem.cooper_storage", false], [184, "module-nltk.sem.drt", false], [185, "module-nltk.sem.drt_glue_demo", false], [186, "module-nltk.sem.evaluate", false], [187, "module-nltk.sem.glue", false], [188, "module-nltk.sem.hole", false], [189, "module-nltk.sem.lfg", false], [190, "module-nltk.sem.linearlogic", false], [191, "module-nltk.sem.logic", false], [192, "module-nltk.sem.relextract", false], [193, "module-nltk.sem.skolemize", false], [194, "module-nltk.sem.util", false], [195, "module-nltk.sentiment", false], [196, "module-nltk.sentiment.sentiment_analyzer", false], [197, "module-nltk.sentiment.util", false], [198, "module-nltk.sentiment.vader", false], [199, "module-nltk.stem", false], [200, "module-nltk.stem.api", false], [201, "module-nltk.stem.arlstem", false], [202, "module-nltk.stem.arlstem2", false], [203, "module-nltk.stem.cistem", false], [204, "module-nltk.stem.isri", false], [205, "module-nltk.stem.lancaster", false], [206, "module-nltk.stem.porter", false], [207, "module-nltk.stem.regexp", false], [208, "module-nltk.stem.rslp", false], [209, "module-nltk.stem.snowball", false], [210, "module-nltk.stem.util", false], [211, "module-nltk.stem.wordnet", false], [212, "module-nltk.tabdata", false], [213, "module-nltk.tag", false], [214, "module-nltk.tag.api", false], [215, "module-nltk.tag.brill", false], [216, "module-nltk.tag.brill_trainer", false], [217, "module-nltk.tag.crf", false], [218, "module-nltk.tag.hmm", false], [219, "module-nltk.tag.hunpos", false], [220, "module-nltk.tag.mapping", false], [221, "module-nltk.tag.perceptron", false], [222, "module-nltk.tag.senna", false], [223, "module-nltk.tag.sequential", false], [224, "module-nltk.tag.stanford", false], [225, "module-nltk.tag.tnt", false], [226, "module-nltk.tag.util", false], [227, "module-nltk.tbl", false], [228, "module-nltk.tbl.api", false], [229, "module-nltk.tbl.demo", false], [230, "module-nltk.tbl.erroranalysis", false], [231, "module-nltk.tbl.feature", false], [232, "module-nltk.tbl.rule", false], [233, "module-nltk.tbl.template", false], [234, "module-nltk.test", false], [235, "module-nltk.test.all", false], [236, "module-nltk.test.childes_fixt", false], [237, "module-nltk.test.classify_fixt", false], [238, "module-nltk.test.conftest", false], [240, "module-nltk.test.gensim_fixt", false], [241, "module-nltk.test.gluesemantics_malt_fixt", false], [244, "module-nltk.test.portuguese_en_fixt", false], [245, "module-nltk.test.probability_fixt", false], [246, "module-nltk.test.unit", false], [247, "module-nltk.test.unit.lm", false], [248, "module-nltk.test.unit.lm.test_counter", false], [249, "module-nltk.test.unit.lm.test_models", false], [250, "module-nltk.test.unit.lm.test_preprocessing", false], [251, "module-nltk.test.unit.lm.test_vocabulary", false], [252, "module-nltk.test.unit.test_aline", false], [253, "module-nltk.test.unit.test_bllip", false], [254, "module-nltk.test.unit.test_brill", false], [255, "module-nltk.test.unit.test_cfd_mutation", false], [256, "module-nltk.test.unit.test_cfg2chomsky", false], [257, "module-nltk.test.unit.test_chunk", false], [258, "module-nltk.test.unit.test_classify", false], [259, "module-nltk.test.unit.test_collocations", false], [260, "module-nltk.test.unit.test_concordance", false], [261, "module-nltk.test.unit.test_corenlp", false], [262, "module-nltk.test.unit.test_corpora", false], [263, "module-nltk.test.unit.test_corpus_views", false], [264, "module-nltk.test.unit.test_data", false], [265, "module-nltk.test.unit.test_disagreement", false], [266, "module-nltk.test.unit.test_distance", false], [267, "module-nltk.test.unit.test_downloader", false], [268, "module-nltk.test.unit.test_freqdist", false], [269, "module-nltk.test.unit.test_hmm", false], [270, "module-nltk.test.unit.test_json2csv_corpus", false], [271, "module-nltk.test.unit.test_json_serialization", false], [272, "module-nltk.test.unit.test_metrics", false], [273, "module-nltk.test.unit.test_naivebayes", false], [274, "module-nltk.test.unit.test_nombank", false], [275, "module-nltk.test.unit.test_pl196x", false], [276, "module-nltk.test.unit.test_pos_tag", false], [277, "module-nltk.test.unit.test_ribes", false], [278, "module-nltk.test.unit.test_rte_classify", false], [279, "module-nltk.test.unit.test_seekable_unicode_stream_reader", false], [280, "module-nltk.test.unit.test_senna", false], [281, "module-nltk.test.unit.test_stem", false], [282, "module-nltk.test.unit.test_tag", false], [283, "module-nltk.test.unit.test_tgrep", false], [284, "module-nltk.test.unit.test_tokenize", false], [285, "module-nltk.test.unit.test_twitter_auth", false], [286, "module-nltk.test.unit.test_util", false], [287, "module-nltk.test.unit.test_wordnet", false], [288, "module-nltk.test.unit.translate", false], [289, "module-nltk.test.unit.translate.test_bleu", false], [290, "module-nltk.test.unit.translate.test_gdfa", false], [291, "module-nltk.test.unit.translate.test_ibm1", false], [292, "module-nltk.test.unit.translate.test_ibm2", false], [293, "module-nltk.test.unit.translate.test_ibm3", false], [294, "module-nltk.test.unit.translate.test_ibm4", false], [295, "module-nltk.test.unit.translate.test_ibm5", false], [296, "module-nltk.test.unit.translate.test_ibm_model", false], [297, "module-nltk.test.unit.translate.test_meteor", false], [298, "module-nltk.test.unit.translate.test_nist", false], [299, "module-nltk.test.unit.translate.test_stack_decoder", false], [300, "module-nltk.text", false], [301, "module-nltk.tgrep", false], [302, "module-nltk.tokenize", false], [303, "module-nltk.tokenize.api", false], [304, "module-nltk.tokenize.casual", false], [305, "module-nltk.tokenize.destructive", false], [306, "module-nltk.tokenize.legality_principle", false], [307, "module-nltk.tokenize.mwe", false], [308, "module-nltk.tokenize.nist", false], [309, "module-nltk.tokenize.punkt", false], [310, "module-nltk.tokenize.regexp", false], [311, "module-nltk.tokenize.repp", false], [312, "module-nltk.tokenize.sexpr", false], [313, "module-nltk.tokenize.simple", false], [314, "module-nltk.tokenize.sonority_sequencing", false], [315, "module-nltk.tokenize.stanford", false], [316, "module-nltk.tokenize.stanford_segmenter", false], [317, "module-nltk.tokenize.texttiling", false], [318, "module-nltk.tokenize.toktok", false], [319, "module-nltk.tokenize.treebank", false], [320, "module-nltk.tokenize.util", false], [321, "module-nltk.toolbox", false], [322, "module-nltk.translate", false], [323, "module-nltk.translate.api", false], [324, "module-nltk.translate.bleu_score", false], [325, "module-nltk.translate.chrf_score", false], [326, "module-nltk.translate.gale_church", false], [327, "module-nltk.translate.gdfa", false], [328, "module-nltk.translate.gleu_score", false], [329, "module-nltk.translate.ibm1", false], [330, "module-nltk.translate.ibm2", false], [331, "module-nltk.translate.ibm3", false], [332, "module-nltk.translate.ibm4", false], [333, "module-nltk.translate.ibm5", false], [334, "module-nltk.translate.ibm_model", false], [335, "module-nltk.translate.meteor_score", false], [336, "module-nltk.translate.metrics", false], [337, "module-nltk.translate.nist_score", false], [338, "module-nltk.translate.phrase_based", false], [339, "module-nltk.translate.ribes_score", false], [340, "module-nltk.translate.stack_decoder", false], [341, "module-nltk.tree", false], [342, "module-nltk.tree.immutable", false], [343, "module-nltk.tree.parented", false], [344, "module-nltk.tree.parsing", false], [345, "module-nltk.tree.prettyprinter", false], [346, "module-nltk.tree.probabilistic", false], [347, "module-nltk.tree.transforms", false], [348, "module-nltk.tree.tree", false], [349, "module-nltk.treeprettyprinter", false], [350, "module-nltk.treetransforms", false], [351, "module-nltk.twitter", false], [352, "module-nltk.twitter.api", false], [353, "module-nltk.twitter.common", false], [354, "module-nltk.twitter.twitter_demo", false], [355, "module-nltk.twitter.twitterclient", false], [356, "module-nltk.twitter.util", false], [357, "module-nltk.util", false], [358, "module-nltk.wsd", false]], "morphological_substitutions (nltk.corpus.reader.wordnet.wordnetcorpusreader attribute)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.MORPHOLOGICAL_SUBSTITUTIONS", false]], "morphological_substitutions (nltk.corpus.reader.wordnetcorpusreader attribute)": [[57, "nltk.corpus.reader.WordNetCorpusReader.MORPHOLOGICAL_SUBSTITUTIONS", false]], "morphology() (nltk.corpus.reader.bcp47.bcp47corpusreader method)": [[60, "nltk.corpus.reader.bcp47.BCP47CorpusReader.morphology", false]], "morphology() (nltk.corpus.reader.bcp47corpusreader method)": [[57, "nltk.corpus.reader.BCP47CorpusReader.morphology", false]], "morphy() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.morphy", false]], "morphy() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.morphy", false]], "morphy() (nltk.stem.wordnet.wordnetlemmatizer method)": [[211, "nltk.stem.wordnet.WordNetLemmatizer.morphy", false]], "most_general_unification() (in module nltk.inference.resolution)": [[129, "nltk.inference.resolution.most_general_unification", false]], "most_informative_features() (nltk.classify.maxent.maxentclassifier method)": [[33, "nltk.classify.maxent.MaxentClassifier.most_informative_features", false]], "most_informative_features() (nltk.classify.naivebayes.naivebayesclassifier method)": [[35, "nltk.classify.naivebayes.NaiveBayesClassifier.most_informative_features", false]], "mots (nltk.translate.api.alignedsent property)": [[323, "nltk.translate.api.AlignedSent.mots", false]], "move() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.move", false]], "move_dot_forward() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.move_dot_forward", false]], "move_dot_forward() (nltk.parse.featurechart.featuretreeedge method)": [[167, "nltk.parse.featurechart.FeatureTreeEdge.move_dot_forward", false]], "moveto() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.moveto", false]], "msd_to_universal() (nltk.corpus.reader.mte.mtetagconverter static method)": [[79, "nltk.corpus.reader.mte.MTETagConverter.msd_to_universal", false]], "mst() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.mst", false]], "mtecorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.MTECorpusReader", false]], "mtecorpusreader (class in nltk.corpus.reader.mte)": [[79, "nltk.corpus.reader.mte.MTECorpusReader", false]], "mtecorpusview (class in nltk.corpus.reader.mte)": [[79, "nltk.corpus.reader.mte.MTECorpusView", false]], "mtefilereader (class in nltk.corpus.reader.mte)": [[79, "nltk.corpus.reader.mte.MTEFileReader", false]], "mtetagconverter (class in nltk.corpus.reader.mte)": [[79, "nltk.corpus.reader.mte.MTETagConverter", false]], "multi_commas (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.MULTI_COMMAS", false]], "multi_dashes (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.MULTI_DASHES", false]], "multi_dots (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.MULTI_DOTS", false]], "multi_kappa() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.multi_kappa", false]], "multiclassifieri (class in nltk.classify.api)": [[31, "nltk.classify.api.MultiClassifierI", false]], "multilistbox (class in nltk.draw.table)": [[117, "nltk.draw.table.MultiListbox", false]], "multiparentedtree (class in nltk.tree)": [[341, "nltk.tree.MultiParentedTree", false]], "multiparentedtree (class in nltk.tree.parented)": [[343, "nltk.tree.parented.MultiParentedTree", false]], "multiply() (nltk.inference.discourse.discoursetester static method)": [[125, "nltk.inference.discourse.DiscourseTester.multiply", false]], "mutableoptionmenu (class in nltk.draw.util)": [[119, "nltk.draw.util.MutableOptionMenu", false]], "mutableprobdist (class in nltk.probability)": [[179, "nltk.probability.MutableProbDist", false]], "mwa_ppdb_xxxl_file (nltk.corpus.reader.mwappdbcorpusreader attribute)": [[57, "nltk.corpus.reader.MWAPPDBCorpusReader.mwa_ppdb_xxxl_file", false]], "mwa_ppdb_xxxl_file (nltk.corpus.reader.wordlist.mwappdbcorpusreader attribute)": [[106, "nltk.corpus.reader.wordlist.MWAPPDBCorpusReader.mwa_ppdb_xxxl_file", false]], "mwappdbcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.MWAPPDBCorpusReader", false]], "mwappdbcorpusreader (class in nltk.corpus.reader.wordlist)": [[106, "nltk.corpus.reader.wordlist.MWAPPDBCorpusReader", false]], "mwetokenizer (class in nltk.tokenize.mwe)": [[307, "nltk.tokenize.mwe.MWETokenizer", false]], "n() (nltk.lm.counter.ngramcounter method)": [[137, "nltk.lm.counter.NgramCounter.N", false]], "n() (nltk.lm.ngramcounter method)": [[135, "nltk.lm.NgramCounter.N", false]], "n() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.N", false]], "n() (nltk.probability.conditionalfreqdist method)": [[179, "nltk.probability.ConditionalFreqDist.N", false]], "n() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.N", false]], "n_all (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.N_ALL", false]], "n_and (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.N_AND", false]], "n_app (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.N_APP", false]], "n_atom (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.N_ATOM", false]], "n_eq (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.N_EQ", false]], "n_exists (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.N_EXISTS", false]], "n_iff (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.N_IFF", false]], "n_imp (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.N_IMP", false]], "n_or (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.N_OR", false]], "n_prop (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.N_PROP", false]], "n_scalar (nltk.sentiment.vader.vaderconstants attribute)": [[198, "nltk.sentiment.vader.VaderConstants.N_SCALAR", false]], "naivebayesclassifier (class in nltk.classify.naivebayes)": [[35, "nltk.classify.naivebayes.NaiveBayesClassifier", false]], "naivebayesclassifiertest (class in nltk.test.unit.test_naivebayes)": [[273, "nltk.test.unit.test_naivebayes.NaiveBayesClassifierTest", false]], "naivebayesdependencyscorer (class in nltk.parse.nonprojectivedependencyparser)": [[170, "nltk.parse.nonprojectivedependencyparser.NaiveBayesDependencyScorer", false]], "name (nltk.corpus.reader.panlex_swadesh.panlexlanguage attribute)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexLanguage.name", false]], "name (nltk.data.seekableunicodestreamreader property)": [[111, "nltk.data.SeekableUnicodeStreamReader.name", false]], "name (nltk.downloader.collection attribute)": [[113, "nltk.downloader.Collection.name", false]], "name (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.name", false]], "name (nltk.featstruct.feature property)": [[120, "nltk.featstruct.Feature.name", false]], "name() (nltk.corpus.reader.bcp47.bcp47corpusreader method)": [[60, "nltk.corpus.reader.bcp47.BCP47CorpusReader.name", false]], "name() (nltk.corpus.reader.bcp47corpusreader method)": [[57, "nltk.corpus.reader.BCP47CorpusReader.name", false]], "name() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.name", false]], "name() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.name", false]], "names (nltk.test.unit.test_corpus_views.testcorpusviews attribute)": [[263, "nltk.test.unit.test_corpus_views.TestCorpusViews.names", false]], "names_demo() (in module nltk.classify.tadm)": [[41, "nltk.classify.tadm.names_demo", false]], "names_demo() (in module nltk.classify.util)": [[43, "nltk.classify.util.names_demo", false]], "names_demo_features() (in module nltk.classify.util)": [[43, "nltk.classify.util.names_demo_features", false]], "nck() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.Nck", false]], "ne (nltk.corpus.reader.conll.conllcorpusreader attribute)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.NE", false]], "ne (nltk.corpus.reader.conllcorpusreader attribute)": [[57, "nltk.corpus.reader.ConllCorpusReader.NE", false]], "ne_chunk() (in module nltk.chunk)": [[25, "nltk.chunk.ne_chunk", false]], "ne_chunk_sents() (in module nltk.chunk)": [[25, "nltk.chunk.ne_chunk_sents", false]], "ne_chunked() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.ne_chunked", false]], "ne_chunker() (in module nltk.chunk)": [[25, "nltk.chunk.ne_chunker", false]], "nearest() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.nearest", false]], "nechunkparser (class in nltk.chunk.named_entity)": [[27, "nltk.chunk.named_entity.NEChunkParser", false]], "nechunkparsertagger (class in nltk.chunk.named_entity)": [[27, "nltk.chunk.named_entity.NEChunkParserTagger", false]], "neg_score() (nltk.corpus.reader.sentisynset method)": [[57, "nltk.corpus.reader.SentiSynset.neg_score", false]], "neg_score() (nltk.corpus.reader.sentiwordnet.sentisynset method)": [[95, "nltk.corpus.reader.sentiwordnet.SentiSynset.neg_score", false]], "negate (nltk.sentiment.vader.vaderconstants attribute)": [[198, "nltk.sentiment.vader.VaderConstants.NEGATE", false]], "negate() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.negate", false]], "negate() (nltk.sem.logic.negatedexpression method)": [[191, "nltk.sem.logic.NegatedExpression.negate", false]], "negated() (nltk.sentiment.vader.vaderconstants method)": [[198, "nltk.sentiment.vader.VaderConstants.negated", false]], "negatedexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.NegatedExpression", false]], "negative() (nltk.corpus.reader.opinion_lexicon.opinionlexiconcorpusreader method)": [[83, "nltk.corpus.reader.opinion_lexicon.OpinionLexiconCorpusReader.negative", false]], "negative() (nltk.corpus.reader.opinionlexiconcorpusreader method)": [[57, "nltk.corpus.reader.OpinionLexiconCorpusReader.negative", false]], "neighboring() (nltk.translate.ibm_model.ibmmodel method)": [[334, "nltk.translate.ibm_model.IBMModel.neighboring", false]], "neq (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.NEQ", false]], "neq_list (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.NEQ_LIST", false]], "new_id() (nltk.ccg.api.ccgvar class method)": [[13, "nltk.ccg.api.CCGVar.new_id", false]], "new_wrapper() (in module nltk.decorators)": [[112, "nltk.decorators.new_wrapper", false]], "next() (nltk.data.seekableunicodestreamreader method)": [[111, "nltk.data.SeekableUnicodeStreamReader.next", false]], "next() (nltk.sem.drt_glue_demo.drtgluedemo method)": [[185, "nltk.sem.drt_glue_demo.DrtGlueDemo.next", false]], "next_with_bindings() (nltk.parse.featurechart.featuretreeedge method)": [[167, "nltk.parse.featurechart.FeatureTreeEdge.next_with_bindings", false]], "nextcategory() (in module nltk.ccg.lexicon)": [[16, "nltk.ccg.lexicon.nextCategory", false]], "nextsym() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.nextsym", false]], "nextsym() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.nextsym", false]], "nextsym() (nltk.parse.chart.edgei method)": [[162, "nltk.parse.chart.EdgeI.nextsym", false]], "nextsym() (nltk.parse.chart.leafedge method)": [[162, "nltk.parse.chart.LeafEdge.nextsym", false]], "nextsym() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.nextsym", false]], "ngram (in module nltk.metrics.association)": [[146, "nltk.metrics.association.NGRAM", false]], "ngramassocmeasures (class in nltk.metrics.association)": [[146, "nltk.metrics.association.NgramAssocMeasures", false]], "ngramcounter (class in nltk.lm)": [[135, "nltk.lm.NgramCounter", false]], "ngramcounter (class in nltk.lm.counter)": [[137, "nltk.lm.counter.NgramCounter", false]], "ngrammodelvocabularytests (class in nltk.test.unit.lm.test_vocabulary)": [[251, "nltk.test.unit.lm.test_vocabulary.NgramModelVocabularyTests", false]], "ngrams() (in module nltk.util)": [[357, "nltk.util.ngrams", false]], "ngramtagger (class in nltk.tag.sequential)": [[223, "nltk.tag.sequential.NgramTagger", false]], "nik() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.Nik", false]], "nist_length_penalty() (in module nltk.translate.nist_score)": [[337, "nltk.translate.nist_score.nist_length_penalty", false]], "nisttokenizer (class in nltk.tokenize.nist)": [[308, "nltk.tokenize.nist.NISTTokenizer", false]], "nk() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.Nk", false]], "nkjpcorpus_header_view (class in nltk.corpus.reader.nkjp)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Header_View", false]], "nkjpcorpus_morph_view (class in nltk.corpus.reader.nkjp)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Morph_View", false]], "nkjpcorpus_segmentation_view (class in nltk.corpus.reader.nkjp)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Segmentation_View", false]], "nkjpcorpus_text_view (class in nltk.corpus.reader.nkjp)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Text_View", false]], "nkjpcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.NKJPCorpusReader", false]], "nkjpcorpusreader (class in nltk.corpus.reader.nkjp)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader", false]], "nltk": [[0, "module-nltk", false]], "nltk.app": [[1, "module-nltk.app", false]], "nltk.app.chartparser_app": [[2, "module-nltk.app.chartparser_app", false]], "nltk.app.chunkparser_app": [[3, "module-nltk.app.chunkparser_app", false]], "nltk.app.collocations_app": [[4, "module-nltk.app.collocations_app", false]], "nltk.app.concordance_app": [[5, "module-nltk.app.concordance_app", false]], "nltk.app.nemo_app": [[6, "module-nltk.app.nemo_app", false]], "nltk.app.rdparser_app": [[7, "module-nltk.app.rdparser_app", false]], "nltk.app.srparser_app": [[8, "module-nltk.app.srparser_app", false]], "nltk.app.wordnet_app": [[10, "module-nltk.app.wordnet_app", false]], "nltk.book": [[11, "module-nltk.book", false]], "nltk.ccg": [[12, "module-nltk.ccg", false]], "nltk.ccg.api": [[13, "module-nltk.ccg.api", false]], "nltk.ccg.chart": [[14, "module-nltk.ccg.chart", false]], "nltk.ccg.combinator": [[15, "module-nltk.ccg.combinator", false]], "nltk.ccg.lexicon": [[16, "module-nltk.ccg.lexicon", false]], "nltk.ccg.logic": [[17, "module-nltk.ccg.logic", false]], "nltk.chat": [[18, "module-nltk.chat", false]], "nltk.chat.eliza": [[19, "module-nltk.chat.eliza", false]], "nltk.chat.iesha": [[20, "module-nltk.chat.iesha", false]], "nltk.chat.rude": [[21, "module-nltk.chat.rude", false]], "nltk.chat.suntsu": [[22, "module-nltk.chat.suntsu", false]], "nltk.chat.util": [[23, "module-nltk.chat.util", false]], "nltk.chat.zen": [[24, "module-nltk.chat.zen", false]], "nltk.chunk": [[25, "module-nltk.chunk", false]], "nltk.chunk.api": [[26, "module-nltk.chunk.api", false]], "nltk.chunk.named_entity": [[27, "module-nltk.chunk.named_entity", false]], "nltk.chunk.regexp": [[28, "module-nltk.chunk.regexp", false]], "nltk.chunk.util": [[29, "module-nltk.chunk.util", false]], "nltk.classify": [[30, "module-nltk.classify", false]], "nltk.classify.api": [[31, "module-nltk.classify.api", false]], "nltk.classify.decisiontree": [[32, "module-nltk.classify.decisiontree", false]], "nltk.classify.maxent": [[33, "module-nltk.classify.maxent", false]], "nltk.classify.megam": [[34, "module-nltk.classify.megam", false]], "nltk.classify.naivebayes": [[35, "module-nltk.classify.naivebayes", false]], "nltk.classify.positivenaivebayes": [[36, "module-nltk.classify.positivenaivebayes", false]], "nltk.classify.rte_classify": [[37, "module-nltk.classify.rte_classify", false]], "nltk.classify.scikitlearn": [[38, "module-nltk.classify.scikitlearn", false]], "nltk.classify.senna": [[39, "module-nltk.classify.senna", false]], "nltk.classify.svm": [[40, "module-nltk.classify.svm", false]], "nltk.classify.tadm": [[41, "module-nltk.classify.tadm", false]], "nltk.classify.textcat": [[42, "module-nltk.classify.textcat", false]], "nltk.classify.util": [[43, "module-nltk.classify.util", false]], "nltk.classify.weka": [[44, "module-nltk.classify.weka", false]], "nltk.cli": [[45, "module-nltk.cli", false]], "nltk.cluster": [[46, "module-nltk.cluster", false]], "nltk.cluster.api": [[47, "module-nltk.cluster.api", false]], "nltk.cluster.em": [[48, "module-nltk.cluster.em", false]], "nltk.cluster.gaac": [[49, "module-nltk.cluster.gaac", false]], "nltk.cluster.kmeans": [[50, "module-nltk.cluster.kmeans", false]], "nltk.cluster.util": [[51, "module-nltk.cluster.util", false]], "nltk.collections": [[52, "module-nltk.collections", false]], "nltk.collocations": [[53, "module-nltk.collocations", false]], "nltk.compat": [[54, "module-nltk.compat", false]], "nltk.corpus": [[55, "module-nltk.corpus", false]], "nltk.corpus.europarl_raw": [[56, "module-nltk.corpus.europarl_raw", false]], "nltk.corpus.reader": [[57, "module-nltk.corpus.reader", false]], "nltk.corpus.reader.aligned": [[58, "module-nltk.corpus.reader.aligned", false]], "nltk.corpus.reader.api": [[59, "module-nltk.corpus.reader.api", false]], "nltk.corpus.reader.bcp47": [[60, "module-nltk.corpus.reader.bcp47", false]], "nltk.corpus.reader.bnc": [[61, "module-nltk.corpus.reader.bnc", false]], "nltk.corpus.reader.bracket_parse": [[62, "module-nltk.corpus.reader.bracket_parse", false]], "nltk.corpus.reader.categorized_sents": [[63, "module-nltk.corpus.reader.categorized_sents", false]], "nltk.corpus.reader.chasen": [[64, "module-nltk.corpus.reader.chasen", false]], "nltk.corpus.reader.childes": [[65, "module-nltk.corpus.reader.childes", false]], "nltk.corpus.reader.chunked": [[66, "module-nltk.corpus.reader.chunked", false]], "nltk.corpus.reader.cmudict": [[67, "module-nltk.corpus.reader.cmudict", false]], "nltk.corpus.reader.comparative_sents": [[68, "module-nltk.corpus.reader.comparative_sents", false]], "nltk.corpus.reader.conll": [[69, "module-nltk.corpus.reader.conll", false]], "nltk.corpus.reader.crubadan": [[70, "module-nltk.corpus.reader.crubadan", false]], "nltk.corpus.reader.dependency": [[71, "module-nltk.corpus.reader.dependency", false]], "nltk.corpus.reader.framenet": [[72, "module-nltk.corpus.reader.framenet", false]], "nltk.corpus.reader.ieer": [[73, "module-nltk.corpus.reader.ieer", false]], "nltk.corpus.reader.indian": [[74, "module-nltk.corpus.reader.indian", false]], "nltk.corpus.reader.ipipan": [[75, "module-nltk.corpus.reader.ipipan", false]], "nltk.corpus.reader.knbc": [[76, "module-nltk.corpus.reader.knbc", false]], "nltk.corpus.reader.lin": [[77, "module-nltk.corpus.reader.lin", false]], "nltk.corpus.reader.markdown": [[78, "module-nltk.corpus.reader.markdown", false]], "nltk.corpus.reader.mte": [[79, "module-nltk.corpus.reader.mte", false]], "nltk.corpus.reader.nkjp": [[80, "module-nltk.corpus.reader.nkjp", false]], "nltk.corpus.reader.nombank": [[81, "module-nltk.corpus.reader.nombank", false]], "nltk.corpus.reader.nps_chat": [[82, "module-nltk.corpus.reader.nps_chat", false]], "nltk.corpus.reader.opinion_lexicon": [[83, "module-nltk.corpus.reader.opinion_lexicon", false]], "nltk.corpus.reader.panlex_lite": [[84, "module-nltk.corpus.reader.panlex_lite", false]], "nltk.corpus.reader.panlex_swadesh": [[85, "module-nltk.corpus.reader.panlex_swadesh", false]], "nltk.corpus.reader.pl196x": [[86, "module-nltk.corpus.reader.pl196x", false]], "nltk.corpus.reader.plaintext": [[87, "module-nltk.corpus.reader.plaintext", false]], "nltk.corpus.reader.ppattach": [[88, "module-nltk.corpus.reader.ppattach", false]], "nltk.corpus.reader.propbank": [[89, "module-nltk.corpus.reader.propbank", false]], "nltk.corpus.reader.pros_cons": [[90, "module-nltk.corpus.reader.pros_cons", false]], "nltk.corpus.reader.reviews": [[91, "module-nltk.corpus.reader.reviews", false]], "nltk.corpus.reader.rte": [[92, "module-nltk.corpus.reader.rte", false]], "nltk.corpus.reader.semcor": [[93, "module-nltk.corpus.reader.semcor", false]], "nltk.corpus.reader.senseval": [[94, "module-nltk.corpus.reader.senseval", false]], "nltk.corpus.reader.sentiwordnet": [[95, "module-nltk.corpus.reader.sentiwordnet", false]], "nltk.corpus.reader.sinica_treebank": [[96, "module-nltk.corpus.reader.sinica_treebank", false]], "nltk.corpus.reader.string_category": [[97, "module-nltk.corpus.reader.string_category", false]], "nltk.corpus.reader.switchboard": [[98, "module-nltk.corpus.reader.switchboard", false]], "nltk.corpus.reader.tagged": [[99, "module-nltk.corpus.reader.tagged", false]], "nltk.corpus.reader.timit": [[100, "module-nltk.corpus.reader.timit", false]], "nltk.corpus.reader.toolbox": [[101, "module-nltk.corpus.reader.toolbox", false]], "nltk.corpus.reader.twitter": [[102, "module-nltk.corpus.reader.twitter", false]], "nltk.corpus.reader.udhr": [[103, "module-nltk.corpus.reader.udhr", false]], "nltk.corpus.reader.util": [[104, "module-nltk.corpus.reader.util", false]], "nltk.corpus.reader.verbnet": [[105, "module-nltk.corpus.reader.verbnet", false]], "nltk.corpus.reader.wordlist": [[106, "module-nltk.corpus.reader.wordlist", false]], "nltk.corpus.reader.wordnet": [[107, "module-nltk.corpus.reader.wordnet", false]], "nltk.corpus.reader.xmldocs": [[108, "module-nltk.corpus.reader.xmldocs", false]], "nltk.corpus.reader.ycoe": [[109, "module-nltk.corpus.reader.ycoe", false]], "nltk.corpus.util": [[110, "module-nltk.corpus.util", false]], "nltk.data": [[111, "module-nltk.data", false]], "nltk.decorators": [[112, "module-nltk.decorators", false]], "nltk.downloader": [[113, "module-nltk.downloader", false]], "nltk.draw": [[114, "module-nltk.draw", false]], "nltk.draw.cfg": [[115, "module-nltk.draw.cfg", false]], "nltk.draw.dispersion": [[116, "module-nltk.draw.dispersion", false]], "nltk.draw.table": [[117, "module-nltk.draw.table", false]], "nltk.draw.tree": [[118, "module-nltk.draw.tree", false]], "nltk.draw.util": [[119, "module-nltk.draw.util", false]], "nltk.featstruct": [[120, "module-nltk.featstruct", false]], "nltk.grammar": [[121, "module-nltk.grammar", false]], "nltk.help": [[122, "module-nltk.help", false]], "nltk.inference": [[123, "module-nltk.inference", false]], "nltk.inference.api": [[124, "module-nltk.inference.api", false]], "nltk.inference.discourse": [[125, "module-nltk.inference.discourse", false]], "nltk.inference.mace": [[126, "module-nltk.inference.mace", false]], "nltk.inference.nonmonotonic": [[127, "module-nltk.inference.nonmonotonic", false]], "nltk.inference.prover9": [[128, "module-nltk.inference.prover9", false]], "nltk.inference.resolution": [[129, "module-nltk.inference.resolution", false]], "nltk.inference.tableau": [[130, "module-nltk.inference.tableau", false]], "nltk.internals": [[131, "module-nltk.internals", false]], "nltk.jsontags": [[132, "module-nltk.jsontags", false]], "nltk.langnames": [[133, "module-nltk.langnames", false]], "nltk.lazyimport": [[134, "module-nltk.lazyimport", false]], "nltk.lm": [[135, "module-nltk.lm", false]], "nltk.lm.api": [[136, "module-nltk.lm.api", false]], "nltk.lm.counter": [[137, "module-nltk.lm.counter", false]], "nltk.lm.models": [[138, "module-nltk.lm.models", false]], "nltk.lm.preprocessing": [[139, "module-nltk.lm.preprocessing", false]], "nltk.lm.smoothing": [[140, "module-nltk.lm.smoothing", false]], "nltk.lm.util": [[141, "module-nltk.lm.util", false]], "nltk.lm.vocabulary": [[142, "module-nltk.lm.vocabulary", false]], "nltk.metrics": [[143, "module-nltk.metrics", false]], "nltk.metrics.agreement": [[144, "module-nltk.metrics.agreement", false]], "nltk.metrics.aline": [[145, "module-nltk.metrics.aline", false]], "nltk.metrics.association": [[146, "module-nltk.metrics.association", false]], "nltk.metrics.confusionmatrix": [[147, "module-nltk.metrics.confusionmatrix", false]], "nltk.metrics.distance": [[148, "module-nltk.metrics.distance", false]], "nltk.metrics.paice": [[149, "module-nltk.metrics.paice", false]], "nltk.metrics.scores": [[150, "module-nltk.metrics.scores", false]], "nltk.metrics.segmentation": [[151, "module-nltk.metrics.segmentation", false]], "nltk.metrics.spearman": [[152, "module-nltk.metrics.spearman", false]], "nltk.misc": [[153, "module-nltk.misc", false]], "nltk.misc.babelfish": [[154, "module-nltk.misc.babelfish", false]], "nltk.misc.chomsky": [[155, "module-nltk.misc.chomsky", false]], "nltk.misc.minimalset": [[156, "module-nltk.misc.minimalset", false]], "nltk.misc.sort": [[157, "module-nltk.misc.sort", false]], "nltk.misc.wordfinder": [[158, "module-nltk.misc.wordfinder", false]], "nltk.parse": [[159, "module-nltk.parse", false]], "nltk.parse.api": [[160, "module-nltk.parse.api", false]], "nltk.parse.bllip": [[161, "module-nltk.parse.bllip", false]], "nltk.parse.chart": [[162, "module-nltk.parse.chart", false]], "nltk.parse.corenlp": [[163, "module-nltk.parse.corenlp", false]], "nltk.parse.dependencygraph": [[164, "module-nltk.parse.dependencygraph", false]], "nltk.parse.earleychart": [[165, "module-nltk.parse.earleychart", false]], "nltk.parse.evaluate": [[166, "module-nltk.parse.evaluate", false]], "nltk.parse.featurechart": [[167, "module-nltk.parse.featurechart", false]], "nltk.parse.generate": [[168, "module-nltk.parse.generate", false]], "nltk.parse.malt": [[169, "module-nltk.parse.malt", false]], "nltk.parse.nonprojectivedependencyparser": [[170, "module-nltk.parse.nonprojectivedependencyparser", false]], "nltk.parse.pchart": [[171, "module-nltk.parse.pchart", false]], "nltk.parse.projectivedependencyparser": [[172, "module-nltk.parse.projectivedependencyparser", false]], "nltk.parse.recursivedescent": [[173, "module-nltk.parse.recursivedescent", false]], "nltk.parse.shiftreduce": [[174, "module-nltk.parse.shiftreduce", false]], "nltk.parse.stanford": [[175, "module-nltk.parse.stanford", false]], "nltk.parse.transitionparser": [[176, "module-nltk.parse.transitionparser", false]], "nltk.parse.util": [[177, "module-nltk.parse.util", false]], "nltk.parse.viterbi": [[178, "module-nltk.parse.viterbi", false]], "nltk.probability": [[179, "module-nltk.probability", false]], "nltk.sem": [[180, "module-nltk.sem", false]], "nltk.sem.boxer": [[181, "module-nltk.sem.boxer", false]], "nltk.sem.chat80": [[182, "module-nltk.sem.chat80", false]], "nltk.sem.cooper_storage": [[183, "module-nltk.sem.cooper_storage", false]], "nltk.sem.drt": [[184, "module-nltk.sem.drt", false]], "nltk.sem.drt_glue_demo": [[185, "module-nltk.sem.drt_glue_demo", false]], "nltk.sem.evaluate": [[186, "module-nltk.sem.evaluate", false]], "nltk.sem.glue": [[187, "module-nltk.sem.glue", false]], "nltk.sem.hole": [[188, "module-nltk.sem.hole", false]], "nltk.sem.lfg": [[189, "module-nltk.sem.lfg", false]], "nltk.sem.linearlogic": [[190, "module-nltk.sem.linearlogic", false]], "nltk.sem.logic": [[191, "module-nltk.sem.logic", false]], "nltk.sem.relextract": [[192, "module-nltk.sem.relextract", false]], "nltk.sem.skolemize": [[193, "module-nltk.sem.skolemize", false]], "nltk.sem.util": [[194, "module-nltk.sem.util", false]], "nltk.sentiment": [[195, "module-nltk.sentiment", false]], "nltk.sentiment.sentiment_analyzer": [[196, "module-nltk.sentiment.sentiment_analyzer", false]], "nltk.sentiment.util": [[197, "module-nltk.sentiment.util", false]], "nltk.sentiment.vader": [[198, "module-nltk.sentiment.vader", false]], "nltk.stem": [[199, "module-nltk.stem", false]], "nltk.stem.api": [[200, "module-nltk.stem.api", false]], "nltk.stem.arlstem": [[201, "module-nltk.stem.arlstem", false]], "nltk.stem.arlstem2": [[202, "module-nltk.stem.arlstem2", false]], "nltk.stem.cistem": [[203, "module-nltk.stem.cistem", false]], "nltk.stem.isri": [[204, "module-nltk.stem.isri", false]], "nltk.stem.lancaster": [[205, "module-nltk.stem.lancaster", false]], "nltk.stem.porter": [[206, "module-nltk.stem.porter", false]], "nltk.stem.regexp": [[207, "module-nltk.stem.regexp", false]], "nltk.stem.rslp": [[208, "module-nltk.stem.rslp", false]], "nltk.stem.snowball": [[209, "module-nltk.stem.snowball", false]], "nltk.stem.util": [[210, "module-nltk.stem.util", false]], "nltk.stem.wordnet": [[211, "module-nltk.stem.wordnet", false]], "nltk.tabdata": [[212, "module-nltk.tabdata", false]], "nltk.tag": [[213, "module-nltk.tag", false]], "nltk.tag.api": [[214, "module-nltk.tag.api", false]], "nltk.tag.brill": [[215, "module-nltk.tag.brill", false]], "nltk.tag.brill_trainer": [[216, "module-nltk.tag.brill_trainer", false]], "nltk.tag.crf": [[217, "module-nltk.tag.crf", false]], "nltk.tag.hmm": [[218, "module-nltk.tag.hmm", false]], "nltk.tag.hunpos": [[219, "module-nltk.tag.hunpos", false]], "nltk.tag.mapping": [[220, "module-nltk.tag.mapping", false]], "nltk.tag.perceptron": [[221, "module-nltk.tag.perceptron", false]], "nltk.tag.senna": [[222, "module-nltk.tag.senna", false]], "nltk.tag.sequential": [[223, "module-nltk.tag.sequential", false]], "nltk.tag.stanford": [[224, "module-nltk.tag.stanford", false]], "nltk.tag.tnt": [[225, "module-nltk.tag.tnt", false]], "nltk.tag.util": [[226, "module-nltk.tag.util", false]], "nltk.tbl": [[227, "module-nltk.tbl", false]], "nltk.tbl.api": [[228, "module-nltk.tbl.api", false]], "nltk.tbl.demo": [[229, "module-nltk.tbl.demo", false]], "nltk.tbl.erroranalysis": [[230, "module-nltk.tbl.erroranalysis", false]], "nltk.tbl.feature": [[231, "module-nltk.tbl.feature", false]], "nltk.tbl.rule": [[232, "module-nltk.tbl.rule", false]], "nltk.tbl.template": [[233, "module-nltk.tbl.template", false]], "nltk.test": [[234, "module-nltk.test", false]], "nltk.test.all": [[235, "module-nltk.test.all", false]], "nltk.test.childes_fixt": [[236, "module-nltk.test.childes_fixt", false]], "nltk.test.classify_fixt": [[237, "module-nltk.test.classify_fixt", false]], "nltk.test.conftest": [[238, "module-nltk.test.conftest", false]], "nltk.test.gensim_fixt": [[240, "module-nltk.test.gensim_fixt", false]], "nltk.test.gluesemantics_malt_fixt": [[241, "module-nltk.test.gluesemantics_malt_fixt", false]], "nltk.test.portuguese_en_fixt": [[244, "module-nltk.test.portuguese_en_fixt", false]], "nltk.test.probability_fixt": [[245, "module-nltk.test.probability_fixt", false]], "nltk.test.unit": [[246, "module-nltk.test.unit", false]], "nltk.test.unit.lm": [[247, "module-nltk.test.unit.lm", false]], "nltk.test.unit.lm.test_counter": [[248, "module-nltk.test.unit.lm.test_counter", false]], "nltk.test.unit.lm.test_models": [[249, "module-nltk.test.unit.lm.test_models", false]], "nltk.test.unit.lm.test_preprocessing": [[250, "module-nltk.test.unit.lm.test_preprocessing", false]], "nltk.test.unit.lm.test_vocabulary": [[251, "module-nltk.test.unit.lm.test_vocabulary", false]], "nltk.test.unit.test_aline": [[252, "module-nltk.test.unit.test_aline", false]], "nltk.test.unit.test_bllip": [[253, "module-nltk.test.unit.test_bllip", false]], "nltk.test.unit.test_brill": [[254, "module-nltk.test.unit.test_brill", false]], "nltk.test.unit.test_cfd_mutation": [[255, "module-nltk.test.unit.test_cfd_mutation", false]], "nltk.test.unit.test_cfg2chomsky": [[256, "module-nltk.test.unit.test_cfg2chomsky", false]], "nltk.test.unit.test_chunk": [[257, "module-nltk.test.unit.test_chunk", false]], "nltk.test.unit.test_classify": [[258, "module-nltk.test.unit.test_classify", false]], "nltk.test.unit.test_collocations": [[259, "module-nltk.test.unit.test_collocations", false]], "nltk.test.unit.test_concordance": [[260, "module-nltk.test.unit.test_concordance", false]], "nltk.test.unit.test_corenlp": [[261, "module-nltk.test.unit.test_corenlp", false]], "nltk.test.unit.test_corpora": [[262, "module-nltk.test.unit.test_corpora", false]], "nltk.test.unit.test_corpus_views": [[263, "module-nltk.test.unit.test_corpus_views", false]], "nltk.test.unit.test_data": [[264, "module-nltk.test.unit.test_data", false]], "nltk.test.unit.test_disagreement": [[265, "module-nltk.test.unit.test_disagreement", false]], "nltk.test.unit.test_distance": [[266, "module-nltk.test.unit.test_distance", false]], "nltk.test.unit.test_downloader": [[267, "module-nltk.test.unit.test_downloader", false]], "nltk.test.unit.test_freqdist": [[268, "module-nltk.test.unit.test_freqdist", false]], "nltk.test.unit.test_hmm": [[269, "module-nltk.test.unit.test_hmm", false]], "nltk.test.unit.test_json2csv_corpus": [[270, "module-nltk.test.unit.test_json2csv_corpus", false]], "nltk.test.unit.test_json_serialization": [[271, "module-nltk.test.unit.test_json_serialization", false]], "nltk.test.unit.test_metrics": [[272, "module-nltk.test.unit.test_metrics", false]], "nltk.test.unit.test_naivebayes": [[273, "module-nltk.test.unit.test_naivebayes", false]], "nltk.test.unit.test_nombank": [[274, "module-nltk.test.unit.test_nombank", false]], "nltk.test.unit.test_pl196x": [[275, "module-nltk.test.unit.test_pl196x", false]], "nltk.test.unit.test_pos_tag": [[276, "module-nltk.test.unit.test_pos_tag", false]], "nltk.test.unit.test_ribes": [[277, "module-nltk.test.unit.test_ribes", false]], "nltk.test.unit.test_rte_classify": [[278, "module-nltk.test.unit.test_rte_classify", false]], "nltk.test.unit.test_seekable_unicode_stream_reader": [[279, "module-nltk.test.unit.test_seekable_unicode_stream_reader", false]], "nltk.test.unit.test_senna": [[280, "module-nltk.test.unit.test_senna", false]], "nltk.test.unit.test_stem": [[281, "module-nltk.test.unit.test_stem", false]], "nltk.test.unit.test_tag": [[282, "module-nltk.test.unit.test_tag", false]], "nltk.test.unit.test_tgrep": [[283, "module-nltk.test.unit.test_tgrep", false]], "nltk.test.unit.test_tokenize": [[284, "module-nltk.test.unit.test_tokenize", false]], "nltk.test.unit.test_twitter_auth": [[285, "module-nltk.test.unit.test_twitter_auth", false]], "nltk.test.unit.test_util": [[286, "module-nltk.test.unit.test_util", false]], "nltk.test.unit.test_wordnet": [[287, "module-nltk.test.unit.test_wordnet", false]], "nltk.test.unit.translate": [[288, "module-nltk.test.unit.translate", false]], "nltk.test.unit.translate.test_bleu": [[289, "module-nltk.test.unit.translate.test_bleu", false]], "nltk.test.unit.translate.test_gdfa": [[290, "module-nltk.test.unit.translate.test_gdfa", false]], "nltk.test.unit.translate.test_ibm1": [[291, "module-nltk.test.unit.translate.test_ibm1", false]], "nltk.test.unit.translate.test_ibm2": [[292, "module-nltk.test.unit.translate.test_ibm2", false]], "nltk.test.unit.translate.test_ibm3": [[293, "module-nltk.test.unit.translate.test_ibm3", false]], "nltk.test.unit.translate.test_ibm4": [[294, "module-nltk.test.unit.translate.test_ibm4", false]], "nltk.test.unit.translate.test_ibm5": [[295, "module-nltk.test.unit.translate.test_ibm5", false]], "nltk.test.unit.translate.test_ibm_model": [[296, "module-nltk.test.unit.translate.test_ibm_model", false]], "nltk.test.unit.translate.test_meteor": [[297, "module-nltk.test.unit.translate.test_meteor", false]], "nltk.test.unit.translate.test_nist": [[298, "module-nltk.test.unit.translate.test_nist", false]], "nltk.test.unit.translate.test_stack_decoder": [[299, "module-nltk.test.unit.translate.test_stack_decoder", false]], "nltk.text": [[300, "module-nltk.text", false]], "nltk.tgrep": [[301, "module-nltk.tgrep", false]], "nltk.tokenize": [[302, "module-nltk.tokenize", false]], "nltk.tokenize.api": [[303, "module-nltk.tokenize.api", false]], "nltk.tokenize.casual": [[304, "module-nltk.tokenize.casual", false]], "nltk.tokenize.destructive": [[305, "module-nltk.tokenize.destructive", false]], "nltk.tokenize.legality_principle": [[306, "module-nltk.tokenize.legality_principle", false]], "nltk.tokenize.mwe": [[307, "module-nltk.tokenize.mwe", false]], "nltk.tokenize.nist": [[308, "module-nltk.tokenize.nist", false]], "nltk.tokenize.punkt": [[309, "module-nltk.tokenize.punkt", false]], "nltk.tokenize.regexp": [[310, "module-nltk.tokenize.regexp", false]], "nltk.tokenize.repp": [[311, "module-nltk.tokenize.repp", false]], "nltk.tokenize.sexpr": [[312, "module-nltk.tokenize.sexpr", false]], "nltk.tokenize.simple": [[313, "module-nltk.tokenize.simple", false]], "nltk.tokenize.sonority_sequencing": [[314, "module-nltk.tokenize.sonority_sequencing", false]], "nltk.tokenize.stanford": [[315, "module-nltk.tokenize.stanford", false]], "nltk.tokenize.stanford_segmenter": [[316, "module-nltk.tokenize.stanford_segmenter", false]], "nltk.tokenize.texttiling": [[317, "module-nltk.tokenize.texttiling", false]], "nltk.tokenize.toktok": [[318, "module-nltk.tokenize.toktok", false]], "nltk.tokenize.treebank": [[319, "module-nltk.tokenize.treebank", false]], "nltk.tokenize.util": [[320, "module-nltk.tokenize.util", false]], "nltk.toolbox": [[321, "module-nltk.toolbox", false]], "nltk.translate": [[322, "module-nltk.translate", false]], "nltk.translate.api": [[323, "module-nltk.translate.api", false]], "nltk.translate.bleu_score": [[324, "module-nltk.translate.bleu_score", false]], "nltk.translate.chrf_score": [[325, "module-nltk.translate.chrf_score", false]], "nltk.translate.gale_church": [[326, "module-nltk.translate.gale_church", false]], "nltk.translate.gdfa": [[327, "module-nltk.translate.gdfa", false]], "nltk.translate.gleu_score": [[328, "module-nltk.translate.gleu_score", false]], "nltk.translate.ibm1": [[329, "module-nltk.translate.ibm1", false]], "nltk.translate.ibm2": [[330, "module-nltk.translate.ibm2", false]], "nltk.translate.ibm3": [[331, "module-nltk.translate.ibm3", false]], "nltk.translate.ibm4": [[332, "module-nltk.translate.ibm4", false]], "nltk.translate.ibm5": [[333, "module-nltk.translate.ibm5", false]], "nltk.translate.ibm_model": [[334, "module-nltk.translate.ibm_model", false]], "nltk.translate.meteor_score": [[335, "module-nltk.translate.meteor_score", false]], "nltk.translate.metrics": [[336, "module-nltk.translate.metrics", false]], "nltk.translate.nist_score": [[337, "module-nltk.translate.nist_score", false]], "nltk.translate.phrase_based": [[338, "module-nltk.translate.phrase_based", false]], "nltk.translate.ribes_score": [[339, "module-nltk.translate.ribes_score", false]], "nltk.translate.stack_decoder": [[340, "module-nltk.translate.stack_decoder", false]], "nltk.tree": [[341, "module-nltk.tree", false]], "nltk.tree.immutable": [[342, "module-nltk.tree.immutable", false]], "nltk.tree.parented": [[343, "module-nltk.tree.parented", false]], "nltk.tree.parsing": [[344, "module-nltk.tree.parsing", false]], "nltk.tree.prettyprinter": [[345, "module-nltk.tree.prettyprinter", false]], "nltk.tree.probabilistic": [[346, "module-nltk.tree.probabilistic", false]], "nltk.tree.transforms": [[347, "module-nltk.tree.transforms", false]], "nltk.tree.tree": [[348, "module-nltk.tree.tree", false]], "nltk.treeprettyprinter": [[349, "module-nltk.treeprettyprinter", false]], "nltk.treetransforms": [[350, "module-nltk.treetransforms", false]], "nltk.twitter": [[351, "module-nltk.twitter", false]], "nltk.twitter.api": [[352, "module-nltk.twitter.api", false]], "nltk.twitter.common": [[353, "module-nltk.twitter.common", false]], "nltk.twitter.twitter_demo": [[354, "module-nltk.twitter.twitter_demo", false]], "nltk.twitter.twitterclient": [[355, "module-nltk.twitter.twitterclient", false]], "nltk.twitter.util": [[356, "module-nltk.twitter.util", false]], "nltk.util": [[357, "module-nltk.util", false]], "nltk.wsd": [[358, "module-nltk.wsd", false]], "nltk_extensions (nltk.stem.porter.porterstemmer attribute)": [[206, "nltk.stem.porter.PorterStemmer.NLTK_EXTENSIONS", false]], "nltkdemo18() (in module nltk.tag.brill)": [[215, "nltk.tag.brill.nltkdemo18", false]], "nltkdemo18plus() (in module nltk.tag.brill)": [[215, "nltk.tag.brill.nltkdemo18plus", false]], "nltkdrtboxerdrsinterpreter (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.NltkDrtBoxerDrsInterpreter", false]], "nltkwordtokenizer (class in nltk.tokenize.destructive)": [[305, "nltk.tokenize.destructive.NLTKWordTokenizer", false]], "node (nltk.tree.tree property)": [[341, "nltk.tree.Tree.node", false]], "node (nltk.tree.tree.tree property)": [[348, "nltk.tree.tree.Tree.node", false]], "nodecoords() (nltk.tree.prettyprinter.treeprettyprinter static method)": [[345, "nltk.tree.prettyprinter.TreePrettyPrinter.nodecoords", false]], "nodecoords() (nltk.tree.treeprettyprinter static method)": [[341, "nltk.tree.TreePrettyPrinter.nodecoords", false]], "nombankchaintreepointer (class in nltk.corpus.reader.nombank)": [[81, "nltk.corpus.reader.nombank.NombankChainTreePointer", false]], "nombankcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.NombankCorpusReader", false]], "nombankcorpusreader (class in nltk.corpus.reader.nombank)": [[81, "nltk.corpus.reader.nombank.NombankCorpusReader", false]], "nombankdemo (class in nltk.test.unit.test_nombank)": [[274, "nltk.test.unit.test_nombank.NombankDemo", false]], "nombankinstance (class in nltk.corpus.reader.nombank)": [[81, "nltk.corpus.reader.nombank.NombankInstance", false]], "nombankpointer (class in nltk.corpus.reader.nombank)": [[81, "nltk.corpus.reader.nombank.NombankPointer", false]], "nombanksplittreepointer (class in nltk.corpus.reader.nombank)": [[81, "nltk.corpus.reader.nombank.NombankSplitTreePointer", false]], "nombanktreepointer (class in nltk.corpus.reader.nombank)": [[81, "nltk.corpus.reader.nombank.NombankTreePointer", false]], "non_breaking (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.NON_BREAKING", false]], "nonascii (nltk.tokenize.nist.nisttokenizer attribute)": [[308, "nltk.tokenize.nist.NISTTokenizer.NONASCII", false]], "nonbreakingprefixescorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.NonbreakingPrefixesCorpusReader", false]], "nonbreakingprefixescorpusreader (class in nltk.corpus.reader.wordlist)": [[106, "nltk.corpus.reader.wordlist.NonbreakingPrefixesCorpusReader", false]], "none (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.NONE", false]], "nonprojective_conll_parse_demo() (in module nltk.parse.nonprojectivedependencyparser)": [[170, "nltk.parse.nonprojectivedependencyparser.nonprojective_conll_parse_demo", false]], "nonprojectivedependencyparser (class in nltk.parse.nonprojectivedependencyparser)": [[170, "nltk.parse.nonprojectivedependencyparser.NonprojectiveDependencyParser", false]], "nonterminal (class in nltk.grammar)": [[121, "nltk.grammar.Nonterminal", false]], "nonterminals() (in module nltk.grammar)": [[121, "nltk.grammar.nonterminals", false]], "norm() (in module nltk.corpus.reader.rte)": [[92, "nltk.corpus.reader.rte.norm", false]], "norm() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.norm", false]], "norm() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.norm", false]], "norm() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.norm", false]], "norm_cdf() (in module nltk.translate.gale_church)": [[326, "nltk.translate.gale_church.norm_cdf", false]], "norm_logsf() (in module nltk.translate.gale_church)": [[326, "nltk.translate.gale_church.norm_logsf", false]], "normalize() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.normalize", false]], "normalize() (nltk.sentiment.vader.vaderconstants method)": [[198, "nltk.sentiment.vader.VaderConstants.normalize", false]], "normalize() (nltk.tag.perceptron.perceptrontagger method)": [[221, "nltk.tag.perceptron.PerceptronTagger.normalize", false]], "norwegianstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.NorwegianStemmer", false]], "not (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.NOT", false]], "not (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.NOT", false]], "not_installed (nltk.downloader.downloader attribute)": [[113, "nltk.downloader.Downloader.NOT_INSTALLED", false]], "not_list (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.NOT_LIST", false]], "noun (nltk.corpus.reader.wordnet.wordnetcorpusreader attribute)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.NOUN", false]], "noun (nltk.corpus.reader.wordnetcorpusreader attribute)": [[57, "nltk.corpus.reader.WordNetCorpusReader.NOUN", false]], "nouns() (nltk.corpus.reader.nombank.nombankcorpusreader method)": [[81, "nltk.corpus.reader.nombank.NombankCorpusReader.nouns", false]], "nouns() (nltk.corpus.reader.nombankcorpusreader method)": [[57, "nltk.corpus.reader.NombankCorpusReader.nouns", false]], "npschatcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.NPSChatCorpusReader", false]], "npschatcorpusreader (class in nltk.corpus.reader.nps_chat)": [[82, "nltk.corpus.reader.nps_chat.NPSChatCorpusReader", false]], "nr() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.Nr", false]], "ns (nltk.corpus.reader.mte.mtefilereader attribute)": [[79, "nltk.corpus.reader.mte.MTEFileReader.ns", false]], "nullableinttoken() (nltk.sem.boxer.boxerdrsparser method)": [[181, "nltk.sem.boxer.BoxerDrsParser.nullableIntToken", false]], "num_clusters() (nltk.cluster.api.clusteri method)": [[47, "nltk.cluster.api.ClusterI.num_clusters", false]], "num_clusters() (nltk.cluster.em.emclusterer method)": [[48, "nltk.cluster.em.EMClusterer.num_clusters", false]], "num_clusters() (nltk.cluster.gaac.gaaclusterer method)": [[49, "nltk.cluster.gaac.GAAClusterer.num_clusters", false]], "num_clusters() (nltk.cluster.kmeans.kmeansclusterer method)": [[50, "nltk.cluster.kmeans.KMeansClusterer.num_clusters", false]], "num_edges (nltk.parse.chart.bottomuppredictcombinerule attribute)": [[162, "nltk.parse.chart.BottomUpPredictCombineRule.NUM_EDGES", false]], "num_edges (nltk.parse.chart.bottomuppredictrule attribute)": [[162, "nltk.parse.chart.BottomUpPredictRule.NUM_EDGES", false]], "num_edges (nltk.parse.chart.emptypredictrule attribute)": [[162, "nltk.parse.chart.EmptyPredictRule.NUM_EDGES", false]], "num_edges (nltk.parse.chart.fundamentalrule attribute)": [[162, "nltk.parse.chart.FundamentalRule.NUM_EDGES", false]], "num_edges (nltk.parse.chart.leafinitrule attribute)": [[162, "nltk.parse.chart.LeafInitRule.NUM_EDGES", false]], "num_edges (nltk.parse.chart.singleedgefundamentalrule attribute)": [[162, "nltk.parse.chart.SingleEdgeFundamentalRule.NUM_EDGES", false]], "num_edges (nltk.parse.chart.topdowninitrule attribute)": [[162, "nltk.parse.chart.TopDownInitRule.NUM_EDGES", false]], "num_edges (nltk.parse.chart.topdownpredictrule attribute)": [[162, "nltk.parse.chart.TopDownPredictRule.NUM_EDGES", false]], "num_edges (nltk.parse.pchart.probabilisticbottomupinitrule attribute)": [[171, "nltk.parse.pchart.ProbabilisticBottomUpInitRule.NUM_EDGES", false]], "num_edges (nltk.parse.pchart.probabilisticbottomuppredictrule attribute)": [[171, "nltk.parse.pchart.ProbabilisticBottomUpPredictRule.NUM_EDGES", false]], "num_edges (nltk.parse.pchart.probabilisticfundamentalrule attribute)": [[171, "nltk.parse.pchart.ProbabilisticFundamentalRule.NUM_EDGES", false]], "num_edges (nltk.parse.pchart.singleedgeprobabilisticfundamentalrule attribute)": [[171, "nltk.parse.pchart.SingleEdgeProbabilisticFundamentalRule.NUM_EDGES", false]], "num_edges() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.num_edges", false]], "num_leaves() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.num_leaves", false]], "number_regex (nltk.tokenize.nist.nisttokenizer attribute)": [[308, "nltk.tokenize.nist.NISTTokenizer.number_regex", false]], "numedges (nltk.ccg.chart.backwardtyperaiserule attribute)": [[14, "nltk.ccg.chart.BackwardTypeRaiseRule.NUMEDGES", false]], "numedges (nltk.ccg.chart.binarycombinatorrule attribute)": [[14, "nltk.ccg.chart.BinaryCombinatorRule.NUMEDGES", false]], "numedges (nltk.ccg.chart.forwardtyperaiserule attribute)": [[14, "nltk.ccg.chart.ForwardTypeRaiseRule.NUMEDGES", false]], "numerator (nltk.translate.bleu_score.fraction property)": [[324, "nltk.translate.bleu_score.Fraction.numerator", false]], "nx_graph() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.nx_graph", false]], "obj_score() (nltk.corpus.reader.sentisynset method)": [[57, "nltk.corpus.reader.SentiSynset.obj_score", false]], "obj_score() (nltk.corpus.reader.sentiwordnet.sentisynset method)": [[95, "nltk.corpus.reader.sentiwordnet.SentiSynset.obj_score", false]], "occupy() (nltk.translate.ibm5.slots method)": [[333, "nltk.translate.ibm5.Slots.occupy", false]], "of2ss() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.of2ss", false]], "of2ss() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.of2ss", false]], "offset() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.offset", false]], "offsets() (nltk.text.concordanceindex method)": [[300, "nltk.text.ConcordanceIndex.offsets", false]], "on_error() (nltk.twitter.twitterclient.streamer method)": [[355, "nltk.twitter.twitterclient.Streamer.on_error", false]], "on_finish() (nltk.twitter.api.tweethandleri method)": [[352, "nltk.twitter.api.TweetHandlerI.on_finish", false]], "on_finish() (nltk.twitter.twitterclient.tweetviewer method)": [[355, "nltk.twitter.twitterclient.TweetViewer.on_finish", false]], "on_finish() (nltk.twitter.twitterclient.tweetwriter method)": [[355, "nltk.twitter.twitterclient.TweetWriter.on_finish", false]], "on_success() (nltk.twitter.twitterclient.streamer method)": [[355, "nltk.twitter.twitterclient.Streamer.on_success", false]], "one_space (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.ONE_SPACE", false]], "onset() (nltk.tokenize.legality_principle.legalitysyllabletokenizer method)": [[306, "nltk.tokenize.legality_principle.LegalitySyllableTokenizer.onset", false]], "open (nltk.sem.linearlogic.tokens attribute)": [[190, "nltk.sem.linearlogic.Tokens.OPEN", false]], "open (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.OPEN", false]], "open() (nltk.corpus.reader.api.corpusreader method)": [[59, "nltk.corpus.reader.api.CorpusReader.open", false]], "open() (nltk.corpus.reader.corpusreader method)": [[57, "nltk.corpus.reader.CorpusReader.open", false]], "open() (nltk.data.filesystempathpointer method)": [[111, "nltk.data.FileSystemPathPointer.open", false]], "open() (nltk.data.gzipfilesystempathpointer method)": [[111, "nltk.data.GzipFileSystemPathPointer.open", false]], "open() (nltk.data.pathpointer method)": [[111, "nltk.data.PathPointer.open", false]], "open() (nltk.toolbox.standardformat method)": [[321, "nltk.toolbox.StandardFormat.open", false]], "open_bracket (nltk.sem.drt.drttokens attribute)": [[184, "nltk.sem.drt.DrtTokens.OPEN_BRACKET", false]], "open_punct (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.OPEN_PUNCT", false]], "open_punct_re (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.OPEN_PUNCT_RE", false]], "open_string() (nltk.toolbox.standardformat method)": [[321, "nltk.toolbox.StandardFormat.open_string", false]], "openondemandzipfile (class in nltk.data)": [[111, "nltk.data.OpenOnDemandZipFile", false]], "opinionlexiconcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.OpinionLexiconCorpusReader", false]], "opinionlexiconcorpusreader (class in nltk.corpus.reader.opinion_lexicon)": [[83, "nltk.corpus.reader.opinion_lexicon.OpinionLexiconCorpusReader", false]], "or (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.OR", false]], "or (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.OR", false]], "or (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.OR", false]], "or_list (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.OR_LIST", false]], "ordereddict (class in nltk.collections)": [[52, "nltk.collections.OrderedDict", false]], "orexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.OrExpression", false]], "original_algorithm (nltk.stem.porter.porterstemmer attribute)": [[206, "nltk.stem.porter.PorterStemmer.ORIGINAL_ALGORITHM", false]], "original_best_arc() (nltk.parse.nonprojectivedependencyparser.probabilisticnonprojectiveparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser.original_best_arc", false]], "original_tag (nltk.tbl.rule.tagrule attribute)": [[232, "nltk.tbl.rule.TagRule.original_tag", false]], "ortho_context (nltk.tokenize.punkt.punktparameters attribute)": [[309, "nltk.tokenize.punkt.PunktParameters.ortho_context", false]], "outerspace (nltk.sem.drt.drsdrawer attribute)": [[184, "nltk.sem.drt.DrsDrawer.OUTERSPACE", false]], "output_markdown() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.output_markdown", false]], "ovalwidget (class in nltk.draw.util)": [[119, "nltk.draw.util.OvalWidget", false]], "overlap() (nltk.classify.rte_classify.rtefeatureextractor method)": [[37, "nltk.classify.rte_classify.RTEFeatureExtractor.overlap", false]], "overridden() (in module nltk.internals)": [[131, "nltk.internals.overridden", false]], "pack() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.pack", false]], "pack() (nltk.draw.util.canvasframe method)": [[119, "nltk.draw.util.CanvasFrame.pack", false]], "pack() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.pack", false]], "package (class in nltk.downloader)": [[113, "nltk.downloader.Package", false]], "packages (nltk.downloader.collection attribute)": [[113, "nltk.downloader.Collection.packages", false]], "packages() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.packages", false]], "pad_sequence() (in module nltk.util)": [[357, "nltk.util.pad_sequence", false]], "padded_everygram_pipeline() (in module nltk.lm.preprocessing)": [[139, "nltk.lm.preprocessing.padded_everygram_pipeline", false]], "padded_everygrams() (in module nltk.lm.preprocessing)": [[139, "nltk.lm.preprocessing.padded_everygrams", false]], "paice (class in nltk.metrics.paice)": [[149, "nltk.metrics.paice.Paice", false]], "pairs() (nltk.corpus.reader.rte.rtecorpusreader method)": [[92, "nltk.corpus.reader.rte.RTECorpusReader.pairs", false]], "pairs() (nltk.corpus.reader.rtecorpusreader method)": [[57, "nltk.corpus.reader.RTECorpusReader.pairs", false]], "pairwise() (in module nltk.util)": [[357, "nltk.util.pairwise", false]], "panlex_uid (nltk.corpus.reader.panlex_swadesh.panlexlanguage attribute)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexLanguage.panlex_uid", false]], "panlexlanguage (class in nltk.corpus.reader.panlex_swadesh)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexLanguage", false]], "panlexlitecorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.PanLexLiteCorpusReader", false]], "panlexlitecorpusreader (class in nltk.corpus.reader.panlex_lite)": [[84, "nltk.corpus.reader.panlex_lite.PanLexLiteCorpusReader", false]], "panlexswadeshcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.PanlexSwadeshCorpusReader", false]], "panlexswadeshcorpusreader (class in nltk.corpus.reader.panlex_swadesh)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexSwadeshCorpusReader", false]], "para_path (nltk.corpus.reader.mte.mtefilereader attribute)": [[79, "nltk.corpus.reader.mte.MTEFileReader.para_path", false]], "parallelize_preprocess() (in module nltk.util)": [[357, "nltk.util.parallelize_preprocess", false]], "parallelproverbuilder (class in nltk.inference.api)": [[124, "nltk.inference.api.ParallelProverBuilder", false]], "parallelproverbuildercommand (class in nltk.inference.api)": [[124, "nltk.inference.api.ParallelProverBuilderCommand", false]], "paras (nltk.corpus.reader.markdown.codeblock property)": [[78, "nltk.corpus.reader.markdown.CodeBlock.paras", false]], "paras (nltk.corpus.reader.markdown.markdownblock property)": [[78, "nltk.corpus.reader.markdown.MarkdownBlock.paras", false]], "paras() (nltk.corpus.reader.api.categorizedcorpusreader method)": [[59, "nltk.corpus.reader.api.CategorizedCorpusReader.paras", false]], "paras() (nltk.corpus.reader.categorizedcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedCorpusReader.paras", false]], "paras() (nltk.corpus.reader.chasen.chasencorpusreader method)": [[64, "nltk.corpus.reader.chasen.ChasenCorpusReader.paras", false]], "paras() (nltk.corpus.reader.chasencorpusreader method)": [[57, "nltk.corpus.reader.ChasenCorpusReader.paras", false]], "paras() (nltk.corpus.reader.chunked.chunkedcorpusreader method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusReader.paras", false]], "paras() (nltk.corpus.reader.chunkedcorpusreader method)": [[57, "nltk.corpus.reader.ChunkedCorpusReader.paras", false]], "paras() (nltk.corpus.reader.europarlcorpusreader method)": [[57, "nltk.corpus.reader.EuroparlCorpusReader.paras", false]], "paras() (nltk.corpus.reader.ipipan.ipipancorpusreader method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader.paras", false]], "paras() (nltk.corpus.reader.ipipancorpusreader method)": [[57, "nltk.corpus.reader.IPIPANCorpusReader.paras", false]], "paras() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.paras", false]], "paras() (nltk.corpus.reader.mte.mtecorpusreader method)": [[79, "nltk.corpus.reader.mte.MTECorpusReader.paras", false]], "paras() (nltk.corpus.reader.mte.mtefilereader method)": [[79, "nltk.corpus.reader.mte.MTEFileReader.paras", false]], "paras() (nltk.corpus.reader.mtecorpusreader method)": [[57, "nltk.corpus.reader.MTECorpusReader.paras", false]], "paras() (nltk.corpus.reader.pl196x.pl196xcorpusreader method)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader.paras", false]], "paras() (nltk.corpus.reader.pl196xcorpusreader method)": [[57, "nltk.corpus.reader.Pl196xCorpusReader.paras", false]], "paras() (nltk.corpus.reader.plaintext.europarlcorpusreader method)": [[87, "nltk.corpus.reader.plaintext.EuroparlCorpusReader.paras", false]], "paras() (nltk.corpus.reader.plaintext.plaintextcorpusreader method)": [[87, "nltk.corpus.reader.plaintext.PlaintextCorpusReader.paras", false]], "paras() (nltk.corpus.reader.plaintextcorpusreader method)": [[57, "nltk.corpus.reader.PlaintextCorpusReader.paras", false]], "paras() (nltk.corpus.reader.tagged.taggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.TaggedCorpusReader.paras", false]], "paras() (nltk.corpus.reader.tagged.timittaggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.TimitTaggedCorpusReader.paras", false]], "paras() (nltk.corpus.reader.taggedcorpusreader method)": [[57, "nltk.corpus.reader.TaggedCorpusReader.paras", false]], "paras() (nltk.corpus.reader.timittaggedcorpusreader method)": [[57, "nltk.corpus.reader.TimitTaggedCorpusReader.paras", false]], "paras() (nltk.corpus.reader.ycoe.ycoecorpusreader method)": [[109, "nltk.corpus.reader.ycoe.YCOECorpusReader.paras", false]], "paras() (nltk.corpus.reader.ycoecorpusreader method)": [[57, "nltk.corpus.reader.YCOECorpusReader.paras", false]], "paras_mode (nltk.corpus.reader.ipipan.ipipancorpusview attribute)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusView.PARAS_MODE", false]], "parastart (nltk.tokenize.punkt.punkttoken attribute)": [[309, "nltk.tokenize.punkt.PunktToken.parastart", false]], "parens_brackets (nltk.tokenize.destructive.nltkwordtokenizer attribute)": [[305, "nltk.tokenize.destructive.NLTKWordTokenizer.PARENS_BRACKETS", false]], "parens_brackets (nltk.tokenize.treebank.treebankworddetokenizer attribute)": [[319, "nltk.tokenize.treebank.TreebankWordDetokenizer.PARENS_BRACKETS", false]], "parens_brackets (nltk.tokenize.treebank.treebankwordtokenizer attribute)": [[319, "nltk.tokenize.treebank.TreebankWordTokenizer.PARENS_BRACKETS", false]], "parent() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.parent", false]], "parent() (nltk.tree.parented.parentedtree method)": [[343, "nltk.tree.parented.ParentedTree.parent", false]], "parent() (nltk.tree.parentedtree method)": [[341, "nltk.tree.ParentedTree.parent", false]], "parent_index() (nltk.tree.parented.parentedtree method)": [[343, "nltk.tree.parented.ParentedTree.parent_index", false]], "parent_index() (nltk.tree.parentedtree method)": [[341, "nltk.tree.ParentedTree.parent_index", false]], "parent_indices() (nltk.tree.multiparentedtree method)": [[341, "nltk.tree.MultiParentedTree.parent_indices", false]], "parent_indices() (nltk.tree.parented.multiparentedtree method)": [[343, "nltk.tree.parented.MultiParentedTree.parent_indices", false]], "parentedtree (class in nltk.tree)": [[341, "nltk.tree.ParentedTree", false]], "parentedtree (class in nltk.tree.parented)": [[343, "nltk.tree.parented.ParentedTree", false]], "parents() (nltk.tree.multiparentedtree method)": [[341, "nltk.tree.MultiParentedTree.parents", false]], "parents() (nltk.tree.parented.multiparentedtree method)": [[343, "nltk.tree.parented.MultiParentedTree.parents", false]], "parenwidget (class in nltk.draw.util)": [[119, "nltk.draw.util.ParenWidget", false]], "parse() (nltk.ccg.chart.ccgchartparser method)": [[14, "nltk.ccg.chart.CCGChartParser.parse", false]], "parse() (nltk.chunk.api.chunkparseri method)": [[26, "nltk.chunk.api.ChunkParserI.parse", false]], "parse() (nltk.chunk.named_entity.nechunkparser method)": [[27, "nltk.chunk.named_entity.NEChunkParser.parse", false]], "parse() (nltk.chunk.regexp.regexpchunkparser method)": [[28, "nltk.chunk.regexp.RegexpChunkParser.parse", false]], "parse() (nltk.chunk.regexp.regexpparser method)": [[28, "nltk.chunk.regexp.RegexpParser.parse", false]], "parse() (nltk.corpus.reader.nombank.nombankinstance static method)": [[81, "nltk.corpus.reader.nombank.NombankInstance.parse", false]], "parse() (nltk.corpus.reader.nombank.nombanktreepointer static method)": [[81, "nltk.corpus.reader.nombank.NombankTreePointer.parse", false]], "parse() (nltk.corpus.reader.propbank.propbankinflection static method)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.parse", false]], "parse() (nltk.corpus.reader.propbank.propbankinstance static method)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.parse", false]], "parse() (nltk.corpus.reader.propbank.propbanktreepointer static method)": [[89, "nltk.corpus.reader.propbank.PropbankTreePointer.parse", false]], "parse() (nltk.parse.api.parseri method)": [[160, "nltk.parse.api.ParserI.parse", false]], "parse() (nltk.parse.bllip.bllipparser method)": [[161, "nltk.parse.bllip.BllipParser.parse", false]], "parse() (nltk.parse.chart.chartparser method)": [[162, "nltk.parse.chart.ChartParser.parse", false]], "parse() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.parse", false]], "parse() (nltk.parse.nonprojectivedependencyparser.nonprojectivedependencyparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.NonprojectiveDependencyParser.parse", false]], "parse() (nltk.parse.nonprojectivedependencyparser.probabilisticnonprojectiveparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser.parse", false]], "parse() (nltk.parse.pchart.bottomupprobabilisticchartparser method)": [[171, "nltk.parse.pchart.BottomUpProbabilisticChartParser.parse", false]], "parse() (nltk.parse.projectivedependencyparser.probabilisticprojectivedependencyparser method)": [[172, "nltk.parse.projectivedependencyparser.ProbabilisticProjectiveDependencyParser.parse", false]], "parse() (nltk.parse.projectivedependencyparser.projectivedependencyparser method)": [[172, "nltk.parse.projectivedependencyparser.ProjectiveDependencyParser.parse", false]], "parse() (nltk.parse.recursivedescent.recursivedescentparser method)": [[173, "nltk.parse.recursivedescent.RecursiveDescentParser.parse", false]], "parse() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.parse", false]], "parse() (nltk.parse.shiftreduce.shiftreduceparser method)": [[174, "nltk.parse.shiftreduce.ShiftReduceParser.parse", false]], "parse() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.parse", false]], "parse() (nltk.parse.transitionparser.transitionparser method)": [[176, "nltk.parse.transitionparser.TransitionParser.parse", false]], "parse() (nltk.parse.viterbi.viterbiparser method)": [[178, "nltk.parse.viterbi.ViterbiParser.parse", false]], "parse() (nltk.sem.boxer.boxeroutputdrsparser method)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser.parse", false]], "parse() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.parse", false]], "parse() (nltk.toolbox.toolboxdata method)": [[321, "nltk.toolbox.ToolboxData.parse", false]], "parse() (nltk.toolbox.toolboxsettings method)": [[321, "nltk.toolbox.ToolboxSettings.parse", false]], "parse_all() (nltk.parse.api.parseri method)": [[160, "nltk.parse.api.ParserI.parse_all", false]], "parse_condition() (nltk.sem.boxer.boxeroutputdrsparser method)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser.parse_condition", false]], "parse_corpus (nltk.corpus.reader.nombank.nombankinstance attribute)": [[81, "nltk.corpus.reader.nombank.NombankInstance.parse_corpus", false]], "parse_corpus (nltk.corpus.reader.propbank.propbankinstance attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.parse_corpus", false]], "parse_drs() (nltk.sem.boxer.boxeroutputdrsparser method)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser.parse_drs", false]], "parse_index() (nltk.sem.boxer.boxeroutputdrsparser method)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser.parse_index", false]], "parse_megam_weights() (in module nltk.classify.megam)": [[34, "nltk.classify.megam.parse_megam_weights", false]], "parse_one() (nltk.parse.api.parseri method)": [[160, "nltk.parse.api.ParserI.parse_one", false]], "parse_output() (nltk.tag.stanford.stanfordnertagger method)": [[224, "nltk.tag.stanford.StanfordNERTagger.parse_output", false]], "parse_output() (nltk.tag.stanford.stanfordtagger method)": [[224, "nltk.tag.stanford.StanfordTagger.parse_output", false]], "parse_repp_outputs() (nltk.tokenize.repp.repptokenizer static method)": [[311, "nltk.tokenize.repp.ReppTokenizer.parse_repp_outputs", false]], "parse_sents() (in module nltk.sem.util)": [[194, "nltk.sem.util.parse_sents", false]], "parse_sents() (nltk.parse.api.parseri method)": [[160, "nltk.parse.api.ParserI.parse_sents", false]], "parse_sents() (nltk.parse.corenlp.genericcorenlpparser method)": [[163, "nltk.parse.corenlp.GenericCoreNLPParser.parse_sents", false]], "parse_sents() (nltk.parse.malt.maltparser method)": [[169, "nltk.parse.malt.MaltParser.parse_sents", false]], "parse_sents() (nltk.parse.stanford.genericstanfordparser method)": [[175, "nltk.parse.stanford.GenericStanfordParser.parse_sents", false]], "parse_tadm_weights() (in module nltk.classify.tadm)": [[41, "nltk.classify.tadm.parse_tadm_weights", false]], "parse_tag() (nltk.corpus.reader.bcp47.bcp47corpusreader method)": [[60, "nltk.corpus.reader.bcp47.BCP47CorpusReader.parse_tag", false]], "parse_tag() (nltk.corpus.reader.bcp47corpusreader method)": [[57, "nltk.corpus.reader.BCP47CorpusReader.parse_tag", false]], "parse_tagged_sents() (nltk.parse.malt.maltparser method)": [[169, "nltk.parse.malt.MaltParser.parse_tagged_sents", false]], "parse_text() (nltk.parse.corenlp.genericcorenlpparser method)": [[163, "nltk.parse.corenlp.GenericCoreNLPParser.parse_text", false]], "parse_to_compiled() (nltk.sem.glue.glue method)": [[187, "nltk.sem.glue.Glue.parse_to_compiled", false]], "parse_to_meaning() (nltk.sem.glue.glue method)": [[187, "nltk.sem.glue.Glue.parse_to_meaning", false]], "parse_to_readings() (nltk.inference.discourse.cfgreadingcommand method)": [[125, "nltk.inference.discourse.CfgReadingCommand.parse_to_readings", false]], "parse_to_readings() (nltk.inference.discourse.drtgluereadingcommand method)": [[125, "nltk.inference.discourse.DrtGlueReadingCommand.parse_to_readings", false]], "parse_to_readings() (nltk.inference.discourse.readingcommand method)": [[125, "nltk.inference.discourse.ReadingCommand.parse_to_readings", false]], "parse_token_stream() (in module nltk.translate.gale_church)": [[326, "nltk.translate.gale_church.parse_token_stream", false]], "parse_tweets_set() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.parse_tweets_set", false]], "parse_variable() (nltk.sem.boxer.boxeroutputdrsparser method)": [[181, "nltk.sem.boxer.BoxerOutputDrsParser.parse_variable", false]], "parse_weka_distribution() (nltk.classify.weka.wekaclassifier method)": [[44, "nltk.classify.weka.WekaClassifier.parse_weka_distribution", false]], "parse_weka_output() (nltk.classify.weka.wekaclassifier method)": [[44, "nltk.classify.weka.WekaClassifier.parse_weka_output", false]], "parse_with_bindops() (in module nltk.sem.cooper_storage)": [[183, "nltk.sem.cooper_storage.parse_with_bindops", false]], "parseapplication() (in module nltk.ccg.lexicon)": [[16, "nltk.ccg.lexicon.parseApplication", false]], "parsed_docs() (nltk.corpus.reader.ieer.ieercorpusreader method)": [[73, "nltk.corpus.reader.ieer.IEERCorpusReader.parsed_docs", false]], "parsed_docs() (nltk.corpus.reader.ieercorpusreader method)": [[57, "nltk.corpus.reader.IEERCorpusReader.parsed_docs", false]], "parsed_paras() (nltk.corpus.reader.bracket_parse.categorizedbracketparsecorpusreader method)": [[62, "nltk.corpus.reader.bracket_parse.CategorizedBracketParseCorpusReader.parsed_paras", false]], "parsed_paras() (nltk.corpus.reader.categorizedbracketparsecorpusreader method)": [[57, "nltk.corpus.reader.CategorizedBracketParseCorpusReader.parsed_paras", false]], "parsed_sents() (nltk.corpus.reader.api.syntaxcorpusreader method)": [[59, "nltk.corpus.reader.api.SyntaxCorpusReader.parsed_sents", false]], "parsed_sents() (nltk.corpus.reader.bracket_parse.categorizedbracketparsecorpusreader method)": [[62, "nltk.corpus.reader.bracket_parse.CategorizedBracketParseCorpusReader.parsed_sents", false]], "parsed_sents() (nltk.corpus.reader.categorizedbracketparsecorpusreader method)": [[57, "nltk.corpus.reader.CategorizedBracketParseCorpusReader.parsed_sents", false]], "parsed_sents() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.parsed_sents", false]], "parsed_sents() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.parsed_sents", false]], "parsed_sents() (nltk.corpus.reader.dependency.dependencycorpusreader method)": [[71, "nltk.corpus.reader.dependency.DependencyCorpusReader.parsed_sents", false]], "parsed_sents() (nltk.corpus.reader.dependencycorpusreader method)": [[57, "nltk.corpus.reader.DependencyCorpusReader.parsed_sents", false]], "parsed_sents() (nltk.corpus.reader.syntaxcorpusreader method)": [[57, "nltk.corpus.reader.SyntaxCorpusReader.parsed_sents", false]], "parsed_sents() (nltk.corpus.reader.ycoe.ycoecorpusreader method)": [[109, "nltk.corpus.reader.ycoe.YCOECorpusReader.parsed_sents", false]], "parsed_sents() (nltk.corpus.reader.ycoecorpusreader method)": [[57, "nltk.corpus.reader.YCOECorpusReader.parsed_sents", false]], "parsed_words() (nltk.corpus.reader.bracket_parse.categorizedbracketparsecorpusreader method)": [[62, "nltk.corpus.reader.bracket_parse.CategorizedBracketParseCorpusReader.parsed_words", false]], "parsed_words() (nltk.corpus.reader.categorizedbracketparsecorpusreader method)": [[57, "nltk.corpus.reader.CategorizedBracketParseCorpusReader.parsed_words", false]], "parseprimitivecategory() (in module nltk.ccg.lexicon)": [[16, "nltk.ccg.lexicon.parsePrimitiveCategory", false]], "parser() (in module nltk.test.unit.test_bllip)": [[253, "nltk.test.unit.test_bllip.parser", false]], "parser_annotator (nltk.parse.corenlp.corenlpdependencyparser attribute)": [[163, "nltk.parse.corenlp.CoreNLPDependencyParser.parser_annotator", false]], "parser_annotator (nltk.parse.corenlp.corenlpparser attribute)": [[163, "nltk.parse.corenlp.CoreNLPParser.parser_annotator", false]], "parseri (class in nltk.parse.api)": [[160, "nltk.parse.api.ParserI", false]], "parserules() (nltk.stem.lancaster.lancasterstemmer method)": [[205, "nltk.stem.lancaster.LancasterStemmer.parseRules", false]], "parses() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.parses", false]], "parses() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.parses", false]], "parses() (nltk.parse.featurechart.featurechart method)": [[167, "nltk.parse.featurechart.FeatureChart.parses", false]], "parses() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.parses", false]], "parses() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.parses", false]], "parsesubscripts() (in module nltk.ccg.lexicon)": [[16, "nltk.ccg.lexicon.parseSubscripts", false]], "partial (nltk.downloader.downloader attribute)": [[113, "nltk.downloader.Downloader.PARTIAL", false]], "partial_names_demo() (in module nltk.classify.util)": [[43, "nltk.classify.util.partial_names_demo", false]], "participants() (nltk.corpus.reader.childes.childescorpusreader method)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.participants", false]], "participants() (nltk.corpus.reader.childescorpusreader method)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.participants", false]], "participle (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.PARTICIPLE", false]], "passive (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.PASSIVE", false]], "passthroughboxerdrsinterpreter (class in nltk.sem.boxer)": [[181, "nltk.sem.boxer.PassthroughBoxerDrsInterpreter", false]], "past (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.PAST", false]], "path (in module nltk.data)": [[111, "nltk.data.path", false]], "path (nltk.data.filesystempathpointer property)": [[111, "nltk.data.FileSystemPathPointer.path", false]], "path_similarity() (in module nltk.corpus.reader.wordnet)": [[107, "nltk.corpus.reader.wordnet.path_similarity", false]], "path_similarity() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.path_similarity", false]], "path_similarity() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.path_similarity", false]], "path_similarity() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.path_similarity", false]], "pathpointer (class in nltk.data)": [[111, "nltk.data.PathPointer", false]], "pcfg (class in nltk.grammar)": [[121, "nltk.grammar.PCFG", false]], "perceptrontagger (class in nltk.tag.perceptron)": [[221, "nltk.tag.perceptron.PerceptronTagger", false]], "perfect (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.PERFECT", false]], "perfect_and_progressive (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.PERFECT_AND_PROGRESSIVE", false]], "period_comma_follow (nltk.tokenize.nist.nisttokenizer attribute)": [[308, "nltk.tokenize.nist.NISTTokenizer.PERIOD_COMMA_FOLLOW", false]], "period_comma_preceed (nltk.tokenize.nist.nisttokenizer attribute)": [[308, "nltk.tokenize.nist.NISTTokenizer.PERIOD_COMMA_PRECEED", false]], "period_context_re() (nltk.tokenize.punkt.punktlanguagevars method)": [[309, "nltk.tokenize.punkt.PunktLanguageVars.period_context_re", false]], "period_final (nltk.tokenize.punkt.punkttoken attribute)": [[309, "nltk.tokenize.punkt.PunktToken.period_final", false]], "perplexity() (nltk.lm.api.languagemodel method)": [[136, "nltk.lm.api.LanguageModel.perplexity", false]], "pertainyms() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.pertainyms", false]], "pformat() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.pformat", false]], "pformat() (nltk.tree.tree method)": [[341, "nltk.tree.Tree.pformat", false]], "pformat() (nltk.tree.tree.tree method)": [[348, "nltk.tree.tree.Tree.pformat", false]], "pformat_latex_qtree() (nltk.tree.tree method)": [[341, "nltk.tree.Tree.pformat_latex_qtree", false]], "pformat_latex_qtree() (nltk.tree.tree.tree method)": [[348, "nltk.tree.tree.Tree.pformat_latex_qtree", false]], "phags_pa (nltk.tokenize.util.cjkchars attribute)": [[320, "nltk.tokenize.util.CJKChars.Phags_Pa", false]], "phi_sq() (nltk.metrics.association.bigramassocmeasures class method)": [[146, "nltk.metrics.association.BigramAssocMeasures.phi_sq", false]], "phone_times() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.phone_times", false]], "phone_times() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.phone_times", false]], "phone_trees() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.phone_trees", false]], "phone_trees() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.phone_trees", false]], "phone_word_re (nltk.tokenize.casual.tweettokenizer property)": [[304, "nltk.tokenize.casual.TweetTokenizer.PHONE_WORD_RE", false]], "phones() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.phones", false]], "phones() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.phones", false]], "phrase_extraction() (in module nltk.translate.phrase_based)": [[338, "nltk.translate.phrase_based.phrase_extraction", false]], "phrasetable (class in nltk.translate.api)": [[323, "nltk.translate.api.PhraseTable", false]], "phrasetableentry (class in nltk.translate.api)": [[323, "nltk.translate.api.PhraseTableEntry", false]], "pi() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.pi", false]], "pieces (nltk.corpus.reader.nombank.nombankchaintreepointer attribute)": [[81, "nltk.corpus.reader.nombank.NombankChainTreePointer.pieces", false]], "pieces (nltk.corpus.reader.nombank.nombanksplittreepointer attribute)": [[81, "nltk.corpus.reader.nombank.NombankSplitTreePointer.pieces", false]], "pieces (nltk.corpus.reader.propbank.propbankchaintreepointer attribute)": [[89, "nltk.corpus.reader.propbank.PropbankChainTreePointer.pieces", false]], "pieces (nltk.corpus.reader.propbank.propbanksplittreepointer attribute)": [[89, "nltk.corpus.reader.propbank.PropbankSplitTreePointer.pieces", false]], "pipe (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.PIPE", false]], "pk() (in module nltk.metrics.segmentation)": [[151, "nltk.metrics.segmentation.pk", false]], "pl196xcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.Pl196xCorpusReader", false]], "pl196xcorpusreader (class in nltk.corpus.reader.pl196x)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader", false]], "plaintextcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.PlaintextCorpusReader", false]], "plaintextcorpusreader (class in nltk.corpus.reader.plaintext)": [[87, "nltk.corpus.reader.plaintext.PlaintextCorpusReader", false]], "play() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.play", false]], "play() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.play", false]], "plot() (nltk.probability.conditionalfreqdist method)": [[179, "nltk.probability.ConditionalFreqDist.plot", false]], "plot() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.plot", false]], "plot() (nltk.text.text method)": [[300, "nltk.text.Text.plot", false]], "pluggings() (nltk.sem.hole.holesemantics method)": [[188, "nltk.sem.hole.HoleSemantics.pluggings", false]], "plur2sing() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.plur2sing", false]], "plur2sing() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.plur2sing", false]], "pmi() (nltk.metrics.association.ngramassocmeasures class method)": [[146, "nltk.metrics.association.NgramAssocMeasures.pmi", false]], "point_entropy() (nltk.tag.hmm.hiddenmarkovmodeltagger method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.point_entropy", false]], "poisson_stirling() (nltk.metrics.association.ngramassocmeasures class method)": [[146, "nltk.metrics.association.NgramAssocMeasures.poisson_stirling", false]], "polarity_scores() (nltk.sentiment.vader.sentimentintensityanalyzer method)": [[198, "nltk.sentiment.vader.SentimentIntensityAnalyzer.polarity_scores", false]], "pop() (nltk.featstruct.featdict method)": [[120, "nltk.featstruct.FeatDict.pop", false]], "pop() (nltk.featstruct.featlist method)": [[120, "nltk.featstruct.FeatList.pop", false]], "pop() (nltk.tree.immutable.immutabletree method)": [[342, "nltk.tree.immutable.ImmutableTree.pop", false]], "pop() (nltk.tree.immutabletree method)": [[341, "nltk.tree.ImmutableTree.pop", false]], "pop_first() (nltk.inference.tableau.agenda method)": [[130, "nltk.inference.tableau.Agenda.pop_first", false]], "popitem() (nltk.collections.ordereddict method)": [[52, "nltk.collections.OrderedDict.popitem", false]], "popitem() (nltk.featstruct.featdict method)": [[120, "nltk.featstruct.FeatDict.popitem", false]], "porterstemmer (class in nltk.stem.porter)": [[206, "nltk.stem.porter.PorterStemmer", false]], "porterstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.PorterStemmer", false]], "portertest (class in nltk.test.unit.test_stem)": [[281, "nltk.test.unit.test_stem.PorterTest", false]], "portuguesecategorizedplaintextcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.PortugueseCategorizedPlaintextCorpusReader", false]], "portuguesecategorizedplaintextcorpusreader (class in nltk.corpus.reader.plaintext)": [[87, "nltk.corpus.reader.plaintext.PortugueseCategorizedPlaintextCorpusReader", false]], "portuguesestemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.PortugueseStemmer", false]], "pos (class in nltk.tag.brill)": [[215, "nltk.tag.brill.Pos", false]], "pos (nltk.corpus.reader.conll.conllcorpusreader attribute)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.POS", false]], "pos (nltk.corpus.reader.conllcorpusreader attribute)": [[57, "nltk.corpus.reader.ConllCorpusReader.POS", false]], "pos() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.pos", false]], "pos() (nltk.tree.tree method)": [[341, "nltk.tree.Tree.pos", false]], "pos() (nltk.tree.tree.tree method)": [[348, "nltk.tree.tree.Tree.pos", false]], "pos_score() (nltk.corpus.reader.sentisynset method)": [[57, "nltk.corpus.reader.SentiSynset.pos_score", false]], "pos_score() (nltk.corpus.reader.sentiwordnet.sentisynset method)": [[95, "nltk.corpus.reader.sentiwordnet.SentiSynset.pos_score", false]], "pos_tag() (in module nltk.tag)": [[213, "nltk.tag.pos_tag", false]], "pos_tag_sents() (in module nltk.tag)": [[213, "nltk.tag.pos_tag_sents", false]], "position_of_ngram() (in module nltk.translate.ribes_score)": [[339, "nltk.translate.ribes_score.position_of_ngram", false]], "positive() (nltk.corpus.reader.opinion_lexicon.opinionlexiconcorpusreader method)": [[83, "nltk.corpus.reader.opinion_lexicon.OpinionLexiconCorpusReader.positive", false]], "positive() (nltk.corpus.reader.opinionlexiconcorpusreader method)": [[57, "nltk.corpus.reader.OpinionLexiconCorpusReader.positive", false]], "positivenaivebayesclassifier (class in nltk.classify.positivenaivebayes)": [[36, "nltk.classify.positivenaivebayes.PositiveNaiveBayesClassifier", false]], "possibleantecedents (class in nltk.sem.drt)": [[184, "nltk.sem.drt.PossibleAntecedents", false]], "postag() (in module nltk.tbl.demo)": [[229, "nltk.tbl.demo.postag", false]], "postag_tree() (in module nltk.chunk.named_entity)": [[27, "nltk.chunk.named_entity.postag_tree", false]], "posts() (nltk.corpus.reader.nps_chat.npschatcorpusreader method)": [[82, "nltk.corpus.reader.nps_chat.NPSChatCorpusReader.posts", false]], "posts() (nltk.corpus.reader.npschatcorpusreader method)": [[57, "nltk.corpus.reader.NPSChatCorpusReader.posts", false]], "postscript() (nltk.sem.drt_glue_demo.drtgluedemo method)": [[185, "nltk.sem.drt_glue_demo.DrtGlueDemo.postscript", false]], "ppattachment (class in nltk.corpus.reader.ppattach)": [[88, "nltk.corpus.reader.ppattach.PPAttachment", false]], "ppattachmentcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.PPAttachmentCorpusReader", false]], "ppattachmentcorpusreader (class in nltk.corpus.reader.ppattach)": [[88, "nltk.corpus.reader.ppattach.PPAttachmentCorpusReader", false]], "pprint() (nltk.corpus.reader.conll.conllsrlinstance method)": [[69, "nltk.corpus.reader.conll.ConllSRLInstance.pprint", false]], "pprint() (nltk.corpus.reader.conll.conllsrlinstancelist method)": [[69, "nltk.corpus.reader.conll.ConllSRLInstanceList.pprint", false]], "pprint() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.pprint", false]], "pprint() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.pprint", false]], "pprint() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.pprint", false]], "pprint() (nltk.tree.tree method)": [[341, "nltk.tree.Tree.pprint", false]], "pprint() (nltk.tree.tree.tree method)": [[348, "nltk.tree.tree.Tree.pprint", false]], "pprint_frames() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.pprint_frames", false]], "pprint_frames() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.pprint_frames", false]], "pprint_members() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.pprint_members", false]], "pprint_members() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.pprint_members", false]], "pprint_subclasses() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.pprint_subclasses", false]], "pprint_subclasses() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.pprint_subclasses", false]], "pprint_themroles() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.pprint_themroles", false]], "pprint_themroles() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.pprint_themroles", false]], "pr() (in module nltk.util)": [[357, "nltk.util.pr", false]], "pre1() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.pre1", false]], "pre32() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.pre32", false]], "precision() (in module nltk.metrics.scores)": [[150, "nltk.metrics.scores.precision", false]], "precision() (nltk.chunk.util.chunkscore method)": [[29, "nltk.chunk.util.ChunkScore.precision", false]], "precision() (nltk.metrics.confusionmatrix.confusionmatrix method)": [[147, "nltk.metrics.confusionmatrix.ConfusionMatrix.precision", false]], "precision() (nltk.tag.api.taggeri method)": [[214, "nltk.tag.api.TaggerI.precision", false]], "pred (nltk.sem.hole.constants attribute)": [[188, "nltk.sem.hole.Constants.PRED", false]], "pred (nltk.sem.logic.applicationexpression property)": [[191, "nltk.sem.logic.ApplicationExpression.pred", false]], "predholder (class in nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.PredHolder", false]], "predicate (nltk.corpus.reader.nombank.nombankinstance attribute)": [[81, "nltk.corpus.reader.nombank.NombankInstance.predicate", false]], "predicate (nltk.corpus.reader.propbank.propbankinstance attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.predicate", false]], "predicates() (nltk.sem.logic.abstractvariableexpression method)": [[191, "nltk.sem.logic.AbstractVariableExpression.predicates", false]], "predicates() (nltk.sem.logic.applicationexpression method)": [[191, "nltk.sem.logic.ApplicationExpression.predicates", false]], "predicates() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.predicates", false]], "predict() (nltk.tag.perceptron.averagedperceptron method)": [[221, "nltk.tag.perceptron.AveragedPerceptron.predict", false]], "predictorrule (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.PredictorRule", false]], "predid (nltk.corpus.reader.nombank.nombankinstance attribute)": [[81, "nltk.corpus.reader.nombank.NombankInstance.predid", false]], "predid (nltk.corpus.reader.propbank.propbankinstance property)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.predid", false]], "pref() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.pref", false]], "pref() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.pref", false]], "prefix_replace() (in module nltk.stem.util)": [[210, "nltk.stem.util.prefix_replace", false]], "prefix_step2a_success (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.prefix_step2a_success", false]], "prefix_step3a_noun_success (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.prefix_step3a_noun_success", false]], "prefix_step3b_noun_success (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.prefix_step3b_noun_success", false]], "presence() (in module nltk.metrics.distance)": [[148, "nltk.metrics.distance.presence", false]], "present (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.PRESENT", false]], "pretty_format() (nltk.classify.decisiontree.decisiontreeclassifier method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.pretty_format", false]], "pretty_format() (nltk.metrics.confusionmatrix.confusionmatrix method)": [[147, "nltk.metrics.confusionmatrix.ConfusionMatrix.pretty_format", false]], "pretty_format() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.pretty_format", false]], "pretty_format() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.pretty_format", false]], "pretty_format() (nltk.sem.lfg.fstructure method)": [[189, "nltk.sem.lfg.FStructure.pretty_format", false]], "pretty_format_edge() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.pretty_format_edge", false]], "pretty_format_leaves() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.pretty_format_leaves", false]], "pretty_print() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.pretty_print", false]], "pretty_print() (nltk.tree.tree method)": [[341, "nltk.tree.Tree.pretty_print", false]], "pretty_print() (nltk.tree.tree.tree method)": [[348, "nltk.tree.tree.Tree.pretty_print", false]], "prettydict (class in nltk.corpus.reader.framenet)": [[72, "nltk.corpus.reader.framenet.PrettyDict", false]], "prettylazyconcatenation (class in nltk.corpus.reader.framenet)": [[72, "nltk.corpus.reader.framenet.PrettyLazyConcatenation", false]], "prettylazyiteratorlist (class in nltk.corpus.reader.framenet)": [[72, "nltk.corpus.reader.framenet.PrettyLazyIteratorList", false]], "prettylazymap (class in nltk.corpus.reader.framenet)": [[72, "nltk.corpus.reader.framenet.PrettyLazyMap", false]], "prettylist (class in nltk.corpus.reader.framenet)": [[72, "nltk.corpus.reader.framenet.PrettyList", false]], "prev() (nltk.sem.drt_glue_demo.drtgluedemo method)": [[185, "nltk.sem.drt_glue_demo.DrtGlueDemo.prev", false]], "previous_cept() (nltk.translate.ibm_model.alignmentinfo method)": [[334, "nltk.translate.ibm_model.AlignmentInfo.previous_cept", false]], "previous_in_tablet() (nltk.translate.ibm_model.alignmentinfo method)": [[334, "nltk.translate.ibm_model.AlignmentInfo.previous_in_tablet", false]], "primitivecategory (class in nltk.ccg.api)": [[13, "nltk.ccg.api.PrimitiveCategory", false]], "print_assumptions() (nltk.inference.api.basetheoremtoolcommand method)": [[124, "nltk.inference.api.BaseTheoremToolCommand.print_assumptions", false]], "print_assumptions() (nltk.inference.api.theoremtoolcommand method)": [[124, "nltk.inference.api.TheoremToolCommand.print_assumptions", false]], "print_assumptions() (nltk.inference.api.theoremtoolcommanddecorator method)": [[124, "nltk.inference.api.TheoremToolCommandDecorator.print_assumptions", false]], "print_assumptions() (nltk.inference.prover9.prover9commandparent method)": [[128, "nltk.inference.prover9.Prover9CommandParent.print_assumptions", false]], "print_concordance() (nltk.text.concordanceindex method)": [[300, "nltk.text.ConcordanceIndex.print_concordance", false]], "print_proof() (in module nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.print_proof", false]], "print_string() (in module nltk.util)": [[357, "nltk.util.print_string", false]], "print_template_statistics() (nltk.tag.brill.brilltagger method)": [[215, "nltk.tag.brill.BrillTagger.print_template_statistics", false]], "print_to_file() (nltk.draw.util.canvasframe method)": [[119, "nltk.draw.util.CanvasFrame.print_to_file", false]], "printccgderivation() (in module nltk.ccg.chart)": [[14, "nltk.ccg.chart.printCCGDerivation", false]], "printccgtree() (in module nltk.ccg.chart)": [[14, "nltk.ccg.chart.printCCGTree", false]], "printtype() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.printtype", false]], "priors (nltk.translate.gale_church.languageindependent attribute)": [[326, "nltk.translate.gale_church.LanguageIndependent.PRIORS", false]], "pro_w4() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.pro_w4", false]], "pro_w53() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.pro_w53", false]], "pro_w54() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.pro_w54", false]], "pro_w6() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.pro_w6", false]], "pro_w64() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.pro_w64", false]], "prob() (nltk.parse.pchart.probabilisticleafedge method)": [[171, "nltk.parse.pchart.ProbabilisticLeafEdge.prob", false]], "prob() (nltk.parse.pchart.probabilistictreeedge method)": [[171, "nltk.parse.pchart.ProbabilisticTreeEdge.prob", false]], "prob() (nltk.probability.crossvalidationprobdist method)": [[179, "nltk.probability.CrossValidationProbDist.prob", false]], "prob() (nltk.probability.dictionaryprobdist method)": [[179, "nltk.probability.DictionaryProbDist.prob", false]], "prob() (nltk.probability.heldoutprobdist method)": [[179, "nltk.probability.HeldoutProbDist.prob", false]], "prob() (nltk.probability.kneserneyprobdist method)": [[179, "nltk.probability.KneserNeyProbDist.prob", false]], "prob() (nltk.probability.lidstoneprobdist method)": [[179, "nltk.probability.LidstoneProbDist.prob", false]], "prob() (nltk.probability.mleprobdist method)": [[179, "nltk.probability.MLEProbDist.prob", false]], "prob() (nltk.probability.mutableprobdist method)": [[179, "nltk.probability.MutableProbDist.prob", false]], "prob() (nltk.probability.probabilisticmixin method)": [[179, "nltk.probability.ProbabilisticMixIn.prob", false]], "prob() (nltk.probability.probdisti method)": [[179, "nltk.probability.ProbDistI.prob", false]], "prob() (nltk.probability.simplegoodturingprobdist method)": [[179, "nltk.probability.SimpleGoodTuringProbDist.prob", false]], "prob() (nltk.probability.uniformprobdist method)": [[179, "nltk.probability.UniformProbDist.prob", false]], "prob() (nltk.probability.wittenbellprobdist method)": [[179, "nltk.probability.WittenBellProbDist.prob", false]], "prob_alignment_point() (nltk.translate.ibm1.ibmmodel1 method)": [[329, "nltk.translate.ibm1.IBMModel1.prob_alignment_point", false]], "prob_alignment_point() (nltk.translate.ibm2.ibmmodel2 method)": [[330, "nltk.translate.ibm2.IBMModel2.prob_alignment_point", false]], "prob_all_alignments() (nltk.translate.ibm1.ibmmodel1 method)": [[329, "nltk.translate.ibm1.IBMModel1.prob_all_alignments", false]], "prob_all_alignments() (nltk.translate.ibm2.ibmmodel2 method)": [[330, "nltk.translate.ibm2.IBMModel2.prob_all_alignments", false]], "prob_classify() (nltk.classify.api.classifieri method)": [[31, "nltk.classify.api.ClassifierI.prob_classify", false]], "prob_classify() (nltk.classify.api.multiclassifieri method)": [[31, "nltk.classify.api.MultiClassifierI.prob_classify", false]], "prob_classify() (nltk.classify.maxent.maxentclassifier method)": [[33, "nltk.classify.maxent.MaxentClassifier.prob_classify", false]], "prob_classify() (nltk.classify.naivebayes.naivebayesclassifier method)": [[35, "nltk.classify.naivebayes.NaiveBayesClassifier.prob_classify", false]], "prob_classify_many() (nltk.classify.api.classifieri method)": [[31, "nltk.classify.api.ClassifierI.prob_classify_many", false]], "prob_classify_many() (nltk.classify.api.multiclassifieri method)": [[31, "nltk.classify.api.MultiClassifierI.prob_classify_many", false]], "prob_classify_many() (nltk.classify.scikitlearn.sklearnclassifier method)": [[38, "nltk.classify.scikitlearn.SklearnClassifier.prob_classify_many", false]], "prob_classify_many() (nltk.classify.weka.wekaclassifier method)": [[44, "nltk.classify.weka.WekaClassifier.prob_classify_many", false]], "prob_of_alignments() (nltk.translate.ibm_model.ibmmodel method)": [[334, "nltk.translate.ibm_model.IBMModel.prob_of_alignments", false]], "prob_single_quotes (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.PROB_SINGLE_QUOTES", false]], "prob_t_a_given_s() (nltk.translate.ibm1.ibmmodel1 method)": [[329, "nltk.translate.ibm1.IBMModel1.prob_t_a_given_s", false]], "prob_t_a_given_s() (nltk.translate.ibm2.ibmmodel2 method)": [[330, "nltk.translate.ibm2.IBMModel2.prob_t_a_given_s", false]], "prob_t_a_given_s() (nltk.translate.ibm3.ibmmodel3 method)": [[331, "nltk.translate.ibm3.IBMModel3.prob_t_a_given_s", false]], "prob_t_a_given_s() (nltk.translate.ibm4.ibmmodel4 method)": [[332, "nltk.translate.ibm4.IBMModel4.prob_t_a_given_s", false]], "prob_t_a_given_s() (nltk.translate.ibm5.ibmmodel5 method)": [[333, "nltk.translate.ibm5.IBMModel5.prob_t_a_given_s", false]], "prob_t_a_given_s() (nltk.translate.ibm_model.ibmmodel method)": [[334, "nltk.translate.ibm_model.IBMModel.prob_t_a_given_s", false]], "probabilisticbottomupinitrule (class in nltk.parse.pchart)": [[171, "nltk.parse.pchart.ProbabilisticBottomUpInitRule", false]], "probabilisticbottomuppredictrule (class in nltk.parse.pchart)": [[171, "nltk.parse.pchart.ProbabilisticBottomUpPredictRule", false]], "probabilisticdependencygrammar (class in nltk.grammar)": [[121, "nltk.grammar.ProbabilisticDependencyGrammar", false]], "probabilisticfundamentalrule (class in nltk.parse.pchart)": [[171, "nltk.parse.pchart.ProbabilisticFundamentalRule", false]], "probabilisticleafedge (class in nltk.parse.pchart)": [[171, "nltk.parse.pchart.ProbabilisticLeafEdge", false]], "probabilisticmixin (class in nltk.probability)": [[179, "nltk.probability.ProbabilisticMixIn", false]], "probabilisticnonprojectiveparser (class in nltk.parse.nonprojectivedependencyparser)": [[170, "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser", false]], "probabilisticproduction (class in nltk.grammar)": [[121, "nltk.grammar.ProbabilisticProduction", false]], "probabilisticprojectivedependencyparser (class in nltk.parse.projectivedependencyparser)": [[172, "nltk.parse.projectivedependencyparser.ProbabilisticProjectiveDependencyParser", false]], "probabilistictree (class in nltk.tree)": [[341, "nltk.tree.ProbabilisticTree", false]], "probabilistictree (class in nltk.tree.probabilistic)": [[346, "nltk.tree.probabilistic.ProbabilisticTree", false]], "probabilistictreeedge (class in nltk.parse.pchart)": [[171, "nltk.parse.pchart.ProbabilisticTreeEdge", false]], "probability() (nltk.tag.hmm.hiddenmarkovmodeltagger method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.probability", false]], "probdisti (class in nltk.probability)": [[179, "nltk.probability.ProbDistI", false]], "process() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.process", false]], "process_bundle() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.process_bundle", false]], "process_next_expression() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.process_next_expression", false]], "process_quoted_token() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.process_quoted_token", false]], "process_thread() (nltk.inference.discourse.drtgluereadingcommand method)": [[125, "nltk.inference.discourse.DrtGlueReadingCommand.process_thread", false]], "process_thread() (nltk.inference.discourse.readingcommand method)": [[125, "nltk.inference.discourse.ReadingCommand.process_thread", false]], "production (class in nltk.grammar)": [[121, "nltk.grammar.Production", false]], "productionlist (class in nltk.draw.cfg)": [[115, "nltk.draw.cfg.ProductionList", false]], "productions() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.productions", false]], "productions() (nltk.tree.tree method)": [[341, "nltk.tree.Tree.productions", false]], "productions() (nltk.tree.tree.tree method)": [[348, "nltk.tree.tree.Tree.productions", false]], "profile() (nltk.classify.textcat.textcat method)": [[42, "nltk.classify.textcat.TextCat.profile", false]], "progressive (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.PROGRESSIVE", false]], "progressmessage (class in nltk.downloader)": [[113, "nltk.downloader.ProgressMessage", false]], "projective_prob_parse_demo() (in module nltk.parse.projectivedependencyparser)": [[172, "nltk.parse.projectivedependencyparser.projective_prob_parse_demo", false]], "projective_rule_parse_demo() (in module nltk.parse.projectivedependencyparser)": [[172, "nltk.parse.projectivedependencyparser.projective_rule_parse_demo", false]], "projectivedependencyparser (class in nltk.parse.projectivedependencyparser)": [[172, "nltk.parse.projectivedependencyparser.ProjectiveDependencyParser", false]], "pronoun (nltk.sem.drt.drttokens attribute)": [[184, "nltk.sem.drt.DrtTokens.PRONOUN", false]], "proof() (nltk.inference.api.baseprovercommand method)": [[124, "nltk.inference.api.BaseProverCommand.proof", false]], "proof() (nltk.inference.api.provercommand method)": [[124, "nltk.inference.api.ProverCommand.proof", false]], "proof() (nltk.inference.api.provercommanddecorator method)": [[124, "nltk.inference.api.ProverCommandDecorator.proof", false]], "prop (nltk.inference.tableau.categories attribute)": [[130, "nltk.inference.tableau.Categories.PROP", false]], "propagate_semtypes() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.propagate_semtypes", false]], "propagate_semtypes() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.propagate_semtypes", false]], "propbankchaintreepointer (class in nltk.corpus.reader.propbank)": [[89, "nltk.corpus.reader.propbank.PropbankChainTreePointer", false]], "propbankcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.PropbankCorpusReader", false]], "propbankcorpusreader (class in nltk.corpus.reader.propbank)": [[89, "nltk.corpus.reader.propbank.PropbankCorpusReader", false]], "propbankinflection (class in nltk.corpus.reader.propbank)": [[89, "nltk.corpus.reader.propbank.PropbankInflection", false]], "propbankinstance (class in nltk.corpus.reader.propbank)": [[89, "nltk.corpus.reader.propbank.PropbankInstance", false]], "propbankpointer (class in nltk.corpus.reader.propbank)": [[89, "nltk.corpus.reader.propbank.PropbankPointer", false]], "propbanksplittreepointer (class in nltk.corpus.reader.propbank)": [[89, "nltk.corpus.reader.propbank.PropbankSplitTreePointer", false]], "propbanktreepointer (class in nltk.corpus.reader.propbank)": [[89, "nltk.corpus.reader.propbank.PropbankTreePointer", false]], "propdemo() (in module nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.propdemo", false]], "property_name (nltk.tbl.feature.feature attribute)": [[231, "nltk.tbl.feature.Feature.PROPERTY_NAME", false]], "prosconscorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.ProsConsCorpusReader", false]], "prosconscorpusreader (class in nltk.corpus.reader.pros_cons)": [[90, "nltk.corpus.reader.pros_cons.ProsConsCorpusReader", false]], "prove() (nltk.inference.api.baseprovercommand method)": [[124, "nltk.inference.api.BaseProverCommand.prove", false]], "prove() (nltk.inference.api.parallelproverbuildercommand method)": [[124, "nltk.inference.api.ParallelProverBuilderCommand.prove", false]], "prove() (nltk.inference.api.prover method)": [[124, "nltk.inference.api.Prover.prove", false]], "prove() (nltk.inference.api.provercommand method)": [[124, "nltk.inference.api.ProverCommand.prove", false]], "prove() (nltk.inference.api.provercommanddecorator method)": [[124, "nltk.inference.api.ProverCommandDecorator.prove", false]], "prove() (nltk.inference.resolution.resolutionprovercommand method)": [[129, "nltk.inference.resolution.ResolutionProverCommand.prove", false]], "prover (class in nltk.inference.api)": [[124, "nltk.inference.api.Prover", false]], "prover9 (class in nltk.inference.prover9)": [[128, "nltk.inference.prover9.Prover9", false]], "prover9_input() (nltk.inference.prover9.prover9 method)": [[128, "nltk.inference.prover9.Prover9.prover9_input", false]], "prover9_input() (nltk.inference.prover9.prover9parent method)": [[128, "nltk.inference.prover9.Prover9Parent.prover9_input", false]], "prover9command (class in nltk.inference.prover9)": [[128, "nltk.inference.prover9.Prover9Command", false]], "prover9commandparent (class in nltk.inference.prover9)": [[128, "nltk.inference.prover9.Prover9CommandParent", false]], "prover9exception": [[128, "nltk.inference.prover9.Prover9Exception", false]], "prover9fatalexception": [[128, "nltk.inference.prover9.Prover9FatalException", false]], "prover9limitexceededexception": [[128, "nltk.inference.prover9.Prover9LimitExceededException", false]], "prover9parent (class in nltk.inference.prover9)": [[128, "nltk.inference.prover9.Prover9Parent", false]], "provercommand (class in nltk.inference.api)": [[124, "nltk.inference.api.ProverCommand", false]], "provercommanddecorator (class in nltk.inference.api)": [[124, "nltk.inference.api.ProverCommandDecorator", false]], "proverparseerror": [[127, "nltk.inference.nonmonotonic.ProverParseError", false], [129, "nltk.inference.resolution.ProverParseError", false], [130, "nltk.inference.tableau.ProverParseError", false]], "prune() (nltk.translate.ibm5.ibmmodel5 method)": [[333, "nltk.translate.ibm5.IBMModel5.prune", false]], "pseudocode() (nltk.classify.decisiontree.decisiontreeclassifier method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.pseudocode", false]], "punc_list (nltk.sentiment.vader.vaderconstants attribute)": [[198, "nltk.sentiment.vader.VaderConstants.PUNC_LIST", false]], "punct (nltk.sem.drt.drttokens attribute)": [[184, "nltk.sem.drt.DrtTokens.PUNCT", false]], "punct (nltk.sem.linearlogic.tokens attribute)": [[190, "nltk.sem.linearlogic.Tokens.PUNCT", false]], "punct (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.PUNCT", false]], "punct (nltk.tokenize.nist.nisttokenizer attribute)": [[308, "nltk.tokenize.nist.NISTTokenizer.PUNCT", false]], "punct_1 (nltk.tokenize.nist.nisttokenizer attribute)": [[308, "nltk.tokenize.nist.NISTTokenizer.PUNCT_1", false]], "punct_2 (nltk.tokenize.nist.nisttokenizer attribute)": [[308, "nltk.tokenize.nist.NISTTokenizer.PUNCT_2", false]], "punct_regex (nltk.tokenize.nist.nisttokenizer attribute)": [[308, "nltk.tokenize.nist.NISTTokenizer.punct_regex", false]], "punctuation (nltk.tokenize.destructive.nltkwordtokenizer attribute)": [[305, "nltk.tokenize.destructive.NLTKWordTokenizer.PUNCTUATION", false]], "punctuation (nltk.tokenize.punkt.punktsentencetokenizer attribute)": [[309, "nltk.tokenize.punkt.PunktSentenceTokenizer.PUNCTUATION", false]], "punctuation (nltk.tokenize.treebank.treebankworddetokenizer attribute)": [[319, "nltk.tokenize.treebank.TreebankWordDetokenizer.PUNCTUATION", false]], "punctuation (nltk.tokenize.treebank.treebankwordtokenizer attribute)": [[319, "nltk.tokenize.treebank.TreebankWordTokenizer.PUNCTUATION", false]], "punkt_debug_decisions() (nltk.test.unit.test_tokenize.testtokenize method)": [[284, "nltk.test.unit.test_tokenize.TestTokenize.punkt_debug_decisions", false]], "punktbaseclass (class in nltk.tokenize.punkt)": [[309, "nltk.tokenize.punkt.PunktBaseClass", false]], "punktdecoder (class in nltk.tabdata)": [[212, "nltk.tabdata.PunktDecoder", false]], "punktlanguagevars (class in nltk.tokenize.punkt)": [[309, "nltk.tokenize.punkt.PunktLanguageVars", false]], "punktparameters (class in nltk.tokenize.punkt)": [[309, "nltk.tokenize.punkt.PunktParameters", false]], "punktsentencetokenizer (class in nltk.tokenize.punkt)": [[309, "nltk.tokenize.punkt.PunktSentenceTokenizer", false]], "punkttoken (class in nltk.tokenize.punkt)": [[309, "nltk.tokenize.punkt.PunktToken", false]], "punkttokenizer (class in nltk.tokenize.punkt)": [[309, "nltk.tokenize.punkt.PunktTokenizer", false]], "punkttrainer (class in nltk.tokenize.punkt)": [[309, "nltk.tokenize.punkt.PunktTrainer", false]], "pup_number (nltk.tokenize.nist.nisttokenizer attribute)": [[308, "nltk.tokenize.nist.NISTTokenizer.pup_number", false]], "pup_punct (nltk.tokenize.nist.nisttokenizer attribute)": [[308, "nltk.tokenize.nist.NISTTokenizer.pup_punct", false]], "pup_symbol (nltk.tokenize.nist.nisttokenizer attribute)": [[308, "nltk.tokenize.nist.NISTTokenizer.pup_symbol", false]], "purge() (nltk.sem.evaluate.assignment method)": [[186, "nltk.sem.evaluate.Assignment.purge", false]], "put() (nltk.inference.tableau.agenda method)": [[130, "nltk.inference.tableau.Agenda.put", false]], "put_all() (nltk.inference.tableau.agenda method)": [[130, "nltk.inference.tableau.Agenda.put_all", false]], "put_atoms() (nltk.inference.tableau.agenda method)": [[130, "nltk.inference.tableau.Agenda.put_atoms", false]], "py3_data() (in module nltk.compat)": [[54, "nltk.compat.py3_data", false]], "pytestmark (nltk.test.unit.test_corpora.testmwappdb attribute)": [[262, "nltk.test.unit.test_corpora.TestMWAPPDB.pytestmark", false]], "pytestmark (nltk.test.unit.test_corpora.testptb attribute)": [[262, "nltk.test.unit.test_corpora.TestPTB.pytestmark", false]], "q2name() (in module nltk.langnames)": [[133, "nltk.langnames.q2name", false]], "q2tag() (in module nltk.langnames)": [[133, "nltk.langnames.q2tag", false]], "quadgramassocmeasures (class in nltk.metrics.association)": [[146, "nltk.metrics.association.QuadgramAssocMeasures", false]], "quadgramcollocationfinder (class in nltk.collocations)": [[53, "nltk.collocations.QuadgramCollocationFinder", false]], "quality() (nltk.corpus.reader.panlex_lite.meaning method)": [[84, "nltk.corpus.reader.panlex_lite.Meaning.quality", false]], "quantifiedexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.QuantifiedExpression", false]], "quants (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.QUANTS", false]], "query (class in nltk.twitter.twitterclient)": [[355, "nltk.twitter.twitterclient.Query", false]], "quick() (in module nltk.misc.sort)": [[157, "nltk.misc.sort.quick", false]], "r() (in module nltk.metrics.aline)": [[145, "nltk.metrics.aline.R", false]], "r_nr() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.r_Nr", false]], "raise_unorderable_types() (in module nltk.internals)": [[131, "nltk.internals.raise_unorderable_types", false]], "random_sample() (nltk.tag.hmm.hiddenmarkovmodeltagger method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.random_sample", false]], "randomchartparser (class in nltk.parse.pchart)": [[171, "nltk.parse.pchart.RandomChartParser", false]], "range() (nltk.translate.api.alignment method)": [[323, "nltk.translate.api.Alignment.range", false]], "range_re (nltk.featstruct.rangefeature attribute)": [[120, "nltk.featstruct.RangeFeature.RANGE_RE", false]], "rangefeature (class in nltk.featstruct)": [[120, "nltk.featstruct.RangeFeature", false]], "ranges (nltk.tokenize.util.cjkchars attribute)": [[320, "nltk.tokenize.util.CJKChars.ranges", false]], "ranks_from_scores() (in module nltk.metrics.spearman)": [[152, "nltk.metrics.spearman.ranks_from_scores", false]], "ranks_from_sequence() (in module nltk.metrics.spearman)": [[152, "nltk.metrics.spearman.ranks_from_sequence", false]], "ratio (nltk.draw.util.ovalwidget attribute)": [[119, "nltk.draw.util.OvalWidget.RATIO", false]], "raw (nltk.corpus.reader.markdown.markdownblock property)": [[78, "nltk.corpus.reader.markdown.MarkdownBlock.raw", false]], "raw() (nltk.corpus.reader.api.categorizedcorpusreader method)": [[59, "nltk.corpus.reader.api.CategorizedCorpusReader.raw", false]], "raw() (nltk.corpus.reader.api.corpusreader method)": [[59, "nltk.corpus.reader.api.CorpusReader.raw", false]], "raw() (nltk.corpus.reader.categorizedcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedCorpusReader.raw", false]], "raw() (nltk.corpus.reader.corpusreader method)": [[57, "nltk.corpus.reader.CorpusReader.raw", false]], "raw() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.raw", false]], "raw() (nltk.corpus.reader.nkjp.nkjpcorpusreader method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.raw", false]], "raw() (nltk.corpus.reader.nkjpcorpusreader method)": [[57, "nltk.corpus.reader.NKJPCorpusReader.raw", false]], "raw_fields() (nltk.toolbox.standardformat method)": [[321, "nltk.toolbox.StandardFormat.raw_fields", false]], "raw_freq() (nltk.metrics.association.ngramassocmeasures static method)": [[146, "nltk.metrics.association.NgramAssocMeasures.raw_freq", false]], "raw_mode (nltk.corpus.reader.nkjp.nkjpcorpus_text_view attribute)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Text_View.RAW_MODE", false]], "raw_mode (nltk.corpus.reader.nkjp.nkjpcorpusreader attribute)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.RAW_MODE", false]], "raw_mode (nltk.corpus.reader.nkjpcorpusreader attribute)": [[57, "nltk.corpus.reader.NKJPCorpusReader.RAW_MODE", false]], "raw_parse() (nltk.parse.corenlp.genericcorenlpparser method)": [[163, "nltk.parse.corenlp.GenericCoreNLPParser.raw_parse", false]], "raw_parse() (nltk.parse.stanford.genericstanfordparser method)": [[175, "nltk.parse.stanford.GenericStanfordParser.raw_parse", false]], "raw_parse_sents() (nltk.parse.corenlp.genericcorenlpparser method)": [[163, "nltk.parse.corenlp.GenericCoreNLPParser.raw_parse_sents", false]], "raw_parse_sents() (nltk.parse.stanford.genericstanfordparser method)": [[175, "nltk.parse.stanford.GenericStanfordParser.raw_parse_sents", false]], "raw_tag_sents() (nltk.parse.corenlp.genericcorenlpparser method)": [[163, "nltk.parse.corenlp.GenericCoreNLPParser.raw_tag_sents", false]], "re_boundary_realignment (nltk.tokenize.punkt.punktlanguagevars attribute)": [[309, "nltk.tokenize.punkt.PunktLanguageVars.re_boundary_realignment", false]], "re_show() (in module nltk.util)": [[357, "nltk.util.re_show", false]], "read() (nltk.data.openondemandzipfile method)": [[111, "nltk.data.OpenOnDemandZipFile.read", false]], "read() (nltk.data.seekableunicodestreamreader method)": [[111, "nltk.data.SeekableUnicodeStreamReader.read", false]], "read_alignedsent_block() (in module nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.read_alignedsent_block", false]], "read_app_value() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.read_app_value", false]], "read_blankline_block() (in module nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.read_blankline_block", false]], "read_block() (nltk.corpus.reader.aligned.alignedsentcorpusview method)": [[58, "nltk.corpus.reader.aligned.AlignedSentCorpusView.read_block", false]], "read_block() (nltk.corpus.reader.chasen.chasencorpusview method)": [[64, "nltk.corpus.reader.chasen.ChasenCorpusView.read_block", false]], "read_block() (nltk.corpus.reader.chunked.chunkedcorpusview method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusView.read_block", false]], "read_block() (nltk.corpus.reader.dependency.dependencycorpusview method)": [[71, "nltk.corpus.reader.dependency.DependencyCorpusView.read_block", false]], "read_block() (nltk.corpus.reader.indian.indiancorpusview method)": [[74, "nltk.corpus.reader.indian.IndianCorpusView.read_block", false]], "read_block() (nltk.corpus.reader.ipipan.ipipancorpusview method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusView.read_block", false]], "read_block() (nltk.corpus.reader.mte.mtecorpusview method)": [[79, "nltk.corpus.reader.mte.MTECorpusView.read_block", false]], "read_block() (nltk.corpus.reader.nkjp.nkjpcorpus_text_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Text_View.read_block", false]], "read_block() (nltk.corpus.reader.pl196x.teicorpusview method)": [[86, "nltk.corpus.reader.pl196x.TEICorpusView.read_block", false]], "read_block() (nltk.corpus.reader.senseval.sensevalcorpusview method)": [[94, "nltk.corpus.reader.senseval.SensevalCorpusView.read_block", false]], "read_block() (nltk.corpus.reader.tagged.taggedcorpusview method)": [[99, "nltk.corpus.reader.tagged.TaggedCorpusView.read_block", false]], "read_block() (nltk.corpus.reader.teicorpusview method)": [[57, "nltk.corpus.reader.TEICorpusView.read_block", false]], "read_block() (nltk.corpus.reader.util.streambackedcorpusview method)": [[104, "nltk.corpus.reader.util.StreamBackedCorpusView.read_block", false]], "read_block() (nltk.corpus.reader.xmldocs.xmlcorpusview method)": [[108, "nltk.corpus.reader.xmldocs.XMLCorpusView.read_block", false]], "read_cmudict_block() (in module nltk.corpus.reader.cmudict)": [[67, "nltk.corpus.reader.cmudict.read_cmudict_block", false]], "read_depgraph() (nltk.sem.lfg.fstructure static method)": [[189, "nltk.sem.lfg.FStructure.read_depgraph", false]], "read_file() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.read_file", false]], "read_fstruct_value() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.read_fstruct_value", false]], "read_grammar() (in module nltk.grammar)": [[121, "nltk.grammar.read_grammar", false]], "read_int() (in module nltk.internals)": [[131, "nltk.internals.read_int", false]], "read_int_value() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.read_int_value", false]], "read_line_block() (in module nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.read_line_block", false]], "read_logic() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.read_logic", false]], "read_logic_value() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.read_logic_value", false]], "read_number() (in module nltk.internals)": [[131, "nltk.internals.read_number", false]], "read_parse_blankline_block() (in module nltk.corpus.reader.markdown)": [[78, "nltk.corpus.reader.markdown.read_parse_blankline_block", false]], "read_partial() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.read_partial", false]], "read_regexp_block() (in module nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.read_regexp_block", false]], "read_rule() (nltk.stem.rslp.rslpstemmer method)": [[208, "nltk.stem.rslp.RSLPStemmer.read_rule", false]], "read_sents() (in module nltk.sem.util)": [[194, "nltk.sem.util.read_sents", false]], "read_set_value() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.read_set_value", false]], "read_sexpr_block() (in module nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.read_sexpr_block", false]], "read_str() (in module nltk.internals)": [[131, "nltk.internals.read_str", false]], "read_str_value() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.read_str_value", false]], "read_sym_value() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.read_sym_value", false]], "read_timit_block() (in module nltk.corpus.reader.timit)": [[100, "nltk.corpus.reader.timit.read_timit_block", false]], "read_tuple_value() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.read_tuple_value", false]], "read_type() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.read_type", false]], "read_valuation() (in module nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.read_valuation", false]], "read_value() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.read_value", false]], "read_value() (nltk.featstruct.feature method)": [[120, "nltk.featstruct.Feature.read_value", false]], "read_value() (nltk.featstruct.rangefeature method)": [[120, "nltk.featstruct.RangeFeature.read_value", false]], "read_value() (nltk.featstruct.slashfeature method)": [[120, "nltk.featstruct.SlashFeature.read_value", false]], "read_var_value() (nltk.featstruct.featstructreader method)": [[120, "nltk.featstruct.FeatStructReader.read_var_value", false]], "read_whitespace_block() (in module nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.read_whitespace_block", false]], "read_wordpunct_block() (in module nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.read_wordpunct_block", false]], "readability() (nltk.text.text method)": [[300, "nltk.text.Text.readability", false]], "readerror": [[131, "nltk.internals.ReadError", false]], "readingcommand (class in nltk.inference.discourse)": [[125, "nltk.inference.discourse.ReadingCommand", false]], "readings() (nltk.inference.discourse.discoursetester method)": [[125, "nltk.inference.discourse.DiscourseTester.readings", false]], "readline() (nltk.data.seekableunicodestreamreader method)": [[111, "nltk.data.SeekableUnicodeStreamReader.readline", false]], "readlines() (nltk.data.seekableunicodestreamreader method)": [[111, "nltk.data.SeekableUnicodeStreamReader.readlines", false]], "readme() (nltk.corpus.reader.api.corpusreader method)": [[59, "nltk.corpus.reader.api.CorpusReader.readme", false]], "readme() (nltk.corpus.reader.corpusreader method)": [[57, "nltk.corpus.reader.CorpusReader.readme", false]], "readme() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.readme", false]], "readme() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.readme", false]], "recall() (in module nltk.metrics.scores)": [[150, "nltk.metrics.scores.recall", false]], "recall() (nltk.chunk.util.chunkscore method)": [[29, "nltk.chunk.util.ChunkScore.recall", false]], "recall() (nltk.metrics.confusionmatrix.confusionmatrix method)": [[147, "nltk.metrics.confusionmatrix.ConfusionMatrix.recall", false]], "recall() (nltk.tag.api.taggeri method)": [[214, "nltk.tag.api.TaggerI.recall", false]], "recursivedescentparser (class in nltk.parse.recursivedescent)": [[173, "nltk.parse.recursivedescent.RecursiveDescentParser", false]], "redirect_arcs() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.redirect_arcs", false]], "reduce (nltk.parse.transitionparser.transition attribute)": [[176, "nltk.parse.transitionparser.Transition.REDUCE", false]], "reduce() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.reduce", false]], "reduce() (nltk.parse.transitionparser.transition method)": [[176, "nltk.parse.transitionparser.Transition.reduce", false]], "reduce_lengthening() (in module nltk.tokenize.casual)": [[304, "nltk.tokenize.casual.reduce_lengthening", false]], "reducible_productions() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.reducible_productions", false]], "reference (nltk.test.unit.translate.test_meteor.testmeteor attribute)": [[297, "nltk.test.unit.translate.test_meteor.TestMETEOR.reference", false]], "referenced_labels() (nltk.sem.boxer.boxerprop method)": [[181, "nltk.sem.boxer.BoxerProp.referenced_labels", false]], "refine() (nltk.classify.decisiontree.decisiontreeclassifier method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.refine", false]], "regex_remove_punctuation (nltk.sentiment.vader.vaderconstants attribute)": [[198, "nltk.sentiment.vader.VaderConstants.REGEX_REMOVE_PUNCTUATION", false]], "regexp_span_tokenize() (in module nltk.tokenize.util)": [[320, "nltk.tokenize.util.regexp_span_tokenize", false]], "regexp_tokenize() (in module nltk.tokenize.regexp)": [[310, "nltk.tokenize.regexp.regexp_tokenize", false]], "regexpchunkparser (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.RegexpChunkParser", false]], "regexpchunkrule (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.RegexpChunkRule", false]], "regexpparser (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.RegexpParser", false]], "regexpstemmer (class in nltk.stem.regexp)": [[207, "nltk.stem.regexp.RegexpStemmer", false]], "regexptagger (class in nltk.tag.sequential)": [[223, "nltk.tag.sequential.RegexpTagger", false]], "regexptokenizer (class in nltk.tokenize.regexp)": [[310, "nltk.tokenize.regexp.RegexpTokenizer", false]], "register() (nltk.twitter.twitterclient.query method)": [[355, "nltk.twitter.twitterclient.Query.register", false]], "register() (nltk.twitter.twitterclient.streamer method)": [[355, "nltk.twitter.twitterclient.Streamer.register", false]], "register_tag() (in module nltk.jsontags)": [[132, "nltk.jsontags.register_tag", false]], "remaining_text() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.remaining_text", false]], "remaining_text() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.remaining_text", false]], "remove() (nltk.draw.util.mutableoptionmenu method)": [[119, "nltk.draw.util.MutableOptionMenu.remove", false]], "remove() (nltk.featstruct.featlist method)": [[120, "nltk.featstruct.FeatList.remove", false]], "remove() (nltk.tree.immutable.immutabletree method)": [[342, "nltk.tree.immutable.ImmutableTree.remove", false]], "remove() (nltk.tree.immutabletree method)": [[341, "nltk.tree.ImmutableTree.remove", false]], "remove_blanks() (in module nltk.toolbox)": [[321, "nltk.toolbox.remove_blanks", false]], "remove_by_address() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.remove_by_address", false]], "remove_callback() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.remove_callback", false]], "remove_child() (nltk.draw.tree.treesegmentwidget method)": [[118, "nltk.draw.tree.TreeSegmentWidget.remove_child", false]], "remove_child() (nltk.draw.util.scrollwatcherwidget method)": [[119, "nltk.draw.util.ScrollWatcherWidget.remove_child", false]], "remove_child() (nltk.draw.util.sequencewidget method)": [[119, "nltk.draw.util.SequenceWidget.remove_child", false]], "remove_child() (nltk.draw.util.stackwidget method)": [[119, "nltk.draw.util.StackWidget.remove_child", false]], "remove_choice() (nltk.corpus.reader.nkjp.nkjpcorpus_segmentation_view method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Segmentation_View.remove_choice", false]], "remove_handles() (in module nltk.tokenize.casual)": [[304, "nltk.tokenize.casual.remove_handles", false]], "remove_preprocessed_file() (nltk.corpus.reader.nkjp.xml_tool method)": [[80, "nltk.corpus.reader.nkjp.XML_Tool.remove_preprocessed_file", false]], "remove_punctuation() (nltk.classify.textcat.textcat method)": [[42, "nltk.classify.textcat.TextCat.remove_punctuation", false]], "remove_unitary_rules() (nltk.grammar.cfg class method)": [[121, "nltk.grammar.CFG.remove_unitary_rules", false]], "remove_variables() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.remove_variables", false]], "remove_widget() (nltk.draw.util.canvasframe method)": [[119, "nltk.draw.util.CanvasFrame.remove_widget", false]], "rename_variables() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.rename_variables", false]], "renumber_sentences() (nltk.sem.boxer.abstractboxerdrs method)": [[181, "nltk.sem.boxer.AbstractBoxerDrs.renumber_sentences", false]], "renumber_sentences() (nltk.sem.boxer.boxercard method)": [[181, "nltk.sem.boxer.BoxerCard.renumber_sentences", false]], "renumber_sentences() (nltk.sem.boxer.boxerdrs method)": [[181, "nltk.sem.boxer.BoxerDrs.renumber_sentences", false]], "renumber_sentences() (nltk.sem.boxer.boxereq method)": [[181, "nltk.sem.boxer.BoxerEq.renumber_sentences", false]], "renumber_sentences() (nltk.sem.boxer.boxernamed method)": [[181, "nltk.sem.boxer.BoxerNamed.renumber_sentences", false]], "renumber_sentences() (nltk.sem.boxer.boxernot method)": [[181, "nltk.sem.boxer.BoxerNot.renumber_sentences", false]], "renumber_sentences() (nltk.sem.boxer.boxeror method)": [[181, "nltk.sem.boxer.BoxerOr.renumber_sentences", false]], "renumber_sentences() (nltk.sem.boxer.boxerpred method)": [[181, "nltk.sem.boxer.BoxerPred.renumber_sentences", false]], "renumber_sentences() (nltk.sem.boxer.boxerprop method)": [[181, "nltk.sem.boxer.BoxerProp.renumber_sentences", false]], "renumber_sentences() (nltk.sem.boxer.boxerrel method)": [[181, "nltk.sem.boxer.BoxerRel.renumber_sentences", false]], "renumber_sentences() (nltk.sem.boxer.boxerwhq method)": [[181, "nltk.sem.boxer.BoxerWhq.renumber_sentences", false]], "repl_xx (nltk.stem.cistem.cistem attribute)": [[203, "nltk.stem.cistem.Cistem.repl_xx", false]], "repl_xx_back (nltk.stem.cistem.cistem attribute)": [[203, "nltk.stem.cistem.Cistem.repl_xx_back", false]], "replace() (nltk.inference.resolution.clause method)": [[129, "nltk.inference.resolution.Clause.replace", false]], "replace() (nltk.sem.drt.drs method)": [[184, "nltk.sem.drt.DRS.replace", false]], "replace() (nltk.sem.drt.drtconcatenation method)": [[184, "nltk.sem.drt.DrtConcatenation.replace", false]], "replace() (nltk.sem.drt.drtproposition method)": [[184, "nltk.sem.drt.DrtProposition.replace", false]], "replace() (nltk.sem.drt.possibleantecedents method)": [[184, "nltk.sem.drt.PossibleAntecedents.replace", false]], "replace() (nltk.sem.logic.abstractvariableexpression method)": [[191, "nltk.sem.logic.AbstractVariableExpression.replace", false]], "replace() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.replace", false]], "replace() (nltk.sem.logic.variablebinderexpression method)": [[191, "nltk.sem.logic.VariableBinderExpression.replace", false]], "replace_all() (nltk.inference.tableau.agenda method)": [[130, "nltk.inference.tableau.Agenda.replace_all", false]], "replace_back() (nltk.stem.cistem.cistem static method)": [[203, "nltk.stem.cistem.Cistem.replace_back", false]], "replace_child() (nltk.draw.tree.treesegmentwidget method)": [[118, "nltk.draw.tree.TreeSegmentWidget.replace_child", false]], "replace_child() (nltk.draw.util.sequencewidget method)": [[119, "nltk.draw.util.SequenceWidget.replace_child", false]], "replace_child() (nltk.draw.util.stackwidget method)": [[119, "nltk.draw.util.StackWidget.replace_child", false]], "replace_quants() (nltk.inference.nonmonotonic.closeddomainprover method)": [[127, "nltk.inference.nonmonotonic.ClosedDomainProver.replace_quants", false]], "replace_to() (nltk.stem.cistem.cistem static method)": [[203, "nltk.stem.cistem.Cistem.replace_to", false]], "replacement_tag (nltk.tbl.rule.tagrule attribute)": [[232, "nltk.tbl.rule.TagRule.replacement_tag", false]], "repptokenizer (class in nltk.tokenize.repp)": [[311, "nltk.tokenize.repp.ReppTokenizer", false]], "res() (nltk.ccg.api.functionalcategory method)": [[13, "nltk.ccg.api.FunctionalCategory.res", false]], "res_similarity() (in module nltk.corpus.reader.wordnet)": [[107, "nltk.corpus.reader.wordnet.res_similarity", false]], "res_similarity() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.res_similarity", false]], "res_similarity() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.res_similarity", false]], "res_similarity() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.res_similarity", false]], "reset_cache() (nltk.tag.hmm.hiddenmarkovmodeltagger method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.reset_cache", false]], "reset_id() (nltk.ccg.api.ccgvar class method)": [[13, "nltk.ccg.api.CCGVar.reset_id", false]], "reset_probabilities() (nltk.translate.ibm3.ibmmodel3 method)": [[331, "nltk.translate.ibm3.IBMModel3.reset_probabilities", false]], "reset_probabilities() (nltk.translate.ibm4.ibmmodel4 method)": [[332, "nltk.translate.ibm4.IBMModel4.reset_probabilities", false]], "reset_probabilities() (nltk.translate.ibm5.ibmmodel5 method)": [[333, "nltk.translate.ibm5.IBMModel5.reset_probabilities", false]], "reset_probabilities() (nltk.translate.ibm_model.ibmmodel method)": [[334, "nltk.translate.ibm_model.IBMModel.reset_probabilities", false]], "reset_workspace() (nltk.draw.cfg.cfgdemo method)": [[115, "nltk.draw.cfg.CFGDemo.reset_workspace", false]], "resize() (nltk.draw.tree.treeview method)": [[118, "nltk.draw.tree.TreeView.resize", false]], "resize() (nltk.sem.drt_glue_demo.drtgluedemo method)": [[185, "nltk.sem.drt_glue_demo.DrtGlueDemo.resize", false]], "resolution_test() (in module nltk.inference.resolution)": [[129, "nltk.inference.resolution.resolution_test", false]], "resolutionprover (class in nltk.inference.resolution)": [[129, "nltk.inference.resolution.ResolutionProver", false]], "resolutionprovercommand (class in nltk.inference.resolution)": [[129, "nltk.inference.resolution.ResolutionProverCommand", false]], "resolve() (nltk.sem.logic.anytype method)": [[191, "nltk.sem.logic.AnyType.resolve", false]], "resolve() (nltk.sem.logic.basictype method)": [[191, "nltk.sem.logic.BasicType.resolve", false]], "resolve() (nltk.sem.logic.complextype method)": [[191, "nltk.sem.logic.ComplexType.resolve", false]], "resolve_anaphora() (in module nltk.sem.drt)": [[184, "nltk.sem.drt.resolve_anaphora", false]], "resolve_anaphora() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.resolve_anaphora", false]], "respond() (nltk.chat.util.chat method)": [[23, "nltk.chat.util.Chat.respond", false]], "resps (nltk.corpus.reader.bnc.bncwordview attribute)": [[61, "nltk.corpus.reader.bnc.BNCWordView.resps", false]], "restrs() (nltk.ccg.api.direction method)": [[13, "nltk.ccg.api.Direction.restrs", false]], "restrs() (nltk.ccg.api.primitivecategory method)": [[13, "nltk.ccg.api.PrimitiveCategory.restrs", false]], "result (nltk.inference.api.theoremtoolthread property)": [[124, "nltk.inference.api.TheoremToolThread.result", false]], "retract_assumptions() (nltk.inference.api.basetheoremtoolcommand method)": [[124, "nltk.inference.api.BaseTheoremToolCommand.retract_assumptions", false]], "retract_assumptions() (nltk.inference.api.theoremtoolcommand method)": [[124, "nltk.inference.api.TheoremToolCommand.retract_assumptions", false]], "retract_assumptions() (nltk.inference.api.theoremtoolcommanddecorator method)": [[124, "nltk.inference.api.TheoremToolCommandDecorator.retract_assumptions", false]], "retract_bindings() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.retract_bindings", false]], "retract_sentence() (nltk.inference.discourse.discoursetester method)": [[125, "nltk.inference.discourse.DiscourseTester.retract_sentence", false]], "retrieve() (in module nltk.data)": [[111, "nltk.data.retrieve", false]], "reverse() (nltk.featstruct.featlist method)": [[120, "nltk.featstruct.FeatList.reverse", false]], "reverse() (nltk.tree.immutable.immutabletree method)": [[342, "nltk.tree.immutable.ImmutableTree.reverse", false]], "reverse() (nltk.tree.immutabletree method)": [[341, "nltk.tree.ImmutableTree.reverse", false]], "review (class in nltk.corpus.reader.reviews)": [[91, "nltk.corpus.reader.reviews.Review", false]], "reviewline (class in nltk.corpus.reader.reviews)": [[91, "nltk.corpus.reader.reviews.ReviewLine", false]], "reviews() (nltk.corpus.reader.reviews.reviewscorpusreader method)": [[91, "nltk.corpus.reader.reviews.ReviewsCorpusReader.reviews", false]], "reviews() (nltk.corpus.reader.reviewscorpusreader method)": [[57, "nltk.corpus.reader.ReviewsCorpusReader.reviews", false]], "reviewscorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.ReviewsCorpusReader", false]], "reviewscorpusreader (class in nltk.corpus.reader.reviews)": [[91, "nltk.corpus.reader.reviews.ReviewsCorpusReader", false]], "revword() (in module nltk.misc.wordfinder)": [[158, "nltk.misc.wordfinder.revword", false]], "rhs() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.rhs", false]], "rhs() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.rhs", false]], "rhs() (nltk.grammar.production method)": [[121, "nltk.grammar.Production.rhs", false]], "rhs() (nltk.parse.chart.edgei method)": [[162, "nltk.parse.chart.EdgeI.rhs", false]], "rhs() (nltk.parse.chart.leafedge method)": [[162, "nltk.parse.chart.LeafEdge.rhs", false]], "rhs() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.rhs", false]], "right_arc (nltk.parse.transitionparser.transition attribute)": [[176, "nltk.parse.transitionparser.Transition.RIGHT_ARC", false]], "right_arc() (nltk.parse.transitionparser.transition method)": [[176, "nltk.parse.transitionparser.Transition.right_arc", false]], "right_children() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.right_children", false]], "right_sibling() (nltk.tree.parented.parentedtree method)": [[343, "nltk.tree.parented.ParentedTree.right_sibling", false]], "right_sibling() (nltk.tree.parentedtree method)": [[341, "nltk.tree.ParentedTree.right_sibling", false]], "right_siblings() (nltk.tree.multiparentedtree method)": [[341, "nltk.tree.MultiParentedTree.right_siblings", false]], "right_siblings() (nltk.tree.parented.multiparentedtree method)": [[343, "nltk.tree.parented.MultiParentedTree.right_siblings", false]], "rm_nl() (in module nltk.tabdata)": [[212, "nltk.tabdata.rm_nl", false]], "roles_demo() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.roles_demo", false]], "roleset (nltk.corpus.reader.nombank.nombankinstance property)": [[81, "nltk.corpus.reader.nombank.NombankInstance.roleset", false]], "roleset (nltk.corpus.reader.propbank.propbankinstance attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.roleset", false]], "roleset() (nltk.corpus.reader.nombank.nombankcorpusreader method)": [[81, "nltk.corpus.reader.nombank.NombankCorpusReader.roleset", false]], "roleset() (nltk.corpus.reader.nombankcorpusreader method)": [[57, "nltk.corpus.reader.NombankCorpusReader.roleset", false]], "roleset() (nltk.corpus.reader.propbank.propbankcorpusreader method)": [[89, "nltk.corpus.reader.propbank.PropbankCorpusReader.roleset", false]], "roleset() (nltk.corpus.reader.propbankcorpusreader method)": [[57, "nltk.corpus.reader.PropbankCorpusReader.roleset", false]], "rolesets() (nltk.corpus.reader.nombank.nombankcorpusreader method)": [[81, "nltk.corpus.reader.nombank.NombankCorpusReader.rolesets", false]], "rolesets() (nltk.corpus.reader.nombankcorpusreader method)": [[57, "nltk.corpus.reader.NombankCorpusReader.rolesets", false]], "rolesets() (nltk.corpus.reader.propbank.propbankcorpusreader method)": [[89, "nltk.corpus.reader.propbank.PropbankCorpusReader.rolesets", false]], "rolesets() (nltk.corpus.reader.propbankcorpusreader method)": [[57, "nltk.corpus.reader.PropbankCorpusReader.rolesets", false]], "romanianstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.RomanianStemmer", false]], "root (nltk.corpus.reader.api.corpusreader property)": [[59, "nltk.corpus.reader.api.CorpusReader.root", false]], "root (nltk.corpus.reader.corpusreader property)": [[57, "nltk.corpus.reader.CorpusReader.root", false]], "root() (nltk.tree.parented.parentedtree method)": [[343, "nltk.tree.parented.ParentedTree.root", false]], "root() (nltk.tree.parentedtree method)": [[341, "nltk.tree.ParentedTree.root", false]], "root_hypernyms() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.root_hypernyms", false]], "root_semrep() (in module nltk.sem.util)": [[194, "nltk.sem.util.root_semrep", false]], "roots() (nltk.tree.multiparentedtree method)": [[341, "nltk.tree.MultiParentedTree.roots", false]], "roots() (nltk.tree.parented.multiparentedtree method)": [[343, "nltk.tree.parented.MultiParentedTree.roots", false]], "rowconfig() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.rowconfig", false]], "rowconfig() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.rowconfig", false]], "rowconfigure() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.rowconfigure", false]], "rowconfigure() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.rowconfigure", false]], "rslpstemmer (class in nltk.stem.rslp)": [[208, "nltk.stem.rslp.RSLPStemmer", false]], "rstrip (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.RSTRIP", false]], "rte_classifier() (in module nltk.classify.rte_classify)": [[37, "nltk.classify.rte_classify.rte_classifier", false]], "rte_features() (in module nltk.classify.rte_classify)": [[37, "nltk.classify.rte_classify.rte_features", false]], "rte_featurize() (in module nltk.classify.rte_classify)": [[37, "nltk.classify.rte_classify.rte_featurize", false]], "rtecorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.RTECorpusReader", false]], "rtecorpusreader (class in nltk.corpus.reader.rte)": [[92, "nltk.corpus.reader.rte.RTECorpusReader", false]], "rtefeatureextractor (class in nltk.classify.rte_classify)": [[37, "nltk.classify.rte_classify.RTEFeatureExtractor", false]], "rtepair (class in nltk.corpus.reader.rte)": [[92, "nltk.corpus.reader.rte.RTEPair", false]], "rtuple() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.rtuple", false]], "rude_chat() (in module nltk.chat.rude)": [[21, "nltk.chat.rude.rude_chat", false]], "rule (class in nltk.tbl.rule)": [[232, "nltk.tbl.rule.Rule", false]], "rule() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.rule", false]], "rule_based_demo() (in module nltk.parse.nonprojectivedependencyparser)": [[170, "nltk.parse.nonprojectivedependencyparser.rule_based_demo", false]], "rules() (nltk.chunk.regexp.regexpchunkparser method)": [[28, "nltk.chunk.regexp.RegexpChunkParser.rules", false]], "rules() (nltk.tag.brill.brilltagger method)": [[215, "nltk.tag.brill.BrillTagger.rules", false]], "run() (nltk.downloader.downloadershell method)": [[113, "nltk.downloader.DownloaderShell.run", false]], "run() (nltk.inference.api.theoremtoolthread method)": [[124, "nltk.inference.api.TheoremToolThread.run", false]], "run() (nltk.parse.util.testgrammar method)": [[177, "nltk.parse.util.TestGrammar.run", false]], "run_profile() (in module nltk.parse.featurechart)": [[167, "nltk.parse.featurechart.run_profile", false]], "russianstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.RussianStemmer", false]], "s() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.S", false]], "s_retrieve() (nltk.sem.cooper_storage.cooperstore method)": [[183, "nltk.sem.cooper_storage.CooperStore.s_retrieve", false]], "safeappend() (nltk.sem.lfg.fstructure method)": [[189, "nltk.sem.lfg.FStructure.safeappend", false]], "sample() (nltk.translate.ibm5.ibmmodel5 method)": [[333, "nltk.translate.ibm5.IBMModel5.sample", false]], "sample() (nltk.translate.ibm_model.ibmmodel method)": [[334, "nltk.translate.ibm_model.IBMModel.sample", false]], "sample() (nltk.twitter.twitterclient.streamer method)": [[355, "nltk.twitter.twitterclient.Streamer.sample", false]], "samples() (nltk.probability.crossvalidationprobdist method)": [[179, "nltk.probability.CrossValidationProbDist.samples", false]], "samples() (nltk.probability.dictionaryprobdist method)": [[179, "nltk.probability.DictionaryProbDist.samples", false]], "samples() (nltk.probability.heldoutprobdist method)": [[179, "nltk.probability.HeldoutProbDist.samples", false]], "samples() (nltk.probability.kneserneyprobdist method)": [[179, "nltk.probability.KneserNeyProbDist.samples", false]], "samples() (nltk.probability.lidstoneprobdist method)": [[179, "nltk.probability.LidstoneProbDist.samples", false]], "samples() (nltk.probability.mleprobdist method)": [[179, "nltk.probability.MLEProbDist.samples", false]], "samples() (nltk.probability.mutableprobdist method)": [[179, "nltk.probability.MutableProbDist.samples", false]], "samples() (nltk.probability.probdisti method)": [[179, "nltk.probability.ProbDistI.samples", false]], "samples() (nltk.probability.simplegoodturingprobdist method)": [[179, "nltk.probability.SimpleGoodTuringProbDist.samples", false]], "samples() (nltk.probability.uniformprobdist method)": [[179, "nltk.probability.UniformProbDist.samples", false]], "samples() (nltk.probability.wittenbellprobdist method)": [[179, "nltk.probability.WittenBellProbDist.samples", false]], "sampletoscreen_demo() (in module nltk.twitter.twitter_demo)": [[354, "nltk.twitter.twitter_demo.sampletoscreen_demo", false]], "satdemo() (in module nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.satdemo", false]], "satisfiers() (nltk.sem.evaluate.model method)": [[186, "nltk.sem.evaluate.Model.satisfiers", false]], "satisfy() (nltk.sem.evaluate.model method)": [[186, "nltk.sem.evaluate.Model.satisfy", false]], "save() (nltk.tag.perceptron.averagedperceptron method)": [[221, "nltk.tag.perceptron.AveragedPerceptron.save", false]], "save_file() (nltk.sentiment.sentiment_analyzer.sentimentanalyzer method)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer.save_file", false]], "save_maxent_params() (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.save_maxent_params", false]], "save_params() (nltk.chunk.named_entity.maxent_ne_chunker method)": [[27, "nltk.chunk.named_entity.Maxent_NE_Chunker.save_params", false]], "save_params() (nltk.tokenize.punkt.punkttokenizer method)": [[309, "nltk.tokenize.punkt.PunktTokenizer.save_params", false]], "save_punkt_params() (in module nltk.tokenize.punkt)": [[309, "nltk.tokenize.punkt.save_punkt_params", false]], "save_to_json() (nltk.tag.perceptron.perceptrontagger method)": [[221, "nltk.tag.perceptron.PerceptronTagger.save_to_json", false]], "scalar_inc_dec() (nltk.sentiment.vader.vaderconstants method)": [[198, "nltk.sentiment.vader.VaderConstants.scalar_inc_dec", false]], "scan_dragto() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.scan_dragto", false]], "scan_mark() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.scan_mark", false]], "scannerrule (class in nltk.parse.earleychart)": [[165, "nltk.parse.earleychart.ScannerRule", false]], "score (nltk.translate.ibm_model.alignmentinfo attribute)": [[334, "nltk.translate.ibm_model.AlignmentInfo.score", false]], "score() (nltk.chunk.util.chunkscore method)": [[29, "nltk.chunk.util.ChunkScore.score", false]], "score() (nltk.lm.api.languagemodel method)": [[136, "nltk.lm.api.LanguageModel.score", false]], "score() (nltk.parse.nonprojectivedependencyparser.demoscorer method)": [[170, "nltk.parse.nonprojectivedependencyparser.DemoScorer.score", false]], "score() (nltk.parse.nonprojectivedependencyparser.dependencyscoreri method)": [[170, "nltk.parse.nonprojectivedependencyparser.DependencyScorerI.score", false]], "score() (nltk.parse.nonprojectivedependencyparser.naivebayesdependencyscorer method)": [[170, "nltk.parse.nonprojectivedependencyparser.NaiveBayesDependencyScorer.score", false]], "score_ngram() (nltk.collocations.bigramcollocationfinder method)": [[53, "nltk.collocations.BigramCollocationFinder.score_ngram", false]], "score_ngram() (nltk.collocations.quadgramcollocationfinder method)": [[53, "nltk.collocations.QuadgramCollocationFinder.score_ngram", false]], "score_ngram() (nltk.collocations.trigramcollocationfinder method)": [[53, "nltk.collocations.TrigramCollocationFinder.score_ngram", false]], "score_valence() (nltk.sentiment.vader.sentimentintensityanalyzer method)": [[198, "nltk.sentiment.vader.SentimentIntensityAnalyzer.score_valence", false]], "scored_synonyms() (nltk.corpus.reader.lin.linthesauruscorpusreader method)": [[77, "nltk.corpus.reader.lin.LinThesaurusCorpusReader.scored_synonyms", false]], "scored_synonyms() (nltk.corpus.reader.linthesauruscorpusreader method)": [[57, "nltk.corpus.reader.LinThesaurusCorpusReader.scored_synonyms", false]], "script (nltk.corpus.reader.panlex_swadesh.panlexlanguage attribute)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexLanguage.script", false]], "scrollregion() (nltk.draw.util.canvasframe method)": [[119, "nltk.draw.util.CanvasFrame.scrollregion", false]], "scrollwatcherwidget (class in nltk.draw.util)": [[119, "nltk.draw.util.ScrollWatcherWidget", false]], "search_demo() (in module nltk.twitter.twitter_demo)": [[354, "nltk.twitter.twitter_demo.search_demo", false]], "search_tweets() (nltk.twitter.twitterclient.query method)": [[355, "nltk.twitter.twitterclient.Query.search_tweets", false]], "second (nltk.sem.logic.anytype property)": [[191, "nltk.sem.logic.AnyType.second", false]], "section_reader() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.section_reader", false]], "sections() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.sections", false]], "see() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.see", false]], "seek() (nltk.data.seekableunicodestreamreader method)": [[111, "nltk.data.SeekableUnicodeStreamReader.seek", false]], "seekableunicodestreamreader (class in nltk.data)": [[111, "nltk.data.SeekableUnicodeStreamReader", false]], "segment() (nltk.stem.cistem.cistem method)": [[203, "nltk.stem.cistem.Cistem.segment", false]], "segment() (nltk.tokenize.stanford_segmenter.stanfordsegmenter method)": [[316, "nltk.tokenize.stanford_segmenter.StanfordSegmenter.segment", false]], "segment_file() (nltk.tokenize.stanford_segmenter.stanfordsegmenter method)": [[316, "nltk.tokenize.stanford_segmenter.StanfordSegmenter.segment_file", false]], "segment_sents() (nltk.tokenize.stanford_segmenter.stanfordsegmenter method)": [[316, "nltk.tokenize.stanford_segmenter.StanfordSegmenter.segment_sents", false]], "select() (nltk.corpus.reader.nombank.nombankchaintreepointer method)": [[81, "nltk.corpus.reader.nombank.NombankChainTreePointer.select", false]], "select() (nltk.corpus.reader.nombank.nombanksplittreepointer method)": [[81, "nltk.corpus.reader.nombank.NombankSplitTreePointer.select", false]], "select() (nltk.corpus.reader.nombank.nombanktreepointer method)": [[81, "nltk.corpus.reader.nombank.NombankTreePointer.select", false]], "select() (nltk.corpus.reader.propbank.propbankchaintreepointer method)": [[89, "nltk.corpus.reader.propbank.PropbankChainTreePointer.select", false]], "select() (nltk.corpus.reader.propbank.propbanksplittreepointer method)": [[89, "nltk.corpus.reader.propbank.PropbankSplitTreePointer.select", false]], "select() (nltk.corpus.reader.propbank.propbanktreepointer method)": [[89, "nltk.corpus.reader.propbank.PropbankTreePointer.select", false]], "select() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.select", false]], "select() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.select", false]], "select() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.select", false]], "select() (nltk.parse.earleychart.featureincrementalchart method)": [[165, "nltk.parse.earleychart.FeatureIncrementalChart.select", false]], "select() (nltk.parse.earleychart.incrementalchart method)": [[165, "nltk.parse.earleychart.IncrementalChart.select", false]], "select() (nltk.parse.featurechart.featurechart method)": [[167, "nltk.parse.featurechart.FeatureChart.select", false]], "select_anchor() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.select_anchor", false]], "select_clear() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.select_clear", false]], "select_includes() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.select_includes", false]], "select_set() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.select_set", false]], "selectdownloaddirmessage (class in nltk.downloader)": [[113, "nltk.downloader.SelectDownloadDirMessage", false]], "selected_row() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.selected_row", false]], "selection() (in module nltk.misc.sort)": [[157, "nltk.misc.sort.selection", false]], "selection_anchor() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.selection_anchor", false]], "selection_clear() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.selection_clear", false]], "selection_includes() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.selection_includes", false]], "selection_set() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.selection_set", false]], "semantics() (nltk.ccg.lexicon.token method)": [[16, "nltk.ccg.lexicon.Token.semantics", false]], "semcorcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.SemcorCorpusReader", false]], "semcorcorpusreader (class in nltk.corpus.reader.semcor)": [[93, "nltk.corpus.reader.semcor.SemcorCorpusReader", false]], "semcorsentence (class in nltk.corpus.reader.semcor)": [[93, "nltk.corpus.reader.semcor.SemcorSentence", false]], "semcorwordview (class in nltk.corpus.reader.semcor)": [[93, "nltk.corpus.reader.semcor.SemcorWordView", false]], "semi_rel2reldict() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.semi_rel2reldict", false]], "semtype() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.semtype", false]], "semtype() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.semtype", false]], "semtype_inherits() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.semtype_inherits", false]], "semtype_inherits() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.semtype_inherits", false]], "semtypes() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.semtypes", false]], "semtypes() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.semtypes", false]], "senna (class in nltk.classify.senna)": [[39, "nltk.classify.senna.Senna", false]], "sennachunktagger (class in nltk.tag.senna)": [[222, "nltk.tag.senna.SennaChunkTagger", false]], "sennanertagger (class in nltk.tag.senna)": [[222, "nltk.tag.senna.SennaNERTagger", false]], "sennatagger (class in nltk.tag.senna)": [[222, "nltk.tag.senna.SennaTagger", false]], "sensenumber (nltk.corpus.reader.nombank.nombankinstance attribute)": [[81, "nltk.corpus.reader.nombank.NombankInstance.sensenumber", false]], "sensenumber (nltk.corpus.reader.propbank.propbankinstance property)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.sensenumber", false]], "sensevalcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.SensevalCorpusReader", false]], "sensevalcorpusreader (class in nltk.corpus.reader.senseval)": [[94, "nltk.corpus.reader.senseval.SensevalCorpusReader", false]], "sensevalcorpusview (class in nltk.corpus.reader.senseval)": [[94, "nltk.corpus.reader.senseval.SensevalCorpusView", false]], "sensevalinstance (class in nltk.corpus.reader.senseval)": [[94, "nltk.corpus.reader.senseval.SensevalInstance", false]], "sent_end_chars (nltk.tokenize.punkt.punktlanguagevars attribute)": [[309, "nltk.tokenize.punkt.PunktLanguageVars.sent_end_chars", false]], "sent_path (nltk.corpus.reader.mte.mtefilereader attribute)": [[79, "nltk.corpus.reader.mte.MTEFileReader.sent_path", false]], "sent_starter (nltk.tokenize.punkt.punkttrainer attribute)": [[309, "nltk.tokenize.punkt.PunktTrainer.SENT_STARTER", false]], "sent_starters (nltk.tokenize.punkt.punktparameters attribute)": [[309, "nltk.tokenize.punkt.PunktParameters.sent_starters", false]], "sent_times() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.sent_times", false]], "sent_times() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.sent_times", false]], "sent_tokenize() (in module nltk.tokenize)": [[302, "nltk.tokenize.sent_tokenize", false]], "sentbreak (nltk.tokenize.punkt.punkttoken attribute)": [[309, "nltk.tokenize.punkt.PunktToken.sentbreak", false]], "sentence_bleu() (in module nltk.translate.bleu_score)": [[324, "nltk.translate.bleu_score.sentence_bleu", false]], "sentence_chrf() (in module nltk.translate.chrf_score)": [[325, "nltk.translate.chrf_score.sentence_chrf", false]], "sentence_gleu() (in module nltk.translate.gleu_score)": [[328, "nltk.translate.gleu_score.sentence_gleu", false]], "sentence_nist() (in module nltk.translate.nist_score)": [[337, "nltk.translate.nist_score.sentence_nist", false]], "sentence_ribes() (in module nltk.translate.ribes_score)": [[339, "nltk.translate.ribes_score.sentence_ribes", false]], "sentences() (nltk.inference.discourse.discoursetester method)": [[125, "nltk.inference.discourse.DiscourseTester.sentences", false]], "sentences_from_text() (nltk.tokenize.punkt.punktsentencetokenizer method)": [[309, "nltk.tokenize.punkt.PunktSentenceTokenizer.sentences_from_text", false]], "sentences_from_text_legacy() (nltk.tokenize.punkt.punktsentencetokenizer method)": [[309, "nltk.tokenize.punkt.PunktSentenceTokenizer.sentences_from_text_legacy", false]], "sentences_from_tokens() (nltk.tokenize.punkt.punktsentencetokenizer method)": [[309, "nltk.tokenize.punkt.PunktSentenceTokenizer.sentences_from_tokens", false]], "senti_synset() (nltk.corpus.reader.sentiwordnet.sentiwordnetcorpusreader method)": [[95, "nltk.corpus.reader.sentiwordnet.SentiWordNetCorpusReader.senti_synset", false]], "senti_synset() (nltk.corpus.reader.sentiwordnetcorpusreader method)": [[57, "nltk.corpus.reader.SentiWordNetCorpusReader.senti_synset", false]], "senti_synsets() (nltk.corpus.reader.sentiwordnet.sentiwordnetcorpusreader method)": [[95, "nltk.corpus.reader.sentiwordnet.SentiWordNetCorpusReader.senti_synsets", false]], "senti_synsets() (nltk.corpus.reader.sentiwordnetcorpusreader method)": [[57, "nltk.corpus.reader.SentiWordNetCorpusReader.senti_synsets", false]], "sentid() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.sentid", false]], "sentid() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.sentid", false]], "sentiment_valence() (nltk.sentiment.vader.sentimentintensityanalyzer method)": [[198, "nltk.sentiment.vader.SentimentIntensityAnalyzer.sentiment_valence", false]], "sentimentanalyzer (class in nltk.sentiment.sentiment_analyzer)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer", false]], "sentimentintensityanalyzer (class in nltk.sentiment.vader)": [[198, "nltk.sentiment.vader.SentimentIntensityAnalyzer", false]], "sentisynset (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.SentiSynset", false]], "sentisynset (class in nltk.corpus.reader.sentiwordnet)": [[95, "nltk.corpus.reader.sentiwordnet.SentiSynset", false]], "sentitext (class in nltk.sentiment.vader)": [[198, "nltk.sentiment.vader.SentiText", false]], "sentiwordnetcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.SentiWordNetCorpusReader", false]], "sentiwordnetcorpusreader (class in nltk.corpus.reader.sentiwordnet)": [[95, "nltk.corpus.reader.sentiwordnet.SentiWordNetCorpusReader", false]], "sentnum (nltk.corpus.reader.nombank.nombankinstance attribute)": [[81, "nltk.corpus.reader.nombank.NombankInstance.sentnum", false]], "sentnum (nltk.corpus.reader.propbank.propbankinstance attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.sentnum", false]], "sents (nltk.corpus.reader.markdown.codeblock property)": [[78, "nltk.corpus.reader.markdown.CodeBlock.sents", false]], "sents (nltk.corpus.reader.markdown.markdownblock property)": [[78, "nltk.corpus.reader.markdown.MarkdownBlock.sents", false]], "sents() (in module nltk.book)": [[11, "nltk.book.sents", false]], "sents() (nltk.corpus.reader.aligned.alignedcorpusreader method)": [[58, "nltk.corpus.reader.aligned.AlignedCorpusReader.sents", false]], "sents() (nltk.corpus.reader.alignedcorpusreader method)": [[57, "nltk.corpus.reader.AlignedCorpusReader.sents", false]], "sents() (nltk.corpus.reader.api.categorizedcorpusreader method)": [[59, "nltk.corpus.reader.api.CategorizedCorpusReader.sents", false]], "sents() (nltk.corpus.reader.api.syntaxcorpusreader method)": [[59, "nltk.corpus.reader.api.SyntaxCorpusReader.sents", false]], "sents() (nltk.corpus.reader.bnc.bnccorpusreader method)": [[61, "nltk.corpus.reader.bnc.BNCCorpusReader.sents", false]], "sents() (nltk.corpus.reader.bnccorpusreader method)": [[57, "nltk.corpus.reader.BNCCorpusReader.sents", false]], "sents() (nltk.corpus.reader.categorized_sents.categorizedsentencescorpusreader method)": [[63, "nltk.corpus.reader.categorized_sents.CategorizedSentencesCorpusReader.sents", false]], "sents() (nltk.corpus.reader.categorizedcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedCorpusReader.sents", false]], "sents() (nltk.corpus.reader.categorizedsentencescorpusreader method)": [[57, "nltk.corpus.reader.CategorizedSentencesCorpusReader.sents", false]], "sents() (nltk.corpus.reader.chasen.chasencorpusreader method)": [[64, "nltk.corpus.reader.chasen.ChasenCorpusReader.sents", false]], "sents() (nltk.corpus.reader.chasencorpusreader method)": [[57, "nltk.corpus.reader.ChasenCorpusReader.sents", false]], "sents() (nltk.corpus.reader.childes.childescorpusreader method)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.sents", false]], "sents() (nltk.corpus.reader.childescorpusreader method)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.sents", false]], "sents() (nltk.corpus.reader.chunked.chunkedcorpusreader method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusReader.sents", false]], "sents() (nltk.corpus.reader.chunkedcorpusreader method)": [[57, "nltk.corpus.reader.ChunkedCorpusReader.sents", false]], "sents() (nltk.corpus.reader.comparative_sents.comparativesentencescorpusreader method)": [[68, "nltk.corpus.reader.comparative_sents.ComparativeSentencesCorpusReader.sents", false]], "sents() (nltk.corpus.reader.comparativesentencescorpusreader method)": [[57, "nltk.corpus.reader.ComparativeSentencesCorpusReader.sents", false]], "sents() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.sents", false]], "sents() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.sents", false]], "sents() (nltk.corpus.reader.dependency.dependencycorpusreader method)": [[71, "nltk.corpus.reader.dependency.DependencyCorpusReader.sents", false]], "sents() (nltk.corpus.reader.dependencycorpusreader method)": [[57, "nltk.corpus.reader.DependencyCorpusReader.sents", false]], "sents() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.sents", false]], "sents() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.sents", false]], "sents() (nltk.corpus.reader.indian.indiancorpusreader method)": [[74, "nltk.corpus.reader.indian.IndianCorpusReader.sents", false]], "sents() (nltk.corpus.reader.indiancorpusreader method)": [[57, "nltk.corpus.reader.IndianCorpusReader.sents", false]], "sents() (nltk.corpus.reader.ipipan.ipipancorpusreader method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader.sents", false]], "sents() (nltk.corpus.reader.ipipancorpusreader method)": [[57, "nltk.corpus.reader.IPIPANCorpusReader.sents", false]], "sents() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.sents", false]], "sents() (nltk.corpus.reader.mte.mtecorpusreader method)": [[79, "nltk.corpus.reader.mte.MTECorpusReader.sents", false]], "sents() (nltk.corpus.reader.mte.mtefilereader method)": [[79, "nltk.corpus.reader.mte.MTEFileReader.sents", false]], "sents() (nltk.corpus.reader.mtecorpusreader method)": [[57, "nltk.corpus.reader.MTECorpusReader.sents", false]], "sents() (nltk.corpus.reader.nkjp.nkjpcorpusreader method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.sents", false]], "sents() (nltk.corpus.reader.nkjpcorpusreader method)": [[57, "nltk.corpus.reader.NKJPCorpusReader.sents", false]], "sents() (nltk.corpus.reader.pl196x.pl196xcorpusreader method)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader.sents", false]], "sents() (nltk.corpus.reader.pl196xcorpusreader method)": [[57, "nltk.corpus.reader.Pl196xCorpusReader.sents", false]], "sents() (nltk.corpus.reader.plaintext.plaintextcorpusreader method)": [[87, "nltk.corpus.reader.plaintext.PlaintextCorpusReader.sents", false]], "sents() (nltk.corpus.reader.plaintextcorpusreader method)": [[57, "nltk.corpus.reader.PlaintextCorpusReader.sents", false]], "sents() (nltk.corpus.reader.pros_cons.prosconscorpusreader method)": [[90, "nltk.corpus.reader.pros_cons.ProsConsCorpusReader.sents", false]], "sents() (nltk.corpus.reader.prosconscorpusreader method)": [[57, "nltk.corpus.reader.ProsConsCorpusReader.sents", false]], "sents() (nltk.corpus.reader.reviews.review method)": [[91, "nltk.corpus.reader.reviews.Review.sents", false]], "sents() (nltk.corpus.reader.reviews.reviewscorpusreader method)": [[91, "nltk.corpus.reader.reviews.ReviewsCorpusReader.sents", false]], "sents() (nltk.corpus.reader.reviewscorpusreader method)": [[57, "nltk.corpus.reader.ReviewsCorpusReader.sents", false]], "sents() (nltk.corpus.reader.semcor.semcorcorpusreader method)": [[93, "nltk.corpus.reader.semcor.SemcorCorpusReader.sents", false]], "sents() (nltk.corpus.reader.semcorcorpusreader method)": [[57, "nltk.corpus.reader.SemcorCorpusReader.sents", false]], "sents() (nltk.corpus.reader.syntaxcorpusreader method)": [[57, "nltk.corpus.reader.SyntaxCorpusReader.sents", false]], "sents() (nltk.corpus.reader.tagged.taggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.TaggedCorpusReader.sents", false]], "sents() (nltk.corpus.reader.taggedcorpusreader method)": [[57, "nltk.corpus.reader.TaggedCorpusReader.sents", false]], "sents() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.sents", false]], "sents() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.sents", false]], "sents() (nltk.corpus.reader.ycoe.ycoecorpusreader method)": [[109, "nltk.corpus.reader.ycoe.YCOECorpusReader.sents", false]], "sents() (nltk.corpus.reader.ycoecorpusreader method)": [[57, "nltk.corpus.reader.YCOECorpusReader.sents", false]], "sents_mode (nltk.corpus.reader.ipipan.ipipancorpusview attribute)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusView.SENTS_MODE", false]], "sents_mode (nltk.corpus.reader.nkjp.nkjpcorpus_text_view attribute)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpus_Text_View.SENTS_MODE", false]], "sents_mode (nltk.corpus.reader.nkjp.nkjpcorpusreader attribute)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.SENTS_MODE", false]], "sents_mode (nltk.corpus.reader.nkjpcorpusreader attribute)": [[57, "nltk.corpus.reader.NKJPCorpusReader.SENTS_MODE", false]], "sequencewidget (class in nltk.draw.util)": [[119, "nltk.draw.util.SequenceWidget", false]], "sequentialbackofftagger (class in nltk.tag.sequential)": [[223, "nltk.tag.sequential.SequentialBackoffTagger", false]], "set() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.set", false]], "set() (nltk.draw.util.mutableoptionmenu method)": [[119, "nltk.draw.util.MutableOptionMenu.set", false]], "set2rel() (in module nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.set2rel", false]], "set2txt() (nltk.tabdata.tabencoder method)": [[212, "nltk.tabdata.TabEncoder.set2txt", false]], "set_bin_dir() (nltk.sem.boxer.boxer method)": [[181, "nltk.sem.boxer.Boxer.set_bin_dir", false]], "set_chart() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.set_chart", false]], "set_child() (nltk.draw.util.abstractcontainerwidget method)": [[119, "nltk.draw.util.AbstractContainerWidget.set_child", false]], "set_discount() (nltk.probability.kneserneyprobdist method)": [[179, "nltk.probability.KneserNeyProbDist.set_discount", false]], "set_grammar() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.set_grammar", false]], "set_grammar() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.set_grammar", false]], "set_grammar() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.set_grammar", false]], "set_height() (nltk.draw.util.spacewidget method)": [[119, "nltk.draw.util.SpaceWidget.set_height", false]], "set_label() (nltk.draw.tree.treesegmentwidget method)": [[118, "nltk.draw.tree.TreeSegmentWidget.set_label", false]], "set_label() (nltk.tree.immutable.immutabletree method)": [[342, "nltk.tree.immutable.ImmutableTree.set_label", false]], "set_label() (nltk.tree.immutabletree method)": [[341, "nltk.tree.ImmutableTree.set_label", false]], "set_label() (nltk.tree.tree method)": [[341, "nltk.tree.Tree.set_label", false]], "set_label() (nltk.tree.tree.tree method)": [[348, "nltk.tree.tree.Tree.set_label", false]], "set_logprob() (nltk.probability.immutableprobabilisticmixin method)": [[179, "nltk.probability.ImmutableProbabilisticMixIn.set_logprob", false]], "set_logprob() (nltk.probability.probabilisticmixin method)": [[179, "nltk.probability.ProbabilisticMixIn.set_logprob", false]], "set_model_file() (nltk.tag.crf.crftagger method)": [[217, "nltk.tag.crf.CRFTagger.set_model_file", false]], "set_prob() (nltk.probability.immutableprobabilisticmixin method)": [[179, "nltk.probability.ImmutableProbabilisticMixIn.set_prob", false]], "set_prob() (nltk.probability.probabilisticmixin method)": [[179, "nltk.probability.ProbabilisticMixIn.set_prob", false]], "set_proxy() (in module nltk.util)": [[357, "nltk.util.set_proxy", false]], "set_strategy() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.set_strategy", false]], "set_symbol() (nltk.draw.util.symbolwidget method)": [[119, "nltk.draw.util.SymbolWidget.set_symbol", false]], "set_text() (nltk.draw.util.textwidget method)": [[119, "nltk.draw.util.TextWidget.set_text", false]], "set_uniform_probabilities() (nltk.translate.ibm1.ibmmodel1 method)": [[329, "nltk.translate.ibm1.IBMModel1.set_uniform_probabilities", false]], "set_uniform_probabilities() (nltk.translate.ibm2.ibmmodel2 method)": [[330, "nltk.translate.ibm2.IBMModel2.set_uniform_probabilities", false]], "set_uniform_probabilities() (nltk.translate.ibm3.ibmmodel3 method)": [[331, "nltk.translate.ibm3.IBMModel3.set_uniform_probabilities", false]], "set_uniform_probabilities() (nltk.translate.ibm4.ibmmodel4 method)": [[332, "nltk.translate.ibm4.IBMModel4.set_uniform_probabilities", false]], "set_uniform_probabilities() (nltk.translate.ibm5.ibmmodel5 method)": [[333, "nltk.translate.ibm5.IBMModel5.set_uniform_probabilities", false]], "set_uniform_probabilities() (nltk.translate.ibm_model.ibmmodel method)": [[334, "nltk.translate.ibm_model.IBMModel.set_uniform_probabilities", false]], "set_weights() (nltk.classify.maxent.maxentclassifier method)": [[33, "nltk.classify.maxent.MaxentClassifier.set_weights", false]], "set_width() (nltk.draw.util.spacewidget method)": [[119, "nltk.draw.util.SpaceWidget.set_width", false]], "setdefault() (nltk.collections.ordereddict method)": [[52, "nltk.collections.OrderedDict.setdefault", false]], "setdefault() (nltk.featstruct.featdict method)": [[120, "nltk.featstruct.FeatDict.setdefault", false]], "setdefault() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.setdefault", false]], "setholder (class in nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.SetHolder", false]], "setup() (in module nltk.twitter.twitter_demo)": [[354, "nltk.twitter.twitter_demo.setup", false]], "setup() (nltk.test.unit.test_concordance.testconcordance method)": [[260, "nltk.test.unit.test_concordance.TestConcordance.setUp", false]], "setup() (nltk.test.unit.test_json_serialization.testjsonserialization method)": [[271, "nltk.test.unit.test_json_serialization.TestJSONSerialization.setUp", false]], "setup() (nltk.test.unit.translate.test_stack_decoder.testhypothesis method)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestHypothesis.setUp", false]], "setup_class() (nltk.test.unit.lm.test_counter.testngramcounter class method)": [[248, "nltk.test.unit.lm.test_counter.TestNgramCounter.setup_class", false]], "setup_class() (nltk.test.unit.lm.test_counter.testngramcountertraining class method)": [[248, "nltk.test.unit.lm.test_counter.TestNgramCounterTraining.setup_class", false]], "setup_class() (nltk.test.unit.test_twitter_auth.testcredentials class method)": [[285, "nltk.test.unit.test_twitter_auth.TestCredentials.setup_class", false]], "setup_module() (in module nltk.test.childes_fixt)": [[236, "nltk.test.childes_fixt.setup_module", false]], "setup_module() (in module nltk.test.classify_fixt)": [[237, "nltk.test.classify_fixt.setup_module", false]], "setup_module() (in module nltk.test.gensim_fixt)": [[240, "nltk.test.gensim_fixt.setup_module", false]], "setup_module() (in module nltk.test.gluesemantics_malt_fixt)": [[241, "nltk.test.gluesemantics_malt_fixt.setup_module", false]], "setup_module() (in module nltk.test.portuguese_en_fixt)": [[244, "nltk.test.portuguese_en_fixt.setup_module", false]], "setup_module() (in module nltk.test.probability_fixt)": [[245, "nltk.test.probability_fixt.setup_module", false]], "setup_module() (in module nltk.test.unit.test_bllip)": [[253, "nltk.test.unit.test_bllip.setup_module", false]], "setup_module() (in module nltk.test.unit.test_corenlp)": [[261, "nltk.test.unit.test_corenlp.setup_module", false]], "setup_module() (in module nltk.test.unit.test_hmm)": [[269, "nltk.test.unit.test_hmm.setup_module", false]], "setup_module() (in module nltk.test.unit.test_tag)": [[282, "nltk.test.unit.test_tag.setup_module", false]], "setupclass() (nltk.test.unit.lm.test_vocabulary.ngrammodelvocabularytests class method)": [[251, "nltk.test.unit.lm.test_vocabulary.NgramModelVocabularyTests.setUpClass", false]], "setupclass() (nltk.test.unit.test_concordance.testconcordance class method)": [[260, "nltk.test.unit.test_concordance.TestConcordance.setUpClass", false]], "sexpr_tokenize() (in module nltk.tokenize.sexpr)": [[312, "nltk.tokenize.sexpr.sexpr_tokenize", false]], "sexprtokenizer (class in nltk.tokenize.sexpr)": [[312, "nltk.tokenize.sexpr.SExprTokenizer", false]], "shape() (in module nltk.chunk.named_entity)": [[27, "nltk.chunk.named_entity.shape", false]], "shift (nltk.parse.transitionparser.transition attribute)": [[176, "nltk.parse.transitionparser.Transition.SHIFT", false]], "shift() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.shift", false]], "shift() (nltk.parse.transitionparser.transition method)": [[176, "nltk.parse.transitionparser.Transition.shift", false]], "shiftreduceparser (class in nltk.parse.shiftreduce)": [[174, "nltk.parse.shiftreduce.ShiftReduceParser", false]], "shortest_path_distance() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.shortest_path_distance", false]], "shortid() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.shortid", false]], "shortid() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.shortid", false]], "show() (nltk.cluster.util.dendrogram method)": [[51, "nltk.cluster.util.Dendrogram.show", false]], "show() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.show", false]], "show_cfg() (in module nltk.data)": [[111, "nltk.data.show_cfg", false]], "show_column() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.show_column", false]], "show_column() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.show_column", false]], "show_most_informative_features() (nltk.classify.maxent.maxentclassifier method)": [[33, "nltk.classify.maxent.MaxentClassifier.show_most_informative_features", false]], "show_most_informative_features() (nltk.classify.naivebayes.naivebayesclassifier method)": [[35, "nltk.classify.naivebayes.NaiveBayesClassifier.show_most_informative_features", false]], "showtext (class in nltk.draw.util)": [[119, "nltk.draw.util.ShowText", false]], "sigma_exp() (in module nltk.metrics.aline)": [[145, "nltk.metrics.aline.sigma_exp", false]], "sigma_skip() (in module nltk.metrics.aline)": [[145, "nltk.metrics.aline.sigma_skip", false]], "sigma_sub() (in module nltk.metrics.aline)": [[145, "nltk.metrics.aline.sigma_sub", false]], "similar() (nltk.text.text method)": [[300, "nltk.text.Text.similar", false]], "similar_words() (nltk.text.contextindex method)": [[300, "nltk.text.ContextIndex.similar_words", false]], "similarity() (nltk.corpus.reader.lin.linthesauruscorpusreader method)": [[77, "nltk.corpus.reader.lin.LinThesaurusCorpusReader.similarity", false]], "similarity() (nltk.corpus.reader.linthesauruscorpusreader method)": [[57, "nltk.corpus.reader.LinThesaurusCorpusReader.similarity", false]], "simplegoodturingprobdist (class in nltk.probability)": [[179, "nltk.probability.SimpleGoodTuringProbDist", false]], "simplify() (nltk.sem.drt.drtconcatenation method)": [[184, "nltk.sem.drt.DrtConcatenation.simplify", false]], "simplify() (nltk.sem.glue.glueformula method)": [[187, "nltk.sem.glue.GlueFormula.simplify", false]], "simplify() (nltk.sem.linearlogic.applicationexpression method)": [[190, "nltk.sem.linearlogic.ApplicationExpression.simplify", false]], "simplify() (nltk.sem.linearlogic.atomicexpression method)": [[190, "nltk.sem.linearlogic.AtomicExpression.simplify", false]], "simplify() (nltk.sem.linearlogic.impexpression method)": [[190, "nltk.sem.linearlogic.ImpExpression.simplify", false]], "simplify() (nltk.sem.logic.abstractvariableexpression method)": [[191, "nltk.sem.logic.AbstractVariableExpression.simplify", false]], "simplify() (nltk.sem.logic.applicationexpression method)": [[191, "nltk.sem.logic.ApplicationExpression.simplify", false]], "simplify() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.simplify", false]], "simplify_pos() (in module nltk.chunk.named_entity)": [[27, "nltk.chunk.named_entity.simplify_pos", false]], "single_meteor_score() (in module nltk.translate.meteor_score)": [[335, "nltk.translate.meteor_score.single_meteor_score", false]], "singleedgefundamentalrule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.SingleEdgeFundamentalRule", false]], "singleedgeprobabilisticfundamentalrule (class in nltk.parse.pchart)": [[171, "nltk.parse.pchart.SingleEdgeProbabilisticFundamentalRule", false]], "sinica_parse() (in module nltk.tree)": [[341, "nltk.tree.sinica_parse", false]], "sinica_parse() (in module nltk.tree.parsing)": [[344, "nltk.tree.parsing.sinica_parse", false]], "sinicatreebankcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.SinicaTreebankCorpusReader", false]], "sinicatreebankcorpusreader (class in nltk.corpus.reader.sinica_treebank)": [[96, "nltk.corpus.reader.sinica_treebank.SinicaTreebankCorpusReader", false]], "size (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.size", false]], "size() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.size", false]], "size() (nltk.tag.sequential.contexttagger method)": [[223, "nltk.tag.sequential.ContextTagger.size", false]], "skip (nltk.corpus.reader.udhr.udhrcorpusreader attribute)": [[103, "nltk.corpus.reader.udhr.UdhrCorpusReader.SKIP", false]], "skip (nltk.corpus.reader.udhrcorpusreader attribute)": [[57, "nltk.corpus.reader.UdhrCorpusReader.SKIP", false]], "skipgrams() (in module nltk.util)": [[357, "nltk.util.skipgrams", false]], "sklearnclassifier (class in nltk.classify.scikitlearn)": [[38, "nltk.classify.scikitlearn.SklearnClassifier", false]], "skolem_function() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.skolem_function", false]], "skolemize() (in module nltk.sem.skolemize)": [[193, "nltk.sem.skolemize.skolemize", false]], "slashfeature (class in nltk.featstruct)": [[120, "nltk.featstruct.SlashFeature", false]], "slice_bounds() (in module nltk.internals)": [[131, "nltk.internals.slice_bounds", false]], "slots (class in nltk.translate.ibm5)": [[333, "nltk.translate.ibm5.Slots", false]], "smooth() (in module nltk.tokenize.texttiling)": [[317, "nltk.tokenize.texttiling.smooth", false]], "smoothednr() (nltk.probability.simplegoodturingprobdist method)": [[179, "nltk.probability.SimpleGoodTuringProbDist.smoothedNr", false]], "smoothing (class in nltk.lm.api)": [[136, "nltk.lm.api.Smoothing", false]], "smoothingfunction (class in nltk.translate.bleu_score)": [[324, "nltk.translate.bleu_score.SmoothingFunction", false]], "snowballstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.SnowballStemmer", false]], "snowballtest (class in nltk.test.unit.test_stem)": [[281, "nltk.test.unit.test_stem.SnowballTest", false]], "sort() (nltk.featstruct.featlist method)": [[120, "nltk.featstruct.FeatList.sort", false]], "sort() (nltk.tree.immutable.immutabletree method)": [[342, "nltk.tree.immutable.ImmutableTree.sort", false]], "sort() (nltk.tree.immutabletree method)": [[341, "nltk.tree.ImmutableTree.sort", false]], "sort_by() (nltk.draw.table.table method)": [[117, "nltk.draw.table.Table.sort_by", false]], "sort_fields() (in module nltk.toolbox)": [[321, "nltk.toolbox.sort_fields", false]], "sort_queue() (nltk.parse.pchart.bottomupprobabilisticchartparser method)": [[171, "nltk.parse.pchart.BottomUpProbabilisticChartParser.sort_queue", false]], "sort_queue() (nltk.parse.pchart.insidechartparser method)": [[171, "nltk.parse.pchart.InsideChartParser.sort_queue", false]], "sort_queue() (nltk.parse.pchart.longestchartparser method)": [[171, "nltk.parse.pchart.LongestChartParser.sort_queue", false]], "sort_queue() (nltk.parse.pchart.randomchartparser method)": [[171, "nltk.parse.pchart.RandomChartParser.sort_queue", false]], "sort_queue() (nltk.parse.pchart.unsortedchartparser method)": [[171, "nltk.parse.pchart.UnsortedChartParser.sort_queue", false]], "source() (nltk.corpus.reader.panlex_lite.meaning method)": [[84, "nltk.corpus.reader.panlex_lite.Meaning.source", false]], "source_group() (nltk.corpus.reader.panlex_lite.meaning method)": [[84, "nltk.corpus.reader.panlex_lite.Meaning.source_group", false]], "spacer() (in module nltk.inference.discourse)": [[125, "nltk.inference.discourse.spacer", false]], "spacer() (in module nltk.inference.mace)": [[126, "nltk.inference.mace.spacer", false]], "spacer() (in module nltk.inference.prover9)": [[128, "nltk.inference.prover9.spacer", false]], "spacetokenizer (class in nltk.tokenize.simple)": [[313, "nltk.tokenize.simple.SpaceTokenizer", false]], "spacewidget (class in nltk.draw.util)": [[119, "nltk.draw.util.SpaceWidget", false]], "span() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.span", false]], "span() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.span", false]], "span() (nltk.parse.chart.edgei method)": [[162, "nltk.parse.chart.EdgeI.span", false]], "span() (nltk.parse.chart.leafedge method)": [[162, "nltk.parse.chart.LeafEdge.span", false]], "span() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.span", false]], "span_tokenize() (nltk.tokenize.api.stringtokenizer method)": [[303, "nltk.tokenize.api.StringTokenizer.span_tokenize", false]], "span_tokenize() (nltk.tokenize.api.tokenizeri method)": [[303, "nltk.tokenize.api.TokenizerI.span_tokenize", false]], "span_tokenize() (nltk.tokenize.destructive.nltkwordtokenizer method)": [[305, "nltk.tokenize.destructive.NLTKWordTokenizer.span_tokenize", false]], "span_tokenize() (nltk.tokenize.punkt.punktsentencetokenizer method)": [[309, "nltk.tokenize.punkt.PunktSentenceTokenizer.span_tokenize", false]], "span_tokenize() (nltk.tokenize.regexp.regexptokenizer method)": [[310, "nltk.tokenize.regexp.RegexpTokenizer.span_tokenize", false]], "span_tokenize() (nltk.tokenize.simple.chartokenizer method)": [[313, "nltk.tokenize.simple.CharTokenizer.span_tokenize", false]], "span_tokenize() (nltk.tokenize.simple.linetokenizer method)": [[313, "nltk.tokenize.simple.LineTokenizer.span_tokenize", false]], "span_tokenize() (nltk.tokenize.treebank.treebankwordtokenizer method)": [[319, "nltk.tokenize.treebank.TreebankWordTokenizer.span_tokenize", false]], "span_tokenize_sents() (nltk.tokenize.api.tokenizeri method)": [[303, "nltk.tokenize.api.TokenizerI.span_tokenize_sents", false]], "spanishstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.SpanishStemmer", false]], "spans_to_relative() (in module nltk.tokenize.util)": [[320, "nltk.tokenize.util.spans_to_relative", false]], "speakerinfo (class in nltk.corpus.reader.timit)": [[100, "nltk.corpus.reader.timit.SpeakerInfo", false]], "spearman_correlation() (in module nltk.metrics.spearman)": [[152, "nltk.metrics.spearman.spearman_correlation", false]], "spearman_rho() (in module nltk.translate.ribes_score)": [[339, "nltk.translate.ribes_score.spearman_rho", false]], "special_case_idioms (nltk.sentiment.vader.vaderconstants attribute)": [[198, "nltk.sentiment.vader.VaderConstants.SPECIAL_CASE_IDIOMS", false]], "speciallist (class in nltk.corpus.reader.framenet)": [[72, "nltk.corpus.reader.framenet.SpecialList", false]], "spkrid() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.spkrid", false]], "spkrid() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.spkrid", false]], "spkrinfo() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.spkrinfo", false]], "spkrinfo() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.spkrinfo", false]], "spkrutteranceids() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.spkrutteranceids", false]], "spkrutteranceids() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.spkrutteranceids", false]], "split_at() (in module nltk.translate.gale_church)": [[326, "nltk.translate.gale_church.split_at", false]], "split_synsets() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.split_synsets", false]], "split_synsets() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.split_synsets", false]], "split_train_test() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.split_train_test", false]], "splitrule (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.SplitRule", false]], "sql_demo() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.sql_demo", false]], "sql_query() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.sql_query", false]], "src (nltk.corpus.reader.markdown.image attribute)": [[78, "nltk.corpus.reader.markdown.Image.src", false]], "src_sentence (nltk.translate.ibm_model.alignmentinfo attribute)": [[334, "nltk.translate.ibm_model.AlignmentInfo.src_sentence", false]], "srl (nltk.corpus.reader.conll.conllcorpusreader attribute)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.SRL", false]], "srl (nltk.corpus.reader.conllcorpusreader attribute)": [[57, "nltk.corpus.reader.ConllCorpusReader.SRL", false]], "srl_instances() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.srl_instances", false]], "srl_instances() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.srl_instances", false]], "srl_spans() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.srl_spans", false]], "srl_spans() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.srl_spans", false]], "ss2of() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.ss2of", false]], "ss2of() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.ss2of", false]], "stack() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.stack", false]], "stack_size (nltk.translate.stack_decoder.stackdecoder attribute)": [[340, "nltk.translate.stack_decoder.StackDecoder.stack_size", false]], "stackdecoder (class in nltk.translate.stack_decoder)": [[340, "nltk.translate.stack_decoder.StackDecoder", false]], "stackwidget (class in nltk.draw.util)": [[119, "nltk.draw.util.StackWidget", false]], "stale (nltk.downloader.downloader attribute)": [[113, "nltk.downloader.Downloader.STALE", false]], "stalemessage (class in nltk.downloader)": [[113, "nltk.downloader.StaleMessage", false]], "standardformat (class in nltk.toolbox)": [[321, "nltk.toolbox.StandardFormat", false]], "stanforddependencyparser (class in nltk.parse.stanford)": [[175, "nltk.parse.stanford.StanfordDependencyParser", false]], "stanfordnertagger (class in nltk.tag.stanford)": [[224, "nltk.tag.stanford.StanfordNERTagger", false]], "stanfordneuraldependencyparser (class in nltk.parse.stanford)": [[175, "nltk.parse.stanford.StanfordNeuralDependencyParser", false]], "stanfordparser (class in nltk.parse.stanford)": [[175, "nltk.parse.stanford.StanfordParser", false]], "stanfordpostagger (class in nltk.tag.stanford)": [[224, "nltk.tag.stanford.StanfordPOSTagger", false]], "stanfordsegmenter (class in nltk.tokenize.stanford_segmenter)": [[316, "nltk.tokenize.stanford_segmenter.StanfordSegmenter", false]], "stanfordtagger (class in nltk.tag.stanford)": [[224, "nltk.tag.stanford.StanfordTagger", false]], "stanfordtokenizer (class in nltk.tokenize.stanford)": [[315, "nltk.tokenize.stanford.StanfordTokenizer", false]], "start (nltk.tag.perceptron.perceptrontagger attribute)": [[221, "nltk.tag.perceptron.PerceptronTagger.START", false]], "start() (nltk.ccg.chart.ccgedge method)": [[14, "nltk.ccg.chart.CCGEdge.start", false]], "start() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.start", false]], "start() (nltk.ccg.lexicon.ccglexicon method)": [[16, "nltk.ccg.lexicon.CCGLexicon.start", false]], "start() (nltk.grammar.cfg method)": [[121, "nltk.grammar.CFG.start", false]], "start() (nltk.parse.chart.edgei method)": [[162, "nltk.parse.chart.EdgeI.start", false]], "start() (nltk.parse.chart.leafedge method)": [[162, "nltk.parse.chart.LeafEdge.start", false]], "start() (nltk.parse.chart.treeedge method)": [[162, "nltk.parse.chart.TreeEdge.start", false]], "start() (nltk.parse.corenlp.corenlpserver method)": [[163, "nltk.parse.corenlp.CoreNLPServer.start", false]], "startcollectionmessage (class in nltk.downloader)": [[113, "nltk.downloader.StartCollectionMessage", false]], "startdownloadmessage (class in nltk.downloader)": [[113, "nltk.downloader.StartDownloadMessage", false]], "starting_quotes (nltk.tokenize.destructive.nltkwordtokenizer attribute)": [[305, "nltk.tokenize.destructive.NLTKWordTokenizer.STARTING_QUOTES", false]], "starting_quotes (nltk.tokenize.treebank.treebankworddetokenizer attribute)": [[319, "nltk.tokenize.treebank.TreebankWordDetokenizer.STARTING_QUOTES", false]], "starting_quotes (nltk.tokenize.treebank.treebankwordtokenizer attribute)": [[319, "nltk.tokenize.treebank.TreebankWordTokenizer.STARTING_QUOTES", false]], "startpackagemessage (class in nltk.downloader)": [[113, "nltk.downloader.StartPackageMessage", false]], "startunzipmessage (class in nltk.downloader)": [[113, "nltk.downloader.StartUnzipMessage", false]], "status() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.status", false]], "stdoffset (nltk.twitter.api.localtimezoneoffsetwithutc attribute)": [[352, "nltk.twitter.api.LocalTimezoneOffsetWithUTC.STDOFFSET", false]], "stdout_redirect() (in module nltk.test.unit.test_concordance)": [[260, "nltk.test.unit.test_concordance.stdout_redirect", false]], "stem() (nltk.stem.api.stemmeri method)": [[200, "nltk.stem.api.StemmerI.stem", false]], "stem() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.stem", false]], "stem() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.stem", false]], "stem() (nltk.stem.cistem.cistem method)": [[203, "nltk.stem.cistem.Cistem.stem", false]], "stem() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.stem", false]], "stem() (nltk.stem.lancaster.lancasterstemmer method)": [[205, "nltk.stem.lancaster.LancasterStemmer.stem", false]], "stem() (nltk.stem.porter.porterstemmer method)": [[206, "nltk.stem.porter.PorterStemmer.stem", false]], "stem() (nltk.stem.regexp.regexpstemmer method)": [[207, "nltk.stem.regexp.RegexpStemmer.stem", false]], "stem() (nltk.stem.rslp.rslpstemmer method)": [[208, "nltk.stem.rslp.RSLPStemmer.stem", false]], "stem() (nltk.stem.snowball.arabicstemmer method)": [[209, "nltk.stem.snowball.ArabicStemmer.stem", false]], "stem() (nltk.stem.snowball.danishstemmer method)": [[209, "nltk.stem.snowball.DanishStemmer.stem", false]], "stem() (nltk.stem.snowball.dutchstemmer method)": [[209, "nltk.stem.snowball.DutchStemmer.stem", false]], "stem() (nltk.stem.snowball.englishstemmer method)": [[209, "nltk.stem.snowball.EnglishStemmer.stem", false]], "stem() (nltk.stem.snowball.finnishstemmer method)": [[209, "nltk.stem.snowball.FinnishStemmer.stem", false]], "stem() (nltk.stem.snowball.frenchstemmer method)": [[209, "nltk.stem.snowball.FrenchStemmer.stem", false]], "stem() (nltk.stem.snowball.germanstemmer method)": [[209, "nltk.stem.snowball.GermanStemmer.stem", false]], "stem() (nltk.stem.snowball.hungarianstemmer method)": [[209, "nltk.stem.snowball.HungarianStemmer.stem", false]], "stem() (nltk.stem.snowball.italianstemmer method)": [[209, "nltk.stem.snowball.ItalianStemmer.stem", false]], "stem() (nltk.stem.snowball.norwegianstemmer method)": [[209, "nltk.stem.snowball.NorwegianStemmer.stem", false]], "stem() (nltk.stem.snowball.portuguesestemmer method)": [[209, "nltk.stem.snowball.PortugueseStemmer.stem", false]], "stem() (nltk.stem.snowball.romanianstemmer method)": [[209, "nltk.stem.snowball.RomanianStemmer.stem", false]], "stem() (nltk.stem.snowball.russianstemmer method)": [[209, "nltk.stem.snowball.RussianStemmer.stem", false]], "stem() (nltk.stem.snowball.snowballstemmer method)": [[209, "nltk.stem.snowball.SnowballStemmer.stem", false]], "stem() (nltk.stem.snowball.spanishstemmer method)": [[209, "nltk.stem.snowball.SpanishStemmer.stem", false]], "stem() (nltk.stem.snowball.swedishstemmer method)": [[209, "nltk.stem.snowball.SwedishStemmer.stem", false]], "stem1() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.stem1", false]], "stem_match() (in module nltk.translate.meteor_score)": [[335, "nltk.translate.meteor_score.stem_match", false]], "stemmeri (class in nltk.stem.api)": [[200, "nltk.stem.api.StemmerI", false]], "step() (in module nltk.misc.wordfinder)": [[158, "nltk.misc.wordfinder.step", false]], "step() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.step", false]], "step() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.step", false]], "step() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.step", false]], "steppingchartparser (class in nltk.parse.chart)": [[162, "nltk.parse.chart.SteppingChartParser", false]], "steppingrecursivedescentparser (class in nltk.parse.recursivedescent)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser", false]], "steppingshiftreduceparser (class in nltk.parse.shiftreduce)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser", false]], "stop() (nltk.parse.corenlp.corenlpserver method)": [[163, "nltk.parse.corenlp.CoreNLPServer.stop", false]], "str() (nltk.sem.logic.anytype method)": [[191, "nltk.sem.logic.AnyType.str", false]], "str() (nltk.sem.logic.complextype method)": [[191, "nltk.sem.logic.ComplexType.str", false]], "str() (nltk.sem.logic.entitytype method)": [[191, "nltk.sem.logic.EntityType.str", false]], "str() (nltk.sem.logic.eventtype method)": [[191, "nltk.sem.logic.EventType.str", false]], "str() (nltk.sem.logic.truthvaluetype method)": [[191, "nltk.sem.logic.TruthValueType.str", false]], "str2tuple() (in module nltk.tag.util)": [[226, "nltk.tag.util.str2tuple", false]], "strategy() (nltk.parse.chart.steppingchartparser method)": [[162, "nltk.parse.chart.SteppingChartParser.strategy", false]], "stream (nltk.data.seekableunicodestreamreader attribute)": [[111, "nltk.data.SeekableUnicodeStreamReader.stream", false]], "streambackedcorpusview (class in nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.StreamBackedCorpusView", false]], "streamer (class in nltk.twitter.twitterclient)": [[355, "nltk.twitter.twitterclient.Streamer", false]], "streamtofile_demo() (in module nltk.twitter.twitter_demo)": [[354, "nltk.twitter.twitter_demo.streamtofile_demo", false]], "string_span_tokenize() (in module nltk.tokenize.util)": [[320, "nltk.tokenize.util.string_span_tokenize", false]], "stringcategorycorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.StringCategoryCorpusReader", false]], "stringcategorycorpusreader (class in nltk.corpus.reader.string_category)": [[97, "nltk.corpus.reader.string_category.StringCategoryCorpusReader", false]], "strings() (nltk.corpus.reader.twitter.twittercorpusreader method)": [[102, "nltk.corpus.reader.twitter.TwitterCorpusReader.strings", false]], "strings() (nltk.corpus.reader.twittercorpusreader method)": [[57, "nltk.corpus.reader.TwitterCorpusReader.strings", false]], "stringtokenizer (class in nltk.tokenize.api)": [[303, "nltk.tokenize.api.StringTokenizer", false]], "strip_emr (nltk.stem.cistem.cistem attribute)": [[203, "nltk.stem.cistem.Cistem.strip_emr", false]], "strip_eol_hyphen (nltk.tokenize.nist.nisttokenizer attribute)": [[308, "nltk.tokenize.nist.NISTTokenizer.STRIP_EOL_HYPHEN", false]], "strip_esn (nltk.stem.cistem.cistem attribute)": [[203, "nltk.stem.cistem.Cistem.strip_esn", false]], "strip_ge (nltk.stem.cistem.cistem attribute)": [[203, "nltk.stem.cistem.Cistem.strip_ge", false]], "strip_nd (nltk.stem.cistem.cistem attribute)": [[203, "nltk.stem.cistem.Cistem.strip_nd", false]], "strip_skip (nltk.tokenize.nist.nisttokenizer attribute)": [[308, "nltk.tokenize.nist.NISTTokenizer.STRIP_SKIP", false]], "strip_t (nltk.stem.cistem.cistem attribute)": [[203, "nltk.stem.cistem.Cistem.strip_t", false]], "striprule (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.StripRule", false]], "student_t() (nltk.metrics.association.ngramassocmeasures class method)": [[146, "nltk.metrics.association.NgramAssocMeasures.student_t", false]], "stump() (nltk.classify.decisiontree.decisiontreeclassifier static method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.stump", false]], "stupid_backoff_trigram_model() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.stupid_backoff_trigram_model", false]], "stupid_quotes_1 (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.STUPID_QUOTES_1", false]], "stupid_quotes_2 (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.STUPID_QUOTES_2", false]], "stupidbackoff (class in nltk.lm)": [[135, "nltk.lm.StupidBackoff", false]], "stupidbackoff (class in nltk.lm.models)": [[138, "nltk.lm.models.StupidBackoff", false]], "subclasses() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.subclasses", false]], "subclasses() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.subclasses", false]], "subdir (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.subdir", false]], "subdiv_dict() (nltk.corpus.reader.bcp47.bcp47corpusreader method)": [[60, "nltk.corpus.reader.bcp47.BCP47CorpusReader.subdiv_dict", false]], "subdiv_dict() (nltk.corpus.reader.bcp47corpusreader method)": [[57, "nltk.corpus.reader.BCP47CorpusReader.subdiv_dict", false]], "substitute() (nltk.ccg.api.abstractccgcategory method)": [[13, "nltk.ccg.api.AbstractCCGCategory.substitute", false]], "substitute() (nltk.ccg.api.ccgvar method)": [[13, "nltk.ccg.api.CCGVar.substitute", false]], "substitute() (nltk.ccg.api.direction method)": [[13, "nltk.ccg.api.Direction.substitute", false]], "substitute() (nltk.ccg.api.functionalcategory method)": [[13, "nltk.ccg.api.FunctionalCategory.substitute", false]], "substitute() (nltk.ccg.api.primitivecategory method)": [[13, "nltk.ccg.api.PrimitiveCategory.substitute", false]], "substitute_bindings() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.substitute_bindings", false]], "substitute_bindings() (nltk.inference.resolution.clause method)": [[129, "nltk.inference.resolution.Clause.substitute_bindings", false]], "substitute_bindings() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.substitute_bindings", false]], "substitute_bindings() (nltk.sem.logic.substitutebindingsi method)": [[191, "nltk.sem.logic.SubstituteBindingsI.substitute_bindings", false]], "substitute_bindings() (nltk.sem.logic.variable method)": [[191, "nltk.sem.logic.Variable.substitute_bindings", false]], "substitutebindingsi (class in nltk.sem.logic)": [[191, "nltk.sem.logic.SubstituteBindingsI", false]], "subsumes() (in module nltk.featstruct)": [[120, "nltk.featstruct.subsumes", false]], "subsumes() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.subsumes", false]], "subsumes() (nltk.inference.resolution.clause method)": [[129, "nltk.inference.resolution.Clause.subsumes", false]], "subtrees() (nltk.draw.tree.treesegmentwidget method)": [[118, "nltk.draw.tree.TreeSegmentWidget.subtrees", false]], "subtrees() (nltk.tree.tree method)": [[341, "nltk.tree.Tree.subtrees", false]], "subtrees() (nltk.tree.tree.tree method)": [[348, "nltk.tree.tree.Tree.subtrees", false]], "suf1() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.suf1", false]], "suf32() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.suf32", false]], "suff() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.suff", false]], "suff() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.suff", false]], "suffix_noun_step1a_success (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.suffix_noun_step1a_success", false]], "suffix_noun_step2a_success (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.suffix_noun_step2a_success", false]], "suffix_noun_step2b_success (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.suffix_noun_step2b_success", false]], "suffix_noun_step2c2_success (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.suffix_noun_step2c2_success", false]], "suffix_replace() (in module nltk.stem.util)": [[210, "nltk.stem.util.suffix_replace", false]], "suffix_verb_step2a_success (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.suffix_verb_step2a_success", false]], "suffix_verb_step2b_success (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.suffix_verb_step2b_success", false]], "suffixe_noun_step1b_success (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.suffixe_noun_step1b_success", false]], "suffixes_verb_step1_success (nltk.stem.snowball.arabicstemmer attribute)": [[209, "nltk.stem.snowball.ArabicStemmer.suffixes_verb_step1_success", false]], "sum_logs() (in module nltk.probability)": [[179, "nltk.probability.sum_logs", false]], "sum_to_one (nltk.probability.crossvalidationprobdist attribute)": [[179, "nltk.probability.CrossValidationProbDist.SUM_TO_ONE", false]], "sum_to_one (nltk.probability.heldoutprobdist attribute)": [[179, "nltk.probability.HeldoutProbDist.SUM_TO_ONE", false]], "sum_to_one (nltk.probability.lidstoneprobdist attribute)": [[179, "nltk.probability.LidstoneProbDist.SUM_TO_ONE", false]], "sum_to_one (nltk.probability.probdisti attribute)": [[179, "nltk.probability.ProbDistI.SUM_TO_ONE", false]], "sum_to_one (nltk.probability.simplegoodturingprobdist attribute)": [[179, "nltk.probability.SimpleGoodTuringProbDist.SUM_TO_ONE", false]], "suntsu_chat() (in module nltk.chat.suntsu)": [[22, "nltk.chat.suntsu.suntsu_chat", false]], "supplementary_ideographic_plane (nltk.tokenize.util.cjkchars attribute)": [[320, "nltk.tokenize.util.CJKChars.Supplementary_Ideographic_Plane", false]], "supported_operations (nltk.classify.senna.senna attribute)": [[39, "nltk.classify.senna.Senna.SUPPORTED_OPERATIONS", false]], "svg() (nltk.tree.prettyprinter.treeprettyprinter method)": [[345, "nltk.tree.prettyprinter.TreePrettyPrinter.svg", false]], "svg() (nltk.tree.treeprettyprinter method)": [[341, "nltk.tree.TreePrettyPrinter.svg", false]], "svmclassifier (class in nltk.classify.svm)": [[40, "nltk.classify.svm.SvmClassifier", false]], "svn_revision (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.svn_revision", false]], "swadeshcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.SwadeshCorpusReader", false]], "swadeshcorpusreader (class in nltk.corpus.reader.wordlist)": [[106, "nltk.corpus.reader.wordlist.SwadeshCorpusReader", false]], "swedishstemmer (class in nltk.stem.snowball)": [[209, "nltk.stem.snowball.SwedishStemmer", false]], "switchboardcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.SwitchboardCorpusReader", false]], "switchboardcorpusreader (class in nltk.corpus.reader.switchboard)": [[98, "nltk.corpus.reader.switchboard.SwitchboardCorpusReader", false]], "switchboardturn (class in nltk.corpus.reader.switchboard)": [[98, "nltk.corpus.reader.switchboard.SwitchboardTurn", false]], "syllabletokenizer (class in nltk.tokenize.sonority_sequencing)": [[314, "nltk.tokenize.sonority_sequencing.SyllableTokenizer", false]], "symbol() (nltk.draw.util.symbolwidget method)": [[119, "nltk.draw.util.SymbolWidget.symbol", false]], "symbol() (nltk.grammar.nonterminal method)": [[121, "nltk.grammar.Nonterminal.symbol", false]], "symbol_regex (nltk.tokenize.nist.nisttokenizer attribute)": [[308, "nltk.tokenize.nist.NISTTokenizer.symbol_regex", false]], "symbols (nltk.draw.util.symbolwidget attribute)": [[119, "nltk.draw.util.SymbolWidget.SYMBOLS", false]], "symbols (nltk.sem.drt.drttokens attribute)": [[184, "nltk.sem.drt.DrtTokens.SYMBOLS", false]], "symbols (nltk.sem.evaluate.valuation property)": [[186, "nltk.sem.evaluate.Valuation.symbols", false]], "symbols (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.SYMBOLS", false]], "symbols (nltk.tokenize.nist.nisttokenizer attribute)": [[308, "nltk.tokenize.nist.NISTTokenizer.SYMBOLS", false]], "symbolsheet() (nltk.draw.util.symbolwidget static method)": [[119, "nltk.draw.util.SymbolWidget.symbolsheet", false]], "symbolwidget (class in nltk.draw.util)": [[119, "nltk.draw.util.SymbolWidget", false]], "synonyms() (nltk.corpus.reader.lin.linthesauruscorpusreader method)": [[77, "nltk.corpus.reader.lin.LinThesaurusCorpusReader.synonyms", false]], "synonyms() (nltk.corpus.reader.linthesauruscorpusreader method)": [[57, "nltk.corpus.reader.LinThesaurusCorpusReader.synonyms", false]], "synonyms() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.synonyms", false]], "synonyms() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.synonyms", false]], "synset (class in nltk.corpus.reader.wordnet)": [[107, "nltk.corpus.reader.wordnet.Synset", false]], "synset() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.synset", false]], "synset() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.synset", false]], "synset() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.synset", false]], "synset_from_pos_and_offset() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.synset_from_pos_and_offset", false]], "synset_from_pos_and_offset() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.synset_from_pos_and_offset", false]], "synset_from_sense_key() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.synset_from_sense_key", false]], "synset_from_sense_key() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.synset_from_sense_key", false]], "synsets() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.synsets", false]], "synsets() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.synsets", false]], "syntactic_marker() (nltk.corpus.reader.wordnet.lemma method)": [[107, "nltk.corpus.reader.wordnet.Lemma.syntactic_marker", false]], "syntaxcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.SyntaxCorpusReader", false]], "syntaxcorpusreader (class in nltk.corpus.reader.api)": [[59, "nltk.corpus.reader.api.SyntaxCorpusReader", false]], "tab (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.TAB", false]], "tab2dict() (nltk.tabdata.tabdecoder method)": [[212, "nltk.tabdata.TabDecoder.tab2dict", false]], "tab2intdict() (nltk.tabdata.punktdecoder method)": [[212, "nltk.tabdata.PunktDecoder.tab2intdict", false]], "tab2ivdict() (nltk.tabdata.tabdecoder method)": [[212, "nltk.tabdata.TabDecoder.tab2ivdict", false]], "tab2tup() (nltk.tabdata.tabdecoder method)": [[212, "nltk.tabdata.TabDecoder.tab2tup", false]], "tab2tups() (nltk.tabdata.tabdecoder method)": [[212, "nltk.tabdata.TabDecoder.tab2tups", false]], "tabdecoder (class in nltk.tabdata)": [[212, "nltk.tabdata.TabDecoder", false]], "tabencoder (class in nltk.tabdata)": [[212, "nltk.tabdata.TabEncoder", false]], "table (class in nltk.draw.table)": [[117, "nltk.draw.table.Table", false]], "tableau_test() (in module nltk.inference.tableau)": [[130, "nltk.inference.tableau.tableau_test", false]], "tableauprover (class in nltk.inference.tableau)": [[130, "nltk.inference.tableau.TableauProver", false]], "tableauprovercommand (class in nltk.inference.tableau)": [[130, "nltk.inference.tableau.TableauProverCommand", false]], "tabtokenizer (class in nltk.tokenize.simple)": [[313, "nltk.tokenize.simple.TabTokenizer", false]], "tabulate() (nltk.probability.conditionalfreqdist method)": [[179, "nltk.probability.ConditionalFreqDist.tabulate", false]], "tabulate() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.tabulate", false]], "tadmeventmaxentfeatureencoding (class in nltk.classify.maxent)": [[33, "nltk.classify.maxent.TadmEventMaxentFeatureEncoding", false]], "tadmmaxentclassifier (class in nltk.classify.maxent)": [[33, "nltk.classify.maxent.TadmMaxentClassifier", false]], "tag() (nltk.classify.senna.senna method)": [[39, "nltk.classify.senna.Senna.tag", false]], "tag() (nltk.parse.corenlp.genericcorenlpparser method)": [[163, "nltk.parse.corenlp.GenericCoreNLPParser.tag", false]], "tag() (nltk.tag.api.taggeri method)": [[214, "nltk.tag.api.TaggerI.tag", false]], "tag() (nltk.tag.brill.brilltagger method)": [[215, "nltk.tag.brill.BrillTagger.tag", false]], "tag() (nltk.tag.crf.crftagger method)": [[217, "nltk.tag.crf.CRFTagger.tag", false]], "tag() (nltk.tag.hmm.hiddenmarkovmodeltagger method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.tag", false]], "tag() (nltk.tag.hunpos.hunpostagger method)": [[219, "nltk.tag.hunpos.HunposTagger.tag", false]], "tag() (nltk.tag.perceptron.perceptrontagger method)": [[221, "nltk.tag.perceptron.PerceptronTagger.tag", false]], "tag() (nltk.tag.sequential.sequentialbackofftagger method)": [[223, "nltk.tag.sequential.SequentialBackoffTagger.tag", false]], "tag() (nltk.tag.stanford.stanfordtagger method)": [[224, "nltk.tag.stanford.StanfordTagger.tag", false]], "tag() (nltk.tag.tnt.tnt method)": [[225, "nltk.tag.tnt.TnT.tag", false]], "tag2q() (in module nltk.langnames)": [[133, "nltk.langnames.tag2q", false]], "tag_ns (nltk.corpus.reader.mte.mtefilereader attribute)": [[79, "nltk.corpus.reader.mte.MTEFileReader.tag_ns", false]], "tag_one() (nltk.tag.sequential.sequentialbackofftagger method)": [[223, "nltk.tag.sequential.SequentialBackoffTagger.tag_one", false]], "tag_pattern2re_pattern() (in module nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.tag_pattern2re_pattern", false]], "tag_sents() (nltk.classify.senna.senna method)": [[39, "nltk.classify.senna.Senna.tag_sents", false]], "tag_sents() (nltk.parse.corenlp.genericcorenlpparser method)": [[163, "nltk.parse.corenlp.GenericCoreNLPParser.tag_sents", false]], "tag_sents() (nltk.tag.api.taggeri method)": [[214, "nltk.tag.api.TaggerI.tag_sents", false]], "tag_sents() (nltk.tag.crf.crftagger method)": [[217, "nltk.tag.crf.CRFTagger.tag_sents", false]], "tag_sents() (nltk.tag.senna.sennachunktagger method)": [[222, "nltk.tag.senna.SennaChunkTagger.tag_sents", false]], "tag_sents() (nltk.tag.senna.sennanertagger method)": [[222, "nltk.tag.senna.SennaNERTagger.tag_sents", false]], "tag_sents() (nltk.tag.senna.sennatagger method)": [[222, "nltk.tag.senna.SennaTagger.tag_sents", false]], "tag_sents() (nltk.tag.stanford.stanfordtagger method)": [[224, "nltk.tag.stanford.StanfordTagger.tag_sents", false]], "tagdata() (nltk.tag.tnt.tnt method)": [[225, "nltk.tag.tnt.TnT.tagdata", false]], "tagged_chunks() (nltk.corpus.reader.semcor.semcorcorpusreader method)": [[93, "nltk.corpus.reader.semcor.SemcorCorpusReader.tagged_chunks", false]], "tagged_chunks() (nltk.corpus.reader.semcorcorpusreader method)": [[57, "nltk.corpus.reader.SemcorCorpusReader.tagged_chunks", false]], "tagged_discourses() (nltk.corpus.reader.switchboard.switchboardcorpusreader method)": [[98, "nltk.corpus.reader.switchboard.SwitchboardCorpusReader.tagged_discourses", false]], "tagged_discourses() (nltk.corpus.reader.switchboardcorpusreader method)": [[57, "nltk.corpus.reader.SwitchboardCorpusReader.tagged_discourses", false]], "tagged_paras() (nltk.corpus.reader.bracket_parse.categorizedbracketparsecorpusreader method)": [[62, "nltk.corpus.reader.bracket_parse.CategorizedBracketParseCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.categorizedbracketparsecorpusreader method)": [[57, "nltk.corpus.reader.CategorizedBracketParseCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.categorizedtaggedcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedTaggedCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.chasen.chasencorpusreader method)": [[64, "nltk.corpus.reader.chasen.ChasenCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.chasencorpusreader method)": [[57, "nltk.corpus.reader.ChasenCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.chunked.chunkedcorpusreader method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.chunkedcorpusreader method)": [[57, "nltk.corpus.reader.ChunkedCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.ipipan.ipipancorpusreader method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.ipipancorpusreader method)": [[57, "nltk.corpus.reader.IPIPANCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.mte.mtecorpusreader method)": [[79, "nltk.corpus.reader.mte.MTECorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.mte.mtefilereader method)": [[79, "nltk.corpus.reader.mte.MTEFileReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.mtecorpusreader method)": [[57, "nltk.corpus.reader.MTECorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.pl196x.pl196xcorpusreader method)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.pl196xcorpusreader method)": [[57, "nltk.corpus.reader.Pl196xCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.tagged.categorizedtaggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.CategorizedTaggedCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.tagged.taggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.TaggedCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.tagged.timittaggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.TimitTaggedCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.taggedcorpusreader method)": [[57, "nltk.corpus.reader.TaggedCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.timittaggedcorpusreader method)": [[57, "nltk.corpus.reader.TimitTaggedCorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.ycoe.ycoecorpusreader method)": [[109, "nltk.corpus.reader.ycoe.YCOECorpusReader.tagged_paras", false]], "tagged_paras() (nltk.corpus.reader.ycoecorpusreader method)": [[57, "nltk.corpus.reader.YCOECorpusReader.tagged_paras", false]], "tagged_parse() (nltk.parse.bllip.bllipparser method)": [[161, "nltk.parse.bllip.BllipParser.tagged_parse", false]], "tagged_parse() (nltk.parse.stanford.genericstanfordparser method)": [[175, "nltk.parse.stanford.GenericStanfordParser.tagged_parse", false]], "tagged_parse_sents() (nltk.parse.stanford.genericstanfordparser method)": [[175, "nltk.parse.stanford.GenericStanfordParser.tagged_parse_sents", false]], "tagged_parse_sents() (nltk.parse.stanford.stanfordneuraldependencyparser method)": [[175, "nltk.parse.stanford.StanfordNeuralDependencyParser.tagged_parse_sents", false]], "tagged_posts() (nltk.corpus.reader.nps_chat.npschatcorpusreader method)": [[82, "nltk.corpus.reader.nps_chat.NPSChatCorpusReader.tagged_posts", false]], "tagged_posts() (nltk.corpus.reader.npschatcorpusreader method)": [[57, "nltk.corpus.reader.NPSChatCorpusReader.tagged_posts", false]], "tagged_sents() (nltk.corpus.reader.api.syntaxcorpusreader method)": [[59, "nltk.corpus.reader.api.SyntaxCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.bnc.bnccorpusreader method)": [[61, "nltk.corpus.reader.bnc.BNCCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.bnccorpusreader method)": [[57, "nltk.corpus.reader.BNCCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.bracket_parse.categorizedbracketparsecorpusreader method)": [[62, "nltk.corpus.reader.bracket_parse.CategorizedBracketParseCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.categorizedbracketparsecorpusreader method)": [[57, "nltk.corpus.reader.CategorizedBracketParseCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.categorizedtaggedcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedTaggedCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.chasen.chasencorpusreader method)": [[64, "nltk.corpus.reader.chasen.ChasenCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.chasencorpusreader method)": [[57, "nltk.corpus.reader.ChasenCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.childes.childescorpusreader method)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.childescorpusreader method)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.chunked.chunkedcorpusreader method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.chunkedcorpusreader method)": [[57, "nltk.corpus.reader.ChunkedCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.dependency.dependencycorpusreader method)": [[71, "nltk.corpus.reader.dependency.DependencyCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.dependencycorpusreader method)": [[57, "nltk.corpus.reader.DependencyCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.indian.indiancorpusreader method)": [[74, "nltk.corpus.reader.indian.IndianCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.indiancorpusreader method)": [[57, "nltk.corpus.reader.IndianCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.ipipan.ipipancorpusreader method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.ipipancorpusreader method)": [[57, "nltk.corpus.reader.IPIPANCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.mte.mtecorpusreader method)": [[79, "nltk.corpus.reader.mte.MTECorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.mte.mtefilereader method)": [[79, "nltk.corpus.reader.mte.MTEFileReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.mtecorpusreader method)": [[57, "nltk.corpus.reader.MTECorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.pl196x.pl196xcorpusreader method)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.pl196xcorpusreader method)": [[57, "nltk.corpus.reader.Pl196xCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.semcor.semcorcorpusreader method)": [[93, "nltk.corpus.reader.semcor.SemcorCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.semcorcorpusreader method)": [[57, "nltk.corpus.reader.SemcorCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.syntaxcorpusreader method)": [[57, "nltk.corpus.reader.SyntaxCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.tagged.categorizedtaggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.CategorizedTaggedCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.tagged.taggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.TaggedCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.taggedcorpusreader method)": [[57, "nltk.corpus.reader.TaggedCorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.ycoe.ycoecorpusreader method)": [[109, "nltk.corpus.reader.ycoe.YCOECorpusReader.tagged_sents", false]], "tagged_sents() (nltk.corpus.reader.ycoecorpusreader method)": [[57, "nltk.corpus.reader.YCOECorpusReader.tagged_sents", false]], "tagged_spans (nltk.corpus.reader.conll.conllsrlinstance attribute)": [[69, "nltk.corpus.reader.conll.ConllSRLInstance.tagged_spans", false]], "tagged_treebank_para_block_reader() (in module nltk.corpus.reader)": [[57, "nltk.corpus.reader.tagged_treebank_para_block_reader", false]], "tagged_treebank_para_block_reader() (in module nltk.corpus.reader.util)": [[104, "nltk.corpus.reader.util.tagged_treebank_para_block_reader", false]], "tagged_turns() (nltk.corpus.reader.switchboard.switchboardcorpusreader method)": [[98, "nltk.corpus.reader.switchboard.SwitchboardCorpusReader.tagged_turns", false]], "tagged_turns() (nltk.corpus.reader.switchboardcorpusreader method)": [[57, "nltk.corpus.reader.SwitchboardCorpusReader.tagged_turns", false]], "tagged_words() (nltk.corpus.reader.api.syntaxcorpusreader method)": [[59, "nltk.corpus.reader.api.SyntaxCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.bnc.bnccorpusreader method)": [[61, "nltk.corpus.reader.bnc.BNCCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.bnccorpusreader method)": [[57, "nltk.corpus.reader.BNCCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.bracket_parse.categorizedbracketparsecorpusreader method)": [[62, "nltk.corpus.reader.bracket_parse.CategorizedBracketParseCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.categorizedbracketparsecorpusreader method)": [[57, "nltk.corpus.reader.CategorizedBracketParseCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.categorizedtaggedcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedTaggedCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.chasen.chasencorpusreader method)": [[64, "nltk.corpus.reader.chasen.ChasenCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.chasencorpusreader method)": [[57, "nltk.corpus.reader.ChasenCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.childes.childescorpusreader method)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.childescorpusreader method)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.chunked.chunkedcorpusreader method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.chunkedcorpusreader method)": [[57, "nltk.corpus.reader.ChunkedCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.dependency.dependencycorpusreader method)": [[71, "nltk.corpus.reader.dependency.DependencyCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.dependencycorpusreader method)": [[57, "nltk.corpus.reader.DependencyCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.indian.indiancorpusreader method)": [[74, "nltk.corpus.reader.indian.IndianCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.indiancorpusreader method)": [[57, "nltk.corpus.reader.IndianCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.ipipan.ipipancorpusreader method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.ipipancorpusreader method)": [[57, "nltk.corpus.reader.IPIPANCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.mte.mtecorpusreader method)": [[79, "nltk.corpus.reader.mte.MTECorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.mte.mtefilereader method)": [[79, "nltk.corpus.reader.mte.MTEFileReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.mtecorpusreader method)": [[57, "nltk.corpus.reader.MTECorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.nkjp.nkjpcorpusreader method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.nkjpcorpusreader method)": [[57, "nltk.corpus.reader.NKJPCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.nps_chat.npschatcorpusreader method)": [[82, "nltk.corpus.reader.nps_chat.NPSChatCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.npschatcorpusreader method)": [[57, "nltk.corpus.reader.NPSChatCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.pl196x.pl196xcorpusreader method)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.pl196xcorpusreader method)": [[57, "nltk.corpus.reader.Pl196xCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.switchboard.switchboardcorpusreader method)": [[98, "nltk.corpus.reader.switchboard.SwitchboardCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.switchboardcorpusreader method)": [[57, "nltk.corpus.reader.SwitchboardCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.syntaxcorpusreader method)": [[57, "nltk.corpus.reader.SyntaxCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.tagged.categorizedtaggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.CategorizedTaggedCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.tagged.taggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.TaggedCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.taggedcorpusreader method)": [[57, "nltk.corpus.reader.TaggedCorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.ycoe.ycoecorpusreader method)": [[109, "nltk.corpus.reader.ycoe.YCOECorpusReader.tagged_words", false]], "tagged_words() (nltk.corpus.reader.ycoecorpusreader method)": [[57, "nltk.corpus.reader.YCOECorpusReader.tagged_words", false]], "taggedcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.TaggedCorpusReader", false]], "taggedcorpusreader (class in nltk.corpus.reader.tagged)": [[99, "nltk.corpus.reader.tagged.TaggedCorpusReader", false]], "taggedcorpusview (class in nltk.corpus.reader.tagged)": [[99, "nltk.corpus.reader.tagged.TaggedCorpusView", false]], "taggedsent_to_conll() (in module nltk.parse.util)": [[177, "nltk.parse.util.taggedsent_to_conll", false]], "taggedsents_to_conll() (in module nltk.parse.util)": [[177, "nltk.parse.util.taggedsents_to_conll", false]], "tagger (nltk.corpus.reader.propbank.propbankinstance attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.tagger", false]], "taggeri (class in nltk.tag.api)": [[214, "nltk.tag.api.TaggerI", false]], "tagrule (class in nltk.tbl.rule)": [[232, "nltk.tbl.rule.TagRule", false]], "tags() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.tags", false]], "tags_to_ignore (nltk.corpus.reader.bnc.bncwordview attribute)": [[61, "nltk.corpus.reader.bnc.BNCWordView.tags_to_ignore", false]], "tagset_mapping() (in module nltk.tag.mapping)": [[220, "nltk.tag.mapping.tagset_mapping", false]], "tagstr2tree() (in module nltk.chunk.util)": [[29, "nltk.chunk.util.tagstr2tree", false]], "targets() (nltk.misc.minimalset.minimalset method)": [[156, "nltk.misc.minimalset.MinimalSet.targets", false]], "teardown() (nltk.test.unit.test_concordance.testconcordance method)": [[260, "nltk.test.unit.test_concordance.TestConcordance.tearDown", false]], "teardown_loaded_corpora() (in module nltk.test.conftest)": [[238, "nltk.test.conftest.teardown_loaded_corpora", false]], "teardown_module() (in module nltk.test.unit.test_corenlp)": [[261, "nltk.test.unit.test_corenlp.teardown_module", false]], "teardown_module() (in module nltk.test.unit.test_seekable_unicode_stream_reader)": [[279, "nltk.test.unit.test_seekable_unicode_stream_reader.teardown_module", false]], "teardownclass() (nltk.test.unit.test_concordance.testconcordance class method)": [[260, "nltk.test.unit.test_concordance.TestConcordance.tearDownClass", false]], "teicorpusview (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.TEICorpusView", false]], "teicorpusview (class in nltk.corpus.reader.pl196x)": [[86, "nltk.corpus.reader.pl196x.TEICorpusView", false]], "tell() (nltk.data.seekableunicodestreamreader method)": [[111, "nltk.data.SeekableUnicodeStreamReader.tell", false]], "template (class in nltk.tbl.template)": [[233, "nltk.tbl.template.Template", false]], "test() (in module nltk.corpus.reader.chasen)": [[64, "nltk.corpus.reader.chasen.test", false]], "test() (in module nltk.corpus.reader.knbc)": [[76, "nltk.corpus.reader.knbc.test", false]], "test() (nltk.tag.hmm.hiddenmarkovmodeltagger method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.test", false]], "test_absolute_discounting_trigram_score() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_absolute_discounting_trigram_score", false]], "test_advanced() (nltk.test.unit.test_disagreement.testdisagreement method)": [[265, "nltk.test.unit.test_disagreement.TestDisagreement.test_advanced", false]], "test_advanced2() (nltk.test.unit.test_disagreement.testdisagreement method)": [[265, "nltk.test.unit.test_disagreement.TestDisagreement.test_advanced2", false]], "test_affix_tagger() (nltk.test.unit.test_json_serialization.testjsonserialization method)": [[271, "nltk.test.unit.test_json_serialization.TestJSONSerialization.test_affix_tagger", false]], "test_aline() (in module nltk.test.unit.test_aline)": [[252, "nltk.test.unit.test_aline.test_aline", false]], "test_aline_delta() (in module nltk.test.unit.test_aline)": [[252, "nltk.test.unit.test_aline.test_aline_delta", false]], "test_antonyms() (nltk.test.unit.test_wordnet.wordnnetdemo method)": [[287, "nltk.test.unit.test_wordnet.WordnNetDemo.test_antonyms", false]], "test_arabic() (nltk.test.unit.test_stem.snowballtest method)": [[281, "nltk.test.unit.test_stem.SnowballTest.test_arabic", false]], "test_backward_probability() (in module nltk.test.unit.test_hmm)": [[269, "nltk.test.unit.test_hmm.test_backward_probability", false]], "test_bad_operator() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_bad_operator", false]], "test_basic() (in module nltk.test.unit.test_tag)": [[282, "nltk.test.unit.test_tag.test_basic", false]], "test_best_model2_alignment() (nltk.test.unit.translate.test_ibm_model.testibmmodel method)": [[296, "nltk.test.unit.translate.test_ibm_model.TestIBMModel.test_best_model2_alignment", false]], "test_best_model2_alignment_does_not_change_pegged_alignment() (nltk.test.unit.translate.test_ibm_model.testibmmodel method)": [[296, "nltk.test.unit.translate.test_ibm_model.TestIBMModel.test_best_model2_alignment_does_not_change_pegged_alignment", false]], "test_best_model2_alignment_handles_empty_src_sentence() (nltk.test.unit.translate.test_ibm_model.testibmmodel method)": [[296, "nltk.test.unit.translate.test_ibm_model.TestIBMModel.test_best_model2_alignment_handles_empty_src_sentence", false]], "test_best_model2_alignment_handles_empty_trg_sentence() (nltk.test.unit.translate.test_ibm_model.testibmmodel method)": [[296, "nltk.test.unit.translate.test_ibm_model.TestIBMModel.test_best_model2_alignment_handles_empty_trg_sentence", false]], "test_best_model2_alignment_handles_fertile_words() (nltk.test.unit.translate.test_ibm_model.testibmmodel method)": [[296, "nltk.test.unit.translate.test_ibm_model.TestIBMModel.test_best_model2_alignment_handles_fertile_words", false]], "test_best_returns_none_when_stack_is_empty() (nltk.test.unit.translate.test_stack_decoder.teststack method)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestStack.test_best_returns_none_when_stack_is_empty", false]], "test_best_returns_the_best_hypothesis() (nltk.test.unit.translate.test_stack_decoder.teststack method)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestStack.test_best_returns_the_best_hypothesis", false]], "test_bigram2() (in module nltk.test.unit.test_collocations)": [[259, "nltk.test.unit.test_collocations.test_bigram2", false]], "test_bigram3() (in module nltk.test.unit.test_collocations)": [[259, "nltk.test.unit.test_collocations.test_bigram3", false]], "test_bigram5() (in module nltk.test.unit.test_collocations)": [[259, "nltk.test.unit.test_collocations.test_bigram5", false]], "test_bigram_counts_seen_ngrams() (nltk.test.unit.lm.test_counter.testngramcounter method)": [[248, "nltk.test.unit.lm.test_counter.TestNgramCounter.test_bigram_counts_seen_ngrams", false]], "test_bigram_counts_unseen_ngrams() (nltk.test.unit.lm.test_counter.testngramcounter method)": [[248, "nltk.test.unit.lm.test_counter.TestNgramCounter.test_bigram_counts_unseen_ngrams", false]], "test_brevity_penalty() (nltk.test.unit.translate.test_bleu.testbleu method)": [[289, "nltk.test.unit.translate.test_bleu.TestBLEU.test_brevity_penalty", false]], "test_brill_demo() (nltk.test.unit.test_brill.testbrill method)": [[254, "nltk.test.unit.test_brill.TestBrill.test_brill_demo", false]], "test_brill_tagger() (nltk.test.unit.test_json_serialization.testjsonserialization method)": [[271, "nltk.test.unit.test_json_serialization.TestJSONSerialization.test_brill_tagger", false]], "test_build_model() (in module nltk.inference.mace)": [[126, "nltk.inference.mace.test_build_model", false]], "test_candidate_type_check() (nltk.test.unit.translate.test_meteor.testmeteor method)": [[297, "nltk.test.unit.translate.test_meteor.TestMETEOR.test_candidate_type_check", false]], "test_case_where_n_is_bigger_than_hypothesis_length() (nltk.test.unit.translate.test_bleu.testbleufringecases method)": [[289, "nltk.test.unit.translate.test_bleu.TestBLEUFringeCases.test_case_where_n_is_bigger_than_hypothesis_length", false]], "test_catalan() (nltk.test.unit.test_corpora.testcess method)": [[262, "nltk.test.unit.test_corpora.TestCess.test_catalan", false]], "test_categories() (nltk.test.unit.test_corpora.testptb method)": [[262, "nltk.test.unit.test_corpora.TestPTB.test_categories", false]], "test_category_words() (nltk.test.unit.test_corpora.testptb method)": [[262, "nltk.test.unit.test_corpora.TestPTB.test_category_words", false]], "test_clausify() (in module nltk.inference.resolution)": [[129, "nltk.inference.resolution.test_clausify", false]], "test_comments() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_comments", false]], "test_complex() (nltk.test.unit.test_cfg2chomsky.chomskynormalformforcfgtest method)": [[256, "nltk.test.unit.test_cfg2chomsky.ChomskyNormalFormForCFGTest.test_complex", false]], "test_compute_future_costs() (nltk.test.unit.translate.test_stack_decoder.teststackdecoder method)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestStackDecoder.test_compute_future_costs", false]], "test_compute_future_costs_for_phrases_not_in_phrase_table() (nltk.test.unit.translate.test_stack_decoder.teststackdecoder method)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestStackDecoder.test_compute_future_costs_for_phrases_not_in_phrase_table", false]], "test_concordance_lines() (nltk.test.unit.test_concordance.testconcordance method)": [[260, "nltk.test.unit.test_concordance.TestConcordance.test_concordance_lines", false]], "test_concordance_list() (nltk.test.unit.test_concordance.testconcordance method)": [[260, "nltk.test.unit.test_concordance.TestConcordance.test_concordance_list", false]], "test_concordance_print() (nltk.test.unit.test_concordance.testconcordance method)": [[260, "nltk.test.unit.test_concordance.TestConcordance.test_concordance_print", false]], "test_concordance_width() (nltk.test.unit.test_concordance.testconcordance method)": [[260, "nltk.test.unit.test_concordance.TestConcordance.test_concordance_width", false]], "test_config() (in module nltk.inference.prover9)": [[128, "nltk.inference.prover9.test_config", false]], "test_convert_to_prover9() (in module nltk.inference.prover9)": [[128, "nltk.inference.prover9.test_convert_to_prover9", false]], "test_corpus_bleu() (nltk.test.unit.translate.test_bleu.testbleuvsmteval13a method)": [[289, "nltk.test.unit.translate.test_bleu.TestBLEUvsMteval13a.test_corpus_bleu", false]], "test_corpus_bleu_with_bad_sentence() (nltk.test.unit.translate.test_bleu.testbleuwithbadsentence method)": [[289, "nltk.test.unit.translate.test_bleu.TestBLEUWithBadSentence.test_corpus_bleu_with_bad_sentence", false]], "test_corpus_bleu_with_multiple_weights() (nltk.test.unit.translate.test_bleu.testbleuwithmultipleweights method)": [[289, "nltk.test.unit.translate.test_bleu.TestBLEUWithMultipleWeights.test_corpus_bleu_with_multiple_weights", false]], "test_corpus_reader() (nltk.test.unit.test_pl196x.testcorpusviews method)": [[275, "nltk.test.unit.test_pl196x.TestCorpusViews.test_corpus_reader", false]], "test_correct_file() (nltk.test.unit.test_twitter_auth.testcredentials method)": [[285, "nltk.test.unit.test_twitter_auth.TestCredentials.test_correct_file", false]], "test_correct_length() (nltk.test.unit.test_corpus_views.testcorpusviews method)": [[263, "nltk.test.unit.test_corpus_views.TestCorpusViews.test_correct_length", false]], "test_correct_values() (nltk.test.unit.test_corpus_views.testcorpusviews method)": [[263, "nltk.test.unit.test_corpus_views.TestCorpusViews.test_correct_values", false]], "test_counter_len_changes_with_lookup() (nltk.test.unit.lm.test_counter.testngramcounter method)": [[248, "nltk.test.unit.lm.test_counter.TestNgramCounter.test_counter_len_changes_with_lookup", false]], "test_counts_set_correctly() (nltk.test.unit.lm.test_vocabulary.ngrammodelvocabularytests method)": [[251, "nltk.test.unit.lm.test_vocabulary.NgramModelVocabularyTests.test_counts_set_correctly", false]], "test_creation_with_counter() (nltk.test.unit.lm.test_vocabulary.ngrammodelvocabularytests method)": [[251, "nltk.test.unit.lm.test_vocabulary.NgramModelVocabularyTests.test_creation_with_counter", false]], "test_cutoff_setter_checks_value() (nltk.test.unit.lm.test_vocabulary.ngrammodelvocabularytests method)": [[251, "nltk.test.unit.lm.test_vocabulary.NgramModelVocabularyTests.test_cutoff_setter_checks_value", false]], "test_cutoff_value_set_correctly() (nltk.test.unit.lm.test_vocabulary.ngrammodelvocabularytests method)": [[251, "nltk.test.unit.lm.test_vocabulary.NgramModelVocabularyTests.test_cutoff_value_set_correctly", false]], "test_default_tagger() (nltk.test.unit.test_json_serialization.testjsonserialization method)": [[271, "nltk.test.unit.test_json_serialization.TestJSONSerialization.test_default_tagger", false]], "test_dependency_parser() (nltk.test.unit.test_corenlp.testparserapi method)": [[261, "nltk.test.unit.test_corenlp.TestParserAPI.test_dependency_parser", false]], "test_derivationally_related_forms() (nltk.test.unit.test_wordnet.wordnnetdemo method)": [[287, "nltk.test.unit.test_wordnet.WordnNetDemo.test_derivationally_related_forms", false]], "test_distortion_score() (nltk.test.unit.translate.test_stack_decoder.teststackdecoder method)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestStackDecoder.test_distortion_score", false]], "test_distortion_score_of_first_expansion() (nltk.test.unit.translate.test_stack_decoder.teststackdecoder method)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestStackDecoder.test_distortion_score_of_first_expansion", false]], "test_domains() (nltk.test.unit.test_wordnet.wordnnetdemo method)": [[287, "nltk.test.unit.test_wordnet.WordnNetDemo.test_domains", false]], "test_downloader_using_existing_parent_download_dir() (in module nltk.test.unit.test_downloader)": [[267, "nltk.test.unit.test_downloader.test_downloader_using_existing_parent_download_dir", false]], "test_downloader_using_non_existing_parent_download_dir() (in module nltk.test.unit.test_downloader)": [[267, "nltk.test.unit.test_downloader.test_downloader_using_non_existing_parent_download_dir", false]], "test_draw() (in module nltk.sem.drt)": [[184, "nltk.sem.drt.test_draw", false]], "test_easy() (nltk.test.unit.test_disagreement.testdisagreement method)": [[265, "nltk.test.unit.test_disagreement.TestDisagreement.test_easy", false]], "test_easy2() (nltk.test.unit.test_disagreement.testdisagreement method)": [[265, "nltk.test.unit.test_disagreement.TestDisagreement.test_easy2", false]], "test_easy3() (nltk.test.unit.test_disagreement.testdisagreement method)": [[265, "nltk.test.unit.test_disagreement.TestDisagreement.test_easy3", false]], "test_emoji_tokenizer() (nltk.test.unit.test_tokenize.testtokenize method)": [[284, "nltk.test.unit.test_tokenize.TestTokenize.test_emoji_tokenizer", false]], "test_empty_hypothesis() (nltk.test.unit.translate.test_bleu.testbleufringecases method)": [[289, "nltk.test.unit.translate.test_bleu.TestBLEUFringeCases.test_empty_hypothesis", false]], "test_empty_inputs() (nltk.test.unit.lm.test_counter.testngramcountertraining method)": [[248, "nltk.test.unit.lm.test_counter.TestNgramCounterTraining.test_empty_inputs", false]], "test_empty_references() (nltk.test.unit.translate.test_bleu.testbleufringecases method)": [[289, "nltk.test.unit.translate.test_bleu.TestBLEUFringeCases.test_empty_references", false]], "test_empty_references_and_hypothesis() (nltk.test.unit.translate.test_bleu.testbleufringecases method)": [[289, "nltk.test.unit.translate.test_bleu.TestBLEUFringeCases.test_empty_references_and_hypothesis", false]], "test_entries() (nltk.test.unit.test_corpora.testmwappdb method)": [[262, "nltk.test.unit.test_corpora.TestMWAPPDB.test_entries", false]], "test_environment() (nltk.test.unit.test_twitter_auth.testcredentials method)": [[285, "nltk.test.unit.test_twitter_auth.TestCredentials.test_environment", false]], "test_eqality() (nltk.test.unit.lm.test_vocabulary.ngrammodelvocabularytests method)": [[251, "nltk.test.unit.lm.test_vocabulary.NgramModelVocabularyTests.test_eqality", false]], "test_esp() (nltk.test.unit.test_corpora.testcess method)": [[262, "nltk.test.unit.test_corpora.TestCess.test_esp", false]], "test_everygrams_max_len() (in module nltk.test.unit.test_util)": [[286, "nltk.test.unit.test_util.test_everygrams_max_len", false]], "test_everygrams_min_len() (in module nltk.test.unit.test_util)": [[286, "nltk.test.unit.test_util.test_everygrams_min_len", false]], "test_everygrams_pad_left() (in module nltk.test.unit.test_util)": [[286, "nltk.test.unit.test_util.test_everygrams_pad_left", false]], "test_everygrams_pad_right() (in module nltk.test.unit.test_util)": [[286, "nltk.test.unit.test_util.test_everygrams_pad_right", false]], "test_everygrams_without_padding() (in module nltk.test.unit.test_util)": [[286, "nltk.test.unit.test_util.test_everygrams_without_padding", false]], "test_examples() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_examples", false]], "test_feature_extractor_object() (nltk.test.unit.test_rte_classify.testrteclassifier method)": [[278, "nltk.test.unit.test_rte_classify.TestRTEClassifier.test_feature_extractor_object", false]], "test_file_is_wrong() (in module nltk.test.unit.test_json2csv_corpus)": [[270, "nltk.test.unit.test_json2csv_corpus.test_file_is_wrong", false]], "test_fileids() (nltk.test.unit.test_corpora.testmwappdb method)": [[262, "nltk.test.unit.test_corpora.TestMWAPPDB.test_fileids", false]], "test_fileids() (nltk.test.unit.test_corpora.testptb method)": [[262, "nltk.test.unit.test_corpora.TestPTB.test_fileids", false]], "test_find_all_src_phrases() (nltk.test.unit.translate.test_stack_decoder.teststackdecoder method)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestStackDecoder.test_find_all_src_phrases", false]], "test_find_raises_exception() (in module nltk.test.unit.test_data)": [[264, "nltk.test.unit.test_data.test_find_raises_exception", false]], "test_find_raises_exception_with_full_resource_name() (in module nltk.test.unit.test_data)": [[264, "nltk.test.unit.test_data.test_find_raises_exception_with_full_resource_name", false]], "test_forward_probability() (in module nltk.test.unit.test_hmm)": [[269, "nltk.test.unit.test_hmm.test_forward_probability", false]], "test_forward_probability2() (in module nltk.test.unit.test_hmm)": [[269, "nltk.test.unit.test_hmm.test_forward_probability2", false]], "test_framefiles_fileids() (nltk.test.unit.test_nombank.nombankdemo method)": [[274, "nltk.test.unit.test_nombank.NombankDemo.test_framefiles_fileids", false]], "test_from_eflomal_outputs() (nltk.test.unit.translate.test_gdfa.testgdfa method)": [[290, "nltk.test.unit.translate.test_gdfa.TestGDFA.test_from_eflomal_outputs", false]], "test_full_matches() (nltk.test.unit.translate.test_bleu.testbleu method)": [[289, "nltk.test.unit.translate.test_bleu.TestBLEU.test_full_matches", false]], "test_future_score() (nltk.test.unit.translate.test_stack_decoder.teststackdecoder method)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestStackDecoder.test_future_score", false]], "test_generate_cycle() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_generate_cycle", false]], "test_generate_none_text_seed() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_generate_None_text_seed", false]], "test_generate_one_from_limiting_context() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_generate_one_from_limiting_context", false]], "test_generate_one_from_varied_context() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_generate_one_from_varied_context", false]], "test_generate_one_no_context() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_generate_one_no_context", false]], "test_generate_oov_text_seed() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_generate_oov_text_seed", false]], "test_generate_with_text_seed() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_generate_with_text_seed", false]], "test_german() (nltk.test.unit.test_stem.snowballtest method)": [[281, "nltk.test.unit.test_stem.SnowballTest.test_german", false]], "test_hillclimb() (nltk.test.unit.translate.test_ibm_model.testibmmodel method)": [[296, "nltk.test.unit.translate.test_ibm_model.TestIBMModel.test_hillclimb", false]], "test_hyperhyponyms() (nltk.test.unit.test_wordnet.wordnnetdemo method)": [[287, "nltk.test.unit.test_wordnet.WordnNetDemo.test_hyperhyponyms", false]], "test_in_topic_domains() (nltk.test.unit.test_wordnet.wordnnetdemo method)": [[287, "nltk.test.unit.test_wordnet.WordnNetDemo.test_in_topic_domains", false]], "test_increment() (nltk.test.unit.test_cfd_mutation.testemptycondfreq method)": [[255, "nltk.test.unit.test_cfd_mutation.TestEmptyCondFreq.test_increment", false]], "test_instance() (nltk.test.unit.test_nombank.nombankdemo method)": [[274, "nltk.test.unit.test_nombank.NombankDemo.test_instance", false]], "test_iterable_type_for_all_lemma_names() (nltk.test.unit.test_wordnet.wordnnetdemo method)": [[287, "nltk.test.unit.test_wordnet.WordnNetDemo.test_iterable_type_for_all_lemma_names", false]], "test_iterating_returns_an_iterator_ordered_by_frequency() (in module nltk.test.unit.test_freqdist)": [[268, "nltk.test.unit.test_freqdist.test_iterating_returns_an_iterator_ordered_by_frequency", false]], "test_kneserney_trigram_score() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_kneserney_trigram_score", false]], "test_labeled_nodes() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_labeled_nodes", false]], "test_laplace_bigram_entropy_perplexity() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_laplace_bigram_entropy_perplexity", false]], "test_laplace_bigram_score() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_laplace_bigram_score", false]], "test_laplace_gamma() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_laplace_gamma", false]], "test_lch() (nltk.test.unit.test_wordnet.wordnnetdemo method)": [[287, "nltk.test.unit.test_wordnet.WordnNetDemo.test_lch", false]], "test_legality_principle_syllable_tokenizer() (nltk.test.unit.test_tokenize.testtokenize method)": [[284, "nltk.test.unit.test_tokenize.TestTokenize.test_legality_principle_syllable_tokenizer", false]], "test_len_is_constant() (nltk.test.unit.lm.test_vocabulary.ngrammodelvocabularytests method)": [[251, "nltk.test.unit.lm.test_vocabulary.NgramModelVocabularyTests.test_len_is_constant", false]], "test_length_one_hypothesis() (nltk.test.unit.translate.test_bleu.testbleufringecases method)": [[289, "nltk.test.unit.translate.test_bleu.TestBLEUFringeCases.test_length_one_hypothesis", false]], "test_lidstone_bigram_score() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_lidstone_bigram_score", false]], "test_lidstone_entropy_perplexity() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_lidstone_entropy_perplexity", false]], "test_lidstone_trigram_score() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_lidstone_trigram_score", false]], "test_lookup() (nltk.test.unit.lm.test_vocabulary.ngrammodelvocabularytests method)": [[251, "nltk.test.unit.lm.test_vocabulary.NgramModelVocabularyTests.test_lookup", false]], "test_lookup_empty_iterables() (nltk.test.unit.lm.test_vocabulary.ngrammodelvocabularytests method)": [[251, "nltk.test.unit.lm.test_vocabulary.NgramModelVocabularyTests.test_lookup_empty_iterables", false]], "test_lookup_empty_str() (nltk.test.unit.lm.test_vocabulary.ngrammodelvocabularytests method)": [[251, "nltk.test.unit.lm.test_vocabulary.NgramModelVocabularyTests.test_lookup_empty_str", false]], "test_lookup_int() (nltk.test.unit.lm.test_vocabulary.ngrammodelvocabularytests method)": [[251, "nltk.test.unit.lm.test_vocabulary.NgramModelVocabularyTests.test_lookup_int", false]], "test_lookup_iterables() (nltk.test.unit.lm.test_vocabulary.ngrammodelvocabularytests method)": [[251, "nltk.test.unit.lm.test_vocabulary.NgramModelVocabularyTests.test_lookup_iterables", false]], "test_lookup_none() (nltk.test.unit.lm.test_vocabulary.ngrammodelvocabularytests method)": [[251, "nltk.test.unit.lm.test_vocabulary.NgramModelVocabularyTests.test_lookup_None", false]], "test_lookup_recursive() (nltk.test.unit.lm.test_vocabulary.ngrammodelvocabularytests method)": [[251, "nltk.test.unit.lm.test_vocabulary.NgramModelVocabularyTests.test_lookup_recursive", false]], "test_lowercase_option() (nltk.test.unit.test_stem.portertest method)": [[281, "nltk.test.unit.test_stem.PorterTest.test_lowercase_option", false]], "test_lr_bigram() (nltk.test.unit.test_metrics.testlikelihoodratio method)": [[272, "nltk.test.unit.test_metrics.TestLikelihoodRatio.test_lr_bigram", false]], "test_lr_quadgram() (nltk.test.unit.test_metrics.testlikelihoodratio method)": [[272, "nltk.test.unit.test_metrics.TestLikelihoodRatio.test_lr_quadgram", false]], "test_lr_trigram() (nltk.test.unit.test_metrics.testlikelihoodratio method)": [[272, "nltk.test.unit.test_metrics.TestLikelihoodRatio.test_lr_trigram", false]], "test_make_relation_set() (in module nltk.inference.mace)": [[126, "nltk.inference.mace.test_make_relation_set", false]], "test_megam() (in module nltk.test.unit.test_classify)": [[258, "nltk.test.unit.test_classify.test_megam", false]], "test_membership_check_respects_cutoff() (nltk.test.unit.lm.test_vocabulary.ngrammodelvocabularytests method)": [[251, "nltk.test.unit.lm.test_vocabulary.NgramModelVocabularyTests.test_membership_check_respects_cutoff", false]], "test_meronyms_holonyms() (nltk.test.unit.test_wordnet.wordnnetdemo method)": [[287, "nltk.test.unit.test_wordnet.WordnNetDemo.test_meronyms_holonyms", false]], "test_meteor() (nltk.test.unit.translate.test_meteor.testmeteor method)": [[297, "nltk.test.unit.translate.test_meteor.TestMETEOR.test_meteor", false]], "test_misc_relations() (nltk.test.unit.test_wordnet.wordnnetdemo method)": [[287, "nltk.test.unit.test_wordnet.WordnNetDemo.test_misc_relations", false]], "test_mle_bigram_entropy_perplexity_seen() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_mle_bigram_entropy_perplexity_seen", false]], "test_mle_bigram_entropy_perplexity_unigrams() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_mle_bigram_entropy_perplexity_unigrams", false]], "test_mle_bigram_entropy_perplexity_unseen() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_mle_bigram_entropy_perplexity_unseen", false]], "test_mle_bigram_logscore_for_zero_score() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_mle_bigram_logscore_for_zero_score", false]], "test_mle_bigram_scores() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_mle_bigram_scores", false]], "test_mle_trigram_scores() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_mle_trigram_scores", false]], "test_model_found() (in module nltk.inference.mace)": [[126, "nltk.inference.mace.test_model_found", false]], "test_modified_precision() (nltk.test.unit.translate.test_bleu.testbleu method)": [[289, "nltk.test.unit.translate.test_bleu.TestBLEU.test_modified_precision", false]], "test_multiple_conjs() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_multiple_conjs", false]], "test_n() (nltk.test.unit.lm.test_counter.testngramcounter method)": [[248, "nltk.test.unit.lm.test_counter.TestNgramCounter.test_N", false]], "test_neighboring_finds_neighbor_alignments() (nltk.test.unit.translate.test_ibm_model.testibmmodel method)": [[296, "nltk.test.unit.translate.test_ibm_model.TestIBMModel.test_neighboring_finds_neighbor_alignments", false]], "test_neighboring_returns_neighbors_with_pegged_alignment() (nltk.test.unit.translate.test_ibm_model.testibmmodel method)": [[296, "nltk.test.unit.translate.test_ibm_model.TestIBMModel.test_neighboring_returns_neighbors_with_pegged_alignment", false]], "test_neighboring_sets_neighbor_alignment_info() (nltk.test.unit.translate.test_ibm_model.testibmmodel method)": [[296, "nltk.test.unit.translate.test_ibm_model.TestIBMModel.test_neighboring_sets_neighbor_alignment_info", false]], "test_ner_tagger() (nltk.test.unit.test_corenlp.testtaggerapi method)": [[261, "nltk.test.unit.test_corenlp.TestTaggerAPI.test_ner_tagger", false]], "test_news_fileids() (nltk.test.unit.test_corpora.testptb method)": [[262, "nltk.test.unit.test_corpora.TestPTB.test_news_fileids", false]], "test_ngram_conditional_freqdist() (nltk.test.unit.lm.test_counter.testngramcounter method)": [[248, "nltk.test.unit.lm.test_counter.TestNgramCounter.test_ngram_conditional_freqdist", false]], "test_ngram_order_access_unigrams() (nltk.test.unit.lm.test_counter.testngramcounter method)": [[248, "nltk.test.unit.lm.test_counter.TestNgramCounter.test_ngram_order_access_unigrams", false]], "test_ngram_taggers() (nltk.test.unit.test_json_serialization.testjsonserialization method)": [[271, "nltk.test.unit.test_json_serialization.TestJSONSerialization.test_ngram_taggers", false]], "test_no_zero_div() (in module nltk.test.unit.test_ribes)": [[277, "nltk.test.unit.test_ribes.test_no_zero_div", false]], "test_node_encoding() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_node_encoding", false]], "test_node_nocase() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_node_nocase", false]], "test_node_noleaves() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_node_noleaves", false]], "test_node_printing() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_node_printing", false]], "test_node_quoted() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_node_quoted", false]], "test_node_regex() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_node_regex", false]], "test_node_regex_2() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_node_regex_2", false]], "test_node_simple() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_node_simple", false]], "test_node_tree_position() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_node_tree_position", false]], "test_numbers() (nltk.test.unit.test_nombank.nombankdemo method)": [[274, "nltk.test.unit.test_nombank.NombankDemo.test_numbers", false]], "test_numpy_weights() (nltk.test.unit.translate.test_bleu.testbleufringecases method)": [[289, "nltk.test.unit.translate.test_bleu.TestBLEUFringeCases.test_numpy_weights", false]], "test_oed_bug() (nltk.test.unit.test_stem.portertest method)": [[281, "nltk.test.unit.test_stem.PorterTest.test_oed_bug", false]], "test_omw_lemma_no_trailing_underscore() (nltk.test.unit.test_wordnet.wordnnetdemo method)": [[287, "nltk.test.unit.test_wordnet.WordnNetDemo.test_omw_lemma_no_trailing_underscore", false]], "test_pad_asterisk() (nltk.test.unit.test_tokenize.testtokenize method)": [[284, "nltk.test.unit.test_tokenize.TestTokenize.test_pad_asterisk", false]], "test_pad_dotdot() (nltk.test.unit.test_tokenize.testtokenize method)": [[284, "nltk.test.unit.test_tokenize.TestTokenize.test_pad_dotdot", false]], "test_padded_everygram_pipeline() (nltk.test.unit.lm.test_preprocessing.testpreprocessing method)": [[250, "nltk.test.unit.lm.test_preprocessing.TestPreprocessing.test_padded_everygram_pipeline", false]], "test_parse() (nltk.test.unit.test_corenlp.testparserapi method)": [[261, "nltk.test.unit.test_corenlp.TestParserAPI.test_parse", false]], "test_parsed_sents() (nltk.test.unit.test_corpora.testconll2007 method)": [[262, "nltk.test.unit.test_corpora.TestCoNLL2007.test_parsed_sents", false]], "test_parsed_sents() (nltk.test.unit.test_corpora.testsinicatreebank method)": [[262, "nltk.test.unit.test_corpora.TestSinicaTreebank.test_parsed_sents", false]], "test_parser_loads_a_valid_tree() (nltk.test.unit.test_bllip.testbllipparser method)": [[253, "nltk.test.unit.test_bllip.TestBllipParser.test_parser_loads_a_valid_tree", false]], "test_partial_matches_hypothesis_longer_than_reference() (nltk.test.unit.translate.test_bleu.testbleu method)": [[289, "nltk.test.unit.translate.test_bleu.TestBLEU.test_partial_matches_hypothesis_longer_than_reference", false]], "test_perceptron_tagger() (nltk.test.unit.test_json_serialization.testjsonserialization method)": [[271, "nltk.test.unit.test_json_serialization.TestJSONSerialization.test_perceptron_tagger", false]], "test_phone_tokenizer() (nltk.test.unit.test_tokenize.testtokenize method)": [[284, "nltk.test.unit.test_tokenize.TestTokenize.test_phone_tokenizer", false]], "test_plot() (nltk.test.unit.test_cfd_mutation.testemptycondfreq method)": [[255, "nltk.test.unit.test_cfd_mutation.TestEmptyCondFreq.test_plot", false]], "test_polish_encoding() (nltk.test.unit.test_corpora.testudhr method)": [[262, "nltk.test.unit.test_corpora.TestUdhr.test_polish_encoding", false]], "test_pos_tag_eng() (nltk.test.unit.test_pos_tag.testpostag method)": [[276, "nltk.test.unit.test_pos_tag.TestPosTag.test_pos_tag_eng", false]], "test_pos_tag_eng_universal() (nltk.test.unit.test_pos_tag.testpostag method)": [[276, "nltk.test.unit.test_pos_tag.TestPosTag.test_pos_tag_eng_universal", false]], "test_pos_tag_rus() (nltk.test.unit.test_pos_tag.testpostag method)": [[276, "nltk.test.unit.test_pos_tag.TestPosTag.test_pos_tag_rus", false]], "test_pos_tag_rus_universal() (nltk.test.unit.test_pos_tag.testpostag method)": [[276, "nltk.test.unit.test_pos_tag.TestPosTag.test_pos_tag_rus_universal", false]], "test_pos_tag_unknown_lang() (nltk.test.unit.test_pos_tag.testpostag method)": [[276, "nltk.test.unit.test_pos_tag.TestPosTag.test_pos_tag_unknown_lang", false]], "test_pos_tagger() (nltk.test.unit.test_corenlp.testtaggerapi method)": [[261, "nltk.test.unit.test_corenlp.TestTaggerAPI.test_pos_tagger", false]], "test_pos_template() (nltk.test.unit.test_brill.testbrill method)": [[254, "nltk.test.unit.test_brill.TestBrill.test_pos_template", false]], "test_prob_t_a_given_s() (nltk.test.unit.translate.test_ibm1.testibmmodel1 method)": [[291, "nltk.test.unit.translate.test_ibm1.TestIBMModel1.test_prob_t_a_given_s", false]], "test_prob_t_a_given_s() (nltk.test.unit.translate.test_ibm2.testibmmodel2 method)": [[292, "nltk.test.unit.translate.test_ibm2.TestIBMModel2.test_prob_t_a_given_s", false]], "test_prob_t_a_given_s() (nltk.test.unit.translate.test_ibm3.testibmmodel3 method)": [[293, "nltk.test.unit.translate.test_ibm3.TestIBMModel3.test_prob_t_a_given_s", false]], "test_prob_t_a_given_s() (nltk.test.unit.translate.test_ibm4.testibmmodel4 method)": [[294, "nltk.test.unit.translate.test_ibm4.TestIBMModel4.test_prob_t_a_given_s", false]], "test_prob_t_a_given_s() (nltk.test.unit.translate.test_ibm5.testibmmodel5 method)": [[295, "nltk.test.unit.translate.test_ibm5.TestIBMModel5.test_prob_t_a_given_s", false]], "test_prove() (in module nltk.inference.prover9)": [[128, "nltk.inference.prover9.test_prove", false]], "test_prune() (nltk.test.unit.translate.test_ibm5.testibmmodel5 method)": [[295, "nltk.test.unit.translate.test_ibm5.TestIBMModel5.test_prune", false]], "test_punkt_debug_decisions_custom_end() (nltk.test.unit.test_tokenize.testtokenize method)": [[284, "nltk.test.unit.test_tokenize.TestTokenize.test_punkt_debug_decisions_custom_end", false]], "test_punkt_pair_iter() (nltk.test.unit.test_tokenize.testtokenize method)": [[284, "nltk.test.unit.test_tokenize.TestTokenize.test_punkt_pair_iter", false]], "test_punkt_pair_iter_handles_stop_iteration_exception() (nltk.test.unit.test_tokenize.testtokenize method)": [[284, "nltk.test.unit.test_tokenize.TestTokenize.test_punkt_pair_iter_handles_stop_iteration_exception", false]], "test_punkt_tokenize_custom_lang_vars() (nltk.test.unit.test_tokenize.testtokenize method)": [[284, "nltk.test.unit.test_tokenize.TestTokenize.test_punkt_tokenize_custom_lang_vars", false]], "test_punkt_tokenize_no_custom_lang_vars() (nltk.test.unit.test_tokenize.testtokenize method)": [[284, "nltk.test.unit.test_tokenize.TestTokenize.test_punkt_tokenize_no_custom_lang_vars", false]], "test_punkt_tokenize_words_handles_stop_iteration_exception() (nltk.test.unit.test_tokenize.testtokenize method)": [[284, "nltk.test.unit.test_tokenize.TestTokenize.test_punkt_tokenize_words_handles_stop_iteration_exception", false]], "test_punkt_train() (nltk.test.unit.test_tokenize.testpunkttrainer method)": [[284, "nltk.test.unit.test_tokenize.TestPunktTrainer.test_punkt_train", false]], "test_punkt_train_no_punc() (nltk.test.unit.test_tokenize.testpunkttrainer method)": [[284, "nltk.test.unit.test_tokenize.TestPunktTrainer.test_punkt_train_no_punc", false]], "test_punkt_train_single_word() (nltk.test.unit.test_tokenize.testpunkttrainer method)": [[284, "nltk.test.unit.test_tokenize.TestPunktTrainer.test_punkt_train_single_word", false]], "test_push_bumps_off_worst_hypothesis_when_stack_is_full() (nltk.test.unit.translate.test_stack_decoder.teststack method)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestStack.test_push_bumps_off_worst_hypothesis_when_stack_is_full", false]], "test_push_does_not_add_hypothesis_that_falls_below_beam_threshold() (nltk.test.unit.translate.test_stack_decoder.teststack method)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestStack.test_push_does_not_add_hypothesis_that_falls_below_beam_threshold", false]], "test_push_removes_hypotheses_that_fall_below_beam_threshold() (nltk.test.unit.translate.test_stack_decoder.teststack method)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestStack.test_push_removes_hypotheses_that_fall_below_beam_threshold", false]], "test_raw_unicode() (nltk.test.unit.test_corpora.testudhr method)": [[262, "nltk.test.unit.test_corpora.TestUdhr.test_raw_unicode", false]], "test_reader() (in module nltk.test.unit.test_seekable_unicode_stream_reader)": [[279, "nltk.test.unit.test_seekable_unicode_stream_reader.test_reader", false]], "test_reader_stream_closes_when_deleted() (in module nltk.test.unit.test_seekable_unicode_stream_reader)": [[279, "nltk.test.unit.test_seekable_unicode_stream_reader.test_reader_stream_closes_when_deleted", false]], "test_reference_or_hypothesis_shorter_than_fourgrams() (nltk.test.unit.translate.test_bleu.testbleufringecases method)": [[289, "nltk.test.unit.translate.test_bleu.TestBLEUFringeCases.test_reference_or_hypothesis_shorter_than_fourgrams", false]], "test_reference_type_check() (nltk.test.unit.translate.test_meteor.testmeteor method)": [[297, "nltk.test.unit.translate.test_meteor.TestMETEOR.test_reference_type_check", false]], "test_regexp_tagger() (nltk.test.unit.test_json_serialization.testjsonserialization method)": [[271, "nltk.test.unit.test_json_serialization.TestJSONSerialization.test_regexp_tagger", false]], "test_rel_precedence() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_rel_precedence", false]], "test_rel_sister_nodes() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_rel_sister_nodes", false]], "test_remove_handle() (nltk.test.unit.test_tokenize.testtokenize method)": [[284, "nltk.test.unit.test_tokenize.TestTokenize.test_remove_handle", false]], "test_retrieve_synset() (nltk.test.unit.test_wordnet.wordnnetdemo method)": [[287, "nltk.test.unit.test_wordnet.WordnNetDemo.test_retrieve_synset", false]], "test_retrieve_synsets() (nltk.test.unit.test_wordnet.wordnnetdemo method)": [[287, "nltk.test.unit.test_wordnet.WordnNetDemo.test_retrieve_synsets", false]], "test_retweet_original_tweet() (in module nltk.test.unit.test_json2csv_corpus)": [[270, "nltk.test.unit.test_json2csv_corpus.test_retweet_original_tweet", false]], "test_ribes() (in module nltk.test.unit.test_ribes)": [[277, "nltk.test.unit.test_ribes.test_ribes", false]], "test_ribes_empty_worder() (in module nltk.test.unit.test_ribes)": [[277, "nltk.test.unit.test_ribes.test_ribes_empty_worder", false]], "test_ribes_one_worder() (in module nltk.test.unit.test_ribes)": [[277, "nltk.test.unit.test_ribes.test_ribes_one_worder", false]], "test_ribes_two_worder() (in module nltk.test.unit.test_ribes)": [[277, "nltk.test.unit.test_ribes.test_ribes_two_worder", false]], "test_rte_classification_with_megam() (nltk.test.unit.test_rte_classify.testrteclassifier method)": [[278, "nltk.test.unit.test_rte_classify.TestRTEClassifier.test_rte_classification_with_megam", false]], "test_rte_classification_without_megam() (nltk.test.unit.test_rte_classify.testrteclassifier method)": [[278, "nltk.test.unit.test_rte_classify.TestRTEClassifier.test_rte_classification_without_megam", false]], "test_rte_feature_extraction() (nltk.test.unit.test_rte_classify.testrteclassifier method)": [[278, "nltk.test.unit.test_rte_classify.TestRTEClassifier.test_rte_feature_extraction", false]], "test_russian() (nltk.test.unit.test_stem.snowballtest method)": [[281, "nltk.test.unit.test_stem.SnowballTest.test_russian", false]], "test_sample() (nltk.test.unit.translate.test_ibm_model.testibmmodel method)": [[296, "nltk.test.unit.translate.test_ibm_model.TestIBMModel.test_sample", false]], "test_scenarios_that_should_raise_errors() (nltk.test.unit.test_twitter_auth.testcredentials method)": [[285, "nltk.test.unit.test_twitter_auth.TestCredentials.test_scenarios_that_should_raise_errors", false]], "test_senna_chunk_tagger() (nltk.test.unit.test_senna.testsennatagger method)": [[280, "nltk.test.unit.test_senna.TestSennaTagger.test_senna_chunk_tagger", false]], "test_senna_ner_tagger() (nltk.test.unit.test_senna.testsennatagger method)": [[280, "nltk.test.unit.test_senna.TestSennaTagger.test_senna_ner_tagger", false]], "test_senna_pipeline() (nltk.test.unit.test_senna.testsennapipeline method)": [[280, "nltk.test.unit.test_senna.TestSennaPipeline.test_senna_pipeline", false]], "test_senna_tagger() (nltk.test.unit.test_senna.testsennatagger method)": [[280, "nltk.test.unit.test_senna.TestSennaTagger.test_senna_tagger", false]], "test_sent_tokenize() (nltk.test.unit.test_tokenize.testtokenize method)": [[284, "nltk.test.unit.test_tokenize.TestTokenize.test_sent_tokenize", false]], "test_sentence_nist() (nltk.test.unit.translate.test_nist.testnist method)": [[298, "nltk.test.unit.translate.test_nist.TestNIST.test_sentence_nist", false]], "test_sents() (nltk.test.unit.test_corpora.testconll2007 method)": [[262, "nltk.test.unit.test_corpora.TestCoNLL2007.test_sents", false]], "test_sents() (nltk.test.unit.test_corpora.testsinicatreebank method)": [[262, "nltk.test.unit.test_corpora.TestSinicaTreebank.test_sents", false]], "test_set_uniform_alignment_probabilities() (nltk.test.unit.translate.test_ibm2.testibmmodel2 method)": [[292, "nltk.test.unit.translate.test_ibm2.TestIBMModel2.test_set_uniform_alignment_probabilities", false]], "test_set_uniform_alignment_probabilities_of_non_domain_values() (nltk.test.unit.translate.test_ibm2.testibmmodel2 method)": [[292, "nltk.test.unit.translate.test_ibm2.TestIBMModel2.test_set_uniform_alignment_probabilities_of_non_domain_values", false]], "test_set_uniform_distortion_probabilities() (nltk.test.unit.translate.test_ibm3.testibmmodel3 method)": [[293, "nltk.test.unit.translate.test_ibm3.TestIBMModel3.test_set_uniform_distortion_probabilities", false]], "test_set_uniform_distortion_probabilities_of_max_displacements() (nltk.test.unit.translate.test_ibm4.testibmmodel4 method)": [[294, "nltk.test.unit.translate.test_ibm4.TestIBMModel4.test_set_uniform_distortion_probabilities_of_max_displacements", false]], "test_set_uniform_distortion_probabilities_of_non_domain_values() (nltk.test.unit.translate.test_ibm3.testibmmodel3 method)": [[293, "nltk.test.unit.translate.test_ibm3.TestIBMModel3.test_set_uniform_distortion_probabilities_of_non_domain_values", false]], "test_set_uniform_distortion_probabilities_of_non_domain_values() (nltk.test.unit.translate.test_ibm4.testibmmodel4 method)": [[294, "nltk.test.unit.translate.test_ibm4.TestIBMModel4.test_set_uniform_distortion_probabilities_of_non_domain_values", false]], "test_set_uniform_translation_probabilities() (nltk.test.unit.translate.test_ibm1.testibmmodel1 method)": [[291, "nltk.test.unit.translate.test_ibm1.TestIBMModel1.test_set_uniform_translation_probabilities", false]], "test_set_uniform_translation_probabilities_of_non_domain_values() (nltk.test.unit.translate.test_ibm1.testibmmodel1 method)": [[291, "nltk.test.unit.translate.test_ibm1.TestIBMModel1.test_set_uniform_translation_probabilities_of_non_domain_values", false]], "test_set_uniform_vacancy_probabilities_of_max_displacements() (nltk.test.unit.translate.test_ibm5.testibmmodel5 method)": [[295, "nltk.test.unit.translate.test_ibm5.TestIBMModel5.test_set_uniform_vacancy_probabilities_of_max_displacements", false]], "test_set_uniform_vacancy_probabilities_of_non_domain_values() (nltk.test.unit.translate.test_ibm5.testibmmodel5 method)": [[295, "nltk.test.unit.translate.test_ibm5.TestIBMModel5.test_set_uniform_vacancy_probabilities_of_non_domain_values", false]], "test_short_strings_bug() (nltk.test.unit.test_stem.snowballtest method)": [[281, "nltk.test.unit.test_stem.SnowballTest.test_short_strings_bug", false]], "test_simple() (nltk.test.unit.test_cfg2chomsky.chomskynormalformforcfgtest method)": [[256, "nltk.test.unit.test_cfg2chomsky.ChomskyNormalFormForCFGTest.test_simple", false]], "test_simple() (nltk.test.unit.test_naivebayes.naivebayesclassifiertest method)": [[273, "nltk.test.unit.test_naivebayes.NaiveBayesClassifierTest.test_simple", false]], "test_sonority_sequencing_syllable_tokenizer() (nltk.test.unit.test_tokenize.testtokenize method)": [[284, "nltk.test.unit.test_tokenize.TestTokenize.test_sonority_sequencing_syllable_tokenizer", false]], "test_spanish() (nltk.test.unit.test_stem.snowballtest method)": [[281, "nltk.test.unit.test_stem.SnowballTest.test_spanish", false]], "test_stanford_segmenter_arabic() (nltk.test.unit.test_tokenize.testtokenize method)": [[284, "nltk.test.unit.test_tokenize.TestTokenize.test_stanford_segmenter_arabic", false]], "test_stanford_segmenter_chinese() (nltk.test.unit.test_tokenize.testtokenize method)": [[284, "nltk.test.unit.test_tokenize.TestTokenize.test_stanford_segmenter_chinese", false]], "test_str() (nltk.test.unit.lm.test_vocabulary.ngrammodelvocabularytests method)": [[251, "nltk.test.unit.lm.test_vocabulary.NgramModelVocabularyTests.test_str", false]], "test_string_tokenizer() (nltk.test.unit.test_tokenize.testtokenize method)": [[284, "nltk.test.unit.test_tokenize.TestTokenize.test_string_tokenizer", false]], "test_stupid_backoff_trigram_score() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_stupid_backoff_trigram_score", false]], "test_sums_to_1() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_sums_to_1", false]], "test_syllable_tokenizer_numbers() (nltk.test.unit.test_tokenize.testtokenize method)": [[284, "nltk.test.unit.test_tokenize.TestTokenize.test_syllable_tokenizer_numbers", false]], "test_tabulate() (nltk.test.unit.test_cfd_mutation.testemptycondfreq method)": [[255, "nltk.test.unit.test_cfd_mutation.TestEmptyCondFreq.test_tabulate", false]], "test_tadm() (in module nltk.test.unit.test_classify)": [[258, "nltk.test.unit.test_classify.test_tadm", false]], "test_tag_pattern2re_pattern_quantifier() (nltk.test.unit.test_chunk.testchunkrule method)": [[257, "nltk.test.unit.test_chunk.TestChunkRule.test_tag_pattern2re_pattern_quantifier", false]], "test_tagged_parse_finds_matching_element() (nltk.test.unit.test_bllip.testbllipparser method)": [[253, "nltk.test.unit.test_bllip.TestBllipParser.test_tagged_parse_finds_matching_element", false]], "test_tagged_words() (nltk.test.unit.test_corpora.testindian method)": [[262, "nltk.test.unit.test_corpora.TestIndian.test_tagged_words", false]], "test_tagged_words() (nltk.test.unit.test_corpora.testptb method)": [[262, "nltk.test.unit.test_corpora.TestPTB.test_tagged_words", false]], "test_tagsets_brown() (nltk.test.unit.test_pos_tag.testpostag method)": [[276, "nltk.test.unit.test_pos_tag.TestPosTag.test_tagsets_brown", false]], "test_tagsets_claw5() (nltk.test.unit.test_pos_tag.testpostag method)": [[276, "nltk.test.unit.test_pos_tag.TestPosTag.test_tagsets_claw5", false]], "test_tagsets_upenn() (nltk.test.unit.test_pos_tag.testpostag method)": [[276, "nltk.test.unit.test_pos_tag.TestPosTag.test_tagsets_upenn", false]], "test_textoutput() (in module nltk.test.unit.test_json2csv_corpus)": [[270, "nltk.test.unit.test_json2csv_corpus.test_textoutput", false]], "test_tokenize() (nltk.test.unit.test_corenlp.testtokenizerapi method)": [[261, "nltk.test.unit.test_corenlp.TestTokenizerAPI.test_tokenize", false]], "test_tokenize_encoding() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_tokenize_encoding", false]], "test_tokenize_examples() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_tokenize_examples", false]], "test_tokenize_link_types() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_tokenize_link_types", false]], "test_tokenize_macros() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_tokenize_macros", false]], "test_tokenize_node_labels() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_tokenize_node_labels", false]], "test_tokenize_nodenames() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_tokenize_nodenames", false]], "test_tokenize_quoting() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_tokenize_quoting", false]], "test_tokenize_segmented_patterns() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_tokenize_segmented_patterns", false]], "test_tokenize_simple() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_tokenize_simple", false]], "test_total_translated_words() (nltk.test.unit.translate.test_stack_decoder.testhypothesis method)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestHypothesis.test_total_translated_words", false]], "test_trailing_semicolon() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_trailing_semicolon", false]], "test_train_on_bigrams() (nltk.test.unit.lm.test_counter.testngramcountertraining method)": [[248, "nltk.test.unit.lm.test_counter.TestNgramCounterTraining.test_train_on_bigrams", false]], "test_train_on_illegal_sentences() (nltk.test.unit.lm.test_counter.testngramcountertraining method)": [[248, "nltk.test.unit.lm.test_counter.TestNgramCounterTraining.test_train_on_illegal_sentences", false]], "test_train_on_mix() (nltk.test.unit.lm.test_counter.testngramcountertraining method)": [[248, "nltk.test.unit.lm.test_counter.TestNgramCounterTraining.test_train_on_mix", false]], "test_train_on_unigrams() (nltk.test.unit.lm.test_counter.testngramcountertraining method)": [[248, "nltk.test.unit.lm.test_counter.TestNgramCounterTraining.test_train_on_unigrams", false]], "test_transform_output() (in module nltk.inference.mace)": [[126, "nltk.inference.mace.test_transform_output", false]], "test_translated_positions() (nltk.test.unit.translate.test_stack_decoder.testhypothesis method)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestHypothesis.test_translated_positions", false]], "test_translation_so_far() (nltk.test.unit.translate.test_stack_decoder.testhypothesis method)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestHypothesis.test_translation_so_far", false]], "test_translation_so_far_for_empty_hypothesis() (nltk.test.unit.translate.test_stack_decoder.testhypothesis method)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestHypothesis.test_translation_so_far_for_empty_hypothesis", false]], "test_treebank_span_tokenizer() (nltk.test.unit.test_tokenize.testtokenize method)": [[284, "nltk.test.unit.test_tokenize.TestTokenize.test_treebank_span_tokenizer", false]], "test_truthiness() (nltk.test.unit.lm.test_vocabulary.ngrammodelvocabularytests method)": [[251, "nltk.test.unit.lm.test_vocabulary.NgramModelVocabularyTests.test_truthiness", false]], "test_tweet_hashtag() (in module nltk.test.unit.test_json2csv_corpus)": [[270, "nltk.test.unit.test_json2csv_corpus.test_tweet_hashtag", false]], "test_tweet_media() (in module nltk.test.unit.test_json2csv_corpus)": [[270, "nltk.test.unit.test_json2csv_corpus.test_tweet_media", false]], "test_tweet_metadata() (in module nltk.test.unit.test_json2csv_corpus)": [[270, "nltk.test.unit.test_json2csv_corpus.test_tweet_metadata", false]], "test_tweet_place() (in module nltk.test.unit.test_json2csv_corpus)": [[270, "nltk.test.unit.test_json2csv_corpus.test_tweet_place", false]], "test_tweet_place_boundingbox() (in module nltk.test.unit.test_json2csv_corpus)": [[270, "nltk.test.unit.test_json2csv_corpus.test_tweet_place_boundingbox", false]], "test_tweet_tokenizer() (nltk.test.unit.test_tokenize.testtokenize method)": [[284, "nltk.test.unit.test_tokenize.TestTokenize.test_tweet_tokenizer", false]], "test_tweet_tokenizer_expanded() (nltk.test.unit.test_tokenize.testtokenize method)": [[284, "nltk.test.unit.test_tokenize.TestTokenize.test_tweet_tokenizer_expanded", false]], "test_tweet_url() (in module nltk.test.unit.test_json2csv_corpus)": [[270, "nltk.test.unit.test_json2csv_corpus.test_tweet_url", false]], "test_tweet_usermention() (in module nltk.test.unit.test_json2csv_corpus)": [[270, "nltk.test.unit.test_json2csv_corpus.test_tweet_usermention", false]], "test_unable_to_change_cutoff() (nltk.test.unit.lm.test_vocabulary.ngrammodelvocabularytests method)": [[251, "nltk.test.unit.lm.test_vocabulary.NgramModelVocabularyTests.test_unable_to_change_cutoff", false]], "test_unexpected_tagtype() (nltk.test.unit.test_corenlp.testtaggerapi method)": [[261, "nltk.test.unit.test_corenlp.TestTaggerAPI.test_unexpected_tagtype", false]], "test_unigram_counts_completely_unseen_words() (nltk.test.unit.lm.test_counter.testngramcounter method)": [[248, "nltk.test.unit.lm.test_counter.TestNgramCounter.test_unigram_counts_completely_unseen_words", false]], "test_unigram_counts_seen_words() (nltk.test.unit.lm.test_counter.testngramcounter method)": [[248, "nltk.test.unit.lm.test_counter.TestNgramCounter.test_unigram_counts_seen_words", false]], "test_unspecified_lang() (nltk.test.unit.test_pos_tag.testpostag method)": [[276, "nltk.test.unit.test_pos_tag.TestPosTag.test_unspecified_lang", false]], "test_untranslated_spans() (nltk.test.unit.translate.test_stack_decoder.testhypothesis method)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestHypothesis.test_untranslated_spans", false]], "test_untranslated_spans_for_empty_hypothesis() (nltk.test.unit.translate.test_stack_decoder.testhypothesis method)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestHypothesis.test_untranslated_spans_for_empty_hypothesis", false]], "test_update_empty_vocab() (nltk.test.unit.lm.test_vocabulary.ngrammodelvocabularytests method)": [[251, "nltk.test.unit.lm.test_vocabulary.NgramModelVocabularyTests.test_update_empty_vocab", false]], "test_use_macros() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.test_use_macros", false]], "test_user_metadata() (in module nltk.test.unit.test_json2csv_corpus)": [[270, "nltk.test.unit.test_json2csv_corpus.test_user_metadata", false]], "test_userurl() (in module nltk.test.unit.test_json2csv_corpus)": [[270, "nltk.test.unit.test_json2csv_corpus.test_userurl", false]], "test_valid_phrases() (nltk.test.unit.translate.test_stack_decoder.teststackdecoder method)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestStackDecoder.test_valid_phrases", false]], "test_vocab_iter_respects_cutoff() (nltk.test.unit.lm.test_vocabulary.ngrammodelvocabularytests method)": [[251, "nltk.test.unit.lm.test_vocabulary.NgramModelVocabularyTests.test_vocab_iter_respects_cutoff", false]], "test_vocab_len_respects_cutoff() (nltk.test.unit.lm.test_vocabulary.ngrammodelvocabularytests method)": [[251, "nltk.test.unit.lm.test_vocabulary.NgramModelVocabularyTests.test_vocab_len_respects_cutoff", false]], "test_vocabularies_are_initialized() (nltk.test.unit.translate.test_ibm_model.testibmmodel method)": [[296, "nltk.test.unit.translate.test_ibm_model.TestIBMModel.test_vocabularies_are_initialized", false]], "test_vocabularies_are_initialized_even_with_empty_corpora() (nltk.test.unit.translate.test_ibm_model.testibmmodel method)": [[296, "nltk.test.unit.translate.test_ibm_model.TestIBMModel.test_vocabularies_are_initialized_even_with_empty_corpora", false]], "test_vocabulary_martin_mode() (nltk.test.unit.test_stem.portertest method)": [[281, "nltk.test.unit.test_stem.PorterTest.test_vocabulary_martin_mode", false]], "test_vocabulary_nltk_mode() (nltk.test.unit.test_stem.portertest method)": [[281, "nltk.test.unit.test_stem.PorterTest.test_vocabulary_nltk_mode", false]], "test_vocabulary_original_mode() (nltk.test.unit.test_stem.portertest method)": [[281, "nltk.test.unit.test_stem.PorterTest.test_vocabulary_original_mode", false]], "test_with_transpositions() (nltk.test.unit.test_distance.testeditdistance method)": [[266, "nltk.test.unit.test_distance.TestEditDistance.test_with_transpositions", false]], "test_wittenbell_trigram_score() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.test_wittenbell_trigram_score", false]], "test_word_tokenize() (nltk.test.unit.test_tokenize.testtokenize method)": [[284, "nltk.test.unit.test_tokenize.TestTokenize.test_word_tokenize", false]], "test_wordnet_similarities() (nltk.test.unit.test_wordnet.wordnnetdemo method)": [[287, "nltk.test.unit.test_wordnet.WordnNetDemo.test_wordnet_similarities", false]], "test_words() (nltk.test.unit.test_corpora.testfloresta method)": [[262, "nltk.test.unit.test_corpora.TestFloresta.test_words", false]], "test_words() (nltk.test.unit.test_corpora.testindian method)": [[262, "nltk.test.unit.test_corpora.TestIndian.test_words", false]], "test_words() (nltk.test.unit.test_corpora.testptb method)": [[262, "nltk.test.unit.test_corpora.TestPTB.test_words", false]], "test_words() (nltk.test.unit.test_corpora.testudhr method)": [[262, "nltk.test.unit.test_corpora.TestUdhr.test_words", false]], "test_zero_matches() (nltk.test.unit.translate.test_bleu.testbleu method)": [[289, "nltk.test.unit.translate.test_bleu.TestBLEU.test_zero_matches", false]], "testbleu (class in nltk.test.unit.translate.test_bleu)": [[289, "nltk.test.unit.translate.test_bleu.TestBLEU", false]], "testbleufringecases (class in nltk.test.unit.translate.test_bleu)": [[289, "nltk.test.unit.translate.test_bleu.TestBLEUFringeCases", false]], "testbleuvsmteval13a (class in nltk.test.unit.translate.test_bleu)": [[289, "nltk.test.unit.translate.test_bleu.TestBLEUvsMteval13a", false]], "testbleuwithbadsentence (class in nltk.test.unit.translate.test_bleu)": [[289, "nltk.test.unit.translate.test_bleu.TestBLEUWithBadSentence", false]], "testbleuwithmultipleweights (class in nltk.test.unit.translate.test_bleu)": [[289, "nltk.test.unit.translate.test_bleu.TestBLEUWithMultipleWeights", false]], "testbllipparser (class in nltk.test.unit.test_bllip)": [[253, "nltk.test.unit.test_bllip.TestBllipParser", false]], "testbrill (class in nltk.test.unit.test_brill)": [[254, "nltk.test.unit.test_brill.TestBrill", false]], "testcess (class in nltk.test.unit.test_corpora)": [[262, "nltk.test.unit.test_corpora.TestCess", false]], "testchunkrule (class in nltk.test.unit.test_chunk)": [[257, "nltk.test.unit.test_chunk.TestChunkRule", false]], "testconcordance (class in nltk.test.unit.test_concordance)": [[260, "nltk.test.unit.test_concordance.TestConcordance", false]], "testconll2007 (class in nltk.test.unit.test_corpora)": [[262, "nltk.test.unit.test_corpora.TestCoNLL2007", false]], "testcorpusviews (class in nltk.test.unit.test_corpus_views)": [[263, "nltk.test.unit.test_corpus_views.TestCorpusViews", false]], "testcorpusviews (class in nltk.test.unit.test_pl196x)": [[275, "nltk.test.unit.test_pl196x.TestCorpusViews", false]], "testcredentials (class in nltk.test.unit.test_twitter_auth)": [[285, "nltk.test.unit.test_twitter_auth.TestCredentials", false]], "testdisagreement (class in nltk.test.unit.test_disagreement)": [[265, "nltk.test.unit.test_disagreement.TestDisagreement", false]], "testeditdistance (class in nltk.test.unit.test_distance)": [[266, "nltk.test.unit.test_distance.TestEditDistance", false]], "testemptycondfreq (class in nltk.test.unit.test_cfd_mutation)": [[255, "nltk.test.unit.test_cfd_mutation.TestEmptyCondFreq", false]], "testfloresta (class in nltk.test.unit.test_corpora)": [[262, "nltk.test.unit.test_corpora.TestFloresta", false]], "testgdfa (class in nltk.test.unit.translate.test_gdfa)": [[290, "nltk.test.unit.translate.test_gdfa.TestGDFA", false]], "testgrammar (class in nltk.parse.util)": [[177, "nltk.parse.util.TestGrammar", false]], "testhigherordertableauprover() (in module nltk.inference.tableau)": [[130, "nltk.inference.tableau.testHigherOrderTableauProver", false]], "testhypothesis (class in nltk.test.unit.translate.test_stack_decoder)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestHypothesis", false]], "testibmmodel (class in nltk.test.unit.translate.test_ibm_model)": [[296, "nltk.test.unit.translate.test_ibm_model.TestIBMModel", false]], "testibmmodel1 (class in nltk.test.unit.translate.test_ibm1)": [[291, "nltk.test.unit.translate.test_ibm1.TestIBMModel1", false]], "testibmmodel2 (class in nltk.test.unit.translate.test_ibm2)": [[292, "nltk.test.unit.translate.test_ibm2.TestIBMModel2", false]], "testibmmodel3 (class in nltk.test.unit.translate.test_ibm3)": [[293, "nltk.test.unit.translate.test_ibm3.TestIBMModel3", false]], "testibmmodel4 (class in nltk.test.unit.translate.test_ibm4)": [[294, "nltk.test.unit.translate.test_ibm4.TestIBMModel4", false]], "testibmmodel5 (class in nltk.test.unit.translate.test_ibm5)": [[295, "nltk.test.unit.translate.test_ibm5.TestIBMModel5", false]], "testindian (class in nltk.test.unit.test_corpora)": [[262, "nltk.test.unit.test_corpora.TestIndian", false]], "testjsonserialization (class in nltk.test.unit.test_json_serialization)": [[271, "nltk.test.unit.test_json_serialization.TestJSONSerialization", false]], "testlikelihoodratio (class in nltk.test.unit.test_metrics)": [[272, "nltk.test.unit.test_metrics.TestLikelihoodRatio", false]], "testmeteor (class in nltk.test.unit.translate.test_meteor)": [[297, "nltk.test.unit.translate.test_meteor.TestMETEOR", false]], "testmwappdb (class in nltk.test.unit.test_corpora)": [[262, "nltk.test.unit.test_corpora.TestMWAPPDB", false]], "testngramcounter (class in nltk.test.unit.lm.test_counter)": [[248, "nltk.test.unit.lm.test_counter.TestNgramCounter", false]], "testngramcountertraining (class in nltk.test.unit.lm.test_counter)": [[248, "nltk.test.unit.lm.test_counter.TestNgramCounterTraining", false]], "testnist (class in nltk.test.unit.translate.test_nist)": [[298, "nltk.test.unit.translate.test_nist.TestNIST", false]], "testparserapi (class in nltk.test.unit.test_corenlp)": [[261, "nltk.test.unit.test_corenlp.TestParserAPI", false]], "testpostag (class in nltk.test.unit.test_pos_tag)": [[276, "nltk.test.unit.test_pos_tag.TestPosTag", false]], "testpreprocessing (class in nltk.test.unit.lm.test_preprocessing)": [[250, "nltk.test.unit.lm.test_preprocessing.TestPreprocessing", false]], "testptb (class in nltk.test.unit.test_corpora)": [[262, "nltk.test.unit.test_corpora.TestPTB", false]], "testpunkttrainer (class in nltk.test.unit.test_tokenize)": [[284, "nltk.test.unit.test_tokenize.TestPunktTrainer", false]], "testresolutionprover() (in module nltk.inference.resolution)": [[129, "nltk.inference.resolution.testResolutionProver", false]], "testrteclassifier (class in nltk.test.unit.test_rte_classify)": [[278, "nltk.test.unit.test_rte_classify.TestRTEClassifier", false]], "tests_rel_dominance() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.tests_rel_dominance", false]], "tests_rel_indexed_children() (nltk.test.unit.test_tgrep.testsequencefunctions method)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions.tests_rel_indexed_children", false]], "testsennapipeline (class in nltk.test.unit.test_senna)": [[280, "nltk.test.unit.test_senna.TestSennaPipeline", false]], "testsennatagger (class in nltk.test.unit.test_senna)": [[280, "nltk.test.unit.test_senna.TestSennaTagger", false]], "testsequencefunctions (class in nltk.test.unit.test_tgrep)": [[283, "nltk.test.unit.test_tgrep.TestSequenceFunctions", false]], "testsinicatreebank (class in nltk.test.unit.test_corpora)": [[262, "nltk.test.unit.test_corpora.TestSinicaTreebank", false]], "teststack (class in nltk.test.unit.translate.test_stack_decoder)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestStack", false]], "teststackdecoder (class in nltk.test.unit.translate.test_stack_decoder)": [[299, "nltk.test.unit.translate.test_stack_decoder.TestStackDecoder", false]], "testtableauprover() (in module nltk.inference.tableau)": [[130, "nltk.inference.tableau.testTableauProver", false]], "testtaggerapi (class in nltk.test.unit.test_corenlp)": [[261, "nltk.test.unit.test_corenlp.TestTaggerAPI", false]], "testtokenize (class in nltk.test.unit.test_tokenize)": [[284, "nltk.test.unit.test_tokenize.TestTokenize", false]], "testtokenizerapi (class in nltk.test.unit.test_corenlp)": [[261, "nltk.test.unit.test_corenlp.TestTokenizerAPI", false]], "testudhr (class in nltk.test.unit.test_corpora)": [[262, "nltk.test.unit.test_corpora.TestUdhr", false]], "text (class in nltk.text)": [[300, "nltk.text.Text", false]], "text() (nltk.draw.util.textwidget method)": [[119, "nltk.draw.util.TextWidget.text", false]], "text() (nltk.tree.prettyprinter.treeprettyprinter method)": [[345, "nltk.tree.prettyprinter.TreePrettyPrinter.text", false]], "text() (nltk.tree.treeprettyprinter method)": [[341, "nltk.tree.TreePrettyPrinter.text", false]], "text_contains_sentbreak() (nltk.tokenize.punkt.punktsentencetokenizer method)": [[309, "nltk.tokenize.punkt.PunktSentenceTokenizer.text_contains_sentbreak", false]], "textcat (class in nltk.classify.textcat)": [[42, "nltk.classify.textcat.TextCat", false]], "textcollection (class in nltk.text)": [[300, "nltk.text.TextCollection", false]], "textids() (nltk.corpus.reader.pl196x.pl196xcorpusreader method)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader.textids", false]], "textids() (nltk.corpus.reader.pl196xcorpusreader method)": [[57, "nltk.corpus.reader.Pl196xCorpusReader.textids", false]], "texts() (in module nltk.book)": [[11, "nltk.book.texts", false]], "texttilingtokenizer (class in nltk.tokenize.texttiling)": [[317, "nltk.tokenize.texttiling.TextTilingTokenizer", false]], "textwidget (class in nltk.draw.util)": [[119, "nltk.draw.util.TextWidget", false]], "tf() (nltk.text.textcollection method)": [[300, "nltk.text.TextCollection.tf", false]], "tf_idf() (nltk.text.textcollection method)": [[300, "nltk.text.TextCollection.tf_idf", false]], "tgrep_compile() (in module nltk.tgrep)": [[301, "nltk.tgrep.tgrep_compile", false]], "tgrep_nodes() (in module nltk.tgrep)": [[301, "nltk.tgrep.tgrep_nodes", false]], "tgrep_positions() (in module nltk.tgrep)": [[301, "nltk.tgrep.tgrep_positions", false]], "tgrep_tokenize() (in module nltk.tgrep)": [[301, "nltk.tgrep.tgrep_tokenize", false]], "tgrepexception": [[301, "nltk.tgrep.TgrepException", false]], "themroles() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.themroles", false]], "themroles() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.themroles", false]], "theoremtoolcommand (class in nltk.inference.api)": [[124, "nltk.inference.api.TheoremToolCommand", false]], "theoremtoolcommanddecorator (class in nltk.inference.api)": [[124, "nltk.inference.api.TheoremToolCommandDecorator", false]], "theoremtoolthread (class in nltk.inference.api)": [[124, "nltk.inference.api.TheoremToolThread", false]], "third_person (nltk.corpus.reader.propbank.propbankinflection attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInflection.THIRD_PERSON", false]], "timer() (in module nltk.sentiment.util)": [[197, "nltk.sentiment.util.timer", false]], "timestamped_file() (nltk.twitter.twitterclient.tweetwriter method)": [[355, "nltk.twitter.twitterclient.TweetWriter.timestamped_file", false]], "timitcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.TimitCorpusReader", false]], "timitcorpusreader (class in nltk.corpus.reader.timit)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader", false]], "timittaggedcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.TimitTaggedCorpusReader", false]], "timittaggedcorpusreader (class in nltk.corpus.reader.tagged)": [[99, "nltk.corpus.reader.tagged.TimitTaggedCorpusReader", false]], "title (nltk.corpus.reader.bnc.bncwordview attribute)": [[61, "nltk.corpus.reader.bnc.BNCWordView.title", false]], "title (nltk.corpus.reader.markdown.image attribute)": [[78, "nltk.corpus.reader.markdown.Image.title", false]], "title (nltk.corpus.reader.markdown.link attribute)": [[78, "nltk.corpus.reader.markdown.Link.title", false]], "titles (in module nltk.corpus.reader.ieer)": [[73, "nltk.corpus.reader.ieer.titles", false]], "tnt (class in nltk.tag.tnt)": [[225, "nltk.tag.tnt.TnT", false]], "to_chunkstruct() (nltk.chunk.regexp.chunkstring method)": [[28, "nltk.chunk.regexp.ChunkString.to_chunkstruct", false]], "to_cnf() (in module nltk.sem.skolemize)": [[193, "nltk.sem.skolemize.to_cnf", false]], "to_conll() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.to_conll", false]], "to_depgraph() (nltk.sem.lfg.fstructure method)": [[189, "nltk.sem.lfg.FStructure.to_depgraph", false]], "to_dot() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.to_dot", false]], "to_fol() (nltk.inference.discourse.cfgreadingcommand method)": [[125, "nltk.inference.discourse.CfgReadingCommand.to_fol", false]], "to_fol() (nltk.inference.discourse.drtgluereadingcommand method)": [[125, "nltk.inference.discourse.DrtGlueReadingCommand.to_fol", false]], "to_fol() (nltk.inference.discourse.readingcommand method)": [[125, "nltk.inference.discourse.ReadingCommand.to_fol", false]], "to_glueformula_list() (nltk.sem.glue.gluedict method)": [[187, "nltk.sem.glue.GlueDict.to_glueformula_list", false]], "to_glueformula_list() (nltk.sem.lfg.fstructure method)": [[189, "nltk.sem.lfg.FStructure.to_glueformula_list", false]], "to_settings_string() (in module nltk.toolbox)": [[321, "nltk.toolbox.to_settings_string", false]], "to_sfm_string() (in module nltk.toolbox)": [[321, "nltk.toolbox.to_sfm_string", false]], "toggle_collapsed() (nltk.draw.tree.treewidget method)": [[118, "nltk.draw.tree.TreeWidget.toggle_collapsed", false]], "tok (nltk.tokenize.punkt.punkttoken attribute)": [[309, "nltk.tokenize.punkt.PunktToken.tok", false]], "token (class in nltk.ccg.lexicon)": [[16, "nltk.ccg.lexicon.Token", false]], "token() (nltk.ccg.chart.ccgleafedge method)": [[14, "nltk.ccg.chart.CCGLeafEdge.token", false]], "token() (nltk.sem.logic.logicparser method)": [[191, "nltk.sem.logic.LogicParser.token", false]], "tokenize() (nltk.parse.corenlp.genericcorenlpparser method)": [[163, "nltk.parse.corenlp.GenericCoreNLPParser.tokenize", false]], "tokenize() (nltk.tokenize.api.stringtokenizer method)": [[303, "nltk.tokenize.api.StringTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.api.tokenizeri method)": [[303, "nltk.tokenize.api.TokenizerI.tokenize", false]], "tokenize() (nltk.tokenize.casual.tweettokenizer method)": [[304, "nltk.tokenize.casual.TweetTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.destructive.nltkwordtokenizer method)": [[305, "nltk.tokenize.destructive.NLTKWordTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.legality_principle.legalitysyllabletokenizer method)": [[306, "nltk.tokenize.legality_principle.LegalitySyllableTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.mwe.mwetokenizer method)": [[307, "nltk.tokenize.mwe.MWETokenizer.tokenize", false]], "tokenize() (nltk.tokenize.nist.nisttokenizer method)": [[308, "nltk.tokenize.nist.NISTTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.punkt.punktsentencetokenizer method)": [[309, "nltk.tokenize.punkt.PunktSentenceTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.regexp.regexptokenizer method)": [[310, "nltk.tokenize.regexp.RegexpTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.repp.repptokenizer method)": [[311, "nltk.tokenize.repp.ReppTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.sexpr.sexprtokenizer method)": [[312, "nltk.tokenize.sexpr.SExprTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.simple.chartokenizer method)": [[313, "nltk.tokenize.simple.CharTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.simple.linetokenizer method)": [[313, "nltk.tokenize.simple.LineTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.sonority_sequencing.syllabletokenizer method)": [[314, "nltk.tokenize.sonority_sequencing.SyllableTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.stanford.stanfordtokenizer method)": [[315, "nltk.tokenize.stanford.StanfordTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.stanford_segmenter.stanfordsegmenter method)": [[316, "nltk.tokenize.stanford_segmenter.StanfordSegmenter.tokenize", false]], "tokenize() (nltk.tokenize.texttiling.texttilingtokenizer method)": [[317, "nltk.tokenize.texttiling.TextTilingTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.toktok.toktoktokenizer method)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.tokenize", false]], "tokenize() (nltk.tokenize.treebank.treebankworddetokenizer method)": [[319, "nltk.tokenize.treebank.TreebankWordDetokenizer.tokenize", false]], "tokenize() (nltk.tokenize.treebank.treebankwordtokenizer method)": [[319, "nltk.tokenize.treebank.TreebankWordTokenizer.tokenize", false]], "tokenize_sents() (nltk.tokenize.api.tokenizeri method)": [[303, "nltk.tokenize.api.TokenizerI.tokenize_sents", false]], "tokenize_sents() (nltk.tokenize.repp.repptokenizer method)": [[311, "nltk.tokenize.repp.ReppTokenizer.tokenize_sents", false]], "tokenized() (nltk.corpus.reader.twitter.twittercorpusreader method)": [[102, "nltk.corpus.reader.twitter.TwitterCorpusReader.tokenized", false]], "tokenized() (nltk.corpus.reader.twittercorpusreader method)": [[57, "nltk.corpus.reader.TwitterCorpusReader.tokenized", false]], "tokenizeri (class in nltk.tokenize.api)": [[303, "nltk.tokenize.api.TokenizerI", false]], "tokens (class in nltk.sem.linearlogic)": [[190, "nltk.sem.linearlogic.Tokens", false]], "tokens (class in nltk.sem.logic)": [[191, "nltk.sem.logic.Tokens", false]], "tokens (nltk.sem.drt.drttokens attribute)": [[184, "nltk.sem.drt.DrtTokens.TOKENS", false]], "tokens (nltk.sem.linearlogic.tokens attribute)": [[190, "nltk.sem.linearlogic.Tokens.TOKENS", false]], "tokens (nltk.sem.logic.tokens attribute)": [[191, "nltk.sem.logic.Tokens.TOKENS", false]], "tokens() (nltk.text.concordanceindex method)": [[300, "nltk.text.ConcordanceIndex.tokens", false]], "tokens() (nltk.text.contextindex method)": [[300, "nltk.text.ContextIndex.tokens", false]], "tokensearcher (class in nltk.text)": [[300, "nltk.text.TokenSearcher", false]], "tokensequence (class in nltk.tokenize.texttiling)": [[317, "nltk.tokenize.texttiling.TokenSequence", false]], "tokentablefield (class in nltk.tokenize.texttiling)": [[317, "nltk.tokenize.texttiling.TokenTableField", false]], "tokenwrap() (in module nltk.util)": [[357, "nltk.util.tokenwrap", false]], "toktok_regexes (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.TOKTOK_REGEXES", false]], "toktoktokenizer (class in nltk.tokenize.toktok)": [[318, "nltk.tokenize.toktok.ToktokTokenizer", false]], "toolboxcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.ToolboxCorpusReader", false]], "toolboxcorpusreader (class in nltk.corpus.reader.toolbox)": [[101, "nltk.corpus.reader.toolbox.ToolboxCorpusReader", false]], "toolboxdata (class in nltk.toolbox)": [[321, "nltk.toolbox.ToolboxData", false]], "toolboxsettings (class in nltk.toolbox)": [[321, "nltk.toolbox.ToolboxSettings", false]], "topdownchartparser (class in nltk.parse.chart)": [[162, "nltk.parse.chart.TopDownChartParser", false]], "topdowninitrule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.TopDownInitRule", false]], "topdownpredictrule (class in nltk.parse.chart)": [[162, "nltk.parse.chart.TopDownPredictRule", false]], "topspace (nltk.sem.drt.drsdrawer attribute)": [[184, "nltk.sem.drt.DrsDrawer.TOPSPACE", false]], "total (in module nltk.metrics.association)": [[146, "nltk.metrics.association.TOTAL", false]], "trace() (in module nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.trace", false]], "trace() (in module nltk.translate.gale_church)": [[326, "nltk.translate.gale_church.trace", false]], "trace() (nltk.parse.pchart.bottomupprobabilisticchartparser method)": [[171, "nltk.parse.pchart.BottomUpProbabilisticChartParser.trace", false]], "trace() (nltk.parse.recursivedescent.recursivedescentparser method)": [[173, "nltk.parse.recursivedescent.RecursiveDescentParser.trace", false]], "trace() (nltk.parse.shiftreduce.shiftreduceparser method)": [[174, "nltk.parse.shiftreduce.ShiftReduceParser.trace", false]], "trace() (nltk.parse.viterbi.viterbiparser method)": [[178, "nltk.parse.viterbi.ViterbiParser.trace", false]], "tracktoscreen_demo() (in module nltk.twitter.twitter_demo)": [[354, "nltk.twitter.twitter_demo.tracktoscreen_demo", false]], "train() (nltk.classify.decisiontree.decisiontreeclassifier static method)": [[32, "nltk.classify.decisiontree.DecisionTreeClassifier.train", false]], "train() (nltk.classify.maxent.binarymaxentfeatureencoding class method)": [[33, "nltk.classify.maxent.BinaryMaxentFeatureEncoding.train", false]], "train() (nltk.classify.maxent.maxentclassifier class method)": [[33, "nltk.classify.maxent.MaxentClassifier.train", false]], "train() (nltk.classify.maxent.maxentfeatureencodingi method)": [[33, "nltk.classify.maxent.MaxentFeatureEncodingI.train", false]], "train() (nltk.classify.maxent.tadmeventmaxentfeatureencoding class method)": [[33, "nltk.classify.maxent.TadmEventMaxentFeatureEncoding.train", false]], "train() (nltk.classify.maxent.tadmmaxentclassifier class method)": [[33, "nltk.classify.maxent.TadmMaxentClassifier.train", false]], "train() (nltk.classify.maxent.typedmaxentfeatureencoding class method)": [[33, "nltk.classify.maxent.TypedMaxentFeatureEncoding.train", false]], "train() (nltk.classify.naivebayes.naivebayesclassifier class method)": [[35, "nltk.classify.naivebayes.NaiveBayesClassifier.train", false]], "train() (nltk.classify.positivenaivebayes.positivenaivebayesclassifier static method)": [[36, "nltk.classify.positivenaivebayes.PositiveNaiveBayesClassifier.train", false]], "train() (nltk.classify.scikitlearn.sklearnclassifier method)": [[38, "nltk.classify.scikitlearn.SklearnClassifier.train", false]], "train() (nltk.classify.weka.wekaclassifier class method)": [[44, "nltk.classify.weka.WekaClassifier.train", false]], "train() (nltk.parse.malt.maltparser method)": [[169, "nltk.parse.malt.MaltParser.train", false]], "train() (nltk.parse.nonprojectivedependencyparser.demoscorer method)": [[170, "nltk.parse.nonprojectivedependencyparser.DemoScorer.train", false]], "train() (nltk.parse.nonprojectivedependencyparser.dependencyscoreri method)": [[170, "nltk.parse.nonprojectivedependencyparser.DependencyScorerI.train", false]], "train() (nltk.parse.nonprojectivedependencyparser.naivebayesdependencyscorer method)": [[170, "nltk.parse.nonprojectivedependencyparser.NaiveBayesDependencyScorer.train", false]], "train() (nltk.parse.nonprojectivedependencyparser.probabilisticnonprojectiveparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser.train", false]], "train() (nltk.parse.projectivedependencyparser.probabilisticprojectivedependencyparser method)": [[172, "nltk.parse.projectivedependencyparser.ProbabilisticProjectiveDependencyParser.train", false]], "train() (nltk.parse.transitionparser.transitionparser method)": [[176, "nltk.parse.transitionparser.TransitionParser.train", false]], "train() (nltk.sentiment.sentiment_analyzer.sentimentanalyzer method)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer.train", false]], "train() (nltk.tag.brill_trainer.brilltaggertrainer method)": [[216, "nltk.tag.brill_trainer.BrillTaggerTrainer.train", false]], "train() (nltk.tag.crf.crftagger method)": [[217, "nltk.tag.crf.CRFTagger.train", false]], "train() (nltk.tag.hmm.hiddenmarkovmodeltagger class method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTagger.train", false]], "train() (nltk.tag.hmm.hiddenmarkovmodeltrainer method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTrainer.train", false]], "train() (nltk.tag.perceptron.perceptrontagger method)": [[221, "nltk.tag.perceptron.PerceptronTagger.train", false]], "train() (nltk.tag.tnt.tnt method)": [[225, "nltk.tag.tnt.TnT.train", false]], "train() (nltk.tokenize.punkt.punktsentencetokenizer method)": [[309, "nltk.tokenize.punkt.PunktSentenceTokenizer.train", false]], "train() (nltk.tokenize.punkt.punkttrainer method)": [[309, "nltk.tokenize.punkt.PunktTrainer.train", false]], "train() (nltk.translate.ibm1.ibmmodel1 method)": [[329, "nltk.translate.ibm1.IBMModel1.train", false]], "train() (nltk.translate.ibm2.ibmmodel2 method)": [[330, "nltk.translate.ibm2.IBMModel2.train", false]], "train() (nltk.translate.ibm3.ibmmodel3 method)": [[331, "nltk.translate.ibm3.IBMModel3.train", false]], "train() (nltk.translate.ibm4.ibmmodel4 method)": [[332, "nltk.translate.ibm4.IBMModel4.train", false]], "train() (nltk.translate.ibm5.ibmmodel5 method)": [[333, "nltk.translate.ibm5.IBMModel5.train", false]], "train_depparser() (nltk.sem.glue.glue method)": [[187, "nltk.sem.glue.Glue.train_depparser", false]], "train_from_file() (nltk.parse.malt.maltparser method)": [[169, "nltk.parse.malt.MaltParser.train_from_file", false]], "train_maxent_classifier_with_gis() (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.train_maxent_classifier_with_gis", false]], "train_maxent_classifier_with_iis() (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.train_maxent_classifier_with_iis", false]], "train_maxent_classifier_with_megam() (in module nltk.classify.maxent)": [[33, "nltk.classify.maxent.train_maxent_classifier_with_megam", false]], "train_stats() (nltk.tag.brill.brilltagger method)": [[215, "nltk.tag.brill.BrillTagger.train_stats", false]], "train_supervised() (nltk.tag.hmm.hiddenmarkovmodeltrainer method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTrainer.train_supervised", false]], "train_tokens() (nltk.tokenize.punkt.punkttrainer method)": [[309, "nltk.tokenize.punkt.PunktTrainer.train_tokens", false]], "train_unsupervised() (nltk.tag.hmm.hiddenmarkovmodeltrainer method)": [[218, "nltk.tag.hmm.HiddenMarkovModelTrainer.train_unsupervised", false]], "training_data() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.training_data", false]], "transcription_dict() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.transcription_dict", false]], "transcription_dict() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.transcription_dict", false]], "transform() (in module nltk.parse.corenlp)": [[163, "nltk.parse.corenlp.transform", false]], "transition (class in nltk.parse.transitionparser)": [[176, "nltk.parse.transitionparser.Transition", false]], "transitionparser (class in nltk.parse.transitionparser)": [[176, "nltk.parse.transitionparser.TransitionParser", false]], "transitive_closure() (in module nltk.util)": [[357, "nltk.util.transitive_closure", false]], "translate() (nltk.translate.stack_decoder.stackdecoder method)": [[340, "nltk.translate.stack_decoder.StackDecoder.translate", false]], "translation_q (nltk.corpus.reader.panlex_lite.panlexlitecorpusreader attribute)": [[84, "nltk.corpus.reader.panlex_lite.PanLexLiteCorpusReader.TRANSLATION_Q", false]], "translation_q (nltk.corpus.reader.panlexlitecorpusreader attribute)": [[57, "nltk.corpus.reader.PanLexLiteCorpusReader.TRANSLATION_Q", false]], "translations() (nltk.corpus.reader.panlex_lite.panlexlitecorpusreader method)": [[84, "nltk.corpus.reader.panlex_lite.PanLexLiteCorpusReader.translations", false]], "translations() (nltk.corpus.reader.panlexlitecorpusreader method)": [[57, "nltk.corpus.reader.PanLexLiteCorpusReader.translations", false]], "translations_for() (nltk.translate.api.phrasetable method)": [[323, "nltk.translate.api.PhraseTable.translations_for", false]], "tree (class in nltk.tree)": [[341, "nltk.tree.Tree", false]], "tree (class in nltk.tree.tree)": [[348, "nltk.tree.tree.Tree", false]], "tree (nltk.corpus.reader.conll.conllcorpusreader attribute)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.TREE", false]], "tree (nltk.corpus.reader.conll.conllsrlinstance attribute)": [[69, "nltk.corpus.reader.conll.ConllSRLInstance.tree", false]], "tree (nltk.corpus.reader.conllcorpusreader attribute)": [[57, "nltk.corpus.reader.ConllCorpusReader.TREE", false]], "tree (nltk.corpus.reader.nombank.nombankinstance property)": [[81, "nltk.corpus.reader.nombank.NombankInstance.tree", false]], "tree (nltk.corpus.reader.propbank.propbankinstance property)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.tree", false]], "tree() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.tree", false]], "tree() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.tree", false]], "tree() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.tree", false]], "tree2conllstr() (in module nltk.chunk.util)": [[29, "nltk.chunk.util.tree2conllstr", false]], "tree2conlltags() (in module nltk.chunk.util)": [[29, "nltk.chunk.util.tree2conlltags", false]], "tree2semi_rel() (in module nltk.sem.relextract)": [[192, "nltk.sem.relextract.tree2semi_rel", false]], "tree_to_treesegment() (in module nltk.draw.tree)": [[118, "nltk.draw.tree.tree_to_treesegment", false]], "treebankworddetokenizer (class in nltk.tokenize.treebank)": [[319, "nltk.tokenize.treebank.TreebankWordDetokenizer", false]], "treebankwordtokenizer (class in nltk.tokenize.treebank)": [[319, "nltk.tokenize.treebank.TreebankWordTokenizer", false]], "treeedge (class in nltk.parse.chart)": [[162, "nltk.parse.chart.TreeEdge", false]], "treepos() (nltk.corpus.reader.nombank.nombanktreepointer method)": [[81, "nltk.corpus.reader.nombank.NombankTreePointer.treepos", false]], "treepos() (nltk.corpus.reader.propbank.propbanktreepointer method)": [[89, "nltk.corpus.reader.propbank.PropbankTreePointer.treepos", false]], "treeposition() (nltk.tree.parented.parentedtree method)": [[343, "nltk.tree.parented.ParentedTree.treeposition", false]], "treeposition() (nltk.tree.parentedtree method)": [[341, "nltk.tree.ParentedTree.treeposition", false]], "treeposition_spanning_leaves() (nltk.tree.tree method)": [[341, "nltk.tree.Tree.treeposition_spanning_leaves", false]], "treeposition_spanning_leaves() (nltk.tree.tree.tree method)": [[348, "nltk.tree.tree.Tree.treeposition_spanning_leaves", false]], "treepositions() (nltk.tree.multiparentedtree method)": [[341, "nltk.tree.MultiParentedTree.treepositions", false]], "treepositions() (nltk.tree.parented.multiparentedtree method)": [[343, "nltk.tree.parented.MultiParentedTree.treepositions", false]], "treepositions() (nltk.tree.tree method)": [[341, "nltk.tree.Tree.treepositions", false]], "treepositions() (nltk.tree.tree.tree method)": [[348, "nltk.tree.tree.Tree.treepositions", false]], "treepositions_no_leaves() (in module nltk.tgrep)": [[301, "nltk.tgrep.treepositions_no_leaves", false]], "treeprettyprinter (class in nltk.tree)": [[341, "nltk.tree.TreePrettyPrinter", false]], "treeprettyprinter (class in nltk.tree.prettyprinter)": [[345, "nltk.tree.prettyprinter.TreePrettyPrinter", false]], "treeprettyprinter (class in nltk.treeprettyprinter)": [[349, "nltk.treeprettyprinter.TreePrettyPrinter", false]], "trees() (nltk.parse.chart.chart method)": [[162, "nltk.parse.chart.Chart.trees", false]], "treesegmentwidget (class in nltk.draw.tree)": [[118, "nltk.draw.tree.TreeSegmentWidget", false]], "treeview (class in nltk.draw.tree)": [[118, "nltk.draw.tree.TreeView", false]], "treewidget (class in nltk.draw.tree)": [[118, "nltk.draw.tree.TreeWidget", false]], "trg_phrase (nltk.translate.api.phrasetableentry attribute)": [[323, "nltk.translate.api.PhraseTableEntry.trg_phrase", false]], "trg_sentence (nltk.translate.ibm_model.alignmentinfo attribute)": [[334, "nltk.translate.ibm_model.AlignmentInfo.trg_sentence", false]], "trie (class in nltk.collections)": [[52, "nltk.collections.Trie", false]], "trigram_training_data() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.trigram_training_data", false]], "trigramassocmeasures (class in nltk.metrics.association)": [[146, "nltk.metrics.association.TrigramAssocMeasures", false]], "trigramcollocationfinder (class in nltk.collocations)": [[53, "nltk.collocations.TrigramCollocationFinder", false]], "trigrams() (in module nltk.util)": [[357, "nltk.util.trigrams", false]], "trigramtagger (class in nltk.tag.sequential)": [[223, "nltk.tag.sequential.TrigramTagger", false]], "triples() (nltk.parse.dependencygraph.dependencygraph method)": [[164, "nltk.parse.dependencygraph.DependencyGraph.triples", false]], "truthvaluetype (class in nltk.sem.logic)": [[191, "nltk.sem.logic.TruthValueType", false]], "try_port() (in module nltk.parse.corenlp)": [[163, "nltk.parse.corenlp.try_port", false]], "tup2tab() (nltk.tabdata.tabencoder method)": [[212, "nltk.tabdata.TabEncoder.tup2tab", false]], "tupdict2tab() (nltk.tabdata.maxentencoder method)": [[212, "nltk.tabdata.MaxentEncoder.tupdict2tab", false]], "tupkey2dict() (nltk.tabdata.maxentdecoder method)": [[212, "nltk.tabdata.MaxentDecoder.tupkey2dict", false]], "tuple2str() (in module nltk.tag.util)": [[226, "nltk.tag.util.tuple2str", false]], "tuples() (nltk.corpus.reader.ppattach.ppattachmentcorpusreader method)": [[88, "nltk.corpus.reader.ppattach.PPAttachmentCorpusReader.tuples", false]], "tuples() (nltk.corpus.reader.ppattachmentcorpusreader method)": [[57, "nltk.corpus.reader.PPAttachmentCorpusReader.tuples", false]], "tuples() (nltk.corpus.reader.string_category.stringcategorycorpusreader method)": [[97, "nltk.corpus.reader.string_category.StringCategoryCorpusReader.tuples", false]], "tuples() (nltk.corpus.reader.stringcategorycorpusreader method)": [[57, "nltk.corpus.reader.StringCategoryCorpusReader.tuples", false]], "tups2tab() (nltk.tabdata.tabencoder method)": [[212, "nltk.tabdata.TabEncoder.tups2tab", false]], "turns() (nltk.corpus.reader.switchboard.switchboardcorpusreader method)": [[98, "nltk.corpus.reader.switchboard.SwitchboardCorpusReader.turns", false]], "turns() (nltk.corpus.reader.switchboardcorpusreader method)": [[57, "nltk.corpus.reader.SwitchboardCorpusReader.turns", false]], "tweethandleri (class in nltk.twitter.api)": [[352, "nltk.twitter.api.TweetHandlerI", false]], "tweets() (nltk.twitter.twitterclient.twitter method)": [[355, "nltk.twitter.twitterclient.Twitter.tweets", false]], "tweets_by_user_demo() (in module nltk.twitter.twitter_demo)": [[354, "nltk.twitter.twitter_demo.tweets_by_user_demo", false]], "tweettokenizer (class in nltk.tokenize.casual)": [[304, "nltk.tokenize.casual.TweetTokenizer", false]], "tweetviewer (class in nltk.twitter.twitterclient)": [[355, "nltk.twitter.twitterclient.TweetViewer", false]], "tweetwriter (class in nltk.twitter.twitterclient)": [[355, "nltk.twitter.twitterclient.TweetWriter", false]], "twitter (class in nltk.twitter.twitterclient)": [[355, "nltk.twitter.twitterclient.Twitter", false]], "twitterclass_demo() (in module nltk.twitter.twitter_demo)": [[354, "nltk.twitter.twitter_demo.twitterclass_demo", false]], "twittercorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.TwitterCorpusReader", false]], "twittercorpusreader (class in nltk.corpus.reader.twitter)": [[102, "nltk.corpus.reader.twitter.TwitterCorpusReader", false]], "txt2list() (nltk.tabdata.tabdecoder method)": [[212, "nltk.tabdata.TabDecoder.txt2list", false]], "txt2set() (nltk.tabdata.tabdecoder method)": [[212, "nltk.tabdata.TabDecoder.txt2set", false]], "type (class in nltk.sem.logic)": [[191, "nltk.sem.logic.Type", false]], "type (nltk.sem.drt.drtexpression property)": [[184, "nltk.sem.drt.DrtExpression.type", false]], "type (nltk.sem.logic.applicationexpression property)": [[191, "nltk.sem.logic.ApplicationExpression.type", false]], "type (nltk.sem.logic.binaryexpression property)": [[191, "nltk.sem.logic.BinaryExpression.type", false]], "type (nltk.sem.logic.constantexpression attribute)": [[191, "nltk.sem.logic.ConstantExpression.type", false]], "type (nltk.sem.logic.eventvariableexpression attribute)": [[191, "nltk.sem.logic.EventVariableExpression.type", false]], "type (nltk.sem.logic.functionvariableexpression attribute)": [[191, "nltk.sem.logic.FunctionVariableExpression.type", false]], "type (nltk.sem.logic.individualvariableexpression property)": [[191, "nltk.sem.logic.IndividualVariableExpression.type", false]], "type (nltk.sem.logic.lambdaexpression property)": [[191, "nltk.sem.logic.LambdaExpression.type", false]], "type (nltk.sem.logic.negatedexpression property)": [[191, "nltk.sem.logic.NegatedExpression.type", false]], "type (nltk.sem.logic.quantifiedexpression property)": [[191, "nltk.sem.logic.QuantifiedExpression.type", false]], "type (nltk.tokenize.punkt.punkttoken attribute)": [[309, "nltk.tokenize.punkt.PunktToken.type", false]], "type_check (nltk.sem.logic.logicparser attribute)": [[191, "nltk.sem.logic.LogicParser.type_check", false]], "type_no_period (nltk.tokenize.punkt.punkttoken property)": [[309, "nltk.tokenize.punkt.PunktToken.type_no_period", false]], "type_no_sentperiod (nltk.tokenize.punkt.punkttoken property)": [[309, "nltk.tokenize.punkt.PunktToken.type_no_sentperiod", false]], "typecheck() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.typecheck", false]], "typecheck() (nltk.sem.drt.drtexpression method)": [[184, "nltk.sem.drt.DrtExpression.typecheck", false]], "typecheck() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.typecheck", false]], "typedmaxentfeatureencoding (class in nltk.classify.maxent)": [[33, "nltk.classify.maxent.TypedMaxentFeatureEncoding", false]], "typeexception": [[191, "nltk.sem.logic.TypeException", false]], "typeresolutionexception": [[191, "nltk.sem.logic.TypeResolutionException", false]], "udhrcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.UdhrCorpusReader", false]], "udhrcorpusreader (class in nltk.corpus.reader.udhr)": [[103, "nltk.corpus.reader.udhr.UdhrCorpusReader", false]], "un_chomsky_normal_form() (in module nltk.tree)": [[341, "nltk.tree.un_chomsky_normal_form", false]], "un_chomsky_normal_form() (in module nltk.tree.transforms)": [[347, "nltk.tree.transforms.un_chomsky_normal_form", false]], "un_chomsky_normal_form() (in module nltk.treetransforms)": [[350, "nltk.treetransforms.un_chomsky_normal_form", false]], "un_chomsky_normal_form() (nltk.tree.tree method)": [[341, "nltk.tree.Tree.un_chomsky_normal_form", false]], "un_chomsky_normal_form() (nltk.tree.tree.tree method)": [[348, "nltk.tree.tree.Tree.un_chomsky_normal_form", false]], "unary_concept() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.unary_concept", false]], "unbind_click() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.unbind_click", false]], "unbind_drag() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.unbind_drag", false]], "unchunkrule (class in nltk.chunk.regexp)": [[28, "nltk.chunk.regexp.UnChunkRule", false]], "uncurry() (nltk.sem.logic.applicationexpression method)": [[191, "nltk.sem.logic.ApplicationExpression.uncurry", false]], "undefined": [[186, "nltk.sem.evaluate.Undefined", false]], "undirectedbinarycombinator (class in nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.UndirectedBinaryCombinator", false]], "undirectedcomposition (class in nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.UndirectedComposition", false]], "undirectedfunctionapplication (class in nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.UndirectedFunctionApplication", false]], "undirectedsubstitution (class in nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.UndirectedSubstitution", false]], "undirectedtyperaise (class in nltk.ccg.combinator)": [[15, "nltk.ccg.combinator.UndirectedTypeRaise", false]], "undo() (nltk.parse.shiftreduce.steppingshiftreduceparser method)": [[174, "nltk.parse.shiftreduce.SteppingShiftReduceParser.undo", false]], "unexpectedtokenexception": [[191, "nltk.sem.logic.UnexpectedTokenException", false]], "unicharscorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.UnicharsCorpusReader", false]], "unicharscorpusreader (class in nltk.corpus.reader.wordlist)": [[106, "nltk.corpus.reader.wordlist.UnicharsCorpusReader", false]], "unificationexception": [[129, "nltk.inference.resolution.UnificationException", false], [190, "nltk.sem.linearlogic.UnificationException", false]], "uniformprobdist (class in nltk.probability)": [[179, "nltk.probability.UniformProbDist", false]], "unify() (in module nltk.featstruct)": [[120, "nltk.featstruct.unify", false]], "unify() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.unify", false]], "unify() (nltk.inference.resolution.clause method)": [[129, "nltk.inference.resolution.Clause.unify", false]], "unify() (nltk.sem.linearlogic.constantexpression method)": [[190, "nltk.sem.linearlogic.ConstantExpression.unify", false]], "unify() (nltk.sem.linearlogic.impexpression method)": [[190, "nltk.sem.linearlogic.ImpExpression.unify", false]], "unify() (nltk.sem.linearlogic.variableexpression method)": [[190, "nltk.sem.linearlogic.VariableExpression.unify", false]], "unify_base_values() (nltk.featstruct.feature method)": [[120, "nltk.featstruct.Feature.unify_base_values", false]], "unify_base_values() (nltk.featstruct.rangefeature method)": [[120, "nltk.featstruct.RangeFeature.unify_base_values", false]], "unigram_score() (nltk.lm.api.smoothing method)": [[136, "nltk.lm.api.Smoothing.unigram_score", false]], "unigram_score() (nltk.lm.smoothing.absolutediscounting method)": [[140, "nltk.lm.smoothing.AbsoluteDiscounting.unigram_score", false]], "unigram_score() (nltk.lm.smoothing.kneserney method)": [[140, "nltk.lm.smoothing.KneserNey.unigram_score", false]], "unigram_score() (nltk.lm.smoothing.wittenbell method)": [[140, "nltk.lm.smoothing.WittenBell.unigram_score", false]], "unigram_word_feats() (nltk.sentiment.sentiment_analyzer.sentimentanalyzer method)": [[196, "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer.unigram_word_feats", false]], "unigrams (in module nltk.metrics.association)": [[146, "nltk.metrics.association.UNIGRAMS", false]], "unigramtagger (class in nltk.tag.sequential)": [[223, "nltk.tag.sequential.UnigramTagger", false]], "unique_ancestors() (in module nltk.tgrep)": [[301, "nltk.tgrep.unique_ancestors", false]], "unique_list() (in module nltk.util)": [[357, "nltk.util.unique_list", false]], "unique_names_demo() (in module nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.unique_names_demo", false]], "unique_variable() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.unique_variable", false]], "uniquenamesprover (class in nltk.inference.nonmonotonic)": [[127, "nltk.inference.nonmonotonic.UniqueNamesProver", false]], "unmark() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.unmark", false]], "unmasked_score() (nltk.lm.api.languagemodel method)": [[136, "nltk.lm.api.LanguageModel.unmasked_score", false]], "unmasked_score() (nltk.lm.lidstone method)": [[135, "nltk.lm.Lidstone.unmasked_score", false]], "unmasked_score() (nltk.lm.mle method)": [[135, "nltk.lm.MLE.unmasked_score", false]], "unmasked_score() (nltk.lm.models.interpolatedlanguagemodel method)": [[138, "nltk.lm.models.InterpolatedLanguageModel.unmasked_score", false]], "unmasked_score() (nltk.lm.models.lidstone method)": [[138, "nltk.lm.models.Lidstone.unmasked_score", false]], "unmasked_score() (nltk.lm.models.mle method)": [[138, "nltk.lm.models.MLE.unmasked_score", false]], "unmasked_score() (nltk.lm.models.stupidbackoff method)": [[138, "nltk.lm.models.StupidBackoff.unmasked_score", false]], "unmasked_score() (nltk.lm.stupidbackoff method)": [[135, "nltk.lm.StupidBackoff.unmasked_score", false]], "unparseableinputexception": [[181, "nltk.sem.boxer.UnparseableInputException", false]], "unsortedchartparser (class in nltk.parse.pchart)": [[171, "nltk.parse.pchart.UnsortedChartParser", false]], "untag() (in module nltk.tag.util)": [[226, "nltk.tag.util.untag", false]], "untried_expandable_productions() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.untried_expandable_productions", false]], "untried_match() (nltk.parse.recursivedescent.steppingrecursivedescentparser method)": [[173, "nltk.parse.recursivedescent.SteppingRecursiveDescentParser.untried_match", false]], "unweighted_minimum_spanning_dict() (in module nltk.util)": [[357, "nltk.util.unweighted_minimum_spanning_dict", false]], "unweighted_minimum_spanning_digraph() (in module nltk.util)": [[357, "nltk.util.unweighted_minimum_spanning_digraph", false]], "unweighted_minimum_spanning_tree() (in module nltk.util)": [[357, "nltk.util.unweighted_minimum_spanning_tree", false]], "unwrap() (nltk.internals.elementwrapper method)": [[131, "nltk.internals.ElementWrapper.unwrap", false]], "unzip (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.unzip", false]], "unzip() (in module nltk.downloader)": [[113, "nltk.downloader.unzip", false]], "unzipped_size (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.unzipped_size", false]], "update() (in module nltk.downloader)": [[113, "nltk.downloader.update", false]], "update() (nltk.collections.ordereddict method)": [[52, "nltk.collections.OrderedDict.update", false]], "update() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.update", false]], "update() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.update", false]], "update() (nltk.featstruct.featdict method)": [[120, "nltk.featstruct.FeatDict.update", false]], "update() (nltk.lm.counter.ngramcounter method)": [[137, "nltk.lm.counter.NgramCounter.update", false]], "update() (nltk.lm.ngramcounter method)": [[135, "nltk.lm.NgramCounter.update", false]], "update() (nltk.lm.vocabulary method)": [[135, "nltk.lm.Vocabulary.update", false]], "update() (nltk.lm.vocabulary.vocabulary method)": [[142, "nltk.lm.vocabulary.Vocabulary.update", false]], "update() (nltk.metrics.paice.paice method)": [[149, "nltk.metrics.paice.Paice.update", false]], "update() (nltk.probability.freqdist method)": [[179, "nltk.probability.FreqDist.update", false]], "update() (nltk.probability.mutableprobdist method)": [[179, "nltk.probability.MutableProbDist.update", false]], "update() (nltk.tag.perceptron.averagedperceptron method)": [[221, "nltk.tag.perceptron.AveragedPerceptron.update", false]], "update_alignment() (nltk.translate.ibm2.model2counts method)": [[330, "nltk.translate.ibm2.Model2Counts.update_alignment", false]], "update_clusters() (nltk.cluster.gaac.gaaclusterer method)": [[49, "nltk.cluster.gaac.GAAClusterer.update_clusters", false]], "update_distortion() (nltk.translate.ibm3.model3counts method)": [[331, "nltk.translate.ibm3.Model3Counts.update_distortion", false]], "update_distortion() (nltk.translate.ibm4.model4counts method)": [[332, "nltk.translate.ibm4.Model4Counts.update_distortion", false]], "update_edge_scores() (nltk.parse.nonprojectivedependencyparser.probabilisticnonprojectiveparser method)": [[170, "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser.update_edge_scores", false]], "update_fertility() (nltk.translate.ibm_model.counts method)": [[334, "nltk.translate.ibm_model.Counts.update_fertility", false]], "update_lexical_translation() (nltk.translate.ibm2.model2counts method)": [[330, "nltk.translate.ibm2.Model2Counts.update_lexical_translation", false]], "update_lexical_translation() (nltk.translate.ibm_model.counts method)": [[334, "nltk.translate.ibm_model.Counts.update_lexical_translation", false]], "update_null_generation() (nltk.translate.ibm_model.counts method)": [[334, "nltk.translate.ibm_model.Counts.update_null_generation", false]], "update_vacancy() (nltk.translate.ibm5.model5counts method)": [[333, "nltk.translate.ibm5.Model5Counts.update_vacancy", false]], "upenn_tagset() (in module nltk.help)": [[122, "nltk.help.upenn_tagset", false]], "uptodatemessage (class in nltk.downloader)": [[113, "nltk.downloader.UpToDateMessage", false]], "url (nltk.downloader.downloader property)": [[113, "nltk.downloader.Downloader.url", false]], "url (nltk.downloader.package attribute)": [[113, "nltk.downloader.Package.url", false]], "url_foe_1 (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.URL_FOE_1", false]], "url_foe_2 (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.URL_FOE_2", false]], "url_foe_3 (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.URL_FOE_3", false]], "url_foe_4 (nltk.tokenize.toktok.toktoktokenizer attribute)": [[318, "nltk.tokenize.toktok.ToktokTokenizer.URL_FOE_4", false]], "user_info_from_id() (nltk.twitter.twitterclient.query method)": [[355, "nltk.twitter.twitterclient.Query.user_info_from_id", false]], "user_tweets() (nltk.twitter.twitterclient.query method)": [[355, "nltk.twitter.twitterclient.Query.user_tweets", false]], "utcoffset() (nltk.twitter.api.localtimezoneoffsetwithutc method)": [[352, "nltk.twitter.api.LocalTimezoneOffsetWithUTC.utcoffset", false]], "utterance() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.utterance", false]], "utterance() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.utterance", false]], "utteranceids() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.utteranceids", false]], "utteranceids() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.utteranceids", false]], "v() (in module nltk.metrics.aline)": [[145, "nltk.metrics.aline.V", false]], "vacancies_at() (nltk.translate.ibm5.slots method)": [[333, "nltk.translate.ibm5.Slots.vacancies_at", false]], "vaderconstants (class in nltk.sentiment.vader)": [[198, "nltk.sentiment.vader.VaderConstants", false]], "val2str() (nltk.corpus.reader.bcp47.bcp47corpusreader method)": [[60, "nltk.corpus.reader.bcp47.BCP47CorpusReader.val2str", false]], "val2str() (nltk.corpus.reader.bcp47corpusreader method)": [[57, "nltk.corpus.reader.BCP47CorpusReader.val2str", false]], "val_dump() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.val_dump", false]], "val_load() (in module nltk.sem.chat80)": [[182, "nltk.sem.chat80.val_load", false]], "valid_phrases() (nltk.translate.stack_decoder.stackdecoder static method)": [[340, "nltk.translate.stack_decoder.StackDecoder.valid_phrases", false]], "validate_sig_len() (nltk.inference.nonmonotonic.predholder method)": [[127, "nltk.inference.nonmonotonic.PredHolder.validate_sig_len", false]], "validate_syllables() (nltk.tokenize.sonority_sequencing.syllabletokenizer method)": [[314, "nltk.tokenize.sonority_sequencing.SyllableTokenizer.validate_syllables", false]], "valuation (class in nltk.sem.evaluate)": [[186, "nltk.sem.evaluate.Valuation", false]], "valuation (nltk.inference.mace.macecommand property)": [[126, "nltk.inference.mace.MaceCommand.valuation", false]], "value_handlers (nltk.featstruct.featstructreader attribute)": [[120, "nltk.featstruct.FeatStructReader.VALUE_HANDLERS", false]], "values() (nltk.collections.ordereddict method)": [[52, "nltk.collections.OrderedDict.values", false]], "variable (class in nltk.sem.logic)": [[191, "nltk.sem.logic.Variable", false]], "variable_types() (nltk.sem.boxer.abstractboxerdrs method)": [[181, "nltk.sem.boxer.AbstractBoxerDrs.variable_types", false]], "variablebinderexpression (class in nltk.sem.logic)": [[191, "nltk.sem.logic.VariableBinderExpression", false]], "variablebindingexception": [[190, "nltk.sem.linearlogic.VariableBindingException", false]], "variableexpression (class in nltk.sem.linearlogic)": [[190, "nltk.sem.linearlogic.VariableExpression", false]], "variableexpression() (in module nltk.sem.logic)": [[191, "nltk.sem.logic.VariableExpression", false]], "variables() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.variables", false]], "variables() (nltk.parse.featurechart.featuretreeedge method)": [[167, "nltk.parse.featurechart.FeatureTreeEdge.variables", false]], "variables() (nltk.sem.boxer.abstractboxerdrs method)": [[181, "nltk.sem.boxer.AbstractBoxerDrs.variables", false]], "variables() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.variables", false]], "variables() (nltk.sem.logic.substitutebindingsi method)": [[191, "nltk.sem.logic.SubstituteBindingsI.variables", false]], "variance_characters (nltk.translate.gale_church.languageindependent attribute)": [[326, "nltk.translate.gale_church.LanguageIndependent.VARIANCE_CHARACTERS", false]], "vector() (nltk.cluster.util.vectorspaceclusterer method)": [[51, "nltk.cluster.util.VectorSpaceClusterer.vector", false]], "vectorspaceclusterer (class in nltk.cluster.util)": [[51, "nltk.cluster.util.VectorSpaceClusterer", false]], "verb (nltk.corpus.reader.conll.conllsrlinstance attribute)": [[69, "nltk.corpus.reader.conll.ConllSRLInstance.verb", false]], "verb (nltk.corpus.reader.wordnet.wordnetcorpusreader attribute)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.VERB", false]], "verb (nltk.corpus.reader.wordnetcorpusreader attribute)": [[57, "nltk.corpus.reader.WordNetCorpusReader.VERB", false]], "verb() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.verb", false]], "verb() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.verb", false]], "verb_head (nltk.corpus.reader.conll.conllsrlinstance attribute)": [[69, "nltk.corpus.reader.conll.ConllSRLInstance.verb_head", false]], "verb_t1() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.verb_t1", false]], "verb_t1() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.verb_t1", false]], "verb_t2() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.verb_t2", false]], "verb_t2() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.verb_t2", false]], "verb_t3() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.verb_t3", false]], "verb_t3() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.verb_t3", false]], "verb_t4() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.verb_t4", false]], "verb_t4() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.verb_t4", false]], "verb_t5() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.verb_t5", false]], "verb_t5() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.verb_t5", false]], "verb_t6() (nltk.stem.arlstem.arlstem method)": [[201, "nltk.stem.arlstem.ARLSTem.verb_t6", false]], "verb_t6() (nltk.stem.arlstem2.arlstem2 method)": [[202, "nltk.stem.arlstem2.ARLSTem2.verb_t6", false]], "verbnetcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.VerbnetCorpusReader", false]], "verbnetcorpusreader (class in nltk.corpus.reader.verbnet)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader", false]], "verbose() (in module nltk.twitter.twitter_demo)": [[354, "nltk.twitter.twitter_demo.verbose", false]], "verbs() (nltk.corpus.reader.propbank.propbankcorpusreader method)": [[89, "nltk.corpus.reader.propbank.PropbankCorpusReader.verbs", false]], "verbs() (nltk.corpus.reader.propbankcorpusreader method)": [[57, "nltk.corpus.reader.PropbankCorpusReader.verbs", false]], "view() (nltk.draw.util.colorizedlist method)": [[119, "nltk.draw.util.ColorizedList.view", false]], "visit() (nltk.sem.drt.drs method)": [[184, "nltk.sem.drt.DRS.visit", false]], "visit() (nltk.sem.drt.drtconcatenation method)": [[184, "nltk.sem.drt.DrtConcatenation.visit", false]], "visit() (nltk.sem.drt.drtproposition method)": [[184, "nltk.sem.drt.DrtProposition.visit", false]], "visit() (nltk.sem.logic.applicationexpression method)": [[191, "nltk.sem.logic.ApplicationExpression.visit", false]], "visit() (nltk.sem.logic.binaryexpression method)": [[191, "nltk.sem.logic.BinaryExpression.visit", false]], "visit() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.visit", false]], "visit() (nltk.sem.logic.negatedexpression method)": [[191, "nltk.sem.logic.NegatedExpression.visit", false]], "visit() (nltk.sem.logic.variablebinderexpression method)": [[191, "nltk.sem.logic.VariableBinderExpression.visit", false]], "visit_structured() (nltk.sem.drt.drs method)": [[184, "nltk.sem.drt.DRS.visit_structured", false]], "visit_structured() (nltk.sem.drt.drtproposition method)": [[184, "nltk.sem.drt.DrtProposition.visit_structured", false]], "visit_structured() (nltk.sem.logic.expression method)": [[191, "nltk.sem.logic.Expression.visit_structured", false]], "visit_structured() (nltk.sem.logic.variablebinderexpression method)": [[191, "nltk.sem.logic.VariableBinderExpression.visit_structured", false]], "viterbiparser (class in nltk.parse.viterbi)": [[178, "nltk.parse.viterbi.ViterbiParser", false]], "vnclass() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.vnclass", false]], "vnclass() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.vnclass", false]], "vocab() (nltk.text.text method)": [[300, "nltk.text.Text.vocab", false]], "vocabulary (class in nltk.lm)": [[135, "nltk.lm.Vocabulary", false]], "vocabulary (class in nltk.lm.vocabulary)": [[142, "nltk.lm.vocabulary.Vocabulary", false]], "vocabulary() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.vocabulary", false]], "walk() (nltk.featstruct.featstruct method)": [[120, "nltk.featstruct.FeatStruct.walk", false]], "warnings() (nltk.corpus.reader.framenet.framenetcorpusreader method)": [[72, "nltk.corpus.reader.framenet.FramenetCorpusReader.warnings", false]], "warnings() (nltk.corpus.reader.framenetcorpusreader method)": [[57, "nltk.corpus.reader.FramenetCorpusReader.warnings", false]], "wav() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.wav", false]], "wav() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.wav", false]], "waw() (nltk.stem.isri.isristemmer method)": [[204, "nltk.stem.isri.ISRIStemmer.waw", false]], "webview_file() (nltk.corpus.reader.childes.childescorpusreader method)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.webview_file", false]], "webview_file() (nltk.corpus.reader.childescorpusreader method)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.webview_file", false]], "weighted_kappa() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.weighted_kappa", false]], "weighted_kappa_pairwise() (nltk.metrics.agreement.annotationtask method)": [[144, "nltk.metrics.agreement.AnnotationTask.weighted_kappa_pairwise", false]], "weights() (nltk.classify.maxent.maxentclassifier method)": [[33, "nltk.classify.maxent.MaxentClassifier.weights", false]], "wekaclassifier (class in nltk.classify.weka)": [[44, "nltk.classify.weka.WekaClassifier", false]], "whitespacetokenizer (class in nltk.tokenize.regexp)": [[310, "nltk.tokenize.regexp.WhitespaceTokenizer", false]], "width() (nltk.draw.util.canvaswidget method)": [[119, "nltk.draw.util.CanvasWidget.width", false]], "wiki_dict() (nltk.corpus.reader.bcp47.bcp47corpusreader method)": [[60, "nltk.corpus.reader.bcp47.BCP47CorpusReader.wiki_dict", false]], "wiki_dict() (nltk.corpus.reader.bcp47corpusreader method)": [[57, "nltk.corpus.reader.BCP47CorpusReader.wiki_dict", false]], "windowdiff() (in module nltk.metrics.segmentation)": [[151, "nltk.metrics.segmentation.windowdiff", false]], "wittenbell (class in nltk.lm.smoothing)": [[140, "nltk.lm.smoothing.WittenBell", false]], "wittenbell_trigram_model() (in module nltk.test.unit.lm.test_models)": [[249, "nltk.test.unit.lm.test_models.wittenbell_trigram_model", false]], "wittenbellinterpolated (class in nltk.lm)": [[135, "nltk.lm.WittenBellInterpolated", false]], "wittenbellinterpolated (class in nltk.lm.models)": [[138, "nltk.lm.models.WittenBellInterpolated", false]], "wittenbellprobdist (class in nltk.probability)": [[179, "nltk.probability.WittenBellProbDist", false]], "word (class in nltk.tag.brill)": [[215, "nltk.tag.brill.Word", false]], "word_finder() (in module nltk.misc.wordfinder)": [[158, "nltk.misc.wordfinder.word_finder", false]], "word_path (nltk.corpus.reader.mte.mtefilereader attribute)": [[79, "nltk.corpus.reader.mte.MTEFileReader.word_path", false]], "word_penalty (nltk.translate.stack_decoder.stackdecoder attribute)": [[340, "nltk.translate.stack_decoder.StackDecoder.word_penalty", false]], "word_rank_alignment() (in module nltk.translate.ribes_score)": [[339, "nltk.translate.ribes_score.word_rank_alignment", false]], "word_re (nltk.tokenize.casual.tweettokenizer property)": [[304, "nltk.tokenize.casual.TweetTokenizer.WORD_RE", false]], "word_similarity_dict() (nltk.text.contextindex method)": [[300, "nltk.text.ContextIndex.word_similarity_dict", false]], "word_times() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.word_times", false]], "word_times() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.word_times", false]], "word_tokenize() (in module nltk.tokenize)": [[302, "nltk.tokenize.word_tokenize", false]], "word_tokenize() (nltk.tokenize.punkt.punktlanguagevars method)": [[309, "nltk.tokenize.punkt.PunktLanguageVars.word_tokenize", false]], "wordfinder() (in module nltk.misc.wordfinder)": [[158, "nltk.misc.wordfinder.wordfinder", false]], "wordlistcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.WordListCorpusReader", false]], "wordlistcorpusreader (class in nltk.corpus.reader.wordlist)": [[106, "nltk.corpus.reader.wordlist.WordListCorpusReader", false]], "wordnetcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.WordNetCorpusReader", false]], "wordnetcorpusreader (class in nltk.corpus.reader.wordnet)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader", false]], "wordneterror": [[107, "nltk.corpus.reader.wordnet.WordNetError", false]], "wordneticcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.WordNetICCorpusReader", false]], "wordneticcorpusreader (class in nltk.corpus.reader.wordnet)": [[107, "nltk.corpus.reader.wordnet.WordNetICCorpusReader", false]], "wordnetids() (nltk.corpus.reader.verbnet.verbnetcorpusreader method)": [[105, "nltk.corpus.reader.verbnet.VerbnetCorpusReader.wordnetids", false]], "wordnetids() (nltk.corpus.reader.verbnetcorpusreader method)": [[57, "nltk.corpus.reader.VerbnetCorpusReader.wordnetids", false]], "wordnetlemmatizer (class in nltk.stem.wordnet)": [[211, "nltk.stem.wordnet.WordNetLemmatizer", false]], "wordnetsyn_match() (in module nltk.translate.meteor_score)": [[335, "nltk.translate.meteor_score.wordnetsyn_match", false]], "wordnnetdemo (class in nltk.test.unit.test_wordnet)": [[287, "nltk.test.unit.test_wordnet.WordnNetDemo", false]], "wordnum (nltk.corpus.reader.nombank.nombankinstance attribute)": [[81, "nltk.corpus.reader.nombank.NombankInstance.wordnum", false]], "wordnum (nltk.corpus.reader.propbank.propbankinstance attribute)": [[89, "nltk.corpus.reader.propbank.PropbankInstance.wordnum", false]], "wordpunct_tokenize() (in module nltk.tokenize.regexp)": [[310, "nltk.tokenize.regexp.wordpunct_tokenize", false]], "wordpuncttokenizer (class in nltk.tokenize.regexp)": [[310, "nltk.tokenize.regexp.WordPunctTokenizer", false]], "words (nltk.corpus.reader.conll.conllcorpusreader attribute)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.WORDS", false]], "words (nltk.corpus.reader.conll.conllsrlinstance attribute)": [[69, "nltk.corpus.reader.conll.ConllSRLInstance.words", false]], "words (nltk.corpus.reader.conllcorpusreader attribute)": [[57, "nltk.corpus.reader.ConllCorpusReader.WORDS", false]], "words (nltk.corpus.reader.markdown.markdownblock property)": [[78, "nltk.corpus.reader.markdown.MarkdownBlock.words", false]], "words (nltk.translate.api.alignedsent property)": [[323, "nltk.translate.api.AlignedSent.words", false]], "words() (nltk.corpus.reader.aligned.alignedcorpusreader method)": [[58, "nltk.corpus.reader.aligned.AlignedCorpusReader.words", false]], "words() (nltk.corpus.reader.alignedcorpusreader method)": [[57, "nltk.corpus.reader.AlignedCorpusReader.words", false]], "words() (nltk.corpus.reader.api.categorizedcorpusreader method)": [[59, "nltk.corpus.reader.api.CategorizedCorpusReader.words", false]], "words() (nltk.corpus.reader.api.syntaxcorpusreader method)": [[59, "nltk.corpus.reader.api.SyntaxCorpusReader.words", false]], "words() (nltk.corpus.reader.bnc.bnccorpusreader method)": [[61, "nltk.corpus.reader.bnc.BNCCorpusReader.words", false]], "words() (nltk.corpus.reader.bnccorpusreader method)": [[57, "nltk.corpus.reader.BNCCorpusReader.words", false]], "words() (nltk.corpus.reader.categorized_sents.categorizedsentencescorpusreader method)": [[63, "nltk.corpus.reader.categorized_sents.CategorizedSentencesCorpusReader.words", false]], "words() (nltk.corpus.reader.categorizedcorpusreader method)": [[57, "nltk.corpus.reader.CategorizedCorpusReader.words", false]], "words() (nltk.corpus.reader.categorizedsentencescorpusreader method)": [[57, "nltk.corpus.reader.CategorizedSentencesCorpusReader.words", false]], "words() (nltk.corpus.reader.chasen.chasencorpusreader method)": [[64, "nltk.corpus.reader.chasen.ChasenCorpusReader.words", false]], "words() (nltk.corpus.reader.chasencorpusreader method)": [[57, "nltk.corpus.reader.ChasenCorpusReader.words", false]], "words() (nltk.corpus.reader.childes.childescorpusreader method)": [[65, "nltk.corpus.reader.childes.CHILDESCorpusReader.words", false]], "words() (nltk.corpus.reader.childescorpusreader method)": [[57, "nltk.corpus.reader.CHILDESCorpusReader.words", false]], "words() (nltk.corpus.reader.chunked.chunkedcorpusreader method)": [[66, "nltk.corpus.reader.chunked.ChunkedCorpusReader.words", false]], "words() (nltk.corpus.reader.chunkedcorpusreader method)": [[57, "nltk.corpus.reader.ChunkedCorpusReader.words", false]], "words() (nltk.corpus.reader.cmudict.cmudictcorpusreader method)": [[67, "nltk.corpus.reader.cmudict.CMUDictCorpusReader.words", false]], "words() (nltk.corpus.reader.cmudictcorpusreader method)": [[57, "nltk.corpus.reader.CMUDictCorpusReader.words", false]], "words() (nltk.corpus.reader.comparative_sents.comparativesentencescorpusreader method)": [[68, "nltk.corpus.reader.comparative_sents.ComparativeSentencesCorpusReader.words", false]], "words() (nltk.corpus.reader.comparativesentencescorpusreader method)": [[57, "nltk.corpus.reader.ComparativeSentencesCorpusReader.words", false]], "words() (nltk.corpus.reader.conll.conllcorpusreader method)": [[69, "nltk.corpus.reader.conll.ConllCorpusReader.words", false]], "words() (nltk.corpus.reader.conllcorpusreader method)": [[57, "nltk.corpus.reader.ConllCorpusReader.words", false]], "words() (nltk.corpus.reader.dependency.dependencycorpusreader method)": [[71, "nltk.corpus.reader.dependency.DependencyCorpusReader.words", false]], "words() (nltk.corpus.reader.dependencycorpusreader method)": [[57, "nltk.corpus.reader.DependencyCorpusReader.words", false]], "words() (nltk.corpus.reader.indian.indiancorpusreader method)": [[74, "nltk.corpus.reader.indian.IndianCorpusReader.words", false]], "words() (nltk.corpus.reader.indiancorpusreader method)": [[57, "nltk.corpus.reader.IndianCorpusReader.words", false]], "words() (nltk.corpus.reader.ipipan.ipipancorpusreader method)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusReader.words", false]], "words() (nltk.corpus.reader.ipipancorpusreader method)": [[57, "nltk.corpus.reader.IPIPANCorpusReader.words", false]], "words() (nltk.corpus.reader.markdown.categorizedmarkdowncorpusreader method)": [[78, "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader.words", false]], "words() (nltk.corpus.reader.mte.mtecorpusreader method)": [[79, "nltk.corpus.reader.mte.MTECorpusReader.words", false]], "words() (nltk.corpus.reader.mte.mtefilereader method)": [[79, "nltk.corpus.reader.mte.MTEFileReader.words", false]], "words() (nltk.corpus.reader.mtecorpusreader method)": [[57, "nltk.corpus.reader.MTECorpusReader.words", false]], "words() (nltk.corpus.reader.nkjp.nkjpcorpusreader method)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.words", false]], "words() (nltk.corpus.reader.nkjpcorpusreader method)": [[57, "nltk.corpus.reader.NKJPCorpusReader.words", false]], "words() (nltk.corpus.reader.nonbreakingprefixescorpusreader method)": [[57, "nltk.corpus.reader.NonbreakingPrefixesCorpusReader.words", false]], "words() (nltk.corpus.reader.nps_chat.npschatcorpusreader method)": [[82, "nltk.corpus.reader.nps_chat.NPSChatCorpusReader.words", false]], "words() (nltk.corpus.reader.npschatcorpusreader method)": [[57, "nltk.corpus.reader.NPSChatCorpusReader.words", false]], "words() (nltk.corpus.reader.opinion_lexicon.opinionlexiconcorpusreader method)": [[83, "nltk.corpus.reader.opinion_lexicon.OpinionLexiconCorpusReader.words", false]], "words() (nltk.corpus.reader.opinionlexiconcorpusreader method)": [[57, "nltk.corpus.reader.OpinionLexiconCorpusReader.words", false]], "words() (nltk.corpus.reader.pl196x.pl196xcorpusreader method)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader.words", false]], "words() (nltk.corpus.reader.pl196xcorpusreader method)": [[57, "nltk.corpus.reader.Pl196xCorpusReader.words", false]], "words() (nltk.corpus.reader.plaintext.plaintextcorpusreader method)": [[87, "nltk.corpus.reader.plaintext.PlaintextCorpusReader.words", false]], "words() (nltk.corpus.reader.plaintextcorpusreader method)": [[57, "nltk.corpus.reader.PlaintextCorpusReader.words", false]], "words() (nltk.corpus.reader.pros_cons.prosconscorpusreader method)": [[90, "nltk.corpus.reader.pros_cons.ProsConsCorpusReader.words", false]], "words() (nltk.corpus.reader.prosconscorpusreader method)": [[57, "nltk.corpus.reader.ProsConsCorpusReader.words", false]], "words() (nltk.corpus.reader.reviews.reviewscorpusreader method)": [[91, "nltk.corpus.reader.reviews.ReviewsCorpusReader.words", false]], "words() (nltk.corpus.reader.reviewscorpusreader method)": [[57, "nltk.corpus.reader.ReviewsCorpusReader.words", false]], "words() (nltk.corpus.reader.semcor.semcorcorpusreader method)": [[93, "nltk.corpus.reader.semcor.SemcorCorpusReader.words", false]], "words() (nltk.corpus.reader.semcorcorpusreader method)": [[57, "nltk.corpus.reader.SemcorCorpusReader.words", false]], "words() (nltk.corpus.reader.switchboard.switchboardcorpusreader method)": [[98, "nltk.corpus.reader.switchboard.SwitchboardCorpusReader.words", false]], "words() (nltk.corpus.reader.switchboardcorpusreader method)": [[57, "nltk.corpus.reader.SwitchboardCorpusReader.words", false]], "words() (nltk.corpus.reader.syntaxcorpusreader method)": [[57, "nltk.corpus.reader.SyntaxCorpusReader.words", false]], "words() (nltk.corpus.reader.tagged.taggedcorpusreader method)": [[99, "nltk.corpus.reader.tagged.TaggedCorpusReader.words", false]], "words() (nltk.corpus.reader.taggedcorpusreader method)": [[57, "nltk.corpus.reader.TaggedCorpusReader.words", false]], "words() (nltk.corpus.reader.timit.timitcorpusreader method)": [[100, "nltk.corpus.reader.timit.TimitCorpusReader.words", false]], "words() (nltk.corpus.reader.timitcorpusreader method)": [[57, "nltk.corpus.reader.TimitCorpusReader.words", false]], "words() (nltk.corpus.reader.toolbox.toolboxcorpusreader method)": [[101, "nltk.corpus.reader.toolbox.ToolboxCorpusReader.words", false]], "words() (nltk.corpus.reader.toolboxcorpusreader method)": [[57, "nltk.corpus.reader.ToolboxCorpusReader.words", false]], "words() (nltk.corpus.reader.wordlist.nonbreakingprefixescorpusreader method)": [[106, "nltk.corpus.reader.wordlist.NonbreakingPrefixesCorpusReader.words", false]], "words() (nltk.corpus.reader.wordlist.wordlistcorpusreader method)": [[106, "nltk.corpus.reader.wordlist.WordListCorpusReader.words", false]], "words() (nltk.corpus.reader.wordlistcorpusreader method)": [[57, "nltk.corpus.reader.WordListCorpusReader.words", false]], "words() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.words", false]], "words() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.words", false]], "words() (nltk.corpus.reader.xmlcorpusreader method)": [[57, "nltk.corpus.reader.XMLCorpusReader.words", false]], "words() (nltk.corpus.reader.xmldocs.xmlcorpusreader method)": [[108, "nltk.corpus.reader.xmldocs.XMLCorpusReader.words", false]], "words() (nltk.corpus.reader.ycoe.ycoecorpusreader method)": [[109, "nltk.corpus.reader.ycoe.YCOECorpusReader.words", false]], "words() (nltk.corpus.reader.ycoecorpusreader method)": [[57, "nltk.corpus.reader.YCOECorpusReader.words", false]], "words_by_iso639() (nltk.corpus.reader.panlex_swadesh.panlexswadeshcorpusreader method)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexSwadeshCorpusReader.words_by_iso639", false]], "words_by_iso639() (nltk.corpus.reader.panlexswadeshcorpusreader method)": [[57, "nltk.corpus.reader.PanlexSwadeshCorpusReader.words_by_iso639", false]], "words_by_lang() (nltk.corpus.reader.panlex_swadesh.panlexswadeshcorpusreader method)": [[85, "nltk.corpus.reader.panlex_swadesh.PanlexSwadeshCorpusReader.words_by_lang", false]], "words_by_lang() (nltk.corpus.reader.panlexswadeshcorpusreader method)": [[57, "nltk.corpus.reader.PanlexSwadeshCorpusReader.words_by_lang", false]], "words_mode (nltk.corpus.reader.ipipan.ipipancorpusview attribute)": [[75, "nltk.corpus.reader.ipipan.IPIPANCorpusView.WORDS_MODE", false]], "words_mode (nltk.corpus.reader.nkjp.nkjpcorpusreader attribute)": [[80, "nltk.corpus.reader.nkjp.NKJPCorpusReader.WORDS_MODE", false]], "words_mode (nltk.corpus.reader.nkjpcorpusreader attribute)": [[57, "nltk.corpus.reader.NKJPCorpusReader.WORDS_MODE", false]], "workspace_markprod() (nltk.draw.cfg.cfgdemo method)": [[115, "nltk.draw.cfg.CFGDemo.workspace_markprod", false]], "write() (nltk.classify.weka.arff_formatter method)": [[44, "nltk.classify.weka.ARFF_Formatter.write", false]], "write() (nltk.data.openondemandzipfile method)": [[111, "nltk.data.OpenOnDemandZipFile.write", false]], "write_megam_file() (in module nltk.classify.megam)": [[34, "nltk.classify.megam.write_megam_file", false]], "write_tadm_file() (in module nltk.classify.tadm)": [[41, "nltk.classify.tadm.write_tadm_file", false]], "writestr() (nltk.data.openondemandzipfile method)": [[111, "nltk.data.OpenOnDemandZipFile.writestr", false]], "wsd_demo() (in module nltk.classify.util)": [[43, "nltk.classify.util.wsd_demo", false]], "wup_similarity() (in module nltk.corpus.reader.wordnet)": [[107, "nltk.corpus.reader.wordnet.wup_similarity", false]], "wup_similarity() (nltk.corpus.reader.wordnet.synset method)": [[107, "nltk.corpus.reader.wordnet.Synset.wup_similarity", false]], "wup_similarity() (nltk.corpus.reader.wordnet.wordnetcorpusreader method)": [[107, "nltk.corpus.reader.wordnet.WordNetCorpusReader.wup_similarity", false]], "wup_similarity() (nltk.corpus.reader.wordnetcorpusreader method)": [[57, "nltk.corpus.reader.WordNetCorpusReader.wup_similarity", false]], "xform() (nltk.chunk.regexp.chunkstring method)": [[28, "nltk.chunk.regexp.ChunkString.xform", false]], "xml() (nltk.corpus.reader.pl196x.pl196xcorpusreader method)": [[86, "nltk.corpus.reader.pl196x.Pl196xCorpusReader.xml", false]], "xml() (nltk.corpus.reader.pl196xcorpusreader method)": [[57, "nltk.corpus.reader.Pl196xCorpusReader.xml", false]], "xml() (nltk.corpus.reader.toolbox.toolboxcorpusreader method)": [[101, "nltk.corpus.reader.toolbox.ToolboxCorpusReader.xml", false]], "xml() (nltk.corpus.reader.toolboxcorpusreader method)": [[57, "nltk.corpus.reader.ToolboxCorpusReader.xml", false]], "xml() (nltk.corpus.reader.xmlcorpusreader method)": [[57, "nltk.corpus.reader.XMLCorpusReader.xml", false]], "xml() (nltk.corpus.reader.xmldocs.xmlcorpusreader method)": [[108, "nltk.corpus.reader.xmldocs.XMLCorpusReader.xml", false]], "xml_escape() (in module nltk.tokenize.util)": [[320, "nltk.tokenize.util.xml_escape", false]], "xml_ns (nltk.corpus.reader.mte.mtefilereader attribute)": [[79, "nltk.corpus.reader.mte.MTEFileReader.xml_ns", false]], "xml_posts() (nltk.corpus.reader.nps_chat.npschatcorpusreader method)": [[82, "nltk.corpus.reader.nps_chat.NPSChatCorpusReader.xml_posts", false]], "xml_posts() (nltk.corpus.reader.npschatcorpusreader method)": [[57, "nltk.corpus.reader.NPSChatCorpusReader.xml_posts", false]], "xml_tool (class in nltk.corpus.reader.nkjp)": [[80, "nltk.corpus.reader.nkjp.XML_Tool", false]], "xml_unescape() (in module nltk.tokenize.util)": [[320, "nltk.tokenize.util.xml_unescape", false]], "xmlcorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.XMLCorpusReader", false]], "xmlcorpusreader (class in nltk.corpus.reader.xmldocs)": [[108, "nltk.corpus.reader.xmldocs.XMLCorpusReader", false]], "xmlcorpusview (class in nltk.corpus.reader.xmldocs)": [[108, "nltk.corpus.reader.xmldocs.XMLCorpusView", false]], "xmlinfo() (nltk.downloader.downloader method)": [[113, "nltk.downloader.Downloader.xmlinfo", false]], "xpath() (in module nltk.corpus.reader.mte)": [[79, "nltk.corpus.reader.mte.xpath", false]], "xreadlines() (nltk.data.seekableunicodestreamreader method)": [[111, "nltk.data.SeekableUnicodeStreamReader.xreadlines", false]], "ycoecorpusreader (class in nltk.corpus.reader)": [[57, "nltk.corpus.reader.YCOECorpusReader", false]], "ycoecorpusreader (class in nltk.corpus.reader.ycoe)": [[109, "nltk.corpus.reader.ycoe.YCOECorpusReader", false]], "ycoeparsecorpusreader (class in nltk.corpus.reader.ycoe)": [[109, "nltk.corpus.reader.ycoe.YCOEParseCorpusReader", false]], "ycoetaggedcorpusreader (class in nltk.corpus.reader.ycoe)": [[109, "nltk.corpus.reader.ycoe.YCOETaggedCorpusReader", false]], "yesterday() (in module nltk.twitter.twitter_demo)": [[354, "nltk.twitter.twitter_demo.yesterday", false]], "yview() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.yview", false]], "yview_moveto() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.yview_moveto", false]], "yview_scroll() (nltk.draw.table.multilistbox method)": [[117, "nltk.draw.table.MultiListbox.yview_scroll", false]], "zen_chat() (in module nltk.chat.zen)": [[24, "nltk.chat.zen.zen_chat", false]], "zero_indexed_alignment() (nltk.translate.ibm_model.alignmentinfo method)": [[334, "nltk.translate.ibm_model.AlignmentInfo.zero_indexed_alignment", false]]}, "objects": {"": [[0, 0, 0, "-", "nltk"]], "nltk": [[1, 0, 0, "-", "app"], [11, 0, 0, "-", "book"], [12, 0, 0, "-", "ccg"], [18, 0, 0, "-", "chat"], [25, 0, 0, "-", "chunk"], [30, 0, 0, "-", "classify"], [45, 0, 0, "-", "cli"], [46, 0, 0, "-", "cluster"], [52, 0, 0, "-", "collections"], [53, 0, 0, "-", "collocations"], [54, 0, 0, "-", "compat"], [55, 0, 0, "-", "corpus"], [111, 0, 0, "-", "data"], [112, 0, 0, "-", "decorators"], [0, 1, 1, "", "demo"], [113, 0, 0, "-", "downloader"], [114, 0, 0, "-", "draw"], [120, 0, 0, "-", "featstruct"], [121, 0, 0, "-", "grammar"], [122, 0, 0, "-", "help"], [123, 0, 0, "-", "inference"], [131, 0, 0, "-", "internals"], [132, 0, 0, "-", "jsontags"], [133, 0, 0, "-", "langnames"], [134, 0, 0, "-", "lazyimport"], [135, 0, 0, "-", "lm"], [143, 0, 0, "-", "metrics"], [153, 0, 0, "-", "misc"], [159, 0, 0, "-", "parse"], [179, 0, 0, "-", "probability"], [180, 0, 0, "-", "sem"], [195, 0, 0, "-", "sentiment"], [199, 0, 0, "-", "stem"], [212, 0, 0, "-", "tabdata"], [213, 0, 0, "-", "tag"], [227, 0, 0, "-", "tbl"], [234, 0, 0, "-", "test"], [300, 0, 0, "-", "text"], [301, 0, 0, "-", "tgrep"], [302, 0, 0, "-", "tokenize"], [321, 0, 0, "-", "toolbox"], [322, 0, 0, "-", "translate"], [341, 0, 0, "-", "tree"], [349, 0, 0, "-", "treeprettyprinter"], [350, 0, 0, "-", "treetransforms"], [351, 0, 0, "-", "twitter"], [357, 0, 0, "-", "util"], [358, 0, 0, "-", "wsd"]], "nltk.app": [[2, 0, 0, "-", "chartparser_app"], [3, 0, 0, "-", "chunkparser_app"], [4, 0, 0, "-", "collocations_app"], [5, 0, 0, "-", "concordance_app"], [6, 0, 0, "-", "nemo_app"], [7, 0, 0, "-", "rdparser_app"], [8, 0, 0, "-", "srparser_app"], [10, 0, 0, "-", "wordnet_app"]], "nltk.app.chartparser_app": [[2, 1, 1, "", "app"]], "nltk.app.chunkparser_app": [[3, 1, 1, "", "app"]], "nltk.app.collocations_app": [[4, 1, 1, "", "app"]], "nltk.app.concordance_app": [[5, 1, 1, "", "app"]], "nltk.app.nemo_app": [[6, 1, 1, "", "app"]], "nltk.app.rdparser_app": [[7, 1, 1, "", "app"]], "nltk.app.srparser_app": [[8, 1, 1, "", "app"]], "nltk.app.wordnet_app": [[10, 1, 1, "", "app"]], "nltk.book": [[11, 1, 1, "", "sents"], [11, 1, 1, "", "texts"]], "nltk.ccg": [[13, 0, 0, "-", "api"], [14, 0, 0, "-", "chart"], [15, 0, 0, "-", "combinator"], [16, 0, 0, "-", "lexicon"], [17, 0, 0, "-", "logic"]], "nltk.ccg.api": [[13, 2, 1, "", "AbstractCCGCategory"], [13, 2, 1, "", "CCGVar"], [13, 2, 1, "", "Direction"], [13, 2, 1, "", "FunctionalCategory"], [13, 2, 1, "", "PrimitiveCategory"]], "nltk.ccg.api.AbstractCCGCategory": [[13, 3, 1, "", "can_unify"], [13, 3, 1, "", "is_function"], [13, 3, 1, "", "is_primitive"], [13, 3, 1, "", "is_var"], [13, 3, 1, "", "substitute"]], "nltk.ccg.api.CCGVar": [[13, 3, 1, "", "__init__"], [13, 3, 1, "", "can_unify"], [13, 3, 1, "", "id"], [13, 3, 1, "", "is_function"], [13, 3, 1, "", "is_primitive"], [13, 3, 1, "", "is_var"], [13, 3, 1, "", "new_id"], [13, 3, 1, "", "reset_id"], [13, 3, 1, "", "substitute"]], "nltk.ccg.api.Direction": [[13, 3, 1, "", "__init__"], [13, 3, 1, "", "can_compose"], [13, 3, 1, "", "can_cross"], [13, 3, 1, "", "can_unify"], [13, 3, 1, "", "dir"], [13, 3, 1, "", "is_backward"], [13, 3, 1, "", "is_forward"], [13, 3, 1, "", "is_variable"], [13, 3, 1, "", "restrs"], [13, 3, 1, "", "substitute"]], "nltk.ccg.api.FunctionalCategory": [[13, 3, 1, "", "__init__"], [13, 3, 1, "", "arg"], [13, 3, 1, "", "can_unify"], [13, 3, 1, "", "dir"], [13, 3, 1, "", "is_function"], [13, 3, 1, "", "is_primitive"], [13, 3, 1, "", "is_var"], [13, 3, 1, "", "res"], [13, 3, 1, "", "substitute"]], "nltk.ccg.api.PrimitiveCategory": [[13, 3, 1, "", "__init__"], [13, 3, 1, "", "can_unify"], [13, 3, 1, "", "categ"], [13, 3, 1, "", "is_function"], [13, 3, 1, "", "is_primitive"], [13, 3, 1, "", "is_var"], [13, 3, 1, "", "restrs"], [13, 3, 1, "", "substitute"]], "nltk.ccg.chart": [[14, 2, 1, "", "BackwardTypeRaiseRule"], [14, 2, 1, "", "BinaryCombinatorRule"], [14, 2, 1, "", "CCGChart"], [14, 2, 1, "", "CCGChartParser"], [14, 2, 1, "", "CCGEdge"], [14, 2, 1, "", "CCGLeafEdge"], [14, 2, 1, "", "ForwardTypeRaiseRule"], [14, 1, 1, "", "compute_semantics"], [14, 1, 1, "", "demo"], [14, 1, 1, "", "printCCGDerivation"], [14, 1, 1, "", "printCCGTree"]], "nltk.ccg.chart.BackwardTypeRaiseRule": [[14, 4, 1, "", "NUMEDGES"], [14, 3, 1, "", "__init__"], [14, 3, 1, "", "apply"]], "nltk.ccg.chart.BinaryCombinatorRule": [[14, 4, 1, "", "NUMEDGES"], [14, 3, 1, "", "__init__"], [14, 3, 1, "", "apply"]], "nltk.ccg.chart.CCGChart": [[14, 3, 1, "", "__init__"]], "nltk.ccg.chart.CCGChartParser": [[14, 3, 1, "", "__init__"], [14, 3, 1, "", "lexicon"], [14, 3, 1, "", "parse"]], "nltk.ccg.chart.CCGEdge": [[14, 3, 1, "", "__init__"], [14, 3, 1, "", "categ"], [14, 3, 1, "", "dot"], [14, 3, 1, "", "end"], [14, 3, 1, "", "is_complete"], [14, 3, 1, "", "is_incomplete"], [14, 3, 1, "", "length"], [14, 3, 1, "", "lhs"], [14, 3, 1, "", "nextsym"], [14, 3, 1, "", "rhs"], [14, 3, 1, "", "rule"], [14, 3, 1, "", "span"], [14, 3, 1, "", "start"]], "nltk.ccg.chart.CCGLeafEdge": [[14, 3, 1, "", "__init__"], [14, 3, 1, "", "categ"], [14, 3, 1, "", "dot"], [14, 3, 1, "", "end"], [14, 3, 1, "", "is_complete"], [14, 3, 1, "", "is_incomplete"], [14, 3, 1, "", "leaf"], [14, 3, 1, "", "length"], [14, 3, 1, "", "lhs"], [14, 3, 1, "", "nextsym"], [14, 3, 1, "", "rhs"], [14, 3, 1, "", "span"], [14, 3, 1, "", "start"], [14, 3, 1, "", "token"]], "nltk.ccg.chart.ForwardTypeRaiseRule": [[14, 4, 1, "", "NUMEDGES"], [14, 3, 1, "", "__init__"], [14, 3, 1, "", "apply"]], "nltk.ccg.combinator": [[15, 2, 1, "", "BackwardCombinator"], [15, 2, 1, "", "DirectedBinaryCombinator"], [15, 2, 1, "", "ForwardCombinator"], [15, 2, 1, "", "UndirectedBinaryCombinator"], [15, 2, 1, "", "UndirectedComposition"], [15, 2, 1, "", "UndirectedFunctionApplication"], [15, 2, 1, "", "UndirectedSubstitution"], [15, 2, 1, "", "UndirectedTypeRaise"], [15, 1, 1, "", "backwardBxConstraint"], [15, 1, 1, "", "backwardOnly"], [15, 1, 1, "", "backwardSxConstraint"], [15, 1, 1, "", "backwardTConstraint"], [15, 1, 1, "", "bothBackward"], [15, 1, 1, "", "bothForward"], [15, 1, 1, "", "crossedDirs"], [15, 1, 1, "", "forwardOnly"], [15, 1, 1, "", "forwardSConstraint"], [15, 1, 1, "", "forwardTConstraint"], [15, 1, 1, "", "innermostFunction"]], "nltk.ccg.combinator.BackwardCombinator": [[15, 3, 1, "", "__init__"], [15, 3, 1, "", "can_combine"], [15, 3, 1, "", "combine"]], "nltk.ccg.combinator.DirectedBinaryCombinator": [[15, 3, 1, "", "can_combine"], [15, 3, 1, "", "combine"]], "nltk.ccg.combinator.ForwardCombinator": [[15, 3, 1, "", "__init__"], [15, 3, 1, "", "can_combine"], [15, 3, 1, "", "combine"]], "nltk.ccg.combinator.UndirectedBinaryCombinator": [[15, 3, 1, "", "can_combine"], [15, 3, 1, "", "combine"]], "nltk.ccg.combinator.UndirectedComposition": [[15, 3, 1, "", "can_combine"], [15, 3, 1, "", "combine"]], "nltk.ccg.combinator.UndirectedFunctionApplication": [[15, 3, 1, "", "can_combine"], [15, 3, 1, "", "combine"]], "nltk.ccg.combinator.UndirectedSubstitution": [[15, 3, 1, "", "can_combine"], [15, 3, 1, "", "combine"]], "nltk.ccg.combinator.UndirectedTypeRaise": [[15, 3, 1, "", "can_combine"], [15, 3, 1, "", "combine"]], "nltk.ccg.lexicon": [[16, 2, 1, "", "CCGLexicon"], [16, 2, 1, "", "Token"], [16, 1, 1, "", "augParseCategory"], [16, 1, 1, "", "fromstring"], [16, 1, 1, "", "matchBrackets"], [16, 1, 1, "", "nextCategory"], [16, 1, 1, "", "parseApplication"], [16, 1, 1, "", "parsePrimitiveCategory"], [16, 1, 1, "", "parseSubscripts"]], "nltk.ccg.lexicon.CCGLexicon": [[16, 3, 1, "", "__init__"], [16, 3, 1, "", "categories"], [16, 3, 1, "", "start"]], "nltk.ccg.lexicon.Token": [[16, 3, 1, "", "__init__"], [16, 3, 1, "", "categ"], [16, 3, 1, "", "semantics"]], "nltk.ccg.logic": [[17, 1, 1, "", "compute_composition_semantics"], [17, 1, 1, "", "compute_function_semantics"], [17, 1, 1, "", "compute_substitution_semantics"], [17, 1, 1, "", "compute_type_raised_semantics"]], "nltk.chat": [[18, 1, 1, "", "chatbots"], [19, 0, 0, "-", "eliza"], [20, 0, 0, "-", "iesha"], [21, 0, 0, "-", "rude"], [22, 0, 0, "-", "suntsu"], [23, 0, 0, "-", "util"], [24, 0, 0, "-", "zen"]], "nltk.chat.eliza": [[19, 1, 1, "", "demo"], [19, 1, 1, "", "eliza_chat"]], "nltk.chat.iesha": [[20, 1, 1, "", "demo"], [20, 1, 1, "", "iesha_chat"]], "nltk.chat.rude": [[21, 1, 1, "", "demo"], [21, 1, 1, "", "rude_chat"]], "nltk.chat.suntsu": [[22, 1, 1, "", "demo"], [22, 1, 1, "", "suntsu_chat"]], "nltk.chat.util": [[23, 2, 1, "", "Chat"]], "nltk.chat.util.Chat": [[23, 3, 1, "", "__init__"], [23, 3, 1, "", "converse"], [23, 3, 1, "", "respond"]], "nltk.chat.zen": [[24, 1, 1, "", "demo"], [24, 1, 1, "", "zen_chat"]], "nltk.chunk": [[26, 0, 0, "-", "api"], [27, 0, 0, "-", "named_entity"], [25, 1, 1, "", "ne_chunk"], [25, 1, 1, "", "ne_chunk_sents"], [25, 1, 1, "", "ne_chunker"], [28, 0, 0, "-", "regexp"], [29, 0, 0, "-", "util"]], "nltk.chunk.api": [[26, 2, 1, "", "ChunkParserI"]], "nltk.chunk.api.ChunkParserI": [[26, 3, 1, "", "accuracy"], [26, 3, 1, "", "evaluate"], [26, 3, 1, "", "parse"]], "nltk.chunk.named_entity": [[27, 2, 1, "", "Maxent_NE_Chunker"], [27, 2, 1, "", "NEChunkParser"], [27, 2, 1, "", "NEChunkParserTagger"], [27, 1, 1, "", "build_model"], [27, 1, 1, "", "cmp_chunks"], [27, 1, 1, "", "load_ace_data"], [27, 1, 1, "", "load_ace_file"], [27, 1, 1, "", "postag_tree"], [27, 1, 1, "", "shape"], [27, 1, 1, "", "simplify_pos"]], "nltk.chunk.named_entity.Maxent_NE_Chunker": [[27, 3, 1, "", "__init__"], [27, 3, 1, "", "load_params"], [27, 3, 1, "", "save_params"]], "nltk.chunk.named_entity.NEChunkParser": [[27, 3, 1, "", "__init__"], [27, 3, 1, "", "parse"]], "nltk.chunk.named_entity.NEChunkParserTagger": [[27, 3, 1, "", "__init__"]], "nltk.chunk.regexp": [[28, 2, 1, "", "ChunkRule"], [28, 2, 1, "", "ChunkRuleWithContext"], [28, 2, 1, "", "ChunkString"], [28, 2, 1, "", "ExpandLeftRule"], [28, 2, 1, "", "ExpandRightRule"], [28, 2, 1, "", "MergeRule"], [28, 2, 1, "", "RegexpChunkParser"], [28, 2, 1, "", "RegexpChunkRule"], [28, 2, 1, "", "RegexpParser"], [28, 2, 1, "", "SplitRule"], [28, 2, 1, "", "StripRule"], [28, 2, 1, "", "UnChunkRule"], [28, 1, 1, "", "demo"], [28, 1, 1, "", "demo_eval"], [28, 1, 1, "", "tag_pattern2re_pattern"]], "nltk.chunk.regexp.ChunkRule": [[28, 3, 1, "", "__init__"]], "nltk.chunk.regexp.ChunkRuleWithContext": [[28, 3, 1, "", "__init__"]], "nltk.chunk.regexp.ChunkString": [[28, 4, 1, "", "CHUNK_TAG"], [28, 4, 1, "", "CHUNK_TAG_CHAR"], [28, 4, 1, "", "IN_CHUNK_PATTERN"], [28, 4, 1, "", "IN_STRIP_PATTERN"], [28, 3, 1, "", "__init__"], [28, 3, 1, "", "to_chunkstruct"], [28, 3, 1, "", "xform"]], "nltk.chunk.regexp.ExpandLeftRule": [[28, 3, 1, "", "__init__"]], "nltk.chunk.regexp.ExpandRightRule": [[28, 3, 1, "", "__init__"]], "nltk.chunk.regexp.MergeRule": [[28, 3, 1, "", "__init__"]], "nltk.chunk.regexp.RegexpChunkParser": [[28, 3, 1, "", "__init__"], [28, 3, 1, "", "parse"], [28, 3, 1, "", "rules"]], "nltk.chunk.regexp.RegexpChunkRule": [[28, 3, 1, "", "__init__"], [28, 3, 1, "", "apply"], [28, 3, 1, "", "descr"], [28, 3, 1, "", "fromstring"]], "nltk.chunk.regexp.RegexpParser": [[28, 3, 1, "", "__init__"], [28, 3, 1, "", "parse"]], "nltk.chunk.regexp.SplitRule": [[28, 3, 1, "", "__init__"]], "nltk.chunk.regexp.StripRule": [[28, 3, 1, "", "__init__"]], "nltk.chunk.regexp.UnChunkRule": [[28, 3, 1, "", "__init__"]], "nltk.chunk.util": [[29, 2, 1, "", "ChunkScore"], [29, 1, 1, "", "accuracy"], [29, 1, 1, "", "conllstr2tree"], [29, 1, 1, "", "conlltags2tree"], [29, 1, 1, "", "demo"], [29, 1, 1, "", "ieerstr2tree"], [29, 1, 1, "", "tagstr2tree"], [29, 1, 1, "", "tree2conllstr"], [29, 1, 1, "", "tree2conlltags"]], "nltk.chunk.util.ChunkScore": [[29, 3, 1, "", "__init__"], [29, 3, 1, "", "accuracy"], [29, 3, 1, "", "correct"], [29, 3, 1, "", "f_measure"], [29, 3, 1, "", "guessed"], [29, 3, 1, "", "incorrect"], [29, 3, 1, "", "missed"], [29, 3, 1, "", "precision"], [29, 3, 1, "", "recall"], [29, 3, 1, "", "score"]], "nltk.classify": [[31, 0, 0, "-", "api"], [32, 0, 0, "-", "decisiontree"], [33, 0, 0, "-", "maxent"], [34, 0, 0, "-", "megam"], [35, 0, 0, "-", "naivebayes"], [36, 0, 0, "-", "positivenaivebayes"], [37, 0, 0, "-", "rte_classify"], [38, 0, 0, "-", "scikitlearn"], [39, 0, 0, "-", "senna"], [40, 0, 0, "-", "svm"], [41, 0, 0, "-", "tadm"], [42, 0, 0, "-", "textcat"], [43, 0, 0, "-", "util"], [44, 0, 0, "-", "weka"]], "nltk.classify.api": [[31, 2, 1, "", "ClassifierI"], [31, 2, 1, "", "MultiClassifierI"]], "nltk.classify.api.ClassifierI": [[31, 3, 1, "", "classify"], [31, 3, 1, "", "classify_many"], [31, 3, 1, "", "labels"], [31, 3, 1, "", "prob_classify"], [31, 3, 1, "", "prob_classify_many"]], "nltk.classify.api.MultiClassifierI": [[31, 3, 1, "", "classify"], [31, 3, 1, "", "classify_many"], [31, 3, 1, "", "labels"], [31, 3, 1, "", "prob_classify"], [31, 3, 1, "", "prob_classify_many"]], "nltk.classify.decisiontree": [[32, 2, 1, "", "DecisionTreeClassifier"], [32, 1, 1, "", "demo"], [32, 1, 1, "", "f"]], "nltk.classify.decisiontree.DecisionTreeClassifier": [[32, 3, 1, "", "__init__"], [32, 3, 1, "", "best_binary_stump"], [32, 3, 1, "", "best_stump"], [32, 3, 1, "", "binary_stump"], [32, 3, 1, "", "classify"], [32, 3, 1, "", "error"], [32, 3, 1, "", "labels"], [32, 3, 1, "", "leaf"], [32, 3, 1, "", "pretty_format"], [32, 3, 1, "", "pseudocode"], [32, 3, 1, "", "refine"], [32, 3, 1, "", "stump"], [32, 3, 1, "", "train"]], "nltk.classify.maxent": [[33, 2, 1, "", "BinaryMaxentFeatureEncoding"], [33, 4, 1, "", "ConditionalExponentialClassifier"], [33, 2, 1, "", "FunctionBackedMaxentFeatureEncoding"], [33, 2, 1, "", "GISEncoding"], [33, 2, 1, "", "MaxentClassifier"], [33, 2, 1, "", "MaxentFeatureEncodingI"], [33, 2, 1, "", "TadmEventMaxentFeatureEncoding"], [33, 2, 1, "", "TadmMaxentClassifier"], [33, 2, 1, "", "TypedMaxentFeatureEncoding"], [33, 1, 1, "", "calculate_deltas"], [33, 1, 1, "", "calculate_empirical_fcount"], [33, 1, 1, "", "calculate_estimated_fcount"], [33, 1, 1, "", "calculate_nfmap"], [33, 1, 1, "", "demo"], [33, 1, 1, "", "load_maxent_params"], [33, 1, 1, "", "maxent_pos_tagger"], [33, 1, 1, "", "save_maxent_params"], [33, 1, 1, "", "train_maxent_classifier_with_gis"], [33, 1, 1, "", "train_maxent_classifier_with_iis"], [33, 1, 1, "", "train_maxent_classifier_with_megam"]], "nltk.classify.maxent.BinaryMaxentFeatureEncoding": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "describe"], [33, 3, 1, "", "encode"], [33, 3, 1, "", "labels"], [33, 3, 1, "", "length"], [33, 3, 1, "", "train"]], "nltk.classify.maxent.FunctionBackedMaxentFeatureEncoding": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "describe"], [33, 3, 1, "", "encode"], [33, 3, 1, "", "labels"], [33, 3, 1, "", "length"]], "nltk.classify.maxent.GISEncoding": [[33, 5, 1, "", "C"], [33, 3, 1, "", "__init__"], [33, 3, 1, "", "describe"], [33, 3, 1, "", "encode"], [33, 3, 1, "", "length"]], "nltk.classify.maxent.MaxentClassifier": [[33, 4, 1, "", "ALGORITHMS"], [33, 3, 1, "", "__init__"], [33, 3, 1, "", "classify"], [33, 3, 1, "", "explain"], [33, 3, 1, "", "labels"], [33, 3, 1, "", "most_informative_features"], [33, 3, 1, "", "prob_classify"], [33, 3, 1, "", "set_weights"], [33, 3, 1, "", "show_most_informative_features"], [33, 3, 1, "", "train"], [33, 3, 1, "", "weights"]], "nltk.classify.maxent.MaxentFeatureEncodingI": [[33, 3, 1, "", "describe"], [33, 3, 1, "", "encode"], [33, 3, 1, "", "labels"], [33, 3, 1, "", "length"], [33, 3, 1, "", "train"]], "nltk.classify.maxent.TadmEventMaxentFeatureEncoding": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "describe"], [33, 3, 1, "", "encode"], [33, 3, 1, "", "labels"], [33, 3, 1, "", "length"], [33, 3, 1, "", "train"]], "nltk.classify.maxent.TadmMaxentClassifier": [[33, 3, 1, "", "train"]], "nltk.classify.maxent.TypedMaxentFeatureEncoding": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "describe"], [33, 3, 1, "", "encode"], [33, 3, 1, "", "labels"], [33, 3, 1, "", "length"], [33, 3, 1, "", "train"]], "nltk.classify.megam": [[34, 1, 1, "", "call_megam"], [34, 1, 1, "", "config_megam"], [34, 1, 1, "", "parse_megam_weights"], [34, 1, 1, "", "write_megam_file"]], "nltk.classify.naivebayes": [[35, 2, 1, "", "NaiveBayesClassifier"], [35, 1, 1, "", "demo"]], "nltk.classify.naivebayes.NaiveBayesClassifier": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "classify"], [35, 3, 1, "", "labels"], [35, 3, 1, "", "most_informative_features"], [35, 3, 1, "", "prob_classify"], [35, 3, 1, "", "show_most_informative_features"], [35, 3, 1, "", "train"]], "nltk.classify.positivenaivebayes": [[36, 2, 1, "", "PositiveNaiveBayesClassifier"], [36, 1, 1, "", "demo"]], "nltk.classify.positivenaivebayes.PositiveNaiveBayesClassifier": [[36, 3, 1, "", "train"]], "nltk.classify.rte_classify": [[37, 2, 1, "", "RTEFeatureExtractor"], [37, 1, 1, "", "rte_classifier"], [37, 1, 1, "", "rte_features"], [37, 1, 1, "", "rte_featurize"]], "nltk.classify.rte_classify.RTEFeatureExtractor": [[37, 3, 1, "", "__init__"], [37, 3, 1, "", "hyp_extra"], [37, 3, 1, "", "overlap"]], "nltk.classify.scikitlearn": [[38, 2, 1, "", "SklearnClassifier"]], "nltk.classify.scikitlearn.SklearnClassifier": [[38, 3, 1, "", "__init__"], [38, 3, 1, "", "classify_many"], [38, 3, 1, "", "labels"], [38, 3, 1, "", "prob_classify_many"], [38, 3, 1, "", "train"]], "nltk.classify.senna": [[39, 2, 1, "", "Senna"]], "nltk.classify.senna.Senna": [[39, 4, 1, "", "SUPPORTED_OPERATIONS"], [39, 3, 1, "", "__init__"], [39, 3, 1, "", "executable"], [39, 3, 1, "", "tag"], [39, 3, 1, "", "tag_sents"]], "nltk.classify.svm": [[40, 2, 1, "", "SvmClassifier"]], "nltk.classify.svm.SvmClassifier": [[40, 3, 1, "", "__init__"]], "nltk.classify.tadm": [[41, 1, 1, "", "call_tadm"], [41, 1, 1, "", "config_tadm"], [41, 1, 1, "", "encoding_demo"], [41, 1, 1, "", "names_demo"], [41, 1, 1, "", "parse_tadm_weights"], [41, 1, 1, "", "write_tadm_file"]], "nltk.classify.textcat": [[42, 2, 1, "", "TextCat"], [42, 1, 1, "", "demo"]], "nltk.classify.textcat.TextCat": [[42, 3, 1, "", "__init__"], [42, 3, 1, "", "calc_dist"], [42, 4, 1, "", "fingerprints"], [42, 3, 1, "", "guess_language"], [42, 3, 1, "", "lang_dists"], [42, 4, 1, "", "last_distances"], [42, 3, 1, "", "profile"], [42, 3, 1, "", "remove_punctuation"]], "nltk.classify.util": [[43, 2, 1, "", "CutoffChecker"], [43, 1, 1, "", "accuracy"], [43, 1, 1, "", "apply_features"], [43, 1, 1, "", "attested_labels"], [43, 1, 1, "", "binary_names_demo_features"], [43, 1, 1, "", "check_megam_config"], [43, 1, 1, "", "log_likelihood"], [43, 1, 1, "", "names_demo"], [43, 1, 1, "", "names_demo_features"], [43, 1, 1, "", "partial_names_demo"], [43, 1, 1, "", "wsd_demo"]], "nltk.classify.util.CutoffChecker": [[43, 3, 1, "", "__init__"], [43, 3, 1, "", "check"]], "nltk.classify.weka": [[44, 2, 1, "", "ARFF_Formatter"], [44, 2, 1, "", "WekaClassifier"], [44, 1, 1, "", "config_weka"]], "nltk.classify.weka.ARFF_Formatter": [[44, 3, 1, "", "__init__"], [44, 3, 1, "", "data_section"], [44, 3, 1, "", "format"], [44, 3, 1, "", "from_train"], [44, 3, 1, "", "header_section"], [44, 3, 1, "", "labels"], [44, 3, 1, "", "write"]], "nltk.classify.weka.WekaClassifier": [[44, 3, 1, "", "__init__"], [44, 3, 1, "", "classify_many"], [44, 3, 1, "", "parse_weka_distribution"], [44, 3, 1, "", "parse_weka_output"], [44, 3, 1, "", "prob_classify_many"], [44, 3, 1, "", "train"]], "nltk.cluster": [[47, 0, 0, "-", "api"], [48, 0, 0, "-", "em"], [49, 0, 0, "-", "gaac"], [50, 0, 0, "-", "kmeans"], [51, 0, 0, "-", "util"]], "nltk.cluster.api": [[47, 2, 1, "", "ClusterI"]], "nltk.cluster.api.ClusterI": [[47, 3, 1, "", "classification_probdist"], [47, 3, 1, "", "classify"], [47, 3, 1, "", "cluster"], [47, 3, 1, "", "cluster_name"], [47, 3, 1, "", "cluster_names"], [47, 3, 1, "", "likelihood"], [47, 3, 1, "", "num_clusters"]], "nltk.cluster.em": [[48, 2, 1, "", "EMClusterer"], [48, 1, 1, "", "demo"]], "nltk.cluster.em.EMClusterer": [[48, 3, 1, "", "__init__"], [48, 3, 1, "", "classify_vectorspace"], [48, 3, 1, "", "cluster_vectorspace"], [48, 3, 1, "", "likelihood_vectorspace"], [48, 3, 1, "", "num_clusters"]], "nltk.cluster.gaac": [[49, 2, 1, "", "GAAClusterer"], [49, 1, 1, "", "demo"]], "nltk.cluster.gaac.GAAClusterer": [[49, 3, 1, "", "__init__"], [49, 3, 1, "", "classify_vectorspace"], [49, 3, 1, "", "cluster"], [49, 3, 1, "", "cluster_vectorspace"], [49, 3, 1, "", "dendrogram"], [49, 3, 1, "", "num_clusters"], [49, 3, 1, "", "update_clusters"]], "nltk.cluster.kmeans": [[50, 2, 1, "", "KMeansClusterer"], [50, 1, 1, "", "demo"]], "nltk.cluster.kmeans.KMeansClusterer": [[50, 3, 1, "", "__init__"], [50, 3, 1, "", "classify_vectorspace"], [50, 3, 1, "", "cluster_vectorspace"], [50, 3, 1, "", "means"], [50, 3, 1, "", "num_clusters"]], "nltk.cluster.util": [[51, 2, 1, "", "Dendrogram"], [51, 2, 1, "", "VectorSpaceClusterer"], [51, 1, 1, "", "cosine_distance"], [51, 1, 1, "", "euclidean_distance"]], "nltk.cluster.util.Dendrogram": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "groups"], [51, 3, 1, "", "merge"], [51, 3, 1, "", "show"]], "nltk.cluster.util.VectorSpaceClusterer": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "classify"], [51, 3, 1, "", "classify_vectorspace"], [51, 3, 1, "", "cluster"], [51, 3, 1, "", "cluster_vectorspace"], [51, 3, 1, "", "likelihood"], [51, 3, 1, "", "likelihood_vectorspace"], [51, 3, 1, "", "vector"]], "nltk.collections": [[52, 2, 1, "", "AbstractLazySequence"], [52, 2, 1, "", "LazyConcatenation"], [52, 2, 1, "", "LazyEnumerate"], [52, 2, 1, "", "LazyIteratorList"], [52, 2, 1, "", "LazyMap"], [52, 2, 1, "", "LazySubsequence"], [52, 2, 1, "", "LazyZip"], [52, 2, 1, "", "OrderedDict"], [52, 2, 1, "", "Trie"]], "nltk.collections.AbstractLazySequence": [[52, 3, 1, "", "count"], [52, 3, 1, "", "index"], [52, 3, 1, "", "iterate_from"]], "nltk.collections.LazyConcatenation": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "iterate_from"]], "nltk.collections.LazyEnumerate": [[52, 3, 1, "", "__init__"]], "nltk.collections.LazyIteratorList": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "iterate_from"]], "nltk.collections.LazyMap": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "iterate_from"]], "nltk.collections.LazySubsequence": [[52, 4, 1, "", "MIN_SIZE"], [52, 3, 1, "", "__init__"], [52, 3, 1, "", "__new__"], [52, 3, 1, "", "iterate_from"]], "nltk.collections.LazyZip": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "iterate_from"]], "nltk.collections.OrderedDict": [[52, 3, 1, "", "__init__"], [52, 3, 1, "", "clear"], [52, 3, 1, "", "copy"], [52, 3, 1, "", "items"], [52, 3, 1, "", "keys"], [52, 3, 1, "", "popitem"], [52, 3, 1, "", "setdefault"], [52, 3, 1, "", "update"], [52, 3, 1, "", "values"]], "nltk.collections.Trie": [[52, 4, 1, "", "LEAF"], [52, 3, 1, "", "__init__"], [52, 3, 1, "", "insert"]], "nltk.collocations": [[53, 2, 1, "", "BigramCollocationFinder"], [53, 2, 1, "", "QuadgramCollocationFinder"], [53, 2, 1, "", "TrigramCollocationFinder"]], "nltk.collocations.BigramCollocationFinder": [[53, 3, 1, "", "__init__"], [53, 4, 1, "", "default_ws"], [53, 3, 1, "", "from_words"], [53, 3, 1, "", "score_ngram"]], "nltk.collocations.QuadgramCollocationFinder": [[53, 3, 1, "", "__init__"], [53, 4, 1, "", "default_ws"], [53, 3, 1, "", "from_words"], [53, 3, 1, "", "score_ngram"]], "nltk.collocations.TrigramCollocationFinder": [[53, 3, 1, "", "__init__"], [53, 3, 1, "", "bigram_finder"], [53, 4, 1, "", "default_ws"], [53, 3, 1, "", "from_words"], [53, 3, 1, "", "score_ngram"]], "nltk.compat": [[54, 1, 1, "", "add_py3_data"], [54, 1, 1, "", "py3_data"]], "nltk.corpus": [[55, 1, 1, "", "demo"], [56, 0, 0, "-", "europarl_raw"], [57, 0, 0, "-", "reader"], [110, 0, 0, "-", "util"]], "nltk.corpus.reader": [[57, 2, 1, "", "AlignedCorpusReader"], [57, 2, 1, "", "AlpinoCorpusReader"], [57, 2, 1, "", "BCP47CorpusReader"], [57, 2, 1, "", "BNCCorpusReader"], [57, 2, 1, "", "BracketParseCorpusReader"], [57, 2, 1, "", "CHILDESCorpusReader"], [57, 2, 1, "", "CMUDictCorpusReader"], [57, 2, 1, "", "CategorizedBracketParseCorpusReader"], [57, 2, 1, "", "CategorizedCorpusReader"], [57, 2, 1, "", "CategorizedPlaintextCorpusReader"], [57, 2, 1, "", "CategorizedSentencesCorpusReader"], [57, 2, 1, "", "CategorizedTaggedCorpusReader"], [57, 2, 1, "", "ChasenCorpusReader"], [57, 2, 1, "", "ChunkedCorpusReader"], [57, 2, 1, "", "ComparativeSentencesCorpusReader"], [57, 2, 1, "", "ConllChunkCorpusReader"], [57, 2, 1, "", "ConllCorpusReader"], [57, 2, 1, "", "CorpusReader"], [57, 2, 1, "", "CrubadanCorpusReader"], [57, 2, 1, "", "DependencyCorpusReader"], [57, 2, 1, "", "EuroparlCorpusReader"], [57, 2, 1, "", "FramenetCorpusReader"], [57, 2, 1, "", "IEERCorpusReader"], [57, 2, 1, "", "IPIPANCorpusReader"], [57, 2, 1, "", "IndianCorpusReader"], [57, 2, 1, "", "KNBCorpusReader"], [57, 2, 1, "", "LinThesaurusCorpusReader"], [57, 2, 1, "", "MTECorpusReader"], [57, 2, 1, "", "MWAPPDBCorpusReader"], [57, 2, 1, "", "MacMorphoCorpusReader"], [57, 2, 1, "", "NKJPCorpusReader"], [57, 2, 1, "", "NPSChatCorpusReader"], [57, 2, 1, "", "NombankCorpusReader"], [57, 2, 1, "", "NonbreakingPrefixesCorpusReader"], [57, 2, 1, "", "OpinionLexiconCorpusReader"], [57, 2, 1, "", "PPAttachmentCorpusReader"], [57, 2, 1, "", "PanLexLiteCorpusReader"], [57, 2, 1, "", "PanlexSwadeshCorpusReader"], [57, 2, 1, "", "Pl196xCorpusReader"], [57, 2, 1, "", "PlaintextCorpusReader"], [57, 2, 1, "", "PortugueseCategorizedPlaintextCorpusReader"], [57, 2, 1, "", "PropbankCorpusReader"], [57, 2, 1, "", "ProsConsCorpusReader"], [57, 2, 1, "", "RTECorpusReader"], [57, 2, 1, "", "ReviewsCorpusReader"], [57, 2, 1, "", "SemcorCorpusReader"], [57, 2, 1, "", "SensevalCorpusReader"], [57, 2, 1, "", "SentiSynset"], [57, 2, 1, "", "SentiWordNetCorpusReader"], [57, 2, 1, "", "SinicaTreebankCorpusReader"], [57, 2, 1, "", "StringCategoryCorpusReader"], [57, 2, 1, "", "SwadeshCorpusReader"], [57, 2, 1, "", "SwitchboardCorpusReader"], [57, 2, 1, "", "SyntaxCorpusReader"], [57, 2, 1, "", "TEICorpusView"], [57, 2, 1, "", "TaggedCorpusReader"], [57, 2, 1, "", "TimitCorpusReader"], [57, 2, 1, "", "TimitTaggedCorpusReader"], [57, 2, 1, "", "ToolboxCorpusReader"], [57, 2, 1, "", "TwitterCorpusReader"], [57, 2, 1, "", "UdhrCorpusReader"], [57, 2, 1, "", "UnicharsCorpusReader"], [57, 2, 1, "", "VerbnetCorpusReader"], [57, 2, 1, "", "WordListCorpusReader"], [57, 2, 1, "", "WordNetCorpusReader"], [57, 2, 1, "", "WordNetICCorpusReader"], [57, 2, 1, "", "XMLCorpusReader"], [57, 2, 1, "", "YCOECorpusReader"], [58, 0, 0, "-", "aligned"], [59, 0, 0, "-", "api"], [60, 0, 0, "-", "bcp47"], [61, 0, 0, "-", "bnc"], [62, 0, 0, "-", "bracket_parse"], [63, 0, 0, "-", "categorized_sents"], [64, 0, 0, "-", "chasen"], [65, 0, 0, "-", "childes"], [66, 0, 0, "-", "chunked"], [67, 0, 0, "-", "cmudict"], [68, 0, 0, "-", "comparative_sents"], [69, 0, 0, "-", "conll"], [70, 0, 0, "-", "crubadan"], [71, 0, 0, "-", "dependency"], [57, 1, 1, "", "find_corpus_fileids"], [72, 0, 0, "-", "framenet"], [73, 0, 0, "-", "ieer"], [74, 0, 0, "-", "indian"], [75, 0, 0, "-", "ipipan"], [76, 0, 0, "-", "knbc"], [77, 0, 0, "-", "lin"], [78, 0, 0, "-", "markdown"], [79, 0, 0, "-", "mte"], [80, 0, 0, "-", "nkjp"], [81, 0, 0, "-", "nombank"], [82, 0, 0, "-", "nps_chat"], [83, 0, 0, "-", "opinion_lexicon"], [84, 0, 0, "-", "panlex_lite"], [85, 0, 0, "-", "panlex_swadesh"], [86, 0, 0, "-", "pl196x"], [87, 0, 0, "-", "plaintext"], [88, 0, 0, "-", "ppattach"], [89, 0, 0, "-", "propbank"], [90, 0, 0, "-", "pros_cons"], [91, 0, 0, "-", "reviews"], [92, 0, 0, "-", "rte"], [93, 0, 0, "-", "semcor"], [94, 0, 0, "-", "senseval"], [95, 0, 0, "-", "sentiwordnet"], [96, 0, 0, "-", "sinica_treebank"], [97, 0, 0, "-", "string_category"], [98, 0, 0, "-", "switchboard"], [99, 0, 0, "-", "tagged"], [57, 1, 1, "", "tagged_treebank_para_block_reader"], [100, 0, 0, "-", "timit"], [101, 0, 0, "-", "toolbox"], [102, 0, 0, "-", "twitter"], [103, 0, 0, "-", "udhr"], [104, 0, 0, "-", "util"], [105, 0, 0, "-", "verbnet"], [106, 0, 0, "-", "wordlist"], [107, 0, 0, "-", "wordnet"], [108, 0, 0, "-", "xmldocs"], [109, 0, 0, "-", "ycoe"]], "nltk.corpus.reader.AlignedCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "aligned_sents"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.AlpinoCorpusReader": [[57, 3, 1, "", "__init__"]], "nltk.corpus.reader.BCP47CorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "data_dict"], [57, 3, 1, "", "lang2str"], [57, 3, 1, "", "load_wiki_q"], [57, 3, 1, "", "morphology"], [57, 3, 1, "", "name"], [57, 3, 1, "", "parse_tag"], [57, 3, 1, "", "subdiv_dict"], [57, 3, 1, "", "val2str"], [57, 3, 1, "", "wiki_dict"]], "nltk.corpus.reader.BNCCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.BracketParseCorpusReader": [[57, 3, 1, "", "__init__"]], "nltk.corpus.reader.CHILDESCorpusReader": [[57, 3, 1, "", "MLU"], [57, 3, 1, "", "__init__"], [57, 3, 1, "", "age"], [57, 4, 1, "", "childes_url_base"], [57, 3, 1, "", "convert_age"], [57, 3, 1, "", "corpus"], [57, 3, 1, "", "participants"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "webview_file"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.CMUDictCorpusReader": [[57, 3, 1, "", "dict"], [57, 3, 1, "", "entries"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.CategorizedBracketParseCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "parsed_paras"], [57, 3, 1, "", "parsed_sents"], [57, 3, 1, "", "parsed_words"], [57, 3, 1, "", "tagged_paras"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"]], "nltk.corpus.reader.CategorizedCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "categories"], [57, 3, 1, "", "fileids"], [57, 3, 1, "", "paras"], [57, 3, 1, "", "raw"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.CategorizedPlaintextCorpusReader": [[57, 3, 1, "", "__init__"]], "nltk.corpus.reader.CategorizedSentencesCorpusReader": [[57, 4, 1, "", "CorpusView"], [57, 3, 1, "", "__init__"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.CategorizedTaggedCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "tagged_paras"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"]], "nltk.corpus.reader.ChasenCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "paras"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_paras"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.ChunkedCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "chunked_paras"], [57, 3, 1, "", "chunked_sents"], [57, 3, 1, "", "chunked_words"], [57, 3, 1, "", "paras"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_paras"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.ComparativeSentencesCorpusReader": [[57, 4, 1, "", "CorpusView"], [57, 3, 1, "", "__init__"], [57, 3, 1, "", "comparisons"], [57, 3, 1, "", "keywords"], [57, 3, 1, "", "keywords_readme"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.ConllChunkCorpusReader": [[57, 3, 1, "", "__init__"]], "nltk.corpus.reader.ConllCorpusReader": [[57, 4, 1, "", "CHUNK"], [57, 4, 1, "", "COLUMN_TYPES"], [57, 4, 1, "", "IGNORE"], [57, 4, 1, "", "NE"], [57, 4, 1, "", "POS"], [57, 4, 1, "", "SRL"], [57, 4, 1, "", "TREE"], [57, 4, 1, "", "WORDS"], [57, 3, 1, "", "__init__"], [57, 3, 1, "", "chunked_sents"], [57, 3, 1, "", "chunked_words"], [57, 3, 1, "", "iob_sents"], [57, 3, 1, "", "iob_words"], [57, 3, 1, "", "parsed_sents"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "srl_instances"], [57, 3, 1, "", "srl_spans"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.CorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "abspath"], [57, 3, 1, "", "abspaths"], [57, 3, 1, "", "citation"], [57, 3, 1, "", "encoding"], [57, 3, 1, "", "ensure_loaded"], [57, 3, 1, "", "fileids"], [57, 3, 1, "", "license"], [57, 3, 1, "", "open"], [57, 3, 1, "", "raw"], [57, 3, 1, "", "readme"], [57, 5, 1, "", "root"]], "nltk.corpus.reader.CrubadanCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "crubadan_to_iso"], [57, 3, 1, "", "iso_to_crubadan"], [57, 3, 1, "", "lang_freq"], [57, 3, 1, "", "langs"]], "nltk.corpus.reader.DependencyCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "parsed_sents"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.EuroparlCorpusReader": [[57, 3, 1, "", "chapters"], [57, 3, 1, "", "paras"]], "nltk.corpus.reader.FramenetCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "annotations"], [57, 3, 1, "", "buildindexes"], [57, 3, 1, "", "doc"], [57, 3, 1, "", "docs"], [57, 3, 1, "", "docs_metadata"], [57, 3, 1, "", "exemplars"], [57, 3, 1, "", "fe_relations"], [57, 3, 1, "", "fes"], [57, 3, 1, "", "frame"], [57, 3, 1, "", "frame_by_id"], [57, 3, 1, "", "frame_by_name"], [57, 3, 1, "", "frame_ids_and_names"], [57, 3, 1, "", "frame_relation_types"], [57, 3, 1, "", "frame_relations"], [57, 3, 1, "", "frames"], [57, 3, 1, "", "frames_by_lemma"], [57, 3, 1, "", "ft_sents"], [57, 3, 1, "", "help"], [57, 3, 1, "", "lu"], [57, 3, 1, "", "lu_basic"], [57, 3, 1, "", "lu_ids_and_names"], [57, 3, 1, "", "lus"], [57, 3, 1, "", "propagate_semtypes"], [57, 3, 1, "", "semtype"], [57, 3, 1, "", "semtype_inherits"], [57, 3, 1, "", "semtypes"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "warnings"]], "nltk.corpus.reader.IEERCorpusReader": [[57, 3, 1, "", "docs"], [57, 3, 1, "", "parsed_docs"]], "nltk.corpus.reader.IPIPANCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "categories"], [57, 3, 1, "", "channels"], [57, 3, 1, "", "domains"], [57, 3, 1, "", "fileids"], [57, 3, 1, "", "paras"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_paras"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.IndianCorpusReader": [[57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.KNBCorpusReader": [[57, 3, 1, "", "__init__"]], "nltk.corpus.reader.LinThesaurusCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "scored_synonyms"], [57, 3, 1, "", "similarity"], [57, 3, 1, "", "synonyms"]], "nltk.corpus.reader.MTECorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "lemma_paras"], [57, 3, 1, "", "lemma_sents"], [57, 3, 1, "", "lemma_words"], [57, 3, 1, "", "paras"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_paras"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.MWAPPDBCorpusReader": [[57, 3, 1, "", "entries"], [57, 4, 1, "", "mwa_ppdb_xxxl_file"]], "nltk.corpus.reader.MacMorphoCorpusReader": [[57, 3, 1, "", "__init__"]], "nltk.corpus.reader.NKJPCorpusReader": [[57, 4, 1, "", "HEADER_MODE"], [57, 4, 1, "", "RAW_MODE"], [57, 4, 1, "", "SENTS_MODE"], [57, 4, 1, "", "WORDS_MODE"], [57, 3, 1, "", "__init__"], [57, 3, 1, "", "add_root"], [57, 3, 1, "", "fileids"], [57, 3, 1, "", "get_paths"], [57, 3, 1, "", "header"], [57, 3, 1, "", "raw"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.NPSChatCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "posts"], [57, 3, 1, "", "tagged_posts"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"], [57, 3, 1, "", "xml_posts"]], "nltk.corpus.reader.NombankCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "instances"], [57, 3, 1, "", "lines"], [57, 3, 1, "", "nouns"], [57, 3, 1, "", "roleset"], [57, 3, 1, "", "rolesets"]], "nltk.corpus.reader.NonbreakingPrefixesCorpusReader": [[57, 4, 1, "", "available_langs"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.OpinionLexiconCorpusReader": [[57, 4, 1, "", "CorpusView"], [57, 3, 1, "", "negative"], [57, 3, 1, "", "positive"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.PPAttachmentCorpusReader": [[57, 3, 1, "", "attachments"], [57, 3, 1, "", "tuples"]], "nltk.corpus.reader.PanLexLiteCorpusReader": [[57, 4, 1, "", "MEANING_Q"], [57, 4, 1, "", "TRANSLATION_Q"], [57, 3, 1, "", "__init__"], [57, 3, 1, "", "language_varieties"], [57, 3, 1, "", "meanings"], [57, 3, 1, "", "translations"]], "nltk.corpus.reader.PanlexSwadeshCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "entries"], [57, 3, 1, "", "get_languages"], [57, 3, 1, "", "get_macrolanguages"], [57, 3, 1, "", "language_codes"], [57, 3, 1, "", "license"], [57, 3, 1, "", "words_by_iso639"], [57, 3, 1, "", "words_by_lang"]], "nltk.corpus.reader.Pl196xCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "decode_tag"], [57, 4, 1, "", "head_len"], [57, 3, 1, "", "paras"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_paras"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "textids"], [57, 3, 1, "", "words"], [57, 3, 1, "", "xml"]], "nltk.corpus.reader.PlaintextCorpusReader": [[57, 4, 1, "", "CorpusView"], [57, 3, 1, "", "__init__"], [57, 3, 1, "", "paras"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.PortugueseCategorizedPlaintextCorpusReader": [[57, 3, 1, "", "__init__"]], "nltk.corpus.reader.PropbankCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "instances"], [57, 3, 1, "", "lines"], [57, 3, 1, "", "roleset"], [57, 3, 1, "", "rolesets"], [57, 3, 1, "", "verbs"]], "nltk.corpus.reader.ProsConsCorpusReader": [[57, 4, 1, "", "CorpusView"], [57, 3, 1, "", "__init__"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.RTECorpusReader": [[57, 3, 1, "", "pairs"]], "nltk.corpus.reader.ReviewsCorpusReader": [[57, 4, 1, "", "CorpusView"], [57, 3, 1, "", "__init__"], [57, 3, 1, "", "features"], [57, 3, 1, "", "reviews"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.SemcorCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "chunk_sents"], [57, 3, 1, "", "chunks"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_chunks"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.SensevalCorpusReader": [[57, 3, 1, "", "instances"]], "nltk.corpus.reader.SentiSynset": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "neg_score"], [57, 3, 1, "", "obj_score"], [57, 3, 1, "", "pos_score"]], "nltk.corpus.reader.SentiWordNetCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "all_senti_synsets"], [57, 3, 1, "", "senti_synset"], [57, 3, 1, "", "senti_synsets"]], "nltk.corpus.reader.StringCategoryCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "tuples"]], "nltk.corpus.reader.SwadeshCorpusReader": [[57, 3, 1, "", "entries"]], "nltk.corpus.reader.SwitchboardCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "discourses"], [57, 3, 1, "", "tagged_discourses"], [57, 3, 1, "", "tagged_turns"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "turns"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.SyntaxCorpusReader": [[57, 3, 1, "", "parsed_sents"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.TEICorpusView": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "read_block"]], "nltk.corpus.reader.TaggedCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "paras"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_paras"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.TimitCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "audiodata"], [57, 3, 1, "", "fileids"], [57, 3, 1, "", "phone_times"], [57, 3, 1, "", "phone_trees"], [57, 3, 1, "", "phones"], [57, 3, 1, "", "play"], [57, 3, 1, "", "sent_times"], [57, 3, 1, "", "sentid"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "spkrid"], [57, 3, 1, "", "spkrinfo"], [57, 3, 1, "", "spkrutteranceids"], [57, 3, 1, "", "transcription_dict"], [57, 3, 1, "", "utterance"], [57, 3, 1, "", "utteranceids"], [57, 3, 1, "", "wav"], [57, 3, 1, "", "word_times"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.TimitTaggedCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "paras"], [57, 3, 1, "", "tagged_paras"]], "nltk.corpus.reader.ToolboxCorpusReader": [[57, 3, 1, "", "entries"], [57, 3, 1, "", "fields"], [57, 3, 1, "", "words"], [57, 3, 1, "", "xml"]], "nltk.corpus.reader.TwitterCorpusReader": [[57, 4, 1, "", "CorpusView"], [57, 3, 1, "", "__init__"], [57, 3, 1, "", "docs"], [57, 3, 1, "", "strings"], [57, 3, 1, "", "tokenized"]], "nltk.corpus.reader.UdhrCorpusReader": [[57, 4, 1, "", "ENCODINGS"], [57, 4, 1, "", "SKIP"], [57, 3, 1, "", "__init__"]], "nltk.corpus.reader.UnicharsCorpusReader": [[57, 4, 1, "", "available_categories"], [57, 3, 1, "", "chars"]], "nltk.corpus.reader.VerbnetCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "classids"], [57, 3, 1, "", "fileids"], [57, 3, 1, "", "frames"], [57, 3, 1, "", "lemmas"], [57, 3, 1, "", "longid"], [57, 3, 1, "", "pprint"], [57, 3, 1, "", "pprint_frames"], [57, 3, 1, "", "pprint_members"], [57, 3, 1, "", "pprint_subclasses"], [57, 3, 1, "", "pprint_themroles"], [57, 3, 1, "", "shortid"], [57, 3, 1, "", "subclasses"], [57, 3, 1, "", "themroles"], [57, 3, 1, "", "vnclass"], [57, 3, 1, "", "wordnetids"]], "nltk.corpus.reader.WordListCorpusReader": [[57, 3, 1, "", "words"]], "nltk.corpus.reader.WordNetCorpusReader": [[57, 4, 1, "", "ADJ"], [57, 4, 1, "", "ADJ_SAT"], [57, 4, 1, "", "ADV"], [57, 4, 1, "", "MORPHOLOGICAL_SUBSTITUTIONS"], [57, 4, 1, "", "NOUN"], [57, 4, 1, "", "VERB"], [57, 3, 1, "", "__init__"], [57, 3, 1, "", "add_exomw"], [57, 3, 1, "", "add_omw"], [57, 3, 1, "", "add_provs"], [57, 3, 1, "", "all_eng_synsets"], [57, 3, 1, "", "all_lemma_names"], [57, 3, 1, "", "all_omw_synsets"], [57, 3, 1, "", "all_synsets"], [57, 3, 1, "", "citation"], [57, 3, 1, "", "custom_lemmas"], [57, 3, 1, "", "digraph"], [57, 3, 1, "", "disable_custom_lemmas"], [57, 3, 1, "", "doc"], [57, 3, 1, "", "get_version"], [57, 3, 1, "", "ic"], [57, 3, 1, "", "index_sense"], [57, 3, 1, "", "jcn_similarity"], [57, 3, 1, "", "langs"], [57, 3, 1, "", "lch_similarity"], [57, 3, 1, "", "lemma"], [57, 3, 1, "", "lemma_count"], [57, 3, 1, "", "lemma_from_key"], [57, 3, 1, "", "lemmas"], [57, 3, 1, "", "license"], [57, 3, 1, "", "lin_similarity"], [57, 3, 1, "", "map_to_many"], [57, 3, 1, "", "map_to_one"], [57, 3, 1, "", "map_wn"], [57, 3, 1, "", "merged_synsets"], [57, 3, 1, "", "morphy"], [57, 3, 1, "", "of2ss"], [57, 3, 1, "", "path_similarity"], [57, 3, 1, "", "readme"], [57, 3, 1, "", "res_similarity"], [57, 3, 1, "", "split_synsets"], [57, 3, 1, "", "ss2of"], [57, 3, 1, "", "synonyms"], [57, 3, 1, "", "synset"], [57, 3, 1, "", "synset_from_pos_and_offset"], [57, 3, 1, "", "synset_from_sense_key"], [57, 3, 1, "", "synsets"], [57, 3, 1, "", "words"], [57, 3, 1, "", "wup_similarity"]], "nltk.corpus.reader.WordNetICCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "ic"]], "nltk.corpus.reader.XMLCorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "words"], [57, 3, 1, "", "xml"]], "nltk.corpus.reader.YCOECorpusReader": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "documents"], [57, 3, 1, "", "fileids"], [57, 3, 1, "", "paras"], [57, 3, 1, "", "parsed_sents"], [57, 3, 1, "", "sents"], [57, 3, 1, "", "tagged_paras"], [57, 3, 1, "", "tagged_sents"], [57, 3, 1, "", "tagged_words"], [57, 3, 1, "", "words"]], "nltk.corpus.reader.aligned": [[58, 2, 1, "", "AlignedCorpusReader"], [58, 2, 1, "", "AlignedSentCorpusView"]], "nltk.corpus.reader.aligned.AlignedCorpusReader": [[58, 3, 1, "", "__init__"], [58, 3, 1, "", "aligned_sents"], [58, 3, 1, "", "sents"], [58, 3, 1, "", "words"]], "nltk.corpus.reader.aligned.AlignedSentCorpusView": [[58, 3, 1, "", "__init__"], [58, 3, 1, "", "read_block"]], "nltk.corpus.reader.api": [[59, 2, 1, "", "CategorizedCorpusReader"], [59, 2, 1, "", "CorpusReader"], [59, 2, 1, "", "SyntaxCorpusReader"]], "nltk.corpus.reader.api.CategorizedCorpusReader": [[59, 3, 1, "", "__init__"], [59, 3, 1, "", "categories"], [59, 3, 1, "", "fileids"], [59, 3, 1, "", "paras"], [59, 3, 1, "", "raw"], [59, 3, 1, "", "sents"], [59, 3, 1, "", "words"]], "nltk.corpus.reader.api.CorpusReader": [[59, 3, 1, "", "__init__"], [59, 3, 1, "", "abspath"], [59, 3, 1, "", "abspaths"], [59, 3, 1, "", "citation"], [59, 3, 1, "", "encoding"], [59, 3, 1, "", "ensure_loaded"], [59, 3, 1, "", "fileids"], [59, 3, 1, "", "license"], [59, 3, 1, "", "open"], [59, 3, 1, "", "raw"], [59, 3, 1, "", "readme"], [59, 5, 1, "", "root"]], "nltk.corpus.reader.api.SyntaxCorpusReader": [[59, 3, 1, "", "parsed_sents"], [59, 3, 1, "", "sents"], [59, 3, 1, "", "tagged_sents"], [59, 3, 1, "", "tagged_words"], [59, 3, 1, "", "words"]], "nltk.corpus.reader.bcp47": [[60, 2, 1, "", "BCP47CorpusReader"]], "nltk.corpus.reader.bcp47.BCP47CorpusReader": [[60, 3, 1, "", "__init__"], [60, 3, 1, "", "data_dict"], [60, 3, 1, "", "lang2str"], [60, 3, 1, "", "load_wiki_q"], [60, 3, 1, "", "morphology"], [60, 3, 1, "", "name"], [60, 3, 1, "", "parse_tag"], [60, 3, 1, "", "subdiv_dict"], [60, 3, 1, "", "val2str"], [60, 3, 1, "", "wiki_dict"]], "nltk.corpus.reader.bnc": [[61, 2, 1, "", "BNCCorpusReader"], [61, 2, 1, "", "BNCSentence"], [61, 2, 1, "", "BNCWordView"]], "nltk.corpus.reader.bnc.BNCCorpusReader": [[61, 3, 1, "", "__init__"], [61, 3, 1, "", "sents"], [61, 3, 1, "", "tagged_sents"], [61, 3, 1, "", "tagged_words"], [61, 3, 1, "", "words"]], "nltk.corpus.reader.bnc.BNCSentence": [[61, 3, 1, "", "__init__"]], "nltk.corpus.reader.bnc.BNCWordView": [[61, 3, 1, "", "__init__"], [61, 4, 1, "", "author"], [61, 4, 1, "", "editor"], [61, 3, 1, "", "handle_elt"], [61, 3, 1, "", "handle_header"], [61, 3, 1, "", "handle_sent"], [61, 3, 1, "", "handle_word"], [61, 4, 1, "", "resps"], [61, 4, 1, "", "tags_to_ignore"], [61, 4, 1, "", "title"]], "nltk.corpus.reader.bracket_parse": [[62, 2, 1, "", "AlpinoCorpusReader"], [62, 2, 1, "", "BracketParseCorpusReader"], [62, 2, 1, "", "CategorizedBracketParseCorpusReader"]], "nltk.corpus.reader.bracket_parse.AlpinoCorpusReader": [[62, 3, 1, "", "__init__"]], "nltk.corpus.reader.bracket_parse.BracketParseCorpusReader": [[62, 3, 1, "", "__init__"]], "nltk.corpus.reader.bracket_parse.CategorizedBracketParseCorpusReader": [[62, 3, 1, "", "__init__"], [62, 3, 1, "", "parsed_paras"], [62, 3, 1, "", "parsed_sents"], [62, 3, 1, "", "parsed_words"], [62, 3, 1, "", "tagged_paras"], [62, 3, 1, "", "tagged_sents"], [62, 3, 1, "", "tagged_words"]], "nltk.corpus.reader.categorized_sents": [[63, 2, 1, "", "CategorizedSentencesCorpusReader"]], "nltk.corpus.reader.categorized_sents.CategorizedSentencesCorpusReader": [[63, 4, 1, "", "CorpusView"], [63, 3, 1, "", "__init__"], [63, 3, 1, "", "sents"], [63, 3, 1, "", "words"]], "nltk.corpus.reader.chasen": [[64, 2, 1, "", "ChasenCorpusReader"], [64, 2, 1, "", "ChasenCorpusView"], [64, 1, 1, "", "demo"], [64, 1, 1, "", "test"]], "nltk.corpus.reader.chasen.ChasenCorpusReader": [[64, 3, 1, "", "__init__"], [64, 3, 1, "", "paras"], [64, 3, 1, "", "sents"], [64, 3, 1, "", "tagged_paras"], [64, 3, 1, "", "tagged_sents"], [64, 3, 1, "", "tagged_words"], [64, 3, 1, "", "words"]], "nltk.corpus.reader.chasen.ChasenCorpusView": [[64, 3, 1, "", "__init__"], [64, 3, 1, "", "read_block"]], "nltk.corpus.reader.childes": [[65, 2, 1, "", "CHILDESCorpusReader"], [65, 1, 1, "", "demo"]], "nltk.corpus.reader.childes.CHILDESCorpusReader": [[65, 3, 1, "", "MLU"], [65, 3, 1, "", "__init__"], [65, 3, 1, "", "age"], [65, 4, 1, "", "childes_url_base"], [65, 3, 1, "", "convert_age"], [65, 3, 1, "", "corpus"], [65, 3, 1, "", "participants"], [65, 3, 1, "", "sents"], [65, 3, 1, "", "tagged_sents"], [65, 3, 1, "", "tagged_words"], [65, 3, 1, "", "webview_file"], [65, 3, 1, "", "words"]], "nltk.corpus.reader.chunked": [[66, 2, 1, "", "ChunkedCorpusReader"], [66, 2, 1, "", "ChunkedCorpusView"]], "nltk.corpus.reader.chunked.ChunkedCorpusReader": [[66, 3, 1, "", "__init__"], [66, 3, 1, "", "chunked_paras"], [66, 3, 1, "", "chunked_sents"], [66, 3, 1, "", "chunked_words"], [66, 3, 1, "", "paras"], [66, 3, 1, "", "sents"], [66, 3, 1, "", "tagged_paras"], [66, 3, 1, "", "tagged_sents"], [66, 3, 1, "", "tagged_words"], [66, 3, 1, "", "words"]], "nltk.corpus.reader.chunked.ChunkedCorpusView": [[66, 3, 1, "", "__init__"], [66, 3, 1, "", "read_block"]], "nltk.corpus.reader.cmudict": [[67, 2, 1, "", "CMUDictCorpusReader"], [67, 1, 1, "", "read_cmudict_block"]], "nltk.corpus.reader.cmudict.CMUDictCorpusReader": [[67, 3, 1, "", "dict"], [67, 3, 1, "", "entries"], [67, 3, 1, "", "words"]], "nltk.corpus.reader.comparative_sents": [[68, 2, 1, "", "ComparativeSentencesCorpusReader"], [68, 2, 1, "", "Comparison"]], "nltk.corpus.reader.comparative_sents.ComparativeSentencesCorpusReader": [[68, 4, 1, "", "CorpusView"], [68, 3, 1, "", "__init__"], [68, 3, 1, "", "comparisons"], [68, 3, 1, "", "keywords"], [68, 3, 1, "", "keywords_readme"], [68, 3, 1, "", "sents"], [68, 3, 1, "", "words"]], "nltk.corpus.reader.comparative_sents.Comparison": [[68, 3, 1, "", "__init__"]], "nltk.corpus.reader.conll": [[69, 2, 1, "", "ConllChunkCorpusReader"], [69, 2, 1, "", "ConllCorpusReader"], [69, 2, 1, "", "ConllSRLInstance"], [69, 2, 1, "", "ConllSRLInstanceList"]], "nltk.corpus.reader.conll.ConllChunkCorpusReader": [[69, 3, 1, "", "__init__"]], "nltk.corpus.reader.conll.ConllCorpusReader": [[69, 4, 1, "", "CHUNK"], [69, 4, 1, "", "COLUMN_TYPES"], [69, 4, 1, "", "IGNORE"], [69, 4, 1, "", "NE"], [69, 4, 1, "", "POS"], [69, 4, 1, "", "SRL"], [69, 4, 1, "", "TREE"], [69, 4, 1, "", "WORDS"], [69, 3, 1, "", "__init__"], [69, 3, 1, "", "chunked_sents"], [69, 3, 1, "", "chunked_words"], [69, 3, 1, "", "iob_sents"], [69, 3, 1, "", "iob_words"], [69, 3, 1, "", "parsed_sents"], [69, 3, 1, "", "sents"], [69, 3, 1, "", "srl_instances"], [69, 3, 1, "", "srl_spans"], [69, 3, 1, "", "tagged_sents"], [69, 3, 1, "", "tagged_words"], [69, 3, 1, "", "words"]], "nltk.corpus.reader.conll.ConllSRLInstance": [[69, 3, 1, "", "__init__"], [69, 4, 1, "", "arguments"], [69, 3, 1, "", "pprint"], [69, 4, 1, "", "tagged_spans"], [69, 4, 1, "", "tree"], [69, 4, 1, "", "verb"], [69, 4, 1, "", "verb_head"], [69, 4, 1, "", "words"]], "nltk.corpus.reader.conll.ConllSRLInstanceList": [[69, 3, 1, "", "__init__"], [69, 3, 1, "", "pprint"]], "nltk.corpus.reader.crubadan": [[70, 2, 1, "", "CrubadanCorpusReader"]], "nltk.corpus.reader.crubadan.CrubadanCorpusReader": [[70, 3, 1, "", "__init__"], [70, 3, 1, "", "crubadan_to_iso"], [70, 3, 1, "", "iso_to_crubadan"], [70, 3, 1, "", "lang_freq"], [70, 3, 1, "", "langs"]], "nltk.corpus.reader.dependency": [[71, 2, 1, "", "DependencyCorpusReader"], [71, 2, 1, "", "DependencyCorpusView"]], "nltk.corpus.reader.dependency.DependencyCorpusReader": [[71, 3, 1, "", "__init__"], [71, 3, 1, "", "parsed_sents"], [71, 3, 1, "", "sents"], [71, 3, 1, "", "tagged_sents"], [71, 3, 1, "", "tagged_words"], [71, 3, 1, "", "words"]], "nltk.corpus.reader.dependency.DependencyCorpusView": [[71, 3, 1, "", "__init__"], [71, 3, 1, "", "read_block"]], "nltk.corpus.reader.framenet": [[72, 2, 1, "", "AttrDict"], [72, 2, 1, "", "FramenetCorpusReader"], [72, 6, 1, "", "FramenetError"], [72, 2, 1, "", "Future"], [72, 2, 1, "", "PrettyDict"], [72, 2, 1, "", "PrettyLazyConcatenation"], [72, 2, 1, "", "PrettyLazyIteratorList"], [72, 2, 1, "", "PrettyLazyMap"], [72, 2, 1, "", "PrettyList"], [72, 2, 1, "", "SpecialList"], [72, 1, 1, "", "demo"], [72, 1, 1, "", "mimic_wrap"]], "nltk.corpus.reader.framenet.AttrDict": [[72, 3, 1, "", "__init__"]], "nltk.corpus.reader.framenet.FramenetCorpusReader": [[72, 3, 1, "", "__init__"], [72, 3, 1, "", "annotations"], [72, 3, 1, "", "buildindexes"], [72, 3, 1, "", "doc"], [72, 3, 1, "", "docs"], [72, 3, 1, "", "docs_metadata"], [72, 3, 1, "", "exemplars"], [72, 3, 1, "", "fe_relations"], [72, 3, 1, "", "fes"], [72, 3, 1, "", "frame"], [72, 3, 1, "", "frame_by_id"], [72, 3, 1, "", "frame_by_name"], [72, 3, 1, "", "frame_ids_and_names"], [72, 3, 1, "", "frame_relation_types"], [72, 3, 1, "", "frame_relations"], [72, 3, 1, "", "frames"], [72, 3, 1, "", "frames_by_lemma"], [72, 3, 1, "", "ft_sents"], [72, 3, 1, "", "help"], [72, 3, 1, "", "lu"], [72, 3, 1, "", "lu_basic"], [72, 3, 1, "", "lu_ids_and_names"], [72, 3, 1, "", "lus"], [72, 3, 1, "", "propagate_semtypes"], [72, 3, 1, "", "semtype"], [72, 3, 1, "", "semtype_inherits"], [72, 3, 1, "", "semtypes"], [72, 3, 1, "", "sents"], [72, 3, 1, "", "warnings"]], "nltk.corpus.reader.framenet.Future": [[72, 3, 1, "", "__init__"]], "nltk.corpus.reader.framenet.PrettyDict": [[72, 3, 1, "", "__init__"]], "nltk.corpus.reader.framenet.PrettyList": [[72, 3, 1, "", "__init__"]], "nltk.corpus.reader.framenet.SpecialList": [[72, 3, 1, "", "__init__"]], "nltk.corpus.reader.ieer": [[73, 2, 1, "", "IEERCorpusReader"], [73, 2, 1, "", "IEERDocument"], [73, 7, 1, "", "documents"], [73, 7, 1, "", "titles"]], "nltk.corpus.reader.ieer.IEERCorpusReader": [[73, 3, 1, "", "docs"], [73, 3, 1, "", "parsed_docs"]], "nltk.corpus.reader.ieer.IEERDocument": [[73, 3, 1, "", "__init__"]], "nltk.corpus.reader.indian": [[74, 2, 1, "", "IndianCorpusReader"], [74, 2, 1, "", "IndianCorpusView"]], "nltk.corpus.reader.indian.IndianCorpusReader": [[74, 3, 1, "", "sents"], [74, 3, 1, "", "tagged_sents"], [74, 3, 1, "", "tagged_words"], [74, 3, 1, "", "words"]], "nltk.corpus.reader.indian.IndianCorpusView": [[74, 3, 1, "", "__init__"], [74, 3, 1, "", "read_block"]], "nltk.corpus.reader.ipipan": [[75, 2, 1, "", "IPIPANCorpusReader"], [75, 2, 1, "", "IPIPANCorpusView"]], "nltk.corpus.reader.ipipan.IPIPANCorpusReader": [[75, 3, 1, "", "__init__"], [75, 3, 1, "", "categories"], [75, 3, 1, "", "channels"], [75, 3, 1, "", "domains"], [75, 3, 1, "", "fileids"], [75, 3, 1, "", "paras"], [75, 3, 1, "", "sents"], [75, 3, 1, "", "tagged_paras"], [75, 3, 1, "", "tagged_sents"], [75, 3, 1, "", "tagged_words"], [75, 3, 1, "", "words"]], "nltk.corpus.reader.ipipan.IPIPANCorpusView": [[75, 4, 1, "", "PARAS_MODE"], [75, 4, 1, "", "SENTS_MODE"], [75, 4, 1, "", "WORDS_MODE"], [75, 3, 1, "", "__init__"], [75, 3, 1, "", "read_block"]], "nltk.corpus.reader.knbc": [[76, 2, 1, "", "KNBCorpusReader"], [76, 1, 1, "", "demo"], [76, 1, 1, "", "test"]], "nltk.corpus.reader.knbc.KNBCorpusReader": [[76, 3, 1, "", "__init__"]], "nltk.corpus.reader.lin": [[77, 2, 1, "", "LinThesaurusCorpusReader"], [77, 1, 1, "", "demo"]], "nltk.corpus.reader.lin.LinThesaurusCorpusReader": [[77, 3, 1, "", "__init__"], [77, 3, 1, "", "scored_synonyms"], [77, 3, 1, "", "similarity"], [77, 3, 1, "", "synonyms"]], "nltk.corpus.reader.markdown": [[78, 2, 1, "", "CategorizedMarkdownCorpusReader"], [78, 2, 1, "", "CodeBlock"], [78, 2, 1, "", "Image"], [78, 2, 1, "", "Link"], [78, 2, 1, "", "List"], [78, 2, 1, "", "MarkdownBlock"], [78, 2, 1, "", "MarkdownCorpusReader"], [78, 2, 1, "", "MarkdownSection"], [78, 1, 1, "", "comma_separated_string_args"], [78, 1, 1, "", "read_parse_blankline_block"]], "nltk.corpus.reader.markdown.CategorizedMarkdownCorpusReader": [[78, 3, 1, "", "__init__"], [78, 3, 1, "", "blockquote_reader"], [78, 3, 1, "", "blockquotes"], [78, 3, 1, "", "categories"], [78, 3, 1, "", "code_block_reader"], [78, 3, 1, "", "code_blocks"], [78, 3, 1, "", "concatenated_view"], [78, 3, 1, "", "fileids"], [78, 3, 1, "", "image_reader"], [78, 3, 1, "", "images"], [78, 3, 1, "", "link_reader"], [78, 3, 1, "", "links"], [78, 3, 1, "", "list_reader"], [78, 3, 1, "", "lists"], [78, 3, 1, "", "metadata"], [78, 3, 1, "", "metadata_reader"], [78, 3, 1, "", "paras"], [78, 3, 1, "", "raw"], [78, 3, 1, "", "section_reader"], [78, 3, 1, "", "sections"], [78, 3, 1, "", "sents"], [78, 3, 1, "", "words"]], "nltk.corpus.reader.markdown.CodeBlock": [[78, 3, 1, "", "__init__"], [78, 5, 1, "", "lines"], [78, 5, 1, "", "paras"], [78, 5, 1, "", "sents"]], "nltk.corpus.reader.markdown.Image": [[78, 3, 1, "", "__new__"], [78, 4, 1, "", "label"], [78, 4, 1, "", "src"], [78, 4, 1, "", "title"]], "nltk.corpus.reader.markdown.Link": [[78, 3, 1, "", "__new__"], [78, 4, 1, "", "href"], [78, 4, 1, "", "label"], [78, 4, 1, "", "title"]], "nltk.corpus.reader.markdown.List": [[78, 3, 1, "", "__new__"], [78, 4, 1, "", "is_ordered"], [78, 4, 1, "", "items"]], "nltk.corpus.reader.markdown.MarkdownBlock": [[78, 3, 1, "", "__init__"], [78, 5, 1, "", "paras"], [78, 5, 1, "", "raw"], [78, 5, 1, "", "sents"], [78, 5, 1, "", "words"]], "nltk.corpus.reader.markdown.MarkdownCorpusReader": [[78, 3, 1, "", "__init__"]], "nltk.corpus.reader.markdown.MarkdownSection": [[78, 3, 1, "", "__init__"]], "nltk.corpus.reader.mte": [[79, 2, 1, "", "MTECorpusReader"], [79, 2, 1, "", "MTECorpusView"], [79, 2, 1, "", "MTEFileReader"], [79, 2, 1, "", "MTETagConverter"], [79, 1, 1, "", "xpath"]], "nltk.corpus.reader.mte.MTECorpusReader": [[79, 3, 1, "", "__init__"], [79, 3, 1, "", "lemma_paras"], [79, 3, 1, "", "lemma_sents"], [79, 3, 1, "", "lemma_words"], [79, 3, 1, "", "paras"], [79, 3, 1, "", "sents"], [79, 3, 1, "", "tagged_paras"], [79, 3, 1, "", "tagged_sents"], [79, 3, 1, "", "tagged_words"], [79, 3, 1, "", "words"]], "nltk.corpus.reader.mte.MTECorpusView": [[79, 3, 1, "", "__init__"], [79, 3, 1, "", "read_block"]], "nltk.corpus.reader.mte.MTEFileReader": [[79, 3, 1, "", "__init__"], [79, 3, 1, "", "lemma_paras"], [79, 3, 1, "", "lemma_sents"], [79, 3, 1, "", "lemma_words"], [79, 4, 1, "", "ns"], [79, 4, 1, "", "para_path"], [79, 3, 1, "", "paras"], [79, 4, 1, "", "sent_path"], [79, 3, 1, "", "sents"], [79, 4, 1, "", "tag_ns"], [79, 3, 1, "", "tagged_paras"], [79, 3, 1, "", "tagged_sents"], [79, 3, 1, "", "tagged_words"], [79, 4, 1, "", "word_path"], [79, 3, 1, "", "words"], [79, 4, 1, "", "xml_ns"]], "nltk.corpus.reader.mte.MTETagConverter": [[79, 4, 1, "", "mapping_msd_universal"], [79, 3, 1, "", "msd_to_universal"]], "nltk.corpus.reader.nkjp": [[80, 2, 1, "", "NKJPCorpusReader"], [80, 2, 1, "", "NKJPCorpus_Header_View"], [80, 2, 1, "", "NKJPCorpus_Morph_View"], [80, 2, 1, "", "NKJPCorpus_Segmentation_View"], [80, 2, 1, "", "NKJPCorpus_Text_View"], [80, 2, 1, "", "XML_Tool"]], "nltk.corpus.reader.nkjp.NKJPCorpusReader": [[80, 4, 1, "", "HEADER_MODE"], [80, 4, 1, "", "RAW_MODE"], [80, 4, 1, "", "SENTS_MODE"], [80, 4, 1, "", "WORDS_MODE"], [80, 3, 1, "", "__init__"], [80, 3, 1, "", "add_root"], [80, 3, 1, "", "fileids"], [80, 3, 1, "", "get_paths"], [80, 3, 1, "", "header"], [80, 3, 1, "", "raw"], [80, 3, 1, "", "sents"], [80, 3, 1, "", "tagged_words"], [80, 3, 1, "", "words"]], "nltk.corpus.reader.nkjp.NKJPCorpus_Header_View": [[80, 3, 1, "", "__init__"], [80, 3, 1, "", "handle_elt"], [80, 3, 1, "", "handle_query"]], "nltk.corpus.reader.nkjp.NKJPCorpus_Morph_View": [[80, 3, 1, "", "__init__"], [80, 3, 1, "", "handle_elt"], [80, 3, 1, "", "handle_query"]], "nltk.corpus.reader.nkjp.NKJPCorpus_Segmentation_View": [[80, 3, 1, "", "__init__"], [80, 3, 1, "", "get_segm_id"], [80, 3, 1, "", "get_sent_beg"], [80, 3, 1, "", "get_sent_end"], [80, 3, 1, "", "get_sentences"], [80, 3, 1, "", "handle_elt"], [80, 3, 1, "", "handle_query"], [80, 3, 1, "", "remove_choice"]], "nltk.corpus.reader.nkjp.NKJPCorpus_Text_View": [[80, 4, 1, "", "RAW_MODE"], [80, 4, 1, "", "SENTS_MODE"], [80, 3, 1, "", "__init__"], [80, 3, 1, "", "get_segm_id"], [80, 3, 1, "", "handle_elt"], [80, 3, 1, "", "handle_query"], [80, 3, 1, "", "read_block"]], "nltk.corpus.reader.nkjp.XML_Tool": [[80, 3, 1, "", "__init__"], [80, 3, 1, "", "build_preprocessed_file"], [80, 3, 1, "", "remove_preprocessed_file"]], "nltk.corpus.reader.nombank": [[81, 2, 1, "", "NombankChainTreePointer"], [81, 2, 1, "", "NombankCorpusReader"], [81, 2, 1, "", "NombankInstance"], [81, 2, 1, "", "NombankPointer"], [81, 2, 1, "", "NombankSplitTreePointer"], [81, 2, 1, "", "NombankTreePointer"]], "nltk.corpus.reader.nombank.NombankChainTreePointer": [[81, 3, 1, "", "__init__"], [81, 4, 1, "", "pieces"], [81, 3, 1, "", "select"]], "nltk.corpus.reader.nombank.NombankCorpusReader": [[81, 3, 1, "", "__init__"], [81, 3, 1, "", "instances"], [81, 3, 1, "", "lines"], [81, 3, 1, "", "nouns"], [81, 3, 1, "", "roleset"], [81, 3, 1, "", "rolesets"]], "nltk.corpus.reader.nombank.NombankInstance": [[81, 3, 1, "", "__init__"], [81, 4, 1, "", "arguments"], [81, 4, 1, "", "baseform"], [81, 4, 1, "", "fileid"], [81, 3, 1, "", "parse"], [81, 4, 1, "", "parse_corpus"], [81, 4, 1, "", "predicate"], [81, 4, 1, "", "predid"], [81, 5, 1, "", "roleset"], [81, 4, 1, "", "sensenumber"], [81, 4, 1, "", "sentnum"], [81, 5, 1, "", "tree"], [81, 4, 1, "", "wordnum"]], "nltk.corpus.reader.nombank.NombankPointer": [[81, 3, 1, "", "__init__"]], "nltk.corpus.reader.nombank.NombankSplitTreePointer": [[81, 3, 1, "", "__init__"], [81, 4, 1, "", "pieces"], [81, 3, 1, "", "select"]], "nltk.corpus.reader.nombank.NombankTreePointer": [[81, 3, 1, "", "__init__"], [81, 3, 1, "", "parse"], [81, 3, 1, "", "select"], [81, 3, 1, "", "treepos"]], "nltk.corpus.reader.nps_chat": [[82, 2, 1, "", "NPSChatCorpusReader"]], "nltk.corpus.reader.nps_chat.NPSChatCorpusReader": [[82, 3, 1, "", "__init__"], [82, 3, 1, "", "posts"], [82, 3, 1, "", "tagged_posts"], [82, 3, 1, "", "tagged_words"], [82, 3, 1, "", "words"], [82, 3, 1, "", "xml_posts"]], "nltk.corpus.reader.opinion_lexicon": [[83, 2, 1, "", "IgnoreReadmeCorpusView"], [83, 2, 1, "", "OpinionLexiconCorpusReader"]], "nltk.corpus.reader.opinion_lexicon.IgnoreReadmeCorpusView": [[83, 3, 1, "", "__init__"]], "nltk.corpus.reader.opinion_lexicon.OpinionLexiconCorpusReader": [[83, 4, 1, "", "CorpusView"], [83, 3, 1, "", "negative"], [83, 3, 1, "", "positive"], [83, 3, 1, "", "words"]], "nltk.corpus.reader.panlex_lite": [[84, 2, 1, "", "Meaning"], [84, 2, 1, "", "PanLexLiteCorpusReader"]], "nltk.corpus.reader.panlex_lite.Meaning": [[84, 3, 1, "", "__init__"], [84, 3, 1, "", "expressions"], [84, 3, 1, "", "id"], [84, 3, 1, "", "quality"], [84, 3, 1, "", "source"], [84, 3, 1, "", "source_group"]], "nltk.corpus.reader.panlex_lite.PanLexLiteCorpusReader": [[84, 4, 1, "", "MEANING_Q"], [84, 4, 1, "", "TRANSLATION_Q"], [84, 3, 1, "", "__init__"], [84, 3, 1, "", "language_varieties"], [84, 3, 1, "", "meanings"], [84, 3, 1, "", "translations"]], "nltk.corpus.reader.panlex_swadesh": [[85, 2, 1, "", "PanlexLanguage"], [85, 2, 1, "", "PanlexSwadeshCorpusReader"]], "nltk.corpus.reader.panlex_swadesh.PanlexLanguage": [[85, 3, 1, "", "__new__"], [85, 4, 1, "", "iso639"], [85, 4, 1, "", "iso639_type"], [85, 4, 1, "", "langvar_uid"], [85, 4, 1, "", "name"], [85, 4, 1, "", "panlex_uid"], [85, 4, 1, "", "script"]], "nltk.corpus.reader.panlex_swadesh.PanlexSwadeshCorpusReader": [[85, 3, 1, "", "__init__"], [85, 3, 1, "", "entries"], [85, 3, 1, "", "get_languages"], [85, 3, 1, "", "get_macrolanguages"], [85, 3, 1, "", "language_codes"], [85, 3, 1, "", "license"], [85, 3, 1, "", "words_by_iso639"], [85, 3, 1, "", "words_by_lang"]], "nltk.corpus.reader.pl196x": [[86, 2, 1, "", "Pl196xCorpusReader"], [86, 2, 1, "", "TEICorpusView"]], "nltk.corpus.reader.pl196x.Pl196xCorpusReader": [[86, 3, 1, "", "__init__"], [86, 3, 1, "", "decode_tag"], [86, 4, 1, "", "head_len"], [86, 3, 1, "", "paras"], [86, 3, 1, "", "sents"], [86, 3, 1, "", "tagged_paras"], [86, 3, 1, "", "tagged_sents"], [86, 3, 1, "", "tagged_words"], [86, 3, 1, "", "textids"], [86, 3, 1, "", "words"], [86, 3, 1, "", "xml"]], "nltk.corpus.reader.pl196x.TEICorpusView": [[86, 3, 1, "", "__init__"], [86, 3, 1, "", "read_block"]], "nltk.corpus.reader.plaintext": [[87, 2, 1, "", "CategorizedPlaintextCorpusReader"], [87, 2, 1, "", "EuroparlCorpusReader"], [87, 2, 1, "", "PlaintextCorpusReader"], [87, 2, 1, "", "PortugueseCategorizedPlaintextCorpusReader"]], "nltk.corpus.reader.plaintext.CategorizedPlaintextCorpusReader": [[87, 3, 1, "", "__init__"]], "nltk.corpus.reader.plaintext.EuroparlCorpusReader": [[87, 3, 1, "", "chapters"], [87, 3, 1, "", "paras"]], "nltk.corpus.reader.plaintext.PlaintextCorpusReader": [[87, 4, 1, "", "CorpusView"], [87, 3, 1, "", "__init__"], [87, 3, 1, "", "paras"], [87, 3, 1, "", "sents"], [87, 3, 1, "", "words"]], "nltk.corpus.reader.plaintext.PortugueseCategorizedPlaintextCorpusReader": [[87, 3, 1, "", "__init__"]], "nltk.corpus.reader.ppattach": [[88, 2, 1, "", "PPAttachment"], [88, 2, 1, "", "PPAttachmentCorpusReader"]], "nltk.corpus.reader.ppattach.PPAttachment": [[88, 3, 1, "", "__init__"]], "nltk.corpus.reader.ppattach.PPAttachmentCorpusReader": [[88, 3, 1, "", "attachments"], [88, 3, 1, "", "tuples"]], "nltk.corpus.reader.propbank": [[89, 2, 1, "", "PropbankChainTreePointer"], [89, 2, 1, "", "PropbankCorpusReader"], [89, 2, 1, "", "PropbankInflection"], [89, 2, 1, "", "PropbankInstance"], [89, 2, 1, "", "PropbankPointer"], [89, 2, 1, "", "PropbankSplitTreePointer"], [89, 2, 1, "", "PropbankTreePointer"]], "nltk.corpus.reader.propbank.PropbankChainTreePointer": [[89, 3, 1, "", "__init__"], [89, 4, 1, "", "pieces"], [89, 3, 1, "", "select"]], "nltk.corpus.reader.propbank.PropbankCorpusReader": [[89, 3, 1, "", "__init__"], [89, 3, 1, "", "instances"], [89, 3, 1, "", "lines"], [89, 3, 1, "", "roleset"], [89, 3, 1, "", "rolesets"], [89, 3, 1, "", "verbs"]], "nltk.corpus.reader.propbank.PropbankInflection": [[89, 4, 1, "", "ACTIVE"], [89, 4, 1, "", "FINITE"], [89, 4, 1, "", "FUTURE"], [89, 4, 1, "", "GERUND"], [89, 4, 1, "", "INFINITIVE"], [89, 4, 1, "", "NONE"], [89, 4, 1, "", "PARTICIPLE"], [89, 4, 1, "", "PASSIVE"], [89, 4, 1, "", "PAST"], [89, 4, 1, "", "PERFECT"], [89, 4, 1, "", "PERFECT_AND_PROGRESSIVE"], [89, 4, 1, "", "PRESENT"], [89, 4, 1, "", "PROGRESSIVE"], [89, 4, 1, "", "THIRD_PERSON"], [89, 3, 1, "", "__init__"], [89, 3, 1, "", "parse"]], "nltk.corpus.reader.propbank.PropbankInstance": [[89, 3, 1, "", "__init__"], [89, 4, 1, "", "arguments"], [89, 5, 1, "", "baseform"], [89, 4, 1, "", "fileid"], [89, 4, 1, "", "inflection"], [89, 3, 1, "", "parse"], [89, 4, 1, "", "parse_corpus"], [89, 4, 1, "", "predicate"], [89, 5, 1, "", "predid"], [89, 4, 1, "", "roleset"], [89, 5, 1, "", "sensenumber"], [89, 4, 1, "", "sentnum"], [89, 4, 1, "", "tagger"], [89, 5, 1, "", "tree"], [89, 4, 1, "", "wordnum"]], "nltk.corpus.reader.propbank.PropbankPointer": [[89, 3, 1, "", "__init__"]], "nltk.corpus.reader.propbank.PropbankSplitTreePointer": [[89, 3, 1, "", "__init__"], [89, 4, 1, "", "pieces"], [89, 3, 1, "", "select"]], "nltk.corpus.reader.propbank.PropbankTreePointer": [[89, 3, 1, "", "__init__"], [89, 3, 1, "", "parse"], [89, 3, 1, "", "select"], [89, 3, 1, "", "treepos"]], "nltk.corpus.reader.pros_cons": [[90, 2, 1, "", "ProsConsCorpusReader"]], "nltk.corpus.reader.pros_cons.ProsConsCorpusReader": [[90, 4, 1, "", "CorpusView"], [90, 3, 1, "", "__init__"], [90, 3, 1, "", "sents"], [90, 3, 1, "", "words"]], "nltk.corpus.reader.reviews": [[91, 2, 1, "", "Review"], [91, 2, 1, "", "ReviewLine"], [91, 2, 1, "", "ReviewsCorpusReader"]], "nltk.corpus.reader.reviews.Review": [[91, 3, 1, "", "__init__"], [91, 3, 1, "", "add_line"], [91, 3, 1, "", "features"], [91, 3, 1, "", "sents"]], "nltk.corpus.reader.reviews.ReviewLine": [[91, 3, 1, "", "__init__"]], "nltk.corpus.reader.reviews.ReviewsCorpusReader": [[91, 4, 1, "", "CorpusView"], [91, 3, 1, "", "__init__"], [91, 3, 1, "", "features"], [91, 3, 1, "", "reviews"], [91, 3, 1, "", "sents"], [91, 3, 1, "", "words"]], "nltk.corpus.reader.rte": [[92, 2, 1, "", "RTECorpusReader"], [92, 2, 1, "", "RTEPair"], [92, 1, 1, "", "norm"]], "nltk.corpus.reader.rte.RTECorpusReader": [[92, 3, 1, "", "pairs"]], "nltk.corpus.reader.rte.RTEPair": [[92, 3, 1, "", "__init__"]], "nltk.corpus.reader.semcor": [[93, 2, 1, "", "SemcorCorpusReader"], [93, 2, 1, "", "SemcorSentence"], [93, 2, 1, "", "SemcorWordView"]], "nltk.corpus.reader.semcor.SemcorCorpusReader": [[93, 3, 1, "", "__init__"], [93, 3, 1, "", "chunk_sents"], [93, 3, 1, "", "chunks"], [93, 3, 1, "", "sents"], [93, 3, 1, "", "tagged_chunks"], [93, 3, 1, "", "tagged_sents"], [93, 3, 1, "", "words"]], "nltk.corpus.reader.semcor.SemcorSentence": [[93, 3, 1, "", "__init__"]], "nltk.corpus.reader.semcor.SemcorWordView": [[93, 3, 1, "", "__init__"], [93, 3, 1, "", "handle_elt"], [93, 3, 1, "", "handle_sent"], [93, 3, 1, "", "handle_word"]], "nltk.corpus.reader.senseval": [[94, 2, 1, "", "SensevalCorpusReader"], [94, 2, 1, "", "SensevalCorpusView"], [94, 2, 1, "", "SensevalInstance"]], "nltk.corpus.reader.senseval.SensevalCorpusReader": [[94, 3, 1, "", "instances"]], "nltk.corpus.reader.senseval.SensevalCorpusView": [[94, 3, 1, "", "__init__"], [94, 3, 1, "", "read_block"]], "nltk.corpus.reader.senseval.SensevalInstance": [[94, 3, 1, "", "__init__"]], "nltk.corpus.reader.sentiwordnet": [[95, 2, 1, "", "SentiSynset"], [95, 2, 1, "", "SentiWordNetCorpusReader"]], "nltk.corpus.reader.sentiwordnet.SentiSynset": [[95, 3, 1, "", "__init__"], [95, 3, 1, "", "neg_score"], [95, 3, 1, "", "obj_score"], [95, 3, 1, "", "pos_score"]], "nltk.corpus.reader.sentiwordnet.SentiWordNetCorpusReader": [[95, 3, 1, "", "__init__"], [95, 3, 1, "", "all_senti_synsets"], [95, 3, 1, "", "senti_synset"], [95, 3, 1, "", "senti_synsets"]], "nltk.corpus.reader.sinica_treebank": [[96, 2, 1, "", "SinicaTreebankCorpusReader"]], "nltk.corpus.reader.string_category": [[97, 2, 1, "", "StringCategoryCorpusReader"]], "nltk.corpus.reader.string_category.StringCategoryCorpusReader": [[97, 3, 1, "", "__init__"], [97, 3, 1, "", "tuples"]], "nltk.corpus.reader.switchboard": [[98, 2, 1, "", "SwitchboardCorpusReader"], [98, 2, 1, "", "SwitchboardTurn"]], "nltk.corpus.reader.switchboard.SwitchboardCorpusReader": [[98, 3, 1, "", "__init__"], [98, 3, 1, "", "discourses"], [98, 3, 1, "", "tagged_discourses"], [98, 3, 1, "", "tagged_turns"], [98, 3, 1, "", "tagged_words"], [98, 3, 1, "", "turns"], [98, 3, 1, "", "words"]], "nltk.corpus.reader.switchboard.SwitchboardTurn": [[98, 3, 1, "", "__init__"]], "nltk.corpus.reader.tagged": [[99, 2, 1, "", "CategorizedTaggedCorpusReader"], [99, 2, 1, "", "MacMorphoCorpusReader"], [99, 2, 1, "", "TaggedCorpusReader"], [99, 2, 1, "", "TaggedCorpusView"], [99, 2, 1, "", "TimitTaggedCorpusReader"]], "nltk.corpus.reader.tagged.CategorizedTaggedCorpusReader": [[99, 3, 1, "", "__init__"], [99, 3, 1, "", "tagged_paras"], [99, 3, 1, "", "tagged_sents"], [99, 3, 1, "", "tagged_words"]], "nltk.corpus.reader.tagged.MacMorphoCorpusReader": [[99, 3, 1, "", "__init__"]], "nltk.corpus.reader.tagged.TaggedCorpusReader": [[99, 3, 1, "", "__init__"], [99, 3, 1, "", "paras"], [99, 3, 1, "", "sents"], [99, 3, 1, "", "tagged_paras"], [99, 3, 1, "", "tagged_sents"], [99, 3, 1, "", "tagged_words"], [99, 3, 1, "", "words"]], "nltk.corpus.reader.tagged.TaggedCorpusView": [[99, 3, 1, "", "__init__"], [99, 3, 1, "", "read_block"]], "nltk.corpus.reader.tagged.TimitTaggedCorpusReader": [[99, 3, 1, "", "__init__"], [99, 3, 1, "", "paras"], [99, 3, 1, "", "tagged_paras"]], "nltk.corpus.reader.timit": [[100, 2, 1, "", "SpeakerInfo"], [100, 2, 1, "", "TimitCorpusReader"], [100, 1, 1, "", "read_timit_block"]], "nltk.corpus.reader.timit.SpeakerInfo": [[100, 3, 1, "", "__init__"]], "nltk.corpus.reader.timit.TimitCorpusReader": [[100, 3, 1, "", "__init__"], [100, 3, 1, "", "audiodata"], [100, 3, 1, "", "fileids"], [100, 3, 1, "", "phone_times"], [100, 3, 1, "", "phone_trees"], [100, 3, 1, "", "phones"], [100, 3, 1, "", "play"], [100, 3, 1, "", "sent_times"], [100, 3, 1, "", "sentid"], [100, 3, 1, "", "sents"], [100, 3, 1, "", "spkrid"], [100, 3, 1, "", "spkrinfo"], [100, 3, 1, "", "spkrutteranceids"], [100, 3, 1, "", "transcription_dict"], [100, 3, 1, "", "utterance"], [100, 3, 1, "", "utteranceids"], [100, 3, 1, "", "wav"], [100, 3, 1, "", "word_times"], [100, 3, 1, "", "words"]], "nltk.corpus.reader.toolbox": [[101, 2, 1, "", "ToolboxCorpusReader"], [101, 1, 1, "", "demo"]], "nltk.corpus.reader.toolbox.ToolboxCorpusReader": [[101, 3, 1, "", "entries"], [101, 3, 1, "", "fields"], [101, 3, 1, "", "words"], [101, 3, 1, "", "xml"]], "nltk.corpus.reader.twitter": [[102, 2, 1, "", "TwitterCorpusReader"]], "nltk.corpus.reader.twitter.TwitterCorpusReader": [[102, 4, 1, "", "CorpusView"], [102, 3, 1, "", "__init__"], [102, 3, 1, "", "docs"], [102, 3, 1, "", "strings"], [102, 3, 1, "", "tokenized"]], "nltk.corpus.reader.udhr": [[103, 2, 1, "", "UdhrCorpusReader"]], "nltk.corpus.reader.udhr.UdhrCorpusReader": [[103, 4, 1, "", "ENCODINGS"], [103, 4, 1, "", "SKIP"], [103, 3, 1, "", "__init__"]], "nltk.corpus.reader.util": [[104, 2, 1, "", "ConcatenatedCorpusView"], [104, 2, 1, "", "StreamBackedCorpusView"], [104, 1, 1, "", "concat"], [104, 1, 1, "", "find_corpus_fileids"], [104, 1, 1, "", "read_alignedsent_block"], [104, 1, 1, "", "read_blankline_block"], [104, 1, 1, "", "read_line_block"], [104, 1, 1, "", "read_regexp_block"], [104, 1, 1, "", "read_sexpr_block"], [104, 1, 1, "", "read_whitespace_block"], [104, 1, 1, "", "read_wordpunct_block"], [104, 1, 1, "", "tagged_treebank_para_block_reader"]], "nltk.corpus.reader.util.ConcatenatedCorpusView": [[104, 3, 1, "", "__init__"], [104, 3, 1, "", "close"], [104, 3, 1, "", "iterate_from"]], "nltk.corpus.reader.util.StreamBackedCorpusView": [[104, 3, 1, "", "__init__"], [104, 3, 1, "", "close"], [104, 5, 1, "", "fileid"], [104, 3, 1, "", "iterate_from"], [104, 3, 1, "", "read_block"]], "nltk.corpus.reader.verbnet": [[105, 2, 1, "", "VerbnetCorpusReader"]], "nltk.corpus.reader.verbnet.VerbnetCorpusReader": [[105, 3, 1, "", "__init__"], [105, 3, 1, "", "classids"], [105, 3, 1, "", "fileids"], [105, 3, 1, "", "frames"], [105, 3, 1, "", "lemmas"], [105, 3, 1, "", "longid"], [105, 3, 1, "", "pprint"], [105, 3, 1, "", "pprint_frames"], [105, 3, 1, "", "pprint_members"], [105, 3, 1, "", "pprint_subclasses"], [105, 3, 1, "", "pprint_themroles"], [105, 3, 1, "", "shortid"], [105, 3, 1, "", "subclasses"], [105, 3, 1, "", "themroles"], [105, 3, 1, "", "vnclass"], [105, 3, 1, "", "wordnetids"]], "nltk.corpus.reader.wordlist": [[106, 2, 1, "", "MWAPPDBCorpusReader"], [106, 2, 1, "", "NonbreakingPrefixesCorpusReader"], [106, 2, 1, "", "SwadeshCorpusReader"], [106, 2, 1, "", "UnicharsCorpusReader"], [106, 2, 1, "", "WordListCorpusReader"]], "nltk.corpus.reader.wordlist.MWAPPDBCorpusReader": [[106, 3, 1, "", "entries"], [106, 4, 1, "", "mwa_ppdb_xxxl_file"]], "nltk.corpus.reader.wordlist.NonbreakingPrefixesCorpusReader": [[106, 4, 1, "", "available_langs"], [106, 3, 1, "", "words"]], "nltk.corpus.reader.wordlist.SwadeshCorpusReader": [[106, 3, 1, "", "entries"]], "nltk.corpus.reader.wordlist.UnicharsCorpusReader": [[106, 4, 1, "", "available_categories"], [106, 3, 1, "", "chars"]], "nltk.corpus.reader.wordlist.WordListCorpusReader": [[106, 3, 1, "", "words"]], "nltk.corpus.reader.wordnet": [[107, 2, 1, "", "Lemma"], [107, 2, 1, "", "Synset"], [107, 2, 1, "", "WordNetCorpusReader"], [107, 6, 1, "", "WordNetError"], [107, 2, 1, "", "WordNetICCorpusReader"], [107, 1, 1, "", "information_content"], [107, 1, 1, "", "jcn_similarity"], [107, 1, 1, "", "lch_similarity"], [107, 1, 1, "", "lin_similarity"], [107, 1, 1, "", "path_similarity"], [107, 1, 1, "", "res_similarity"], [107, 1, 1, "", "wup_similarity"]], "nltk.corpus.reader.wordnet.Lemma": [[107, 3, 1, "", "__init__"], [107, 3, 1, "", "antonyms"], [107, 3, 1, "", "count"], [107, 3, 1, "", "derivationally_related_forms"], [107, 3, 1, "", "frame_ids"], [107, 3, 1, "", "frame_strings"], [107, 3, 1, "", "key"], [107, 3, 1, "", "lang"], [107, 3, 1, "", "name"], [107, 3, 1, "", "pertainyms"], [107, 3, 1, "", "synset"], [107, 3, 1, "", "syntactic_marker"]], "nltk.corpus.reader.wordnet.Synset": [[107, 3, 1, "", "__init__"], [107, 3, 1, "", "acyclic_tree"], [107, 3, 1, "", "closure"], [107, 3, 1, "", "common_hypernyms"], [107, 3, 1, "", "definition"], [107, 3, 1, "", "examples"], [107, 3, 1, "", "frame_ids"], [107, 3, 1, "", "hypernym_distances"], [107, 3, 1, "", "hypernym_paths"], [107, 3, 1, "", "jcn_similarity"], [107, 3, 1, "", "lch_similarity"], [107, 3, 1, "", "lemma_names"], [107, 3, 1, "", "lemmas"], [107, 3, 1, "", "lexname"], [107, 3, 1, "", "lin_similarity"], [107, 3, 1, "", "lowest_common_hypernyms"], [107, 3, 1, "", "max_depth"], [107, 3, 1, "", "min_depth"], [107, 3, 1, "", "mst"], [107, 3, 1, "", "name"], [107, 3, 1, "", "offset"], [107, 3, 1, "", "path_similarity"], [107, 3, 1, "", "pos"], [107, 3, 1, "", "res_similarity"], [107, 3, 1, "", "root_hypernyms"], [107, 3, 1, "", "shortest_path_distance"], [107, 3, 1, "", "tree"], [107, 3, 1, "", "wup_similarity"]], "nltk.corpus.reader.wordnet.WordNetCorpusReader": [[107, 4, 1, "", "ADJ"], [107, 4, 1, "", "ADJ_SAT"], [107, 4, 1, "", "ADV"], [107, 4, 1, "", "MORPHOLOGICAL_SUBSTITUTIONS"], [107, 4, 1, "", "NOUN"], [107, 4, 1, "", "VERB"], [107, 3, 1, "", "__init__"], [107, 3, 1, "", "add_exomw"], [107, 3, 1, "", "add_omw"], [107, 3, 1, "", "add_provs"], [107, 3, 1, "", "all_eng_synsets"], [107, 3, 1, "", "all_lemma_names"], [107, 3, 1, "", "all_omw_synsets"], [107, 3, 1, "", "all_synsets"], [107, 3, 1, "", "citation"], [107, 3, 1, "", "custom_lemmas"], [107, 3, 1, "", "digraph"], [107, 3, 1, "", "disable_custom_lemmas"], [107, 3, 1, "", "doc"], [107, 3, 1, "", "get_version"], [107, 3, 1, "", "ic"], [107, 3, 1, "", "index_sense"], [107, 3, 1, "", "jcn_similarity"], [107, 3, 1, "", "langs"], [107, 3, 1, "", "lch_similarity"], [107, 3, 1, "", "lemma"], [107, 3, 1, "", "lemma_count"], [107, 3, 1, "", "lemma_from_key"], [107, 3, 1, "", "lemmas"], [107, 3, 1, "", "license"], [107, 3, 1, "", "lin_similarity"], [107, 3, 1, "", "map_to_many"], [107, 3, 1, "", "map_to_one"], [107, 3, 1, "", "map_wn"], [107, 3, 1, "", "merged_synsets"], [107, 3, 1, "", "morphy"], [107, 3, 1, "", "of2ss"], [107, 3, 1, "", "path_similarity"], [107, 3, 1, "", "readme"], [107, 3, 1, "", "res_similarity"], [107, 3, 1, "", "split_synsets"], [107, 3, 1, "", "ss2of"], [107, 3, 1, "", "synonyms"], [107, 3, 1, "", "synset"], [107, 3, 1, "", "synset_from_pos_and_offset"], [107, 3, 1, "", "synset_from_sense_key"], [107, 3, 1, "", "synsets"], [107, 3, 1, "", "words"], [107, 3, 1, "", "wup_similarity"]], "nltk.corpus.reader.wordnet.WordNetICCorpusReader": [[107, 3, 1, "", "__init__"], [107, 3, 1, "", "ic"]], "nltk.corpus.reader.xmldocs": [[108, 2, 1, "", "XMLCorpusReader"], [108, 2, 1, "", "XMLCorpusView"]], "nltk.corpus.reader.xmldocs.XMLCorpusReader": [[108, 3, 1, "", "__init__"], [108, 3, 1, "", "words"], [108, 3, 1, "", "xml"]], "nltk.corpus.reader.xmldocs.XMLCorpusView": [[108, 3, 1, "", "__init__"], [108, 3, 1, "", "handle_elt"], [108, 3, 1, "", "read_block"]], "nltk.corpus.reader.ycoe": [[109, 2, 1, "", "YCOECorpusReader"], [109, 2, 1, "", "YCOEParseCorpusReader"], [109, 2, 1, "", "YCOETaggedCorpusReader"], [109, 7, 1, "", "documents"]], "nltk.corpus.reader.ycoe.YCOECorpusReader": [[109, 3, 1, "", "__init__"], [109, 3, 1, "", "documents"], [109, 3, 1, "", "fileids"], [109, 3, 1, "", "paras"], [109, 3, 1, "", "parsed_sents"], [109, 3, 1, "", "sents"], [109, 3, 1, "", "tagged_paras"], [109, 3, 1, "", "tagged_sents"], [109, 3, 1, "", "tagged_words"], [109, 3, 1, "", "words"]], "nltk.corpus.reader.ycoe.YCOETaggedCorpusReader": [[109, 3, 1, "", "__init__"]], "nltk.corpus.util": [[110, 2, 1, "", "LazyCorpusLoader"]], "nltk.corpus.util.LazyCorpusLoader": [[110, 3, 1, "", "__init__"]], "nltk.data": [[111, 7, 1, "", "AUTO_FORMATS"], [111, 1, 1, "", "BufferedGzipFile"], [111, 7, 1, "", "FORMATS"], [111, 2, 1, "", "FileSystemPathPointer"], [111, 2, 1, "", "GzipFileSystemPathPointer"], [111, 2, 1, "", "LazyLoader"], [111, 2, 1, "", "OpenOnDemandZipFile"], [111, 2, 1, "", "PathPointer"], [111, 2, 1, "", "SeekableUnicodeStreamReader"], [111, 1, 1, "", "clear_cache"], [111, 1, 1, "", "find"], [111, 1, 1, "", "load"], [111, 7, 1, "", "path"], [111, 1, 1, "", "retrieve"], [111, 1, 1, "", "show_cfg"]], "nltk.data.FileSystemPathPointer": [[111, 3, 1, "", "__init__"], [111, 3, 1, "", "file_size"], [111, 3, 1, "", "join"], [111, 3, 1, "", "open"], [111, 5, 1, "", "path"]], "nltk.data.GzipFileSystemPathPointer": [[111, 3, 1, "", "open"]], "nltk.data.LazyLoader": [[111, 3, 1, "", "__init__"]], "nltk.data.OpenOnDemandZipFile": [[111, 3, 1, "", "__init__"], [111, 3, 1, "", "read"], [111, 3, 1, "", "write"], [111, 3, 1, "", "writestr"]], "nltk.data.PathPointer": [[111, 3, 1, "", "file_size"], [111, 3, 1, "", "join"], [111, 3, 1, "", "open"]], "nltk.data.SeekableUnicodeStreamReader": [[111, 4, 1, "", "DEBUG"], [111, 3, 1, "", "__init__"], [111, 4, 1, "", "bytebuffer"], [111, 3, 1, "", "char_seek_forward"], [111, 3, 1, "", "close"], [111, 5, 1, "", "closed"], [111, 4, 1, "", "decode"], [111, 3, 1, "", "discard_line"], [111, 4, 1, "", "encoding"], [111, 4, 1, "", "errors"], [111, 4, 1, "", "linebuffer"], [111, 5, 1, "", "mode"], [111, 5, 1, "", "name"], [111, 3, 1, "", "next"], [111, 3, 1, "", "read"], [111, 3, 1, "", "readline"], [111, 3, 1, "", "readlines"], [111, 3, 1, "", "seek"], [111, 4, 1, "", "stream"], [111, 3, 1, "", "tell"], [111, 3, 1, "", "xreadlines"]], "nltk.decorators": [[112, 1, 1, "", "decorator"], [112, 1, 1, "", "getinfo"], [112, 1, 1, "", "new_wrapper"]], "nltk.downloader": [[113, 2, 1, "", "Collection"], [113, 2, 1, "", "Downloader"], [113, 2, 1, "", "DownloaderGUI"], [113, 2, 1, "", "DownloaderMessage"], [113, 2, 1, "", "DownloaderShell"], [113, 2, 1, "", "ErrorMessage"], [113, 2, 1, "", "FinishCollectionMessage"], [113, 2, 1, "", "FinishDownloadMessage"], [113, 2, 1, "", "FinishPackageMessage"], [113, 2, 1, "", "FinishUnzipMessage"], [113, 2, 1, "", "Package"], [113, 2, 1, "", "ProgressMessage"], [113, 2, 1, "", "SelectDownloadDirMessage"], [113, 2, 1, "", "StaleMessage"], [113, 2, 1, "", "StartCollectionMessage"], [113, 2, 1, "", "StartDownloadMessage"], [113, 2, 1, "", "StartPackageMessage"], [113, 2, 1, "", "StartUnzipMessage"], [113, 2, 1, "", "UpToDateMessage"], [113, 1, 1, "", "build_index"], [113, 1, 1, "", "download"], [113, 1, 1, "", "download_gui"], [113, 1, 1, "", "download_shell"], [113, 1, 1, "", "md5_hexdigest"], [113, 1, 1, "", "unzip"], [113, 1, 1, "", "update"]], "nltk.downloader.Collection": [[113, 3, 1, "", "__init__"], [113, 4, 1, "", "children"], [113, 3, 1, "", "fromxml"], [113, 4, 1, "", "id"], [113, 4, 1, "", "name"], [113, 4, 1, "", "packages"]], "nltk.downloader.Downloader": [[113, 4, 1, "", "DEFAULT_URL"], [113, 4, 1, "", "INDEX_TIMEOUT"], [113, 4, 1, "", "INSTALLED"], [113, 4, 1, "", "NOT_INSTALLED"], [113, 4, 1, "", "PARTIAL"], [113, 4, 1, "", "STALE"], [113, 3, 1, "", "__init__"], [113, 3, 1, "", "clear_status_cache"], [113, 3, 1, "", "collections"], [113, 3, 1, "", "corpora"], [113, 3, 1, "", "default_download_dir"], [113, 3, 1, "", "download"], [113, 5, 1, "", "download_dir"], [113, 3, 1, "", "incr_download"], [113, 3, 1, "", "index"], [113, 3, 1, "", "info"], [113, 3, 1, "", "is_installed"], [113, 3, 1, "", "is_stale"], [113, 3, 1, "", "list"], [113, 3, 1, "", "models"], [113, 3, 1, "", "packages"], [113, 3, 1, "", "status"], [113, 3, 1, "", "update"], [113, 5, 1, "", "url"], [113, 3, 1, "", "xmlinfo"]], "nltk.downloader.DownloaderGUI": [[113, 4, 1, "", "COLUMNS"], [113, 4, 1, "", "COLUMN_WEIGHTS"], [113, 4, 1, "", "COLUMN_WIDTHS"], [113, 4, 1, "", "DEFAULT_COLUMN_WIDTH"], [113, 4, 1, "", "HELP"], [113, 4, 1, "", "INITIAL_COLUMNS"], [113, 3, 1, "", "__init__"], [113, 3, 1, "", "about"], [113, 4, 1, "", "c"], [113, 3, 1, "", "destroy"], [113, 3, 1, "", "help"], [113, 3, 1, "", "mainloop"]], "nltk.downloader.DownloaderShell": [[113, 3, 1, "", "__init__"], [113, 3, 1, "", "run"]], "nltk.downloader.ErrorMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.FinishCollectionMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.FinishDownloadMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.FinishPackageMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.FinishUnzipMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.Package": [[113, 3, 1, "", "__init__"], [113, 4, 1, "", "author"], [113, 4, 1, "", "checksum"], [113, 4, 1, "", "contact"], [113, 4, 1, "", "copyright"], [113, 4, 1, "", "filename"], [113, 3, 1, "", "fromxml"], [113, 4, 1, "", "id"], [113, 4, 1, "", "license"], [113, 4, 1, "", "name"], [113, 4, 1, "", "size"], [113, 4, 1, "", "subdir"], [113, 4, 1, "", "svn_revision"], [113, 4, 1, "", "unzip"], [113, 4, 1, "", "unzipped_size"], [113, 4, 1, "", "url"]], "nltk.downloader.ProgressMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.SelectDownloadDirMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.StaleMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.StartCollectionMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.StartDownloadMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.StartPackageMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.StartUnzipMessage": [[113, 3, 1, "", "__init__"]], "nltk.downloader.UpToDateMessage": [[113, 3, 1, "", "__init__"]], "nltk.draw": [[115, 0, 0, "-", "cfg"], [116, 0, 0, "-", "dispersion"], [117, 0, 0, "-", "table"], [118, 0, 0, "-", "tree"], [119, 0, 0, "-", "util"]], "nltk.draw.cfg": [[115, 2, 1, "", "CFGDemo"], [115, 2, 1, "", "CFGEditor"], [115, 2, 1, "", "ProductionList"], [115, 1, 1, "", "demo"], [115, 1, 1, "", "demo2"], [115, 1, 1, "", "demo3"]], "nltk.draw.cfg.CFGDemo": [[115, 3, 1, "", "__init__"], [115, 3, 1, "", "destroy"], [115, 3, 1, "", "mainloop"], [115, 3, 1, "", "reset_workspace"], [115, 3, 1, "", "workspace_markprod"]], "nltk.draw.cfg.CFGEditor": [[115, 4, 1, "", "ARROW"], [115, 3, 1, "", "__init__"]], "nltk.draw.cfg.ProductionList": [[115, 4, 1, "", "ARROW"]], "nltk.draw.dispersion": [[116, 1, 1, "", "dispersion_plot"]], "nltk.draw.table": [[117, 2, 1, "", "MultiListbox"], [117, 2, 1, "", "Table"], [117, 1, 1, "", "demo"]], "nltk.draw.table.MultiListbox": [[117, 4, 1, "", "FRAME_CONFIG"], [117, 4, 1, "", "LABEL_CONFIG"], [117, 4, 1, "", "LISTBOX_CONFIG"], [117, 3, 1, "", "__init__"], [117, 3, 1, "", "activate"], [117, 3, 1, "", "bbox"], [117, 3, 1, "", "bind_to_columns"], [117, 3, 1, "", "bind_to_labels"], [117, 3, 1, "", "bind_to_listboxes"], [117, 5, 1, "", "column_labels"], [117, 5, 1, "", "column_names"], [117, 3, 1, "", "columnconfig"], [117, 3, 1, "", "columnconfigure"], [117, 3, 1, "", "configure"], [117, 3, 1, "", "curselection"], [117, 3, 1, "", "delete"], [117, 3, 1, "", "get"], [117, 3, 1, "", "hide_column"], [117, 3, 1, "", "index"], [117, 3, 1, "", "insert"], [117, 3, 1, "", "itemcget"], [117, 3, 1, "", "itemconfig"], [117, 3, 1, "", "itemconfigure"], [117, 5, 1, "", "listboxes"], [117, 3, 1, "", "nearest"], [117, 3, 1, "", "rowconfig"], [117, 3, 1, "", "rowconfigure"], [117, 3, 1, "", "scan_dragto"], [117, 3, 1, "", "scan_mark"], [117, 3, 1, "", "see"], [117, 3, 1, "", "select"], [117, 3, 1, "", "select_anchor"], [117, 3, 1, "", "select_clear"], [117, 3, 1, "", "select_includes"], [117, 3, 1, "", "select_set"], [117, 3, 1, "", "selection_anchor"], [117, 3, 1, "", "selection_clear"], [117, 3, 1, "", "selection_includes"], [117, 3, 1, "", "selection_set"], [117, 3, 1, "", "show_column"], [117, 3, 1, "", "size"], [117, 3, 1, "", "yview"], [117, 3, 1, "", "yview_moveto"], [117, 3, 1, "", "yview_scroll"]], "nltk.draw.table.Table": [[117, 3, 1, "", "__init__"], [117, 3, 1, "", "append"], [117, 3, 1, "", "bind"], [117, 3, 1, "", "bind_to_columns"], [117, 3, 1, "", "bind_to_labels"], [117, 3, 1, "", "bind_to_listboxes"], [117, 3, 1, "", "clear"], [117, 3, 1, "", "column_index"], [117, 5, 1, "", "column_names"], [117, 3, 1, "", "columnconfig"], [117, 3, 1, "", "columnconfigure"], [117, 3, 1, "", "extend"], [117, 3, 1, "", "focus"], [117, 3, 1, "", "grid"], [117, 3, 1, "", "hide_column"], [117, 3, 1, "", "insert"], [117, 3, 1, "", "itemconfig"], [117, 3, 1, "", "itemconfigure"], [117, 3, 1, "", "pack"], [117, 3, 1, "", "rowconfig"], [117, 3, 1, "", "rowconfigure"], [117, 3, 1, "", "select"], [117, 3, 1, "", "selected_row"], [117, 3, 1, "", "show_column"], [117, 3, 1, "", "sort_by"]], "nltk.draw.tree": [[118, 2, 1, "", "TreeSegmentWidget"], [118, 2, 1, "", "TreeView"], [118, 2, 1, "", "TreeWidget"], [118, 1, 1, "", "demo"], [118, 1, 1, "", "draw_trees"], [118, 1, 1, "", "tree_to_treesegment"]], "nltk.draw.tree.TreeSegmentWidget": [[118, 3, 1, "", "__init__"], [118, 3, 1, "", "insert_child"], [118, 3, 1, "", "label"], [118, 3, 1, "", "remove_child"], [118, 3, 1, "", "replace_child"], [118, 3, 1, "", "set_label"], [118, 3, 1, "", "subtrees"]], "nltk.draw.tree.TreeView": [[118, 3, 1, "", "__init__"], [118, 3, 1, "", "destroy"], [118, 3, 1, "", "mainloop"], [118, 3, 1, "", "resize"]], "nltk.draw.tree.TreeWidget": [[118, 3, 1, "", "__init__"], [118, 3, 1, "", "bind_click_leaves"], [118, 3, 1, "", "bind_click_nodes"], [118, 3, 1, "", "bind_click_trees"], [118, 3, 1, "", "bind_drag_leaves"], [118, 3, 1, "", "bind_drag_nodes"], [118, 3, 1, "", "bind_drag_trees"], [118, 3, 1, "", "collapsed_tree"], [118, 3, 1, "", "expanded_tree"], [118, 3, 1, "", "toggle_collapsed"]], "nltk.draw.util": [[119, 2, 1, "", "AbstractContainerWidget"], [119, 2, 1, "", "BoxWidget"], [119, 2, 1, "", "BracketWidget"], [119, 2, 1, "", "CanvasFrame"], [119, 2, 1, "", "CanvasWidget"], [119, 2, 1, "", "ColorizedList"], [119, 2, 1, "", "EntryDialog"], [119, 2, 1, "", "MutableOptionMenu"], [119, 2, 1, "", "OvalWidget"], [119, 2, 1, "", "ParenWidget"], [119, 2, 1, "", "ScrollWatcherWidget"], [119, 2, 1, "", "SequenceWidget"], [119, 2, 1, "", "ShowText"], [119, 2, 1, "", "SpaceWidget"], [119, 2, 1, "", "StackWidget"], [119, 2, 1, "", "SymbolWidget"], [119, 2, 1, "", "TextWidget"], [119, 1, 1, "", "demo"]], "nltk.draw.util.AbstractContainerWidget": [[119, 3, 1, "", "__init__"], [119, 3, 1, "", "child"], [119, 3, 1, "", "set_child"]], "nltk.draw.util.BoxWidget": [[119, 3, 1, "", "__init__"]], "nltk.draw.util.BracketWidget": [[119, 3, 1, "", "__init__"]], "nltk.draw.util.CanvasFrame": [[119, 3, 1, "", "__init__"], [119, 3, 1, "", "add_widget"], [119, 3, 1, "", "canvas"], [119, 3, 1, "", "destroy"], [119, 3, 1, "", "destroy_widget"], [119, 3, 1, "", "mainloop"], [119, 3, 1, "", "pack"], [119, 3, 1, "", "print_to_file"], [119, 3, 1, "", "remove_widget"], [119, 3, 1, "", "scrollregion"]], "nltk.draw.util.CanvasWidget": [[119, 3, 1, "", "__init__"], [119, 3, 1, "", "bbox"], [119, 3, 1, "", "bind_click"], [119, 3, 1, "", "bind_drag"], [119, 3, 1, "", "canvas"], [119, 3, 1, "", "child_widgets"], [119, 3, 1, "", "destroy"], [119, 3, 1, "", "height"], [119, 3, 1, "", "hidden"], [119, 3, 1, "", "hide"], [119, 3, 1, "", "manage"], [119, 3, 1, "", "move"], [119, 3, 1, "", "moveto"], [119, 3, 1, "", "parent"], [119, 3, 1, "", "show"], [119, 3, 1, "", "tags"], [119, 3, 1, "", "unbind_click"], [119, 3, 1, "", "unbind_drag"], [119, 3, 1, "", "update"], [119, 3, 1, "", "width"]], "nltk.draw.util.ColorizedList": [[119, 3, 1, "", "__init__"], [119, 3, 1, "", "add_callback"], [119, 3, 1, "", "focus"], [119, 3, 1, "", "get"], [119, 3, 1, "", "grid"], [119, 3, 1, "", "mark"], [119, 3, 1, "", "markonly"], [119, 3, 1, "", "pack"], [119, 3, 1, "", "remove_callback"], [119, 3, 1, "", "set"], [119, 3, 1, "", "unmark"], [119, 3, 1, "", "view"]], "nltk.draw.util.EntryDialog": [[119, 3, 1, "", "__init__"]], "nltk.draw.util.MutableOptionMenu": [[119, 3, 1, "", "__init__"], [119, 3, 1, "", "add"], [119, 3, 1, "", "destroy"], [119, 3, 1, "", "remove"], [119, 3, 1, "", "set"]], "nltk.draw.util.OvalWidget": [[119, 4, 1, "", "RATIO"], [119, 3, 1, "", "__init__"]], "nltk.draw.util.ParenWidget": [[119, 3, 1, "", "__init__"]], "nltk.draw.util.ScrollWatcherWidget": [[119, 3, 1, "", "__init__"], [119, 3, 1, "", "add_child"], [119, 3, 1, "", "remove_child"]], "nltk.draw.util.SequenceWidget": [[119, 3, 1, "", "__init__"], [119, 3, 1, "", "children"], [119, 3, 1, "", "insert_child"], [119, 3, 1, "", "remove_child"], [119, 3, 1, "", "replace_child"]], "nltk.draw.util.ShowText": [[119, 3, 1, "", "__init__"], [119, 3, 1, "", "destroy"], [119, 3, 1, "", "find_dimentions"], [119, 3, 1, "", "mainloop"]], "nltk.draw.util.SpaceWidget": [[119, 3, 1, "", "__init__"], [119, 3, 1, "", "set_height"], [119, 3, 1, "", "set_width"]], "nltk.draw.util.StackWidget": [[119, 3, 1, "", "__init__"], [119, 3, 1, "", "children"], [119, 3, 1, "", "insert_child"], [119, 3, 1, "", "remove_child"], [119, 3, 1, "", "replace_child"]], "nltk.draw.util.SymbolWidget": [[119, 4, 1, "", "SYMBOLS"], [119, 3, 1, "", "__init__"], [119, 3, 1, "", "set_symbol"], [119, 3, 1, "", "symbol"], [119, 3, 1, "", "symbolsheet"]], "nltk.draw.util.TextWidget": [[119, 3, 1, "", "__init__"], [119, 3, 1, "", "set_text"], [119, 3, 1, "", "text"]], "nltk.featstruct": [[120, 2, 1, "", "FeatDict"], [120, 2, 1, "", "FeatList"], [120, 2, 1, "", "FeatStruct"], [120, 2, 1, "", "FeatStructReader"], [120, 2, 1, "", "Feature"], [120, 2, 1, "", "RangeFeature"], [120, 2, 1, "", "SlashFeature"], [120, 1, 1, "", "conflicts"], [120, 1, 1, "", "subsumes"], [120, 1, 1, "", "unify"]], "nltk.featstruct.FeatDict": [[120, 3, 1, "", "__init__"], [120, 3, 1, "", "clear"], [120, 3, 1, "", "get"], [120, 3, 1, "", "has_key"], [120, 3, 1, "", "pop"], [120, 3, 1, "", "popitem"], [120, 3, 1, "", "setdefault"], [120, 3, 1, "", "update"]], "nltk.featstruct.FeatList": [[120, 3, 1, "", "__init__"], [120, 3, 1, "", "append"], [120, 3, 1, "", "extend"], [120, 3, 1, "", "insert"], [120, 3, 1, "", "pop"], [120, 3, 1, "", "remove"], [120, 3, 1, "", "reverse"], [120, 3, 1, "", "sort"]], "nltk.featstruct.FeatStruct": [[120, 3, 1, "", "__new__"], [120, 3, 1, "", "copy"], [120, 3, 1, "", "cyclic"], [120, 3, 1, "", "equal_values"], [120, 3, 1, "", "freeze"], [120, 3, 1, "", "frozen"], [120, 3, 1, "", "remove_variables"], [120, 3, 1, "", "rename_variables"], [120, 3, 1, "", "retract_bindings"], [120, 3, 1, "", "substitute_bindings"], [120, 3, 1, "", "subsumes"], [120, 3, 1, "", "unify"], [120, 3, 1, "", "variables"], [120, 3, 1, "", "walk"]], "nltk.featstruct.FeatStructReader": [[120, 4, 1, "", "VALUE_HANDLERS"], [120, 3, 1, "", "__init__"], [120, 3, 1, "", "fromstring"], [120, 3, 1, "", "read_app_value"], [120, 3, 1, "", "read_fstruct_value"], [120, 3, 1, "", "read_int_value"], [120, 3, 1, "", "read_logic_value"], [120, 3, 1, "", "read_partial"], [120, 3, 1, "", "read_set_value"], [120, 3, 1, "", "read_str_value"], [120, 3, 1, "", "read_sym_value"], [120, 3, 1, "", "read_tuple_value"], [120, 3, 1, "", "read_value"], [120, 3, 1, "", "read_var_value"]], "nltk.featstruct.Feature": [[120, 3, 1, "", "__init__"], [120, 5, 1, "", "default"], [120, 5, 1, "", "display"], [120, 5, 1, "", "name"], [120, 3, 1, "", "read_value"], [120, 3, 1, "", "unify_base_values"]], "nltk.featstruct.RangeFeature": [[120, 4, 1, "", "RANGE_RE"], [120, 3, 1, "", "read_value"], [120, 3, 1, "", "unify_base_values"]], "nltk.featstruct.SlashFeature": [[120, 3, 1, "", "read_value"]], "nltk.grammar": [[121, 2, 1, "", "CFG"], [121, 2, 1, "", "DependencyGrammar"], [121, 2, 1, "", "DependencyProduction"], [121, 2, 1, "", "Nonterminal"], [121, 2, 1, "", "PCFG"], [121, 2, 1, "", "ProbabilisticDependencyGrammar"], [121, 2, 1, "", "ProbabilisticProduction"], [121, 2, 1, "", "Production"], [121, 1, 1, "", "induce_pcfg"], [121, 1, 1, "", "nonterminals"], [121, 1, 1, "", "read_grammar"]], "nltk.grammar.CFG": [[121, 3, 1, "", "__init__"], [121, 3, 1, "", "binarize"], [121, 3, 1, "", "check_coverage"], [121, 3, 1, "", "chomsky_normal_form"], [121, 3, 1, "", "eliminate_start"], [121, 3, 1, "", "fromstring"], [121, 3, 1, "", "is_binarised"], [121, 3, 1, "", "is_chomsky_normal_form"], [121, 3, 1, "", "is_flexible_chomsky_normal_form"], [121, 3, 1, "", "is_leftcorner"], [121, 3, 1, "", "is_lexical"], [121, 3, 1, "", "is_nonempty"], [121, 3, 1, "", "is_nonlexical"], [121, 3, 1, "", "leftcorner_parents"], [121, 3, 1, "", "leftcorners"], [121, 3, 1, "", "max_len"], [121, 3, 1, "", "min_len"], [121, 3, 1, "", "productions"], [121, 3, 1, "", "remove_unitary_rules"], [121, 3, 1, "", "start"]], "nltk.grammar.DependencyGrammar": [[121, 3, 1, "", "__init__"], [121, 3, 1, "", "contains"], [121, 3, 1, "", "fromstring"]], "nltk.grammar.Nonterminal": [[121, 3, 1, "", "__init__"], [121, 3, 1, "", "symbol"]], "nltk.grammar.PCFG": [[121, 4, 1, "", "EPSILON"], [121, 3, 1, "", "__init__"], [121, 3, 1, "", "fromstring"]], "nltk.grammar.ProbabilisticDependencyGrammar": [[121, 3, 1, "", "__init__"], [121, 3, 1, "", "contains"]], "nltk.grammar.ProbabilisticProduction": [[121, 3, 1, "", "__init__"]], "nltk.grammar.Production": [[121, 3, 1, "", "__init__"], [121, 3, 1, "", "is_lexical"], [121, 3, 1, "", "is_nonlexical"], [121, 3, 1, "", "lhs"], [121, 3, 1, "", "rhs"]], "nltk.help": [[122, 1, 1, "", "brown_tagset"], [122, 1, 1, "", "claws5_tagset"], [122, 1, 1, "", "upenn_tagset"]], "nltk.inference": [[124, 0, 0, "-", "api"], [125, 0, 0, "-", "discourse"], [126, 0, 0, "-", "mace"], [127, 0, 0, "-", "nonmonotonic"], [128, 0, 0, "-", "prover9"], [129, 0, 0, "-", "resolution"], [130, 0, 0, "-", "tableau"]], "nltk.inference.api": [[124, 2, 1, "", "BaseModelBuilderCommand"], [124, 2, 1, "", "BaseProverCommand"], [124, 2, 1, "", "BaseTheoremToolCommand"], [124, 2, 1, "", "ModelBuilder"], [124, 2, 1, "", "ModelBuilderCommand"], [124, 2, 1, "", "ModelBuilderCommandDecorator"], [124, 2, 1, "", "ParallelProverBuilder"], [124, 2, 1, "", "ParallelProverBuilderCommand"], [124, 2, 1, "", "Prover"], [124, 2, 1, "", "ProverCommand"], [124, 2, 1, "", "ProverCommandDecorator"], [124, 2, 1, "", "TheoremToolCommand"], [124, 2, 1, "", "TheoremToolCommandDecorator"], [124, 2, 1, "", "TheoremToolThread"]], "nltk.inference.api.BaseModelBuilderCommand": [[124, 3, 1, "", "__init__"], [124, 3, 1, "", "build_model"], [124, 3, 1, "", "get_model_builder"], [124, 3, 1, "", "model"]], "nltk.inference.api.BaseProverCommand": [[124, 3, 1, "", "__init__"], [124, 3, 1, "", "decorate_proof"], [124, 3, 1, "", "get_prover"], [124, 3, 1, "", "proof"], [124, 3, 1, "", "prove"]], "nltk.inference.api.BaseTheoremToolCommand": [[124, 3, 1, "", "__init__"], [124, 3, 1, "", "add_assumptions"], [124, 3, 1, "", "assumptions"], [124, 3, 1, "", "goal"], [124, 3, 1, "", "print_assumptions"], [124, 3, 1, "", "retract_assumptions"]], "nltk.inference.api.ModelBuilder": [[124, 3, 1, "", "build_model"]], "nltk.inference.api.ModelBuilderCommand": [[124, 3, 1, "", "build_model"], [124, 3, 1, "", "get_model_builder"], [124, 3, 1, "", "model"]], "nltk.inference.api.ModelBuilderCommandDecorator": [[124, 3, 1, "", "__init__"], [124, 3, 1, "", "build_model"], [124, 3, 1, "", "get_model_builder"], [124, 3, 1, "", "model"]], "nltk.inference.api.ParallelProverBuilder": [[124, 3, 1, "", "__init__"]], "nltk.inference.api.ParallelProverBuilderCommand": [[124, 3, 1, "", "__init__"], [124, 3, 1, "", "build_model"], [124, 3, 1, "", "prove"]], "nltk.inference.api.Prover": [[124, 3, 1, "", "prove"]], "nltk.inference.api.ProverCommand": [[124, 3, 1, "", "get_prover"], [124, 3, 1, "", "proof"], [124, 3, 1, "", "prove"]], "nltk.inference.api.ProverCommandDecorator": [[124, 3, 1, "", "__init__"], [124, 3, 1, "", "decorate_proof"], [124, 3, 1, "", "get_prover"], [124, 3, 1, "", "proof"], [124, 3, 1, "", "prove"]], "nltk.inference.api.TheoremToolCommand": [[124, 3, 1, "", "add_assumptions"], [124, 3, 1, "", "assumptions"], [124, 3, 1, "", "goal"], [124, 3, 1, "", "print_assumptions"], [124, 3, 1, "", "retract_assumptions"]], "nltk.inference.api.TheoremToolCommandDecorator": [[124, 3, 1, "", "__init__"], [124, 3, 1, "", "add_assumptions"], [124, 3, 1, "", "assumptions"], [124, 3, 1, "", "goal"], [124, 3, 1, "", "print_assumptions"], [124, 3, 1, "", "retract_assumptions"]], "nltk.inference.api.TheoremToolThread": [[124, 3, 1, "", "__init__"], [124, 5, 1, "", "result"], [124, 3, 1, "", "run"]], "nltk.inference.discourse": [[125, 2, 1, "", "CfgReadingCommand"], [125, 2, 1, "", "DiscourseTester"], [125, 2, 1, "", "DrtGlueReadingCommand"], [125, 2, 1, "", "ReadingCommand"], [125, 1, 1, "", "demo"], [125, 1, 1, "", "discourse_demo"], [125, 1, 1, "", "drt_discourse_demo"], [125, 1, 1, "", "load_fol"], [125, 1, 1, "", "spacer"]], "nltk.inference.discourse.CfgReadingCommand": [[125, 3, 1, "", "__init__"], [125, 3, 1, "", "combine_readings"], [125, 3, 1, "", "parse_to_readings"], [125, 3, 1, "", "to_fol"]], "nltk.inference.discourse.DiscourseTester": [[125, 3, 1, "", "__init__"], [125, 3, 1, "", "add_background"], [125, 3, 1, "", "add_sentence"], [125, 3, 1, "", "background"], [125, 3, 1, "", "expand_threads"], [125, 3, 1, "", "grammar"], [125, 3, 1, "", "models"], [125, 3, 1, "", "multiply"], [125, 3, 1, "", "readings"], [125, 3, 1, "", "retract_sentence"], [125, 3, 1, "", "sentences"]], "nltk.inference.discourse.DrtGlueReadingCommand": [[125, 3, 1, "", "__init__"], [125, 3, 1, "", "combine_readings"], [125, 3, 1, "", "parse_to_readings"], [125, 3, 1, "", "process_thread"], [125, 3, 1, "", "to_fol"]], "nltk.inference.discourse.ReadingCommand": [[125, 3, 1, "", "combine_readings"], [125, 3, 1, "", "parse_to_readings"], [125, 3, 1, "", "process_thread"], [125, 3, 1, "", "to_fol"]], "nltk.inference.mace": [[126, 2, 1, "", "Mace"], [126, 2, 1, "", "MaceCommand"], [126, 1, 1, "", "decode_result"], [126, 1, 1, "", "demo"], [126, 1, 1, "", "spacer"], [126, 1, 1, "", "test_build_model"], [126, 1, 1, "", "test_make_relation_set"], [126, 1, 1, "", "test_model_found"], [126, 1, 1, "", "test_transform_output"]], "nltk.inference.mace.Mace": [[126, 3, 1, "", "__init__"]], "nltk.inference.mace.MaceCommand": [[126, 3, 1, "", "__init__"], [126, 5, 1, "", "valuation"]], "nltk.inference.nonmonotonic": [[127, 2, 1, "", "ClosedDomainProver"], [127, 2, 1, "", "ClosedWorldProver"], [127, 2, 1, "", "PredHolder"], [127, 6, 1, "", "ProverParseError"], [127, 2, 1, "", "SetHolder"], [127, 2, 1, "", "UniqueNamesProver"], [127, 1, 1, "", "closed_domain_demo"], [127, 1, 1, "", "closed_world_demo"], [127, 1, 1, "", "combination_prover_demo"], [127, 1, 1, "", "default_reasoning_demo"], [127, 1, 1, "", "demo"], [127, 1, 1, "", "get_domain"], [127, 1, 1, "", "print_proof"], [127, 1, 1, "", "unique_names_demo"]], "nltk.inference.nonmonotonic.ClosedDomainProver": [[127, 3, 1, "", "assumptions"], [127, 3, 1, "", "goal"], [127, 3, 1, "", "replace_quants"]], "nltk.inference.nonmonotonic.ClosedWorldProver": [[127, 3, 1, "", "assumptions"]], "nltk.inference.nonmonotonic.PredHolder": [[127, 3, 1, "", "__init__"], [127, 3, 1, "", "append_prop"], [127, 3, 1, "", "append_sig"], [127, 3, 1, "", "validate_sig_len"]], "nltk.inference.nonmonotonic.UniqueNamesProver": [[127, 3, 1, "", "assumptions"]], "nltk.inference.prover9": [[128, 2, 1, "", "Prover9"], [128, 2, 1, "", "Prover9Command"], [128, 2, 1, "", "Prover9CommandParent"], [128, 6, 1, "", "Prover9Exception"], [128, 6, 1, "", "Prover9FatalException"], [128, 6, 1, "", "Prover9LimitExceededException"], [128, 2, 1, "", "Prover9Parent"], [128, 1, 1, "", "convert_to_prover9"], [128, 1, 1, "", "demo"], [128, 1, 1, "", "spacer"], [128, 1, 1, "", "test_config"], [128, 1, 1, "", "test_convert_to_prover9"], [128, 1, 1, "", "test_prove"]], "nltk.inference.prover9.Prover9": [[128, 3, 1, "", "__init__"], [128, 3, 1, "", "prover9_input"]], "nltk.inference.prover9.Prover9Command": [[128, 3, 1, "", "__init__"], [128, 3, 1, "", "decorate_proof"]], "nltk.inference.prover9.Prover9CommandParent": [[128, 3, 1, "", "print_assumptions"]], "nltk.inference.prover9.Prover9Exception": [[128, 3, 1, "", "__init__"]], "nltk.inference.prover9.Prover9Parent": [[128, 3, 1, "", "binary_locations"], [128, 3, 1, "", "config_prover9"], [128, 3, 1, "", "prover9_input"]], "nltk.inference.resolution": [[129, 2, 1, "", "BindingDict"], [129, 6, 1, "", "BindingException"], [129, 2, 1, "", "Clause"], [129, 2, 1, "", "DebugObject"], [129, 6, 1, "", "ProverParseError"], [129, 2, 1, "", "ResolutionProver"], [129, 2, 1, "", "ResolutionProverCommand"], [129, 6, 1, "", "UnificationException"], [129, 1, 1, "", "clausify"], [129, 1, 1, "", "demo"], [129, 1, 1, "", "most_general_unification"], [129, 1, 1, "", "resolution_test"], [129, 1, 1, "", "testResolutionProver"], [129, 1, 1, "", "test_clausify"]], "nltk.inference.resolution.BindingDict": [[129, 3, 1, "", "__init__"]], "nltk.inference.resolution.BindingException": [[129, 3, 1, "", "__init__"]], "nltk.inference.resolution.Clause": [[129, 3, 1, "", "__init__"], [129, 3, 1, "", "free"], [129, 3, 1, "", "isSubsetOf"], [129, 3, 1, "", "is_tautology"], [129, 3, 1, "", "replace"], [129, 3, 1, "", "substitute_bindings"], [129, 3, 1, "", "subsumes"], [129, 3, 1, "", "unify"]], "nltk.inference.resolution.DebugObject": [[129, 3, 1, "", "__init__"], [129, 3, 1, "", "line"]], "nltk.inference.resolution.ResolutionProver": [[129, 4, 1, "", "ANSWER_KEY"]], "nltk.inference.resolution.ResolutionProverCommand": [[129, 3, 1, "", "__init__"], [129, 3, 1, "", "find_answers"], [129, 3, 1, "", "prove"]], "nltk.inference.resolution.UnificationException": [[129, 3, 1, "", "__init__"]], "nltk.inference.tableau": [[130, 2, 1, "", "Agenda"], [130, 2, 1, "", "Categories"], [130, 2, 1, "", "Debug"], [130, 6, 1, "", "ProverParseError"], [130, 2, 1, "", "TableauProver"], [130, 2, 1, "", "TableauProverCommand"], [130, 1, 1, "", "demo"], [130, 1, 1, "", "tableau_test"], [130, 1, 1, "", "testHigherOrderTableauProver"], [130, 1, 1, "", "testTableauProver"]], "nltk.inference.tableau.Agenda": [[130, 3, 1, "", "__init__"], [130, 3, 1, "", "clone"], [130, 3, 1, "", "mark_alls_fresh"], [130, 3, 1, "", "mark_neqs_fresh"], [130, 3, 1, "", "pop_first"], [130, 3, 1, "", "put"], [130, 3, 1, "", "put_all"], [130, 3, 1, "", "put_atoms"], [130, 3, 1, "", "replace_all"]], "nltk.inference.tableau.Categories": [[130, 4, 1, "", "ALL"], [130, 4, 1, "", "AND"], [130, 4, 1, "", "APP"], [130, 4, 1, "", "ATOM"], [130, 4, 1, "", "D_NEG"], [130, 4, 1, "", "EQ"], [130, 4, 1, "", "EXISTS"], [130, 4, 1, "", "IFF"], [130, 4, 1, "", "IMP"], [130, 4, 1, "", "N_ALL"], [130, 4, 1, "", "N_AND"], [130, 4, 1, "", "N_APP"], [130, 4, 1, "", "N_ATOM"], [130, 4, 1, "", "N_EQ"], [130, 4, 1, "", "N_EXISTS"], [130, 4, 1, "", "N_IFF"], [130, 4, 1, "", "N_IMP"], [130, 4, 1, "", "N_OR"], [130, 4, 1, "", "N_PROP"], [130, 4, 1, "", "OR"], [130, 4, 1, "", "PROP"]], "nltk.inference.tableau.Debug": [[130, 3, 1, "", "__init__"], [130, 3, 1, "", "line"]], "nltk.inference.tableau.TableauProver": [[130, 3, 1, "", "is_atom"]], "nltk.inference.tableau.TableauProverCommand": [[130, 3, 1, "", "__init__"]], "nltk.internals": [[131, 2, 1, "", "Counter"], [131, 2, 1, "", "Deprecated"], [131, 2, 1, "", "ElementWrapper"], [131, 6, 1, "", "ReadError"], [131, 1, 1, "", "config_java"], [131, 1, 1, "", "deprecated"], [131, 1, 1, "", "find_binary"], [131, 1, 1, "", "find_binary_iter"], [131, 1, 1, "", "find_dir"], [131, 1, 1, "", "find_file"], [131, 1, 1, "", "find_file_iter"], [131, 1, 1, "", "find_jar"], [131, 1, 1, "", "find_jar_iter"], [131, 1, 1, "", "find_jars_within_path"], [131, 1, 1, "", "import_from_stdlib"], [131, 1, 1, "", "is_writable"], [131, 1, 1, "", "java"], [131, 1, 1, "", "overridden"], [131, 1, 1, "", "raise_unorderable_types"], [131, 1, 1, "", "read_int"], [131, 1, 1, "", "read_number"], [131, 1, 1, "", "read_str"], [131, 1, 1, "", "slice_bounds"]], "nltk.internals.Counter": [[131, 3, 1, "", "__init__"], [131, 3, 1, "", "get"]], "nltk.internals.Deprecated": [[131, 3, 1, "", "__new__"]], "nltk.internals.ElementWrapper": [[131, 3, 1, "", "__init__"], [131, 3, 1, "", "__new__"], [131, 3, 1, "", "find"], [131, 3, 1, "", "findall"], [131, 3, 1, "", "getchildren"], [131, 3, 1, "", "getiterator"], [131, 3, 1, "", "makeelement"], [131, 3, 1, "", "unwrap"]], "nltk.internals.ReadError": [[131, 3, 1, "", "__init__"]], "nltk.jsontags": [[132, 2, 1, "", "JSONTaggedDecoder"], [132, 2, 1, "", "JSONTaggedEncoder"], [132, 1, 1, "", "register_tag"]], "nltk.jsontags.JSONTaggedDecoder": [[132, 3, 1, "", "decode"], [132, 3, 1, "", "decode_obj"]], "nltk.jsontags.JSONTaggedEncoder": [[132, 3, 1, "", "default"]], "nltk.langnames": [[133, 1, 1, "", "inverse_dict"], [133, 1, 1, "", "lang2q"], [133, 1, 1, "", "langcode"], [133, 1, 1, "", "langname"], [133, 1, 1, "", "q2name"], [133, 1, 1, "", "q2tag"], [133, 1, 1, "", "tag2q"]], "nltk.lazyimport": [[134, 2, 1, "", "LazyModule"]], "nltk.lazyimport.LazyModule": [[134, 3, 1, "", "__init__"]], "nltk.lm": [[135, 2, 1, "", "AbsoluteDiscountingInterpolated"], [135, 2, 1, "", "KneserNeyInterpolated"], [135, 2, 1, "", "Laplace"], [135, 2, 1, "", "Lidstone"], [135, 2, 1, "", "MLE"], [135, 2, 1, "", "NgramCounter"], [135, 2, 1, "", "StupidBackoff"], [135, 2, 1, "", "Vocabulary"], [135, 2, 1, "", "WittenBellInterpolated"], [136, 0, 0, "-", "api"], [137, 0, 0, "-", "counter"], [138, 0, 0, "-", "models"], [139, 0, 0, "-", "preprocessing"], [140, 0, 0, "-", "smoothing"], [141, 0, 0, "-", "util"], [142, 0, 0, "-", "vocabulary"]], "nltk.lm.AbsoluteDiscountingInterpolated": [[135, 3, 1, "", "__init__"]], "nltk.lm.KneserNeyInterpolated": [[135, 3, 1, "", "__init__"]], "nltk.lm.Laplace": [[135, 3, 1, "", "__init__"]], "nltk.lm.Lidstone": [[135, 3, 1, "", "__init__"], [135, 3, 1, "", "unmasked_score"]], "nltk.lm.MLE": [[135, 3, 1, "", "unmasked_score"]], "nltk.lm.NgramCounter": [[135, 3, 1, "", "N"], [135, 3, 1, "", "__init__"], [135, 3, 1, "", "update"]], "nltk.lm.StupidBackoff": [[135, 3, 1, "", "__init__"], [135, 3, 1, "", "unmasked_score"]], "nltk.lm.Vocabulary": [[135, 3, 1, "", "__init__"], [135, 5, 1, "", "cutoff"], [135, 3, 1, "", "lookup"], [135, 3, 1, "", "update"]], "nltk.lm.WittenBellInterpolated": [[135, 3, 1, "", "__init__"]], "nltk.lm.api": [[136, 2, 1, "", "LanguageModel"], [136, 2, 1, "", "Smoothing"]], "nltk.lm.api.LanguageModel": [[136, 3, 1, "", "__init__"], [136, 3, 1, "", "context_counts"], [136, 3, 1, "", "entropy"], [136, 3, 1, "", "fit"], [136, 3, 1, "", "generate"], [136, 3, 1, "", "logscore"], [136, 3, 1, "", "perplexity"], [136, 3, 1, "", "score"], [136, 3, 1, "", "unmasked_score"]], "nltk.lm.api.Smoothing": [[136, 3, 1, "", "__init__"], [136, 3, 1, "", "alpha_gamma"], [136, 3, 1, "", "unigram_score"]], "nltk.lm.counter": [[137, 2, 1, "", "NgramCounter"]], "nltk.lm.counter.NgramCounter": [[137, 3, 1, "", "N"], [137, 3, 1, "", "__init__"], [137, 3, 1, "", "update"]], "nltk.lm.models": [[138, 2, 1, "", "AbsoluteDiscountingInterpolated"], [138, 2, 1, "", "InterpolatedLanguageModel"], [138, 2, 1, "", "KneserNeyInterpolated"], [138, 2, 1, "", "Laplace"], [138, 2, 1, "", "Lidstone"], [138, 2, 1, "", "MLE"], [138, 2, 1, "", "StupidBackoff"], [138, 2, 1, "", "WittenBellInterpolated"]], "nltk.lm.models.AbsoluteDiscountingInterpolated": [[138, 3, 1, "", "__init__"]], "nltk.lm.models.InterpolatedLanguageModel": [[138, 3, 1, "", "__init__"], [138, 3, 1, "", "unmasked_score"]], "nltk.lm.models.KneserNeyInterpolated": [[138, 3, 1, "", "__init__"]], "nltk.lm.models.Laplace": [[138, 3, 1, "", "__init__"]], "nltk.lm.models.Lidstone": [[138, 3, 1, "", "__init__"], [138, 3, 1, "", "unmasked_score"]], "nltk.lm.models.MLE": [[138, 3, 1, "", "unmasked_score"]], "nltk.lm.models.StupidBackoff": [[138, 3, 1, "", "__init__"], [138, 3, 1, "", "unmasked_score"]], "nltk.lm.models.WittenBellInterpolated": [[138, 3, 1, "", "__init__"]], "nltk.lm.preprocessing": [[139, 1, 1, "", "flatten"], [139, 1, 1, "", "padded_everygram_pipeline"], [139, 1, 1, "", "padded_everygrams"]], "nltk.lm.smoothing": [[140, 2, 1, "", "AbsoluteDiscounting"], [140, 2, 1, "", "KneserNey"], [140, 2, 1, "", "WittenBell"]], "nltk.lm.smoothing.AbsoluteDiscounting": [[140, 3, 1, "", "__init__"], [140, 3, 1, "", "alpha_gamma"], [140, 3, 1, "", "unigram_score"]], "nltk.lm.smoothing.KneserNey": [[140, 3, 1, "", "__init__"], [140, 3, 1, "", "alpha_gamma"], [140, 3, 1, "", "unigram_score"]], "nltk.lm.smoothing.WittenBell": [[140, 3, 1, "", "__init__"], [140, 3, 1, "", "alpha_gamma"], [140, 3, 1, "", "unigram_score"]], "nltk.lm.util": [[141, 1, 1, "", "log_base2"]], "nltk.lm.vocabulary": [[142, 2, 1, "", "Vocabulary"]], "nltk.lm.vocabulary.Vocabulary": [[142, 3, 1, "", "__init__"], [142, 5, 1, "", "cutoff"], [142, 3, 1, "", "lookup"], [142, 3, 1, "", "update"]], "nltk.metrics": [[144, 0, 0, "-", "agreement"], [145, 0, 0, "-", "aline"], [146, 0, 0, "-", "association"], [147, 0, 0, "-", "confusionmatrix"], [148, 0, 0, "-", "distance"], [149, 0, 0, "-", "paice"], [150, 0, 0, "-", "scores"], [151, 0, 0, "-", "segmentation"], [152, 0, 0, "-", "spearman"]], "nltk.metrics.agreement": [[144, 2, 1, "", "AnnotationTask"]], "nltk.metrics.agreement.AnnotationTask": [[144, 3, 1, "", "Ae_kappa"], [144, 3, 1, "", "Ao"], [144, 3, 1, "", "Disagreement"], [144, 3, 1, "", "Do_Kw"], [144, 3, 1, "", "Do_Kw_pairwise"], [144, 3, 1, "", "N"], [144, 3, 1, "", "Nck"], [144, 3, 1, "", "Nik"], [144, 3, 1, "", "Nk"], [144, 3, 1, "", "S"], [144, 3, 1, "", "__init__"], [144, 3, 1, "", "agr"], [144, 3, 1, "", "alpha"], [144, 3, 1, "", "avg_Ao"], [144, 3, 1, "", "kappa"], [144, 3, 1, "", "kappa_pairwise"], [144, 3, 1, "", "load_array"], [144, 3, 1, "", "multi_kappa"], [144, 3, 1, "", "pi"], [144, 3, 1, "", "weighted_kappa"], [144, 3, 1, "", "weighted_kappa_pairwise"]], "nltk.metrics.aline": [[145, 1, 1, "", "R"], [145, 1, 1, "", "V"], [145, 1, 1, "", "align"], [145, 1, 1, "", "delta"], [145, 1, 1, "", "demo"], [145, 1, 1, "", "diff"], [145, 1, 1, "", "sigma_exp"], [145, 1, 1, "", "sigma_skip"], [145, 1, 1, "", "sigma_sub"]], "nltk.metrics.association": [[146, 2, 1, "", "BigramAssocMeasures"], [146, 2, 1, "", "ContingencyMeasures"], [146, 7, 1, "", "NGRAM"], [146, 2, 1, "", "NgramAssocMeasures"], [146, 2, 1, "", "QuadgramAssocMeasures"], [146, 7, 1, "", "TOTAL"], [146, 2, 1, "", "TrigramAssocMeasures"], [146, 7, 1, "", "UNIGRAMS"], [146, 1, 1, "", "fisher_exact"]], "nltk.metrics.association.BigramAssocMeasures": [[146, 3, 1, "", "chi_sq"], [146, 3, 1, "", "dice"], [146, 3, 1, "", "fisher"], [146, 3, 1, "", "phi_sq"]], "nltk.metrics.association.ContingencyMeasures": [[146, 3, 1, "", "__init__"]], "nltk.metrics.association.NgramAssocMeasures": [[146, 3, 1, "", "chi_sq"], [146, 3, 1, "", "jaccard"], [146, 3, 1, "", "likelihood_ratio"], [146, 3, 1, "", "mi_like"], [146, 3, 1, "", "pmi"], [146, 3, 1, "", "poisson_stirling"], [146, 3, 1, "", "raw_freq"], [146, 3, 1, "", "student_t"]], "nltk.metrics.confusionmatrix": [[147, 2, 1, "", "ConfusionMatrix"], [147, 1, 1, "", "demo"]], "nltk.metrics.confusionmatrix.ConfusionMatrix": [[147, 3, 1, "", "__init__"], [147, 3, 1, "", "evaluate"], [147, 3, 1, "", "f_measure"], [147, 3, 1, "", "key"], [147, 3, 1, "", "precision"], [147, 3, 1, "", "pretty_format"], [147, 3, 1, "", "recall"]], "nltk.metrics.distance": [[148, 1, 1, "", "binary_distance"], [148, 1, 1, "", "custom_distance"], [148, 1, 1, "", "demo"], [148, 1, 1, "", "edit_distance"], [148, 1, 1, "", "edit_distance_align"], [148, 1, 1, "", "fractional_presence"], [148, 1, 1, "", "interval_distance"], [148, 1, 1, "", "jaccard_distance"], [148, 1, 1, "", "jaro_similarity"], [148, 1, 1, "", "jaro_winkler_similarity"], [148, 1, 1, "", "masi_distance"], [148, 1, 1, "", "presence"]], "nltk.metrics.paice": [[149, 2, 1, "", "Paice"], [149, 1, 1, "", "demo"], [149, 1, 1, "", "get_words_from_dictionary"]], "nltk.metrics.paice.Paice": [[149, 3, 1, "", "__init__"], [149, 3, 1, "", "update"]], "nltk.metrics.scores": [[150, 1, 1, "", "accuracy"], [150, 1, 1, "", "approxrand"], [150, 1, 1, "", "demo"], [150, 1, 1, "", "f_measure"], [150, 1, 1, "", "log_likelihood"], [150, 1, 1, "", "precision"], [150, 1, 1, "", "recall"]], "nltk.metrics.segmentation": [[151, 1, 1, "", "ghd"], [151, 1, 1, "", "pk"], [151, 1, 1, "", "windowdiff"]], "nltk.metrics.spearman": [[152, 1, 1, "", "ranks_from_scores"], [152, 1, 1, "", "ranks_from_sequence"], [152, 1, 1, "", "spearman_correlation"]], "nltk.misc": [[154, 0, 0, "-", "babelfish"], [155, 0, 0, "-", "chomsky"], [156, 0, 0, "-", "minimalset"], [157, 0, 0, "-", "sort"], [158, 0, 0, "-", "wordfinder"]], "nltk.misc.babelfish": [[154, 1, 1, "", "babelize_shell"]], "nltk.misc.chomsky": [[155, 1, 1, "", "generate_chomsky"]], "nltk.misc.minimalset": [[156, 2, 1, "", "MinimalSet"]], "nltk.misc.minimalset.MinimalSet": [[156, 3, 1, "", "__init__"], [156, 3, 1, "", "add"], [156, 3, 1, "", "contexts"], [156, 3, 1, "", "display"], [156, 3, 1, "", "display_all"], [156, 3, 1, "", "targets"]], "nltk.misc.sort": [[157, 1, 1, "", "bubble"], [157, 1, 1, "", "demo"], [157, 1, 1, "", "merge"], [157, 1, 1, "", "quick"], [157, 1, 1, "", "selection"]], "nltk.misc.wordfinder": [[158, 1, 1, "", "check"], [158, 1, 1, "", "revword"], [158, 1, 1, "", "step"], [158, 1, 1, "", "word_finder"], [158, 1, 1, "", "wordfinder"]], "nltk.parse": [[160, 0, 0, "-", "api"], [161, 0, 0, "-", "bllip"], [162, 0, 0, "-", "chart"], [163, 0, 0, "-", "corenlp"], [164, 0, 0, "-", "dependencygraph"], [165, 0, 0, "-", "earleychart"], [166, 0, 0, "-", "evaluate"], [167, 0, 0, "-", "featurechart"], [168, 0, 0, "-", "generate"], [169, 0, 0, "-", "malt"], [170, 0, 0, "-", "nonprojectivedependencyparser"], [171, 0, 0, "-", "pchart"], [172, 0, 0, "-", "projectivedependencyparser"], [173, 0, 0, "-", "recursivedescent"], [174, 0, 0, "-", "shiftreduce"], [175, 0, 0, "-", "stanford"], [176, 0, 0, "-", "transitionparser"], [177, 0, 0, "-", "util"], [178, 0, 0, "-", "viterbi"]], "nltk.parse.api": [[160, 2, 1, "", "ParserI"]], "nltk.parse.api.ParserI": [[160, 3, 1, "", "grammar"], [160, 3, 1, "", "parse"], [160, 3, 1, "", "parse_all"], [160, 3, 1, "", "parse_one"], [160, 3, 1, "", "parse_sents"]], "nltk.parse.bllip": [[161, 2, 1, "", "BllipParser"]], "nltk.parse.bllip.BllipParser": [[161, 3, 1, "", "__init__"], [161, 3, 1, "", "from_unified_model_dir"], [161, 3, 1, "", "parse"], [161, 3, 1, "", "tagged_parse"]], "nltk.parse.chart": [[162, 2, 1, "", "AbstractChartRule"], [162, 2, 1, "", "BottomUpChartParser"], [162, 2, 1, "", "BottomUpLeftCornerChartParser"], [162, 2, 1, "", "BottomUpPredictCombineRule"], [162, 2, 1, "", "BottomUpPredictRule"], [162, 2, 1, "", "CachedTopDownPredictRule"], [162, 2, 1, "", "Chart"], [162, 2, 1, "", "ChartParser"], [162, 2, 1, "", "ChartRuleI"], [162, 2, 1, "", "EdgeI"], [162, 2, 1, "", "EmptyPredictRule"], [162, 2, 1, "", "FilteredBottomUpPredictCombineRule"], [162, 2, 1, "", "FilteredSingleEdgeFundamentalRule"], [162, 2, 1, "", "FundamentalRule"], [162, 2, 1, "", "LeafEdge"], [162, 2, 1, "", "LeafInitRule"], [162, 2, 1, "", "LeftCornerChartParser"], [162, 2, 1, "", "SingleEdgeFundamentalRule"], [162, 2, 1, "", "SteppingChartParser"], [162, 2, 1, "", "TopDownChartParser"], [162, 2, 1, "", "TopDownInitRule"], [162, 2, 1, "", "TopDownPredictRule"], [162, 2, 1, "", "TreeEdge"], [162, 1, 1, "", "demo"], [162, 1, 1, "", "demo_grammar"]], "nltk.parse.chart.AbstractChartRule": [[162, 3, 1, "", "apply"], [162, 3, 1, "", "apply_everywhere"]], "nltk.parse.chart.BottomUpChartParser": [[162, 3, 1, "", "__init__"]], "nltk.parse.chart.BottomUpLeftCornerChartParser": [[162, 3, 1, "", "__init__"]], "nltk.parse.chart.BottomUpPredictCombineRule": [[162, 4, 1, "", "NUM_EDGES"], [162, 3, 1, "", "apply"]], "nltk.parse.chart.BottomUpPredictRule": [[162, 4, 1, "", "NUM_EDGES"], [162, 3, 1, "", "apply"]], "nltk.parse.chart.CachedTopDownPredictRule": [[162, 3, 1, "", "__init__"], [162, 3, 1, "", "apply"]], "nltk.parse.chart.Chart": [[162, 3, 1, "", "__init__"], [162, 3, 1, "", "child_pointer_lists"], [162, 3, 1, "", "dot_digraph"], [162, 3, 1, "", "edges"], [162, 3, 1, "", "initialize"], [162, 3, 1, "", "insert"], [162, 3, 1, "", "insert_with_backpointer"], [162, 3, 1, "", "iteredges"], [162, 3, 1, "", "leaf"], [162, 3, 1, "", "leaves"], [162, 3, 1, "", "num_edges"], [162, 3, 1, "", "num_leaves"], [162, 3, 1, "", "parses"], [162, 3, 1, "", "pretty_format"], [162, 3, 1, "", "pretty_format_edge"], [162, 3, 1, "", "pretty_format_leaves"], [162, 3, 1, "", "select"], [162, 3, 1, "", "trees"]], "nltk.parse.chart.ChartParser": [[162, 3, 1, "", "__init__"], [162, 3, 1, "", "chart_parse"], [162, 3, 1, "", "grammar"], [162, 3, 1, "", "parse"]], "nltk.parse.chart.ChartRuleI": [[162, 3, 1, "", "apply"], [162, 3, 1, "", "apply_everywhere"]], "nltk.parse.chart.EdgeI": [[162, 3, 1, "", "__init__"], [162, 3, 1, "", "dot"], [162, 3, 1, "", "end"], [162, 3, 1, "", "is_complete"], [162, 3, 1, "", "is_incomplete"], [162, 3, 1, "", "length"], [162, 3, 1, "", "lhs"], [162, 3, 1, "", "nextsym"], [162, 3, 1, "", "rhs"], [162, 3, 1, "", "span"], [162, 3, 1, "", "start"]], "nltk.parse.chart.EmptyPredictRule": [[162, 4, 1, "", "NUM_EDGES"], [162, 3, 1, "", "apply"]], "nltk.parse.chart.FilteredBottomUpPredictCombineRule": [[162, 3, 1, "", "apply"]], "nltk.parse.chart.FundamentalRule": [[162, 4, 1, "", "NUM_EDGES"], [162, 3, 1, "", "apply"]], "nltk.parse.chart.LeafEdge": [[162, 3, 1, "", "__init__"], [162, 3, 1, "", "dot"], [162, 3, 1, "", "end"], [162, 3, 1, "", "is_complete"], [162, 3, 1, "", "is_incomplete"], [162, 3, 1, "", "length"], [162, 3, 1, "", "lhs"], [162, 3, 1, "", "nextsym"], [162, 3, 1, "", "rhs"], [162, 3, 1, "", "span"], [162, 3, 1, "", "start"]], "nltk.parse.chart.LeafInitRule": [[162, 4, 1, "", "NUM_EDGES"], [162, 3, 1, "", "apply"]], "nltk.parse.chart.LeftCornerChartParser": [[162, 3, 1, "", "__init__"]], "nltk.parse.chart.SingleEdgeFundamentalRule": [[162, 4, 1, "", "NUM_EDGES"], [162, 3, 1, "", "apply"]], "nltk.parse.chart.SteppingChartParser": [[162, 3, 1, "", "__init__"], [162, 3, 1, "", "chart"], [162, 3, 1, "", "current_chartrule"], [162, 3, 1, "", "grammar"], [162, 3, 1, "", "initialize"], [162, 3, 1, "", "parse"], [162, 3, 1, "", "parses"], [162, 3, 1, "", "set_chart"], [162, 3, 1, "", "set_grammar"], [162, 3, 1, "", "set_strategy"], [162, 3, 1, "", "step"], [162, 3, 1, "", "strategy"]], "nltk.parse.chart.TopDownChartParser": [[162, 3, 1, "", "__init__"]], "nltk.parse.chart.TopDownInitRule": [[162, 4, 1, "", "NUM_EDGES"], [162, 3, 1, "", "apply"]], "nltk.parse.chart.TopDownPredictRule": [[162, 4, 1, "", "NUM_EDGES"], [162, 3, 1, "", "apply"]], "nltk.parse.chart.TreeEdge": [[162, 3, 1, "", "__init__"], [162, 3, 1, "", "dot"], [162, 3, 1, "", "end"], [162, 3, 1, "", "from_production"], [162, 3, 1, "", "is_complete"], [162, 3, 1, "", "is_incomplete"], [162, 3, 1, "", "length"], [162, 3, 1, "", "lhs"], [162, 3, 1, "", "move_dot_forward"], [162, 3, 1, "", "nextsym"], [162, 3, 1, "", "rhs"], [162, 3, 1, "", "span"], [162, 3, 1, "", "start"]], "nltk.parse.corenlp": [[163, 2, 1, "", "CoreNLPDependencyParser"], [163, 2, 1, "", "CoreNLPParser"], [163, 2, 1, "", "CoreNLPServer"], [163, 6, 1, "", "CoreNLPServerError"], [163, 2, 1, "", "GenericCoreNLPParser"], [163, 1, 1, "", "transform"], [163, 1, 1, "", "try_port"]], "nltk.parse.corenlp.CoreNLPDependencyParser": [[163, 3, 1, "", "make_tree"], [163, 4, 1, "", "parser_annotator"]], "nltk.parse.corenlp.CoreNLPParser": [[163, 3, 1, "", "make_tree"], [163, 4, 1, "", "parser_annotator"]], "nltk.parse.corenlp.CoreNLPServer": [[163, 3, 1, "", "__init__"], [163, 3, 1, "", "start"], [163, 3, 1, "", "stop"]], "nltk.parse.corenlp.GenericCoreNLPParser": [[163, 3, 1, "", "__init__"], [163, 3, 1, "", "api_call"], [163, 3, 1, "", "parse_sents"], [163, 3, 1, "", "parse_text"], [163, 3, 1, "", "raw_parse"], [163, 3, 1, "", "raw_parse_sents"], [163, 3, 1, "", "raw_tag_sents"], [163, 3, 1, "", "tag"], [163, 3, 1, "", "tag_sents"], [163, 3, 1, "", "tokenize"]], "nltk.parse.dependencygraph": [[164, 2, 1, "", "DependencyGraph"], [164, 6, 1, "", "DependencyGraphError"], [164, 1, 1, "", "conll_demo"], [164, 1, 1, "", "conll_file_demo"], [164, 1, 1, "", "cycle_finding_demo"], [164, 1, 1, "", "demo"], [164, 1, 1, "", "dot2img"], [164, 1, 1, "", "malt_demo"]], "nltk.parse.dependencygraph.DependencyGraph": [[164, 3, 1, "", "__init__"], [164, 3, 1, "", "add_arc"], [164, 3, 1, "", "add_node"], [164, 3, 1, "", "connect_graph"], [164, 3, 1, "", "contains_address"], [164, 3, 1, "", "contains_cycle"], [164, 3, 1, "", "get_by_address"], [164, 3, 1, "", "get_cycle_path"], [164, 3, 1, "", "left_children"], [164, 3, 1, "", "load"], [164, 3, 1, "", "nx_graph"], [164, 3, 1, "", "redirect_arcs"], [164, 3, 1, "", "remove_by_address"], [164, 3, 1, "", "right_children"], [164, 3, 1, "", "to_conll"], [164, 3, 1, "", "to_dot"], [164, 3, 1, "", "tree"], [164, 3, 1, "", "triples"]], "nltk.parse.earleychart": [[165, 2, 1, "", "CompleteFundamentalRule"], [165, 2, 1, "", "CompleterRule"], [165, 2, 1, "", "EarleyChartParser"], [165, 2, 1, "", "FeatureCompleteFundamentalRule"], [165, 2, 1, "", "FeatureCompleterRule"], [165, 2, 1, "", "FeatureEarleyChartParser"], [165, 2, 1, "", "FeatureIncrementalBottomUpChartParser"], [165, 2, 1, "", "FeatureIncrementalBottomUpLeftCornerChartParser"], [165, 2, 1, "", "FeatureIncrementalChart"], [165, 2, 1, "", "FeatureIncrementalChartParser"], [165, 2, 1, "", "FeatureIncrementalTopDownChartParser"], [165, 2, 1, "", "FeaturePredictorRule"], [165, 2, 1, "", "FeatureScannerRule"], [165, 2, 1, "", "FilteredCompleteFundamentalRule"], [165, 2, 1, "", "IncrementalBottomUpChartParser"], [165, 2, 1, "", "IncrementalBottomUpLeftCornerChartParser"], [165, 2, 1, "", "IncrementalChart"], [165, 2, 1, "", "IncrementalChartParser"], [165, 2, 1, "", "IncrementalLeftCornerChartParser"], [165, 2, 1, "", "IncrementalTopDownChartParser"], [165, 2, 1, "", "PredictorRule"], [165, 2, 1, "", "ScannerRule"], [165, 1, 1, "", "demo"]], "nltk.parse.earleychart.CompleterRule": [[165, 3, 1, "", "apply"]], "nltk.parse.earleychart.EarleyChartParser": [[165, 3, 1, "", "__init__"]], "nltk.parse.earleychart.FeatureEarleyChartParser": [[165, 3, 1, "", "__init__"]], "nltk.parse.earleychart.FeatureIncrementalBottomUpChartParser": [[165, 3, 1, "", "__init__"]], "nltk.parse.earleychart.FeatureIncrementalBottomUpLeftCornerChartParser": [[165, 3, 1, "", "__init__"]], "nltk.parse.earleychart.FeatureIncrementalChart": [[165, 3, 1, "", "select"]], "nltk.parse.earleychart.FeatureIncrementalChartParser": [[165, 3, 1, "", "__init__"]], "nltk.parse.earleychart.FeatureIncrementalTopDownChartParser": [[165, 3, 1, "", "__init__"]], "nltk.parse.earleychart.FilteredCompleteFundamentalRule": [[165, 3, 1, "", "apply"]], "nltk.parse.earleychart.IncrementalBottomUpChartParser": [[165, 3, 1, "", "__init__"]], "nltk.parse.earleychart.IncrementalBottomUpLeftCornerChartParser": [[165, 3, 1, "", "__init__"]], "nltk.parse.earleychart.IncrementalChart": [[165, 3, 1, "", "edges"], [165, 3, 1, "", "initialize"], [165, 3, 1, "", "iteredges"], [165, 3, 1, "", "select"]], "nltk.parse.earleychart.IncrementalChartParser": [[165, 3, 1, "", "__init__"], [165, 3, 1, "", "chart_parse"]], "nltk.parse.earleychart.IncrementalLeftCornerChartParser": [[165, 3, 1, "", "__init__"]], "nltk.parse.earleychart.IncrementalTopDownChartParser": [[165, 3, 1, "", "__init__"]], "nltk.parse.earleychart.ScannerRule": [[165, 3, 1, "", "apply"]], "nltk.parse.evaluate": [[166, 2, 1, "", "DependencyEvaluator"]], "nltk.parse.evaluate.DependencyEvaluator": [[166, 3, 1, "", "__init__"], [166, 3, 1, "", "eval"]], "nltk.parse.featurechart": [[167, 2, 1, "", "FeatureBottomUpChartParser"], [167, 2, 1, "", "FeatureBottomUpLeftCornerChartParser"], [167, 2, 1, "", "FeatureBottomUpPredictCombineRule"], [167, 2, 1, "", "FeatureBottomUpPredictRule"], [167, 2, 1, "", "FeatureChart"], [167, 2, 1, "", "FeatureChartParser"], [167, 2, 1, "", "FeatureEmptyPredictRule"], [167, 2, 1, "", "FeatureFundamentalRule"], [167, 2, 1, "", "FeatureSingleEdgeFundamentalRule"], [167, 2, 1, "", "FeatureTopDownChartParser"], [167, 2, 1, "", "FeatureTopDownInitRule"], [167, 2, 1, "", "FeatureTopDownPredictRule"], [167, 2, 1, "", "FeatureTreeEdge"], [167, 2, 1, "", "InstantiateVarsChart"], [167, 1, 1, "", "demo"], [167, 1, 1, "", "demo_grammar"], [167, 1, 1, "", "run_profile"]], "nltk.parse.featurechart.FeatureBottomUpChartParser": [[167, 3, 1, "", "__init__"]], "nltk.parse.featurechart.FeatureBottomUpLeftCornerChartParser": [[167, 3, 1, "", "__init__"]], "nltk.parse.featurechart.FeatureBottomUpPredictCombineRule": [[167, 3, 1, "", "apply"]], "nltk.parse.featurechart.FeatureBottomUpPredictRule": [[167, 3, 1, "", "apply"]], "nltk.parse.featurechart.FeatureChart": [[167, 3, 1, "", "parses"], [167, 3, 1, "", "select"]], "nltk.parse.featurechart.FeatureChartParser": [[167, 3, 1, "", "__init__"]], "nltk.parse.featurechart.FeatureEmptyPredictRule": [[167, 3, 1, "", "apply"]], "nltk.parse.featurechart.FeatureFundamentalRule": [[167, 3, 1, "", "apply"]], "nltk.parse.featurechart.FeatureTopDownChartParser": [[167, 3, 1, "", "__init__"]], "nltk.parse.featurechart.FeatureTopDownInitRule": [[167, 3, 1, "", "apply"]], "nltk.parse.featurechart.FeatureTopDownPredictRule": [[167, 3, 1, "", "apply"]], "nltk.parse.featurechart.FeatureTreeEdge": [[167, 3, 1, "", "__init__"], [167, 3, 1, "", "bindings"], [167, 3, 1, "", "from_production"], [167, 3, 1, "", "move_dot_forward"], [167, 3, 1, "", "next_with_bindings"], [167, 3, 1, "", "variables"]], "nltk.parse.featurechart.InstantiateVarsChart": [[167, 3, 1, "", "__init__"], [167, 3, 1, "", "initialize"], [167, 3, 1, "", "insert"], [167, 3, 1, "", "inst_vars"], [167, 3, 1, "", "instantiate_edge"]], "nltk.parse.generate": [[168, 1, 1, "", "demo"], [168, 1, 1, "", "generate"]], "nltk.parse.malt": [[169, 2, 1, "", "MaltParser"], [169, 1, 1, "", "find_malt_model"], [169, 1, 1, "", "find_maltparser"], [169, 1, 1, "", "malt_regex_tagger"]], "nltk.parse.malt.MaltParser": [[169, 3, 1, "", "__init__"], [169, 3, 1, "", "generate_malt_command"], [169, 3, 1, "", "parse_sents"], [169, 3, 1, "", "parse_tagged_sents"], [169, 3, 1, "", "train"], [169, 3, 1, "", "train_from_file"]], "nltk.parse.nonprojectivedependencyparser": [[170, 2, 1, "", "DemoScorer"], [170, 2, 1, "", "DependencyScorerI"], [170, 2, 1, "", "NaiveBayesDependencyScorer"], [170, 2, 1, "", "NonprojectiveDependencyParser"], [170, 2, 1, "", "ProbabilisticNonprojectiveParser"], [170, 1, 1, "", "demo"], [170, 1, 1, "", "hall_demo"], [170, 1, 1, "", "nonprojective_conll_parse_demo"], [170, 1, 1, "", "rule_based_demo"]], "nltk.parse.nonprojectivedependencyparser.DemoScorer": [[170, 3, 1, "", "score"], [170, 3, 1, "", "train"]], "nltk.parse.nonprojectivedependencyparser.DependencyScorerI": [[170, 3, 1, "", "__init__"], [170, 3, 1, "", "score"], [170, 3, 1, "", "train"]], "nltk.parse.nonprojectivedependencyparser.NaiveBayesDependencyScorer": [[170, 3, 1, "", "__init__"], [170, 3, 1, "", "score"], [170, 3, 1, "", "train"]], "nltk.parse.nonprojectivedependencyparser.NonprojectiveDependencyParser": [[170, 3, 1, "", "__init__"], [170, 3, 1, "", "parse"]], "nltk.parse.nonprojectivedependencyparser.ProbabilisticNonprojectiveParser": [[170, 3, 1, "", "__init__"], [170, 3, 1, "", "best_incoming_arc"], [170, 3, 1, "", "collapse_nodes"], [170, 3, 1, "", "compute_max_subtract_score"], [170, 3, 1, "", "compute_original_indexes"], [170, 3, 1, "", "initialize_edge_scores"], [170, 3, 1, "", "original_best_arc"], [170, 3, 1, "", "parse"], [170, 3, 1, "", "train"], [170, 3, 1, "", "update_edge_scores"]], "nltk.parse.pchart": [[171, 2, 1, "", "BottomUpProbabilisticChartParser"], [171, 2, 1, "", "InsideChartParser"], [171, 2, 1, "", "LongestChartParser"], [171, 2, 1, "", "ProbabilisticBottomUpInitRule"], [171, 2, 1, "", "ProbabilisticBottomUpPredictRule"], [171, 2, 1, "", "ProbabilisticFundamentalRule"], [171, 2, 1, "", "ProbabilisticLeafEdge"], [171, 2, 1, "", "ProbabilisticTreeEdge"], [171, 2, 1, "", "RandomChartParser"], [171, 2, 1, "", "SingleEdgeProbabilisticFundamentalRule"], [171, 2, 1, "", "UnsortedChartParser"], [171, 1, 1, "", "demo"]], "nltk.parse.pchart.BottomUpProbabilisticChartParser": [[171, 3, 1, "", "__init__"], [171, 3, 1, "", "grammar"], [171, 3, 1, "", "parse"], [171, 3, 1, "", "sort_queue"], [171, 3, 1, "", "trace"]], "nltk.parse.pchart.InsideChartParser": [[171, 3, 1, "", "sort_queue"]], "nltk.parse.pchart.LongestChartParser": [[171, 3, 1, "", "sort_queue"]], "nltk.parse.pchart.ProbabilisticBottomUpInitRule": [[171, 4, 1, "", "NUM_EDGES"], [171, 3, 1, "", "apply"]], "nltk.parse.pchart.ProbabilisticBottomUpPredictRule": [[171, 4, 1, "", "NUM_EDGES"], [171, 3, 1, "", "apply"]], "nltk.parse.pchart.ProbabilisticFundamentalRule": [[171, 4, 1, "", "NUM_EDGES"], [171, 3, 1, "", "apply"]], "nltk.parse.pchart.ProbabilisticLeafEdge": [[171, 3, 1, "", "prob"]], "nltk.parse.pchart.ProbabilisticTreeEdge": [[171, 3, 1, "", "__init__"], [171, 3, 1, "", "from_production"], [171, 3, 1, "", "prob"]], "nltk.parse.pchart.RandomChartParser": [[171, 3, 1, "", "sort_queue"]], "nltk.parse.pchart.SingleEdgeProbabilisticFundamentalRule": [[171, 4, 1, "", "NUM_EDGES"], [171, 3, 1, "", "apply"]], "nltk.parse.pchart.UnsortedChartParser": [[171, 3, 1, "", "sort_queue"]], "nltk.parse.projectivedependencyparser": [[172, 2, 1, "", "ChartCell"], [172, 2, 1, "", "DependencySpan"], [172, 2, 1, "", "ProbabilisticProjectiveDependencyParser"], [172, 2, 1, "", "ProjectiveDependencyParser"], [172, 1, 1, "", "arity_parse_demo"], [172, 1, 1, "", "demo"], [172, 1, 1, "", "projective_prob_parse_demo"], [172, 1, 1, "", "projective_rule_parse_demo"]], "nltk.parse.projectivedependencyparser.ChartCell": [[172, 3, 1, "", "__init__"], [172, 3, 1, "", "add"]], "nltk.parse.projectivedependencyparser.DependencySpan": [[172, 3, 1, "", "__init__"], [172, 3, 1, "", "head_index"]], "nltk.parse.projectivedependencyparser.ProbabilisticProjectiveDependencyParser": [[172, 3, 1, "", "__init__"], [172, 3, 1, "", "compute_prob"], [172, 3, 1, "", "concatenate"], [172, 3, 1, "", "parse"], [172, 3, 1, "", "train"]], "nltk.parse.projectivedependencyparser.ProjectiveDependencyParser": [[172, 3, 1, "", "__init__"], [172, 3, 1, "", "concatenate"], [172, 3, 1, "", "parse"]], "nltk.parse.recursivedescent": [[173, 2, 1, "", "RecursiveDescentParser"], [173, 2, 1, "", "SteppingRecursiveDescentParser"], [173, 1, 1, "", "demo"]], "nltk.parse.recursivedescent.RecursiveDescentParser": [[173, 3, 1, "", "__init__"], [173, 3, 1, "", "grammar"], [173, 3, 1, "", "parse"], [173, 3, 1, "", "trace"]], "nltk.parse.recursivedescent.SteppingRecursiveDescentParser": [[173, 3, 1, "", "__init__"], [173, 3, 1, "", "backtrack"], [173, 3, 1, "", "currently_complete"], [173, 3, 1, "", "expand"], [173, 3, 1, "", "expandable_productions"], [173, 3, 1, "", "frontier"], [173, 3, 1, "", "initialize"], [173, 3, 1, "", "match"], [173, 3, 1, "", "parse"], [173, 3, 1, "", "parses"], [173, 3, 1, "", "remaining_text"], [173, 3, 1, "", "set_grammar"], [173, 3, 1, "", "step"], [173, 3, 1, "", "tree"], [173, 3, 1, "", "untried_expandable_productions"], [173, 3, 1, "", "untried_match"]], "nltk.parse.shiftreduce": [[174, 2, 1, "", "ShiftReduceParser"], [174, 2, 1, "", "SteppingShiftReduceParser"], [174, 1, 1, "", "demo"]], "nltk.parse.shiftreduce.ShiftReduceParser": [[174, 3, 1, "", "__init__"], [174, 3, 1, "", "grammar"], [174, 3, 1, "", "parse"], [174, 3, 1, "", "trace"]], "nltk.parse.shiftreduce.SteppingShiftReduceParser": [[174, 3, 1, "", "__init__"], [174, 3, 1, "", "initialize"], [174, 3, 1, "", "parse"], [174, 3, 1, "", "parses"], [174, 3, 1, "", "reduce"], [174, 3, 1, "", "reducible_productions"], [174, 3, 1, "", "remaining_text"], [174, 3, 1, "", "set_grammar"], [174, 3, 1, "", "shift"], [174, 3, 1, "", "stack"], [174, 3, 1, "", "step"], [174, 3, 1, "", "undo"]], "nltk.parse.stanford": [[175, 2, 1, "", "GenericStanfordParser"], [175, 2, 1, "", "StanfordDependencyParser"], [175, 2, 1, "", "StanfordNeuralDependencyParser"], [175, 2, 1, "", "StanfordParser"]], "nltk.parse.stanford.GenericStanfordParser": [[175, 3, 1, "", "__init__"], [175, 3, 1, "", "parse_sents"], [175, 3, 1, "", "raw_parse"], [175, 3, 1, "", "raw_parse_sents"], [175, 3, 1, "", "tagged_parse"], [175, 3, 1, "", "tagged_parse_sents"]], "nltk.parse.stanford.StanfordDependencyParser": [[175, 3, 1, "", "__init__"]], "nltk.parse.stanford.StanfordNeuralDependencyParser": [[175, 3, 1, "", "__init__"], [175, 3, 1, "", "tagged_parse_sents"]], "nltk.parse.stanford.StanfordParser": [[175, 3, 1, "", "__init__"]], "nltk.parse.transitionparser": [[176, 2, 1, "", "Configuration"], [176, 2, 1, "", "Transition"], [176, 2, 1, "", "TransitionParser"], [176, 1, 1, "", "demo"]], "nltk.parse.transitionparser.Configuration": [[176, 3, 1, "", "__init__"], [176, 3, 1, "", "extract_features"]], "nltk.parse.transitionparser.Transition": [[176, 4, 1, "", "LEFT_ARC"], [176, 4, 1, "", "REDUCE"], [176, 4, 1, "", "RIGHT_ARC"], [176, 4, 1, "", "SHIFT"], [176, 3, 1, "", "__init__"], [176, 3, 1, "", "left_arc"], [176, 3, 1, "", "reduce"], [176, 3, 1, "", "right_arc"], [176, 3, 1, "", "shift"]], "nltk.parse.transitionparser.TransitionParser": [[176, 4, 1, "", "ARC_EAGER"], [176, 4, 1, "", "ARC_STANDARD"], [176, 3, 1, "", "__init__"], [176, 3, 1, "", "parse"], [176, 3, 1, "", "train"]], "nltk.parse.util": [[177, 2, 1, "", "TestGrammar"], [177, 1, 1, "", "extract_test_sentences"], [177, 1, 1, "", "load_parser"], [177, 1, 1, "", "taggedsent_to_conll"], [177, 1, 1, "", "taggedsents_to_conll"]], "nltk.parse.util.TestGrammar": [[177, 3, 1, "", "__init__"], [177, 3, 1, "", "run"]], "nltk.parse.viterbi": [[178, 2, 1, "", "ViterbiParser"], [178, 1, 1, "", "demo"]], "nltk.parse.viterbi.ViterbiParser": [[178, 3, 1, "", "__init__"], [178, 3, 1, "", "grammar"], [178, 3, 1, "", "parse"], [178, 3, 1, "", "trace"]], "nltk.probability": [[179, 2, 1, "", "ConditionalFreqDist"], [179, 2, 1, "", "ConditionalProbDist"], [179, 2, 1, "", "ConditionalProbDistI"], [179, 2, 1, "", "CrossValidationProbDist"], [179, 2, 1, "", "DictionaryConditionalProbDist"], [179, 2, 1, "", "DictionaryProbDist"], [179, 2, 1, "", "ELEProbDist"], [179, 2, 1, "", "FreqDist"], [179, 2, 1, "", "HeldoutProbDist"], [179, 2, 1, "", "ImmutableProbabilisticMixIn"], [179, 2, 1, "", "KneserNeyProbDist"], [179, 2, 1, "", "LaplaceProbDist"], [179, 2, 1, "", "LidstoneProbDist"], [179, 2, 1, "", "MLEProbDist"], [179, 2, 1, "", "MutableProbDist"], [179, 2, 1, "", "ProbDistI"], [179, 2, 1, "", "ProbabilisticMixIn"], [179, 2, 1, "", "SimpleGoodTuringProbDist"], [179, 2, 1, "", "UniformProbDist"], [179, 2, 1, "", "WittenBellProbDist"], [179, 1, 1, "", "add_logs"], [179, 1, 1, "", "entropy"], [179, 1, 1, "", "log_likelihood"], [179, 1, 1, "", "sum_logs"]], "nltk.probability.ConditionalFreqDist": [[179, 3, 1, "", "N"], [179, 3, 1, "", "__init__"], [179, 3, 1, "", "conditions"], [179, 3, 1, "", "copy"], [179, 3, 1, "", "deepcopy"], [179, 3, 1, "", "plot"], [179, 3, 1, "", "tabulate"]], "nltk.probability.ConditionalProbDist": [[179, 3, 1, "", "__init__"]], "nltk.probability.ConditionalProbDistI": [[179, 3, 1, "", "__init__"], [179, 3, 1, "", "conditions"]], "nltk.probability.CrossValidationProbDist": [[179, 4, 1, "", "SUM_TO_ONE"], [179, 3, 1, "", "__init__"], [179, 3, 1, "", "discount"], [179, 3, 1, "", "freqdists"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "samples"]], "nltk.probability.DictionaryConditionalProbDist": [[179, 3, 1, "", "__init__"]], "nltk.probability.DictionaryProbDist": [[179, 3, 1, "", "__init__"], [179, 3, 1, "", "logprob"], [179, 3, 1, "", "max"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "samples"]], "nltk.probability.ELEProbDist": [[179, 3, 1, "", "__init__"]], "nltk.probability.FreqDist": [[179, 3, 1, "", "B"], [179, 3, 1, "", "N"], [179, 3, 1, "", "Nr"], [179, 3, 1, "", "__init__"], [179, 3, 1, "", "copy"], [179, 3, 1, "", "freq"], [179, 3, 1, "", "hapaxes"], [179, 3, 1, "", "max"], [179, 3, 1, "", "pformat"], [179, 3, 1, "", "plot"], [179, 3, 1, "", "pprint"], [179, 3, 1, "", "r_Nr"], [179, 3, 1, "", "setdefault"], [179, 3, 1, "", "tabulate"], [179, 3, 1, "", "update"]], "nltk.probability.HeldoutProbDist": [[179, 4, 1, "", "SUM_TO_ONE"], [179, 3, 1, "", "__init__"], [179, 3, 1, "", "base_fdist"], [179, 3, 1, "", "discount"], [179, 3, 1, "", "heldout_fdist"], [179, 3, 1, "", "max"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "samples"]], "nltk.probability.ImmutableProbabilisticMixIn": [[179, 3, 1, "", "set_logprob"], [179, 3, 1, "", "set_prob"]], "nltk.probability.KneserNeyProbDist": [[179, 3, 1, "", "__init__"], [179, 3, 1, "", "discount"], [179, 3, 1, "", "max"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "samples"], [179, 3, 1, "", "set_discount"]], "nltk.probability.LaplaceProbDist": [[179, 3, 1, "", "__init__"]], "nltk.probability.LidstoneProbDist": [[179, 4, 1, "", "SUM_TO_ONE"], [179, 3, 1, "", "__init__"], [179, 3, 1, "", "discount"], [179, 3, 1, "", "freqdist"], [179, 3, 1, "", "max"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "samples"]], "nltk.probability.MLEProbDist": [[179, 3, 1, "", "__init__"], [179, 3, 1, "", "freqdist"], [179, 3, 1, "", "max"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "samples"]], "nltk.probability.MutableProbDist": [[179, 3, 1, "", "__init__"], [179, 3, 1, "", "logprob"], [179, 3, 1, "", "max"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "samples"], [179, 3, 1, "", "update"]], "nltk.probability.ProbDistI": [[179, 4, 1, "", "SUM_TO_ONE"], [179, 3, 1, "", "__init__"], [179, 3, 1, "", "discount"], [179, 3, 1, "", "generate"], [179, 3, 1, "", "logprob"], [179, 3, 1, "", "max"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "samples"]], "nltk.probability.ProbabilisticMixIn": [[179, 3, 1, "", "__init__"], [179, 3, 1, "", "logprob"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "set_logprob"], [179, 3, 1, "", "set_prob"]], "nltk.probability.SimpleGoodTuringProbDist": [[179, 4, 1, "", "SUM_TO_ONE"], [179, 3, 1, "", "__init__"], [179, 3, 1, "", "check"], [179, 3, 1, "", "discount"], [179, 3, 1, "", "find_best_fit"], [179, 3, 1, "", "freqdist"], [179, 3, 1, "", "max"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "samples"], [179, 3, 1, "", "smoothedNr"]], "nltk.probability.UniformProbDist": [[179, 3, 1, "", "__init__"], [179, 3, 1, "", "max"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "samples"]], "nltk.probability.WittenBellProbDist": [[179, 3, 1, "", "__init__"], [179, 3, 1, "", "discount"], [179, 3, 1, "", "freqdist"], [179, 3, 1, "", "max"], [179, 3, 1, "", "prob"], [179, 3, 1, "", "samples"]], "nltk.sem": [[181, 0, 0, "-", "boxer"], [182, 0, 0, "-", "chat80"], [183, 0, 0, "-", "cooper_storage"], [184, 0, 0, "-", "drt"], [185, 0, 0, "-", "drt_glue_demo"], [186, 0, 0, "-", "evaluate"], [187, 0, 0, "-", "glue"], [188, 0, 0, "-", "hole"], [189, 0, 0, "-", "lfg"], [190, 0, 0, "-", "linearlogic"], [191, 0, 0, "-", "logic"], [192, 0, 0, "-", "relextract"], [193, 0, 0, "-", "skolemize"], [194, 0, 0, "-", "util"]], "nltk.sem.boxer": [[181, 2, 1, "", "AbstractBoxerDrs"], [181, 2, 1, "", "Boxer"], [181, 2, 1, "", "BoxerCard"], [181, 2, 1, "", "BoxerDrs"], [181, 2, 1, "", "BoxerDrsParser"], [181, 2, 1, "", "BoxerEq"], [181, 2, 1, "", "BoxerIndexed"], [181, 2, 1, "", "BoxerNamed"], [181, 2, 1, "", "BoxerNot"], [181, 2, 1, "", "BoxerOr"], [181, 2, 1, "", "BoxerOutputDrsParser"], [181, 2, 1, "", "BoxerPred"], [181, 2, 1, "", "BoxerProp"], [181, 2, 1, "", "BoxerRel"], [181, 2, 1, "", "BoxerWhq"], [181, 2, 1, "", "NltkDrtBoxerDrsInterpreter"], [181, 2, 1, "", "PassthroughBoxerDrsInterpreter"], [181, 6, 1, "", "UnparseableInputException"]], "nltk.sem.boxer.AbstractBoxerDrs": [[181, 3, 1, "", "atoms"], [181, 3, 1, "", "clean"], [181, 3, 1, "", "renumber_sentences"], [181, 3, 1, "", "variable_types"], [181, 3, 1, "", "variables"]], "nltk.sem.boxer.Boxer": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "interpret"], [181, 3, 1, "", "interpret_multi"], [181, 3, 1, "", "interpret_multi_sents"], [181, 3, 1, "", "interpret_sents"], [181, 3, 1, "", "set_bin_dir"]], "nltk.sem.boxer.BoxerCard": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "renumber_sentences"]], "nltk.sem.boxer.BoxerDrs": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "atoms"], [181, 3, 1, "", "clean"], [181, 3, 1, "", "renumber_sentences"]], "nltk.sem.boxer.BoxerDrsParser": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "attempt_adjuncts"], [181, 3, 1, "", "get_all_symbols"], [181, 3, 1, "", "get_next_token_variable"], [181, 3, 1, "", "handle"], [181, 3, 1, "", "nullableIntToken"]], "nltk.sem.boxer.BoxerEq": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "atoms"], [181, 3, 1, "", "renumber_sentences"]], "nltk.sem.boxer.BoxerIndexed": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "atoms"]], "nltk.sem.boxer.BoxerNamed": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "change_var"], [181, 3, 1, "", "clean"], [181, 3, 1, "", "renumber_sentences"]], "nltk.sem.boxer.BoxerNot": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "atoms"], [181, 3, 1, "", "clean"], [181, 3, 1, "", "renumber_sentences"]], "nltk.sem.boxer.BoxerOr": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "atoms"], [181, 3, 1, "", "clean"], [181, 3, 1, "", "renumber_sentences"]], "nltk.sem.boxer.BoxerOutputDrsParser": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "attempt_adjuncts"], [181, 3, 1, "", "get_all_symbols"], [181, 3, 1, "", "handle"], [181, 3, 1, "", "handle_condition"], [181, 3, 1, "", "handle_drs"], [181, 3, 1, "", "parse"], [181, 3, 1, "", "parse_condition"], [181, 3, 1, "", "parse_drs"], [181, 3, 1, "", "parse_index"], [181, 3, 1, "", "parse_variable"]], "nltk.sem.boxer.BoxerPred": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "change_var"], [181, 3, 1, "", "clean"], [181, 3, 1, "", "renumber_sentences"]], "nltk.sem.boxer.BoxerProp": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "atoms"], [181, 3, 1, "", "clean"], [181, 3, 1, "", "referenced_labels"], [181, 3, 1, "", "renumber_sentences"]], "nltk.sem.boxer.BoxerRel": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "clean"], [181, 3, 1, "", "renumber_sentences"]], "nltk.sem.boxer.BoxerWhq": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "atoms"], [181, 3, 1, "", "clean"], [181, 3, 1, "", "renumber_sentences"]], "nltk.sem.boxer.NltkDrtBoxerDrsInterpreter": [[181, 3, 1, "", "__init__"], [181, 3, 1, "", "interpret"]], "nltk.sem.boxer.PassthroughBoxerDrsInterpreter": [[181, 3, 1, "", "interpret"]], "nltk.sem.chat80": [[182, 2, 1, "", "Concept"], [182, 1, 1, "", "binary_concept"], [182, 1, 1, "", "cities2table"], [182, 1, 1, "", "clause2concepts"], [182, 1, 1, "", "concepts"], [182, 1, 1, "", "label_indivs"], [182, 1, 1, "", "main"], [182, 1, 1, "", "make_lex"], [182, 1, 1, "", "make_valuation"], [182, 1, 1, "", "process_bundle"], [182, 1, 1, "", "sql_demo"], [182, 1, 1, "", "sql_query"], [182, 1, 1, "", "unary_concept"], [182, 1, 1, "", "val_dump"], [182, 1, 1, "", "val_load"]], "nltk.sem.chat80.Concept": [[182, 3, 1, "", "__init__"], [182, 3, 1, "", "augment"], [182, 3, 1, "", "close"]], "nltk.sem.cooper_storage": [[183, 2, 1, "", "CooperStore"], [183, 1, 1, "", "demo"], [183, 1, 1, "", "parse_with_bindops"]], "nltk.sem.cooper_storage.CooperStore": [[183, 3, 1, "", "__init__"], [183, 3, 1, "", "s_retrieve"]], "nltk.sem.drt": [[184, 6, 1, "", "AnaphoraResolutionException"], [184, 2, 1, "", "DRS"], [184, 2, 1, "", "DrsDrawer"], [184, 2, 1, "", "DrtAbstractVariableExpression"], [184, 2, 1, "", "DrtApplicationExpression"], [184, 2, 1, "", "DrtBinaryExpression"], [184, 2, 1, "", "DrtBooleanExpression"], [184, 2, 1, "", "DrtConcatenation"], [184, 2, 1, "", "DrtConstantExpression"], [184, 2, 1, "", "DrtEqualityExpression"], [184, 2, 1, "", "DrtEventVariableExpression"], [184, 2, 1, "", "DrtExpression"], [184, 2, 1, "", "DrtFunctionVariableExpression"], [184, 2, 1, "", "DrtIndividualVariableExpression"], [184, 2, 1, "", "DrtLambdaExpression"], [184, 2, 1, "", "DrtNegatedExpression"], [184, 2, 1, "", "DrtOrExpression"], [184, 2, 1, "", "DrtParser"], [184, 2, 1, "", "DrtProposition"], [184, 2, 1, "", "DrtTokens"], [184, 1, 1, "", "DrtVariableExpression"], [184, 2, 1, "", "PossibleAntecedents"], [184, 1, 1, "", "demo"], [184, 1, 1, "", "resolve_anaphora"], [184, 1, 1, "", "test_draw"]], "nltk.sem.drt.DRS": [[184, 3, 1, "", "__init__"], [184, 3, 1, "", "eliminate_equality"], [184, 3, 1, "", "fol"], [184, 3, 1, "", "free"], [184, 3, 1, "", "get_refs"], [184, 3, 1, "", "replace"], [184, 3, 1, "", "visit"], [184, 3, 1, "", "visit_structured"]], "nltk.sem.drt.DrsDrawer": [[184, 4, 1, "", "BUFFER"], [184, 4, 1, "", "OUTERSPACE"], [184, 4, 1, "", "TOPSPACE"], [184, 3, 1, "", "__init__"], [184, 3, 1, "", "draw"]], "nltk.sem.drt.DrtAbstractVariableExpression": [[184, 3, 1, "", "eliminate_equality"], [184, 3, 1, "", "fol"], [184, 3, 1, "", "get_refs"]], "nltk.sem.drt.DrtApplicationExpression": [[184, 3, 1, "", "fol"], [184, 3, 1, "", "get_refs"]], "nltk.sem.drt.DrtBinaryExpression": [[184, 3, 1, "", "get_refs"]], "nltk.sem.drt.DrtConcatenation": [[184, 3, 1, "", "__init__"], [184, 3, 1, "", "eliminate_equality"], [184, 3, 1, "", "fol"], [184, 3, 1, "", "getOp"], [184, 3, 1, "", "get_refs"], [184, 3, 1, "", "replace"], [184, 3, 1, "", "simplify"], [184, 3, 1, "", "visit"]], "nltk.sem.drt.DrtEqualityExpression": [[184, 3, 1, "", "fol"]], "nltk.sem.drt.DrtExpression": [[184, 3, 1, "", "applyto"], [184, 3, 1, "", "draw"], [184, 3, 1, "", "eliminate_equality"], [184, 3, 1, "", "equiv"], [184, 3, 1, "", "fromstring"], [184, 3, 1, "", "get_refs"], [184, 3, 1, "", "is_pronoun_function"], [184, 3, 1, "", "make_EqualityExpression"], [184, 3, 1, "", "make_VariableExpression"], [184, 3, 1, "", "pretty_format"], [184, 3, 1, "", "pretty_print"], [184, 3, 1, "", "resolve_anaphora"], [184, 5, 1, "", "type"], [184, 3, 1, "", "typecheck"]], "nltk.sem.drt.DrtLambdaExpression": [[184, 3, 1, "", "alpha_convert"], [184, 3, 1, "", "fol"], [184, 3, 1, "", "get_refs"]], "nltk.sem.drt.DrtNegatedExpression": [[184, 3, 1, "", "fol"], [184, 3, 1, "", "get_refs"]], "nltk.sem.drt.DrtOrExpression": [[184, 3, 1, "", "fol"]], "nltk.sem.drt.DrtParser": [[184, 3, 1, "", "__init__"], [184, 3, 1, "", "get_BooleanExpression_factory"], [184, 3, 1, "", "get_all_symbols"], [184, 3, 1, "", "handle"], [184, 3, 1, "", "handle_DRS"], [184, 3, 1, "", "handle_conds"], [184, 3, 1, "", "handle_prop"], [184, 3, 1, "", "handle_refs"], [184, 3, 1, "", "isvariable"], [184, 3, 1, "", "make_ApplicationExpression"], [184, 3, 1, "", "make_BooleanExpression"], [184, 3, 1, "", "make_EqualityExpression"], [184, 3, 1, "", "make_LambdaExpression"], [184, 3, 1, "", "make_NegatedExpression"], [184, 3, 1, "", "make_VariableExpression"]], "nltk.sem.drt.DrtProposition": [[184, 3, 1, "", "__init__"], [184, 3, 1, "", "eliminate_equality"], [184, 3, 1, "", "fol"], [184, 3, 1, "", "get_refs"], [184, 3, 1, "", "replace"], [184, 3, 1, "", "visit"], [184, 3, 1, "", "visit_structured"]], "nltk.sem.drt.DrtTokens": [[184, 4, 1, "", "CLOSE_BRACKET"], [184, 4, 1, "", "COLON"], [184, 4, 1, "", "DRS"], [184, 4, 1, "", "DRS_CONC"], [184, 4, 1, "", "OPEN_BRACKET"], [184, 4, 1, "", "PRONOUN"], [184, 4, 1, "", "PUNCT"], [184, 4, 1, "", "SYMBOLS"], [184, 4, 1, "", "TOKENS"]], "nltk.sem.drt.PossibleAntecedents": [[184, 3, 1, "", "free"], [184, 3, 1, "", "replace"]], "nltk.sem.drt_glue_demo": [[185, 2, 1, "", "DrsWidget"], [185, 2, 1, "", "DrtGlueDemo"], [185, 1, 1, "", "demo"]], "nltk.sem.drt_glue_demo.DrsWidget": [[185, 3, 1, "", "__init__"], [185, 3, 1, "", "clear"], [185, 3, 1, "", "draw"]], "nltk.sem.drt_glue_demo.DrtGlueDemo": [[185, 3, 1, "", "__init__"], [185, 3, 1, "", "about"], [185, 3, 1, "", "destroy"], [185, 3, 1, "", "mainloop"], [185, 3, 1, "", "next"], [185, 3, 1, "", "postscript"], [185, 3, 1, "", "prev"], [185, 3, 1, "", "resize"]], "nltk.sem.evaluate": [[186, 2, 1, "", "Assignment"], [186, 6, 1, "", "Error"], [186, 2, 1, "", "Model"], [186, 6, 1, "", "Undefined"], [186, 2, 1, "", "Valuation"], [186, 1, 1, "", "arity"], [186, 1, 1, "", "demo"], [186, 1, 1, "", "foldemo"], [186, 1, 1, "", "folmodel"], [186, 1, 1, "", "is_rel"], [186, 1, 1, "", "propdemo"], [186, 1, 1, "", "read_valuation"], [186, 1, 1, "", "satdemo"], [186, 1, 1, "", "set2rel"], [186, 1, 1, "", "trace"]], "nltk.sem.evaluate.Assignment": [[186, 3, 1, "", "__init__"], [186, 3, 1, "", "add"], [186, 3, 1, "", "copy"], [186, 3, 1, "", "purge"]], "nltk.sem.evaluate.Model": [[186, 3, 1, "", "__init__"], [186, 3, 1, "", "evaluate"], [186, 3, 1, "", "i"], [186, 3, 1, "", "satisfiers"], [186, 3, 1, "", "satisfy"]], "nltk.sem.evaluate.Valuation": [[186, 3, 1, "", "__init__"], [186, 5, 1, "", "domain"], [186, 3, 1, "", "fromstring"], [186, 5, 1, "", "symbols"]], "nltk.sem.glue": [[187, 2, 1, "", "DrtGlue"], [187, 2, 1, "", "DrtGlueDict"], [187, 2, 1, "", "DrtGlueFormula"], [187, 2, 1, "", "Glue"], [187, 2, 1, "", "GlueDict"], [187, 2, 1, "", "GlueFormula"], [187, 1, 1, "", "demo"]], "nltk.sem.glue.DrtGlue": [[187, 3, 1, "", "__init__"], [187, 3, 1, "", "get_glue_dict"]], "nltk.sem.glue.DrtGlueDict": [[187, 3, 1, "", "get_GlueFormula_factory"]], "nltk.sem.glue.DrtGlueFormula": [[187, 3, 1, "", "__init__"], [187, 3, 1, "", "make_LambdaExpression"], [187, 3, 1, "", "make_VariableExpression"]], "nltk.sem.glue.Glue": [[187, 3, 1, "", "__init__"], [187, 3, 1, "", "dep_parse"], [187, 3, 1, "", "depgraph_to_glue"], [187, 3, 1, "", "get_glue_dict"], [187, 3, 1, "", "get_pos_tagger"], [187, 3, 1, "", "get_readings"], [187, 3, 1, "", "gfl_to_compiled"], [187, 3, 1, "", "parse_to_compiled"], [187, 3, 1, "", "parse_to_meaning"], [187, 3, 1, "", "train_depparser"]], "nltk.sem.glue.GlueDict": [[187, 3, 1, "", "__init__"], [187, 3, 1, "", "add_missing_dependencies"], [187, 3, 1, "", "find_label_name"], [187, 3, 1, "", "get_GlueFormula_factory"], [187, 3, 1, "", "get_glueformulas_from_semtype_entry"], [187, 3, 1, "", "get_label"], [187, 3, 1, "", "get_meaning_formula"], [187, 3, 1, "", "get_semtypes"], [187, 3, 1, "", "initialize_labels"], [187, 3, 1, "", "lookup"], [187, 3, 1, "", "lookup_unique"], [187, 3, 1, "", "read_file"], [187, 3, 1, "", "to_glueformula_list"]], "nltk.sem.glue.GlueFormula": [[187, 3, 1, "", "__init__"], [187, 3, 1, "", "applyto"], [187, 3, 1, "", "compile"], [187, 3, 1, "", "lambda_abstract"], [187, 3, 1, "", "make_LambdaExpression"], [187, 3, 1, "", "make_VariableExpression"], [187, 3, 1, "", "simplify"]], "nltk.sem.hole": [[188, 2, 1, "", "Constants"], [188, 2, 1, "", "Constraint"], [188, 2, 1, "", "HoleSemantics"], [188, 1, 1, "", "hole_readings"]], "nltk.sem.hole.Constants": [[188, 4, 1, "", "ALL"], [188, 4, 1, "", "AND"], [188, 4, 1, "", "EXISTS"], [188, 4, 1, "", "HOLE"], [188, 4, 1, "", "IFF"], [188, 4, 1, "", "IMP"], [188, 4, 1, "", "LABEL"], [188, 4, 1, "", "LEQ"], [188, 4, 1, "", "MAP"], [188, 4, 1, "", "NOT"], [188, 4, 1, "", "OR"], [188, 4, 1, "", "PRED"]], "nltk.sem.hole.Constraint": [[188, 3, 1, "", "__init__"]], "nltk.sem.hole.HoleSemantics": [[188, 3, 1, "", "__init__"], [188, 3, 1, "", "formula_tree"], [188, 3, 1, "", "is_node"], [188, 3, 1, "", "pluggings"]], "nltk.sem.lfg": [[189, 2, 1, "", "FStructure"], [189, 1, 1, "", "demo_read_depgraph"]], "nltk.sem.lfg.FStructure": [[189, 3, 1, "", "pretty_format"], [189, 3, 1, "", "read_depgraph"], [189, 3, 1, "", "safeappend"], [189, 3, 1, "", "to_depgraph"], [189, 3, 1, "", "to_glueformula_list"]], "nltk.sem.linearlogic": [[190, 2, 1, "", "ApplicationExpression"], [190, 2, 1, "", "AtomicExpression"], [190, 2, 1, "", "BindingDict"], [190, 2, 1, "", "ConstantExpression"], [190, 2, 1, "", "Expression"], [190, 2, 1, "", "ImpExpression"], [190, 6, 1, "", "LinearLogicApplicationException"], [190, 2, 1, "", "LinearLogicParser"], [190, 2, 1, "", "Tokens"], [190, 6, 1, "", "UnificationException"], [190, 6, 1, "", "VariableBindingException"], [190, 2, 1, "", "VariableExpression"], [190, 1, 1, "", "demo"]], "nltk.sem.linearlogic.ApplicationExpression": [[190, 3, 1, "", "__init__"], [190, 3, 1, "", "simplify"]], "nltk.sem.linearlogic.AtomicExpression": [[190, 3, 1, "", "__init__"], [190, 3, 1, "", "compile_neg"], [190, 3, 1, "", "compile_pos"], [190, 3, 1, "", "initialize_labels"], [190, 3, 1, "", "simplify"]], "nltk.sem.linearlogic.BindingDict": [[190, 3, 1, "", "__init__"]], "nltk.sem.linearlogic.ConstantExpression": [[190, 3, 1, "", "unify"]], "nltk.sem.linearlogic.Expression": [[190, 3, 1, "", "applyto"], [190, 3, 1, "", "fromstring"]], "nltk.sem.linearlogic.ImpExpression": [[190, 3, 1, "", "__init__"], [190, 3, 1, "", "compile_neg"], [190, 3, 1, "", "compile_pos"], [190, 3, 1, "", "initialize_labels"], [190, 3, 1, "", "simplify"], [190, 3, 1, "", "unify"]], "nltk.sem.linearlogic.LinearLogicParser": [[190, 3, 1, "", "__init__"], [190, 3, 1, "", "attempt_ApplicationExpression"], [190, 3, 1, "", "get_BooleanExpression_factory"], [190, 3, 1, "", "get_all_symbols"], [190, 3, 1, "", "handle"], [190, 3, 1, "", "make_BooleanExpression"], [190, 3, 1, "", "make_VariableExpression"]], "nltk.sem.linearlogic.Tokens": [[190, 4, 1, "", "CLOSE"], [190, 4, 1, "", "IMP"], [190, 4, 1, "", "OPEN"], [190, 4, 1, "", "PUNCT"], [190, 4, 1, "", "TOKENS"]], "nltk.sem.linearlogic.UnificationException": [[190, 3, 1, "", "__init__"]], "nltk.sem.linearlogic.VariableExpression": [[190, 3, 1, "", "unify"]], "nltk.sem.logic": [[191, 2, 1, "", "AbstractVariableExpression"], [191, 2, 1, "", "AllExpression"], [191, 2, 1, "", "AndExpression"], [191, 2, 1, "", "AnyType"], [191, 2, 1, "", "ApplicationExpression"], [191, 2, 1, "", "BasicType"], [191, 2, 1, "", "BinaryExpression"], [191, 2, 1, "", "BooleanExpression"], [191, 2, 1, "", "ComplexType"], [191, 2, 1, "", "ConstantExpression"], [191, 2, 1, "", "EntityType"], [191, 2, 1, "", "EqualityExpression"], [191, 2, 1, "", "EventType"], [191, 2, 1, "", "EventVariableExpression"], [191, 2, 1, "", "ExistsExpression"], [191, 6, 1, "", "ExpectedMoreTokensException"], [191, 2, 1, "", "Expression"], [191, 2, 1, "", "FunctionVariableExpression"], [191, 2, 1, "", "IffExpression"], [191, 6, 1, "", "IllegalTypeException"], [191, 2, 1, "", "ImpExpression"], [191, 6, 1, "", "InconsistentTypeHierarchyException"], [191, 2, 1, "", "IndividualVariableExpression"], [191, 2, 1, "", "IotaExpression"], [191, 2, 1, "", "LambdaExpression"], [191, 2, 1, "", "LogicParser"], [191, 6, 1, "", "LogicalExpressionException"], [191, 2, 1, "", "NegatedExpression"], [191, 2, 1, "", "OrExpression"], [191, 2, 1, "", "QuantifiedExpression"], [191, 2, 1, "", "SubstituteBindingsI"], [191, 2, 1, "", "Tokens"], [191, 2, 1, "", "TruthValueType"], [191, 2, 1, "", "Type"], [191, 6, 1, "", "TypeException"], [191, 6, 1, "", "TypeResolutionException"], [191, 6, 1, "", "UnexpectedTokenException"], [191, 2, 1, "", "Variable"], [191, 2, 1, "", "VariableBinderExpression"], [191, 1, 1, "", "VariableExpression"], [191, 1, 1, "", "binding_ops"], [191, 1, 1, "", "boolean_ops"], [191, 1, 1, "", "demo"], [191, 1, 1, "", "demoException"], [191, 1, 1, "", "demo_errors"], [191, 1, 1, "", "equality_preds"], [191, 1, 1, "", "is_eventvar"], [191, 1, 1, "", "is_funcvar"], [191, 1, 1, "", "is_indvar"], [191, 1, 1, "", "printtype"], [191, 1, 1, "", "read_logic"], [191, 1, 1, "", "read_type"], [191, 1, 1, "", "skolem_function"], [191, 1, 1, "", "typecheck"], [191, 1, 1, "", "unique_variable"]], "nltk.sem.logic.AbstractVariableExpression": [[191, 3, 1, "", "__init__"], [191, 3, 1, "", "findtype"], [191, 3, 1, "", "predicates"], [191, 3, 1, "", "replace"], [191, 3, 1, "", "simplify"]], "nltk.sem.logic.AllExpression": [[191, 3, 1, "", "getQuantifier"]], "nltk.sem.logic.AndExpression": [[191, 3, 1, "", "getOp"]], "nltk.sem.logic.AnyType": [[191, 3, 1, "", "__init__"], [191, 5, 1, "", "first"], [191, 3, 1, "", "matches"], [191, 3, 1, "", "resolve"], [191, 5, 1, "", "second"], [191, 3, 1, "", "str"]], "nltk.sem.logic.ApplicationExpression": [[191, 3, 1, "", "__init__"], [191, 5, 1, "", "args"], [191, 3, 1, "", "constants"], [191, 3, 1, "", "findtype"], [191, 3, 1, "", "is_atom"], [191, 5, 1, "", "pred"], [191, 3, 1, "", "predicates"], [191, 3, 1, "", "simplify"], [191, 5, 1, "", "type"], [191, 3, 1, "", "uncurry"], [191, 3, 1, "", "visit"]], "nltk.sem.logic.BasicType": [[191, 3, 1, "", "matches"], [191, 3, 1, "", "resolve"]], "nltk.sem.logic.BinaryExpression": [[191, 3, 1, "", "__init__"], [191, 3, 1, "", "findtype"], [191, 5, 1, "", "type"], [191, 3, 1, "", "visit"]], "nltk.sem.logic.ComplexType": [[191, 3, 1, "", "__init__"], [191, 3, 1, "", "matches"], [191, 3, 1, "", "resolve"], [191, 3, 1, "", "str"]], "nltk.sem.logic.ConstantExpression": [[191, 3, 1, "", "constants"], [191, 3, 1, "", "free"], [191, 4, 1, "", "type"]], "nltk.sem.logic.EntityType": [[191, 3, 1, "", "str"]], "nltk.sem.logic.EqualityExpression": [[191, 3, 1, "", "getOp"]], "nltk.sem.logic.EventType": [[191, 3, 1, "", "str"]], "nltk.sem.logic.EventVariableExpression": [[191, 4, 1, "", "type"]], "nltk.sem.logic.ExistsExpression": [[191, 3, 1, "", "getQuantifier"]], "nltk.sem.logic.ExpectedMoreTokensException": [[191, 3, 1, "", "__init__"]], "nltk.sem.logic.Expression": [[191, 3, 1, "", "applyto"], [191, 3, 1, "", "constants"], [191, 3, 1, "", "equiv"], [191, 3, 1, "", "findtype"], [191, 3, 1, "", "free"], [191, 3, 1, "", "fromstring"], [191, 3, 1, "", "make_VariableExpression"], [191, 3, 1, "", "negate"], [191, 3, 1, "", "normalize"], [191, 3, 1, "", "predicates"], [191, 3, 1, "", "replace"], [191, 3, 1, "", "simplify"], [191, 3, 1, "", "substitute_bindings"], [191, 3, 1, "", "typecheck"], [191, 3, 1, "", "variables"], [191, 3, 1, "", "visit"], [191, 3, 1, "", "visit_structured"]], "nltk.sem.logic.FunctionVariableExpression": [[191, 3, 1, "", "constants"], [191, 3, 1, "", "free"], [191, 4, 1, "", "type"]], "nltk.sem.logic.IffExpression": [[191, 3, 1, "", "getOp"]], "nltk.sem.logic.IllegalTypeException": [[191, 3, 1, "", "__init__"]], "nltk.sem.logic.ImpExpression": [[191, 3, 1, "", "getOp"]], "nltk.sem.logic.InconsistentTypeHierarchyException": [[191, 3, 1, "", "__init__"]], "nltk.sem.logic.IndividualVariableExpression": [[191, 3, 1, "", "constants"], [191, 3, 1, "", "free"], [191, 5, 1, "", "type"]], "nltk.sem.logic.IotaExpression": [[191, 3, 1, "", "getQuantifier"]], "nltk.sem.logic.LambdaExpression": [[191, 5, 1, "", "type"]], "nltk.sem.logic.LogicParser": [[191, 3, 1, "", "__init__"], [191, 3, 1, "", "assertNextToken"], [191, 3, 1, "", "assertToken"], [191, 3, 1, "", "attempt_ApplicationExpression"], [191, 3, 1, "", "attempt_BooleanExpression"], [191, 3, 1, "", "attempt_EqualityExpression"], [191, 3, 1, "", "attempt_adjuncts"], [191, 3, 1, "", "get_BooleanExpression_factory"], [191, 3, 1, "", "get_QuantifiedExpression_factory"], [191, 3, 1, "", "get_all_symbols"], [191, 3, 1, "", "get_next_token_variable"], [191, 3, 1, "", "handle"], [191, 3, 1, "", "handle_lambda"], [191, 3, 1, "", "handle_negation"], [191, 3, 1, "", "handle_open"], [191, 3, 1, "", "handle_quant"], [191, 3, 1, "", "handle_variable"], [191, 3, 1, "", "has_priority"], [191, 3, 1, "", "inRange"], [191, 3, 1, "", "isvariable"], [191, 3, 1, "", "make_ApplicationExpression"], [191, 3, 1, "", "make_BooleanExpression"], [191, 3, 1, "", "make_EqualityExpression"], [191, 3, 1, "", "make_LambdaExpression"], [191, 3, 1, "", "make_NegatedExpression"], [191, 3, 1, "", "make_QuanifiedExpression"], [191, 3, 1, "", "make_VariableExpression"], [191, 3, 1, "", "parse"], [191, 3, 1, "", "process"], [191, 3, 1, "", "process_next_expression"], [191, 3, 1, "", "process_quoted_token"], [191, 3, 1, "", "token"], [191, 4, 1, "", "type_check"]], "nltk.sem.logic.LogicalExpressionException": [[191, 3, 1, "", "__init__"]], "nltk.sem.logic.NegatedExpression": [[191, 3, 1, "", "__init__"], [191, 3, 1, "", "findtype"], [191, 3, 1, "", "negate"], [191, 5, 1, "", "type"], [191, 3, 1, "", "visit"]], "nltk.sem.logic.OrExpression": [[191, 3, 1, "", "getOp"]], "nltk.sem.logic.QuantifiedExpression": [[191, 5, 1, "", "type"]], "nltk.sem.logic.SubstituteBindingsI": [[191, 3, 1, "", "substitute_bindings"], [191, 3, 1, "", "variables"]], "nltk.sem.logic.Tokens": [[191, 4, 1, "", "ALL"], [191, 4, 1, "", "ALL_LIST"], [191, 4, 1, "", "AND"], [191, 4, 1, "", "AND_LIST"], [191, 4, 1, "", "BINOPS"], [191, 4, 1, "", "CLOSE"], [191, 4, 1, "", "COMMA"], [191, 4, 1, "", "DOT"], [191, 4, 1, "", "EQ"], [191, 4, 1, "", "EQ_LIST"], [191, 4, 1, "", "EXISTS"], [191, 4, 1, "", "EXISTS_LIST"], [191, 4, 1, "", "IFF"], [191, 4, 1, "", "IFF_LIST"], [191, 4, 1, "", "IMP"], [191, 4, 1, "", "IMP_LIST"], [191, 4, 1, "", "IOTA"], [191, 4, 1, "", "IOTA_LIST"], [191, 4, 1, "", "LAMBDA"], [191, 4, 1, "", "LAMBDA_LIST"], [191, 4, 1, "", "NEQ"], [191, 4, 1, "", "NEQ_LIST"], [191, 4, 1, "", "NOT"], [191, 4, 1, "", "NOT_LIST"], [191, 4, 1, "", "OPEN"], [191, 4, 1, "", "OR"], [191, 4, 1, "", "OR_LIST"], [191, 4, 1, "", "PUNCT"], [191, 4, 1, "", "QUANTS"], [191, 4, 1, "", "SYMBOLS"], [191, 4, 1, "", "TOKENS"]], "nltk.sem.logic.TruthValueType": [[191, 3, 1, "", "str"]], "nltk.sem.logic.Type": [[191, 3, 1, "", "fromstring"]], "nltk.sem.logic.TypeException": [[191, 3, 1, "", "__init__"]], "nltk.sem.logic.TypeResolutionException": [[191, 3, 1, "", "__init__"]], "nltk.sem.logic.UnexpectedTokenException": [[191, 3, 1, "", "__init__"]], "nltk.sem.logic.Variable": [[191, 3, 1, "", "__init__"], [191, 3, 1, "", "substitute_bindings"]], "nltk.sem.logic.VariableBinderExpression": [[191, 3, 1, "", "__init__"], [191, 3, 1, "", "alpha_convert"], [191, 3, 1, "", "findtype"], [191, 3, 1, "", "free"], [191, 3, 1, "", "replace"], [191, 3, 1, "", "visit"], [191, 3, 1, "", "visit_structured"]], "nltk.sem.relextract": [[192, 1, 1, "", "class_abbrev"], [192, 1, 1, "", "clause"], [192, 1, 1, "", "conllesp"], [192, 1, 1, "", "conllned"], [192, 1, 1, "", "descape_entity"], [192, 1, 1, "", "extract_rels"], [192, 1, 1, "", "ieer_headlines"], [192, 1, 1, "", "in_demo"], [192, 1, 1, "", "list2sym"], [192, 1, 1, "", "ne_chunked"], [192, 1, 1, "", "roles_demo"], [192, 1, 1, "", "rtuple"], [192, 1, 1, "", "semi_rel2reldict"], [192, 1, 1, "", "tree2semi_rel"]], "nltk.sem.skolemize": [[193, 1, 1, "", "skolemize"], [193, 1, 1, "", "to_cnf"]], "nltk.sem.util": [[194, 1, 1, "", "demo"], [194, 1, 1, "", "demo_legacy_grammar"], [194, 1, 1, "", "demo_model0"], [194, 1, 1, "", "evaluate_sents"], [194, 1, 1, "", "interpret_sents"], [194, 1, 1, "", "parse_sents"], [194, 1, 1, "", "read_sents"], [194, 1, 1, "", "root_semrep"]], "nltk.sentiment": [[196, 0, 0, "-", "sentiment_analyzer"], [197, 0, 0, "-", "util"], [198, 0, 0, "-", "vader"]], "nltk.sentiment.sentiment_analyzer": [[196, 2, 1, "", "SentimentAnalyzer"]], "nltk.sentiment.sentiment_analyzer.SentimentAnalyzer": [[196, 3, 1, "", "__init__"], [196, 3, 1, "", "add_feat_extractor"], [196, 3, 1, "", "all_words"], [196, 3, 1, "", "apply_features"], [196, 3, 1, "", "bigram_collocation_feats"], [196, 3, 1, "", "classify"], [196, 3, 1, "", "evaluate"], [196, 3, 1, "", "extract_features"], [196, 3, 1, "", "save_file"], [196, 3, 1, "", "train"], [196, 3, 1, "", "unigram_word_feats"]], "nltk.sentiment.util": [[197, 1, 1, "", "demo_liu_hu_lexicon"], [197, 1, 1, "", "demo_movie_reviews"], [197, 1, 1, "", "demo_sent_subjectivity"], [197, 1, 1, "", "demo_subjectivity"], [197, 1, 1, "", "demo_tweets"], [197, 1, 1, "", "demo_vader_instance"], [197, 1, 1, "", "demo_vader_tweets"], [197, 1, 1, "", "extract_bigram_feats"], [197, 1, 1, "", "extract_unigram_feats"], [197, 1, 1, "", "json2csv_preprocess"], [197, 1, 1, "", "mark_negation"], [197, 1, 1, "", "output_markdown"], [197, 1, 1, "", "parse_tweets_set"], [197, 1, 1, "", "split_train_test"], [197, 1, 1, "", "timer"]], "nltk.sentiment.vader": [[198, 2, 1, "", "SentiText"], [198, 2, 1, "", "SentimentIntensityAnalyzer"], [198, 2, 1, "", "VaderConstants"]], "nltk.sentiment.vader.SentiText": [[198, 3, 1, "", "__init__"], [198, 3, 1, "", "allcap_differential"]], "nltk.sentiment.vader.SentimentIntensityAnalyzer": [[198, 3, 1, "", "__init__"], [198, 3, 1, "", "make_lex_dict"], [198, 3, 1, "", "polarity_scores"], [198, 3, 1, "", "score_valence"], [198, 3, 1, "", "sentiment_valence"]], "nltk.sentiment.vader.VaderConstants": [[198, 4, 1, "", "BOOSTER_DICT"], [198, 4, 1, "", "B_DECR"], [198, 4, 1, "", "B_INCR"], [198, 4, 1, "", "C_INCR"], [198, 4, 1, "", "NEGATE"], [198, 4, 1, "", "N_SCALAR"], [198, 4, 1, "", "PUNC_LIST"], [198, 4, 1, "", "REGEX_REMOVE_PUNCTUATION"], [198, 4, 1, "", "SPECIAL_CASE_IDIOMS"], [198, 3, 1, "", "__init__"], [198, 3, 1, "", "negated"], [198, 3, 1, "", "normalize"], [198, 3, 1, "", "scalar_inc_dec"]], "nltk.stem": [[200, 0, 0, "-", "api"], [201, 0, 0, "-", "arlstem"], [202, 0, 0, "-", "arlstem2"], [203, 0, 0, "-", "cistem"], [204, 0, 0, "-", "isri"], [205, 0, 0, "-", "lancaster"], [206, 0, 0, "-", "porter"], [207, 0, 0, "-", "regexp"], [208, 0, 0, "-", "rslp"], [209, 0, 0, "-", "snowball"], [210, 0, 0, "-", "util"], [211, 0, 0, "-", "wordnet"]], "nltk.stem.api": [[200, 2, 1, "", "StemmerI"]], "nltk.stem.api.StemmerI": [[200, 3, 1, "", "stem"]], "nltk.stem.arlstem": [[201, 2, 1, "", "ARLSTem"]], "nltk.stem.arlstem.ARLSTem": [[201, 3, 1, "", "__init__"], [201, 3, 1, "", "fem2masc"], [201, 3, 1, "", "norm"], [201, 3, 1, "", "plur2sing"], [201, 3, 1, "", "pref"], [201, 3, 1, "", "stem"], [201, 3, 1, "", "suff"], [201, 3, 1, "", "verb"], [201, 3, 1, "", "verb_t1"], [201, 3, 1, "", "verb_t2"], [201, 3, 1, "", "verb_t3"], [201, 3, 1, "", "verb_t4"], [201, 3, 1, "", "verb_t5"], [201, 3, 1, "", "verb_t6"]], "nltk.stem.arlstem2": [[202, 2, 1, "", "ARLSTem2"]], "nltk.stem.arlstem2.ARLSTem2": [[202, 3, 1, "", "__init__"], [202, 3, 1, "", "adjective"], [202, 3, 1, "", "fem2masc"], [202, 3, 1, "", "norm"], [202, 3, 1, "", "plur2sing"], [202, 3, 1, "", "pref"], [202, 3, 1, "", "stem"], [202, 3, 1, "", "stem1"], [202, 3, 1, "", "suff"], [202, 3, 1, "", "verb"], [202, 3, 1, "", "verb_t1"], [202, 3, 1, "", "verb_t2"], [202, 3, 1, "", "verb_t3"], [202, 3, 1, "", "verb_t4"], [202, 3, 1, "", "verb_t5"], [202, 3, 1, "", "verb_t6"]], "nltk.stem.cistem": [[203, 2, 1, "", "Cistem"]], "nltk.stem.cistem.Cistem": [[203, 3, 1, "", "__init__"], [203, 4, 1, "", "repl_xx"], [203, 4, 1, "", "repl_xx_back"], [203, 3, 1, "", "replace_back"], [203, 3, 1, "", "replace_to"], [203, 3, 1, "", "segment"], [203, 3, 1, "", "stem"], [203, 4, 1, "", "strip_emr"], [203, 4, 1, "", "strip_esn"], [203, 4, 1, "", "strip_ge"], [203, 4, 1, "", "strip_nd"], [203, 4, 1, "", "strip_t"]], "nltk.stem.isri": [[204, 2, 1, "", "ISRIStemmer"]], "nltk.stem.isri.ISRIStemmer": [[204, 3, 1, "", "__init__"], [204, 3, 1, "", "end_w5"], [204, 3, 1, "", "end_w6"], [204, 3, 1, "", "norm"], [204, 3, 1, "", "pre1"], [204, 3, 1, "", "pre32"], [204, 3, 1, "", "pro_w4"], [204, 3, 1, "", "pro_w53"], [204, 3, 1, "", "pro_w54"], [204, 3, 1, "", "pro_w6"], [204, 3, 1, "", "pro_w64"], [204, 3, 1, "", "stem"], [204, 3, 1, "", "suf1"], [204, 3, 1, "", "suf32"], [204, 3, 1, "", "waw"]], "nltk.stem.lancaster": [[205, 2, 1, "", "LancasterStemmer"]], "nltk.stem.lancaster.LancasterStemmer": [[205, 3, 1, "", "__init__"], [205, 4, 1, "", "default_rule_tuple"], [205, 3, 1, "", "parseRules"], [205, 3, 1, "", "stem"]], "nltk.stem.porter": [[206, 2, 1, "", "PorterStemmer"], [206, 1, 1, "", "demo"]], "nltk.stem.porter.PorterStemmer": [[206, 4, 1, "", "MARTIN_EXTENSIONS"], [206, 4, 1, "", "NLTK_EXTENSIONS"], [206, 4, 1, "", "ORIGINAL_ALGORITHM"], [206, 3, 1, "", "__init__"], [206, 3, 1, "", "stem"]], "nltk.stem.regexp": [[207, 2, 1, "", "RegexpStemmer"]], "nltk.stem.regexp.RegexpStemmer": [[207, 3, 1, "", "__init__"], [207, 3, 1, "", "stem"]], "nltk.stem.rslp": [[208, 2, 1, "", "RSLPStemmer"]], "nltk.stem.rslp.RSLPStemmer": [[208, 3, 1, "", "__init__"], [208, 3, 1, "", "apply_rule"], [208, 3, 1, "", "read_rule"], [208, 3, 1, "", "stem"]], "nltk.stem.snowball": [[209, 2, 1, "", "ArabicStemmer"], [209, 2, 1, "", "DanishStemmer"], [209, 2, 1, "", "DutchStemmer"], [209, 2, 1, "", "EnglishStemmer"], [209, 2, 1, "", "FinnishStemmer"], [209, 2, 1, "", "FrenchStemmer"], [209, 2, 1, "", "GermanStemmer"], [209, 2, 1, "", "HungarianStemmer"], [209, 2, 1, "", "ItalianStemmer"], [209, 2, 1, "", "NorwegianStemmer"], [209, 2, 1, "", "PorterStemmer"], [209, 2, 1, "", "PortugueseStemmer"], [209, 2, 1, "", "RomanianStemmer"], [209, 2, 1, "", "RussianStemmer"], [209, 2, 1, "", "SnowballStemmer"], [209, 2, 1, "", "SpanishStemmer"], [209, 2, 1, "", "SwedishStemmer"], [209, 1, 1, "", "demo"]], "nltk.stem.snowball.ArabicStemmer": [[209, 4, 1, "", "is_defined"], [209, 4, 1, "", "is_noun"], [209, 4, 1, "", "is_verb"], [209, 4, 1, "", "prefix_step2a_success"], [209, 4, 1, "", "prefix_step3a_noun_success"], [209, 4, 1, "", "prefix_step3b_noun_success"], [209, 3, 1, "", "stem"], [209, 4, 1, "", "suffix_noun_step1a_success"], [209, 4, 1, "", "suffix_noun_step2a_success"], [209, 4, 1, "", "suffix_noun_step2b_success"], [209, 4, 1, "", "suffix_noun_step2c2_success"], [209, 4, 1, "", "suffix_verb_step2a_success"], [209, 4, 1, "", "suffix_verb_step2b_success"], [209, 4, 1, "", "suffixe_noun_step1b_success"], [209, 4, 1, "", "suffixes_verb_step1_success"]], "nltk.stem.snowball.DanishStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.DutchStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.EnglishStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.FinnishStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.FrenchStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.GermanStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.HungarianStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.ItalianStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.NorwegianStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.PorterStemmer": [[209, 3, 1, "", "__init__"]], "nltk.stem.snowball.PortugueseStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.RomanianStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.RussianStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.SnowballStemmer": [[209, 3, 1, "", "__init__"], [209, 4, 1, "", "languages"], [209, 3, 1, "", "stem"]], "nltk.stem.snowball.SpanishStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.snowball.SwedishStemmer": [[209, 3, 1, "", "stem"]], "nltk.stem.util": [[210, 1, 1, "", "prefix_replace"], [210, 1, 1, "", "suffix_replace"]], "nltk.stem.wordnet": [[211, 2, 1, "", "WordNetLemmatizer"]], "nltk.stem.wordnet.WordNetLemmatizer": [[211, 3, 1, "", "lemmatize"], [211, 3, 1, "", "morphy"]], "nltk.tabdata": [[212, 2, 1, "", "MaxentDecoder"], [212, 2, 1, "", "MaxentEncoder"], [212, 2, 1, "", "PunktDecoder"], [212, 2, 1, "", "TabDecoder"], [212, 2, 1, "", "TabEncoder"], [212, 1, 1, "", "rm_nl"]], "nltk.tabdata.MaxentDecoder": [[212, 3, 1, "", "tupkey2dict"]], "nltk.tabdata.MaxentEncoder": [[212, 3, 1, "", "tupdict2tab"]], "nltk.tabdata.PunktDecoder": [[212, 3, 1, "", "tab2intdict"]], "nltk.tabdata.TabDecoder": [[212, 3, 1, "", "tab2dict"], [212, 3, 1, "", "tab2ivdict"], [212, 3, 1, "", "tab2tup"], [212, 3, 1, "", "tab2tups"], [212, 3, 1, "", "txt2list"], [212, 3, 1, "", "txt2set"]], "nltk.tabdata.TabEncoder": [[212, 3, 1, "", "dict2tab"], [212, 3, 1, "", "ivdict2tab"], [212, 3, 1, "", "list2txt"], [212, 3, 1, "", "set2txt"], [212, 3, 1, "", "tup2tab"], [212, 3, 1, "", "tups2tab"]], "nltk.tag": [[214, 0, 0, "-", "api"], [215, 0, 0, "-", "brill"], [216, 0, 0, "-", "brill_trainer"], [217, 0, 0, "-", "crf"], [218, 0, 0, "-", "hmm"], [219, 0, 0, "-", "hunpos"], [220, 0, 0, "-", "mapping"], [221, 0, 0, "-", "perceptron"], [213, 1, 1, "", "pos_tag"], [213, 1, 1, "", "pos_tag_sents"], [222, 0, 0, "-", "senna"], [223, 0, 0, "-", "sequential"], [224, 0, 0, "-", "stanford"], [225, 0, 0, "-", "tnt"], [226, 0, 0, "-", "util"]], "nltk.tag.api": [[214, 2, 1, "", "FeaturesetTaggerI"], [214, 2, 1, "", "TaggerI"]], "nltk.tag.api.TaggerI": [[214, 3, 1, "", "accuracy"], [214, 3, 1, "", "confusion"], [214, 3, 1, "", "evaluate"], [214, 3, 1, "", "evaluate_per_tag"], [214, 3, 1, "", "f_measure"], [214, 3, 1, "", "precision"], [214, 3, 1, "", "recall"], [214, 3, 1, "", "tag"], [214, 3, 1, "", "tag_sents"]], "nltk.tag.brill": [[215, 2, 1, "", "BrillTagger"], [215, 2, 1, "", "Pos"], [215, 2, 1, "", "Word"], [215, 1, 1, "", "brill24"], [215, 1, 1, "", "describe_template_sets"], [215, 1, 1, "", "fntbl37"], [215, 1, 1, "", "nltkdemo18"], [215, 1, 1, "", "nltkdemo18plus"]], "nltk.tag.brill.BrillTagger": [[215, 3, 1, "", "__init__"], [215, 3, 1, "", "batch_tag_incremental"], [215, 3, 1, "", "decode_json_obj"], [215, 3, 1, "", "encode_json_obj"], [215, 4, 1, "", "json_tag"], [215, 3, 1, "", "print_template_statistics"], [215, 3, 1, "", "rules"], [215, 3, 1, "", "tag"], [215, 3, 1, "", "train_stats"]], "nltk.tag.brill.Pos": [[215, 3, 1, "", "extract_property"], [215, 4, 1, "", "json_tag"]], "nltk.tag.brill.Word": [[215, 3, 1, "", "extract_property"], [215, 4, 1, "", "json_tag"]], "nltk.tag.brill_trainer": [[216, 2, 1, "", "BrillTaggerTrainer"]], "nltk.tag.brill_trainer.BrillTaggerTrainer": [[216, 3, 1, "", "__init__"], [216, 3, 1, "", "train"]], "nltk.tag.crf": [[217, 2, 1, "", "CRFTagger"]], "nltk.tag.crf.CRFTagger": [[217, 3, 1, "", "__init__"], [217, 3, 1, "", "set_model_file"], [217, 3, 1, "", "tag"], [217, 3, 1, "", "tag_sents"], [217, 3, 1, "", "train"]], "nltk.tag.hmm": [[218, 2, 1, "", "HiddenMarkovModelTagger"], [218, 2, 1, "", "HiddenMarkovModelTrainer"], [218, 1, 1, "", "demo"], [218, 1, 1, "", "demo_bw"], [218, 1, 1, "", "demo_pos"], [218, 1, 1, "", "demo_pos_bw"], [218, 1, 1, "", "load_pos"], [218, 1, 1, "", "logsumexp2"]], "nltk.tag.hmm.HiddenMarkovModelTagger": [[218, 3, 1, "", "__init__"], [218, 3, 1, "", "best_path"], [218, 3, 1, "", "best_path_simple"], [218, 3, 1, "", "entropy"], [218, 3, 1, "", "log_probability"], [218, 3, 1, "", "point_entropy"], [218, 3, 1, "", "probability"], [218, 3, 1, "", "random_sample"], [218, 3, 1, "", "reset_cache"], [218, 3, 1, "", "tag"], [218, 3, 1, "", "test"], [218, 3, 1, "", "train"]], "nltk.tag.hmm.HiddenMarkovModelTrainer": [[218, 3, 1, "", "__init__"], [218, 3, 1, "", "train"], [218, 3, 1, "", "train_supervised"], [218, 3, 1, "", "train_unsupervised"]], "nltk.tag.hunpos": [[219, 2, 1, "", "HunposTagger"]], "nltk.tag.hunpos.HunposTagger": [[219, 3, 1, "", "__init__"], [219, 3, 1, "", "close"], [219, 3, 1, "", "tag"]], "nltk.tag.mapping": [[220, 1, 1, "", "map_tag"], [220, 1, 1, "", "tagset_mapping"]], "nltk.tag.perceptron": [[221, 2, 1, "", "AveragedPerceptron"], [221, 2, 1, "", "PerceptronTagger"]], "nltk.tag.perceptron.AveragedPerceptron": [[221, 3, 1, "", "__init__"], [221, 3, 1, "", "average_weights"], [221, 3, 1, "", "decode_json_obj"], [221, 3, 1, "", "encode_json_obj"], [221, 4, 1, "", "json_tag"], [221, 3, 1, "", "load"], [221, 3, 1, "", "predict"], [221, 3, 1, "", "save"], [221, 3, 1, "", "update"]], "nltk.tag.perceptron.PerceptronTagger": [[221, 4, 1, "", "END"], [221, 4, 1, "", "START"], [221, 3, 1, "", "__init__"], [221, 3, 1, "", "decode_json_obj"], [221, 3, 1, "", "encode_json_obj"], [221, 4, 1, "", "json_tag"], [221, 3, 1, "", "load_from_json"], [221, 3, 1, "", "normalize"], [221, 3, 1, "", "save_to_json"], [221, 3, 1, "", "tag"], [221, 3, 1, "", "train"]], "nltk.tag.senna": [[222, 2, 1, "", "SennaChunkTagger"], [222, 2, 1, "", "SennaNERTagger"], [222, 2, 1, "", "SennaTagger"]], "nltk.tag.senna.SennaChunkTagger": [[222, 3, 1, "", "__init__"], [222, 3, 1, "", "bio_to_chunks"], [222, 3, 1, "", "tag_sents"]], "nltk.tag.senna.SennaNERTagger": [[222, 3, 1, "", "__init__"], [222, 3, 1, "", "tag_sents"]], "nltk.tag.senna.SennaTagger": [[222, 3, 1, "", "__init__"], [222, 3, 1, "", "tag_sents"]], "nltk.tag.sequential": [[223, 2, 1, "", "AffixTagger"], [223, 2, 1, "", "BigramTagger"], [223, 2, 1, "", "ClassifierBasedPOSTagger"], [223, 2, 1, "", "ClassifierBasedTagger"], [223, 2, 1, "", "ContextTagger"], [223, 2, 1, "", "DefaultTagger"], [223, 2, 1, "", "NgramTagger"], [223, 2, 1, "", "RegexpTagger"], [223, 2, 1, "", "SequentialBackoffTagger"], [223, 2, 1, "", "TrigramTagger"], [223, 2, 1, "", "UnigramTagger"]], "nltk.tag.sequential.AffixTagger": [[223, 3, 1, "", "__init__"], [223, 3, 1, "", "context"], [223, 3, 1, "", "decode_json_obj"], [223, 3, 1, "", "encode_json_obj"], [223, 4, 1, "", "json_tag"]], "nltk.tag.sequential.BigramTagger": [[223, 3, 1, "", "__init__"], [223, 4, 1, "", "json_tag"]], "nltk.tag.sequential.ClassifierBasedPOSTagger": [[223, 3, 1, "", "feature_detector"]], "nltk.tag.sequential.ClassifierBasedTagger": [[223, 3, 1, "", "__init__"], [223, 3, 1, "", "choose_tag"], [223, 3, 1, "", "classifier"], [223, 3, 1, "", "feature_detector"]], "nltk.tag.sequential.ContextTagger": [[223, 3, 1, "", "__init__"], [223, 3, 1, "", "choose_tag"], [223, 3, 1, "", "context"], [223, 3, 1, "", "size"]], "nltk.tag.sequential.DefaultTagger": [[223, 3, 1, "", "__init__"], [223, 3, 1, "", "choose_tag"], [223, 3, 1, "", "decode_json_obj"], [223, 3, 1, "", "encode_json_obj"], [223, 4, 1, "", "json_tag"]], "nltk.tag.sequential.NgramTagger": [[223, 3, 1, "", "__init__"], [223, 3, 1, "", "context"], [223, 3, 1, "", "decode_json_obj"], [223, 3, 1, "", "encode_json_obj"], [223, 4, 1, "", "json_tag"]], "nltk.tag.sequential.RegexpTagger": [[223, 3, 1, "", "__init__"], [223, 3, 1, "", "choose_tag"], [223, 3, 1, "", "decode_json_obj"], [223, 3, 1, "", "encode_json_obj"], [223, 4, 1, "", "json_tag"]], "nltk.tag.sequential.SequentialBackoffTagger": [[223, 3, 1, "", "__init__"], [223, 5, 1, "", "backoff"], [223, 3, 1, "", "choose_tag"], [223, 3, 1, "", "tag"], [223, 3, 1, "", "tag_one"]], "nltk.tag.sequential.TrigramTagger": [[223, 3, 1, "", "__init__"], [223, 4, 1, "", "json_tag"]], "nltk.tag.sequential.UnigramTagger": [[223, 3, 1, "", "__init__"], [223, 3, 1, "", "context"], [223, 4, 1, "", "json_tag"]], "nltk.tag.stanford": [[224, 2, 1, "", "StanfordNERTagger"], [224, 2, 1, "", "StanfordPOSTagger"], [224, 2, 1, "", "StanfordTagger"]], "nltk.tag.stanford.StanfordNERTagger": [[224, 3, 1, "", "__init__"], [224, 3, 1, "", "parse_output"]], "nltk.tag.stanford.StanfordPOSTagger": [[224, 3, 1, "", "__init__"]], "nltk.tag.stanford.StanfordTagger": [[224, 3, 1, "", "__init__"], [224, 3, 1, "", "parse_output"], [224, 3, 1, "", "tag"], [224, 3, 1, "", "tag_sents"]], "nltk.tag.tnt": [[225, 2, 1, "", "TnT"], [225, 1, 1, "", "basic_sent_chop"], [225, 1, 1, "", "demo"], [225, 1, 1, "", "demo2"], [225, 1, 1, "", "demo3"]], "nltk.tag.tnt.TnT": [[225, 3, 1, "", "__init__"], [225, 3, 1, "", "tag"], [225, 3, 1, "", "tagdata"], [225, 3, 1, "", "train"]], "nltk.tag.util": [[226, 1, 1, "", "str2tuple"], [226, 1, 1, "", "tuple2str"], [226, 1, 1, "", "untag"]], "nltk.tbl": [[228, 0, 0, "-", "api"], [229, 0, 0, "-", "demo"], [230, 0, 0, "-", "erroranalysis"], [231, 0, 0, "-", "feature"], [232, 0, 0, "-", "rule"], [233, 0, 0, "-", "template"]], "nltk.tbl.demo": [[229, 1, 1, "", "corpus_size"], [229, 1, 1, "", "demo"], [229, 1, 1, "", "demo_error_analysis"], [229, 1, 1, "", "demo_generated_templates"], [229, 1, 1, "", "demo_high_accuracy_rules"], [229, 1, 1, "", "demo_learning_curve"], [229, 1, 1, "", "demo_multifeature_template"], [229, 1, 1, "", "demo_multiposition_feature"], [229, 1, 1, "", "demo_repr_rule_format"], [229, 1, 1, "", "demo_serialize_tagger"], [229, 1, 1, "", "demo_str_rule_format"], [229, 1, 1, "", "demo_template_statistics"], [229, 1, 1, "", "demo_verbose_rule_format"], [229, 1, 1, "", "postag"]], "nltk.tbl.erroranalysis": [[230, 1, 1, "", "error_list"]], "nltk.tbl.feature": [[231, 2, 1, "", "Feature"]], "nltk.tbl.feature.Feature": [[231, 4, 1, "", "PROPERTY_NAME"], [231, 3, 1, "", "__init__"], [231, 3, 1, "", "decode_json_obj"], [231, 3, 1, "", "encode_json_obj"], [231, 3, 1, "", "expand"], [231, 3, 1, "", "extract_property"], [231, 3, 1, "", "intersects"], [231, 3, 1, "", "issuperset"], [231, 4, 1, "", "json_tag"]], "nltk.tbl.rule": [[232, 2, 1, "", "Rule"], [232, 2, 1, "", "TagRule"]], "nltk.tbl.rule.Rule": [[232, 3, 1, "", "__init__"], [232, 3, 1, "", "applies"], [232, 3, 1, "", "decode_json_obj"], [232, 3, 1, "", "encode_json_obj"], [232, 3, 1, "", "format"], [232, 4, 1, "", "json_tag"]], "nltk.tbl.rule.TagRule": [[232, 3, 1, "", "__init__"], [232, 3, 1, "", "applies"], [232, 3, 1, "", "apply"], [232, 4, 1, "", "original_tag"], [232, 4, 1, "", "replacement_tag"]], "nltk.tbl.template": [[233, 2, 1, "", "BrillTemplateI"], [233, 2, 1, "", "Template"]], "nltk.tbl.template.BrillTemplateI": [[233, 3, 1, "", "applicable_rules"], [233, 3, 1, "", "get_neighborhood"]], "nltk.tbl.template.Template": [[233, 4, 1, "", "ALLTEMPLATES"], [233, 3, 1, "", "__init__"], [233, 3, 1, "", "applicable_rules"], [233, 3, 1, "", "expand"], [233, 3, 1, "", "get_neighborhood"]], "nltk.test": [[235, 0, 0, "-", "all"], [236, 0, 0, "-", "childes_fixt"], [237, 0, 0, "-", "classify_fixt"], [238, 0, 0, "-", "conftest"], [240, 0, 0, "-", "gensim_fixt"], [241, 0, 0, "-", "gluesemantics_malt_fixt"], [244, 0, 0, "-", "portuguese_en_fixt"], [245, 0, 0, "-", "probability_fixt"], [246, 0, 0, "-", "unit"]], "nltk.test.all": [[235, 1, 1, "", "additional_tests"]], "nltk.test.childes_fixt": [[236, 1, 1, "", "setup_module"]], "nltk.test.classify_fixt": [[237, 1, 1, "", "setup_module"]], "nltk.test.conftest": [[238, 1, 1, "", "mock_plot"], [238, 1, 1, "", "teardown_loaded_corpora"]], "nltk.test.gensim_fixt": [[240, 1, 1, "", "setup_module"]], "nltk.test.gluesemantics_malt_fixt": [[241, 1, 1, "", "setup_module"]], "nltk.test.portuguese_en_fixt": [[244, 1, 1, "", "setup_module"]], "nltk.test.probability_fixt": [[245, 1, 1, "", "setup_module"]], "nltk.test.unit": [[247, 0, 0, "-", "lm"], [252, 0, 0, "-", "test_aline"], [253, 0, 0, "-", "test_bllip"], [254, 0, 0, "-", "test_brill"], [255, 0, 0, "-", "test_cfd_mutation"], [256, 0, 0, "-", "test_cfg2chomsky"], [257, 0, 0, "-", "test_chunk"], [258, 0, 0, "-", "test_classify"], [259, 0, 0, "-", "test_collocations"], [260, 0, 0, "-", "test_concordance"], [261, 0, 0, "-", "test_corenlp"], [262, 0, 0, "-", "test_corpora"], [263, 0, 0, "-", "test_corpus_views"], [264, 0, 0, "-", "test_data"], [265, 0, 0, "-", "test_disagreement"], [266, 0, 0, "-", "test_distance"], [267, 0, 0, "-", "test_downloader"], [268, 0, 0, "-", "test_freqdist"], [269, 0, 0, "-", "test_hmm"], [270, 0, 0, "-", "test_json2csv_corpus"], [271, 0, 0, "-", "test_json_serialization"], [272, 0, 0, "-", "test_metrics"], [273, 0, 0, "-", "test_naivebayes"], [274, 0, 0, "-", "test_nombank"], [275, 0, 0, "-", "test_pl196x"], [276, 0, 0, "-", "test_pos_tag"], [277, 0, 0, "-", "test_ribes"], [278, 0, 0, "-", "test_rte_classify"], [279, 0, 0, "-", "test_seekable_unicode_stream_reader"], [280, 0, 0, "-", "test_senna"], [281, 0, 0, "-", "test_stem"], [282, 0, 0, "-", "test_tag"], [283, 0, 0, "-", "test_tgrep"], [284, 0, 0, "-", "test_tokenize"], [285, 0, 0, "-", "test_twitter_auth"], [286, 0, 0, "-", "test_util"], [287, 0, 0, "-", "test_wordnet"], [288, 0, 0, "-", "translate"]], "nltk.test.unit.lm": [[248, 0, 0, "-", "test_counter"], [249, 0, 0, "-", "test_models"], [250, 0, 0, "-", "test_preprocessing"], [251, 0, 0, "-", "test_vocabulary"]], "nltk.test.unit.lm.test_counter": [[248, 2, 1, "", "TestNgramCounter"], [248, 2, 1, "", "TestNgramCounterTraining"]], "nltk.test.unit.lm.test_counter.TestNgramCounter": [[248, 3, 1, "", "setup_class"], [248, 3, 1, "", "test_N"], [248, 3, 1, "", "test_bigram_counts_seen_ngrams"], [248, 3, 1, "", "test_bigram_counts_unseen_ngrams"], [248, 3, 1, "", "test_counter_len_changes_with_lookup"], [248, 3, 1, "", "test_ngram_conditional_freqdist"], [248, 3, 1, "", "test_ngram_order_access_unigrams"], [248, 3, 1, "", "test_unigram_counts_completely_unseen_words"], [248, 3, 1, "", "test_unigram_counts_seen_words"]], "nltk.test.unit.lm.test_counter.TestNgramCounterTraining": [[248, 3, 1, "", "setup_class"], [248, 3, 1, "", "test_empty_inputs"], [248, 3, 1, "", "test_train_on_bigrams"], [248, 3, 1, "", "test_train_on_illegal_sentences"], [248, 3, 1, "", "test_train_on_mix"], [248, 3, 1, "", "test_train_on_unigrams"]], "nltk.test.unit.lm.test_models": [[249, 1, 1, "", "absolute_discounting_trigram_model"], [249, 1, 1, "", "bigram_training_data"], [249, 1, 1, "", "kneserney_bigram_model"], [249, 1, 1, "", "kneserney_trigram_model"], [249, 1, 1, "", "laplace_bigram_model"], [249, 1, 1, "", "lidstone_bigram_model"], [249, 1, 1, "", "lidstone_trigram_model"], [249, 1, 1, "", "mle_bigram_model"], [249, 1, 1, "", "mle_trigram_model"], [249, 1, 1, "", "stupid_backoff_trigram_model"], [249, 1, 1, "", "test_absolute_discounting_trigram_score"], [249, 1, 1, "", "test_generate_None_text_seed"], [249, 1, 1, "", "test_generate_cycle"], [249, 1, 1, "", "test_generate_one_from_limiting_context"], [249, 1, 1, "", "test_generate_one_from_varied_context"], [249, 1, 1, "", "test_generate_one_no_context"], [249, 1, 1, "", "test_generate_oov_text_seed"], [249, 1, 1, "", "test_generate_with_text_seed"], [249, 1, 1, "", "test_kneserney_trigram_score"], [249, 1, 1, "", "test_laplace_bigram_entropy_perplexity"], [249, 1, 1, "", "test_laplace_bigram_score"], [249, 1, 1, "", "test_laplace_gamma"], [249, 1, 1, "", "test_lidstone_bigram_score"], [249, 1, 1, "", "test_lidstone_entropy_perplexity"], [249, 1, 1, "", "test_lidstone_trigram_score"], [249, 1, 1, "", "test_mle_bigram_entropy_perplexity_seen"], [249, 1, 1, "", "test_mle_bigram_entropy_perplexity_unigrams"], [249, 1, 1, "", "test_mle_bigram_entropy_perplexity_unseen"], [249, 1, 1, "", "test_mle_bigram_logscore_for_zero_score"], [249, 1, 1, "", "test_mle_bigram_scores"], [249, 1, 1, "", "test_mle_trigram_scores"], [249, 1, 1, "", "test_stupid_backoff_trigram_score"], [249, 1, 1, "", "test_sums_to_1"], [249, 1, 1, "", "test_wittenbell_trigram_score"], [249, 1, 1, "", "training_data"], [249, 1, 1, "", "trigram_training_data"], [249, 1, 1, "", "vocabulary"], [249, 1, 1, "", "wittenbell_trigram_model"]], "nltk.test.unit.lm.test_preprocessing": [[250, 2, 1, "", "TestPreprocessing"]], "nltk.test.unit.lm.test_preprocessing.TestPreprocessing": [[250, 3, 1, "", "test_padded_everygram_pipeline"]], "nltk.test.unit.lm.test_vocabulary": [[251, 2, 1, "", "NgramModelVocabularyTests"]], "nltk.test.unit.lm.test_vocabulary.NgramModelVocabularyTests": [[251, 3, 1, "", "setUpClass"], [251, 3, 1, "", "test_counts_set_correctly"], [251, 3, 1, "", "test_creation_with_counter"], [251, 3, 1, "", "test_cutoff_setter_checks_value"], [251, 3, 1, "", "test_cutoff_value_set_correctly"], [251, 3, 1, "", "test_eqality"], [251, 3, 1, "", "test_len_is_constant"], [251, 3, 1, "", "test_lookup"], [251, 3, 1, "", "test_lookup_None"], [251, 3, 1, "", "test_lookup_empty_iterables"], [251, 3, 1, "", "test_lookup_empty_str"], [251, 3, 1, "", "test_lookup_int"], [251, 3, 1, "", "test_lookup_iterables"], [251, 3, 1, "", "test_lookup_recursive"], [251, 3, 1, "", "test_membership_check_respects_cutoff"], [251, 3, 1, "", "test_str"], [251, 3, 1, "", "test_truthiness"], [251, 3, 1, "", "test_unable_to_change_cutoff"], [251, 3, 1, "", "test_update_empty_vocab"], [251, 3, 1, "", "test_vocab_iter_respects_cutoff"], [251, 3, 1, "", "test_vocab_len_respects_cutoff"]], "nltk.test.unit.test_aline": [[252, 1, 1, "", "test_aline"], [252, 1, 1, "", "test_aline_delta"]], "nltk.test.unit.test_bllip": [[253, 2, 1, "", "TestBllipParser"], [253, 1, 1, "", "parser"], [253, 1, 1, "", "setup_module"]], "nltk.test.unit.test_bllip.TestBllipParser": [[253, 3, 1, "", "test_parser_loads_a_valid_tree"], [253, 3, 1, "", "test_tagged_parse_finds_matching_element"]], "nltk.test.unit.test_brill": [[254, 2, 1, "", "TestBrill"]], "nltk.test.unit.test_brill.TestBrill": [[254, 3, 1, "", "test_brill_demo"], [254, 3, 1, "", "test_pos_template"]], "nltk.test.unit.test_cfd_mutation": [[255, 2, 1, "", "TestEmptyCondFreq"]], "nltk.test.unit.test_cfd_mutation.TestEmptyCondFreq": [[255, 3, 1, "", "test_increment"], [255, 3, 1, "", "test_plot"], [255, 3, 1, "", "test_tabulate"]], "nltk.test.unit.test_cfg2chomsky": [[256, 2, 1, "", "ChomskyNormalFormForCFGTest"]], "nltk.test.unit.test_cfg2chomsky.ChomskyNormalFormForCFGTest": [[256, 3, 1, "", "test_complex"], [256, 3, 1, "", "test_simple"]], "nltk.test.unit.test_chunk": [[257, 2, 1, "", "TestChunkRule"]], "nltk.test.unit.test_chunk.TestChunkRule": [[257, 3, 1, "", "test_tag_pattern2re_pattern_quantifier"]], "nltk.test.unit.test_classify": [[258, 1, 1, "", "assert_classifier_correct"], [258, 1, 1, "", "test_megam"], [258, 1, 1, "", "test_tadm"]], "nltk.test.unit.test_collocations": [[259, 1, 1, "", "close_enough"], [259, 1, 1, "", "test_bigram2"], [259, 1, 1, "", "test_bigram3"], [259, 1, 1, "", "test_bigram5"]], "nltk.test.unit.test_concordance": [[260, 2, 1, "", "TestConcordance"], [260, 1, 1, "", "stdout_redirect"]], "nltk.test.unit.test_concordance.TestConcordance": [[260, 3, 1, "", "setUp"], [260, 3, 1, "", "setUpClass"], [260, 3, 1, "", "tearDown"], [260, 3, 1, "", "tearDownClass"], [260, 3, 1, "", "test_concordance_lines"], [260, 3, 1, "", "test_concordance_list"], [260, 3, 1, "", "test_concordance_print"], [260, 3, 1, "", "test_concordance_width"]], "nltk.test.unit.test_corenlp": [[261, 2, 1, "", "TestParserAPI"], [261, 2, 1, "", "TestTaggerAPI"], [261, 2, 1, "", "TestTokenizerAPI"], [261, 1, 1, "", "setup_module"], [261, 1, 1, "", "teardown_module"]], "nltk.test.unit.test_corenlp.TestParserAPI": [[261, 3, 1, "", "test_dependency_parser"], [261, 3, 1, "", "test_parse"]], "nltk.test.unit.test_corenlp.TestTaggerAPI": [[261, 3, 1, "", "test_ner_tagger"], [261, 3, 1, "", "test_pos_tagger"], [261, 3, 1, "", "test_unexpected_tagtype"]], "nltk.test.unit.test_corenlp.TestTokenizerAPI": [[261, 3, 1, "", "test_tokenize"]], "nltk.test.unit.test_corpora": [[262, 2, 1, "", "TestCess"], [262, 2, 1, "", "TestCoNLL2007"], [262, 2, 1, "", "TestFloresta"], [262, 2, 1, "", "TestIndian"], [262, 2, 1, "", "TestMWAPPDB"], [262, 2, 1, "", "TestPTB"], [262, 2, 1, "", "TestSinicaTreebank"], [262, 2, 1, "", "TestUdhr"]], "nltk.test.unit.test_corpora.TestCess": [[262, 3, 1, "", "test_catalan"], [262, 3, 1, "", "test_esp"]], "nltk.test.unit.test_corpora.TestCoNLL2007": [[262, 3, 1, "", "test_parsed_sents"], [262, 3, 1, "", "test_sents"]], "nltk.test.unit.test_corpora.TestFloresta": [[262, 3, 1, "", "test_words"]], "nltk.test.unit.test_corpora.TestIndian": [[262, 3, 1, "", "test_tagged_words"], [262, 3, 1, "", "test_words"]], "nltk.test.unit.test_corpora.TestMWAPPDB": [[262, 4, 1, "", "pytestmark"], [262, 3, 1, "", "test_entries"], [262, 3, 1, "", "test_fileids"]], "nltk.test.unit.test_corpora.TestPTB": [[262, 4, 1, "", "pytestmark"], [262, 3, 1, "", "test_categories"], [262, 3, 1, "", "test_category_words"], [262, 3, 1, "", "test_fileids"], [262, 3, 1, "", "test_news_fileids"], [262, 3, 1, "", "test_tagged_words"], [262, 3, 1, "", "test_words"]], "nltk.test.unit.test_corpora.TestSinicaTreebank": [[262, 3, 1, "", "test_parsed_sents"], [262, 3, 1, "", "test_sents"]], "nltk.test.unit.test_corpora.TestUdhr": [[262, 3, 1, "", "test_polish_encoding"], [262, 3, 1, "", "test_raw_unicode"], [262, 3, 1, "", "test_words"]], "nltk.test.unit.test_corpus_views": [[263, 2, 1, "", "TestCorpusViews"]], "nltk.test.unit.test_corpus_views.TestCorpusViews": [[263, 3, 1, "", "data"], [263, 4, 1, "", "linetok"], [263, 4, 1, "", "names"], [263, 3, 1, "", "test_correct_length"], [263, 3, 1, "", "test_correct_values"]], "nltk.test.unit.test_data": [[264, 1, 1, "", "test_find_raises_exception"], [264, 1, 1, "", "test_find_raises_exception_with_full_resource_name"]], "nltk.test.unit.test_disagreement": [[265, 2, 1, "", "TestDisagreement"]], "nltk.test.unit.test_disagreement.TestDisagreement": [[265, 3, 1, "", "test_advanced"], [265, 3, 1, "", "test_advanced2"], [265, 3, 1, "", "test_easy"], [265, 3, 1, "", "test_easy2"], [265, 3, 1, "", "test_easy3"]], "nltk.test.unit.test_distance": [[266, 2, 1, "", "TestEditDistance"]], "nltk.test.unit.test_distance.TestEditDistance": [[266, 3, 1, "", "test_with_transpositions"]], "nltk.test.unit.test_downloader": [[267, 1, 1, "", "test_downloader_using_existing_parent_download_dir"], [267, 1, 1, "", "test_downloader_using_non_existing_parent_download_dir"]], "nltk.test.unit.test_freqdist": [[268, 1, 1, "", "test_iterating_returns_an_iterator_ordered_by_frequency"]], "nltk.test.unit.test_hmm": [[269, 1, 1, "", "setup_module"], [269, 1, 1, "", "test_backward_probability"], [269, 1, 1, "", "test_forward_probability"], [269, 1, 1, "", "test_forward_probability2"]], "nltk.test.unit.test_json2csv_corpus": [[270, 1, 1, "", "files_are_identical"], [270, 1, 1, "", "infile"], [270, 1, 1, "", "test_file_is_wrong"], [270, 1, 1, "", "test_retweet_original_tweet"], [270, 1, 1, "", "test_textoutput"], [270, 1, 1, "", "test_tweet_hashtag"], [270, 1, 1, "", "test_tweet_media"], [270, 1, 1, "", "test_tweet_metadata"], [270, 1, 1, "", "test_tweet_place"], [270, 1, 1, "", "test_tweet_place_boundingbox"], [270, 1, 1, "", "test_tweet_url"], [270, 1, 1, "", "test_tweet_usermention"], [270, 1, 1, "", "test_user_metadata"], [270, 1, 1, "", "test_userurl"]], "nltk.test.unit.test_json_serialization": [[271, 2, 1, "", "TestJSONSerialization"]], "nltk.test.unit.test_json_serialization.TestJSONSerialization": [[271, 3, 1, "", "setUp"], [271, 3, 1, "", "test_affix_tagger"], [271, 3, 1, "", "test_brill_tagger"], [271, 3, 1, "", "test_default_tagger"], [271, 3, 1, "", "test_ngram_taggers"], [271, 3, 1, "", "test_perceptron_tagger"], [271, 3, 1, "", "test_regexp_tagger"]], "nltk.test.unit.test_metrics": [[272, 2, 1, "", "TestLikelihoodRatio"]], "nltk.test.unit.test_metrics.TestLikelihoodRatio": [[272, 3, 1, "", "test_lr_bigram"], [272, 3, 1, "", "test_lr_quadgram"], [272, 3, 1, "", "test_lr_trigram"]], "nltk.test.unit.test_naivebayes": [[273, 2, 1, "", "NaiveBayesClassifierTest"]], "nltk.test.unit.test_naivebayes.NaiveBayesClassifierTest": [[273, 3, 1, "", "test_simple"]], "nltk.test.unit.test_nombank": [[274, 2, 1, "", "NombankDemo"]], "nltk.test.unit.test_nombank.NombankDemo": [[274, 3, 1, "", "test_framefiles_fileids"], [274, 3, 1, "", "test_instance"], [274, 3, 1, "", "test_numbers"]], "nltk.test.unit.test_pl196x": [[275, 2, 1, "", "TestCorpusViews"]], "nltk.test.unit.test_pl196x.TestCorpusViews": [[275, 3, 1, "", "test_corpus_reader"]], "nltk.test.unit.test_pos_tag": [[276, 2, 1, "", "TestPosTag"]], "nltk.test.unit.test_pos_tag.TestPosTag": [[276, 3, 1, "", "check_stdout"], [276, 3, 1, "", "test_pos_tag_eng"], [276, 3, 1, "", "test_pos_tag_eng_universal"], [276, 3, 1, "", "test_pos_tag_rus"], [276, 3, 1, "", "test_pos_tag_rus_universal"], [276, 3, 1, "", "test_pos_tag_unknown_lang"], [276, 3, 1, "", "test_tagsets_brown"], [276, 3, 1, "", "test_tagsets_claw5"], [276, 3, 1, "", "test_tagsets_upenn"], [276, 3, 1, "", "test_unspecified_lang"]], "nltk.test.unit.test_ribes": [[277, 1, 1, "", "test_no_zero_div"], [277, 1, 1, "", "test_ribes"], [277, 1, 1, "", "test_ribes_empty_worder"], [277, 1, 1, "", "test_ribes_one_worder"], [277, 1, 1, "", "test_ribes_two_worder"]], "nltk.test.unit.test_rte_classify": [[278, 2, 1, "", "TestRTEClassifier"]], "nltk.test.unit.test_rte_classify.TestRTEClassifier": [[278, 3, 1, "", "test_feature_extractor_object"], [278, 3, 1, "", "test_rte_classification_with_megam"], [278, 3, 1, "", "test_rte_classification_without_megam"], [278, 3, 1, "", "test_rte_feature_extraction"]], "nltk.test.unit.test_seekable_unicode_stream_reader": [[279, 1, 1, "", "check_reader"], [279, 1, 1, "", "teardown_module"], [279, 1, 1, "", "test_reader"], [279, 1, 1, "", "test_reader_stream_closes_when_deleted"]], "nltk.test.unit.test_senna": [[280, 2, 1, "", "TestSennaPipeline"], [280, 2, 1, "", "TestSennaTagger"]], "nltk.test.unit.test_senna.TestSennaPipeline": [[280, 3, 1, "", "test_senna_pipeline"]], "nltk.test.unit.test_senna.TestSennaTagger": [[280, 3, 1, "", "test_senna_chunk_tagger"], [280, 3, 1, "", "test_senna_ner_tagger"], [280, 3, 1, "", "test_senna_tagger"]], "nltk.test.unit.test_stem": [[281, 2, 1, "", "PorterTest"], [281, 2, 1, "", "SnowballTest"]], "nltk.test.unit.test_stem.PorterTest": [[281, 3, 1, "", "test_lowercase_option"], [281, 3, 1, "", "test_oed_bug"], [281, 3, 1, "", "test_vocabulary_martin_mode"], [281, 3, 1, "", "test_vocabulary_nltk_mode"], [281, 3, 1, "", "test_vocabulary_original_mode"]], "nltk.test.unit.test_stem.SnowballTest": [[281, 3, 1, "", "test_arabic"], [281, 3, 1, "", "test_german"], [281, 3, 1, "", "test_russian"], [281, 3, 1, "", "test_short_strings_bug"], [281, 3, 1, "", "test_spanish"]], "nltk.test.unit.test_tag": [[282, 1, 1, "", "setup_module"], [282, 1, 1, "", "test_basic"]], "nltk.test.unit.test_tgrep": [[283, 2, 1, "", "TestSequenceFunctions"]], "nltk.test.unit.test_tgrep.TestSequenceFunctions": [[283, 3, 1, "", "test_bad_operator"], [283, 3, 1, "", "test_comments"], [283, 3, 1, "", "test_examples"], [283, 3, 1, "", "test_labeled_nodes"], [283, 3, 1, "", "test_multiple_conjs"], [283, 3, 1, "", "test_node_encoding"], [283, 3, 1, "", "test_node_nocase"], [283, 3, 1, "", "test_node_noleaves"], [283, 3, 1, "", "test_node_printing"], [283, 3, 1, "", "test_node_quoted"], [283, 3, 1, "", "test_node_regex"], [283, 3, 1, "", "test_node_regex_2"], [283, 3, 1, "", "test_node_simple"], [283, 3, 1, "", "test_node_tree_position"], [283, 3, 1, "", "test_rel_precedence"], [283, 3, 1, "", "test_rel_sister_nodes"], [283, 3, 1, "", "test_tokenize_encoding"], [283, 3, 1, "", "test_tokenize_examples"], [283, 3, 1, "", "test_tokenize_link_types"], [283, 3, 1, "", "test_tokenize_macros"], [283, 3, 1, "", "test_tokenize_node_labels"], [283, 3, 1, "", "test_tokenize_nodenames"], [283, 3, 1, "", "test_tokenize_quoting"], [283, 3, 1, "", "test_tokenize_segmented_patterns"], [283, 3, 1, "", "test_tokenize_simple"], [283, 3, 1, "", "test_trailing_semicolon"], [283, 3, 1, "", "test_use_macros"], [283, 3, 1, "", "tests_rel_dominance"], [283, 3, 1, "", "tests_rel_indexed_children"]], "nltk.test.unit.test_tokenize": [[284, 2, 1, "", "TestPunktTrainer"], [284, 2, 1, "", "TestTokenize"], [284, 1, 1, "", "load_stanford_segmenter"]], "nltk.test.unit.test_tokenize.TestPunktTrainer": [[284, 3, 1, "", "test_punkt_train"], [284, 3, 1, "", "test_punkt_train_no_punc"], [284, 3, 1, "", "test_punkt_train_single_word"]], "nltk.test.unit.test_tokenize.TestTokenize": [[284, 3, 1, "", "punkt_debug_decisions"], [284, 3, 1, "", "test_emoji_tokenizer"], [284, 3, 1, "", "test_legality_principle_syllable_tokenizer"], [284, 3, 1, "", "test_pad_asterisk"], [284, 3, 1, "", "test_pad_dotdot"], [284, 3, 1, "", "test_phone_tokenizer"], [284, 3, 1, "", "test_punkt_debug_decisions_custom_end"], [284, 3, 1, "", "test_punkt_pair_iter"], [284, 3, 1, "", "test_punkt_pair_iter_handles_stop_iteration_exception"], [284, 3, 1, "", "test_punkt_tokenize_custom_lang_vars"], [284, 3, 1, "", "test_punkt_tokenize_no_custom_lang_vars"], [284, 3, 1, "", "test_punkt_tokenize_words_handles_stop_iteration_exception"], [284, 3, 1, "", "test_remove_handle"], [284, 3, 1, "", "test_sent_tokenize"], [284, 3, 1, "", "test_sonority_sequencing_syllable_tokenizer"], [284, 3, 1, "", "test_stanford_segmenter_arabic"], [284, 3, 1, "", "test_stanford_segmenter_chinese"], [284, 3, 1, "", "test_string_tokenizer"], [284, 3, 1, "", "test_syllable_tokenizer_numbers"], [284, 3, 1, "", "test_treebank_span_tokenizer"], [284, 3, 1, "", "test_tweet_tokenizer"], [284, 3, 1, "", "test_tweet_tokenizer_expanded"], [284, 3, 1, "", "test_word_tokenize"]], "nltk.test.unit.test_twitter_auth": [[285, 2, 1, "", "TestCredentials"], [285, 1, 1, "", "auth"]], "nltk.test.unit.test_twitter_auth.TestCredentials": [[285, 3, 1, "", "setup_class"], [285, 3, 1, "", "test_correct_file"], [285, 3, 1, "", "test_environment"], [285, 3, 1, "", "test_scenarios_that_should_raise_errors"]], "nltk.test.unit.test_util": [[286, 1, 1, "", "everygram_input"], [286, 1, 1, "", "test_everygrams_max_len"], [286, 1, 1, "", "test_everygrams_min_len"], [286, 1, 1, "", "test_everygrams_pad_left"], [286, 1, 1, "", "test_everygrams_pad_right"], [286, 1, 1, "", "test_everygrams_without_padding"]], "nltk.test.unit.test_wordnet": [[287, 2, 1, "", "WordnNetDemo"]], "nltk.test.unit.test_wordnet.WordnNetDemo": [[287, 3, 1, "", "test_antonyms"], [287, 3, 1, "", "test_derivationally_related_forms"], [287, 3, 1, "", "test_domains"], [287, 3, 1, "", "test_hyperhyponyms"], [287, 3, 1, "", "test_in_topic_domains"], [287, 3, 1, "", "test_iterable_type_for_all_lemma_names"], [287, 3, 1, "", "test_lch"], [287, 3, 1, "", "test_meronyms_holonyms"], [287, 3, 1, "", "test_misc_relations"], [287, 3, 1, "", "test_omw_lemma_no_trailing_underscore"], [287, 3, 1, "", "test_retrieve_synset"], [287, 3, 1, "", "test_retrieve_synsets"], [287, 3, 1, "", "test_wordnet_similarities"]], "nltk.test.unit.translate": [[289, 0, 0, "-", "test_bleu"], [290, 0, 0, "-", "test_gdfa"], [291, 0, 0, "-", "test_ibm1"], [292, 0, 0, "-", "test_ibm2"], [293, 0, 0, "-", "test_ibm3"], [294, 0, 0, "-", "test_ibm4"], [295, 0, 0, "-", "test_ibm5"], [296, 0, 0, "-", "test_ibm_model"], [297, 0, 0, "-", "test_meteor"], [298, 0, 0, "-", "test_nist"], [299, 0, 0, "-", "test_stack_decoder"]], "nltk.test.unit.translate.test_bleu": [[289, 2, 1, "", "TestBLEU"], [289, 2, 1, "", "TestBLEUFringeCases"], [289, 2, 1, "", "TestBLEUWithBadSentence"], [289, 2, 1, "", "TestBLEUWithMultipleWeights"], [289, 2, 1, "", "TestBLEUvsMteval13a"]], "nltk.test.unit.translate.test_bleu.TestBLEU": [[289, 3, 1, "", "test_brevity_penalty"], [289, 3, 1, "", "test_full_matches"], [289, 3, 1, "", "test_modified_precision"], [289, 3, 1, "", "test_partial_matches_hypothesis_longer_than_reference"], [289, 3, 1, "", "test_zero_matches"]], "nltk.test.unit.translate.test_bleu.TestBLEUFringeCases": [[289, 3, 1, "", "test_case_where_n_is_bigger_than_hypothesis_length"], [289, 3, 1, "", "test_empty_hypothesis"], [289, 3, 1, "", "test_empty_references"], [289, 3, 1, "", "test_empty_references_and_hypothesis"], [289, 3, 1, "", "test_length_one_hypothesis"], [289, 3, 1, "", "test_numpy_weights"], [289, 3, 1, "", "test_reference_or_hypothesis_shorter_than_fourgrams"]], "nltk.test.unit.translate.test_bleu.TestBLEUWithBadSentence": [[289, 3, 1, "", "test_corpus_bleu_with_bad_sentence"]], "nltk.test.unit.translate.test_bleu.TestBLEUWithMultipleWeights": [[289, 3, 1, "", "test_corpus_bleu_with_multiple_weights"]], "nltk.test.unit.translate.test_bleu.TestBLEUvsMteval13a": [[289, 3, 1, "", "test_corpus_bleu"]], "nltk.test.unit.translate.test_gdfa": [[290, 2, 1, "", "TestGDFA"]], "nltk.test.unit.translate.test_gdfa.TestGDFA": [[290, 3, 1, "", "test_from_eflomal_outputs"]], "nltk.test.unit.translate.test_ibm1": [[291, 2, 1, "", "TestIBMModel1"]], "nltk.test.unit.translate.test_ibm1.TestIBMModel1": [[291, 3, 1, "", "test_prob_t_a_given_s"], [291, 3, 1, "", "test_set_uniform_translation_probabilities"], [291, 3, 1, "", "test_set_uniform_translation_probabilities_of_non_domain_values"]], "nltk.test.unit.translate.test_ibm2": [[292, 2, 1, "", "TestIBMModel2"]], "nltk.test.unit.translate.test_ibm2.TestIBMModel2": [[292, 3, 1, "", "test_prob_t_a_given_s"], [292, 3, 1, "", "test_set_uniform_alignment_probabilities"], [292, 3, 1, "", "test_set_uniform_alignment_probabilities_of_non_domain_values"]], "nltk.test.unit.translate.test_ibm3": [[293, 2, 1, "", "TestIBMModel3"]], "nltk.test.unit.translate.test_ibm3.TestIBMModel3": [[293, 3, 1, "", "test_prob_t_a_given_s"], [293, 3, 1, "", "test_set_uniform_distortion_probabilities"], [293, 3, 1, "", "test_set_uniform_distortion_probabilities_of_non_domain_values"]], "nltk.test.unit.translate.test_ibm4": [[294, 2, 1, "", "TestIBMModel4"]], "nltk.test.unit.translate.test_ibm4.TestIBMModel4": [[294, 3, 1, "", "test_prob_t_a_given_s"], [294, 3, 1, "", "test_set_uniform_distortion_probabilities_of_max_displacements"], [294, 3, 1, "", "test_set_uniform_distortion_probabilities_of_non_domain_values"]], "nltk.test.unit.translate.test_ibm5": [[295, 2, 1, "", "TestIBMModel5"]], "nltk.test.unit.translate.test_ibm5.TestIBMModel5": [[295, 3, 1, "", "test_prob_t_a_given_s"], [295, 3, 1, "", "test_prune"], [295, 3, 1, "", "test_set_uniform_vacancy_probabilities_of_max_displacements"], [295, 3, 1, "", "test_set_uniform_vacancy_probabilities_of_non_domain_values"]], "nltk.test.unit.translate.test_ibm_model": [[296, 2, 1, "", "TestIBMModel"]], "nltk.test.unit.translate.test_ibm_model.TestIBMModel": [[296, 3, 1, "", "test_best_model2_alignment"], [296, 3, 1, "", "test_best_model2_alignment_does_not_change_pegged_alignment"], [296, 3, 1, "", "test_best_model2_alignment_handles_empty_src_sentence"], [296, 3, 1, "", "test_best_model2_alignment_handles_empty_trg_sentence"], [296, 3, 1, "", "test_best_model2_alignment_handles_fertile_words"], [296, 3, 1, "", "test_hillclimb"], [296, 3, 1, "", "test_neighboring_finds_neighbor_alignments"], [296, 3, 1, "", "test_neighboring_returns_neighbors_with_pegged_alignment"], [296, 3, 1, "", "test_neighboring_sets_neighbor_alignment_info"], [296, 3, 1, "", "test_sample"], [296, 3, 1, "", "test_vocabularies_are_initialized"], [296, 3, 1, "", "test_vocabularies_are_initialized_even_with_empty_corpora"]], "nltk.test.unit.translate.test_meteor": [[297, 2, 1, "", "TestMETEOR"]], "nltk.test.unit.translate.test_meteor.TestMETEOR": [[297, 4, 1, "", "candidate"], [297, 4, 1, "", "reference"], [297, 3, 1, "", "test_candidate_type_check"], [297, 3, 1, "", "test_meteor"], [297, 3, 1, "", "test_reference_type_check"]], "nltk.test.unit.translate.test_nist": [[298, 2, 1, "", "TestNIST"]], "nltk.test.unit.translate.test_nist.TestNIST": [[298, 3, 1, "", "test_sentence_nist"]], "nltk.test.unit.translate.test_stack_decoder": [[299, 2, 1, "", "TestHypothesis"], [299, 2, 1, "", "TestStack"], [299, 2, 1, "", "TestStackDecoder"]], "nltk.test.unit.translate.test_stack_decoder.TestHypothesis": [[299, 3, 1, "", "setUp"], [299, 3, 1, "", "test_total_translated_words"], [299, 3, 1, "", "test_translated_positions"], [299, 3, 1, "", "test_translation_so_far"], [299, 3, 1, "", "test_translation_so_far_for_empty_hypothesis"], [299, 3, 1, "", "test_untranslated_spans"], [299, 3, 1, "", "test_untranslated_spans_for_empty_hypothesis"]], "nltk.test.unit.translate.test_stack_decoder.TestStack": [[299, 3, 1, "", "test_best_returns_none_when_stack_is_empty"], [299, 3, 1, "", "test_best_returns_the_best_hypothesis"], [299, 3, 1, "", "test_push_bumps_off_worst_hypothesis_when_stack_is_full"], [299, 3, 1, "", "test_push_does_not_add_hypothesis_that_falls_below_beam_threshold"], [299, 3, 1, "", "test_push_removes_hypotheses_that_fall_below_beam_threshold"]], "nltk.test.unit.translate.test_stack_decoder.TestStackDecoder": [[299, 3, 1, "", "create_fake_language_model"], [299, 3, 1, "", "create_fake_phrase_table"], [299, 3, 1, "", "test_compute_future_costs"], [299, 3, 1, "", "test_compute_future_costs_for_phrases_not_in_phrase_table"], [299, 3, 1, "", "test_distortion_score"], [299, 3, 1, "", "test_distortion_score_of_first_expansion"], [299, 3, 1, "", "test_find_all_src_phrases"], [299, 3, 1, "", "test_future_score"], [299, 3, 1, "", "test_valid_phrases"]], "nltk.text": [[300, 2, 1, "", "ConcordanceIndex"], [300, 2, 1, "", "ContextIndex"], [300, 2, 1, "", "Text"], [300, 2, 1, "", "TextCollection"], [300, 2, 1, "", "TokenSearcher"]], "nltk.text.ConcordanceIndex": [[300, 3, 1, "", "__init__"], [300, 3, 1, "", "find_concordance"], [300, 3, 1, "", "offsets"], [300, 3, 1, "", "print_concordance"], [300, 3, 1, "", "tokens"]], "nltk.text.ContextIndex": [[300, 3, 1, "", "__init__"], [300, 3, 1, "", "common_contexts"], [300, 3, 1, "", "similar_words"], [300, 3, 1, "", "tokens"], [300, 3, 1, "", "word_similarity_dict"]], "nltk.text.Text": [[300, 3, 1, "", "__init__"], [300, 3, 1, "", "collocation_list"], [300, 3, 1, "", "collocations"], [300, 3, 1, "", "common_contexts"], [300, 3, 1, "", "concordance"], [300, 3, 1, "", "concordance_list"], [300, 3, 1, "", "count"], [300, 3, 1, "", "dispersion_plot"], [300, 3, 1, "", "findall"], [300, 3, 1, "", "generate"], [300, 3, 1, "", "index"], [300, 3, 1, "", "plot"], [300, 3, 1, "", "readability"], [300, 3, 1, "", "similar"], [300, 3, 1, "", "vocab"]], "nltk.text.TextCollection": [[300, 3, 1, "", "__init__"], [300, 3, 1, "", "idf"], [300, 3, 1, "", "tf"], [300, 3, 1, "", "tf_idf"]], "nltk.text.TokenSearcher": [[300, 3, 1, "", "__init__"], [300, 3, 1, "", "findall"]], "nltk.tgrep": [[301, 6, 1, "", "TgrepException"], [301, 1, 1, "", "ancestors"], [301, 1, 1, "", "tgrep_compile"], [301, 1, 1, "", "tgrep_nodes"], [301, 1, 1, "", "tgrep_positions"], [301, 1, 1, "", "tgrep_tokenize"], [301, 1, 1, "", "treepositions_no_leaves"], [301, 1, 1, "", "unique_ancestors"]], "nltk.tokenize": [[303, 0, 0, "-", "api"], [304, 0, 0, "-", "casual"], [305, 0, 0, "-", "destructive"], [306, 0, 0, "-", "legality_principle"], [307, 0, 0, "-", "mwe"], [308, 0, 0, "-", "nist"], [309, 0, 0, "-", "punkt"], [310, 0, 0, "-", "regexp"], [311, 0, 0, "-", "repp"], [302, 1, 1, "", "sent_tokenize"], [312, 0, 0, "-", "sexpr"], [313, 0, 0, "-", "simple"], [314, 0, 0, "-", "sonority_sequencing"], [315, 0, 0, "-", "stanford"], [316, 0, 0, "-", "stanford_segmenter"], [317, 0, 0, "-", "texttiling"], [318, 0, 0, "-", "toktok"], [319, 0, 0, "-", "treebank"], [320, 0, 0, "-", "util"], [302, 1, 1, "", "word_tokenize"]], "nltk.tokenize.api": [[303, 2, 1, "", "StringTokenizer"], [303, 2, 1, "", "TokenizerI"]], "nltk.tokenize.api.StringTokenizer": [[303, 3, 1, "", "span_tokenize"], [303, 3, 1, "", "tokenize"]], "nltk.tokenize.api.TokenizerI": [[303, 3, 1, "", "span_tokenize"], [303, 3, 1, "", "span_tokenize_sents"], [303, 3, 1, "", "tokenize"], [303, 3, 1, "", "tokenize_sents"]], "nltk.tokenize.casual": [[304, 2, 1, "", "TweetTokenizer"], [304, 1, 1, "", "casual_tokenize"], [304, 1, 1, "", "reduce_lengthening"], [304, 1, 1, "", "remove_handles"]], "nltk.tokenize.casual.TweetTokenizer": [[304, 5, 1, "", "PHONE_WORD_RE"], [304, 5, 1, "", "WORD_RE"], [304, 3, 1, "", "__init__"], [304, 3, 1, "", "tokenize"]], "nltk.tokenize.destructive": [[305, 2, 1, "", "MacIntyreContractions"], [305, 2, 1, "", "NLTKWordTokenizer"]], "nltk.tokenize.destructive.MacIntyreContractions": [[305, 4, 1, "", "CONTRACTIONS2"], [305, 4, 1, "", "CONTRACTIONS3"], [305, 4, 1, "", "CONTRACTIONS4"]], "nltk.tokenize.destructive.NLTKWordTokenizer": [[305, 4, 1, "", "CONTRACTIONS2"], [305, 4, 1, "", "CONTRACTIONS3"], [305, 4, 1, "", "CONVERT_PARENTHESES"], [305, 4, 1, "", "DOUBLE_DASHES"], [305, 4, 1, "", "ENDING_QUOTES"], [305, 4, 1, "", "PARENS_BRACKETS"], [305, 4, 1, "", "PUNCTUATION"], [305, 4, 1, "", "STARTING_QUOTES"], [305, 3, 1, "", "span_tokenize"], [305, 3, 1, "", "tokenize"]], "nltk.tokenize.legality_principle": [[306, 2, 1, "", "LegalitySyllableTokenizer"]], "nltk.tokenize.legality_principle.LegalitySyllableTokenizer": [[306, 3, 1, "", "__init__"], [306, 3, 1, "", "find_legal_onsets"], [306, 3, 1, "", "onset"], [306, 3, 1, "", "tokenize"]], "nltk.tokenize.mwe": [[307, 2, 1, "", "MWETokenizer"]], "nltk.tokenize.mwe.MWETokenizer": [[307, 3, 1, "", "__init__"], [307, 3, 1, "", "add_mwe"], [307, 3, 1, "", "tokenize"]], "nltk.tokenize.nist": [[308, 2, 1, "", "NISTTokenizer"]], "nltk.tokenize.nist.NISTTokenizer": [[308, 4, 1, "", "DASH_PRECEED_DIGIT"], [308, 4, 1, "", "INTERNATIONAL_REGEXES"], [308, 4, 1, "", "LANG_DEPENDENT_REGEXES"], [308, 4, 1, "", "NONASCII"], [308, 4, 1, "", "PERIOD_COMMA_FOLLOW"], [308, 4, 1, "", "PERIOD_COMMA_PRECEED"], [308, 4, 1, "", "PUNCT"], [308, 4, 1, "", "PUNCT_1"], [308, 4, 1, "", "PUNCT_2"], [308, 4, 1, "", "STRIP_EOL_HYPHEN"], [308, 4, 1, "", "STRIP_SKIP"], [308, 4, 1, "", "SYMBOLS"], [308, 3, 1, "", "international_tokenize"], [308, 3, 1, "", "lang_independent_sub"], [308, 4, 1, "", "number_regex"], [308, 4, 1, "", "punct_regex"], [308, 4, 1, "", "pup_number"], [308, 4, 1, "", "pup_punct"], [308, 4, 1, "", "pup_symbol"], [308, 4, 1, "", "symbol_regex"], [308, 3, 1, "", "tokenize"]], "nltk.tokenize.punkt": [[309, 2, 1, "", "PunktBaseClass"], [309, 2, 1, "", "PunktLanguageVars"], [309, 2, 1, "", "PunktParameters"], [309, 2, 1, "", "PunktSentenceTokenizer"], [309, 2, 1, "", "PunktToken"], [309, 2, 1, "", "PunktTokenizer"], [309, 2, 1, "", "PunktTrainer"], [309, 1, 1, "", "demo"], [309, 1, 1, "", "format_debug_decision"], [309, 1, 1, "", "load_punkt_params"], [309, 1, 1, "", "save_punkt_params"]], "nltk.tokenize.punkt.PunktBaseClass": [[309, 3, 1, "", "__init__"]], "nltk.tokenize.punkt.PunktLanguageVars": [[309, 4, 1, "", "internal_punctuation"], [309, 3, 1, "", "period_context_re"], [309, 4, 1, "", "re_boundary_realignment"], [309, 4, 1, "", "sent_end_chars"], [309, 3, 1, "", "word_tokenize"]], "nltk.tokenize.punkt.PunktParameters": [[309, 3, 1, "", "__init__"], [309, 4, 1, "", "abbrev_types"], [309, 3, 1, "", "add_ortho_context"], [309, 3, 1, "", "clear_abbrevs"], [309, 3, 1, "", "clear_collocations"], [309, 3, 1, "", "clear_ortho_context"], [309, 3, 1, "", "clear_sent_starters"], [309, 4, 1, "", "collocations"], [309, 4, 1, "", "ortho_context"], [309, 4, 1, "", "sent_starters"]], "nltk.tokenize.punkt.PunktSentenceTokenizer": [[309, 4, 1, "", "PUNCTUATION"], [309, 3, 1, "", "__init__"], [309, 3, 1, "", "debug_decisions"], [309, 3, 1, "", "dump"], [309, 3, 1, "", "sentences_from_text"], [309, 3, 1, "", "sentences_from_text_legacy"], [309, 3, 1, "", "sentences_from_tokens"], [309, 3, 1, "", "span_tokenize"], [309, 3, 1, "", "text_contains_sentbreak"], [309, 3, 1, "", "tokenize"], [309, 3, 1, "", "train"]], "nltk.tokenize.punkt.PunktToken": [[309, 3, 1, "", "__init__"], [309, 4, 1, "", "abbr"], [309, 4, 1, "", "ellipsis"], [309, 5, 1, "", "first_case"], [309, 5, 1, "", "first_lower"], [309, 5, 1, "", "first_upper"], [309, 5, 1, "", "is_alpha"], [309, 5, 1, "", "is_ellipsis"], [309, 5, 1, "", "is_initial"], [309, 5, 1, "", "is_non_punct"], [309, 5, 1, "", "is_number"], [309, 4, 1, "", "linestart"], [309, 4, 1, "", "parastart"], [309, 4, 1, "", "period_final"], [309, 4, 1, "", "sentbreak"], [309, 4, 1, "", "tok"], [309, 4, 1, "", "type"], [309, 5, 1, "", "type_no_period"], [309, 5, 1, "", "type_no_sentperiod"]], "nltk.tokenize.punkt.PunktTokenizer": [[309, 3, 1, "", "__init__"], [309, 3, 1, "", "load_lang"], [309, 3, 1, "", "save_params"]], "nltk.tokenize.punkt.PunktTrainer": [[309, 4, 1, "", "ABBREV"], [309, 4, 1, "", "ABBREV_BACKOFF"], [309, 4, 1, "", "COLLOCATION"], [309, 4, 1, "", "IGNORE_ABBREV_PENALTY"], [309, 4, 1, "", "INCLUDE_ABBREV_COLLOCS"], [309, 4, 1, "", "INCLUDE_ALL_COLLOCS"], [309, 4, 1, "", "MIN_COLLOC_FREQ"], [309, 4, 1, "", "SENT_STARTER"], [309, 3, 1, "", "__init__"], [309, 3, 1, "", "finalize_training"], [309, 3, 1, "", "find_abbrev_types"], [309, 3, 1, "", "freq_threshold"], [309, 3, 1, "", "get_params"], [309, 3, 1, "", "train"], [309, 3, 1, "", "train_tokens"]], "nltk.tokenize.regexp": [[310, 2, 1, "", "BlanklineTokenizer"], [310, 2, 1, "", "RegexpTokenizer"], [310, 2, 1, "", "WhitespaceTokenizer"], [310, 2, 1, "", "WordPunctTokenizer"], [310, 1, 1, "", "blankline_tokenize"], [310, 1, 1, "", "regexp_tokenize"], [310, 1, 1, "", "wordpunct_tokenize"]], "nltk.tokenize.regexp.BlanklineTokenizer": [[310, 3, 1, "", "__init__"]], "nltk.tokenize.regexp.RegexpTokenizer": [[310, 3, 1, "", "__init__"], [310, 3, 1, "", "span_tokenize"], [310, 3, 1, "", "tokenize"]], "nltk.tokenize.regexp.WhitespaceTokenizer": [[310, 3, 1, "", "__init__"]], "nltk.tokenize.regexp.WordPunctTokenizer": [[310, 3, 1, "", "__init__"]], "nltk.tokenize.repp": [[311, 2, 1, "", "ReppTokenizer"]], "nltk.tokenize.repp.ReppTokenizer": [[311, 3, 1, "", "__init__"], [311, 3, 1, "", "find_repptokenizer"], [311, 3, 1, "", "generate_repp_command"], [311, 3, 1, "", "parse_repp_outputs"], [311, 3, 1, "", "tokenize"], [311, 3, 1, "", "tokenize_sents"]], "nltk.tokenize.sexpr": [[312, 2, 1, "", "SExprTokenizer"], [312, 1, 1, "", "sexpr_tokenize"]], "nltk.tokenize.sexpr.SExprTokenizer": [[312, 3, 1, "", "__init__"], [312, 3, 1, "", "tokenize"]], "nltk.tokenize.simple": [[313, 2, 1, "", "CharTokenizer"], [313, 2, 1, "", "LineTokenizer"], [313, 2, 1, "", "SpaceTokenizer"], [313, 2, 1, "", "TabTokenizer"], [313, 1, 1, "", "line_tokenize"]], "nltk.tokenize.simple.CharTokenizer": [[313, 3, 1, "", "span_tokenize"], [313, 3, 1, "", "tokenize"]], "nltk.tokenize.simple.LineTokenizer": [[313, 3, 1, "", "__init__"], [313, 3, 1, "", "span_tokenize"], [313, 3, 1, "", "tokenize"]], "nltk.tokenize.sonority_sequencing": [[314, 2, 1, "", "SyllableTokenizer"]], "nltk.tokenize.sonority_sequencing.SyllableTokenizer": [[314, 3, 1, "", "__init__"], [314, 3, 1, "", "assign_values"], [314, 3, 1, "", "tokenize"], [314, 3, 1, "", "validate_syllables"]], "nltk.tokenize.stanford": [[315, 2, 1, "", "StanfordTokenizer"]], "nltk.tokenize.stanford.StanfordTokenizer": [[315, 3, 1, "", "__init__"], [315, 3, 1, "", "tokenize"]], "nltk.tokenize.stanford_segmenter": [[316, 2, 1, "", "StanfordSegmenter"]], "nltk.tokenize.stanford_segmenter.StanfordSegmenter": [[316, 3, 1, "", "__init__"], [316, 3, 1, "", "default_config"], [316, 3, 1, "", "segment"], [316, 3, 1, "", "segment_file"], [316, 3, 1, "", "segment_sents"], [316, 3, 1, "", "tokenize"]], "nltk.tokenize.texttiling": [[317, 2, 1, "", "TextTilingTokenizer"], [317, 2, 1, "", "TokenSequence"], [317, 2, 1, "", "TokenTableField"], [317, 1, 1, "", "demo"], [317, 1, 1, "", "smooth"]], "nltk.tokenize.texttiling.TextTilingTokenizer": [[317, 3, 1, "", "__init__"], [317, 3, 1, "", "tokenize"]], "nltk.tokenize.texttiling.TokenSequence": [[317, 3, 1, "", "__init__"]], "nltk.tokenize.texttiling.TokenTableField": [[317, 3, 1, "", "__init__"]], "nltk.tokenize.toktok": [[318, 2, 1, "", "ToktokTokenizer"]], "nltk.tokenize.toktok.ToktokTokenizer": [[318, 4, 1, "", "AMPERCENT"], [318, 4, 1, "", "CLOSE_PUNCT"], [318, 4, 1, "", "CLOSE_PUNCT_RE"], [318, 4, 1, "", "COMMA_IN_NUM"], [318, 4, 1, "", "CURRENCY_SYM"], [318, 4, 1, "", "CURRENCY_SYM_RE"], [318, 4, 1, "", "EN_EM_DASHES"], [318, 4, 1, "", "FINAL_PERIOD_1"], [318, 4, 1, "", "FINAL_PERIOD_2"], [318, 4, 1, "", "FUNKY_PUNCT_1"], [318, 4, 1, "", "FUNKY_PUNCT_2"], [318, 4, 1, "", "LSTRIP"], [318, 4, 1, "", "MULTI_COMMAS"], [318, 4, 1, "", "MULTI_DASHES"], [318, 4, 1, "", "MULTI_DOTS"], [318, 4, 1, "", "NON_BREAKING"], [318, 4, 1, "", "ONE_SPACE"], [318, 4, 1, "", "OPEN_PUNCT"], [318, 4, 1, "", "OPEN_PUNCT_RE"], [318, 4, 1, "", "PIPE"], [318, 4, 1, "", "PROB_SINGLE_QUOTES"], [318, 4, 1, "", "RSTRIP"], [318, 4, 1, "", "STUPID_QUOTES_1"], [318, 4, 1, "", "STUPID_QUOTES_2"], [318, 4, 1, "", "TAB"], [318, 4, 1, "", "TOKTOK_REGEXES"], [318, 4, 1, "", "URL_FOE_1"], [318, 4, 1, "", "URL_FOE_2"], [318, 4, 1, "", "URL_FOE_3"], [318, 4, 1, "", "URL_FOE_4"], [318, 3, 1, "", "tokenize"]], "nltk.tokenize.treebank": [[319, 2, 1, "", "TreebankWordDetokenizer"], [319, 2, 1, "", "TreebankWordTokenizer"]], "nltk.tokenize.treebank.TreebankWordDetokenizer": [[319, 4, 1, "", "CONTRACTIONS2"], [319, 4, 1, "", "CONTRACTIONS3"], [319, 4, 1, "", "CONVERT_PARENTHESES"], [319, 4, 1, "", "DOUBLE_DASHES"], [319, 4, 1, "", "ENDING_QUOTES"], [319, 4, 1, "", "PARENS_BRACKETS"], [319, 4, 1, "", "PUNCTUATION"], [319, 4, 1, "", "STARTING_QUOTES"], [319, 3, 1, "", "detokenize"], [319, 3, 1, "", "tokenize"]], "nltk.tokenize.treebank.TreebankWordTokenizer": [[319, 4, 1, "", "CONTRACTIONS2"], [319, 4, 1, "", "CONTRACTIONS3"], [319, 4, 1, "", "CONVERT_PARENTHESES"], [319, 4, 1, "", "DOUBLE_DASHES"], [319, 4, 1, "", "ENDING_QUOTES"], [319, 4, 1, "", "PARENS_BRACKETS"], [319, 4, 1, "", "PUNCTUATION"], [319, 4, 1, "", "STARTING_QUOTES"], [319, 3, 1, "", "span_tokenize"], [319, 3, 1, "", "tokenize"]], "nltk.tokenize.util": [[320, 2, 1, "", "CJKChars"], [320, 1, 1, "", "align_tokens"], [320, 1, 1, "", "is_cjk"], [320, 1, 1, "", "regexp_span_tokenize"], [320, 1, 1, "", "spans_to_relative"], [320, 1, 1, "", "string_span_tokenize"], [320, 1, 1, "", "xml_escape"], [320, 1, 1, "", "xml_unescape"]], "nltk.tokenize.util.CJKChars": [[320, 4, 1, "", "CJK_Compatibility_Forms"], [320, 4, 1, "", "CJK_Compatibility_Ideographs"], [320, 4, 1, "", "CJK_Radicals"], [320, 4, 1, "", "Hangul_Jamo"], [320, 4, 1, "", "Hangul_Syllables"], [320, 4, 1, "", "Katakana_Hangul_Halfwidth"], [320, 4, 1, "", "Phags_Pa"], [320, 4, 1, "", "Supplementary_Ideographic_Plane"], [320, 4, 1, "", "ranges"]], "nltk.toolbox": [[321, 2, 1, "", "StandardFormat"], [321, 2, 1, "", "ToolboxData"], [321, 2, 1, "", "ToolboxSettings"], [321, 1, 1, "", "add_blank_lines"], [321, 1, 1, "", "add_default_fields"], [321, 1, 1, "", "demo"], [321, 1, 1, "", "remove_blanks"], [321, 1, 1, "", "sort_fields"], [321, 1, 1, "", "to_settings_string"], [321, 1, 1, "", "to_sfm_string"]], "nltk.toolbox.StandardFormat": [[321, 3, 1, "", "__init__"], [321, 3, 1, "", "close"], [321, 3, 1, "", "fields"], [321, 3, 1, "", "open"], [321, 3, 1, "", "open_string"], [321, 3, 1, "", "raw_fields"]], "nltk.toolbox.ToolboxData": [[321, 3, 1, "", "parse"]], "nltk.toolbox.ToolboxSettings": [[321, 3, 1, "", "__init__"], [321, 3, 1, "", "parse"]], "nltk.translate": [[323, 0, 0, "-", "api"], [324, 0, 0, "-", "bleu_score"], [325, 0, 0, "-", "chrf_score"], [326, 0, 0, "-", "gale_church"], [327, 0, 0, "-", "gdfa"], [328, 0, 0, "-", "gleu_score"], [329, 0, 0, "-", "ibm1"], [330, 0, 0, "-", "ibm2"], [331, 0, 0, "-", "ibm3"], [332, 0, 0, "-", "ibm4"], [333, 0, 0, "-", "ibm5"], [334, 0, 0, "-", "ibm_model"], [335, 0, 0, "-", "meteor_score"], [336, 0, 0, "-", "metrics"], [337, 0, 0, "-", "nist_score"], [338, 0, 0, "-", "phrase_based"], [339, 0, 0, "-", "ribes_score"], [340, 0, 0, "-", "stack_decoder"]], "nltk.translate.api": [[323, 2, 1, "", "AlignedSent"], [323, 2, 1, "", "Alignment"], [323, 2, 1, "", "PhraseTable"], [323, 2, 1, "", "PhraseTableEntry"]], "nltk.translate.api.AlignedSent": [[323, 3, 1, "", "__init__"], [323, 5, 1, "", "alignment"], [323, 3, 1, "", "invert"], [323, 5, 1, "", "mots"], [323, 5, 1, "", "words"]], "nltk.translate.api.Alignment": [[323, 3, 1, "", "__new__"], [323, 3, 1, "", "fromstring"], [323, 3, 1, "", "invert"], [323, 3, 1, "", "range"]], "nltk.translate.api.PhraseTable": [[323, 3, 1, "", "__init__"], [323, 3, 1, "", "add"], [323, 3, 1, "", "translations_for"]], "nltk.translate.api.PhraseTableEntry": [[323, 3, 1, "", "__new__"], [323, 4, 1, "", "log_prob"], [323, 4, 1, "", "trg_phrase"]], "nltk.translate.bleu_score": [[324, 2, 1, "", "Fraction"], [324, 2, 1, "", "SmoothingFunction"], [324, 1, 1, "", "brevity_penalty"], [324, 1, 1, "", "closest_ref_length"], [324, 1, 1, "", "corpus_bleu"], [324, 1, 1, "", "modified_precision"], [324, 1, 1, "", "sentence_bleu"]], "nltk.translate.bleu_score.Fraction": [[324, 3, 1, "", "__new__"], [324, 5, 1, "", "denominator"], [324, 5, 1, "", "numerator"]], "nltk.translate.bleu_score.SmoothingFunction": [[324, 3, 1, "", "__init__"], [324, 3, 1, "", "method0"], [324, 3, 1, "", "method1"], [324, 3, 1, "", "method2"], [324, 3, 1, "", "method3"], [324, 3, 1, "", "method4"], [324, 3, 1, "", "method5"], [324, 3, 1, "", "method6"], [324, 3, 1, "", "method7"]], "nltk.translate.chrf_score": [[325, 1, 1, "", "chrf_precision_recall_fscore_support"], [325, 1, 1, "", "corpus_chrf"], [325, 1, 1, "", "sentence_chrf"]], "nltk.translate.gale_church": [[326, 2, 1, "", "LanguageIndependent"], [326, 1, 1, "", "align_blocks"], [326, 1, 1, "", "align_log_prob"], [326, 1, 1, "", "align_texts"], [326, 1, 1, "", "erfcc"], [326, 1, 1, "", "norm_cdf"], [326, 1, 1, "", "norm_logsf"], [326, 1, 1, "", "parse_token_stream"], [326, 1, 1, "", "split_at"], [326, 1, 1, "", "trace"]], "nltk.translate.gale_church.LanguageIndependent": [[326, 4, 1, "", "AVERAGE_CHARACTERS"], [326, 4, 1, "", "PRIORS"], [326, 4, 1, "", "VARIANCE_CHARACTERS"]], "nltk.translate.gdfa": [[327, 1, 1, "", "grow_diag_final_and"]], "nltk.translate.gleu_score": [[328, 1, 1, "", "corpus_gleu"], [328, 1, 1, "", "sentence_gleu"]], "nltk.translate.ibm1": [[329, 2, 1, "", "IBMModel1"]], "nltk.translate.ibm1.IBMModel1": [[329, 3, 1, "", "__init__"], [329, 3, 1, "", "align"], [329, 3, 1, "", "align_all"], [329, 3, 1, "", "prob_alignment_point"], [329, 3, 1, "", "prob_all_alignments"], [329, 3, 1, "", "prob_t_a_given_s"], [329, 3, 1, "", "set_uniform_probabilities"], [329, 3, 1, "", "train"]], "nltk.translate.ibm2": [[330, 2, 1, "", "IBMModel2"], [330, 2, 1, "", "Model2Counts"]], "nltk.translate.ibm2.IBMModel2": [[330, 3, 1, "", "__init__"], [330, 3, 1, "", "align"], [330, 3, 1, "", "align_all"], [330, 3, 1, "", "maximize_alignment_probabilities"], [330, 3, 1, "", "prob_alignment_point"], [330, 3, 1, "", "prob_all_alignments"], [330, 3, 1, "", "prob_t_a_given_s"], [330, 3, 1, "", "set_uniform_probabilities"], [330, 3, 1, "", "train"]], "nltk.translate.ibm2.Model2Counts": [[330, 3, 1, "", "__init__"], [330, 3, 1, "", "update_alignment"], [330, 3, 1, "", "update_lexical_translation"]], "nltk.translate.ibm3": [[331, 2, 1, "", "IBMModel3"], [331, 2, 1, "", "Model3Counts"]], "nltk.translate.ibm3.IBMModel3": [[331, 3, 1, "", "__init__"], [331, 3, 1, "", "maximize_distortion_probabilities"], [331, 3, 1, "", "prob_t_a_given_s"], [331, 3, 1, "", "reset_probabilities"], [331, 3, 1, "", "set_uniform_probabilities"], [331, 3, 1, "", "train"]], "nltk.translate.ibm3.Model3Counts": [[331, 3, 1, "", "__init__"], [331, 3, 1, "", "update_distortion"]], "nltk.translate.ibm4": [[332, 2, 1, "", "IBMModel4"], [332, 2, 1, "", "Model4Counts"]], "nltk.translate.ibm4.IBMModel4": [[332, 3, 1, "", "__init__"], [332, 3, 1, "", "maximize_distortion_probabilities"], [332, 3, 1, "", "model4_prob_t_a_given_s"], [332, 3, 1, "", "prob_t_a_given_s"], [332, 3, 1, "", "reset_probabilities"], [332, 3, 1, "", "set_uniform_probabilities"], [332, 3, 1, "", "train"]], "nltk.translate.ibm4.Model4Counts": [[332, 3, 1, "", "__init__"], [332, 3, 1, "", "update_distortion"]], "nltk.translate.ibm5": [[333, 2, 1, "", "IBMModel5"], [333, 2, 1, "", "Model5Counts"], [333, 2, 1, "", "Slots"]], "nltk.translate.ibm5.IBMModel5": [[333, 4, 1, "", "MIN_SCORE_FACTOR"], [333, 3, 1, "", "__init__"], [333, 3, 1, "", "hillclimb"], [333, 3, 1, "", "maximize_vacancy_probabilities"], [333, 3, 1, "", "prob_t_a_given_s"], [333, 3, 1, "", "prune"], [333, 3, 1, "", "reset_probabilities"], [333, 3, 1, "", "sample"], [333, 3, 1, "", "set_uniform_probabilities"], [333, 3, 1, "", "train"]], "nltk.translate.ibm5.Model5Counts": [[333, 3, 1, "", "__init__"], [333, 3, 1, "", "update_vacancy"]], "nltk.translate.ibm5.Slots": [[333, 3, 1, "", "__init__"], [333, 3, 1, "", "occupy"], [333, 3, 1, "", "vacancies_at"]], "nltk.translate.ibm_model": [[334, 2, 1, "", "AlignmentInfo"], [334, 2, 1, "", "Counts"], [334, 2, 1, "", "IBMModel"], [334, 1, 1, "", "longest_target_sentence_length"]], "nltk.translate.ibm_model.AlignmentInfo": [[334, 3, 1, "", "__init__"], [334, 4, 1, "", "alignment"], [334, 3, 1, "", "center_of_cept"], [334, 4, 1, "", "cepts"], [334, 3, 1, "", "fertility_of_i"], [334, 3, 1, "", "is_head_word"], [334, 3, 1, "", "previous_cept"], [334, 3, 1, "", "previous_in_tablet"], [334, 4, 1, "", "score"], [334, 4, 1, "", "src_sentence"], [334, 4, 1, "", "trg_sentence"], [334, 3, 1, "", "zero_indexed_alignment"]], "nltk.translate.ibm_model.Counts": [[334, 3, 1, "", "__init__"], [334, 3, 1, "", "update_fertility"], [334, 3, 1, "", "update_lexical_translation"], [334, 3, 1, "", "update_null_generation"]], "nltk.translate.ibm_model.IBMModel": [[334, 4, 1, "", "MIN_PROB"], [334, 3, 1, "", "__init__"], [334, 3, 1, "", "best_model2_alignment"], [334, 3, 1, "", "hillclimb"], [334, 3, 1, "", "init_vocab"], [334, 3, 1, "", "maximize_fertility_probabilities"], [334, 3, 1, "", "maximize_lexical_translation_probabilities"], [334, 3, 1, "", "maximize_null_generation_probabilities"], [334, 3, 1, "", "neighboring"], [334, 3, 1, "", "prob_of_alignments"], [334, 3, 1, "", "prob_t_a_given_s"], [334, 3, 1, "", "reset_probabilities"], [334, 3, 1, "", "sample"], [334, 3, 1, "", "set_uniform_probabilities"]], "nltk.translate.meteor_score": [[335, 1, 1, "", "align_words"], [335, 1, 1, "", "exact_match"], [335, 1, 1, "", "meteor_score"], [335, 1, 1, "", "single_meteor_score"], [335, 1, 1, "", "stem_match"], [335, 1, 1, "", "wordnetsyn_match"]], "nltk.translate.metrics": [[336, 1, 1, "", "alignment_error_rate"]], "nltk.translate.nist_score": [[337, 1, 1, "", "corpus_nist"], [337, 1, 1, "", "nist_length_penalty"], [337, 1, 1, "", "sentence_nist"]], "nltk.translate.phrase_based": [[338, 1, 1, "", "extract"], [338, 1, 1, "", "phrase_extraction"]], "nltk.translate.ribes_score": [[339, 1, 1, "", "corpus_ribes"], [339, 1, 1, "", "find_increasing_sequences"], [339, 1, 1, "", "kendall_tau"], [339, 1, 1, "", "position_of_ngram"], [339, 1, 1, "", "sentence_ribes"], [339, 1, 1, "", "spearman_rho"], [339, 1, 1, "", "word_rank_alignment"]], "nltk.translate.stack_decoder": [[340, 2, 1, "", "StackDecoder"]], "nltk.translate.stack_decoder.StackDecoder": [[340, 3, 1, "", "__init__"], [340, 4, 1, "", "beam_threshold"], [340, 3, 1, "", "compute_future_scores"], [340, 5, 1, "", "distortion_factor"], [340, 3, 1, "", "distortion_score"], [340, 3, 1, "", "expansion_score"], [340, 3, 1, "", "find_all_src_phrases"], [340, 3, 1, "", "future_score"], [340, 4, 1, "", "stack_size"], [340, 3, 1, "", "translate"], [340, 3, 1, "", "valid_phrases"], [340, 4, 1, "", "word_penalty"]], "nltk.tree": [[341, 2, 1, "", "ImmutableMultiParentedTree"], [341, 2, 1, "", "ImmutableParentedTree"], [341, 2, 1, "", "ImmutableProbabilisticTree"], [341, 2, 1, "", "ImmutableTree"], [341, 2, 1, "", "MultiParentedTree"], [341, 2, 1, "", "ParentedTree"], [341, 2, 1, "", "ProbabilisticTree"], [341, 2, 1, "", "Tree"], [341, 2, 1, "", "TreePrettyPrinter"], [341, 1, 1, "", "bracket_parse"], [341, 1, 1, "", "chomsky_normal_form"], [341, 1, 1, "", "collapse_unary"], [342, 0, 0, "-", "immutable"], [343, 0, 0, "-", "parented"], [344, 0, 0, "-", "parsing"], [345, 0, 0, "-", "prettyprinter"], [346, 0, 0, "-", "probabilistic"], [341, 1, 1, "", "sinica_parse"], [347, 0, 0, "-", "transforms"], [348, 0, 0, "-", "tree"], [341, 1, 1, "", "un_chomsky_normal_form"]], "nltk.tree.ImmutableProbabilisticTree": [[341, 3, 1, "", "__init__"], [341, 3, 1, "", "convert"], [341, 3, 1, "", "copy"]], "nltk.tree.ImmutableTree": [[341, 3, 1, "", "__init__"], [341, 3, 1, "", "append"], [341, 3, 1, "", "extend"], [341, 3, 1, "", "pop"], [341, 3, 1, "", "remove"], [341, 3, 1, "", "reverse"], [341, 3, 1, "", "set_label"], [341, 3, 1, "", "sort"]], "nltk.tree.MultiParentedTree": [[341, 3, 1, "", "__init__"], [341, 3, 1, "", "left_siblings"], [341, 3, 1, "", "parent_indices"], [341, 3, 1, "", "parents"], [341, 3, 1, "", "right_siblings"], [341, 3, 1, "", "roots"], [341, 3, 1, "", "treepositions"]], "nltk.tree.ParentedTree": [[341, 3, 1, "", "__init__"], [341, 3, 1, "", "copy"], [341, 3, 1, "", "left_sibling"], [341, 3, 1, "", "parent"], [341, 3, 1, "", "parent_index"], [341, 3, 1, "", "right_sibling"], [341, 3, 1, "", "root"], [341, 3, 1, "", "treeposition"]], "nltk.tree.ProbabilisticTree": [[341, 3, 1, "", "__init__"], [341, 3, 1, "", "convert"], [341, 3, 1, "", "copy"]], "nltk.tree.Tree": [[341, 3, 1, "", "__init__"], [341, 3, 1, "", "chomsky_normal_form"], [341, 3, 1, "", "collapse_unary"], [341, 3, 1, "", "convert"], [341, 3, 1, "", "copy"], [341, 3, 1, "", "draw"], [341, 3, 1, "", "flatten"], [341, 3, 1, "", "freeze"], [341, 3, 1, "", "fromlist"], [341, 3, 1, "", "fromstring"], [341, 3, 1, "", "height"], [341, 3, 1, "", "label"], [341, 3, 1, "", "leaf_treeposition"], [341, 3, 1, "", "leaves"], [341, 5, 1, "", "node"], [341, 3, 1, "", "pformat"], [341, 3, 1, "", "pformat_latex_qtree"], [341, 3, 1, "", "pos"], [341, 3, 1, "", "pprint"], [341, 3, 1, "", "pretty_print"], [341, 3, 1, "", "productions"], [341, 3, 1, "", "set_label"], [341, 3, 1, "", "subtrees"], [341, 3, 1, "", "treeposition_spanning_leaves"], [341, 3, 1, "", "treepositions"], [341, 3, 1, "", "un_chomsky_normal_form"]], "nltk.tree.TreePrettyPrinter": [[341, 3, 1, "", "__init__"], [341, 3, 1, "", "nodecoords"], [341, 3, 1, "", "svg"], [341, 3, 1, "", "text"]], "nltk.tree.immutable": [[342, 2, 1, "", "ImmutableMultiParentedTree"], [342, 2, 1, "", "ImmutableParentedTree"], [342, 2, 1, "", "ImmutableProbabilisticTree"], [342, 2, 1, "", "ImmutableTree"]], "nltk.tree.immutable.ImmutableProbabilisticTree": [[342, 3, 1, "", "__init__"], [342, 3, 1, "", "convert"], [342, 3, 1, "", "copy"]], "nltk.tree.immutable.ImmutableTree": [[342, 3, 1, "", "__init__"], [342, 3, 1, "", "append"], [342, 3, 1, "", "extend"], [342, 3, 1, "", "pop"], [342, 3, 1, "", "remove"], [342, 3, 1, "", "reverse"], [342, 3, 1, "", "set_label"], [342, 3, 1, "", "sort"]], "nltk.tree.parented": [[343, 2, 1, "", "MultiParentedTree"], [343, 2, 1, "", "ParentedTree"]], "nltk.tree.parented.MultiParentedTree": [[343, 3, 1, "", "__init__"], [343, 3, 1, "", "left_siblings"], [343, 3, 1, "", "parent_indices"], [343, 3, 1, "", "parents"], [343, 3, 1, "", "right_siblings"], [343, 3, 1, "", "roots"], [343, 3, 1, "", "treepositions"]], "nltk.tree.parented.ParentedTree": [[343, 3, 1, "", "__init__"], [343, 3, 1, "", "copy"], [343, 3, 1, "", "left_sibling"], [343, 3, 1, "", "parent"], [343, 3, 1, "", "parent_index"], [343, 3, 1, "", "right_sibling"], [343, 3, 1, "", "root"], [343, 3, 1, "", "treeposition"]], "nltk.tree.parsing": [[344, 1, 1, "", "bracket_parse"], [344, 1, 1, "", "sinica_parse"]], "nltk.tree.prettyprinter": [[345, 2, 1, "", "TreePrettyPrinter"]], "nltk.tree.prettyprinter.TreePrettyPrinter": [[345, 3, 1, "", "__init__"], [345, 3, 1, "", "nodecoords"], [345, 3, 1, "", "svg"], [345, 3, 1, "", "text"]], "nltk.tree.probabilistic": [[346, 2, 1, "", "ProbabilisticTree"]], "nltk.tree.probabilistic.ProbabilisticTree": [[346, 3, 1, "", "__init__"], [346, 3, 1, "", "convert"], [346, 3, 1, "", "copy"]], "nltk.tree.transforms": [[347, 1, 1, "", "chomsky_normal_form"], [347, 1, 1, "", "collapse_unary"], [347, 1, 1, "", "un_chomsky_normal_form"]], "nltk.tree.tree": [[348, 2, 1, "", "Tree"]], "nltk.tree.tree.Tree": [[348, 3, 1, "", "__init__"], [348, 3, 1, "", "chomsky_normal_form"], [348, 3, 1, "", "collapse_unary"], [348, 3, 1, "", "convert"], [348, 3, 1, "", "copy"], [348, 3, 1, "", "draw"], [348, 3, 1, "", "flatten"], [348, 3, 1, "", "freeze"], [348, 3, 1, "", "fromlist"], [348, 3, 1, "", "fromstring"], [348, 3, 1, "", "height"], [348, 3, 1, "", "label"], [348, 3, 1, "", "leaf_treeposition"], [348, 3, 1, "", "leaves"], [348, 5, 1, "", "node"], [348, 3, 1, "", "pformat"], [348, 3, 1, "", "pformat_latex_qtree"], [348, 3, 1, "", "pos"], [348, 3, 1, "", "pprint"], [348, 3, 1, "", "pretty_print"], [348, 3, 1, "", "productions"], [348, 3, 1, "", "set_label"], [348, 3, 1, "", "subtrees"], [348, 3, 1, "", "treeposition_spanning_leaves"], [348, 3, 1, "", "treepositions"], [348, 3, 1, "", "un_chomsky_normal_form"]], "nltk.treeprettyprinter": [[349, 2, 1, "", "TreePrettyPrinter"]], "nltk.treetransforms": [[350, 1, 1, "", "chomsky_normal_form"], [350, 1, 1, "", "collapse_unary"], [350, 1, 1, "", "un_chomsky_normal_form"]], "nltk.twitter": [[352, 0, 0, "-", "api"], [353, 0, 0, "-", "common"], [354, 0, 0, "-", "twitter_demo"], [355, 0, 0, "-", "twitterclient"], [356, 0, 0, "-", "util"]], "nltk.twitter.api": [[352, 2, 1, "", "BasicTweetHandler"], [352, 2, 1, "", "LocalTimezoneOffsetWithUTC"], [352, 2, 1, "", "TweetHandlerI"]], "nltk.twitter.api.BasicTweetHandler": [[352, 3, 1, "", "__init__"], [352, 4, 1, "", "counter"], [352, 3, 1, "", "do_continue"], [352, 4, 1, "", "do_stop"]], "nltk.twitter.api.LocalTimezoneOffsetWithUTC": [[352, 4, 1, "", "DSTOFFSET"], [352, 4, 1, "", "STDOFFSET"], [352, 3, 1, "", "utcoffset"]], "nltk.twitter.api.TweetHandlerI": [[352, 3, 1, "", "__init__"], [352, 3, 1, "", "check_date_limit"], [352, 3, 1, "", "handle"], [352, 3, 1, "", "on_finish"]], "nltk.twitter.common": [[353, 1, 1, "", "extract_fields"], [353, 1, 1, "", "get_header_field_list"], [353, 1, 1, "", "json2csv"], [353, 1, 1, "", "json2csv_entities"]], "nltk.twitter.twitter_demo": [[354, 7, 1, "", "ALL"], [354, 1, 1, "", "corpusreader_demo"], [354, 1, 1, "", "expand_tweetids_demo"], [354, 1, 1, "", "followtoscreen_demo"], [354, 1, 1, "", "limit_by_time_demo"], [354, 1, 1, "", "lookup_by_userid_demo"], [354, 1, 1, "", "sampletoscreen_demo"], [354, 1, 1, "", "search_demo"], [354, 1, 1, "", "setup"], [354, 1, 1, "", "streamtofile_demo"], [354, 1, 1, "", "tracktoscreen_demo"], [354, 1, 1, "", "tweets_by_user_demo"], [354, 1, 1, "", "twitterclass_demo"], [354, 1, 1, "", "verbose"], [354, 1, 1, "", "yesterday"]], "nltk.twitter.twitterclient": [[355, 2, 1, "", "Query"], [355, 2, 1, "", "Streamer"], [355, 2, 1, "", "TweetViewer"], [355, 2, 1, "", "TweetWriter"], [355, 2, 1, "", "Twitter"]], "nltk.twitter.twitterclient.Query": [[355, 3, 1, "", "__init__"], [355, 3, 1, "", "expand_tweetids"], [355, 3, 1, "", "register"], [355, 3, 1, "", "search_tweets"], [355, 3, 1, "", "user_info_from_id"], [355, 3, 1, "", "user_tweets"]], "nltk.twitter.twitterclient.Streamer": [[355, 3, 1, "", "__init__"], [355, 3, 1, "", "filter"], [355, 3, 1, "", "on_error"], [355, 3, 1, "", "on_success"], [355, 3, 1, "", "register"], [355, 3, 1, "", "sample"]], "nltk.twitter.twitterclient.TweetViewer": [[355, 3, 1, "", "handle"], [355, 3, 1, "", "on_finish"]], "nltk.twitter.twitterclient.TweetWriter": [[355, 3, 1, "", "__init__"], [355, 3, 1, "", "do_continue"], [355, 3, 1, "", "handle"], [355, 3, 1, "", "on_finish"], [355, 3, 1, "", "timestamped_file"]], "nltk.twitter.twitterclient.Twitter": [[355, 3, 1, "", "__init__"], [355, 3, 1, "", "tweets"]], "nltk.twitter.util": [[356, 2, 1, "", "Authenticate"], [356, 1, 1, "", "add_access_token"], [356, 1, 1, "", "credsfromfile"], [356, 1, 1, "", "guess_path"]], "nltk.twitter.util.Authenticate": [[356, 3, 1, "", "__init__"], [356, 3, 1, "", "load_creds"]], "nltk.util": [[357, 2, 1, "", "Index"], [357, 1, 1, "", "acyclic_branches_depth_first"], [357, 1, 1, "", "acyclic_breadth_first"], [357, 1, 1, "", "acyclic_depth_first"], [357, 1, 1, "", "acyclic_dic2tree"], [357, 1, 1, "", "bigrams"], [357, 1, 1, "", "binary_search_file"], [357, 1, 1, "", "breadth_first"], [357, 1, 1, "", "choose"], [357, 1, 1, "", "clean_html"], [357, 1, 1, "", "clean_url"], [357, 1, 1, "", "cut_string"], [357, 1, 1, "", "edge_closure"], [357, 1, 1, "", "edges2dot"], [357, 1, 1, "", "elementtree_indent"], [357, 1, 1, "", "everygrams"], [357, 1, 1, "", "filestring"], [357, 1, 1, "", "flatten"], [357, 1, 1, "", "guess_encoding"], [357, 1, 1, "", "in_idle"], [357, 1, 1, "", "invert_dict"], [357, 1, 1, "", "invert_graph"], [357, 1, 1, "", "ngrams"], [357, 1, 1, "", "pad_sequence"], [357, 1, 1, "", "pairwise"], [357, 1, 1, "", "parallelize_preprocess"], [357, 1, 1, "", "pr"], [357, 1, 1, "", "print_string"], [357, 1, 1, "", "re_show"], [357, 1, 1, "", "set_proxy"], [357, 1, 1, "", "skipgrams"], [357, 1, 1, "", "tokenwrap"], [357, 1, 1, "", "transitive_closure"], [357, 1, 1, "", "trigrams"], [357, 1, 1, "", "unique_list"], [357, 1, 1, "", "unweighted_minimum_spanning_dict"], [357, 1, 1, "", "unweighted_minimum_spanning_digraph"], [357, 1, 1, "", "unweighted_minimum_spanning_tree"]], "nltk.util.Index": [[357, 3, 1, "", "__init__"]], "nltk.wsd": [[358, 1, 1, "", "lesk"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "exception", "Python exception"], "7": ["py", "data", "Python data"]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:attribute", "5": "py:property", "6": "py:exception", "7": "py:data"}, "terms": {"": [7, 8, 10, 14, 22, 23, 25, 27, 28, 29, 30, 33, 34, 35, 36, 38, 39, 42, 43, 44, 47, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 113, 117, 118, 119, 120, 121, 124, 125, 127, 131, 132, 134, 135, 136, 142, 143, 144, 145, 146, 148, 149, 152, 159, 161, 162, 163, 165, 167, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 181, 182, 183, 184, 186, 187, 190, 191, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 223, 226, 229, 232, 233, 235, 281, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 341, 344, 345, 348, 354, 355, 356, 357, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 379, 380, 381, 382, 384, 386, 388, 389, 391, 392, 394, 395, 398, 399, 401, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 422], "0": [14, 25, 28, 29, 30, 32, 33, 35, 36, 39, 46, 48, 52, 57, 67, 68, 72, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 91, 92, 95, 100, 104, 106, 107, 111, 113, 117, 120, 121, 126, 128, 129, 130, 131, 135, 137, 138, 140, 142, 144, 145, 146, 147, 148, 150, 151, 152, 154, 162, 163, 164, 165, 166, 167, 170, 171, 173, 174, 176, 177, 178, 179, 180, 183, 186, 192, 194, 196, 198, 207, 209, 213, 214, 215, 216, 217, 218, 222, 223, 229, 231, 232, 233, 265, 266, 300, 301, 302, 305, 306, 308, 309, 311, 317, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 347, 348, 355, 357, 362, 363, 365, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 417, 420, 422], "00": [151, 373, 410, 417], "000": [25, 96, 148, 151, 216, 371, 373, 397, 399, 409, 410, 422], "0000": [147, 214, 409], "000000000000": 394, "00001": 166, "000010000100": [151, 394], "000100000010": [151, 394], "001": [216, 232, 306, 409], "006060": 118, "007936507936": 367, "0099": 326, "01": [57, 72, 73, 95, 107, 121, 163, 357, 373, 379, 398, 400, 401, 406, 413, 417, 418, 419], "0100": 151, "011": [151, 326], "0111940298507": 367, "011363636": 400, "0123456789": 411, "017649766667026317": 400, "01a": 367, "01b": 367, "02": [57, 72, 95, 107, 163, 357, 358, 406, 413, 417, 418, 419], "0222": 391, "022727272727272728": 400, "028": 417, "02a": 367, "02b": 367, "03": [57, 95, 107, 339, 347, 350, 367, 373, 406, 417, 419], "033": [332, 333], "0370": 324, "03744e": 398, "0391": 373, "03a": 367, "03b": 367, "04": [57, 83, 91, 95, 96, 107, 367, 400, 401, 406, 417, 419], "05": [32, 163, 373, 391, 417, 419], "054": 331, "0578034682080": 367, "06": [48, 50, 57, 68, 107, 357, 398, 417, 419], "062": 329, "064": 402, "0666667": 398, "07": [398, 417, 419], "0714286": 398, "073": 329, "074": 405, "075": 417, "07692": 324, "079": 405, "08": [57, 72, 95, 373, 406], "08144": 328, "08144v2": 328, "0842696629213": 367, "08433050215340411": 400, "085": 409, "089": 326, "09": [418, 419], "090163934426": 367, "0909": 328, "090909": 391, "092": 405, "094": 405, "0a0": 422, "0a1": 422, "0a2": [418, 422], "0a4": 422, "0b": 422, "0b1": 422, "0b2": 422, "0b9": 422, "0f": 371, "0gebofduzn": 410, "0th": 339, "1": [0, 23, 28, 29, 33, 36, 46, 48, 49, 50, 51, 52, 53, 57, 62, 67, 68, 72, 75, 78, 79, 80, 81, 85, 91, 92, 100, 102, 103, 105, 106, 107, 109, 111, 112, 113, 117, 118, 119, 120, 121, 130, 131, 134, 135, 136, 137, 138, 140, 142, 144, 145, 146, 147, 148, 150, 151, 152, 162, 163, 164, 165, 166, 167, 169, 170, 171, 176, 177, 178, 179, 182, 186, 187, 192, 198, 203, 204, 205, 209, 214, 216, 217, 218, 219, 223, 225, 229, 231, 232, 233, 265, 266, 291, 301, 305, 308, 309, 312, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 345, 347, 348, 350, 352, 355, 356, 357, 358, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 413, 414, 415, 416, 422], "10": [28, 32, 33, 35, 57, 72, 83, 90, 96, 100, 105, 106, 113, 118, 130, 131, 148, 163, 164, 170, 179, 184, 192, 197, 214, 216, 218, 290, 308, 316, 317, 320, 323, 324, 326, 327, 338, 339, 345, 349, 354, 366, 367, 368, 370, 371, 373, 375, 376, 382, 383, 388, 391, 394, 395, 399, 400, 401, 402, 403, 409, 410, 412, 413, 414, 417, 419, 421, 422], "100": [32, 35, 52, 109, 148, 151, 197, 216, 300, 311, 324, 355, 362, 373, 379, 383, 391, 394, 399, 400, 405, 409, 410, 413], "1000": [38, 43, 57, 72, 197, 225, 229, 366, 369, 383, 399, 410, 413], "10000": [197, 375, 383, 399], "100000010000": [151, 394], "10020": [57, 72], "1004": 326, "1005": 399, "101": 311, "1011": [57, 72], "1017": [57, 106], "1019": [57, 72], "102": 311, "10200": 399, "1024": 39, "1027": 367, "1029_paper": [57, 85], "103": [311, 320, 401, 410], "1031": 225, "104": [96, 320, 410], "1040": [289, 324, 325], "1044": 399, "1047": 399, "105": 311, "1054": [347, 350], "106": 311, "107": [57, 72, 306, 314], "10848": 399, "1086": 399, "109": [57, 72, 187, 190, 320, 410], "1092": 339, "10k": 422, "10th": 325, "11": [57, 91, 106, 130, 163, 166, 170, 306, 317, 320, 323, 324, 327, 363, 367, 369, 370, 372, 373, 376, 380, 381, 388, 395, 398, 399, 403, 409, 410, 414, 417, 421, 422], "110": [151, 311, 320, 371, 410], "1100": 366, "1100000001": 151, "1100010000": 151, "1100100000": 151, "1104": 220, "111": [151, 163, 311], "111111111111": 394, "112": [311, 405], "113": [311, 329], "11370": [57, 72], "114": 382, "115": 409, "1163": 371, "117": 409, "1178": 366, "1181": 357, "11829": [57, 72], "119": [320, 371, 410], "11904": 320, "119400": 67, "12": [91, 111, 113, 130, 163, 166, 216, 220, 302, 305, 311, 319, 320, 323, 324, 326, 327, 334, 352, 355, 367, 373, 376, 380, 388, 395, 398, 400, 403, 409, 410, 413, 414, 417, 421, 422], "120": [311, 320, 410], "12000": 373, "1206": 328, "121": [311, 409], "1212": 388, "122": [311, 320, 409, 410], "1221": [57, 72], "123": [320, 380, 394, 410, 416], "12345": 395, "12393": [57, 72], "124": [318, 320, 405], "125": [95, 148, 311, 397], "1256": 204, "12593": 394, "126": 311, "1270": 216, "127069": 67, "1274": 367, "1280": 366, "12879030": 391, "1289189": 337, "1289273": 337, "129": 311, "1291": 394, "13": [130, 131, 302, 305, 306, 311, 314, 319, 320, 323, 324, 327, 367, 371, 373, 376, 382, 388, 395, 398, 401, 403, 409, 410, 413, 417], "130": [100, 206, 209, 311], "1305": 399, "13085": 373, "131": [320, 410], "131072": 320, "132": [216, 320, 405, 410], "1324": 413, "133333": 398, "1338": 405, "134": 311, "1341": 400, "1342": 398, "13444": 399, "135": 311, "1354": 364, "13572": [57, 72], "136": [306, 314], "1368": [182, 366], "137": [206, 209, 399], "137404580152": 367, "138": [399, 405], "1380": 216, "1397": 367, "14": [25, 73, 83, 90, 130, 163, 198, 206, 209, 308, 311, 324, 327, 337, 367, 371, 373, 375, 376, 386, 388, 389, 391, 395, 398, 409, 413], "141": [311, 345, 349], "1415": 324, "14159": 131, "142": [311, 417], "142857": 398, "14287173": 371, "143": 233, "14307668": [371, 394], "1453": 133, "14620633": 72, "1464": 400, "14642": [57, 72], "14646110": 391, "1468": 325, "147": [324, 373], "14733": [57, 72, 381], "14743": [57, 72, 381], "14744": [57, 72], "14751": 422, "14826": 373, "14894": [57, 72], "149": [345, 349, 371, 405], "14920": [57, 72], "1494": [57, 72], "1496": 366, "14th": [83, 90], "15": [57, 73, 91, 118, 130, 148, 152, 166, 198, 202, 214, 311, 324, 327, 355, 357, 363, 367, 369, 373, 376, 379, 386, 388, 395, 398, 399, 409, 413], "150": [394, 410], "1500": [57, 60], "15019": 371, "15082": [57, 72], "151": 363, "152901": 373, "1531": 405, "1538": 373, "15384615384615385": 135, "154696132596": 367, "1551": 366, "156": 409, "15618": 373, "15625": 397, "15629": 371, "15649": 373, "15676": 373, "15686289": 391, "157": [345, 349, 405], "15728": 373, "1581": 281, "15820": 371, "15828": [371, 394], "1583": 367, "15871": 373, "1597": 257, "16": [57, 100, 103, 117, 130, 166, 202, 214, 216, 311, 320, 325, 327, 341, 345, 367, 369, 373, 376, 395, 397, 401, 405, 409, 410], "160": [100, 373, 417], "1609": 328, "161": 417, "162": 216, "163": 409, "16384": 104, "1641": 417, "166": 405, "1676": [57, 72], "1685": 373, "1695": 405, "169811320754": 367, "16khz": [57, 100], "17": [130, 201, 216, 302, 305, 311, 319, 320, 324, 327, 363, 367, 373, 376, 381, 395, 398, 401, 410], "1740": [57, 107], "175": [400, 417], "17697228144989338": 399, "177": 151, "1776": 216, "1789": 373, "1793": [263, 373], "1795": 366, "1797": 373, "18": [57, 68, 72, 90, 107, 130, 215, 216, 302, 305, 319, 320, 327, 367, 371, 373, 376, 388, 395, 398, 402, 410], "1816": 373, "1829": 290, "185": [169, 306, 314], "1859": 216, "186": 405, "1881": 399, "189": [57, 72, 381], "1899": 399, "19": [130, 151, 202, 214, 216, 305, 319, 327, 329, 330, 331, 332, 333, 334, 367, 373, 388, 395, 409, 410], "1904": [57, 72, 306, 314], "1909": [263, 373], "1910": 22, "192": 405, "1926": 308, "1945": 373, "1946": 373, "1954": 144, "1955": 144, "1960": 144, "1962": 371, "196607": 320, "1968": 144, "1970": 165, "1972": 306, "1973": 367, "1976": 306, "1980": [144, 148, 206, 209], "1982": 144, "1984": [306, 314, 373], "1985": 148, "1986": [358, 367], "1988": 144, "1989": [148, 218], "199": 409, "1990": [53, 57, 105, 148, 205], "1991": 367, "1993": [326, 329, 330, 331, 332, 333, 334, 371], "1994": [88, 149, 399], "1995": [136, 138, 140, 179, 215], "1996": [146, 172], "1998": [57, 67, 73, 79, 105, 134, 357, 373], "1999": [73, 96, 134, 151], "1a": [209, 373], "1b": 209, "1e": [48, 50, 152, 325, 334, 393, 394], "1e5": 400, "1f": 371, "1gram_1": 146, "1gram_j": 146, "1h15m": 422, "1rc1": 422, "1rc2": 422, "1rc3": 422, "1rc4": 422, "1st": [148, 325], "2": [14, 25, 28, 33, 46, 48, 49, 52, 53, 57, 67, 68, 72, 75, 78, 80, 83, 85, 91, 92, 94, 96, 100, 103, 104, 105, 107, 109, 111, 112, 119, 120, 130, 131, 133, 135, 136, 137, 141, 142, 144, 146, 148, 151, 154, 156, 162, 163, 164, 165, 166, 169, 170, 171, 173, 174, 176, 177, 178, 179, 182, 186, 197, 198, 204, 205, 209, 214, 216, 217, 222, 223, 225, 229, 231, 232, 233, 284, 292, 300, 301, 305, 308, 309, 311, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 345, 347, 348, 349, 350, 356, 357, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 383, 384, 386, 388, 391, 393, 394, 395, 397, 398, 399, 400, 401, 403, 404, 409, 410, 411, 412, 413, 414, 415, 416, 420, 422], "20": [57, 72, 113, 119, 130, 148, 158, 163, 165, 167, 214, 218, 300, 317, 320, 326, 327, 352, 354, 367, 371, 373, 381, 383, 388, 394, 395, 399, 401, 402, 409, 410, 412], "200": [57, 72, 216, 354, 355, 373, 381, 394, 399, 409], "2000": [29, 96, 324, 355, 359, 367, 373, 409, 412], "20000410_nyt": [57, 72], "2001": [57, 72, 105, 306, 367, 381, 417, 422, 424], "2002": [145, 151, 192, 218, 309, 324, 337, 373], "2003": [347, 350, 412, 424], "2004": [57, 63, 83, 91, 96, 324], "2005": [63, 83, 90, 134, 170, 188, 204, 327, 424], "2006": [57, 68, 105, 148, 309, 345, 349], "2007": [144, 335, 365, 373, 424], "2008": [68, 90, 91, 388, 424], "2009": [0, 151, 306, 314, 420], "201": 216, "2010": [57, 72, 329, 330, 331, 332, 333, 334, 339, 340, 367, 412, 424], "2011": [132, 424], "2012": [311, 424], "2013": [216, 324, 383, 424], "2014": [57, 85, 198, 318, 324, 362, 424], "20141018104200": 422, "2014a": [57, 106], "2014b": [57, 106], "2015": [57, 106, 325, 352, 355, 424], "20150430": 373, "2016": [316, 325, 328, 424], "2017": [201, 203, 306, 424], "2018": 424, "2019": 202, "201c": 410, "201d": 410, "202": 381, "2020": 424, "2024": [375, 417], "2027": [57, 106], "203": [306, 314], "2031": 366, "2039": [57, 106], "204": 417, "205": 339, "2065": 417, "2067": 410, "2070": [57, 72], "2086": 220, "209": 405, "20k": 373, "21": [320, 323, 327, 367, 373, 388, 395, 398, 409, 410, 417], "210": 151, "211852": 399, "21578": 422, "217": 179, "2170": 414, "2190": 373, "22": [68, 83, 90, 214, 216, 311, 327, 367, 373, 380, 395, 398, 400, 401, 402, 409], "221": [371, 405, 417], "222222": 412, "223406": 373, "224": 417, "2263": 405, "227": [57, 72], "2271": [57, 72], "2278": 417, "228": 409, "22nd": [68, 90], "23": [57, 63, 72, 163, 168, 232, 302, 305, 311, 319, 320, 327, 367, 373, 388, 395, 398, 405, 410], "231": 399, "2310": 399, "233": [57, 72, 405], "2341": 325, "236": 339, "2369": 399, "237": 179, "23701322869105": 391, "239": 405, "24": [57, 73, 91, 135, 163, 205, 215, 216, 302, 305, 311, 319, 320, 327, 369, 371, 373, 395, 401, 409, 410], "2417": [216, 409], "243": 216, "244": 405, "2444": 391, "245014": 409, "246": 405, "247": 367, "2478": 413, "248": 405, "249": 399, "25": [83, 95, 148, 214, 300, 311, 324, 327, 339, 367, 373, 386, 392, 395, 398, 399, 401, 406, 409, 410, 416, 417], "250": 422, "2500": 369, "2507": 281, "252": 417, "254": 405, "2541": 405, "2552": 371, "2554": [57, 61], "256": [57, 72, 232, 381, 399], "26": [57, 72, 216, 302, 305, 311, 319, 320, 327, 373, 395, 409, 410], "262": [57, 72], "263": [329, 330, 331, 332, 333, 334], "2635971381157267": 324, "264": 405, "265": 405, "2650": 417, "2652": 216, "2667": 409, "2673": 367, "27": [57, 72, 92, 186, 216, 302, 305, 311, 319, 320, 327, 328, 373, 377, 379, 394, 395, 401, 402, 409, 410], "270": [371, 422], "271": 409, "2721": 417, "2732": 405, "2738": 409, "274": [57, 72], "2743": 367, "2751": 393, "276": 405, "277": 405, "2770": [57, 86], "279": 399, "28": [151, 214, 324, 327, 373, 388, 395, 398, 409], "280": 422, "28352": 398, "284": 417, "285": 417, "2857": 324, "286": 405, "2860": 422, "29": [73, 166, 201, 311, 371, 373, 376, 395, 409, 410], "292": 399, "292481250360578": 135, "292682926829": 367, "293": 198, "2935416": 72, "294": 405, "29421": 399, "2944": 405, "296": 409, "297": 405, "2970": 409, "299": 405, "2a": 209, "2b": 209, "2d": [57, 107, 417], "2f": [151, 369, 371, 400], "2gram_1": 146, "2gram_k": 146, "2nd": [96, 179, 394], "2pr": [147, 214, 394], "3": [0, 28, 29, 30, 33, 42, 46, 52, 53, 57, 68, 70, 72, 73, 80, 84, 85, 89, 91, 92, 100, 105, 107, 109, 111, 117, 119, 130, 131, 133, 135, 136, 137, 142, 144, 146, 147, 148, 151, 162, 163, 164, 166, 170, 176, 177, 179, 184, 186, 189, 196, 198, 201, 204, 205, 206, 209, 211, 213, 214, 216, 222, 223, 225, 229, 231, 233, 283, 293, 300, 302, 304, 305, 308, 309, 310, 311, 313, 315, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 348, 352, 353, 357, 365, 367, 368, 369, 371, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 388, 391, 394, 395, 398, 399, 400, 403, 404, 407, 409, 410, 411, 412, 413, 414, 416, 417, 418, 420, 421, 422, 424], "30": [57, 72, 113, 125, 126, 151, 302, 305, 309, 311, 319, 320, 352, 355, 367, 373, 381, 395, 399, 409, 410], "300": [25, 216, 229, 371, 383, 394, 409, 410, 417, 422], "3000": [369, 373, 409], "3002": [182, 366], "3004": 365, "301": [399, 405], "305": 216, "306": [231, 405], "3077": 417, "308": [306, 314], "309": 405, "31": [176, 216, 302, 305, 311, 316, 319, 320, 373, 395, 398, 409, 410], "311": [306, 314, 329, 330, 331, 332, 333, 334], "312": 417, "3128": [357, 360], "313": 399, "314": [324, 405], "3153": 405, "316": [306, 314], "31607e": 398, "31740": 371, "31777": 371, "318728": 358, "32": [216, 305, 309, 311, 319, 371, 373, 388, 395, 410], "32154": 373, "3238": [57, 72], "325": [371, 405], "326": 405, "327": 405, "32k": 373, "33": [216, 311, 324, 362, 373, 379, 380, 395, 398, 409], "333": 324, "3330": 325, "3333": [57, 107], "333333": 412, "33333333": 368, "334": 324, "3346": [324, 362], "335": 417, "34": [151, 311, 320, 373, 395, 409, 410, 417], "340": 422, "3412": 405, "34200": 352, "343": [109, 405], "3430": 373, "344": 405, "345": 405, "347": 371, "3481": 366, "349": 399, "35": [311, 320, 324, 371, 373, 386, 394, 395, 398, 409, 410], "351": 400, "352962": [57, 72], "353": 151, "354": 148, "3553": 405, "3571": 369, "35746606334": 367, "3574660633484": 367, "359": [148, 365], "3597": 339, "36": [151, 216, 302, 305, 311, 319, 320, 373, 395, 398, 410, 417], "3600": [113, 409], "3606": 367, "3612": 405, "3621": 373, "363": 405, "366": [381, 410], "3684": 409, "37": [57, 105, 215, 305, 311, 319, 320, 373, 395, 410], "3709": 337, "371": 231, "375": [151, 397, 405], "38": [302, 305, 311, 319, 320, 371, 373, 410], "382": [339, 417], "3832": 405, "384": 405, "386": 371, "39": [67, 373, 386, 398], "3910": 325, "3920": 324, "394": 405, "395": 417, "397": 216, "39705": 422, "3__20000410_nyt": [57, 72], "3b": 209, "3b6uxpz0l": 410, "3class": 224, "3f": [371, 397], "3p": 367, "3point": 410, "3rd": 117, "4": [32, 33, 46, 53, 57, 68, 72, 85, 92, 96, 100, 105, 107, 109, 119, 130, 135, 137, 138, 146, 148, 163, 164, 170, 176, 177, 179, 186, 191, 203, 207, 209, 214, 216, 221, 229, 294, 302, 305, 311, 319, 320, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 348, 352, 355, 357, 362, 365, 366, 367, 368, 369, 371, 373, 376, 379, 380, 381, 382, 384, 388, 391, 393, 394, 395, 397, 398, 399, 400, 401, 403, 405, 409, 410, 412, 413, 414, 416, 417, 422], "40": [305, 319, 352, 355, 371, 373, 394, 398, 410, 422], "400": [151, 394, 411, 413], "4000": [214, 317, 373, 399, 409], "40000": 373, "406": [148, 311], "409": 306, "41": [369, 373, 394, 398, 405], "411": 371, "4111": 409, "4118": 324, "412": 405, "4135": 324, "414": 148, "414213562373095": 119, "4167": 369, "4199": 405, "42": [131, 149, 300, 311, 371, 373, 379, 382, 394, 405], "420": [354, 355], "4200": 409, "421": 371, "4215": 405, "42191": 320, "423": 179, "425": 402, "4267": 362, "4269": 409, "427": 417, "428": 417, "429": [373, 417], "42960": 88, "43": [311, 320, 367, 373, 410], "430": 417, "43072": 320, "431": 405, "43135": 320, "4326": 373, "4352": 320, "4356": 409, "436": 306, "4376": 367, "43834": 216, "4393": 328, "43981": 383, "43996744": 216, "44": [302, 306, 311, 320, 373, 410], "44032": 320, "4404": 405, "4409": 367, "4435": 409, "444": [117, 405], "4452": 324, "449": 417, "449489742783178": 135, "44k": 383, "45": [57, 72, 113, 128, 302, 320, 373, 381, 410], "450": 400, "4503599627370496": 324, "4543158": 417, "4545": 409, "456400": 371, "456790123456": 367, "46": [163, 305, 311, 319, 320, 369, 373, 410], "4600addf38b8": 140, "4607": 320, "4619": 337, "462": 405, "463": 371, "466": 399, "4667": [371, 391], "467": 148, "46742": 88, "4675": [371, 394], "4678": 405, "47": [57, 60, 133, 216, 305, 311, 319, 320, 324, 373, 409, 410, 422], "470": 417, "4719": 324, "4721": 371, "474": 386, "4746": 216, "4767": 405, "477": 405, "4792899408284": 367, "47e": 324, "48": [302, 305, 319, 320, 373, 398, 410, 422], "482": 417, "484": 417, "485": 309, "487603305785": 367, "488372093023": 367, "49": [302, 320, 373, 381, 409], "4905": 324, "492": 405, "492857142857": 367, "493": 405, "4953": 373, "496": 409, "497": 405, "4986": 398, "4f": [369, 371], "5": [25, 29, 33, 36, 52, 53, 57, 72, 79, 85, 91, 92, 96, 100, 106, 107, 109, 113, 117, 130, 135, 144, 146, 147, 148, 150, 151, 155, 162, 163, 165, 166, 170, 176, 177, 179, 192, 198, 209, 213, 214, 216, 218, 221, 222, 295, 302, 305, 309, 318, 319, 320, 323, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 345, 348, 354, 357, 365, 367, 368, 369, 371, 373, 376, 379, 380, 382, 384, 386, 388, 393, 394, 395, 397, 398, 399, 400, 402, 403, 404, 409, 410, 411, 412, 413, 414, 416, 417, 422], "50": [57, 72, 149, 151, 158, 162, 165, 311, 332, 371, 373, 383, 388, 400, 401, 410, 420], "500": [57, 72, 126, 163, 213, 223, 229, 381, 388, 400, 401], "5000": [147, 179, 197, 214, 373, 409], "501": 371, "5020": 367, "5021": 409, "5045": 324, "508": 405, "5082": 373, "51": [145, 216, 302, 305, 311, 319, 320, 373, 398, 400, 410], "511": 400, "512": 131, "513": 371, "516": 399, "5167": 380, "517": 405, "5172": 380, "52": [145, 302, 305, 311, 319, 320, 373, 398, 410], "52266": 117, "5228": 405, "5249": 405, "525": [309, 318, 410], "5265": 373, "5276": 373, "5277": 373, "5279": 373, "528": 371, "53": [305, 319, 373, 395, 398, 410], "533": [366, 400], "5331": 373, "534": 405, "538": 405, "54": [145, 320, 323, 369, 373, 394, 409, 410], "5407": 366, "541": 417, "5423": 405, "5429": 373, "5430": 373, "5431": 373, "5461": 405, "55": [302, 305, 311, 319, 320, 371, 372, 373, 380, 410], "5517": 398, "55215": 320, "555": [163, 409], "5556": 409, "556": 405, "557": 201, "5574": 405, "56": [205, 302, 305, 311, 319, 320, 373, 395, 410], "5624": 373, "565": 96, "5670": 409, "5673": 328, "57": [311, 373, 395, 410], "571": 417, "571007": 371, "5714": [214, 324, 409], "5728": 373, "573": 201, "5753": 409, "5777": 405, "5789": 409, "579": [400, 405], "5797": 409, "58": [216, 302, 311, 320, 373, 405, 409, 410], "581196": 409, "5818": 324, "5833": 369, "5849": 405, "5859": 405, "588": 405, "5882": 409, "5882352941176471": 324, "59": [302, 305, 311, 319, 320, 369, 371, 373, 398, 405, 410], "591": 339, "5920": 324, "59699508": [57, 72], "5th": 358, "6": [52, 57, 67, 72, 91, 100, 107, 130, 131, 151, 163, 166, 176, 177, 184, 209, 214, 216, 222, 320, 323, 324, 325, 326, 327, 332, 333, 338, 339, 340, 357, 363, 365, 367, 369, 371, 373, 376, 379, 380, 381, 382, 388, 391, 394, 395, 398, 400, 401, 403, 409, 410, 412, 413, 414, 416, 420, 422], "60": [128, 163, 204, 305, 319, 320, 373, 375, 394, 399, 410], "600": [213, 318, 397, 410], "6000": 373, "603": 216, "60375": [57, 103], "6043": [57, 72], "606": 405, "607": 405, "61": [166, 205, 311, 320, 373, 376, 386, 398, 410, 417], "6111": 409, "6124": 405, "6144": 328, "615": 371, "616": 405, "618": 409, "62": [305, 311, 319, 373, 410], "6223": 324, "623": 417, "6240": 324, "625": 405, "6270": 413, "6281": 405, "6283": 324, "629": 417, "63": [216, 305, 311, 319, 373, 410], "631": 417, "6316": 409, "6317": 388, "632": 371, "633": 399, "6349": 325, "6369": 405, "637": [371, 405], "63744": 320, "639": [42, 57, 70, 84, 107, 213, 374, 417], "64": [216, 302, 320, 373, 409, 410, 421], "6415": 409, "64255": 320, "6429": [369, 409], "6471": 409, "65": [72, 371, 373, 386, 398], "65072": 320, "65103": 320, "653": 373, "65381": 320, "655": 405, "65500": 320, "656": 405, "657": 405, "6572": 405, "65870": 383, "659": 373, "66": [302, 320, 373, 395, 400], "66031": 417, "6605": 381, "6617": 325, "6620291452234629": 324, "665": [57, 72, 148, 381], "66666": 412, "666666": 394, "6666666666666667": 336, "6667": [147, 214, 409], "67": [216, 311, 320, 371, 373, 395, 410], "6723": 409, "6732": 405, "674": 405, "675": 405, "6759": 405, "67809": 383, "68": [305, 311, 319, 320, 373, 410], "6830": 67, "686": 405, "6897": 409, "69": [216, 305, 319, 373, 410], "6905": 409, "692": [57, 72], "694": 405, "6944": 335, "697": 405, "7": [33, 52, 57, 72, 73, 100, 107, 130, 131, 163, 169, 176, 209, 214, 216, 222, 233, 309, 320, 323, 324, 326, 327, 333, 334, 338, 339, 341, 345, 364, 365, 367, 369, 373, 375, 376, 379, 380, 386, 394, 395, 398, 399, 400, 401, 403, 409, 410, 411, 413, 414, 416, 417, 422], "70": [32, 305, 311, 319, 341, 348, 357, 373, 399, 410], "700": [57, 72, 216], "7000": 369, "70039": 383, "700439718141092": 135, "701": 405, "703": 405, "7042": 405, "705": 324, "706": 405, "7067": 324, "7075187496": 394, "71": [311, 373, 398, 410], "71181": 383, "713": 233, "714": 405, "7143": [214, 409], "72": [155, 311, 320, 371, 373, 410], "720": 395, "722": 148, "7227": 373, "724": 405, "728135": 374, "73": [57, 72, 302, 320, 373, 400, 410], "733": 198, "735": [213, 405], "736": 405, "7393": 409, "7398": 405, "74": [198, 347, 350, 373, 379], "7431": 409, "7447": 409, "7453": 324, "746": 405, "7464": 409, "749999": 394, "75": [28, 135, 138, 140, 179, 311, 320, 331, 373, 400, 406, 410, 412], "7500": [147, 369], "752": 405, "7537647": 409, "754": 405, "756": 405, "7565": 405, "758": 417, "7583": 409, "7584": 405, "76": [305, 311, 319, 320, 369, 373, 410], "7609": 409, "7616": 405, "7640": 409, "7647": 409, "7661": 398, "767": 405, "769230": 409, "77": [305, 311, 319, 373, 409, 410], "7704": 409, "77098": 399, "7714": 409, "7725": 399, "7778": 409, "779": 405, "78": [57, 72, 305, 311, 319, 373, 410], "7806": 393, "783": 148, "785fb79": 144, "78840": 383, "79": [300, 347, 350, 373, 409], "790": 148, "791": [373, 405], "7925": 405, "7948": 409, "79953": 144, "7_e_meio": 399, "7b1": 422, "8": [25, 39, 52, 57, 95, 100, 103, 111, 113, 130, 148, 166, 170, 176, 192, 197, 209, 216, 218, 222, 224, 229, 316, 318, 321, 323, 324, 326, 327, 338, 339, 340, 354, 367, 369, 371, 373, 376, 379, 380, 386, 388, 391, 394, 395, 397, 398, 400, 401, 403, 405, 407, 409, 410, 414, 416, 417, 421, 422], "80": [0, 148, 151, 180, 300, 311, 373, 405, 409], "800": 397, "8000": [10, 214, 409], "801": 367, "805": 148, "8056": 409, "81": [148, 311, 373, 409, 410], "8103": 409, "811": 371, "8167": 409, "8174": 409, "8182": 409, "82": [144, 311, 373, 400, 410], "8211": 405, "822": 148, "823": 29, "8242": 324, "8246": 409, "8298": 409, "83": [320, 373, 405, 410], "8316": 405, "832": 148, "833": 148, "8333": [214, 409], "834": 405, "8345": 409, "8364": 409, "8365": 409, "839": 67, "84": [148, 320, 369, 373, 405, 410], "8410": 409, "8414": 409, "8439": 405, "847": 216, "8476": 409, "85": [216, 311, 373, 417], "851": 405, "8525": 409, "853": [57, 68, 148, 373], "8545": 405, "856": 148, "857": 417, "8571": [214, 409], "857142": 394, "858": 148, "86": [311, 373, 379, 400, 409], "8615": 214, "8667": 409, "8668": 324, "867": 148, "868": [394, 405], "869": 148, "8696": 409, "87": [96, 311, 373], "87029140014214645": 399, "875": 95, "876": 405, "8773584905660": 367, "88": [144, 148, 163, 302, 305, 308, 309, 310, 311, 313, 315, 319, 320, 373, 400, 407, 410], "880": 148, "8800": 214, "8804": [373, 409], "8859": [57, 62, 103, 111, 219, 399, 409], "885931": 409, "886": 417, "8879": 72, "888": [117, 405], "88888888888": [394, 407], "8889": [214, 409], "889": [148, 329], "89": [320, 326, 373, 409, 410], "89019189765458417": 399, "891": 371, "8929": [214, 409], "893": 148, "894": 73, "896": 148, "897": 399, "8980": 214, "8994": 409, "9": [0, 52, 57, 72, 76, 84, 91, 92, 105, 130, 135, 163, 166, 169, 176, 209, 216, 223, 233, 308, 318, 320, 323, 324, 327, 335, 338, 339, 340, 367, 369, 371, 373, 376, 379, 380, 388, 394, 395, 398, 399, 400, 403, 409, 410, 414, 416, 417, 421, 422], "90": [320, 373, 400, 401, 405, 410], "900": [148, 409], "9000": [163, 409], "905": 148, "906": 400, "9098": 409, "91": [311, 320, 373, 395], "911": [148, 417], "913": 148, "9130": 409, "9136": 409, "9139": 409, "915": 409, "9167": 214, "917": 148, "92": [311, 373, 395, 400], "9200": 324, "921": 148, "922": 148, "9227": 405, "9231": 409, "926": 148, "93": [311, 320, 373, 400], "930": 371, "9314": 409, "932": 394, "933": 148, "9333": 214, "9342": 405, "9349_d\u00f3lare": 373, "9352": 401, "9353": 401, "9355": 409, "9375": 409, "9383": 409, "939": 330, "93winkler_dist": 148, "94": [311, 373], "943": 148, "9434": [214, 409], "944": 148, "9444": [324, 409], "9452_d\u00f3lare": 373, "9469": 405, "947": 148, "9480": 409, "95": [311, 371], "9500": 214, "951": 140, "956": 148, "9580": 409, "96": 379, "961": [148, 371], "961783439490": 367, "9630": 409, "9643": 409, "9654": 393, "9667": 409, "967": 148, "9674": 409, "970": 148, "9734": 373, "9744": 214, "9780596516499": 422, "9784873114705": 422, "98": [320, 398, 410], "9819": 409, "982": 148, "9865": 373, "9872": 409, "988": 367, "9880": 373, "99": [216, 320, 380, 410, 417], "9935": 409, "995": 371, "997": 163, "9977": 393, "999": [340, 394], "9999": 371, "9_": 120, "9b1": 422, "9b2": 422, "A": [0, 2, 3, 7, 8, 10, 13, 14, 16, 18, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 93, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 131, 135, 136, 144, 145, 146, 147, 148, 149, 150, 151, 160, 161, 162, 164, 165, 167, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 231, 232, 233, 262, 266, 284, 300, 301, 302, 303, 305, 306, 307, 309, 310, 311, 312, 313, 317, 318, 319, 323, 324, 326, 327, 329, 330, 331, 332, 333, 334, 336, 338, 340, 341, 343, 344, 347, 348, 350, 352, 355, 357, 358, 360, 362, 365, 366, 368, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 385, 386, 388, 389, 392, 395, 396, 398, 399, 401, 402, 403, 405, 409, 410, 411, 412, 413, 414, 417, 422], "AND": [57, 84, 123, 130, 180, 188, 191, 232], "AS": [57, 84, 100], "AT": [213, 216, 223, 373, 376, 409], "And": [15, 118, 135, 309, 324, 373, 400, 412], "As": [28, 57, 75, 131, 133, 135, 148, 170, 182, 218, 324, 329, 366, 373, 377, 380, 388, 389, 409, 413, 417], "At": [2, 28, 33, 104, 150, 373, 405, 420], "BE": 225, "BUT": 405, "BY": [57, 84], "But": [25, 57, 99, 104, 107, 120, 160, 223, 311, 372, 373, 375, 380, 389, 400, 405, 417], "By": [39, 52, 57, 66, 69, 75, 99, 107, 108, 113, 118, 119, 120, 124, 135, 136, 142, 179, 233, 304, 310, 312, 325, 341, 348, 366, 368, 373, 375, 388, 413, 417], "For": [10, 12, 23, 25, 30, 33, 35, 39, 40, 42, 55, 57, 59, 61, 65, 70, 72, 80, 81, 87, 88, 89, 91, 93, 95, 97, 105, 107, 108, 111, 113, 117, 118, 119, 120, 121, 125, 127, 132, 135, 136, 148, 159, 162, 165, 170, 171, 173, 174, 178, 179, 181, 182, 186, 191, 196, 203, 206, 213, 214, 216, 218, 224, 229, 231, 232, 233, 234, 301, 302, 309, 310, 312, 313, 314, 324, 325, 328, 332, 333, 334, 340, 341, 347, 348, 350, 353, 354, 355, 356, 357, 360, 366, 371, 373, 374, 375, 379, 380, 381, 383, 385, 388, 391, 394, 399, 401, 402, 410, 412, 413, 417, 421, 422], "IN": [25, 28, 120, 147, 163, 166, 175, 176, 177, 213, 214, 216, 219, 221, 222, 223, 224, 341, 342, 368, 373, 376, 394, 398, 401, 402, 407, 409, 413, 414, 415, 420], "IT": 411, "If": [0, 7, 8, 10, 13, 16, 25, 28, 32, 33, 34, 35, 36, 39, 43, 44, 52, 55, 57, 58, 59, 61, 64, 65, 66, 69, 70, 71, 72, 74, 75, 77, 79, 80, 82, 83, 84, 85, 86, 91, 93, 94, 98, 99, 100, 102, 104, 105, 107, 108, 109, 110, 111, 113, 117, 118, 119, 120, 121, 124, 125, 127, 128, 131, 135, 136, 137, 138, 142, 144, 147, 150, 156, 162, 163, 164, 165, 167, 169, 171, 173, 174, 175, 177, 178, 179, 183, 184, 186, 189, 190, 191, 192, 196, 197, 198, 204, 205, 209, 214, 215, 218, 221, 222, 223, 224, 225, 226, 231, 232, 233, 265, 300, 302, 304, 305, 309, 312, 313, 314, 316, 319, 321, 323, 324, 329, 330, 331, 332, 333, 334, 335, 340, 341, 342, 343, 345, 348, 353, 354, 355, 356, 357, 360, 362, 371, 373, 375, 377, 380, 381, 387, 388, 391, 393, 396, 409, 411, 413, 417, 420, 421], "In": [8, 14, 25, 28, 30, 33, 35, 36, 39, 43, 52, 57, 72, 85, 86, 92, 100, 104, 119, 120, 121, 131, 135, 138, 142, 144, 145, 147, 148, 149, 150, 162, 167, 170, 171, 173, 174, 178, 179, 182, 192, 203, 214, 218, 223, 231, 233, 306, 307, 310, 311, 312, 314, 323, 324, 325, 327, 329, 330, 331, 332, 333, 335, 338, 339, 340, 341, 343, 347, 350, 352, 360, 362, 366, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 388, 392, 399, 401, 402, 404, 409, 413, 417, 418], "Ine": 109, "It": [7, 10, 14, 15, 24, 25, 28, 29, 35, 37, 38, 43, 46, 48, 49, 50, 52, 53, 57, 79, 81, 89, 99, 100, 102, 103, 104, 105, 107, 109, 112, 113, 117, 119, 121, 126, 128, 135, 137, 142, 145, 155, 159, 162, 165, 169, 170, 171, 172, 173, 174, 178, 182, 186, 188, 197, 201, 202, 203, 206, 211, 213, 223, 225, 231, 304, 305, 309, 319, 324, 325, 328, 333, 335, 337, 339, 347, 350, 353, 362, 366, 371, 373, 374, 375, 377, 380, 383, 388, 389, 399, 402, 405, 409, 410, 412, 413, 420, 422], "Its": [2, 8, 25, 162, 300, 307, 392], "NOT": [72, 180, 188, 191, 196, 225, 337], "No": [146, 172, 201, 205, 312, 324, 338, 347, 350, 357, 373, 377, 396, 399, 410, 422], "Not": [57, 72, 373, 377], "OF": 372, "ON": [57, 84, 372], "OR": [123, 127, 130, 180, 188, 191, 229, 232, 324, 347, 350], "Of": [24, 67, 211, 372, 377], "On": [8, 57, 90, 96, 104, 113, 306, 314, 360, 373, 374, 410, 417], "One": [93, 135, 136, 148, 341, 348, 373, 380, 388, 403], "Or": [233, 371, 410, 417], "Such": 309, "THE": 372, "THERE": 372, "TO": [37, 214, 216, 373, 398, 401, 409], "That": [57, 72, 80, 372, 379, 380, 388, 409], "The": [0, 2, 7, 8, 10, 14, 15, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 43, 46, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 140, 142, 144, 146, 147, 148, 150, 152, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 191, 192, 196, 197, 198, 200, 201, 202, 203, 204, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 266, 281, 284, 300, 301, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 365, 366, 367, 368, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 389, 391, 392, 393, 394, 395, 396, 398, 399, 401, 402, 404, 405, 408, 409, 410, 411, 412, 413, 417, 419, 420, 422], "Their": 410, "Then": [36, 104, 121, 214, 317, 328, 331, 373, 398], "There": [8, 25, 28, 57, 67, 70, 87, 100, 120, 121, 144, 159, 162, 179, 186, 187, 190, 206, 209, 215, 301, 302, 319, 324, 333, 334, 347, 350, 373, 377, 379, 380, 383, 388, 405, 410, 411, 412, 413, 422], "These": [18, 28, 30, 33, 46, 55, 57, 59, 61, 69, 72, 79, 81, 89, 92, 106, 107, 111, 113, 117, 119, 135, 137, 145, 148, 160, 170, 179, 182, 209, 215, 218, 234, 302, 309, 313, 322, 354, 366, 368, 373, 380, 381, 394, 413, 417, 421], "To": [7, 25, 36, 38, 57, 75, 110, 111, 113, 117, 135, 137, 138, 155, 162, 179, 203, 218, 225, 324, 325, 329, 330, 340, 341, 343, 360, 372, 373, 374, 377, 378, 379, 380, 381, 399, 409, 418], "WITH": [225, 373], "Will": [24, 135, 137, 422], "With": [131, 147, 169, 186, 214, 218, 233, 333, 334, 347, 350, 364, 373, 377, 409, 413, 422], "_": [13, 57, 99, 100, 163, 177, 198, 307, 308, 373, 376, 384, 394, 402, 411], "_0": 379, "_1": 379, "__": [57, 72, 378], "___": [163, 378, 413, 414], "____": [163, 341, 345, 414], "_____": [163, 413, 414], "______": [163, 414], "_______": [163, 414], "________": [163, 378, 413, 414], "_________": [163, 378, 414], "__________": [163, 378, 414], "___________": [163, 414], "____________": 378, "_____________": 163, "_______________": 163, "_________________": 413, "__________________": [413, 414], "____________________": 414, "_____________________": 414, "________________________": 163, "__________________________": [163, 414], "_____________________________": 378, "_______________________________": [378, 414], "____________________________________": 378, "______________________________________________": 414, "__a__": [347, 350], "__add__": 422, "__adjectival_suffix": 209, "__callback": 119, "__canva": 119, "__children": 119, "__class__": 110, "__conson": 209, "__contains__": 380, "__delitem__": [380, 413], "__derivational_suffix": 209, "__dict__": [110, 112], "__digraph": 209, "__doc__": 134, "__double_conson": 209, "__drag_i": 119, "__drag_x": 119, "__draggabl": 119, "__eq__": [380, 392], "__file__": [144, 399], "__getattr__": 134, "__getitem__": [117, 119, 380], "__init__": [0, 12, 13, 14, 15, 16, 18, 23, 25, 27, 28, 29, 30, 32, 33, 35, 37, 38, 39, 40, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 140, 142, 143, 144, 146, 147, 149, 153, 156, 159, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 231, 232, 233, 300, 302, 304, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 329, 330, 331, 332, 333, 334, 340, 341, 342, 343, 345, 346, 348, 351, 352, 355, 356, 357, 373, 375, 380], "__iter__": 380, "__len__": [52, 380], "__li_end": 209, "__long_vowel": 209, "__lt__": 380, "__name__": [112, 398], "__new__": [0, 52, 57, 78, 85, 120, 131, 322, 323, 324], "__nonzero__": 117, "__noun_suffix": 209, "__parent": 119, "__perfective_gerund_suffix": 209, "__press": 119, "__reflexive_suffix": 209, "__repr__": [52, 131, 368, 375, 380], "__restricted_vowel": 209, "__run": 388, "__s_end": 209, "__setitem__": [117, 119, 380, 413], "__special_word": 209, "__st_end": 209, "__step0_suffix": 209, "__step1_suffix": 209, "__step1a_suffix": 209, "__step1b_suffix": 209, "__step2_suffix": 209, "__step2a_suffix": 209, "__step2b_suffix": 209, "__step3_suffix": 209, "__step3b_suffix": 209, "__step4_suffix": 209, "__step5_suffix": 209, "__step6_suffix": 209, "__step7_suffix": 209, "__step8_suffix": 209, "__step9_suffix": 209, "__str__": [131, 162], "__superlative_suffix": 209, "__updat": 119, "__verb_suffix": 209, "__vowel": 209, "_add_child_widget": 119, "_anim": 413, "_arg": 146, "_block_read": 104, "_bytes_written": 375, "_cach": 104, "_cl": [78, 85, 323], "_cleartempl": [216, 409], "_cmd": 224, "_context_to_tag": 223, "_conting": 146, "_counter": [180, 377, 378, 379, 385, 388, 392, 396, 403, 404], "_create_training_examples_arc_eag": 176, "_create_training_examples_arc_std": 176, "_cumulative_frequ": 400, "_datestamphasfourdigityear": 411, "_debug": 28, "_delta": 33, "_dev": 92, "_edg": 162, "_edge_to_cpl": 162, "_elementinterfac": [321, 357], "_end_index": 172, "_entiti": 413, "_eofpo": 104, "_epsilon": 259, "_estim": 179, "_evoked_": [57, 72, 381], "_filepo": 104, "_fn": 29, "_fn_num": 29, "_fp": 29, "_fp_num": 29, "_gap": 310, "_get_featur": 217, "_grammar": [171, 178], "_head_index": 172, "_histori": [173, 174], "_hypothesi": 340, "_ident": 218, "_index": 162, "_init_colortag": 119, "_input": 125, "_intercept": 179, "_io": 113, "_item_repr": 119, "_jar": [163, 224], "_kwarg": 146, "_lang_var": 410, "_languagespecificstemm": 209, "_len": 104, "_lh": 121, "_lx": 225, "_manag": 119, "_max_r": 179, "_mlb": 117, "_modul": 78, "_morphi": 211, "_mwe": 307, "_n": 146, "_neg": 197, "_nfmap": 33, "_normal": [57, 62, 324], "_not_": [57, 107], "_num_leav": 162, "_package_to_column": 113, "_param": 410, "_pars": [57, 59, 62, 76], "_path": 111, "_piec": 28, "_read": 125, "_read_block": [57, 59, 76], "_read_int_r": 131, "_read_number_valu": 131, "_read_word_block": 373, "_restart": 162, "_result": 124, "_rh": 121, "_row": 117, "_rule": 28, "_rule_tupl": 205, "_scandinavianstemm": 209, "_scc_": 417, "_sentenc": 125, "_separ": 224, "_sh": 411, "_slope": 179, "_stage": 28, "_standardstemm": 209, "_start": 28, "_start_index": 172, "_str": 28, "_stream": 104, "_string_end_r": 131, "_string_start_r": 131, "_symbol": 121, "_tag": [57, 59, 62, 76, 119], "_tagger": 223, "_tagword": 225, "_test": 92, "_tgrep_exprs_act": 301, "_token": 162, "_toknum": 104, "_tp": 29, "_tp_num": 29, "_trace": [28, 171, 178], "_train": 223, "_tried_": 173, "_tried_m": 173, "_type": [57, 72], "_unload": 417, "_updat": 119, "_valu": [180, 377, 378, 379, 385, 388, 392, 396, 403, 404], "_var0": [364, 365], "_verifi": 368, "_willy65": 410, "_word": [57, 59, 62, 76], "_wordnetobject": 107, "_\u11f9\u159b": [], "a00": 225, "a1": [366, 388], "a2": [366, 388], "a3": [366, 388], "a4": 388, "a5": 388, "a6": 388, "a7": 388, "a8": 388, "a_": 218, "a_and_c": 373, "a_coru": 402, "a_dog": 384, "a_littl": 307, "a_little_bit": 307, "a_lot": 307, "a_man": 384, "a_man_walk": 384, "aa": [67, 373, 374, 392], "aa0": 373, "aaa": 374, "aaaaaaaaaaaa": 324, "aaaaaaaaaaaaaaa": 324, "aaaaaaaaaaaaaaaaa": 324, "aaaababaaccbacb": 391, "aaai": [68, 91], "aab": 400, "aabbbcccc": 410, "aachen": 140, "aacut": 192, "aaddvark": 391, "aal": 373, "aalii": 373, "aam": 373, "aamir": 373, "aani": 373, "aardvark": 373, "aardwolf": [57, 107, 211, 373, 417], "aardwolv": [57, 107, 211, 417], "aaron": 373, "aarsen": 424, "ab": [148, 166, 220, 223, 373, 393, 394, 410], "ab1": 396, "ab2": 396, "ab3": 396, "abaci": [57, 107, 211, 417], "abacu": [57, 107, 211, 417], "abagael": 373, "abagail": 373, "abainia": [201, 202], "abandon": [373, 401], "abat": 401, "abb": 373, "abbb": 400, "abbbb": 400, "abbbc": 400, "abbei": 373, "abbi": 373, "abbot": 373, "abbott": 373, "abbr": [302, 309, 341, 345], "abbrev": [57, 72, 302, 309], "abbrev_backoff": [302, 309], "abbrev_typ": [302, 309], "abbrevi": [57, 72, 192, 220, 309, 341, 345, 388, 414], "abc": [52, 111, 113, 136, 303, 373, 375, 380, 410], "abcabc": 380, "abcabcabcabcabcabcabcabcabcabca": 380, "abcabz": 380, "abcd": 380, "abcdef": 410, "abcdefghijklmnopqrstuvwxyz": 158, "abdelkrim": 209, "abdic": 401, "abdomin": 363, "aben\u00e7o": 399, "abet": 401, "abhaya": 335, "abid": 401, "abk": 374, "abkh": [57, 103], "abkhaz": [57, 103], "abl": [15, 111, 203, 207, 216, 223, 354, 409, 413, 417, 419], "abn": 374, "abnorm": [57, 83, 373, 396], "abolish": [57, 83, 373], "abomin": [57, 83, 373], "abort": [57, 83, 373], "abounding_with": [57, 72], "about": [0, 2, 25, 30, 35, 36, 42, 57, 70, 72, 75, 80, 81, 89, 91, 95, 104, 105, 107, 113, 120, 125, 127, 161, 162, 165, 167, 173, 179, 180, 185, 192, 201, 202, 203, 206, 214, 215, 223, 229, 309, 334, 340, 347, 350, 354, 355, 357, 371, 373, 377, 379, 380, 381, 383, 399, 401, 402, 405, 410, 414, 419, 422], "abov": [57, 92, 107, 139, 182, 191, 216, 225, 306, 309, 334, 357, 360, 366, 371, 373, 374, 380, 381, 399, 400, 401, 412, 413, 417], "above_scor": 371, "abram": 148, "abri": 399, "abrom": 148, "abr\u00e3o": 399, "absenc": 197, "absent": [171, 407], "absolut": [52, 57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 82, 84, 85, 93, 98, 105, 107, 108, 109, 111, 135, 138, 140, 198, 356, 373, 375], "absolute_discounting_trigram_model": 249, "absolutediscount": [0, 135, 140], "absolutediscountinginterpol": [0, 135, 138], "absorb_heat": [57, 72, 381], "abspath": [55, 57, 59, 373, 375], "abstract": [13, 15, 46, 47, 51, 52, 57, 59, 81, 89, 111, 119, 124, 125, 131, 136, 138, 146, 162, 171, 179, 184, 191, 200, 214, 223, 231, 232, 233, 303, 319, 334, 352, 368, 380, 384, 389, 392, 417], "abstractboxerdr": [0, 180, 181], "abstractcanvascontain": 119, "abstractccgcategori": [0, 12, 13], "abstractchartrul": [0, 14, 159, 162, 171], "abstractcollocationfind": 53, "abstractcontainerwidget": [0, 114, 119], "abstracteat": 389, "abstractexpress": 184, "abstractlazysequ": [0, 52, 104], "abstractparentedtre": [341, 343], "abstractvariableexpress": [0, 129, 180, 184, 191], "ac": [57, 61, 109, 125, 192, 357, 399], "acabada": 399, "academ": 0, "academia": 96, "acc": [216, 379, 398, 409], "acceler": 373, "accent": [284, 373], "accept": [33, 57, 59, 100, 117, 121, 132, 177, 345, 349, 355, 373, 375, 387, 419, 422], "access": [29, 52, 57, 61, 65, 69, 70, 72, 75, 93, 104, 107, 108, 110, 111, 113, 117, 119, 120, 121, 122, 135, 137, 179, 300, 341, 348, 352, 355, 356, 360, 375, 379, 388, 392, 400, 401, 402, 413, 422], "access_tim": 417, "access_token": 356, "accessor": 29, "accident": [121, 234], "acclaim": 373, "accommod": [57, 86, 181], "accompani": [331, 332, 333, 356, 373], "accomplish": [170, 396], "accord": [36, 53, 120, 121, 140, 170, 177, 182, 188, 192, 215, 218, 314, 324, 328, 333, 334, 341, 342, 354, 366, 373, 387, 397, 402, 409], "accordingli": [329, 330, 331, 334, 360, 400], "account": [57, 72, 125, 131, 135, 148, 170, 324, 330, 333, 360, 419], "accru": 373, "accumul": 417, "accur": [107, 182, 347, 350, 366, 418], "accuraci": [0, 25, 26, 29, 30, 43, 52, 143, 150, 196, 213, 214, 216, 217, 225, 229, 306, 311, 314, 347, 350, 394, 399, 400, 405, 409, 422], "acero": 218, "acet": 373, "aceto": 373, "acetochlor": 373, "aceton": 373, "achar": 399, "achiev": [24, 203, 311, 384, 417], "acion": 422, "acirc": 192, "acknowledg": 119, "acl": [63, 94, 311, 324, 335, 347, 350, 422], "acl2014": [57, 106, 324, 362], "aclanthologi": [225, 366], "aclweb": [57, 106, 182, 289, 311, 324, 325, 326, 339, 347, 350, 365], "acm": [68, 83, 91, 205, 337, 358, 422], "acolhuan": 395, "acontecendo": 399, "acoust": [30, 373], "acq": 373, "acquisit": 46, "across": [57, 72, 129, 144, 191, 306, 314, 402], "act": [25, 28, 52, 57, 72, 81, 89, 104, 117, 120, 182, 186, 366, 373, 380, 405, 419], "action": [57, 72, 205, 266, 324, 325, 328, 335, 337, 339, 352, 355, 373, 422], "activ": [33, 57, 89, 114, 117, 124, 197, 324, 325, 328, 335, 337, 360, 375, 419, 420, 422, 424], "activest": 117, "activestyl": 117, "actual": [29, 33, 57, 72, 110, 124, 129, 134, 150, 155, 159, 163, 179, 187, 301, 355, 373, 380, 381, 405, 409, 410, 413], "actual_pdist": 179, "acudir": 399, "acut": 192, "acycl": [357, 417], "acyclic_branches_depth_first": [0, 357], "acyclic_breadth_first": [0, 357], "acyclic_depth_first": [0, 107, 357], "acyclic_dic2tre": [0, 357], "acyclic_tre": [57, 107, 357], "ad": [2, 15, 36, 57, 92, 104, 107, 117, 119, 121, 125, 162, 165, 167, 171, 179, 196, 204, 220, 306, 307, 309, 314, 319, 327, 347, 350, 357, 368, 373, 379, 388, 400, 417, 422], "adam": [180, 373, 388, 404], "adapt": [72, 304, 305, 345, 349, 357], "add": [7, 14, 15, 25, 28, 33, 37, 52, 57, 69, 72, 75, 80, 91, 107, 111, 114, 117, 118, 119, 124, 125, 127, 135, 138, 142, 147, 153, 156, 159, 162, 164, 165, 167, 171, 172, 173, 180, 182, 186, 191, 194, 196, 301, 307, 314, 319, 320, 321, 322, 323, 324, 327, 328, 333, 334, 340, 357, 366, 368, 373, 377, 383, 388, 396, 398, 400, 404, 409, 413, 417, 422], "add_access_token": [0, 351, 356], "add_arc": [159, 164], "add_assumpt": [123, 124, 388], "add_background": [123, 125, 377], "add_blank_lin": [0, 321], "add_callback": [114, 119], "add_child": [114, 119], "add_default_field": [0, 321], "add_exomw": [55, 57, 107], "add_feat_extractor": [195, 196, 405], "add_lin": [57, 91], "add_log": [0, 179], "add_missing_depend": [180, 187], "add_mw": [302, 307], "add_nod": [159, 164], "add_omw": [55, 57, 107, 417], "add_ortho_context": [302, 309], "add_prov": [55, 57, 107], "add_py3_data": [0, 54], "add_root": [55, 57, 80], "add_sent": [123, 125, 377], "add_widget": [114, 119], "addit": [52, 57, 63, 90, 100, 107, 111, 119, 120, 125, 131, 135, 138, 142, 169, 171, 172, 179, 182, 191, 196, 203, 204, 218, 225, 231, 300, 306, 309, 319, 323, 327, 333, 347, 350, 357, 366, 373, 375, 380, 392, 402, 410, 413, 417, 422], "addition": [55, 57, 107, 131, 144, 192, 206, 215, 353, 373], "additional_java_arg": 169, "additional_test": 235, "address": [164, 170, 360, 373, 376, 379], "address1": 379, "address2": 379, "adj": [28, 55, 57, 79, 107, 170, 213, 217, 220, 363, 367, 371, 373, 399, 417], "adj_sat": [55, 57, 107], "adjac": [157, 162, 172, 341, 345, 394], "adjd": 364, "adject": [28, 57, 72, 107, 199, 202, 211, 216, 220, 223, 332, 381, 409, 417, 422], "adji": 364, "adjourn": 373, "adjp": [414, 415], "adjud": 216, "adjunct": 388, "adjust": [119, 145, 204, 400, 405], "adjut": 89, "administr": [88, 360], "administra": 399, "admir": 373, "admiss": [355, 379], "admit": [306, 373], "adopt": [367, 373, 379, 402, 422], "adp": [79, 220, 371, 373], "adposit": 220, "adrian": 109, "adv": [55, 57, 72, 79, 107, 213, 220, 363, 367, 371, 373, 379, 381, 399, 417], "advanc": [25, 148, 191, 265, 360], "advantag": [39, 42, 134], "advd": 364, "adventur": [373, 400], "adverb": [57, 72, 107, 211, 216, 220, 223, 381, 409], "advi": [207, 364], "advic": [341, 348], "advis": [135, 137, 207, 373], "advmod": 163, "advp": 415, "adwait": 88, "ae": [67, 373], "ae1": [67, 373], "ae_kappa": [143, 144], "aeioui": 306, "aelig": 192, "aer": 336, "aesthetic": 395, "afecto": 399, "afenegus6": [57, 103], "affect": [29, 119, 391, 410], "affenpinsch": 417, "affirm": 197, "affix": [199, 200, 201, 202, 207, 208, 209, 223, 408], "affix_length": 223, "affixtagg": [0, 213, 223], "afghan_hound": 417, "afournei": 391, "africa": [182, 366, 402], "african": 402, "after": [25, 28, 33, 37, 51, 57, 72, 104, 113, 118, 119, 121, 125, 131, 135, 137, 142, 149, 157, 162, 165, 171, 178, 179, 188, 197, 198, 202, 209, 215, 229, 238, 260, 309, 313, 319, 320, 324, 357, 373, 374, 377, 383, 410, 411, 413, 417, 421], "afternoon": 24, "ag": [55, 57, 65, 119, 367, 373, 379], "again": [7, 120, 135, 265, 355, 377, 380, 388, 409, 410, 417], "against": [7, 26, 29, 57, 72, 147, 150, 173, 184, 191, 206, 214, 379, 381, 404, 412], "agarw": 335, "age_year": [57, 65], "agenda": [0, 123, 130, 162, 167, 187], "agent": 401, "agglom": [46, 49], "aggreg": [191, 229, 328], "agincourt": 417, "agnew": 398, "agnost": [306, 314, 325], "ago": [300, 367], "agor": 399, "agr": [143, 144, 379, 380, 398, 407, 408], "agra": [57, 103], "agrav": 192, "agre": [57, 107, 144, 231, 408, 417], "agreement": [0, 143, 148, 265, 387, 422], "agreestat": 265, "aguirr": [57, 65], "ah": [67, 363], "ah0": [67, 373], "ahc": 384, "ahd": 109, "ahead": [340, 422], "ai": [67, 205, 221], "aid": [57, 59, 155], "ailment": [57, 72], "aim": [176, 199], "ain": 198, "ainda": 399, "aint": 198, "air": 156, "aircraft": 419, "airedal": 417, "airhead": 417, "airspe": [163, 219, 222, 224], "aj0": 363, "aka": [171, 324, 327, 328, 336, 337, 357, 401], "akin": 391, "al": [57, 72, 105, 106, 218, 306, 314, 324, 328, 333, 339, 345, 349, 367, 373, 383, 412, 417], "ala": 410, "alavi": 335, "albania": [182, 366], "albb": 308, "albert": 144, "albufeira": 399, "alcorc": 402, "alcuin": 109, "aldjfalskfjaldsf": 394, "aldjfalssjjlldss": 394, "alefsym": 192, "alegava": 399, "alert": [57, 63, 131, 373, 405], "alex": [328, 379, 424], "alexand": [109, 203], "alexi": 424, "alexisdimi": 424, "alexrudnick": 424, "alfr": 109, "alg_opt": 176, "algarv": 399, "algarvia": 399, "algarvio": 399, "algasai": 422, "algeria": [201, 202], "algier": 201, "algnsent": 323, "algorithm": [2, 30, 33, 35, 37, 38, 42, 46, 48, 50, 57, 88, 106, 136, 140, 145, 149, 157, 162, 165, 167, 170, 172, 176, 178, 179, 188, 199, 201, 202, 204, 205, 206, 209, 217, 218, 225, 233, 252, 258, 281, 306, 309, 314, 317, 327, 329, 330, 331, 332, 333, 334, 338, 339, 341, 345, 347, 348, 349, 350, 357, 358, 369, 380, 398, 410, 422], "alguma": 399, "algun": 399, "alia": [33, 57, 63, 68, 78, 83, 85, 87, 90, 91, 102, 135, 137, 323], "alias": [120, 191, 380], "alibaba": 308, "alien": [135, 137, 142], "alif": [201, 202], "alifmaqsura": [201, 202], "align": [0, 55, 57, 61, 106, 119, 143, 145, 148, 252, 290, 322, 323, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 362, 410, 422], "align_al": [322, 329, 330], "align_block": [0, 322, 326], "align_log_prob": [0, 322, 326], "align_text": [0, 322, 326], "align_token": [0, 302, 305, 319, 320], "align_word": [0, 322, 335], "aligned_s": [55, 57, 58, 323, 412], "alignedcorpusread": [55, 57, 58], "aligneds": [0, 57, 58, 322, 323, 329, 330, 331, 332, 333, 334, 412, 422], "alignedsent_block_read": [57, 58], "alignedsentcorpusview": [55, 57, 58], "alignment_error_r": [0, 322, 336, 412], "alignment_info": [329, 330, 331, 332, 333, 334], "alignment_t": [330, 331, 332, 333], "alignmentinfo": [0, 322, 333, 334], "alik": 420, "alin": [0, 143, 252, 422], "all": [0, 8, 15, 16, 20, 22, 28, 29, 32, 33, 34, 35, 38, 42, 43, 44, 46, 51, 52, 53, 57, 59, 60, 61, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 77, 79, 81, 82, 83, 84, 85, 86, 89, 90, 91, 93, 98, 100, 105, 107, 108, 109, 111, 113, 115, 117, 118, 119, 120, 121, 123, 125, 127, 129, 130, 131, 134, 135, 136, 137, 138, 144, 145, 146, 162, 163, 164, 165, 167, 168, 170, 172, 173, 174, 178, 179, 180, 181, 182, 183, 184, 186, 188, 190, 191, 196, 197, 198, 201, 203, 204, 206, 213, 215, 218, 220, 221, 223, 224, 225, 229, 231, 232, 233, 234, 260, 281, 300, 301, 306, 309, 310, 312, 313, 321, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 343, 347, 348, 350, 351, 354, 357, 360, 366, 369, 371, 373, 375, 377, 378, 379, 380, 381, 382, 384, 385, 387, 388, 389, 391, 392, 396, 398, 399, 401, 403, 404, 406, 409, 410, 412, 413, 414, 420, 422], "all12": 384, "all_eng_synset": [55, 57, 107], "all_express": 127, "all_inst": 197, "all_lemma_nam": [55, 57, 107, 417], "all_list": [180, 191], "all_mptre": 413, "all_omw_synset": [55, 57, 107], "all_phrases_from": 340, "all_ptre": 413, "all_senti_synset": [55, 57, 95, 406], "all_synset": [55, 57, 107, 417, 422], "all_word": [195, 196, 405], "all_words_neg": 405, "allcap": 405, "allcap_differenti": [195, 198], "allcat": 373, "allen": 410, "allexpress": [0, 180, 191, 388], "allianc": 373, "alloc": [46, 50, 179], "allon": 371, "allot": 162, "allow": [2, 10, 13, 33, 46, 49, 57, 63, 69, 72, 78, 107, 110, 111, 117, 120, 121, 131, 134, 135, 136, 142, 148, 158, 162, 167, 170, 171, 172, 173, 174, 180, 182, 191, 218, 233, 266, 309, 312, 325, 328, 341, 347, 348, 350, 353, 355, 357, 366, 371, 373, 377, 378, 379, 380, 388, 392, 402, 410, 413, 422], "allow_step": 131, "allowed_typ": 191, "alltempl": [227, 233], "almighti": 300, "almost": [38, 43, 57, 107, 135, 198, 409], "alon": [335, 371], "along": [2, 57, 72, 81, 89, 179, 302, 323, 381, 401, 420, 422], "alongsid": 420, "alph": 158, "alpha": [29, 57, 84, 135, 138, 143, 144, 147, 150, 162, 167, 184, 191, 192, 198, 214, 218, 324, 335, 339, 394, 422], "alpha_0": 218, "alpha_convert": [180, 184, 191, 392], "alpha_gamma": [135, 136, 140], "alpha_t": 218, "alphabet": [57, 83, 119, 158, 187, 218, 306, 309, 310, 314, 373, 380], "alphanumer": [120, 380], "alpharetta": 371, "alpino": [57, 62, 113], "alpinocorpusread": [55, 57, 62], "alreadi": [10, 28, 57, 59, 105, 111, 113, 117, 119, 135, 144, 161, 162, 167, 169, 170, 175, 179, 186, 191, 196, 209, 223, 233, 305, 307, 333, 375, 377, 380, 383, 384, 388, 399, 409, 410, 413, 421], "also": [10, 13, 14, 25, 28, 29, 30, 33, 36, 37, 43, 46, 53, 57, 72, 75, 91, 107, 111, 112, 113, 119, 120, 121, 125, 132, 133, 135, 137, 138, 142, 144, 146, 148, 159, 160, 161, 162, 164, 165, 174, 176, 177, 179, 182, 184, 186, 203, 204, 209, 213, 214, 215, 218, 229, 233, 258, 284, 287, 300, 302, 308, 309, 310, 312, 317, 320, 323, 332, 338, 339, 347, 350, 355, 357, 366, 371, 372, 373, 375, 377, 378, 379, 380, 381, 383, 388, 389, 392, 399, 401, 402, 404, 409, 410, 413, 417, 422, 424], "also_se": [107, 357, 417], "alter": 203, "altern": [67, 87, 113, 131, 139, 163, 172, 179, 209, 231, 233, 312, 341, 345, 371, 373, 375, 378, 388, 392, 398, 414, 421, 422], "although": [104, 117, 163, 309, 347, 350, 369, 373, 383, 402, 409, 410], "altlabel": 182, "aludir": 399, "alum": 373, "alumiar": 399, "alun": 208, "aluno": 208, "alva": 311, "alvat": 424, "alwai": [7, 26, 33, 57, 59, 72, 104, 107, 119, 124, 135, 138, 163, 179, 191, 196, 206, 231, 301, 310, 324, 325, 328, 332, 333, 335, 337, 339, 341, 343, 347, 348, 350, 417], "alwayson_featur": [33, 369], "am": [24, 57, 91, 371, 372, 373], "amahuaca": [57, 103], "amalgam": 373, "amaz": 420, "amazingli": 198, "amazon": [91, 308, 373], "ambigu": [30, 94, 125, 159, 183, 199, 204, 358, 373, 377, 398, 419], "ambiguous_word": 358, "american": [100, 148, 163, 300, 308, 315], "american_foxhound": 417, "americana": 399, "amhar": [57, 103], "amigo": 399, "ammi": 371, "amod": [163, 166, 175, 376], "among": [100, 335, 339, 371, 373], "amongst": 172, "amor": 399, "amount": [38, 113, 118, 119, 144, 170, 179, 229, 340, 347, 350, 355, 373, 399], "amp": [57, 75, 192, 318, 320, 402], "amperc": [302, 318], "amr": 100, "amus": [218, 373], "amz": 308, "an": [0, 7, 10, 13, 14, 15, 16, 24, 25, 28, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 48, 51, 52, 53, 55, 57, 58, 59, 61, 66, 67, 68, 69, 70, 71, 72, 74, 75, 79, 80, 81, 84, 86, 89, 92, 93, 94, 95, 97, 100, 104, 105, 107, 108, 109, 110, 111, 112, 113, 117, 119, 120, 121, 125, 127, 129, 131, 134, 135, 136, 138, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 184, 186, 187, 188, 190, 191, 192, 197, 198, 202, 203, 205, 206, 209, 213, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 231, 232, 233, 281, 300, 301, 302, 306, 307, 308, 309, 311, 312, 317, 320, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 345, 347, 348, 350, 352, 354, 355, 356, 357, 358, 360, 362, 365, 366, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 386, 388, 389, 391, 392, 396, 398, 400, 401, 402, 404, 405, 409, 410, 411, 412, 413, 417, 418, 419, 420, 422], "ana": 364, "anaconda": 421, "analog": 43, "analogi": 366, "analys": [148, 300], "analysi": [63, 91, 145, 148, 149, 176, 195, 196, 197, 198, 203, 300, 317, 371, 373, 422], "analyst": 402, "analyt": [179, 369], "analyz": [57, 72, 75, 83, 90, 157, 180, 381, 420], "anaphor": 181, "anaphora": 125, "anaphoraresolutionexcept": [0, 180, 184, 377, 378], "anc": [57, 72], "ancestor": [0, 57, 107, 119, 301, 341, 343, 417], "ancestri": 108, "anchor": 119, "ancien_regim": 417, "and_list": [180, 191], "andexpress": [0, 180, 188, 191], "andiron": 417, "andr": 134, "andrea": [345, 349], "andreasvc": [345, 349], "anduru": 399, "ang": 192, "angel": [402, 410], "angl": [28, 51, 300], "anglo": 109, "angrili": 163, "angu": [377, 392], "anhalt": 163, "ani": [7, 24, 25, 28, 29, 31, 32, 33, 34, 35, 39, 51, 53, 57, 58, 59, 61, 64, 65, 66, 69, 70, 71, 72, 74, 75, 82, 84, 85, 86, 87, 91, 93, 94, 98, 100, 104, 105, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 121, 124, 125, 131, 135, 137, 144, 146, 147, 148, 151, 162, 164, 165, 167, 170, 178, 179, 186, 190, 191, 192, 201, 202, 203, 207, 214, 215, 216, 218, 219, 223, 229, 231, 232, 233, 238, 300, 306, 309, 310, 312, 313, 314, 324, 335, 340, 341, 343, 347, 348, 350, 357, 362, 373, 375, 379, 380, 388, 391, 392, 393, 399, 400, 404, 405, 409, 410, 411, 412, 413, 417], "anim": [8, 20, 57, 107, 357, 373, 396, 399, 413, 417], "animal_sound": 373, "ann": [198, 403], "ann_morphosyntax": 80, "ann_segment": 80, "annan": 402, "anni": 109, "annie_lennox": 402, "annot": [39, 46, 55, 57, 65, 68, 69, 72, 79, 81, 89, 91, 92, 96, 109, 144, 148, 217, 309, 341, 347, 348, 350, 373, 383, 401, 422], "annotationset": [57, 72, 381], "annotationtask": [0, 143, 144], "announc": [341, 348, 420], "annual": 358, "ano": [373, 399], "anonym": 373, "anoth": [29, 57, 72, 120, 121, 148, 150, 176, 182, 191, 205, 206, 218, 223, 232, 233, 300, 324, 331, 332, 333, 339, 373, 377, 384, 388, 398, 399, 405, 410, 411, 412, 413, 417], "ans_typ": 181, "ansi": [341, 345], "answer": [24, 129, 131, 366, 369, 380], "answer_kei": [123, 129], "ant": 399, "anteced": 190, "anthologi": [57, 106, 182, 289, 311, 324, 325, 326, 339, 347, 350, 365], "anti": 373, "antiga": 399, "antonym": [57, 107, 417], "antwerpen": 402, "anunci\u00f3": 364, "any_typ": 392, "anyon": [132, 163, 364, 373], "anyth": [25, 119, 124, 127, 129, 190, 301, 378, 396, 417], "anythinggoeszxcv": 211, "anytyp": [0, 180, 191], "anywai": 135, "anywher": [108, 400], "ao": [67, 143, 144, 208, 373, 399], "ao2": 373, "aoaeoeoe": 394, "aon": 33, "ap": [57, 84, 366, 373, 399, 402], "apache_d": 417, "apareceu": 399, "apart": [129, 360], "apelido": 399, "apha": 265, "api": [0, 12, 25, 30, 46, 55, 57, 78, 110, 123, 135, 159, 184, 191, 199, 213, 227, 233, 302, 316, 322, 335, 351, 353, 354, 355, 373, 388, 420, 422], "api_cal": [159, 163], "apo": [57, 72, 320], "apolloniu": 109, "apostroph": 42, "app": [0, 16, 120, 123, 130, 356, 373, 377, 380], "app_kei": [355, 356], "app_secret": [355, 356], "appal": 395, "appeal": [165, 373], "appear": [8, 53, 57, 62, 65, 77, 91, 105, 107, 108, 113, 121, 130, 146, 150, 156, 197, 209, 215, 233, 300, 309, 310, 318, 319, 332, 333, 339, 341, 343, 371, 373, 383, 400, 402, 410, 422], "append": [0, 57, 75, 111, 114, 117, 120, 144, 172, 182, 189, 197, 329, 330, 331, 332, 333, 340, 341, 342, 356, 373, 375, 383, 396, 411, 413], "append_no_spac": [57, 75], "append_prop": [123, 127], "append_sig": [123, 127], "append_spac": [57, 75], "appendix": 333, "appli": [2, 7, 8, 12, 14, 15, 25, 28, 30, 31, 39, 43, 44, 52, 53, 57, 59, 72, 79, 81, 86, 89, 91, 108, 117, 120, 127, 139, 144, 148, 157, 159, 160, 162, 165, 167, 171, 174, 176, 178, 179, 183, 190, 191, 196, 197, 214, 215, 218, 222, 224, 227, 231, 232, 233, 303, 305, 306, 309, 314, 324, 334, 335, 340, 341, 342, 345, 348, 371, 373, 375, 378, 380, 384, 392, 394, 405], "applic": [1, 7, 10, 13, 14, 15, 16, 52, 70, 131, 162, 173, 190, 191, 202, 215, 218, 232, 233, 309, 331, 345, 349, 355, 365, 388, 422], "applicable_rul": [227, 233], "applicationexpress": [0, 180, 184, 188, 190, 191, 388, 392], "applicationruleset": 364, "apply_everywher": [159, 162], "apply_featur": [0, 30, 43, 195, 196, 405], "apply_freq_filt": 371, "apply_heat": [57, 72, 381], "apply_ngram_filt": 371, "apply_rul": [199, 208], "apply_word_filt": 371, "applyto": [180, 184, 187, 190, 191, 384], "appoint": [371, 373], "appraoch": 91, "approach": [46, 57, 102, 196, 197, 309, 331, 332, 333, 341, 345, 377], "appropri": [30, 31, 32, 33, 35, 44, 48, 49, 50, 51, 53, 57, 61, 72, 80, 93, 104, 108, 111, 119, 179, 184, 191, 206, 214, 215, 218, 223, 224, 300, 326, 352, 360, 373, 378, 380, 381, 388, 405], "approv": 373, "approxim": [57, 72, 150, 179, 198, 217, 340, 357, 381], "approxrand": [0, 143, 150], "april": [73, 352, 355, 422], "apuleiu": 109, "apurva": 328, "apw19980314": 373, "apw_19980314": [73, 373], "apw_19980424": [73, 373], "apw_19980429": [73, 373], "aquel": [373, 399], "aquela": [373, 399], "aquilo": 399, "ar": [2, 7, 8, 10, 13, 14, 15, 20, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 42, 43, 44, 46, 48, 50, 52, 53, 55, 57, 58, 59, 61, 62, 63, 65, 66, 67, 69, 70, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 91, 92, 98, 99, 100, 104, 105, 106, 107, 108, 111, 113, 117, 118, 119, 120, 121, 124, 125, 127, 129, 131, 133, 134, 135, 136, 137, 138, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 190, 191, 192, 196, 197, 198, 201, 202, 206, 209, 211, 213, 214, 215, 218, 219, 221, 222, 223, 225, 229, 232, 233, 234, 259, 266, 281, 283, 285, 300, 301, 302, 304, 306, 309, 310, 311, 312, 313, 316, 317, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 343, 344, 345, 347, 348, 350, 353, 354, 355, 357, 360, 363, 364, 365, 366, 367, 369, 371, 372, 373, 374, 375, 377, 379, 380, 381, 383, 385, 387, 388, 394, 396, 398, 399, 400, 401, 402, 404, 405, 408, 409, 410, 411, 412, 413, 417, 419, 422], "arab": [57, 103, 201, 202, 204, 209, 281, 284, 373, 408, 422], "arabicstemm": [0, 199, 209], "aram": 371, "arb": 417, "arbitrari": [46, 50, 132, 182], "arbitrarili": [46, 48, 380], "arbor": 198, "arc": [164, 170, 172, 176], "arc_eag": [159, 176], "arc_standard": [159, 176], "arceag": 176, "archiv": [57, 61, 109, 131, 422], "arcstd": 176, "area": [119, 326, 388, 422], "aren": 198, "arent": 198, "arff": 44, "arff_formatt": [0, 30, 44], "arg": [12, 13, 15, 34, 40, 41, 57, 62, 72, 78, 83, 85, 86, 87, 99, 110, 111, 112, 113, 115, 117, 118, 119, 120, 124, 129, 131, 135, 138, 160, 163, 171, 175, 179, 180, 185, 186, 187, 191, 224, 229, 231, 233, 262, 300, 324, 350, 357, 401], "arg0": [81, 89], "arg1": 401, "arg3": 401, "arg4": 401, "argid": [69, 81, 89, 401], "argloc": [81, 89, 401], "argm": [81, 89, 401], "argmax": 225, "argnam": 112, "argspan": 69, "argu": [306, 405], "argument": [13, 15, 17, 29, 33, 34, 41, 52, 55, 57, 59, 61, 62, 69, 72, 78, 79, 80, 81, 86, 87, 89, 93, 99, 104, 107, 108, 110, 112, 113, 117, 119, 121, 124, 126, 128, 131, 135, 136, 138, 139, 144, 146, 150, 152, 164, 167, 169, 171, 179, 182, 184, 186, 190, 191, 196, 205, 206, 218, 223, 231, 301, 309, 310, 312, 321, 341, 343, 348, 352, 355, 357, 365, 366, 367, 371, 372, 375, 377, 378, 380, 385, 388, 392, 400, 401, 410, 413, 417, 418, 422], "argument_indic": 190, "argument_pair": 126, "ari": [186, 209], "aristid": 6, "aristotl": 109, "arithmet": 337, "ariti": [0, 180, 182, 186, 366], "arity_parse_demo": [0, 159, 172], "arlington": 402, "arlstem": [0, 199, 202, 422], "arlstem2": [0, 199], "arm": 323, "armenian": [57, 103], "armi": [100, 324, 328, 335, 337, 339], "aromat": 371, "aronoff": [306, 314], "around": [28, 38, 52, 57, 72, 92, 100, 119, 131, 170, 196, 211, 300, 373, 377, 381, 405, 410], "arpa": 88, "arr": 218, "arrai": [33, 34, 38, 41, 46, 48, 144, 317, 355, 372], "arraign": [57, 72, 381], "arrancar": 410, "arrang": [119, 158, 419], "arrest": [57, 72, 381, 402], "arriv": 410, "arrombar": 399, "arrow": [114, 115, 120, 304, 410], "ars": 417, "art": [22, 51, 57, 72, 341, 345, 348, 381, 399, 402, 403, 413], "arthur": 420, "articl": [57, 72, 155, 216, 223, 364, 373, 381, 409, 422], "artifact": [57, 72, 381], "artifici": [68, 91, 127, 201, 229, 341, 347, 348, 350, 415], "artstein": 144, "artstein_poesio_exampl": 144, "arxiv": [220, 328], "as_such": [57, 107], "asa": 399, "asbesto": [373, 409], "ascend": [117, 120, 334, 340, 341, 342, 355], "ascent": 324, "ascii": [51, 57, 72, 107, 341, 345, 348, 373, 375, 413], "ash": 419, "ashteroth": 371, "asian": 339, "ask": [24, 373], "asleep": [57, 72, 381], "aspect": [30, 89, 91, 119, 202, 373, 401], "aspen": [97, 373], "ass": 198, "assem": 209, "assembl": 155, "assembli": [373, 402], "assert": [25, 148, 318, 368, 373, 380, 401, 410, 413], "assert_classifier_correct": 258, "assertionerror": [365, 409], "assertnexttoken": [180, 191], "asserttoken": [180, 191], "assess": [218, 334, 373, 412], "assi": 399, "assign": [0, 29, 32, 34, 35, 36, 46, 47, 49, 51, 57, 67, 75, 95, 120, 125, 144, 148, 164, 170, 179, 180, 182, 186, 194, 213, 214, 215, 218, 223, 225, 314, 317, 325, 335, 366, 367, 371, 373, 374, 377, 379, 380, 388, 404, 413], "assign_clust": [47, 49, 51], "assign_valu": [302, 314], "assim": 399, "assinado": 399, "assist": 422, "assoc_measur": 196, "associ": [0, 53, 57, 73, 96, 100, 104, 107, 110, 119, 121, 125, 143, 148, 151, 159, 162, 163, 167, 171, 179, 182, 186, 187, 196, 225, 259, 366, 373, 422], "assum": [28, 35, 36, 44, 57, 58, 80, 87, 99, 102, 111, 120, 124, 135, 136, 142, 162, 164, 167, 170, 172, 179, 180, 182, 186, 196, 218, 305, 306, 312, 324, 331, 332, 333, 334, 338, 352, 360, 366, 373, 377, 379, 380, 402, 421], "assuming_posit": 373, "assumpt": [15, 35, 123, 124, 125, 126, 127, 128, 129, 130, 218, 319, 354, 388], "assur": 424, "asterisk": 284, "astound": [341, 348, 405], "asymp": 192, "at0": 363, "ate": [67, 386, 398], "athen": [182, 366, 373], "ati": 398, "atild": 192, "ating": 399, "atis_sent": 398, "atlanta": [223, 410], "atlantiqu": [57, 60], "atmospher": 373, "atom": [97, 123, 129, 130, 172, 180, 181, 186, 190, 191, 192, 379, 404], "atomicexpress": [0, 129, 180, 190], "att": 176, "attach": [55, 57, 88, 166, 373], "attack": 402, "attempt": [25, 111, 119, 120, 124, 129, 131, 158, 161, 174, 179, 190, 191, 316, 320, 341, 343, 357, 360, 373, 379, 388, 409, 413], "attempt_adjunct": [180, 181, 191], "attempt_applicationexpress": [180, 190, 191], "attempt_booleanexpress": [180, 191], "attempt_equalityexpress": [180, 191], "attent": [388, 409], "attest": [33, 43], "attested_label": [0, 30, 43], "attr": [57, 84, 107, 118, 357], "attrdict": [55, 57, 72], "attrib": [118, 119, 131, 185, 373, 401], "attribut": [57, 61, 72, 92, 93, 96, 98, 107, 110, 112, 117, 118, 119, 134, 135, 138, 162, 182, 206, 306, 314, 357, 366, 373, 375, 381, 411, 417, 418], "attributeerror": [373, 411, 417], "attrnam": [57, 72], "at\u00e9": 399, "au": 338, "audio": [57, 100], "audiodata": [55, 57, 100], "aug": 83, "augment": [57, 61, 81, 89, 93, 117, 180, 182, 396], "augparsecategori": [0, 12, 16], "august": [68, 90, 422], "augustin": 109, "aujourd": 410, "aumann": 422, "aumento": 373, "auml": 192, "ausgefeil": 203, "ausgefeilt": 203, "ausgefeilter": 203, "austen": 373, "austin": 424, "australia": 424, "autarquia": 399, "auth": 285, "authent": [0, 351, 355, 356, 357, 360], "author": [0, 30, 57, 61, 62, 63, 83, 88, 113, 133, 134, 209, 357, 373, 381], "authorit": 371, "auto": [43, 111, 131, 191, 364, 375, 417], "auto_format": [0, 111, 375], "auto_reweigh": 324, "autobahn": 209, "autobahnen": 209, "autom": [388, 399, 405], "automat": [7, 8, 18, 39, 57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 82, 84, 85, 93, 98, 104, 105, 107, 108, 109, 111, 113, 119, 134, 135, 161, 163, 169, 175, 182, 184, 191, 213, 219, 222, 223, 225, 324, 325, 335, 337, 339, 341, 343, 345, 358, 367, 375, 380, 399, 413], "automobil": 417, "automotor": 417, "autom\u00f3vil": 417, "autostep": 7, "autun": 109, "aux": [163, 367, 379, 415], "av": 399, "av0": 363, "avail": [0, 7, 8, 33, 46, 57, 65, 81, 89, 96, 100, 105, 113, 120, 133, 154, 164, 173, 174, 176, 182, 203, 209, 213, 215, 219, 229, 262, 308, 310, 312, 313, 319, 347, 350, 354, 366, 371, 373, 380, 398, 399, 401, 420, 422], "available_categori": [55, 57, 106], "available_lang": [55, 57, 106], "averag": [20, 33, 46, 49, 144, 150, 151, 179, 221, 317, 324, 325, 328, 332, 334, 337, 339], "average_charact": [322, 326], "average_weight": [213, 221], "averagedperceptron": [0, 213, 221, 422], "avg_ao": [143, 144], "avistar": 399, "avoid": [25, 43, 50, 52, 57, 72, 107, 108, 120, 135, 179, 184, 191, 324, 373, 410, 421, 422], "avoid_empty_clust": 50, "aw": 67, "awai": 37, "awar": [57, 72, 304, 381], "awb": [373, 375], "awfulli": 198, "awkwardli": 301, "ax": [46, 116, 179, 373, 422], "axelrod": 327, "axi": 419, "ayer": 364, "az": [57, 103], "azerbaijani": 373, "azeri_azerbaijani_cyril": [57, 103], "azeri_azerbaijani_latin": [57, 103], "a\u0252\u1d45\uffcb\ua9af\ua9a5": [], "b": [0, 7, 15, 33, 39, 42, 52, 57, 67, 72, 89, 100, 106, 109, 120, 121, 125, 129, 131, 135, 136, 137, 142, 144, 148, 150, 162, 176, 179, 182, 186, 190, 214, 216, 222, 232, 305, 307, 308, 312, 313, 317, 319, 323, 325, 333, 338, 347, 350, 357, 364, 365, 368, 369, 373, 375, 378, 379, 380, 382, 384, 386, 388, 389, 391, 392, 395, 396, 397, 398, 400, 402, 403, 409, 410, 411, 413, 417], "b1": [121, 167, 180, 379, 404], "b2": [167, 180, 379, 404], "b3": 167, "b_decr": [195, 198], "b_graph": 170, "b_i": 218, "b_incr": [195, 198], "b_of": 182, "ba": [100, 148], "babavam": 399, "babelfish": [0, 153, 422], "babelize_shel": [0, 153, 154], "babi": 417, "bach": 309, "bachelor": 100, "back": [25, 52, 61, 80, 93, 133, 179, 223, 327, 339, 341, 348, 410, 415], "background": [57, 72, 117, 123, 125, 375, 381], "background0": 388, "backlink": 326, "backoff": [136, 140, 213, 216, 223, 391, 399, 409], "backslash": [312, 411], "backtrac": 148, "backtrack": [7, 111, 159, 173, 217], "backward": [14, 15, 107, 120, 218, 233, 327, 404, 417], "backwardbxconstraint": [0, 12, 15], "backwardcombin": [0, 12, 15], "backwardonli": [0, 12, 15], "backwardsxconstraint": [0, 12, 15], "backwardtconstraint": [0, 12, 15], "backwardtyperaiserul": [0, 12, 14], "bacon": 365, "bacuth": 371, "bad": [148, 197, 198, 213, 335, 368, 375, 380, 405, 417], "bad_egg": 417, "bad_person": 417, "badeater1": 389, "badeater2": 389, "badidentifi": 373, "badscor": [57, 77], "baffl": 417, "bag": 37, "bai": [405, 422], "baikalfinansgroup": 92, "bailei": 410, "bake": [57, 72, 381], "baker": [57, 105], "balanc": [96, 368, 405], "baldridg": 422, "ball": 36, "ballison": 357, "baltic": [57, 103], "baltimor": 424, "bam": 394, "banal": 405, "bangkok": 366, "bangla": [74, 422], "banish": 373, "bank": [358, 419], "banker": 419, "banner": 402, "bar": [46, 61, 72, 80, 93, 108, 131, 314, 368, 371, 375, 380, 391, 400, 410, 422], "barcelona": 366, "bare": [198, 202, 226, 301, 373], "bark": [57, 62, 375, 377, 378, 379, 392, 404, 417], "barlei": 373, "bartlett": [306, 314, 317], "base": [3, 8, 13, 14, 15, 16, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 144, 146, 147, 148, 149, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 231, 232, 233, 248, 250, 251, 253, 254, 255, 256, 257, 260, 261, 262, 263, 265, 266, 271, 272, 273, 274, 275, 276, 278, 280, 281, 283, 284, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 326, 329, 330, 331, 332, 333, 334, 335, 337, 339, 340, 341, 342, 343, 345, 346, 348, 349, 352, 353, 355, 356, 357, 366, 367, 373, 375, 376, 378, 380, 381, 389, 391, 392, 399, 402, 410, 412, 413, 417, 418, 422], "base_fdist": [0, 179], "base_path": 39, "base_url": 113, "baseform": [57, 81, 89], "baselin": [151, 216, 229, 409], "baseline_backoff_tagg": 229, "baseline_data": [216, 409], "basemodelbuildercommand": [0, 123, 124, 126], "basengrammodel": [135, 138], "basenji": 417, "baseprovercommand": [0, 123, 124, 128, 129, 130], "basetheoremtoolcommand": [0, 123, 124], "basewidget": 119, "basi": [32, 57, 81, 89, 113, 373, 381, 401], "basic": [46, 47, 57, 72, 120, 121, 125, 162, 176, 197, 204, 209, 225, 229, 283, 304, 341, 348, 373, 380, 381], "basic_multilingual_plan": 320, "basic_sent_chop": [0, 213, 225], "basictweethandl": [0, 351, 352], "basictyp": [0, 180, 191], "basqu": 422, "bastil": 417, "batch": [38, 194], "batch_eat": [131, 389], "batch_tag": 215, "batch_tag_increment": [213, 215, 216, 409], "bater": 399, "batteri": [57, 90, 373, 421], "battl": 373, "baum": 218, "bay": [35, 36, 38, 197, 369], "baz": [61, 80, 93, 108, 380, 391], "bb": 392, "bb1": 205, "bbccc": 400, "bbox": [114, 117, 119], "bcc": 400, "bccd": 400, "bcp": [57, 60, 133, 422], "bcp47": [55, 57], "bcp47corpusread": [55, 57, 60], "bdfoi": [57, 106], "bdquo": 192, "beam": [171, 225], "beam_siz": [171, 177, 398], "beam_threshold": [322, 340], "beat": 410, "beatti": 405, "beauti": [221, 405, 409], "bebida": 364, "becam": [371, 402], "becaus": [33, 57, 72, 79, 80, 107, 108, 111, 117, 120, 124, 135, 138, 142, 148, 175, 176, 204, 209, 223, 301, 313, 319, 324, 328, 331, 332, 333, 334, 339, 340, 364, 365, 373, 380, 391, 417], "becom": [50, 78, 97, 120, 171, 347, 350, 375, 379, 380], "bede": 109, "bedz": [373, 410], "bee": 207, "beeferman": 151, "been": [7, 8, 29, 35, 57, 59, 92, 102, 104, 111, 117, 119, 120, 125, 129, 131, 135, 136, 142, 144, 145, 148, 149, 161, 162, 169, 170, 171, 173, 174, 175, 178, 179, 182, 192, 196, 197, 204, 209, 218, 225, 233, 257, 285, 305, 307, 309, 318, 333, 340, 352, 353, 355, 360, 365, 366, 372, 373, 375, 379, 380, 388, 399, 405, 409, 410, 412, 417, 420, 422], "beer": 371, "befor": [7, 25, 30, 34, 48, 50, 110, 111, 113, 116, 119, 120, 124, 126, 127, 128, 131, 135, 147, 152, 162, 163, 165, 169, 171, 173, 174, 175, 179, 197, 209, 214, 217, 223, 225, 251, 260, 271, 299, 309, 313, 314, 321, 324, 326, 333, 341, 345, 355, 357, 368, 373, 375, 377, 379, 380, 398, 399, 400, 401, 409, 411, 413, 421, 422], "beforehand": [57, 72, 381], "beg_word": 80, "began": 359, "begin": [10, 28, 57, 58, 104, 111, 118, 120, 131, 162, 171, 173, 174, 177, 201, 202, 204, 218, 306, 309, 317, 341, 348, 373, 399, 401, 409, 411], "begsten": 151, "behav": [117, 169, 186], "behavior": [2, 28, 50, 57, 104, 107, 312, 373, 375, 417, 418, 419], "behaviour": [206, 324, 353, 413], "behind": [95, 119, 406], "being": [28, 29, 46, 48, 53, 57, 72, 107, 111, 135, 146, 170, 171, 173, 179, 190, 191, 196, 203, 218, 223, 225, 233, 306, 323, 324, 325, 326, 328, 333, 335, 337, 339, 340, 354, 357, 373, 379, 405, 409, 417, 422], "being_dress": 373, "beirut": 402, "believ": [367, 392, 403, 417], "bell": [135, 138, 140, 179, 391, 413], "belles_lettr": [373, 400], "bellingham": 422, "bellring": 381, "belong": [31, 48, 51, 57, 72, 91, 107, 170, 231, 334, 353, 373, 402], "below": [34, 57, 67, 107, 112, 121, 135, 142, 209, 229, 324, 328, 333, 339, 340, 353, 355, 360, 371, 373, 379, 380, 381, 399, 402], "ben": [371, 410], "benchmark": [306, 314], "bend": 373, "bender": 283, "benedictin": 109, "benefit": 151, "bengali": 373, "bennet": 144, "bennett": 144, "bentho": 417, "benzahia": 209, "berger": 151, "berkelei": [57, 72, 306], "berlin": [366, 383, 424], "bernoulli": [34, 369], "bernoullinb": 369, "beroep": 402, "berri": 373, "besid": 419, "best": [26, 38, 57, 65, 84, 170, 171, 196, 203, 206, 221, 225, 311, 329, 330, 331, 333, 334, 335, 339, 340, 373, 381, 400, 410, 420, 422], "best_binary_stump": [30, 32], "best_incoming_arc": [159, 170], "best_model2_align": [322, 334], "best_path": [213, 218], "best_path_simpl": [213, 218], "best_stump": [30, 32], "beta": [121, 162, 167, 184, 191, 192, 218, 325, 335, 337, 339, 422], "beta_0": 218, "beta_t": 218, "bethard": 422, "better": [14, 24, 37, 57, 69, 154, 203, 216, 225, 233, 300, 389, 408, 409, 422], "betteroffout": 373, "betti": [180, 404], "between": [23, 25, 28, 37, 42, 50, 51, 52, 53, 57, 72, 75, 87, 91, 104, 107, 118, 119, 120, 121, 125, 133, 144, 145, 147, 148, 150, 152, 167, 172, 179, 192, 197, 198, 216, 218, 220, 229, 252, 266, 300, 307, 310, 317, 323, 324, 326, 328, 332, 335, 336, 339, 340, 341, 342, 345, 346, 347, 348, 350, 355, 373, 379, 380, 381, 383, 398, 402, 412, 413, 417, 419], "beyond": [125, 144, 305, 347, 350, 373, 409], "bez": 373, "bf": 417, "bfg": [33, 217], "bg": [117, 377], "bhojpuri": [57, 103], "bi": 225, "bia": [34, 48], "bias": 29, "bib": [57, 59, 107], "bibl": 417, "bicondit": 191, "bidirect": [224, 300, 327], "big": [25, 188, 213, 301, 329, 330, 331, 332, 333, 373, 378, 417], "biggest": [57, 63, 373], "bigram": [0, 53, 135, 137, 146, 196, 197, 309, 324, 357, 371, 394, 399], "bigram_collocation_feat": [195, 196], "bigram_fd": [53, 371], "bigram_find": [0, 53], "bigram_measur": [53, 371], "bigram_score_fn": 146, "bigram_training_data": 249, "bigramassocmeasur": [0, 143, 146, 196, 197, 371, 394], "bigramcollocationfind": [0, 53, 371], "bigramtagg": [0, 213, 223, 399], "biject": 133, "bilingu": [324, 326, 339], "bill": [92, 127, 148, 373, 396], "billi": [148, 396], "billion": [57, 72, 92, 216, 373, 381, 383, 409], "bin": [34, 41, 131, 179, 181, 218, 383, 388, 400, 402, 422], "bin_dir": 181, "binar": [0, 121, 347, 350], "binari": [14, 15, 25, 27, 32, 33, 34, 36, 39, 41, 43, 121, 128, 131, 144, 164, 170, 177, 182, 186, 191, 219, 311, 357, 366, 369, 388], "binaris": 121, "binary_concept": [0, 180, 182], "binary_dist": [0, 143, 144, 148, 394], "binary_loc": [123, 128, 388], "binary_nam": 131, "binary_names_demo_featur": [0, 30, 43], "binary_search_fil": [0, 357], "binary_stump": [30, 32], "binarycombinatorrul": [0, 12, 14], "binaryexpress": [0, 180, 184, 191], "binarymaxentfeatureencod": [0, 30, 33], "bind": [114, 117, 118, 119, 120, 129, 159, 167, 181, 183, 190, 191, 301], "bind_click": [114, 119], "bind_click_leav": [114, 118], "bind_click_nod": [114, 118], "bind_click_tre": [114, 118], "bind_drag": [114, 119], "bind_drag_leav": [114, 118], "bind_drag_nod": [114, 118], "bind_drag_tre": [114, 118], "bind_to_column": [114, 117], "bind_to_label": [114, 117], "bind_to_listbox": [114, 117], "binder": [184, 191], "binding_list": 129, "binding_op": [0, 180, 191, 392], "bindingdict": [0, 123, 129, 180, 190, 384], "bindingexcept": [0, 123, 129], "bindop": [183, 379], "bing": [68, 83, 90, 91], "binomi": 357, "binomial_coeffici": 357, "binop": [180, 191], "bio": 222, "bio_to_chunk": [213, 222], "biographi": 163, "birch": 327, "bird": [0, 127, 396, 420, 422, 424], "birth": [57, 72, 100, 367], "birthdai": [57, 72, 367, 381], "birthdat": [100, 373], "biserr": 395, "bisneto": 399, "bit": [57, 72, 100, 229, 301, 307, 341, 345, 363, 415], "bitext": [329, 330, 331, 332, 333], "bitstr": 88, "bitt": 412, "bkfiubydz2": 410, "black": [100, 422], "blackboard": [162, 165], "blackburn": [125, 188, 392], "blackman": 317, "blah": 400, "blanch": [57, 72, 381], "blanchard": 391, "blank": [57, 66, 69, 74, 83, 87, 99, 106, 158, 310, 313, 321, 373], "blank_befor": 321, "blanklin": 313, "blankline_token": [0, 302, 310], "blanklinetoken": [0, 197, 302, 310], "blanks_befor": 321, "blanks_between": 321, "bleibt": 338, "bless": 300, "bleu": [289, 308, 324, 325, 328, 337, 339, 361, 422], "bleu_scor": [0, 322, 328, 362], "blickl": 109, "blico": 399, "blili": 148, "blindado": 399, "blk": 100, "bllip": [0, 159, 422], "bllippars": [0, 159, 161], "blob": [209, 234, 308, 318, 320, 410, 422], "block": [57, 58, 59, 62, 66, 71, 74, 75, 76, 78, 83, 86, 87, 91, 94, 100, 103, 104, 131, 186, 317, 326, 373], "block_comparison": 317, "block_read": [57, 58, 64, 66, 71, 74, 75, 83, 86, 94, 99, 104, 373], "block_siz": [104, 373], "blockquot": [57, 78, 373], "blockquote_read": [57, 78], "blog": [221, 410], "blogspot": 422, "bloomer": 417, "blow": 373, "blue": [7, 163, 315, 341, 345], "blur": 373, "bn": 121, "bnc": [55, 57, 72, 93, 361, 422], "bnccorpusread": [55, 57, 61, 363], "bncsentenc": [55, 57, 61], "bncwordview": [55, 57, 61], "bo": [63, 125, 181, 183, 188, 379, 392], "boa": 399, "board": [166, 373, 376], "boat": 412, "bob": [339, 380, 398, 403], "boban": 402, "boca": 399, "bod": [57, 72], "bodenstab": 422, "bodi": [79, 418, 419], "bodlei": 109, "body_internal_mot": 373, "body_internal_st": 373, "body_system": [57, 72], "boethiu": 109, "boi": [57, 63, 180, 339, 373, 377, 378, 379, 398, 404], "boil": [57, 72, 135, 381], "boisen": 422, "bold": 117, "boll": 405, "bolli": 148, "bom": 411, "bomb": [198, 402], "bombai": [74, 366], "bond": 424, "bone": [372, 422], "book": [0, 57, 79, 107, 154, 155, 176, 213, 257, 260, 300, 302, 324, 328, 329, 330, 331, 332, 333, 339, 360, 365, 373, 392, 399, 405, 410, 412, 417, 420, 422], "book1": 125, "book_1": 420, "book_grammar": [366, 375, 377, 378, 379, 387, 398, 404], "bookstein": 151, "bool": [13, 14, 33, 37, 57, 107, 111, 116, 117, 119, 120, 121, 124, 126, 129, 147, 148, 151, 162, 167, 173, 174, 177, 179, 181, 182, 184, 186, 190, 191, 194, 203, 209, 214, 215, 216, 218, 225, 229, 231, 232, 233, 300, 301, 302, 304, 305, 309, 310, 319, 320, 321, 324, 325, 341, 347, 348, 350, 355, 357, 392, 422], "boolean": [13, 30, 33, 38, 44, 48, 49, 50, 51, 57, 72, 151, 184, 190, 191, 197, 203, 217, 218, 225, 323, 339, 380, 388], "boolean_op": [0, 180, 191, 392], "booleanexpress": [0, 180, 184, 191], "booster": 405, "booster_dict": [195, 198], "bop": 373, "borba": 399, "borboleta": 399, "borboletinha": 399, "border": [182, 366], "borderwidth": 117, "bore": [95, 406, 410], "borel": [42, 70], "boskov": 402, "bot": 22, "both": [25, 28, 31, 36, 37, 39, 53, 55, 57, 69, 72, 86, 92, 93, 107, 111, 113, 117, 119, 120, 121, 124, 128, 135, 136, 140, 152, 162, 172, 176, 179, 190, 191, 197, 201, 202, 204, 214, 218, 225, 229, 301, 303, 306, 309, 317, 324, 340, 341, 348, 368, 373, 375, 380, 381, 386, 388, 398, 400, 401, 405, 413, 422], "both_most_common": 400, "bothbackward": [0, 12, 15], "bothforward": [0, 12, 15], "bothord": [341, 348], "bottl": 163, "bottleneck": [46, 375], "bottom": [2, 117, 118, 119, 162, 171, 172, 174, 178, 341, 345, 398], "bottomupchartpars": [0, 159, 162, 398], "bottomupleftcornerchartpars": [0, 159, 162, 398], "bottomuppredictcombinerul": [0, 159, 162, 165, 167], "bottomuppredictrul": [0, 159, 162, 167], "bottomupprobabilisticchartpars": [0, 159, 171], "bought": [92, 410], "bound": [52, 57, 72, 107, 117, 119, 120, 129, 131, 148, 182, 184, 190, 191, 196, 223, 309, 320, 353, 357, 379, 380, 381, 382, 384, 410, 417], "boundari": [28, 57, 99, 151, 300, 309, 317, 326, 410, 412], "bounding_box": 353, "box": [117, 119, 324, 353, 360, 362], "boxer": [0, 125, 180, 375, 377, 388, 392], "boxer_drs_interpret": 181, "boxercard": [0, 180, 181], "boxerdog": [125, 375, 377, 388], "boxerdr": [0, 180, 181], "boxerdrspars": [0, 180, 181], "boxereq": [0, 180, 181], "boxerindex": [0, 180, 181], "boxernam": [0, 180, 181], "boxernot": [0, 180, 181], "boxeror": [0, 180, 181], "boxeroutputdrspars": [0, 180, 181], "boxerpr": [0, 180, 181], "boxerprop": [0, 180, 181], "boxerrel": [0, 180, 181], "boxerwhq": [0, 180, 181], "boxwidget": [0, 114, 119], "boyd": [136, 422], "bp": [339, 410], "bp1": 324, "bp2": 324, "br": [373, 422], "brace": [28, 357, 380], "bracket": [16, 28, 29, 57, 61, 62, 93, 109, 119, 120, 135, 137, 188, 257, 300, 341, 344, 348, 368, 380, 413], "bracket_pars": [0, 55, 57, 341, 344], "bracket_s": 93, "bracketparsecorpusread": [55, 57, 62, 109, 373], "bracketwidget": [0, 114, 119], "braid": 373, "braini": 394, "bramanismo": 399, "branch": [32, 51, 107, 118, 170, 172, 341, 348, 357, 417], "brand": 91, "brant": 225, "brasil": 373, "brat": 100, "brave": 300, "brazilian": [399, 422], "breadth": [107, 357, 417], "breadth_first": [0, 357, 416], "break": [57, 63, 68, 78, 87, 90, 91, 102, 103, 163, 309, 314, 317, 357, 364, 373, 383, 399, 405, 413, 416, 417], "breakbefor": [57, 72], "breakdown": [57, 62, 95, 406], "breakfast": 383, "breaklin": [57, 72], "breath": [373, 417], "breed": 417, "breiman": 136, "breviti": [324, 337, 339], "brevity_penalti": [0, 322, 324], "bridg": 328, "brief": [57, 72], "bright": 373, "brill": [0, 213, 216, 229, 231, 232, 233, 254], "brill24": [0, 213, 215], "brill_train": [0, 213], "brillrul": 233, "brilltagg": [0, 213, 215, 216, 227], "brilltaggertrain": [0, 213, 216, 409], "brilltemplatei": [0, 227, 233], "brincar": 399, "bring": [300, 373, 394, 422], "britain": 373, "british": [57, 61, 398], "bro": 300, "broad": [57, 105], "broader": 163, "broadli": 367, "broil": [57, 72, 381], "broken": [111, 188, 216, 306, 314, 373, 409], "broken_tre": 413, "brook": [148, 163, 224, 402], "brookhaven": 148, "brought": [372, 373], "brown": [55, 57, 72, 107, 111, 163, 175, 179, 213, 221, 223, 317, 329, 330, 331, 332, 333, 334, 360, 367, 371, 373, 381, 383, 391, 400, 410, 417, 422], "brown2": 373, "brown_ic": 417, "brown_tagset": [0, 122], "brows": 10, "browser": [1, 10, 57, 65, 422], "browserv": 10, "brrokhaven": 148, "brunch": 417, "brutedom": 395, "brvbar": 192, "br\u00e1": 399, "bsd": 112, "btjwrpbmoi": 373, "bubbl": [0, 153, 157, 395], "buch": [329, 330, 331, 332, 333, 412], "buf_0_form_econom": 176, "buf_0_form_market": 176, "buf_0_ldep_att": 176, "buf_0_lemma_econom": 176, "buf_0_lemma_market": 176, "buf_0_pos_jj": 176, "buf_0_pos_nn": 176, "buf_1_form_": 176, "buf_1_form_new": 176, "buf_1_pos_": 176, "buf_1_pos_nn": 176, "buf_2_pos_vbd": 176, "buf_3_pos_jj": 176, "buffer": [25, 111, 176, 180, 184, 191, 355, 373], "bufferedgzipfil": [0, 111, 375], "bug": [234, 257, 281, 386, 395, 417, 422, 424], "bugfix": [359, 422], "bui": [163, 302, 305, 310, 313, 315, 319, 320, 407, 410], "build": [7, 8, 36, 37, 38, 52, 57, 72, 85, 92, 119, 123, 124, 125, 126, 135, 164, 177, 182, 186, 215, 217, 233, 309, 310, 313, 340, 357, 373, 377, 378, 380, 399, 419, 420, 422], "build_index": [0, 113], "build_model": [0, 25, 27, 123, 124, 388], "build_preprocessed_fil": [57, 80], "builder": [124, 125, 126], "buildindex": [55, 57, 72], "built": [30, 33, 52, 107, 118, 119, 135, 142, 165, 170, 176, 188, 191, 211, 213, 357, 368, 373, 392, 422], "builtin": [111, 321], "buitenlandse_handel": 402, "bul": 417, "bulg": 373, "bulgarian": 373, "bulk": 372, "bull": 192, "bump": 373, "bundl": [182, 366], "burger": 404, "burmese_myanmar": [57, 103], "burn": 419, "burnt": 371, "bush": 373, "busi": [39, 402, 419], "butter": 373, "butterless": 300, "button": [2, 7, 8, 118, 119], "buttonpress": 119, "bye": 373, "bypass": [300, 375], "byrhtferth": 109, "byte": [57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 82, 84, 85, 93, 98, 105, 107, 108, 109, 111, 113, 283, 357, 373, 375, 390, 417], "bytebuff": [0, 111], "bytesio": 373, "b\u1011\u3186\u11ce\u14bb": [], "b\ua409\u0e1f": 308, "c": [0, 25, 30, 33, 39, 46, 49, 52, 57, 62, 63, 67, 68, 72, 77, 79, 83, 90, 91, 106, 109, 113, 121, 125, 130, 134, 135, 136, 137, 142, 144, 145, 148, 151, 171, 172, 179, 181, 182, 198, 214, 215, 216, 220, 223, 225, 229, 231, 232, 233, 307, 312, 313, 323, 326, 327, 335, 339, 341, 345, 347, 350, 357, 360, 366, 368, 369, 373, 378, 379, 380, 381, 384, 388, 389, 391, 392, 394, 395, 396, 398, 399, 400, 403, 404, 409, 410, 413, 417], "c1": [57, 72, 144, 217, 341, 348, 366, 368, 373, 377, 388], "c123": 373, "c2": [144, 217, 341, 348, 366, 373, 377, 388], "c3": [366, 373, 388], "c5": [57, 61, 363], "c_exp": 145, "c_graph": 170, "c_incr": [195, 198], "c_skip": 145, "c_sub": 145, "c_vwl": 145, "ca": [57, 60, 106, 133, 144, 145, 208, 314, 319], "ca01": [371, 373], "ca02": 373, "ca03": 373, "ca04": 373, "ca05": 373, "ca06": 373, "ca07": 373, "cabe": 399, "cabeceira": 399, "cabinet": 372, "cable_car": 417, "cach": [52, 57, 69, 104, 111, 113, 162, 167, 179, 229, 357, 400, 417], "cache_baseline_tagg": 229, "cache_s": 52, "cachedepth": 357, "cachedtopdownpredictrul": [0, 159, 162, 165, 167], "cachorra": 417, "cachorro": 417, "caclcul": [57, 65], "cad": 417, "cada": 399, "cadela": 417, "caf\u00e9": 410, "cake": [57, 72, 364, 373, 381], "calc_dist": [30, 42], "calcul": [33, 35, 37, 39, 42, 46, 48, 52, 53, 57, 65, 104, 107, 113, 121, 135, 136, 142, 144, 146, 148, 150, 152, 170, 179, 188, 218, 223, 225, 309, 324, 325, 328, 335, 337, 339, 340, 357, 369, 371, 394, 412, 417, 422], "calculate_delta": [0, 30, 33], "calculate_empirical_fcount": [0, 30, 33], "calculate_estimated_fcount": [0, 30, 33], "calculate_leftcorn": 121, "calculate_nfmap": [0, 30, 33], "calculu": [184, 191, 379, 422], "calcutta": 366, "calibratable_co": 373, "calif": 402, "california": [91, 97, 373], "call": [2, 7, 14, 25, 33, 34, 41, 51, 52, 57, 59, 61, 72, 78, 79, 80, 81, 89, 100, 102, 104, 107, 108, 112, 113, 117, 118, 119, 120, 121, 124, 125, 131, 132, 134, 135, 137, 142, 159, 162, 165, 169, 171, 173, 174, 179, 185, 186, 191, 196, 201, 202, 205, 209, 219, 225, 231, 232, 233, 301, 304, 309, 312, 324, 328, 341, 348, 354, 355, 357, 365, 368, 369, 372, 373, 374, 375, 379, 380, 381, 382, 388, 389, 400, 401, 404, 410, 411, 412, 413, 417, 420, 422], "call_megam": [0, 30, 34], "call_tadm": [0, 30, 41], "callabl": [33, 72, 112, 124, 218, 335], "callback": [117, 118, 119], "caller": [112, 219], "callison": 327, "calv": 373, "calypso": 399, "cama": 399, "cambridg": [306, 314, 329, 330, 331, 332, 333, 334, 340, 412], "came": [190, 372], "camera": [57, 91, 373], "camera_review": [57, 91, 373], "caminho": 399, "campo": 399, "can": [2, 7, 8, 13, 14, 15, 24, 25, 28, 29, 30, 31, 33, 34, 36, 39, 43, 44, 46, 49, 52, 55, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 93, 94, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 121, 124, 125, 129, 131, 135, 136, 137, 142, 144, 145, 147, 156, 158, 159, 160, 161, 162, 163, 165, 167, 169, 170, 171, 172, 173, 174, 177, 179, 180, 181, 182, 186, 191, 192, 196, 197, 198, 201, 202, 203, 206, 209, 215, 216, 218, 222, 223, 225, 229, 231, 233, 257, 281, 300, 301, 302, 305, 306, 309, 310, 312, 313, 314, 319, 321, 324, 326, 331, 332, 333, 335, 339, 340, 341, 342, 343, 345, 347, 348, 350, 352, 353, 355, 357, 360, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 392, 394, 396, 398, 399, 400, 401, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 415, 417, 418, 421, 422], "can_combin": [12, 15], "can_compos": [12, 13], "can_cross": [12, 13], "can_unifi": [12, 13], "cancel": 7, "candc": 181, "candid": [57, 107, 159, 229, 233, 297, 309, 331, 332, 333, 336, 340, 362, 388, 393, 417, 422], "candidatur": 371, "cane": 417, "cani": 417, "canin": [57, 107, 357, 413, 417], "canis_familiari": 417, "cannib": 372, "cannot": [13, 57, 107, 120, 127, 129, 135, 136, 137, 190, 196, 198, 211, 215, 229, 301, 326, 333, 341, 345, 384, 388, 391, 392, 404, 410, 417], "canon": [57, 91, 107, 109, 192, 373], "canon_g3": [57, 91, 373], "canonic": 192, "cant": 198, "canton": 366, "canva": [7, 8, 114, 118, 119, 184, 185], "canvasfram": [0, 114, 119], "canvaswidget": [0, 114, 118, 119], "cao": 328, "cap": [192, 198, 399], "capabl": 191, "capacidad": 399, "capaz": 399, "cape": 300, "capit": [225, 309, 310, 405, 417], "capital_of": 182, "capitalis": 304, "captain": 373, "captor": 163, "captur": [131, 170, 192, 300, 310, 383, 410], "capture_output": 164, "capword_token": 310, "car": [207, 379, 398, 417], "carcass": 373, "card": 150, "cardin": [29, 192, 216, 220, 223, 332, 333, 373, 402, 409], "care": [104, 179, 215, 373, 405, 410], "caress": 408, "carnegi": 67, "carnivor": [57, 107, 357, 413, 417], "carp": 373, "carri": [125, 148, 182, 183, 366, 373, 402, 405], "carriag": 270, "carro": [399, 417], "cartaz": 399, "carter": 405, "cartesian": [125, 233], "carv": 373, "casa": 399, "casada": 399, "casamento": 399, "cascad": [28, 422], "case": [15, 33, 36, 39, 43, 46, 52, 55, 57, 59, 65, 72, 96, 99, 107, 112, 113, 116, 120, 121, 131, 132, 135, 137, 142, 144, 148, 156, 163, 174, 175, 182, 197, 203, 213, 214, 218, 221, 223, 248, 283, 284, 300, 304, 306, 314, 324, 328, 332, 333, 335, 355, 360, 366, 371, 373, 375, 376, 377, 379, 380, 381, 387, 388, 389, 396, 398, 401, 402, 409, 410, 413, 417, 418], "case_insensit": 203, "casinha": 208, "casmurro": 399, "caso": 399, "cassati": 402, "cast": [131, 324, 339, 372], "castellan": 144, "castor": 373, "castro": 399, "casual": [0, 57, 102, 284, 302, 373], "casual_token": [0, 302, 304], "cat": [36, 121, 156, 163, 175, 217, 221, 301, 324, 325, 328, 335, 341, 348, 368, 373, 378, 379, 386, 393, 398, 407, 413, 417], "cat_delimit": [57, 59, 86], "cat_field": 78, "cat_fil": [57, 59, 62, 78, 86, 87, 99], "cat_map": [57, 59, 62, 78, 86, 87, 99], "cat_pattern": [57, 59, 62, 78, 86, 87, 99], "catalan": [57, 60, 106, 133, 422], "catalog": 422, "catch": [36, 107, 357, 409], "categ": [12, 13, 14, 15, 16], "categor": [42, 57, 59, 62, 63, 78, 87, 97, 99, 332, 420, 422], "categori": [0, 12, 13, 15, 16, 30, 31, 32, 33, 35, 55, 57, 59, 62, 63, 75, 78, 86, 87, 90, 99, 106, 121, 123, 130, 144, 213, 223, 369, 371, 379, 380, 391, 400, 405, 422], "categorized_s": [55, 57], "categorizedbracketparsecorpusread": [55, 57, 62], "categorizedcorpusread": [55, 57, 59, 62, 63, 78, 86, 87, 90, 99, 400], "categorizedmarkdowncorpusread": [55, 57, 78, 373], "categorizedplaintextcorpusread": [55, 57, 78, 87], "categorizedsentencescorpusread": [55, 57, 63], "categorizedtaggedcorpusread": [55, 57, 99, 373], "catfish": [57, 72, 381], "cathi": [170, 172], "cathol": 109, "cathstaincliff": 410, "cato": 109, "catss": 211, "caught": 404, "caus": [25, 107, 111, 131, 179, 232, 283, 341, 343, 373, 375, 380, 381, 410, 413], "cause_change_of_scalar_posit": [57, 72, 381], "cause_mot": 381, "cause_t": 381, "cause_to_make_nois": [57, 72, 381], "caution": [302, 310], "caveat": [0, 28, 120, 354, 380], "cavnar": 42, "cb": 144, "cb01": 373, "cby": [57, 72], "cc": [91, 214, 216, 392, 409, 410, 413], "cc0": [57, 85], "ccb": [57, 106], "ccedil": 192, "ccg": [0, 361, 422], "ccg_semant": 361, "ccgbank": 365, "ccgchart": [0, 12, 14], "ccgchartpars": [0, 12, 14, 364, 365], "ccgedg": [0, 12, 14], "ccgleafedg": [0, 12, 14], "ccglexicon": [0, 12, 16], "ccgvar": [0, 12, 13, 16], "cd": [166, 214, 216, 223, 376, 398, 401, 409, 410, 420], "cdate": [57, 72], "cdp": 396, "ce": [306, 314], "ce01": 373, "ce02": 373, "ce03": 373, "ce04": 373, "ce05": 373, "ce06": 373, "ce07": 373, "ceas": 355, "cedil": 192, "cee": 378, "ceil": [199, 332, 334, 405], "cell": [117, 158, 164, 172, 376], "cell_extractor": [164, 376], "cell_separ": 164, "cell_valu": 117, "cem": 205, "cement": 205, "censu": 148, "cent": 192, "center": [39, 48, 119, 332, 333], "center_of_cept": [322, 334], "central": [360, 402], "central_africa": [182, 366], "centrifug": 419, "centroid": [46, 49, 50], "cept": [322, 332, 333, 334], "cereal": 383, "certain": [24, 57, 72, 135, 136, 232, 300, 332, 340, 396], "certainli": 373, "certifi": 357, "certo": 399, "ceuta": 402, "cf": 373, "cf01": 373, "cf02": 373, "cf03": 373, "cf04": 373, "cfd": 400, "cfd1": 400, "cfd2": 400, "cfdist": 179, "cfg": [0, 7, 8, 14, 111, 114, 121, 162, 165, 167, 168, 173, 174, 177, 182, 375, 379, 382, 386, 407, 422], "cfgdemo": [0, 114, 115], "cfgeditor": [0, 114, 115], "cfgreadingcommand": [0, 123, 125], "cfm": [337, 358], "cgi": 422, "ch": [53, 57, 67, 107, 373], "ch01": 260, "ch07": 257, "cha": [57, 65, 305], "chad": 109, "chain": [81, 89, 139, 218, 400, 401], "chair": 402, "chairman": [25, 373], "chalk": 169, "challeng": [57, 92, 422], "chamejant": 399, "chanc": [135, 144, 402], "chancellor": 373, "chang": [25, 39, 48, 107, 119, 131, 135, 142, 145, 148, 162, 173, 174, 204, 205, 206, 216, 218, 225, 232, 233, 234, 322, 340, 360, 368, 380, 388, 409, 418, 422], "change_bodily_st": 373, "change_of_consist": [57, 72], "change_var": [180, 181], "changelog": 422, "channel": [55, 57, 75, 100, 419], "chapter": [55, 57, 79, 87, 179, 213, 218, 302, 306, 314, 372, 379, 394, 399, 422], "char": [55, 57, 106, 177, 312, 313, 320, 373, 392], "char_po": 339, "char_seek_forward": [0, 111], "charact": [28, 57, 62, 72, 75, 84, 104, 106, 111, 113, 115, 119, 135, 148, 162, 177, 187, 191, 219, 224, 284, 300, 304, 306, 309, 310, 312, 313, 314, 319, 320, 325, 326, 341, 344, 345, 348, 354, 357, 373, 405, 410, 411, 413], "character": [57, 72, 119, 373], "character_bas": 339, "characteris": 218, "characterist": [57, 72], "charg": [381, 410], "charl": 381, "charm": 405, "charset": 219, "chart": [0, 1, 2, 12, 121, 159, 165, 167, 171, 172, 177, 347, 350, 364, 379, 422], "chart_class": [162, 165, 167, 177, 379], "chart_pars": [159, 162, 165, 398], "chartcel": [0, 159, 172], "chartoken": [0, 302, 313], "chartpars": [0, 1, 14, 159, 162, 165, 167, 177], "chartparser_app": [0, 1], "chartrulei": [0, 159, 162, 167], "chase": [125, 341, 348, 373, 377, 378, 385, 386, 396, 398, 404, 407, 413, 417], "chasen": [55, 57], "chasencorpusread": [55, 57, 64], "chasencorpusview": [55, 57, 64], "chasenread": 64, "chases_a_dog": 384, "chases_yprim": 384, "chat": [0, 180, 373, 422], "chat80": [0, 111, 180, 361], "chat_pnam": [182, 366], "chatbot": [0, 18, 20, 23, 24], "chatti": 112, "chdir": 375, "che": [57, 107], "cheat": 373, "check": [0, 15, 28, 30, 43, 57, 107, 111, 117, 119, 120, 121, 125, 131, 135, 136, 142, 153, 158, 164, 170, 176, 179, 181, 182, 184, 186, 190, 191, 194, 197, 198, 213, 219, 232, 270, 320, 338, 341, 343, 357, 360, 366, 373, 379, 380, 385, 388, 398, 411, 413, 417], "check_binari": [219, 388, 396], "check_cach": [57, 72], "check_coverag": [0, 121], "check_date_limit": [351, 352], "check_except": [57, 107, 211], "check_jar": 163, "check_megam_config": [0, 30, 43], "check_read": 279, "check_reentr": [120, 380], "check_stdout": 276, "checker": 422, "checksum": [0, 113], "cheek": 20, "chees": 67, "chef": [107, 364, 417, 418], "chega": 399, "chegar": 399, "cheguei": 399, "chelli": 209, "chen": [96, 136, 138, 140, 324, 328, 362], "chencherri": 324, "cheng": [83, 90], "cherri": [324, 362], "chew": [368, 373], "chi": [38, 57, 65, 146, 192, 367, 371], "chi2": 38, "chi_sq": [143, 146, 371, 394], "chiba": [83, 90], "chicago": [68, 83, 91], "chief": [300, 371, 402], "chil": 379, "child": [24, 32, 55, 57, 72, 114, 118, 119, 121, 131, 162, 170, 172, 173, 321, 341, 343, 345, 347, 348, 350, 361, 379, 381, 413, 415, 422], "child1": 164, "child2": 164, "child3": 164, "child4": 164, "child_edg": 162, "child_pointer_list": [159, 162, 167], "child_widget": [114, 119], "childchar": [341, 347, 348], "childes_fixt": [234, 367, 377], "childes_url_bas": [55, 57, 65], "childescorpusread": [55, 57, 65], "childless": 162, "children": [0, 7, 14, 32, 107, 113, 114, 118, 119, 121, 162, 163, 164, 171, 172, 173, 178, 341, 342, 343, 346, 347, 348, 350, 357, 364, 379, 413, 415], "chin": 324, "china": 366, "chines": [96, 284, 308, 341, 344], "chinese_mandarin": [57, 103], "chit_chat": 373, "chk": 39, "chktagger": 222, "chodorow": [57, 107, 417], "choic": [57, 65, 162, 171, 419], "cholesterol": 373, "chomski": [0, 121, 153, 341, 347, 348, 350, 386, 415], "chomsky_normal_form": [0, 121, 341, 347, 348, 350, 415, 422], "chomskynormalformforcfgtest": 256, "choos": [0, 7, 8, 31, 33, 120, 121, 174, 206, 209, 223, 233, 339, 357, 373, 375, 380], "choose_tag": [213, 223], "chordat": [57, 107, 357, 413, 417], "chosen": [30, 33, 46, 48, 50, 113, 335, 337], "chrf": [325, 422], "chrf_precision_recall_fscore_support": [0, 322, 325], "chrf_score": [0, 322], "chri": [149, 205, 347, 350], "christian": 402, "christoph": [109, 306], "chrodegang": 109, "chronicl": 109, "chu": 96, "chuck": 410, "chungk": 366, "chunk": [0, 1, 3, 16, 55, 57, 69, 86, 93, 100, 192, 218, 222, 257, 338, 361, 394, 399, 402, 410, 420, 422], "chunk_label": [28, 29, 368], "chunk_pars": 368, "chunk_rul": 368, "chunk_sent": [55, 57, 93, 373], "chunk_siz": 355, "chunk_struct": 28, "chunk_tag": [25, 28], "chunk_tag_char": [25, 28], "chunk_tag_pattern": [25, 28], "chunk_typ": [29, 57, 69, 71, 222, 373], "chunked_para": [55, 57, 66], "chunked_s": [55, 57, 66, 69, 373, 402], "chunked_text": 368, "chunked_word": [55, 57, 66, 69], "chunkedcorpusread": [55, 57, 66], "chunkedcorpusview": [55, 57, 66], "chunker": [25, 26, 27, 28, 29, 360, 394, 422], "chunkpars": [1, 28, 29], "chunkparser_app": [0, 1], "chunkparseri": [0, 25, 26, 27, 28, 29], "chunkrul": [0, 25, 28, 368], "chunkrulewithcontext": [0, 25, 28, 368], "chunkscor": [0, 25, 26, 28, 29, 368], "chunkstr": [0, 25, 28], "chunktre": [57, 66], "church": [53, 57, 107, 109, 211, 326, 417], "ch\u00e3o": 399, "ci": [57, 88, 106, 182, 203, 319, 366, 422], "ci2": 205, "cim": 208, "cima": 208, "cine": 364, "cinematographi": 405, "circ": 192, "circle_of_lat": [182, 366], "circle_of_long": [182, 366], "circumv": 192, "circunspecta": 399, "circunst\u00e2ncia": 399, "cistem": [0, 199, 422], "citat": [55, 57, 59, 107, 337, 358], "cite": [0, 198, 420], "citi": [97, 100, 111, 182, 366, 373, 379, 402, 410], "cities2t": [0, 180, 182], "citizen": [300, 373], "city3": 205, "city_databas": 366, "city_t": 366, "cjk": 320, "cjk_compatibility_form": [302, 320], "cjk_compatibility_ideograph": [302, 320], "cjk_radic": [302, 320], "cjkchar": [0, 302, 320], "ckip": 96, "cl": [52, 120, 131, 132, 140, 323, 324, 341, 342, 346, 348, 371, 375], "claim": [163, 379, 405], "clarifi": 373, "clariss": 208, "clarissa": 208, "clash": [184, 191], "clasp": 373, "class": [13, 14, 15, 16, 18, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 142, 143, 144, 146, 147, 148, 149, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 229, 231, 232, 233, 248, 250, 251, 253, 254, 255, 256, 257, 260, 261, 262, 263, 265, 266, 271, 272, 273, 274, 275, 276, 278, 280, 281, 283, 284, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 326, 329, 330, 331, 332, 333, 334, 340, 341, 342, 343, 345, 346, 348, 349, 351, 352, 353, 354, 355, 356, 357, 366, 367, 369, 371, 375, 379, 380, 381, 387, 388, 389, 402, 405, 410, 412, 413, 417, 422], "class_abbrev": [0, 180, 192], "classic": [389, 419], "classid": [55, 57, 105, 373], "classif": [30, 31, 33, 34, 36, 37, 38, 40, 41, 52, 91, 92, 97, 170, 196, 197, 369, 420, 422, 424], "classifi": [0, 27, 46, 47, 51, 52, 92, 107, 170, 195, 196, 197, 213, 214, 223, 258, 280, 309, 357, 361, 373, 405, 417, 422], "classification_probdist": [46, 47], "classifier_build": 223, "classifierbasedpostagg": [0, 213, 223], "classifierbasedtagg": [0, 27, 213, 223], "classifieri": [0, 30, 31, 32, 33, 35, 38, 44, 369], "classify_fixt": [234, 369], "classify_mani": [30, 31, 38, 44, 369], "classify_vectorspac": [46, 48, 49, 50, 51], "classmethod": [13, 33, 35, 44, 53, 121, 132, 146, 161, 184, 186, 190, 191, 215, 218, 221, 223, 231, 232, 233, 248, 251, 260, 285, 323, 341, 342, 346, 348, 375, 413], "classnam": 231, "classpath": [44, 131, 224], "claus": [0, 28, 123, 129, 180, 182, 192, 379, 388, 402, 403], "clausal": 192, "clause2concept": [0, 180, 182, 366], "clausifi": [0, 123, 129, 388, 403], "claws5_tagset": [0, 122], "cldr": [57, 60], "clean": [180, 181, 375, 412, 422], "clean_html": [0, 357], "clean_url": [0, 357], "cleanup": 422, "clear": [0, 52, 111, 114, 117, 119, 120, 162, 165, 167, 180, 185, 186, 216, 373, 375, 380, 388, 400, 409], "clear_abbrev": [302, 309], "clear_cach": [0, 111, 375], "clear_colloc": [302, 309], "clear_ortho_context": [302, 309], "clear_sent_start": [302, 309], "clear_status_cach": [0, 113], "clearli": [14, 57, 72, 206, 301, 364, 381, 398], "clever": [373, 405], "cli": 0, "clich": 410, "click": [7, 8, 117, 119, 360], "click1": 119, "click2": 119, "click3": 119, "click_to_sort": 117, "client": [10, 352, 355, 405], "client_arg": 355, "clientela": 399, "cliff": 328, "clig": 119, "climb": [46, 50, 331, 332, 333, 334], "cling": 373, "clip": 372, "clock": 420, "clone": [123, 130], "close": [0, 25, 57, 72, 104, 111, 118, 119, 127, 131, 176, 180, 182, 185, 186, 190, 191, 213, 219, 309, 312, 319, 321, 366, 373, 375, 383, 389, 405], "close_bracket": [180, 184], "close_enough": 259, "close_punct": [302, 318, 410], "close_punct_r": [302, 318], "close_punctu": [57, 106], "closed_domain_demo": [0, 123, 127], "closed_world_demo": [0, 123, 127], "closeddomainprov": [0, 123, 127, 396], "closedworldprov": [0, 123, 127, 396], "closer": [186, 371], "closest": [46, 49, 50, 57, 104, 107, 317, 324, 373, 417], "closest_ref_len": 324, "closest_ref_length": [0, 322, 324], "closur": [57, 107, 121, 127, 182, 357, 366], "cloud": 372, "clr": 414, "club": [192, 372], "clue": [57, 68], "cluster": [0, 88, 306, 422], "cluster_nam": [46, 47], "cluster_vectorspac": [46, 48, 49, 50, 51], "clusteri": [0, 46, 47, 51], "cm": [147, 394], "cmd": [131, 396, 398], "cmn": 417, "cmp_chunk": [0, 25, 27], "cmu": [57, 62, 65, 67, 335, 373, 422], "cmudict": [55, 57, 373], "cmudictcorpusread": [55, 57, 67], "cn": [119, 341, 348], "cn1t": 205, "cnf": [117, 119, 193, 341, 347, 348, 350], "cnftree": 415, "cnr": 95, "cnut": 109, "co": [33, 57, 72, 202, 317, 337, 339, 367, 371, 373, 381, 410, 422], "coadrian": 109, "coaelhom": 109, "coaeliv": 109, "coalcuin": 109, "coalex": 109, "coalit": 373, "coapollo": 109, "coars": [57, 81, 89, 220, 401], "coaugust": 109, "cobed": 109, "cobenrul": 109, "coblick": 109, "coboeth": 109, "cobweb": 373, "cobyrhtf": 109, "cocanedgd": 109, "cocanedgx": 109, "cocathom1": 109, "cocathom2": 109, "coch": 417, "cochad": 109, "cochdrul": 109, "cochristoph": 109, "cochron": 109, "cochrona": 109, "cochronc": 109, "cochrond": 109, "cocoa": 373, "coconut": 373, "cocura": 109, "cocurac": 109, "cod": [57, 72, 381], "coda": 306, "code": [25, 28, 42, 57, 60, 70, 84, 107, 109, 117, 131, 133, 154, 178, 179, 182, 188, 192, 204, 209, 213, 218, 220, 233, 234, 238, 301, 313, 320, 325, 339, 341, 345, 349, 354, 355, 366, 367, 373, 383, 388, 410, 417, 422, 424], "code_block": [57, 78], "code_block_read": [57, 78], "codebas": 422, "codeblock": [55, 57, 78], "codec": [111, 321, 353, 373], "coder": 144, "codeset": 133, "codict": 109, "codocu1": 109, "codocu2": 109, "codocu3": 109, "codocu4": 109, "coeffici": [144, 146, 152, 217, 339, 357, 371], "coeluc1": 109, "coeluc2": 109, "coepigen": 109, "coerc": 380, "coeuphr": 109, "coeust": 109, "coexodusp": 109, "coffe": 373, "cogenes": 109, "cogniz": [57, 72], "cogregdc": 109, "cogregdh": 109, "cohen": 144, "coher": [373, 410], "coherbar": 109, "cohes": 163, "cohn": [402, 424], "coil": [156, 373], "coinspold": 109, "coinspolx": 109, "coisa": 399, "cojam": 109, "cojn": 413, "col": [117, 158, 214, 394, 409], "col_index": 117, "colacnu": 109, "colaec": 109, "colaw1cn": 109, "colaw2cn": 109, "colaw5atr": 109, "colaw6atr": 109, "colawaf": 109, "colawafint": 109, "colawg": 109, "colawin": 109, "colawnorthu": 109, "colawwllad": 109, "cold": 372, "cole": [68, 90, 324], "coleofri": 109, "collaps": [118, 170, 341, 347, 348, 350, 373, 405, 415], "collapse_nod": [159, 170], "collapse_unari": [0, 341, 347, 348, 350, 415], "collapsed_tre": [114, 118], "collapsedtre": 415, "collapsedtree2": 415, "collapsepo": [341, 347, 348, 350, 415], "collapseroot": [341, 347, 348, 350, 415], "collapseunari": [341, 348], "colleagu": 381, "colleciton": 113, "collect": [0, 46, 53, 57, 74, 102, 104, 113, 119, 135, 137, 142, 146, 162, 167, 174, 178, 179, 191, 209, 215, 218, 229, 300, 309, 330, 331, 332, 333, 340, 347, 350, 352, 355, 360, 361, 373, 399, 422], "collin": [324, 362], "collis": 120, "colloc": [0, 1, 57, 107, 196, 300, 302, 309, 361, 394, 399, 422], "colloc_thr": 309, "collocation_list": [0, 300, 422], "collocations_app": [0, 1], "colon": [57, 60, 100, 177, 180, 184, 224, 319, 375, 408], "color": [25, 117, 118, 119, 315, 341, 345, 371, 373], "colorado": [57, 105], "colorizedlist": [0, 114, 115, 119], "colortag": 119, "colour": [163, 315], "colowick": [57, 85], "colsigef": 109, "colsigewb": 109, "colsigewz": 109, "colum": 117, "columbu": 318, "column": [0, 33, 57, 69, 113, 117, 158, 164, 170, 341, 345], "column_index": [114, 117, 170], "column_label": [114, 117], "column_nam": [114, 117], "column_typ": [55, 57, 69], "column_weight": [0, 113, 117], "column_width": [0, 113], "columnconfig": [114, 117], "columnconfigur": [114, 117], "columntyp": [57, 69], "colwgeat": 109, "colwsiget": 109, "colwsigexa": 109, "colwstan1": 109, "colwstan2": 109, "com": [72, 91, 111, 113, 117, 134, 140, 169, 208, 209, 220, 234, 257, 265, 281, 290, 308, 318, 320, 325, 345, 349, 353, 354, 355, 357, 360, 364, 367, 372, 373, 375, 383, 391, 399, 410, 417, 421, 422], "com_ibm1": 412, "comargac": 109, "comargat": 109, "comari": 109, "comart1": 109, "comart2": 109, "comart3": 109, "comarvel": 109, "comb": 357, "combat": [347, 350], "combin": [0, 8, 12, 13, 14, 29, 33, 51, 52, 57, 62, 113, 120, 125, 135, 157, 162, 165, 174, 184, 190, 191, 213, 218, 231, 233, 306, 333, 353, 355, 357, 373, 377, 379, 380, 384, 399, 405, 412, 417], "combination_prover_demo": [0, 123, 127], "combinatori": [12, 13, 57, 72, 381, 417], "combine_read": [123, 125], "come": [24, 135, 138, 161, 355, 360, 373, 399, 421], "come\u00e7": 399, "coming_to_believ": [57, 72], "comint": 25, "comma": [78, 120, 121, 180, 191, 319, 355, 373, 380], "comma_in_num": [302, 318], "comma_separated_string_arg": [55, 57, 78], "command": [10, 18, 124, 131, 169, 224, 311, 324, 325, 328, 335, 337, 339, 388, 396, 421], "comment": [28, 36, 57, 62, 100, 104, 145, 177, 229, 283, 373, 388, 391, 410, 422], "comment_char": [57, 62, 104, 177, 373], "commerc": 308, "commiss": 337, "commission": 402, "commit": [381, 422], "committe": 410, "committing_crim": [57, 72], "common": [0, 46, 52, 55, 57, 59, 65, 72, 96, 107, 128, 131, 135, 136, 138, 142, 148, 162, 196, 199, 202, 218, 220, 296, 300, 309, 334, 351, 367, 371, 381, 383, 399, 409, 417, 422], "common_context": [0, 300], "common_hypernym": [57, 107], "commonli": [46, 50, 357, 371, 412], "commun": [113, 219, 420], "commut": [379, 417], "como": 399, "comp": [57, 80, 220, 367, 373, 379], "comp_typ": 68, "compact": 417, "compani": [92, 308, 372, 373, 410, 413], "companion": 109, "compar": [7, 29, 42, 57, 68, 77, 83, 90, 107, 135, 142, 147, 148, 150, 152, 157, 167, 201, 202, 203, 214, 223, 231, 232, 270, 371, 373, 380, 394, 413, 417, 422], "comparative_s": [55, 57, 373], "comparative_sent": [57, 68], "comparativesentencescorpusread": [55, 57, 68], "comparison": [55, 57, 68, 91, 144, 145, 148, 179, 215, 270, 302, 306, 317, 324, 352, 362, 373, 412, 413, 417], "compat": [0, 107, 111, 120, 179, 194, 206, 233, 301, 341, 348, 404, 422], "compel": 405, "compet": 91, "compil": [120, 180, 187, 190, 198, 203, 205, 225, 304, 305, 308, 309, 310, 318, 319, 368, 379, 388, 402], "compile_neg": [180, 190], "compile_po": [180, 190, 384], "compileflag": 388, "compl": 381, "complain": [368, 373], "complementari": [36, 326], "complet": [7, 25, 28, 55, 57, 61, 65, 93, 104, 111, 118, 119, 120, 127, 144, 161, 162, 165, 167, 171, 173, 174, 179, 185, 191, 198, 300, 340, 341, 347, 348, 350, 360, 373, 379, 381, 396, 399, 422], "completefundamentalrul": [0, 159, 165], "completerrul": [0, 159, 165], "complex": [25, 57, 72, 111, 119, 121, 186, 347, 350, 368, 379, 381], "complextyp": [0, 180, 191, 392], "compli": 109, "complic": 199, "compon": [92, 111, 180, 188, 309, 377, 378, 381, 417], "component_sound": [57, 72], "compos": [57, 61, 69, 72, 80, 93, 108, 162, 165, 197, 381], "composit": [13, 15, 57, 60, 133, 365, 378], "compositionruleset": 364, "compostura": 399, "compound": [163, 405], "compr": 68, "comprehens": [399, 420, 422], "compress": [33, 111, 113, 145, 197, 353, 355, 375, 422], "compris": 191, "compromis": 422, "compr\u00f3": 364, "comput": [17, 29, 33, 35, 36, 37, 38, 50, 52, 57, 68, 83, 90, 91, 96, 107, 135, 136, 138, 141, 144, 145, 146, 147, 148, 151, 172, 179, 182, 202, 203, 207, 214, 218, 231, 232, 252, 309, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 337, 347, 350, 357, 360, 366, 367, 373, 383, 388, 413, 417, 420, 422], "compute_composition_semant": [0, 12, 17, 365], "compute_function_semant": [0, 12, 17, 365], "compute_future_scor": [322, 340], "compute_max_subtract_scor": [159, 170], "compute_original_index": [159, 170], "compute_prob": [159, 172], "compute_semant": [0, 12, 14], "compute_substitution_semant": [0, 12, 17, 365], "compute_type_raised_semant": [0, 12, 17, 365], "computer_sci": [107, 417], "comsem": 125, "comtran": [323, 412], "comunit": 399, "con": [57, 90, 373], "con_list": 372, "concat": [55, 57, 104, 373], "concaten": [52, 55, 57, 60, 104, 159, 172, 203, 226, 380], "concatenated_view": [57, 78], "concatenatedcorpusview": [55, 57, 104, 373], "conceal": 373, "conceiv": [339, 417], "concept": [0, 33, 180, 334, 373, 381], "conceptu": [57, 72, 107, 135, 179, 229, 232, 381], "concern": [107, 417], "concis": [324, 373], "conclud": 388, "concord": [0, 1, 300, 361, 399, 422], "concordanc": [1, 300], "concordance_app": [0, 1], "concordance_list": [0, 300, 372], "concordanceindex": [0, 300], "concret": [81, 89, 135, 136, 138, 231, 373, 417], "cond": [181, 184, 378, 399], "cond_sampl": 179, "condit": [0, 32, 33, 36, 135, 136, 137, 162, 172, 176, 179, 181, 184, 215, 217, 218, 232, 300, 352, 378, 400, 410], "conditionalexponentialclassifi": [0, 30, 33, 369], "conditionalfreqdist": [0, 135, 137, 179, 422], "conditionalprobdist": [0, 179, 400], "conditionalprobdisti": [0, 179, 218], "conduct": [203, 410, 414], "cone": 358, "coneot": 109, "conf": [57, 85, 176], "confer": [68, 83, 88, 90, 91, 198, 202, 325, 358, 422], "confess": [57, 105, 373], "confid": [170, 373, 419, 422], "config": [52, 57, 79, 284, 311], "config_java": [0, 131], "config_megam": [0, 30, 34], "config_prover9": [123, 128, 388], "config_tadm": [0, 30, 41], "config_weka": [0, 30, 44], "configur": [0, 34, 43, 114, 117, 131, 159, 176, 373, 388, 422], "confin": [107, 357, 373, 417], "conflict": [0, 108, 120], "conform": [225, 422], "conftest": 234, "confus": [33, 57, 87, 147, 213, 214, 363, 409, 410, 422], "confusionmatrix": [0, 143, 214, 394], "cong": 192, "congen": 417, "conicod": 109, "conicoda": 109, "conicodc": 109, "conicodd": 109, "conj": [79, 119, 213, 220, 371, 399, 402, 414], "conjectur": 373, "conjp": 413, "conjunct": [13, 57, 72, 170, 188, 191, 193, 220, 283, 381, 392, 399, 405, 409], "conll": [29, 55, 57, 164, 169, 177, 192, 373, 422], "conll2000": [29, 373], "conll2002": [192, 373, 402, 422], "conll2007": 373, "conll_data2": [170, 172], "conll_demo": [0, 159, 164], "conll_fil": 169, "conll_file_demo": [0, 159, 164], "conllchunkcorpusread": [55, 57, 69, 373], "conllcorpusread": [55, 57, 69, 373], "conllesp": [0, 180, 192], "conlln": [0, 180, 192], "conllsrlinst": [55, 57, 69], "conllsrlinstancelist": [55, 57, 69], "conllstr2tre": [0, 25, 29], "conlltags2tre": [0, 25, 29], "connect": [10, 57, 72, 107, 118, 164, 170, 204, 219, 341, 347, 348, 350, 360, 417], "connect_graph": [159, 164], "connexion": 372, "conrath": [57, 107, 417], "consecut": [53, 57, 69, 411], "conseguiss": 399, "conseq": 399, "consequ": [181, 184, 190, 306, 324], "conseq\u00fcentement": 399, "conserv": [52, 422], "consid": [8, 33, 36, 39, 57, 68, 72, 91, 113, 119, 120, 121, 135, 142, 147, 170, 178, 196, 197, 223, 229, 231, 301, 306, 309, 313, 324, 330, 331, 332, 333, 334, 340, 341, 345, 371, 373, 377, 380, 412, 417], "consider": [91, 104, 196, 198, 202, 232, 333, 334, 340, 373], "considera": 399, "considerablement": 373, "consist": [13, 14, 25, 33, 52, 57, 59, 62, 65, 67, 68, 69, 72, 77, 81, 87, 89, 93, 97, 102, 104, 111, 113, 115, 121, 125, 129, 135, 137, 142, 148, 158, 162, 171, 173, 180, 182, 213, 216, 220, 223, 300, 306, 308, 310, 312, 326, 328, 338, 341, 348, 355, 357, 366, 373, 380, 381, 388, 399, 401, 402, 417, 422], "consistchk": [125, 377], "consol": [109, 300, 354, 388], "consolid": [25, 398], "conson": [205, 209, 306], "conspir": 373, "constant": [0, 33, 113, 127, 148, 151, 179, 180, 182, 186, 188, 190, 191, 198, 206, 224, 317, 366, 377, 378, 379, 392, 404], "constantexpress": [0, 180, 184, 190, 191, 194, 384, 403], "constantino": 399, "constitu": [2, 26, 57, 68, 81, 89, 162, 178, 341, 347, 348, 350, 401], "constitut": [57, 72, 146, 178, 377, 381], "constrain": [124, 172, 218, 333, 334, 417], "constraint": [0, 15, 120, 121, 161, 172, 180, 188, 233, 306], "constrast": 405, "construct": [14, 25, 28, 30, 32, 33, 38, 43, 44, 51, 52, 53, 57, 58, 59, 61, 64, 65, 69, 70, 71, 72, 75, 78, 79, 82, 84, 85, 87, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 111, 117, 118, 119, 120, 121, 124, 125, 146, 147, 161, 162, 167, 170, 171, 173, 179, 182, 186, 189, 192, 216, 223, 225, 231, 232, 233, 260, 300, 301, 305, 324, 341, 348, 364, 368, 371, 373, 379, 380, 409, 412, 414], "constructor": [28, 33, 44, 57, 61, 62, 69, 78, 79, 80, 87, 93, 99, 102, 104, 107, 108, 113, 118, 119, 120, 124, 125, 139, 144, 161, 164, 167, 171, 179, 186, 188, 190, 191, 206, 221, 309, 312, 341, 348, 368, 377, 378, 380, 388], "consult": [213, 218, 223, 325, 399], "consum": [28, 326, 373, 417], "cont_bigram_measur": 371, "contact": [0, 68, 83, 90, 91, 113, 134, 410], "contain": [0, 7, 8, 13, 25, 28, 29, 30, 32, 33, 34, 36, 39, 41, 43, 46, 52, 57, 59, 63, 66, 67, 68, 69, 72, 73, 75, 77, 79, 81, 86, 88, 89, 91, 92, 99, 100, 104, 105, 107, 111, 112, 113, 117, 118, 119, 120, 121, 125, 126, 127, 128, 129, 131, 132, 135, 137, 144, 150, 159, 162, 163, 164, 165, 167, 169, 173, 174, 179, 180, 182, 183, 186, 187, 188, 191, 197, 198, 205, 209, 213, 218, 219, 222, 226, 231, 265, 283, 284, 301, 307, 310, 312, 313, 323, 324, 326, 333, 337, 338, 340, 341, 345, 348, 351, 353, 354, 355, 356, 365, 366, 368, 371, 373, 375, 379, 380, 381, 386, 391, 396, 399, 401, 404, 407, 411, 413, 417, 419, 422], "contains0": [182, 366], "contains_address": [159, 164], "contains_cycl": [159, 164], "contar": 399, "contempl": 362, "content": [8, 14, 16, 52, 53, 58, 59, 61, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 78, 79, 82, 83, 84, 85, 86, 93, 94, 98, 99, 102, 104, 105, 107, 108, 109, 111, 113, 119, 125, 148, 162, 191, 196, 321, 353, 357, 375, 412, 417, 422], "context": [28, 30, 33, 53, 61, 70, 80, 93, 94, 108, 111, 115, 121, 130, 135, 136, 137, 138, 140, 153, 156, 163, 171, 181, 184, 190, 191, 192, 213, 219, 223, 229, 249, 300, 309, 340, 347, 350, 358, 368, 372, 373, 375, 391, 399, 402, 409, 419], "context_count": [135, 136, 391], "context_func": 300, "context_sent": 358, "context_to_tag": 223, "contextindex": [0, 300], "contexttagg": [0, 213, 223], "contigu": [25, 53, 172, 197, 229, 231, 341, 343], "contiguous_loc": 373, "contin": 182, "conting": 146, "contingencymeasur": [0, 143, 146, 371], "continu": [7, 28, 33, 46, 48, 49, 135, 137, 148, 162, 171, 172, 178, 373, 388, 422], "continua": 399, "conto": 399, "contract": [305, 319, 405, 422], "contractions2": [302, 305, 319], "contractions3": [302, 305, 319], "contractions4": [302, 305], "contrast": [57, 72, 111, 311, 329, 330, 332, 334], "contrib": [12, 422], "contribut": [215, 229, 329, 330, 373, 422], "contributor": [206, 359], "control": [2, 7, 8, 36, 57, 86, 113, 119, 171, 221, 302, 335, 399, 417, 419], "contr\u00e1rio": 399, "conv_test": 50, "conv_threshold": 48, "conven": 373, "conveni": [117, 131, 135, 137, 141, 304, 333, 334, 356, 357, 379, 380, 392, 422], "convent": [144, 172, 231, 233, 310, 313, 334, 373, 379, 399, 402], "converg": [33, 46, 48, 50, 217, 218], "convergence_logprob": 218, "convers": [18, 23, 24, 33, 57, 60, 66, 79, 121, 197, 324, 388, 405, 415], "convert": [0, 16, 24, 25, 28, 29, 30, 34, 41, 44, 57, 59, 60, 61, 62, 64, 65, 69, 70, 71, 72, 75, 76, 79, 80, 81, 82, 84, 85, 89, 93, 98, 105, 107, 108, 109, 111, 112, 117, 118, 120, 121, 125, 128, 131, 133, 135, 138, 164, 170, 177, 181, 182, 184, 186, 188, 191, 192, 193, 194, 197, 198, 219, 220, 300, 321, 341, 342, 344, 345, 346, 347, 348, 350, 353, 354, 355, 357, 366, 367, 368, 373, 378, 388, 401, 404, 410, 413, 415], "convert_ag": [55, 57, 65], "convert_parenthes": [302, 305, 319], "convert_to_prover9": [0, 123, 128], "convolut": [317, 339], "convolv": 317, "coo": 413, "coocurr": 394, "cook": [57, 72, 364, 365, 373, 377, 381, 388], "cookbook": [117, 422], "cooki": [162, 165, 167, 373, 398, 413], "cooking_cr": [57, 72, 381], "cool": 135, "coomb": 204, "cooool": [304, 410], "cooper": [183, 373], "cooper_storag": [0, 180, 404], "cooperstor": [0, 180, 183, 404], "coord": [341, 345, 367, 397], "coordin": [119, 172, 341, 345], "coorosiu": 109, "cootest": 109, "cop": [163, 367], "cope": 373, "copi": [0, 25, 52, 57, 65, 111, 112, 113, 120, 162, 167, 179, 180, 186, 192, 208, 302, 303, 305, 308, 310, 313, 316, 317, 318, 319, 341, 342, 343, 346, 348, 373, 377, 380, 395, 399, 413, 415], "copiar": [208, 399], "copper": 373, "copra": 373, "coprefcath1": 109, "coprefcath2": 109, "coprefcura": 109, "coprefgen": 109, "coprefl": 109, "coprefsolilo": 109, "copula": 192, "copy_mptre": 413, "copy_ptre": 413, "copy_tre": 413, "copyright": [0, 67, 112, 113, 134, 145, 417], "coquadru": 109, "core": [57, 72, 163, 182, 183, 304, 379, 404, 424], "corefer": 422, "corenlp": [0, 159, 261, 422, 424], "corenlp_opt": [163, 175], "corenlpdependencypars": [0, 159, 163], "corenlppars": [0, 159, 163], "corenlpserv": [0, 159, 163], "corenlpservererror": [0, 159, 163], "coretyp": [57, 72], "corgi": 417, "corn": 373, "cornel": [57, 63, 65], "corner": [117, 119, 121, 162, 170, 373, 398], "cornet_d": 402, "corood": 109, "corpid": [57, 72], "corpnam": [57, 72, 381], "corpo": 399, "corpora": [0, 53, 57, 58, 59, 62, 63, 65, 66, 69, 70, 78, 79, 80, 87, 91, 92, 99, 102, 103, 108, 110, 111, 113, 182, 192, 229, 238, 257, 263, 309, 326, 335, 360, 366, 367, 375, 420, 422], "corpu": [0, 25, 30, 33, 34, 37, 41, 42, 43, 52, 113, 135, 146, 179, 192, 197, 206, 209, 211, 213, 214, 215, 216, 223, 229, 230, 232, 233, 263, 274, 287, 300, 302, 306, 309, 317, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 339, 341, 347, 348, 350, 357, 359, 360, 361, 365, 369, 371, 372, 375, 376, 381, 383, 384, 391, 398, 400, 401, 402, 405, 406, 409, 410, 413, 414, 417, 418, 419, 420, 422], "corpus1": [57, 76], "corpus_bleu": [0, 322, 324], "corpus_chrf": [0, 322, 325], "corpus_data": 367, "corpus_fil": [57, 58, 64, 71, 74, 86, 99], "corpus_gleu": [0, 322, 328], "corpus_nist": [0, 322, 337], "corpus_particip": 367, "corpus_property_kei": [57, 65], "corpus_read": 373, "corpus_rib": [0, 322, 339], "corpus_root": [65, 367], "corpus_s": [0, 227, 229], "corpus_view": 104, "corpusread": [55, 57, 58, 59, 60, 63, 64, 66, 67, 68, 69, 70, 73, 74, 75, 77, 81, 83, 84, 87, 88, 89, 90, 91, 94, 95, 97, 98, 99, 100, 101, 102, 106, 107, 108, 109, 110, 313, 373], "corpusreader_demo": [0, 351, 354], "corpusview": [55, 57, 63, 68, 83, 87, 90, 91, 102, 104, 373], "corrado": 328, "correct": [16, 25, 27, 29, 33, 111, 121, 147, 159, 170, 191, 215, 216, 218, 223, 225, 230, 233, 309, 367, 369, 373, 380, 388, 398, 409, 412, 422], "correct_sent": 29, "correct_tag": 233, "correctli": [29, 111, 147, 179, 203, 283, 285, 360, 373, 405, 409, 413, 414], "correcttag": 233, "correl": [146, 152, 328, 335, 339, 373, 394], "correm": 399, "correspond": [2, 13, 14, 15, 28, 32, 33, 34, 35, 41, 47, 51, 55, 57, 59, 61, 69, 72, 75, 79, 80, 81, 86, 89, 93, 100, 104, 107, 108, 110, 111, 117, 118, 120, 121, 125, 131, 147, 149, 150, 151, 162, 164, 167, 170, 172, 182, 186, 214, 215, 218, 222, 223, 224, 226, 232, 303, 309, 310, 313, 319, 320, 323, 332, 339, 341, 344, 347, 348, 350, 353, 354, 355, 366, 373, 374, 377, 379, 380, 381, 388, 393, 399, 401, 402, 412, 413], "corrod": 417, "corrupt": [113, 368, 405], "cor\u00e1": 399, "cosevensl": 109, "cosin": [49, 51, 383, 422], "cosine_dist": [0, 46, 51], "cosolilo": 109, "cosolsat1": 109, "cosolsat2": 109, "cost": [34, 39, 110, 147, 148, 151, 163, 171, 214, 266, 302, 305, 308, 310, 313, 315, 319, 320, 326, 340, 373, 407, 410], "costura": 399, "cotempo": 109, "cotizaba": 373, "cotton": [109, 373], "could": [39, 57, 63, 69, 72, 107, 129, 132, 135, 148, 171, 178, 179, 301, 317, 325, 339, 340, 341, 345, 348, 371, 372, 373, 375, 379, 410, 417], "couldn": [198, 405, 410], "couldnt": 198, "council": 402, "counsel": 402, "count": [0, 52, 53, 57, 107, 111, 121, 135, 136, 137, 138, 140, 142, 146, 147, 149, 150, 179, 197, 215, 300, 309, 322, 324, 328, 329, 330, 331, 332, 333, 334, 339, 352, 354, 367, 371, 375, 383, 391, 394, 397, 399, 401, 417], "count_cutoff": [33, 369], "count_of_1gram_1": 146, "count_of_1gram_n": 146, "count_of_n": 146, "count_of_ngram": 146, "count_of_total_word": 146, "counter": [0, 67, 124, 131, 135, 136, 138, 140, 142, 179, 187, 190, 351, 352, 384, 388, 404], "counter_arg": [135, 142], "counter_kwarg": [135, 142], "counterexampl": 388, "counterpart": [329, 330, 334, 338], "counti": [55, 57, 97, 223, 360, 373, 410], "countri": [182, 366], "country_of": 366, "coupl": 377, "cours": [24, 140, 144, 377, 380, 422], "court": [36, 410], "covari": [46, 48], "covariance_matric": 48, "cover": [47, 121, 135, 162, 173, 174, 178, 338, 340, 373, 409, 419, 422], "coverag": [57, 105, 181], "coverhom": 109, "coverhoml": 109, "covinceb": 109, "covins": 109, "cow": 67, "cowsgosp": 109, "cowulf": 109, "coxilh": 208, "coxilha": 208, "cp": [366, 379, 384], "cp1250": [57, 103], "cp1251": [57, 103], "cp1256": [57, 103], "cp2": 379, "cpan": [57, 106], "cpd": 400, "cpd2": 400, "cpdist": 179, "cpi": 373, "cprobdisti": 218, "cpu": 373, "cr": 399, "craft": 284, "cramp": 417, "crane": 373, "cranenburgh": [345, 349], "crarr": 192, "crash": [163, 320, 410], "crawler": 374, "cream": 358, "creat": [6, 7, 8, 28, 29, 33, 42, 48, 52, 57, 58, 64, 66, 70, 71, 72, 74, 75, 78, 79, 80, 83, 85, 86, 87, 94, 99, 104, 107, 108, 110, 111, 113, 115, 117, 118, 119, 120, 121, 128, 131, 134, 135, 136, 137, 138, 139, 142, 144, 156, 161, 162, 164, 165, 167, 170, 171, 172, 173, 174, 178, 179, 180, 182, 184, 185, 186, 190, 197, 205, 209, 215, 216, 218, 225, 229, 233, 235, 300, 304, 319, 323, 326, 329, 330, 331, 332, 333, 341, 345, 352, 355, 360, 366, 368, 369, 374, 375, 377, 378, 380, 393, 398, 400, 401, 408, 409, 412, 413, 417], "create_fake_language_model": 299, "create_fake_phrase_t": 299, "creation": [52, 172, 341, 348, 375], "creativ": 96, "creativecommon": [57, 85, 96], "creator": [410, 420], "creatur": 371, "credenti": [285, 356], "creds_fil": 356, "credsfromfil": [0, 351, 356], "cree": 364, "crf": [0, 213, 224], "crfsuit": [217, 422], "crftagger": [0, 213, 217], "crian\u00e7a": 399, "crim": [57, 72, 381], "crime": 381, "crime_scenario": [57, 72], "criminal_investig": [57, 72, 381], "criminal_process": [57, 72, 381], "criou": 399, "crisi": 373, "criteria": [57, 72, 96, 327, 367], "criterion": [217, 301], "critic": 422, "critiqu": 151, "cross": [15, 135, 136, 170, 172, 179, 326, 335, 341, 345, 422], "crosseddir": [0, 12, 15], "crossroad": 422, "crossvalidationprobdist": [0, 179, 400], "crubadan": [42, 55, 57, 361], "crubadan_to_iso": [55, 57, 70, 374], "crubadancorpusread": [55, 57, 70], "crucial": 391, "crude": 373, "crushingh": 410, "cry": 205, "cs124": 148, "cs_semrep": 404, "csli": 188, "csv": [197, 353], "ct": 217, "ctrl": [7, 8], "cuba": 399, "cullei": [57, 72], "cultur": 163, "cumul": [179, 400], "cunha": 399, "cunnigham": 148, "cup": 192, "cur": [399, 417], "cura": 109, "curli": 257, "curr_nod": 164, "curren": 192, "currency_sym": [302, 318], "currency_sym_r": [302, 318], "currency_symbol": [57, 106], "current": [13, 25, 28, 33, 34, 46, 49, 50, 57, 69, 72, 77, 79, 105, 107, 111, 113, 117, 119, 124, 125, 127, 128, 131, 133, 135, 162, 171, 173, 174, 175, 176, 177, 178, 179, 182, 183, 190, 213, 215, 218, 221, 227, 229, 231, 232, 302, 314, 352, 355, 366, 373, 375, 377, 379, 380, 388, 417], "current_chartrul": [159, 162], "currentindex": 191, "currently_complet": [159, 173], "curri": 191, "curselect": [114, 117], "cursor": 25, "cursori": 28, "curt": 125, "curtsei": 373, "curv": 229, "custom": [55, 57, 66, 83, 87, 99, 102, 107, 120, 300, 312, 314, 324, 329, 330, 331, 332, 333, 360, 373, 376, 392, 404, 422], "custom_dist": [0, 143, 148], "custom_extractor": 376, "custom_lemma": [55, 57, 107], "customfeaturevalu": 380, "customis": 121, "customiz": 373, "cut": [46, 49, 51, 63, 198, 309, 354, 357, 371, 373], "cut_mark": [107, 357, 417], "cut_str": [0, 357], "cutoff": [0, 33, 43, 135, 142, 223, 409, 422], "cutoff_polici": 317, "cutoff_prob": 223, "cutoffcheck": [0, 30, 43], "cvar": 380, "cve": 422, "cvenam": 422, "cwp": 396, "cyber": 163, "cyberia": 402, "cycl": [57, 107, 164, 170, 357, 380, 417], "cycle_finding_demo": [0, 159, 164], "cycle_index": 170, "cycle_path": 170, "cyclic": [0, 120, 380], "cyclic_dg": 164, "cyk": [172, 347, 350], "cyr": [57, 103], "cyril": [57, 103], "czech": [57, 103, 106, 318, 373], "czech_ceski": [57, 103], "c\u00e1": 399, "c\u00e9rebro": 399, "c\u00e9u": 399, "c\u043e\u0f56": 308, "d": [46, 48, 49, 52, 57, 67, 72, 79, 94, 106, 107, 109, 113, 120, 121, 125, 135, 137, 142, 148, 149, 151, 179, 186, 205, 212, 214, 216, 305, 307, 309, 310, 312, 313, 317, 318, 319, 327, 331, 339, 341, 347, 348, 350, 357, 360, 368, 372, 373, 375, 376, 377, 378, 379, 380, 381, 384, 389, 392, 394, 395, 398, 399, 400, 405, 409, 410, 413, 417, 422], "d0": [125, 377], "d1": [127, 180, 366, 377, 384, 404], "d10": 339, "d12": 384, "d2": [127, 366, 377, 384, 404], "d3": [377, 404], "d4": [377, 384, 404], "d5": [377, 404], "d6": [377, 404], "d7": [377, 404], "d8": 404, "d_head": 332, "d_neg": [123, 130], "d_non_head": 332, "da": [220, 323, 329, 330, 331, 332, 333, 399, 412], "dab": [341, 344], "dachshund": 170, "dado": 399, "dagger": 192, "dai": [57, 72, 221, 372, 373, 405, 409], "daili": 399, "dairen": 366, "dale": 422, "dali": 399, "dallakhelv": [57, 103], "dalmatian": 417, "dami": 399, "dan": [136, 347, 350, 391, 417, 422, 424], "danc": 377, "danger": 300, "daniel": 306, "danish": [209, 373, 408], "danishstemm": [0, 199, 209], "danni": 424, "dannysepl": 424, "daquel": 399, "dar": 399, "daran": 410, "daren": 198, "darent": 198, "darpa": 337, "darr": 192, "darul": 402, "darwin": 424, "dash": 120, "dash_preceed_digit": [302, 308], "dass": 338, "dat": [57, 107, 417], "data": [0, 2, 33, 34, 38, 39, 41, 44, 46, 47, 48, 49, 51, 52, 53, 57, 61, 63, 65, 69, 70, 72, 73, 75, 83, 91, 92, 93, 94, 95, 96, 100, 104, 110, 113, 117, 119, 120, 121, 125, 129, 130, 131, 132, 139, 144, 146, 147, 162, 163, 164, 165, 169, 176, 177, 179, 181, 182, 186, 191, 197, 198, 213, 214, 216, 218, 219, 222, 223, 224, 225, 229, 263, 286, 309, 317, 321, 323, 329, 330, 331, 332, 333, 334, 340, 347, 350, 352, 355, 356, 357, 361, 366, 367, 377, 379, 380, 383, 388, 394, 395, 398, 399, 401, 402, 404, 407, 409, 417, 420, 422], "data_dict": [55, 57, 60], "data_idx": 191, "data_sect": [30, 44], "databas": [10, 57, 60, 72, 84, 101, 106, 107, 182, 192, 321, 366, 381, 409], "datadir": 113, "dataserv": 113, "dataset": [57, 63, 68, 90, 91, 92, 197, 206, 373, 383, 405, 421], "date": [29, 57, 65, 97, 100, 113, 117, 192, 352, 354, 355, 367, 373, 402], "date_limit": [352, 355], "date_tim": [73, 373], "datetim": [352, 354, 355], "daughter": 301, "davi": 144, "david": [57, 85, 422], "davon": 338, "db": [57, 72, 182, 366, 411], "dbname": 182, "dcl": 373, "dct": 367, "dd": [305, 319], "dd1": 205, "de": [57, 106, 109, 119, 140, 151, 166, 176, 203, 208, 372, 373, 399, 402, 410, 412], "de2": 205, "deactiv": 197, "dead": [372, 422], "deal": [103, 135, 188, 225, 281, 309, 352, 373, 418], "dealer": [415, 419], "dean": 328, "death": 198, "debon": 373, "debt": [57, 72, 216, 300, 381, 409], "debug": [0, 28, 37, 111, 123, 124, 129, 130, 217], "debug_decis": [302, 309], "debug_level": [28, 368], "debugobject": [0, 123, 129], "decatir": 148, "decatur": 148, "deceler": [95, 406], "decemb": [202, 422], "decent": 405, "decid": [7, 8, 15, 30, 32, 104, 111, 159, 162, 167, 173, 174, 179, 223, 302, 309, 333, 341, 348, 352, 373, 380, 398, 408], "decidedli": 198, "decim": [124, 324], "decis": [30, 32, 38, 148, 309, 347, 350, 369, 373, 380, 422], "decisiontre": [0, 30], "decisiontreeclassifi": [0, 30, 32, 369], "declar": [80, 206, 209, 301, 373, 412, 422], "declin": 373, "decod": [0, 57, 59, 111, 126, 132, 172, 204, 299, 302, 321, 340, 357, 373, 399, 401, 411, 417, 422], "decode_json_obj": [213, 215, 221, 223, 227, 231, 232, 375], "decode_obj": [0, 132], "decode_result": [0, 123, 126], "decode_tag": [55, 57, 86], "decoded_unicod": 357, "decomposit": [46, 51, 383], "decompress": 113, "deconstruct": [260, 325], "decor": [0, 78, 124, 127, 131, 132, 197, 354], "decorate_proof": [123, 124, 128], "decorativo": 399, "decreas": [104, 119, 171, 198, 323, 347, 350, 373, 399, 400], "decri": 213, "decrypt": 111, "dedent": 373, "dedic": 373, "dee": [67, 378], "dee1": 205, "deec2ss": 205, "deem": [48, 50], "deep": [120, 162, 341, 342, 343, 346, 348, 380, 413], "deepcopi": [0, 179, 395, 413, 415], "deepest": [57, 107, 417], "deepli": 198, "def": [30, 36, 52, 97, 104, 112, 120, 131, 132, 170, 179, 192, 369, 373, 375, 376, 378, 380, 389, 398, 399, 400, 410, 413, 417], "default": [0, 10, 14, 28, 29, 32, 33, 36, 38, 39, 43, 52, 57, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 75, 79, 82, 84, 85, 87, 90, 91, 93, 98, 99, 102, 104, 105, 107, 108, 109, 111, 112, 113, 117, 118, 119, 120, 124, 131, 132, 133, 134, 135, 136, 139, 142, 144, 145, 146, 147, 148, 156, 162, 165, 167, 177, 179, 181, 197, 203, 206, 209, 214, 216, 218, 219, 221, 222, 223, 224, 229, 231, 233, 284, 300, 301, 304, 305, 306, 307, 309, 310, 312, 314, 317, 319, 320, 321, 324, 335, 336, 340, 341, 342, 345, 347, 348, 350, 355, 356, 357, 371, 373, 375, 376, 377, 380, 385, 388, 392, 394, 399, 400, 409, 410, 413, 417, 418], "default_column_width": [0, 113], "default_config": [302, 316], "default_download_dir": [0, 113], "default_field": 321, "default_reasoning_demo": [0, 123, 127], "default_rule_tupl": [199, 205], "default_smooth": 317, "default_tagg": 223, "default_url": [0, 113], "default_w": [0, 53], "defaultdict": [179, 192, 340, 357, 416], "defaultruleset": [14, 364, 365], "defaulttagg": [0, 213, 215, 223, 399], "defconst": 25, "defend": 373, "defer": [110, 134, 375, 409], "defici": 333, "defin": [15, 25, 28, 30, 31, 33, 46, 52, 55, 57, 59, 65, 67, 68, 69, 72, 78, 81, 89, 100, 104, 105, 107, 113, 117, 119, 120, 121, 127, 131, 135, 136, 138, 144, 146, 147, 150, 159, 160, 162, 170, 171, 172, 176, 179, 194, 199, 213, 214, 218, 223, 224, 231, 283, 300, 303, 304, 310, 332, 333, 334, 340, 341, 347, 348, 350, 355, 357, 366, 369, 373, 375, 377, 379, 380, 381, 389, 396, 398, 399, 401, 409, 412, 413, 417], "definit": [57, 72, 107, 119, 171, 283, 300, 301, 333, 373, 381, 417, 419], "definitionmarkup": [57, 72], "deg": 192, "degre": [57, 72, 100, 104, 225, 357, 381], "dehdari": 318, "dei3i": 205, "deixa": 399, "deixei": 399, "dekang": [57, 77], "del": [373, 375, 380, 402, 413], "del_cost": 151, "del_testcorpu": 373, "dela": 399, "delai": [309, 354], "deleg": [117, 186, 352, 404], "delet": [7, 8, 57, 59, 86, 114, 117, 120, 148, 151, 176, 209, 229, 355, 373, 380, 385, 413], "delhi": 366, "deliber": 366, "delimit": [28, 29, 57, 59, 86, 97, 102, 121, 225, 310, 313, 341, 348, 355, 357, 368], "delin": [57, 62, 373], "della": [329, 330, 331, 332, 333, 334], "delta": [0, 33, 117, 143, 145, 192, 217], "dem": [367, 387], "demand": [52, 57, 72, 135], "demetriu": 373, "demo": [0, 7, 8, 12, 14, 18, 19, 20, 21, 22, 24, 25, 28, 29, 30, 32, 33, 35, 36, 42, 46, 48, 49, 50, 55, 57, 64, 65, 72, 76, 77, 101, 114, 115, 117, 118, 119, 123, 125, 126, 127, 128, 129, 130, 143, 145, 147, 148, 149, 150, 153, 157, 159, 162, 164, 165, 167, 168, 170, 171, 172, 173, 174, 176, 178, 180, 183, 184, 185, 186, 187, 190, 191, 194, 199, 206, 209, 213, 215, 218, 225, 227, 302, 309, 317, 321, 354, 380, 398, 422], "demo2": [0, 114, 115, 213, 225], "demo3": [0, 114, 115, 213, 225], "demo_": 229, "demo_bw": [0, 213, 218], "demo_error": [0, 180, 191], "demo_error_analysi": [0, 227, 229], "demo_ev": [0, 25, 28], "demo_generated_templ": [0, 227, 229], "demo_grammar": [0, 159, 162, 167, 382, 398], "demo_high_accuracy_rul": [0, 227, 229], "demo_learning_curv": [0, 227, 229], "demo_legacy_grammar": [0, 180, 194], "demo_liu_hu_lexicon": [0, 195, 197], "demo_mod": 317, "demo_model0": [0, 180, 194], "demo_movie_review": [0, 195, 197], "demo_multifeature_templ": [0, 227, 229], "demo_multiposition_featur": [0, 227, 229], "demo_po": [0, 213, 218], "demo_pos_bw": [0, 213, 218], "demo_read_depgraph": [0, 180, 189], "demo_repr_rule_format": [0, 227, 229], "demo_sent_subject": [0, 195, 197], "demo_serialize_tagg": [0, 227, 229], "demo_str_rule_format": [0, 227, 229], "demo_subject": [0, 195, 197], "demo_template_statist": [0, 227, 229], "demo_tweet": [0, 195, 197], "demo_vader_inst": [0, 195, 197], "demo_vader_tweet": [0, 195, 197], "demo_verbose_rule_format": [0, 227, 229], "democrat": 402, "demoexcept": [0, 180, 191], "demonstr": [2, 14, 28, 48, 49, 119, 127, 135, 142, 145, 149, 162, 164, 165, 171, 172, 173, 174, 178, 196, 206, 209, 218, 229, 347, 350, 373, 410, 422], "demoscor": [0, 159, 170], "demv": 133, "den": [379, 387], "dendrogram": [0, 46, 49, 51], "deni": [373, 375, 388, 408, 417], "denken": 410, "dennyc": 140, "denomin": [322, 324], "denot": [13, 57, 107, 179, 377, 417], "dens": [33, 95, 406], "dentro": 399, "denver": [97, 373], "dep": [163, 164, 364, 376], "dep_graph": [175, 176], "dep_pars": [163, 175, 180, 187], "depart": [68, 83, 91, 201], "depend": [28, 30, 33, 52, 53, 55, 57, 72, 79, 107, 121, 125, 135, 142, 148, 163, 164, 166, 169, 170, 172, 175, 176, 177, 187, 190, 196, 197, 218, 232, 233, 309, 312, 317, 324, 341, 345, 355, 357, 361, 365, 373, 377, 381, 417, 422], "dependency_grammar": [170, 172], "dependency_scor": 170, "dependency_treebank": 376, "dependencycorpusread": [55, 57, 71], "dependencycorpusview": [55, 57, 71], "dependencyevalu": [0, 159, 166, 176], "dependencygrammar": [0, 121, 170, 172, 376], "dependencygraph": [0, 57, 107, 159, 166, 169, 170, 172, 176, 187, 357, 373, 376, 384, 424], "dependencygrapherror": [0, 159, 164], "dependencyproduct": [0, 121], "dependencyscoreri": [0, 159, 170], "dependencyspan": [0, 159, 172], "dependent_index": [57, 65], "depgraph": [169, 176, 187, 189, 384], "depgraph_to_glu": [180, 187], "depict": 172, "depoi": 399, "deposit": [358, 419], "depository_financial_institut": 419, "deppars": [125, 163, 187, 377, 385], "deprec": [0, 26, 40, 111, 131, 144, 206, 214, 233, 341, 348, 349, 350, 414, 422], "deprecationwarn": 414, "depressa": 399, "depth": [25, 28, 32, 46, 49, 51, 57, 66, 107, 168, 357, 382, 417], "depth_cutoff": 32, "der": [181, 306, 314, 387], "deregist": 119, "deriv": [14, 84, 88, 119, 159, 160, 162, 165, 172, 179, 182, 199, 218, 225, 300, 309, 329, 330, 331, 334, 364, 365, 366, 371, 373, 381, 384, 388], "derivationally_related_form": [57, 107, 417], "derredor": 399, "desahc": [341, 348], "desapareceram": 399, "desc": [57, 61, 84, 97], "descape_ent": [0, 180, 192], "descend": [117, 119, 120, 171, 301, 341, 342, 348, 355, 399, 417], "descent": [1, 7, 173, 301], "descer": 399, "descr": [25, 28, 373, 375, 401], "describ": [28, 30, 33, 46, 57, 72, 79, 89, 106, 111, 113, 144, 145, 151, 176, 179, 188, 201, 202, 204, 218, 309, 311, 325, 328, 335, 339, 360, 373, 375, 381, 399, 401, 402, 413, 418], "describe_template_set": [0, 213, 215], "descript": [14, 28, 33, 57, 61, 72, 73, 81, 89, 105, 111, 113, 117, 162, 167, 178, 181, 182, 191, 209, 215, 218, 310, 327, 366, 373, 381, 401, 413], "descriptor": 131, "desctruct": 395, "desd": 399, "desempleo": 373, "desensit": 395, "deserialis": [57, 102], "desert": [320, 410], "deserv": 410, "desferirem": 399, "design": [28, 57, 75, 80, 91, 96, 304, 309, 328, 410], "desir": [57, 72, 113, 118, 145, 218, 359, 373, 381], "desminti\u00f3": 364, "despit": [198, 309, 405], "destin": 170, "destroi": [0, 113, 114, 115, 118, 119, 180, 185, 309, 373], "destroy_widget": [114, 119], "destruct": [0, 302], "destruir": 399, "det": [28, 79, 147, 163, 174, 175, 213, 217, 220, 364, 366, 367, 371, 373, 375, 377, 379, 382, 386, 392, 394, 398, 399, 404, 407, 413, 414], "detail": [34, 42, 57, 61, 70, 72, 75, 80, 95, 105, 107, 113, 117, 179, 201, 202, 209, 217, 218, 221, 224, 229, 325, 355, 367, 379, 381, 415, 421, 422], "detect": [43, 52, 57, 59, 76, 223, 309, 317, 360, 417], "detect_block": [57, 62], "detector": [30, 223, 309, 422], "determin": [2, 13, 28, 33, 39, 44, 52, 53, 111, 117, 118, 156, 170, 180, 198, 214, 215, 220, 223, 224, 306, 309, 317, 329, 330, 331, 333, 334, 340, 341, 342, 345, 346, 348, 355, 368, 373, 375, 385, 388, 394, 399], "determinist": [216, 218, 229], "detoken": [302, 305, 319, 320, 410, 422], "detroit": 398, "deu": 399, "dev": [208, 234, 353, 354, 355, 359, 373, 421], "devaneio": 399, "develop": [73, 88, 111, 125, 181, 182, 203, 209, 216, 234, 337, 359, 366, 375, 379, 409, 410, 422], "devem": 208, "deviat": 206, "devis": 206, "devnul": [131, 163], "devour": 373, "devset": 88, "devtest": 73, "dexpr": 378, "dfl": 373, "dg": [164, 172, 376], "dg_str": 376, "dh": [67, 373], "dhgarrett": 424, "di": [373, 399, 401, 408], "dia": 399, "diacrit": [201, 202, 204], "diagnost": [33, 229], "diagon": 147, "diagram": [118, 341, 348], "dialect": [57, 100], "dialog": [115, 119, 405], "dialogu": [109, 373], "diam": 192, "diamant": 399, "dic": [133, 357], "dice": [143, 146, 394], "dicion": 399, "dicion\u00e1rio": 399, "dick": 372, "dickson": 148, "dict": [23, 30, 33, 34, 36, 38, 41, 43, 44, 52, 55, 57, 65, 67, 72, 84, 102, 107, 109, 112, 120, 125, 149, 152, 161, 167, 179, 181, 182, 186, 187, 189, 190, 191, 194, 196, 214, 215, 223, 307, 309, 321, 326, 329, 330, 331, 332, 333, 340, 357, 369, 373, 381, 392, 413], "dict2tab": [0, 212], "dictionari": [30, 32, 33, 34, 35, 39, 41, 52, 57, 59, 60, 61, 64, 65, 67, 69, 70, 71, 72, 73, 75, 82, 84, 85, 86, 93, 98, 100, 102, 105, 107, 108, 109, 111, 112, 113, 119, 120, 124, 127, 129, 133, 135, 137, 142, 149, 161, 162, 167, 170, 179, 182, 186, 190, 192, 196, 197, 198, 201, 202, 204, 209, 214, 215, 217, 220, 223, 300, 301, 309, 320, 326, 341, 345, 357, 358, 366, 373, 374, 375, 379, 394, 402, 411, 417, 422], "dictionaryconditionalprobdist": [0, 179, 400], "dictionaryprobdist": [0, 179], "did": [23, 36, 57, 97, 107, 135, 162, 167, 360, 373, 410, 420], "didn": [135, 197, 198, 380, 410, 413, 420], "didnt": 198, "die": [340, 379, 387, 408], "diem": 373, "diff": [0, 143, 145], "differ": [2, 24, 25, 28, 33, 34, 37, 50, 57, 69, 72, 91, 107, 113, 120, 133, 135, 142, 144, 145, 148, 152, 157, 171, 176, 179, 181, 184, 190, 191, 203, 204, 218, 223, 233, 252, 310, 317, 324, 328, 333, 334, 337, 339, 340, 341, 342, 345, 346, 347, 348, 350, 355, 357, 360, 364, 368, 371, 373, 376, 377, 379, 380, 381, 382, 392, 398, 404, 417, 419], "differenti": 225, "difficult": [46, 199, 218, 309, 328], "difficulti": [340, 422], "digit": [57, 107, 151, 191, 221, 319], "digo": 399, "digraph": [55, 57, 107, 164, 209, 357], "dimazest": 424, "dimens": [46, 48, 49, 50, 51, 170, 317, 383], "dimension": [46, 51, 170], "dimensionsion": [48, 49, 50, 51], "diminu\u00eda": 399, "dimitradi": 424, "dine": [372, 373], "ding": 91, "dinheiro": 399, "dinner": [372, 383], "dir": [12, 13, 158, 164, 176, 309, 375, 401], "direct": [0, 12, 13, 14, 15, 57, 72, 117, 119, 158, 164, 170, 179, 218, 324, 325, 328, 329, 330, 331, 332, 333, 335, 337, 339, 347, 350, 355, 357, 373, 401, 405], "directedbinarycombin": [0, 12, 15], "direction": 323, "directli": [33, 40, 43, 53, 57, 58, 91, 99, 102, 111, 113, 120, 136, 138, 164, 179, 209, 215, 300, 302, 309, 313, 331, 341, 347, 348, 350, 368, 373, 378, 379, 380, 398, 413, 422], "director": [166, 373, 376, 402], "directori": [0, 39, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 75, 77, 78, 79, 81, 82, 84, 85, 87, 89, 90, 91, 93, 97, 98, 99, 100, 102, 103, 105, 107, 108, 109, 111, 128, 131, 161, 169, 181, 182, 222, 355, 356, 360, 366, 367, 373, 375, 379, 388, 401], "dirnam": 144, "disabl": [57, 72, 107, 111, 148, 238, 309, 341, 345, 357], "disable_custom_lemma": [55, 57, 107], "disadvantag": 309, "disagr": [143, 144, 265], "disallow": [13, 57, 107], "disamb_onli": [57, 75], "disambigu": [30, 33, 57, 75, 94, 107, 358, 373], "disappear": [163, 373, 379], "disassembl": 373, "discard": [33, 46, 107, 172, 204, 216, 229, 310, 313, 357, 399, 413, 417], "discard_empti": [57, 58, 63, 66, 68, 71, 87, 90, 91, 99, 310], "discard_lin": [0, 111], "disco": [345, 349], "discontinu": [327, 339, 341, 345, 349, 401, 414], "discoteca": 399, "discount": [0, 135, 138, 140, 179], "discourag": 380, "discours": [0, 55, 57, 98, 123, 159, 160, 180, 181, 184, 186, 361, 388], "discourse_demo": [0, 123, 125], "discourse_fixt": 234, "discourse_id": 181, "discoursetest": [0, 123, 125, 377], "discov": [46, 373], "discoveri": [83, 91, 300], "discuss": [33, 121, 135, 137, 182, 218, 309, 366, 373, 379, 380, 399, 417, 420, 422], "disj": 119, "disjoint": 233, "disjunct": [191, 193, 392, 402], "disk": [52, 161], "dislik": 23, "dismast": 300, "dismiss": 163, "disp": 399, "dispers": [0, 114], "dispersion_plot": [0, 114, 116, 300], "displac": 332, "displai": [0, 2, 10, 28, 32, 52, 57, 72, 110, 111, 113, 116, 117, 118, 119, 120, 125, 153, 156, 162, 165, 167, 171, 178, 179, 300, 341, 345, 354, 355, 357, 372, 373, 375, 380, 388, 399, 409, 417, 420, 422], "display_al": [153, 156], "display_width": 357, "diss": [306, 399], "dissert": [145, 187, 190, 306, 318], "dist": [97, 373], "distanc": [0, 42, 50, 51, 57, 107, 119, 143, 144, 151, 324, 332, 341, 345, 357, 422], "distant": 339, "distinct": [33, 57, 107, 156, 218, 373, 379, 412], "distinguish": [37, 121, 159, 332, 394], "distort": [331, 332, 333], "distortion_factor": [322, 340], "distortion_scor": [322, 340], "distortion_t": 331, "distribut": [31, 33, 35, 36, 46, 47, 55, 57, 63, 68, 72, 74, 77, 83, 84, 88, 90, 91, 94, 96, 109, 112, 113, 135, 137, 138, 150, 179, 206, 215, 218, 225, 300, 326, 329, 330, 331, 332, 333, 334, 373, 375, 394, 399, 400, 401, 405, 413, 421, 422], "distsim": 224, "dita": 399, "ditto": 205, "div": 79, "dive": 373, "divers": 373, "divid": [2, 29, 35, 57, 62, 63, 78, 81, 87, 89, 99, 103, 107, 109, 177, 179, 192, 226, 300, 302, 303, 307, 309, 312, 313, 324, 355, 373, 380, 387, 400, 401], "divis": [324, 335, 417], "divisa": 373, "dixon": 148, "dizendo": 399, "dizer": 399, "dizia": 399, "dj": 332, "dl": [337, 358], "dlr": 373, "dm": 306, "dmitrij": 424, "dnx": [57, 84], "dnx2": [57, 84], "do": [10, 23, 24, 29, 37, 38, 52, 57, 59, 72, 77, 91, 107, 111, 112, 117, 119, 120, 121, 124, 131, 135, 137, 138, 147, 150, 172, 173, 174, 176, 179, 182, 191, 197, 202, 206, 209, 215, 223, 231, 233, 300, 301, 309, 313, 319, 340, 341, 345, 347, 348, 350, 353, 360, 366, 371, 372, 373, 377, 379, 380, 381, 384, 388, 396, 398, 399, 410, 413, 414, 415, 417, 419, 421], "do_continu": [351, 352, 355], "do_kw": [143, 144], "do_kw_pairwis": [143, 144], "do_stop": [351, 352], "dobj": 376, "doc": [12, 28, 30, 55, 57, 61, 72, 73, 102, 104, 107, 112, 135, 192, 196, 352, 353, 355, 373, 381, 387, 402, 405, 421], "docid": [57, 72], "docnamepattern": [57, 72], "docno": [73, 373], "docs_metadata": [55, 57, 72], "docstart": [57, 69], "docstr": [57, 92, 112, 117, 131, 229], "doctest": [131, 163, 216, 217, 235, 238, 258, 284, 287, 308, 324, 388, 391, 398], "doctor": [100, 163, 318], "doctyp": [73, 373], "document": [28, 30, 34, 38, 55, 57, 58, 61, 62, 64, 66, 68, 69, 71, 72, 73, 74, 75, 78, 79, 83, 86, 87, 91, 92, 94, 96, 99, 102, 103, 104, 107, 108, 109, 110, 112, 119, 122, 132, 134, 173, 177, 179, 192, 196, 197, 209, 218, 224, 229, 300, 317, 341, 348, 351, 354, 355, 357, 358, 373, 402, 405, 415, 420, 422], "document_featur": 30, "doddington": 337, "dodg": [57, 72], "dodger": 405, "doe": [24, 25, 28, 29, 32, 33, 34, 46, 48, 52, 53, 57, 72, 79, 80, 81, 89, 107, 108, 111, 117, 119, 120, 131, 135, 136, 138, 148, 159, 163, 174, 204, 215, 216, 218, 225, 226, 231, 267, 300, 306, 309, 314, 320, 328, 334, 340, 341, 343, 360, 370, 373, 375, 378, 379, 380, 388, 399, 409, 411, 413, 417], "doesn": [57, 72, 111, 131, 175, 182, 198, 218, 314, 319, 324, 329, 377, 388, 389, 405, 409, 410, 411], "doesnt": 198, "doesnt_match": 383, "dog": [25, 57, 62, 107, 121, 162, 163, 165, 167, 174, 175, 179, 180, 191, 211, 217, 221, 301, 341, 348, 357, 366, 368, 373, 375, 376, 377, 378, 379, 382, 385, 386, 388, 392, 396, 398, 404, 407, 413, 417], "dog_lemma": 417, "doi": 399, "dolist": 398, "dom": [180, 186, 366, 399, 404], "dom0": 404, "dom1": 404, "dom2": 404, "dom3": 404, "domain": [55, 57, 75, 105, 127, 159, 180, 182, 186, 304, 309, 366, 377, 404, 417, 422, 424], "domest": [413, 417], "domestic_anim": [57, 107, 357, 417], "domestic_dog": 417, "domin": [36, 283, 301, 341, 348], "don": [121, 127, 135, 144, 186, 198, 205, 234, 319, 320, 368, 380, 389, 396, 400, 409, 410, 413], "donat": 422, "done": [28, 46, 48, 57, 72, 119, 134, 135, 148, 167, 170, 181, 190, 218, 304, 312, 338, 369, 373, 384, 409], "dont": 198, "dooh4": 205, "door": 402, "dop": [345, 349], "dot": [12, 14, 33, 57, 72, 107, 159, 162, 164, 165, 167, 171, 180, 191, 221, 357, 381, 410], "dot2img": [0, 57, 107, 159, 164, 357], "dot_digraph": [159, 162], "dot_str": [57, 107, 164, 357], "dotal": [57, 58, 63, 66, 68, 71, 87, 90, 91, 99, 310], "dotdot": 284, "doto": 399, "dotprod": 33, "doubl": [119, 197, 209, 377, 380, 410], "double_dash": [302, 305, 319], "double_neg_flip": 197, "dough": 364, "dove": 396, "down": [2, 84, 113, 117, 119, 135, 162, 165, 167, 173, 188, 373, 379, 398], "downcas": 304, "download": [0, 55, 65, 111, 131, 133, 140, 224, 267, 357, 360, 373, 388, 421, 422], "download_dir": [0, 113, 267], "download_gui": [0, 113], "download_shel": [0, 113], "downloadergui": [0, 113], "downloadermessag": [0, 113], "downloadershel": [0, 113], "downward": [118, 119], "dozen": [359, 422], "dp": [375, 376, 379, 388, 413], "dp1": 413, "dp2": 413, "dpd": 400, "dr": [0, 100, 180, 181, 184, 185, 373, 378, 385, 388, 410], "dr1": [100, 373], "drag": [118, 119], "draggabl": [118, 119], "drain": 156, "draw": [0, 57, 107, 150, 180, 184, 185, 300, 341, 345, 348, 349, 399, 420], "draw_pars": 171, "draw_tre": [0, 114, 118], "drawback": 328, "drawn": [36, 92, 96, 119, 184, 381], "dream": [163, 373], "dreamteam": 410, "dress": 373, "dressing_wel": 373, "dridan": 311, "drive": [57, 107, 182, 366, 373, 417], "driven": [332, 420], "driver": 188, "drizzl": 373, "drop": [10, 33, 340, 373, 375, 422], "drs1": [181, 378], "drs2": [181, 378], "drs3": 378, "drs_conc": [180, 184], "drsdrawer": [0, 180, 184], "drss": [181, 378, 385, 388], "drswidget": [0, 180, 185], "drt": [0, 180, 181, 361, 377, 388], "drt_discourse_demo": [0, 123, 125], "drt_glue_demo": [0, 180], "drtabstractvariableexpress": [0, 180, 184], "drtapplicationexpress": [0, 180, 184], "drtbinaryexpress": [0, 180, 184], "drtbooleanexpress": [0, 180, 184], "drtconcaten": [0, 180, 184], "drtconstantexpress": [0, 180, 184], "drtequalityexpress": [0, 180, 184], "drteventvariableexpress": [0, 180, 184], "drtexpress": [0, 180, 181, 184, 378], "drtfunctionvariableexpress": [0, 180, 184], "drtglue": [0, 180, 187, 385], "drtgluedemo": [0, 180, 185], "drtgluedict": [0, 180, 187], "drtglueformula": [0, 180, 187], "drtgluereadingcommand": [0, 123, 125, 377], "drtindividualvariableexpress": [0, 180, 184], "drtlambdaexpress": [0, 180, 184], "drtnegatedexpress": [0, 180, 184], "drtorexpress": [0, 180, 184], "drtparser": [0, 180, 181, 184, 377, 378, 388], "drtproposit": [0, 180, 184], "drtstring": 378, "drttoken": [0, 180, 184], "drtvariableexpress": [0, 180, 184, 378], "dstoffset": [351, 352], "dt": [25, 28, 39, 57, 62, 163, 166, 175, 177, 213, 214, 216, 219, 221, 222, 224, 232, 301, 352, 368, 373, 376, 377, 398, 401, 409, 413, 415], "dti": [223, 410], "dtv": 364, "dtype": 38, "du": [329, 387], "dua": 399, "duan": 148, "dub": 373, "dublin": 399, "duck": 319, "ductor": 414, "due": [91, 197, 199, 225, 311, 324, 373, 417], "duh": 339, "duke": 373, "dull": [95, 406], "dum": 208, "duma": 208, "dummi": [164, 176, 334], "dummysmilei": [304, 410], "dump": [57, 102, 182, 302, 309, 370, 398, 400, 410, 413], "dun": 371, "dunningham": 148, "dunt": 395, "duplic": [107, 125, 135, 137, 196, 233, 324, 357, 373, 422], "durat": [29, 192, 217], "dure": [104, 120, 121, 129, 135, 170, 213, 215, 217, 223, 309, 319, 330, 331, 332, 333, 334, 335, 373], "durwood": 410, "dusseldorf": 39, "dutch": [57, 62, 106, 192, 209, 311, 373, 402, 408, 422], "dutchstemm": [0, 199, 209], "duti": 373, "dv": 333, "dvar": 380, "dwarf": 327, "dwayn": 148, "dx": 119, "dy": 119, "dynam": [159, 162, 165, 178, 218, 347, 350], "d\u00e1": 399, "d\u1729": 308, "d\u31a8\ufd39\ufb2b\ua7fe\u2c38\uaaa7\u04c6": 308, "e": [2, 7, 14, 16, 23, 24, 25, 28, 29, 31, 33, 34, 35, 36, 37, 38, 43, 44, 46, 48, 52, 57, 58, 59, 60, 62, 64, 65, 66, 67, 69, 71, 72, 74, 75, 80, 83, 86, 87, 88, 91, 92, 94, 99, 104, 105, 106, 107, 108, 109, 110, 111, 113, 117, 118, 119, 120, 121, 127, 129, 130, 131, 133, 135, 137, 144, 145, 146, 147, 148, 151, 156, 162, 164, 165, 167, 169, 171, 177, 178, 179, 183, 184, 185, 186, 188, 191, 196, 197, 198, 201, 202, 203, 207, 208, 213, 214, 216, 218, 222, 223, 224, 226, 232, 233, 300, 301, 302, 303, 305, 306, 308, 309, 310, 312, 319, 324, 325, 328, 329, 330, 331, 332, 333, 334, 338, 339, 341, 342, 343, 347, 348, 350, 352, 353, 354, 355, 357, 360, 364, 367, 369, 371, 373, 378, 379, 380, 381, 384, 388, 392, 394, 395, 399, 400, 402, 404, 409, 410, 413, 415, 417, 422], "e0": 403, "e01": [378, 392], "e02": [378, 392], "e083": 392, "e092": 392, "e1": [205, 392, 403], "e2": [148, 392, 403], "e2f": 327, "e_end": 338, "e_start": 338, "ea": 392, "each": [2, 14, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 104, 105, 107, 108, 109, 110, 111, 113, 117, 118, 119, 120, 121, 125, 131, 135, 137, 142, 144, 146, 147, 152, 156, 157, 158, 159, 160, 162, 163, 165, 167, 169, 170, 171, 172, 173, 175, 176, 178, 179, 181, 182, 183, 191, 194, 196, 197, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 231, 232, 233, 238, 259, 300, 303, 307, 309, 314, 317, 320, 321, 323, 324, 326, 328, 329, 330, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 345, 348, 355, 366, 367, 371, 373, 377, 379, 380, 381, 383, 388, 395, 398, 399, 401, 402, 405, 409, 410, 415, 417, 419], "eacut": 192, "eager": [176, 363], "eamt": 412, "ear": 205, "earlei": [162, 165, 398, 422], "earleychart": [0, 159, 398], "earleychartpars": [0, 159, 165, 398], "earli": [182, 366, 372, 422], "earlier": [28, 46, 49, 135, 137, 173, 174, 182, 216, 366, 377, 379, 388, 399, 402, 409], "earliest": [7, 8, 174], "earth": [373, 417], "easi": [57, 90, 135, 188, 215, 233, 304, 373, 385, 412, 420, 422], "easier": [29, 119, 182, 300, 334, 353, 366, 373, 401], "easili": [120, 179, 218, 229, 353, 373, 378, 380, 383, 412], "east": [57, 79, 90, 109, 371, 373, 422], "east_germani": 366, "easy_instal": 421, "eat": [16, 57, 67, 90, 131, 217, 329, 364, 365, 373, 379, 389, 417], "eater": 373, "eateri": [131, 389], "ebook": 422, "ecirc": 192, "econom": [57, 90, 176, 373], "economist": 402, "ed": [57, 67, 107, 125, 216, 223, 306, 314, 357, 394, 409], "edg": [2, 14, 107, 147, 151, 159, 162, 164, 165, 167, 170, 171, 177, 218, 284, 341, 345, 357, 371, 379, 398], "edgar": 109, "edge1": 171, "edge_closur": [0, 357], "edgei": [0, 14, 159, 162, 165, 167, 171], "edges2dot": [0, 357], "edinburgh": [327, 424], "edit": [113, 115, 144, 148, 179, 375, 379, 394, 422], "edit_dist": [0, 143, 148, 266, 394, 422], "edit_distance_align": [0, 143, 148, 394, 422], "editor": [57, 61, 402], "editori": [373, 400, 422], "edlop": 424, "edu": [42, 53, 57, 62, 63, 65, 67, 68, 70, 72, 83, 88, 90, 91, 94, 96, 100, 105, 106, 107, 112, 140, 148, 151, 175, 182, 215, 224, 319, 335, 341, 348, 366, 373, 388], "educ": [63, 100, 420], "edward": [0, 420, 422, 424], "eet": 392, "ef": [198, 410], "efeito": 399, "effbot": 192, "effect": [28, 33, 176, 201, 202, 309, 341, 345, 354, 402, 409, 419], "efficacit": 151, "effici": [0, 46, 49, 104, 111, 121, 131, 135, 159, 162, 165, 179, 213, 215, 218, 302, 313, 357, 373, 377, 417, 422], "effort": [359, 422], "efg": 410, "eflom": 290, "eg": [57, 69, 105, 107, 199, 225, 410], "egeu": 373, "egg": [235, 371, 417], "egrav": 192, "egypt": [109, 320, 410], "eh": [67, 373], "eh1": 373, "eht": [341, 348], "ei": 67, "eid": [163, 224], "eight": [233, 420], "eighth": 198, "eighti": 367, "ein": [329, 330, 331, 332, 333, 412], "einen": 410, "einzukaufen": 410, "eisner": 172, "either": [14, 31, 38, 52, 57, 58, 59, 61, 64, 65, 66, 69, 70, 71, 72, 74, 75, 79, 81, 82, 83, 84, 85, 86, 89, 93, 94, 98, 99, 104, 105, 107, 108, 109, 113, 117, 119, 120, 121, 124, 131, 150, 162, 165, 167, 171, 188, 206, 214, 217, 218, 233, 238, 301, 309, 310, 312, 325, 341, 345, 347, 348, 350, 371, 373, 375, 380, 381, 388, 389, 405, 415], "ej": 402, "ekaterinburg": 424, "el": [57, 106, 133, 320, 364, 373, 396, 399, 400, 410], "ela": 399, "elect": [223, 373, 410], "electr": 414, "electron": [163, 308, 402], "eleg": 155, "elem": [321, 357], "element": [7, 8, 14, 31, 33, 43, 44, 52, 57, 61, 62, 72, 79, 80, 81, 84, 89, 92, 93, 98, 100, 108, 111, 117, 119, 120, 127, 131, 152, 157, 160, 162, 173, 174, 178, 182, 186, 214, 224, 226, 303, 312, 314, 321, 323, 325, 334, 338, 341, 342, 345, 353, 357, 366, 373, 379, 380, 381, 401], "elementari": 399, "elementtre": [55, 57, 61, 79, 80, 93, 105, 108, 131, 321, 357, 373, 401, 411], "elementtree_ind": [0, 357], "elementwrapp": [0, 131], "eleph": [169, 376, 396], "eleprobdist": [0, 35, 36, 179, 400], "elevator_car": 417, "elif": [380, 398], "elimeq": 181, "elimin": [121, 162, 377, 384], "eliminate_equ": [180, 184, 378], "eliminate_start": [0, 121], "elisabeth": [306, 314], "elisp": 25, "eliza": [0, 18, 24], "eliza_chat": [0, 18, 19], "elkouri": 204, "ell": [133, 417], "ellips": [57, 72], "ellipsi": [302, 309, 324], "elogio": 399, "els": [52, 120, 121, 124, 131, 132, 148, 186, 223, 333, 380, 389, 399, 400, 404, 413, 416], "elt": [61, 79, 80, 93, 108], "elt_handl": [61, 79, 80, 93, 108], "elucidarium": 109, "elvish": 374, "elziu": 402, "em": [0, 46, 208, 218, 329, 330, 331, 332, 333, 334, 373, 399], "em_ibm1": 412, "emac": 0, "email": [113, 328, 410], "emb": 378, "embed": [57, 62], "emcluster": [0, 46, 48], "emerg": [417, 419], "emili": 283, "emit": 218, "emma": 373, "emnlp": 339, "emoji": [284, 422], "emot": 373, "emoticon": [197, 304, 405, 410], "emphasi": [373, 405], "empir": 33, "emploi": 415, "employ": [57, 72, 381], "employe": [57, 72, 381], "employment_start": [57, 72, 381], "empr": 399, "empti": [8, 24, 50, 52, 81, 89, 104, 111, 117, 120, 121, 135, 144, 150, 162, 171, 173, 174, 177, 178, 179, 192, 233, 301, 310, 320, 325, 333, 341, 342, 343, 348, 368, 373, 380, 386, 387, 388, 401, 402, 405, 409, 411, 413, 422], "empty_first": 187, "emptypredictrul": [0, 159, 162, 165, 167], "emptyset": 119, "emsp": 192, "emul": [339, 418], "en": [57, 60, 75, 79, 106, 148, 151, 203, 220, 314, 320, 355, 357, 364, 371, 373, 374, 412], "en_em_dash": [302, 318], "en_wsj": 219, "enabl": [57, 72, 75, 107, 129, 134, 422], "encapsul": [119, 182, 323, 366], "encarei": 399, "enchain": 417, "enclos": [119, 379, 419], "encod": [0, 25, 28, 29, 30, 33, 34, 39, 41, 52, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 113, 120, 121, 131, 162, 163, 175, 177, 179, 186, 187, 191, 192, 194, 197, 201, 213, 214, 215, 219, 222, 223, 224, 279, 302, 311, 315, 316, 318, 321, 341, 342, 346, 348, 353, 354, 357, 369, 373, 379, 380, 401, 413, 422], "encode_json_obj": [213, 215, 221, 223, 227, 231, 232, 375], "encoding_demo": [0, 30, 41], "encomenda": 399, "encontramo": 399, "encount": [33, 35, 57, 72, 111, 113, 223, 380, 409], "encourag": [339, 373], "encrypt": 111, "end": [12, 14, 28, 52, 57, 69, 72, 99, 100, 104, 111, 117, 120, 131, 132, 135, 159, 162, 165, 167, 172, 174, 177, 178, 191, 201, 202, 203, 204, 205, 213, 215, 221, 229, 231, 233, 238, 283, 305, 306, 307, 309, 310, 313, 317, 319, 320, 338, 340, 341, 342, 348, 357, 366, 368, 369, 373, 378, 380, 388, 392, 404, 405, 410, 411, 413, 417, 422], "end1": 233, "end2": [221, 233], "end_i": [303, 310, 313], "end_index": 172, "end_of_list": 388, "end_posit": 131, "end_r": 104, "end_siz": [126, 388], "end_toknum": 104, "end_w5": [199, 204], "end_w6": [199, 204], "end_word": 80, "ending_quot": [302, 305, 319], "endors": 206, "endpoint": [231, 355], "endswith": 399, "enfermo": 399, "enforc": [231, 373], "enfraquecida": 399, "eng": [57, 65, 107, 213, 221, 358, 367, 374, 417], "eng_wikt": [57, 107], "engend": 373, "engin": [25, 202, 420], "england": [100, 373], "english": [14, 57, 73, 105, 106, 107, 109, 121, 182, 199, 209, 213, 224, 302, 306, 309, 311, 314, 318, 332, 338, 366, 371, 373, 374, 375, 381, 399, 408, 417], "english_fd": 374, "englishpcfg": 175, "englishstemm": [0, 199, 209], "engmalt": 169, "engvers": 96, "enhanc": [148, 225, 359, 422, 424], "enjoi": 413, "enlighten": [14, 24], "enorm": [198, 399], "enough": [135, 156, 159, 171, 198, 375, 379, 395, 405, 410], "enquanto": 399, "ense2": [57, 80], "ensp": 192, "ensur": [33, 46, 48, 57, 72, 117, 119, 162, 163, 179, 191, 219, 234, 257, 281, 314, 324, 325, 328, 335, 337, 339, 347, 350, 360, 373, 394, 409, 413], "ensure_load": [55, 57, 59, 110], "ent": 399, "entail": [37, 92, 107, 373, 377, 388, 422], "enter": [118, 119, 185, 218, 352, 355, 372, 373, 399], "enteroscop": 395, "entertain": [405, 422], "entir": [14, 28, 52, 57, 59, 81, 89, 100, 104, 117, 119, 162, 167, 171, 172, 174, 178, 198, 215, 231, 323, 333, 334, 360, 373, 375, 388, 401, 405, 422], "entiti": [25, 27, 29, 37, 39, 57, 68, 69, 73, 75, 93, 107, 180, 182, 186, 187, 191, 192, 224, 320, 353, 357, 366, 373, 377, 381, 396, 404, 413, 417, 420, 422], "entity_1": 68, "entity_2": [57, 68, 373], "entity_field": 353, "entity_specific_co": 373, "entity_specific_modes_b": 373, "entity_typ": [353, 392], "entitytyp": [0, 180, 191], "entr": 399, "entreaberta": 399, "entri": [16, 55, 57, 67, 72, 85, 93, 101, 104, 106, 107, 113, 120, 135, 142, 147, 170, 172, 178, 182, 223, 309, 329, 330, 331, 332, 333, 373, 375], "entropi": [0, 33, 88, 135, 136, 179, 213, 218, 369, 391, 422], "entropy_cutoff": [32, 369], "entrydialog": [0, 114, 119], "ent\u00e3o": 399, "enum": 367, "enumer": [52, 170, 320, 335, 339, 375, 413], "env_var": [131, 163], "environ": [39, 57, 102, 131, 169, 181, 222, 224, 285, 316, 357, 360, 388], "environment": [57, 102], "eof": [104, 313], "ep": 164, "epilogu": 109, "episod": 404, "eprint": 328, "epsilon": [0, 119, 121, 145, 192, 217, 324, 325], "eq": [123, 130, 180, 191, 337], "eq_list": [180, 191], "equ": 68, "equal": [33, 35, 43, 51, 52, 57, 68, 79, 104, 107, 117, 119, 120, 121, 135, 142, 147, 148, 150, 151, 167, 173, 179, 181, 184, 190, 191, 197, 214, 306, 314, 329, 341, 342, 343, 373, 385, 400, 413], "equal_valu": [0, 120, 380], "equality_pr": [0, 180, 191, 392], "equalityexpress": [0, 180, 184, 191], "equat": [33, 57, 107, 179, 417], "equilibrar": 399, "equip": 373, "equiv": [180, 184, 191, 192, 385], "equival": [15, 25, 28, 51, 52, 120, 135, 137, 144, 179, 184, 186, 191, 233, 325, 329, 341, 347, 348, 350, 364, 385, 388, 392, 413], "er": [57, 67, 73, 107, 203, 338, 372, 387, 399], "er0": [67, 373], "er_99": 73, "era": 399, "erfcc": [0, 322, 326], "erico": 208, "ern": 203, "err": [57, 103], "errant": 400, "errata": 412, "erron": 229, "error": [0, 25, 30, 32, 39, 57, 72, 101, 107, 111, 113, 121, 131, 149, 154, 179, 180, 186, 197, 202, 216, 229, 230, 281, 283, 285, 300, 311, 321, 326, 335, 336, 353, 354, 355, 368, 369, 373, 375, 380, 389, 397, 398, 400, 417, 422], "error_list": [0, 227, 230], "error_output": 229, "erroranalysi": [0, 227], "errormessag": [0, 113], "errt": [149, 397], "erwartet": 340, "esa\u00fa": 399, "escap": [111, 131, 191, 320, 341, 345, 373, 380], "eschbach": [345, 349], "eschbachguentherbecker2006": [345, 349], "esconjuro": 399, "escutava": 399, "esequ": 399, "esn": 203, "esp": [373, 399, 402], "especi": [43, 52, 100, 196, 198, 373, 419], "esperam": 399, "esperanto": [57, 103], "espetado": 399, "espraiavam": 399, "ess": 399, "essa": 399, "essenti": [52, 121], "est": [57, 107, 399, 400], "esta": 373, "establish": [170, 219], "estado": 399, "estadounidens": 373, "estar": 399, "estava": 399, "estim": [33, 35, 36, 38, 46, 48, 135, 179, 218, 324, 329, 330, 331, 332, 333, 334, 373], "estivess": 399, "estonian": 373, "est\u00e3o": 399, "est\u00fapido": 399, "esvoa\u00e7": 399, "et": [57, 72, 105, 106, 109, 218, 306, 314, 324, 328, 333, 339, 345, 349, 367, 373, 383, 392], "eta": 192, "etc": [57, 72, 104, 107, 113, 119, 120, 179, 180, 231, 232, 300, 309, 332, 347, 350, 360, 373, 381, 394], "eterno": 399, "eth": 192, "etre": [131, 373, 401, 411], "eu": [323, 373, 399, 417], "euc": [57, 76, 103], "euclidean": 51, "euclidean_dist": [0, 46, 51], "euml": 192, "euphrosyn": 109, "euro": [192, 305, 319, 373], "europarl": [57, 87], "europarl_raw": [0, 55], "europarlcorpusread": [55, 57, 87], "european": [308, 309], "eurythm": 402, "eustac": 109, "eus\u00e9bia": 399, "ev": 388, "evad": [57, 72, 381], "eval": [131, 159, 166, 176, 327, 398], "evalu": [0, 25, 26, 28, 29, 52, 73, 94, 131, 135, 136, 139, 143, 147, 149, 151, 159, 180, 182, 194, 195, 196, 197, 201, 203, 213, 214, 223, 289, 298, 308, 311, 324, 325, 327, 328, 335, 337, 339, 366, 380, 394, 399, 405, 422], "evaluate_per_tag": [213, 214, 409], "evaluate_s": [0, 180, 194, 404], "even": [25, 57, 59, 120, 135, 142, 170, 229, 354, 373, 379, 380, 417], "event": [57, 61, 72, 117, 119, 121, 146, 179, 181, 191, 218, 373, 381, 394, 400], "eventtyp": [0, 180, 191], "eventu": [57, 107, 357, 380, 388], "eventvariableexpress": [0, 180, 184, 191], "ever": [23, 313, 372, 388, 398], "everi": [13, 33, 39, 43, 57, 62, 81, 89, 104, 107, 108, 119, 120, 125, 129, 135, 162, 167, 170, 178, 179, 182, 184, 191, 197, 223, 231, 232, 300, 324, 340, 341, 347, 348, 350, 368, 372, 373, 374, 377, 378, 379, 380, 385, 388, 399, 404, 412, 413], "every_girl": 384, "every_girl_chas": 384, "every_girl_chases_a_dog": 384, "every_girl_chases_yprim": 384, "everygram": [0, 135, 139, 357, 391, 422], "everygram_input": 286, "everyth": [57, 87, 111, 135, 304, 368], "everywher": [318, 333, 410], "evid": [57, 72, 223, 309, 371, 399, 410], "evok": [57, 72, 381], "evolv": 133, "ew": 371, "ewan": [0, 420, 422, 424], "ex": [57, 84, 127, 164, 181, 191, 214, 218, 355, 373, 399, 409], "ex2": [57, 84], "ex_quant": [377, 384, 385], "exact": [129, 146, 150, 184, 225, 324, 335, 371], "exact_match": [0, 322, 335], "exactli": [31, 36, 72, 120, 135, 187, 191, 334, 400, 413], "exahust": [162, 165], "examin": [30, 215, 373, 399, 413], "examlpl": 164, "exampl": [0, 14, 25, 28, 29, 30, 33, 34, 36, 39, 46, 52, 55, 57, 58, 61, 63, 67, 72, 76, 78, 79, 80, 81, 87, 88, 89, 92, 93, 97, 99, 100, 103, 104, 105, 107, 108, 109, 111, 112, 119, 121, 125, 131, 132, 134, 135, 136, 140, 143, 144, 146, 148, 151, 155, 159, 162, 169, 170, 172, 174, 176, 179, 181, 182, 185, 186, 191, 192, 196, 197, 213, 214, 219, 224, 257, 265, 283, 289, 301, 302, 304, 307, 310, 312, 313, 316, 317, 325, 328, 332, 333, 334, 339, 340, 341, 344, 347, 348, 350, 353, 354, 355, 357, 358, 360, 365, 366, 371, 373, 375, 379, 380, 381, 382, 383, 385, 388, 391, 392, 394, 401, 402, 404, 405, 409, 410, 412, 413, 417, 422], "example_word": 80, "exce": [25, 192, 373], "exceed": [25, 158], "excel": 405, "except": [31, 34, 42, 57, 59, 72, 86, 87, 107, 110, 111, 117, 121, 127, 128, 129, 130, 131, 132, 163, 164, 176, 181, 182, 184, 186, 190, 191, 301, 304, 310, 312, 321, 341, 343, 355, 366, 369, 370, 373, 374, 375, 378, 380, 384, 391, 392, 404, 410, 411, 413, 417], "exception": 198, "excerpt": [57, 72, 209], "excessivament": 399, "exchang": 373, "exchequ": 373, "exclud": [57, 65, 72, 215, 223, 231, 309, 312, 330, 331, 332, 333, 380, 409], "excludesf": [57, 72], "excludezero": [231, 233], "exclus": [38, 100, 111, 229, 340, 409], "exec_tim": 373, "execut": [2, 28, 30, 39, 124, 128, 131, 182, 197, 219, 222, 224, 354, 366, 373, 388, 398, 402, 410], "executivo": 399, "exemplar": [55, 57, 72], "exemplifi": 229, "exemplo": 399, "exercis": [2, 94, 260, 271, 299, 360, 372, 377, 412, 422], "exhal": 373, "exhaust": [162, 165, 324], "exhibit": [126, 128, 373], "exist": [14, 46, 57, 59, 85, 105, 107, 111, 113, 119, 120, 123, 127, 130, 131, 149, 162, 163, 164, 165, 167, 171, 174, 175, 179, 180, 181, 184, 186, 188, 189, 190, 191, 192, 202, 206, 267, 331, 341, 348, 359, 360, 365, 373, 375, 377, 378, 379, 384, 385, 388, 392, 396, 404, 411, 413, 417, 422], "existenti": 392, "exists_list": [180, 191], "existsexpress": [0, 180, 191], "exit": 388, "exodu": 109, "exp": [33, 337], "expand": [7, 25, 28, 113, 118, 121, 159, 167, 171, 173, 227, 229, 231, 233, 340, 341, 348, 368, 379, 422], "expand_thread": [123, 125, 377], "expand_tweetid": [351, 355], "expand_tweetids_demo": [0, 351, 354], "expandable_product": [159, 173], "expanded_tre": [114, 118], "expandleftrul": [0, 25, 28, 368], "expandrightrul": [0, 25, 28, 368], "expandunari": [341, 347, 348], "expans": [7, 145, 173, 340, 379], "expansion_scor": [322, 340], "expect": [27, 28, 30, 46, 48, 52, 57, 59, 72, 92, 113, 131, 135, 136, 137, 138, 139, 144, 162, 177, 179, 191, 196, 198, 225, 233, 265, 266, 284, 305, 307, 308, 313, 318, 319, 320, 327, 329, 334, 340, 373, 377, 378, 379, 380, 381, 389, 392, 400, 409, 410, 413], "expected_albb": 308, "expected_amz": 308, "expected_cas": 308, "expected_detoken": 319, "expected_low": 308, "expected_output": [276, 320], "expected_rkt": 308, "expected_s": 308, "expected_scor": 249, "expected_token": 319, "expectedmoretokensexcept": [0, 180, 191], "expens": [46, 131, 146, 333], "experi": [2, 179, 311, 324, 328, 355, 373], "experienc": [373, 381], "experiment": [157, 201, 322, 340], "expert": [412, 424], "expir": 405, "explain": [30, 33, 364, 379, 409], "explan": [341, 348], "explet": 373, "explicit": [34, 319, 373], "explicitli": [34, 35, 57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 82, 84, 85, 93, 98, 105, 107, 108, 109, 113, 135, 137, 179, 373, 375, 380, 396], "explod": 402, "exploit": 63, "explor": [2, 3, 7, 8, 257, 300], "explos": [221, 417], "expon": [146, 324], "exponenti": [33, 309, 340], "exportselect": 117, "expos": [373, 401], "expose_01": 401, "exposi": 399, "expr": [128, 186, 187, 191, 398, 404], "expr_tt": [57, 84], "expr_uid": [57, 84], "expres": 312, "express": [0, 1, 3, 6, 16, 23, 25, 28, 29, 32, 35, 36, 52, 57, 59, 61, 64, 65, 68, 69, 70, 71, 72, 75, 82, 84, 85, 86, 93, 98, 104, 105, 107, 108, 109, 111, 124, 125, 126, 127, 128, 129, 130, 131, 163, 180, 181, 184, 186, 188, 190, 191, 192, 193, 194, 207, 218, 223, 233, 300, 301, 302, 304, 307, 309, 310, 312, 319, 320, 329, 330, 331, 341, 348, 353, 357, 365, 366, 368, 371, 373, 375, 377, 378, 379, 381, 384, 388, 392, 396, 399, 402, 403, 404, 409, 413, 422], "expung": 375, "ext": [373, 375], "extend": [0, 46, 57, 72, 106, 107, 114, 117, 120, 124, 128, 135, 173, 174, 179, 184, 341, 342, 373, 377, 405, 413, 417, 422], "extens": [57, 60, 66, 111, 113, 124, 140, 148, 167, 169, 182, 206, 218, 309, 323, 366, 373, 375, 388, 404], "extension": 182, "extent": 28, "extern": [33, 34, 44, 55, 57, 126, 128, 301, 334], "extra": [28, 33, 57, 72, 131, 171, 179, 324, 341, 348, 373, 389, 408, 411, 422], "extract": [0, 14, 37, 39, 43, 57, 61, 73, 96, 106, 113, 162, 164, 165, 176, 182, 188, 192, 194, 196, 197, 204, 217, 222, 231, 233, 312, 322, 325, 328, 338, 340, 341, 348, 353, 357, 364, 365, 366, 383, 388, 399, 400], "extract_bigram_feat": [0, 195, 197], "extract_featur": [159, 176, 195, 196], "extract_field": [0, 351, 353], "extract_properti": [213, 215, 227, 231, 232], "extract_rel": [0, 180, 192, 402], "extract_test_sent": [0, 159, 177, 398], "extract_unigram_feat": [0, 195, 197, 405], "extractor": [30, 196, 197, 376], "extramur": 395, "extran": 37, "extrem": [57, 91, 198, 373, 375], "ey": [57, 72, 381], "ey2": 373, "e\ufc96": 308, "f": [0, 28, 29, 30, 31, 32, 33, 44, 46, 52, 57, 67, 72, 89, 100, 106, 107, 112, 113, 120, 135, 137, 145, 147, 150, 181, 186, 187, 203, 212, 214, 216, 308, 312, 325, 338, 339, 347, 350, 357, 365, 371, 373, 375, 378, 379, 380, 381, 383, 388, 389, 392, 394, 395, 398, 399, 400, 401, 403, 404, 405, 409, 411, 412, 413, 422], "f1": [35, 120, 365, 373, 377, 379], "f2": [120, 373, 379], "f2e": 327, "f3": 373, "f4": 384, "f_align": 338, "f_end": 338, "f_id": 33, "f_measur": [0, 25, 29, 143, 147, 150, 196, 213, 214, 368, 394, 407], "f_start": 338, "fa": 411, "fabl": 372, "fabul": 198, "face": [25, 57, 83, 373], "facil": 337, "facilit": [192, 196, 229, 422], "fact": [91, 117, 162, 182, 366, 373, 377], "factor": [53, 148, 179, 229, 333, 337, 340, 341, 347, 348, 350, 415], "factori": [112, 179, 184, 190, 191, 223, 233], "factory_arg": 179, "factory_kw_arg": 179, "facugamband": 410, "faculti": 383, "fail": [37, 111, 120, 131, 186, 309, 355, 364, 375, 379, 380, 388, 409, 410, 422], "fail_on_unknown": 300, "failobj": 52, "failur": [283, 402, 417], "fairi": 373, "fairli": 373, "faith": [206, 419], "fake": [57, 107, 417], "fake_": 417, "fakecorpu": 417, "fall": [46, 133, 148, 223, 333, 405], "fallback": [133, 325], "fals": [13, 16, 25, 29, 32, 33, 34, 36, 37, 38, 43, 47, 48, 49, 50, 51, 57, 59, 61, 65, 69, 72, 75, 82, 87, 90, 91, 98, 100, 105, 107, 108, 111, 113, 116, 117, 118, 120, 121, 124, 125, 126, 128, 129, 130, 131, 135, 142, 147, 148, 151, 162, 163, 164, 165, 169, 174, 175, 176, 177, 179, 181, 182, 183, 184, 186, 187, 188, 191, 192, 196, 197, 203, 205, 209, 214, 216, 217, 218, 219, 221, 223, 224, 225, 229, 231, 232, 233, 266, 270, 283, 284, 300, 301, 302, 304, 305, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 324, 339, 341, 342, 343, 345, 346, 347, 348, 350, 352, 353, 355, 356, 357, 363, 365, 369, 372, 373, 375, 378, 380, 383, 388, 389, 392, 394, 396, 398, 403, 404, 409, 410, 412, 413, 417], "falta": 399, "famili": [16, 125], "familiarizamo": 399, "famou": [57, 63, 324, 373], "fanci": 413, "fang": 96, "fantast": 405, "far": [14, 97, 135, 173, 174, 216, 340, 341, 348, 373], "faro": 399, "farsi": 373, "fartura": 399, "fass": [331, 332, 333], "fast": [57, 67, 68, 72, 203, 216, 229, 233, 357, 373, 409], "faster": [57, 72, 357, 388, 399], "fat": 156, "father": [371, 373, 392], "father_of": 403, "fault": 405, "fauna": 399, "favor": 410, "favorit": [318, 410], "favorite_count": 353, "favour": 340, "fazer": 399, "fazia": 399, "fb": 410, "fcbond": 424, "fcfg": [111, 177, 188, 194, 366, 375, 377, 378, 379, 387, 398, 404], "fcl": 399, "fcp1": 398, "fcp2": 398, "fd": [399, 400, 411], "fd1": [399, 400], "fd2": 400, "fdict_class": [120, 378], "fdist": 179, "fdopen": 411, "fe": [55, 57, 72, 381], "fe2": [57, 72], "fe_rel": [55, 57, 72], "feat": [57, 91, 373], "feat0": [375, 379, 398], "feat0cfg": 379, "feat1": 379, "feat_val": 33, "featdict": [0, 120, 380], "featgram": 361, "featlist": [0, 120, 380], "featstruct": [0, 183, 341, 348, 361, 378, 379, 407, 413, 424], "featstructnontermin": [167, 378], "featstructread": [0, 111, 120, 378, 380], "featur": [0, 32, 34, 35, 36, 37, 38, 41, 43, 44, 52, 55, 57, 68, 75, 91, 107, 111, 135, 136, 145, 161, 167, 170, 176, 177, 183, 194, 196, 197, 204, 214, 215, 217, 221, 223, 227, 229, 232, 233, 306, 314, 322, 369, 373, 375, 378, 404, 405, 413, 417, 422], "feature1": 233, "feature2": 233, "feature_detector": [213, 223], "feature_extract": 38, "feature_func": [43, 196, 217], "feature_nam": 32, "feature_probdist": 35, "feature_select": 38, "feature_valu": 32, "feature_vector": 33, "featurebottomupchartpars": [0, 159, 167, 398], "featurebottomupleftcornerchartpars": [0, 159, 167, 398], "featurebottomuppredictcombinerul": [0, 159, 165, 167], "featurebottomuppredictrul": [0, 159, 167], "featurechart": [0, 159, 165, 379, 398], "featurechartpars": [0, 159, 165, 167, 398], "featurecompletefundamentalrul": [0, 159, 165], "featurecompleterrul": [0, 159, 165], "featuredict": 30, "featureearleychartpars": [0, 159, 165, 377, 379, 398], "featureemptypredictrul": [0, 159, 165, 167], "featurefundamentalrul": [0, 159, 167], "featuregrammar": [177, 194, 379, 398, 404], "featureincrementalbottomupchartpars": [0, 159, 165, 398], "featureincrementalbottomupleftcornerchartpars": [0, 159, 165, 398], "featureincrementalchart": [0, 159, 165], "featureincrementalchartpars": [0, 159, 165, 398], "featureincrementaltopdownchartpars": [0, 159, 165, 398], "featurelist": 233, "featurepredictorrul": [0, 159, 165], "features_count": 34, "featurescannerrul": [0, 159, 165], "featureset": [0, 31, 32, 33, 34, 35, 36, 38, 41, 43, 44, 52, 196, 214, 223, 369], "featuresettagg": 214, "featuresettaggeri": [0, 213, 214, 223], "featuresingleedgefundamentalrul": [0, 159, 165, 167], "featuretopdownchartpars": [0, 159, 167, 398], "featuretopdowninitrul": [0, 159, 167], "featuretopdownpredictrul": [0, 159, 165, 167], "featuretreeedg": [0, 159, 167], "featurevalueset": 380, "featurevaluetupl": 380, "feb": 91, "februari": [367, 422], "fechado": 399, "fechei": 399, "fecoreset": [57, 72], "fed": 30, "feder": 300, "fee": [67, 379], "feeblemind": 417, "feed": [135, 137, 373, 379, 417], "feedback": 422, "feel": [319, 373, 414, 420], "feet": 319, "fei": 399, "feid": [57, 72], "feil1v": 205, "feito": 399, "fei\u00e7\u00e3o": 399, "fell": 376, "fellbaum": [57, 105], "fellegi": 148, "fellow": [300, 373], "fem": [379, 407], "fem2masc": [199, 201, 202], "femal": [36, 100, 367, 373], "feminin": [201, 202], "feng": 96, "ferel": [57, 72], "ferret": 373, "fertil": [331, 332, 333, 334], "fertility_of_i": [322, 334], "fertility_t": [331, 332, 333], "fetch": [352, 354, 355, 370], "fetter": 417, "few": [52, 204, 209, 215, 318, 373, 380, 399], "fewer": [33, 50, 223, 341, 348, 355, 373, 418], "ffourth": 411, "ffreq_empir": 33, "fg": [117, 373], "fi": [57, 106, 314, 399], "fi2": 205, "fiction": [373, 400], "fid": [33, 373], "fido": [180, 191, 375, 377, 404], "field": [0, 25, 55, 57, 72, 78, 85, 97, 100, 101, 170, 182, 197, 317, 321, 323, 353, 354, 366, 373, 422], "field_ord": 321, "fieldwork": 422, "fiendish": 300, "fievelk": 424, "fig": [170, 337], "fight": 357, "figur": [373, 383], "file": [0, 10, 34, 39, 41, 42, 44, 52, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 113, 119, 125, 128, 131, 148, 161, 164, 169, 176, 177, 180, 191, 196, 197, 198, 217, 219, 222, 224, 229, 231, 232, 233, 235, 270, 285, 309, 311, 321, 341, 348, 353, 354, 355, 356, 357, 360, 364, 367, 373, 374, 377, 379, 383, 388, 399, 401, 404, 407, 411, 417, 422], "file_id": [57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 82, 84, 85, 93, 98, 105, 107, 108, 109], "file_nam": [131, 356], "file_path": 79, "file_s": [0, 111], "fileid": [30, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 363, 367, 373, 398, 399, 400, 401, 402], "fileid_or_classid": [57, 105], "filenam": [0, 55, 57, 72, 73, 75, 80, 92, 111, 113, 119, 131, 164, 169, 182, 187, 194, 196, 197, 208, 229, 321, 366, 373, 375], "filepo": [104, 373], "files": 113, "files_are_ident": 270, "filespac": 360, "filestr": [0, 357], "filesystempathpoint": [0, 111, 373, 375], "filetyp": [57, 100], "filho": 399, "fill": [118, 119, 135, 158, 178, 229, 233, 333, 373, 402], "filler": [192, 402], "fillmor": 381, "film": [163, 405], "filter": [53, 57, 72, 75, 79, 84, 121, 125, 135, 142, 165, 192, 233, 283, 300, 301, 317, 341, 348, 351, 355, 373, 377, 398, 399, 402, 417], "filteredbottomuppredictcombinerul": [0, 159, 162], "filteredcompletefundamentalrul": [0, 159, 165], "filteredsingleedgefundamentalrul": [0, 159, 162, 165], "fin": [380, 398, 399, 417], "final": [25, 28, 57, 66, 111, 144, 162, 165, 178, 191, 209, 216, 309, 318, 321, 324, 333, 354, 371, 373, 409, 411, 422], "final_period_1": [302, 318], "final_period_2": [302, 318], "finalerror": 216, "finalize_train": [302, 309], "financi": [176, 419], "financiada": 399, "find": [0, 1, 6, 26, 28, 33, 34, 35, 42, 46, 48, 49, 50, 51, 53, 57, 59, 62, 63, 79, 80, 86, 107, 108, 111, 119, 121, 124, 125, 129, 131, 135, 148, 156, 157, 169, 170, 173, 174, 176, 178, 179, 184, 188, 191, 192, 194, 197, 216, 218, 223, 232, 283, 300, 301, 302, 309, 310, 311, 312, 320, 324, 327, 331, 334, 338, 340, 341, 348, 367, 371, 373, 377, 383, 388, 399, 401, 405, 409, 413], "find_abbrev_typ": [302, 309], "find_all_src_phras": [322, 340], "find_answ": [123, 129, 403], "find_best_fit": [0, 179], "find_binari": [0, 131], "find_binary_it": [0, 131], "find_concord": [0, 300], "find_corpus_fileid": [55, 57, 104], "find_diment": [114, 119], "find_dir": [0, 131], "find_fil": [0, 131], "find_file_it": [0, 131], "find_increasing_sequ": [0, 322, 339], "find_jar": [0, 131], "find_jar_it": [0, 131], "find_jars_within_path": [0, 131], "find_label_nam": [180, 187], "find_legal_onset": [302, 306], "find_malt_model": [0, 159, 169], "find_maltpars": [0, 159, 169], "find_repptoken": [302, 311], "find_vari": 120, "findal": [0, 131, 300, 304, 373, 399, 401], "finder": [53, 395], "finder_4gram": 371, "finding_dir": 131, "findtext": 373, "findtyp": [180, 191, 392], "fine": [2, 38, 144, 229, 324, 380], "finer": [57, 86], "fingerprint": [30, 42], "finish": [113, 124], "finishcollectionmessag": [0, 113], "finishdownloadmessag": [0, 113], "finishpackagemessag": [0, 113], "finishunzipmessag": [0, 113], "finit": [31, 57, 89, 218, 422], "finnish": [57, 106, 209, 373, 408], "finnishstemm": [0, 199, 209], "fire": 34, "firefox": 373, "fireman": 107, "firm": 402, "first": [7, 8, 10, 16, 23, 25, 28, 33, 34, 35, 36, 41, 44, 46, 51, 52, 53, 57, 59, 60, 61, 64, 65, 68, 69, 70, 71, 72, 75, 77, 82, 84, 85, 86, 91, 93, 98, 100, 104, 105, 107, 108, 109, 110, 111, 113, 117, 119, 120, 121, 124, 125, 127, 129, 130, 131, 135, 137, 145, 148, 157, 162, 164, 171, 173, 179, 180, 181, 182, 184, 186, 188, 190, 191, 192, 193, 194, 196, 197, 202, 204, 211, 225, 226, 231, 266, 284, 290, 300, 302, 306, 309, 310, 314, 324, 331, 332, 333, 334, 338, 339, 341, 342, 343, 357, 360, 366, 367, 373, 375, 377, 379, 380, 382, 383, 384, 388, 391, 392, 398, 402, 404, 409, 411, 412, 413, 414, 422], "first_cas": [302, 309], "first_low": [302, 309], "first_po": 317, "first_upp": [302, 309], "fish": 400, "fisher": [143, 146, 394], "fisher_exact": [0, 143, 146], "fit": [38, 135, 136, 158, 373, 381, 391], "fit_transform": 383, "fitando": 399, "fito": 399, "fitzenreit": 148, "fitzrureit": 148, "five": [146, 204, 417], "fix": [31, 33, 39, 64, 162, 216, 223, 232, 300, 317, 333, 334, 373, 375, 400, 409, 413, 422, 424], "fixm": 216, "fixtur": [251, 260, 271, 299], "flag": [57, 58, 63, 66, 68, 71, 87, 90, 91, 99, 107, 113, 116, 120, 179, 218, 225, 283, 302, 304, 309, 310, 339, 341, 342, 348, 352, 355, 360, 418, 422], "flat": [108, 135, 139, 317, 321, 341, 348, 373], "flatten": [0, 57, 69, 135, 139, 341, 348, 357, 368], "flaw": 20, "fledg": [120, 380], "fleiss": 144, "fleuri": 399, "flexibl": [2, 121, 135, 137, 162, 304, 365], "fli": 408, "flight": [396, 398, 419], "flinch": 373, "flip": [198, 218, 332], "flippin": 198, "flist_class": 120, "float": [29, 33, 38, 47, 48, 50, 51, 57, 65, 77, 107, 131, 135, 136, 138, 145, 147, 150, 151, 166, 179, 196, 198, 214, 216, 218, 229, 306, 323, 324, 325, 328, 329, 330, 334, 335, 336, 339, 340], "flood": 372, "floresta": 422, "florida": 148, "floss": 373, "flush": 162, "fly": [213, 226, 396, 417], "flying_ostrich": 396, "fmla": 404, "fmt": [25, 27, 232], "fn": [35, 57, 72, 120, 381], "fn1_sent": [57, 72], "fn_docid": [57, 72], "fn_fid": [57, 72], "fn_fid_or_fnam": [57, 72], "fn_fname": [57, 72], "fn_luid": [57, 72], "fname": [33, 35, 44, 411], "fnof": 192, "fnreport": [57, 72], "fntbl": 215, "fntbl37": [0, 213, 215], "fo": 372, "focu": [114, 117, 119, 373, 388], "fog": 373, "foi": 399, "fol": [111, 125, 180, 182, 184, 366, 375, 377, 388, 392], "foldemo": [0, 180, 186], "folder": [57, 65, 267, 360, 374], "folg": 387, "folgar": 399, "folgen": 387, "folgst": 387, "folgt": 387, "folha": 399, "follow": [7, 8, 14, 25, 28, 30, 33, 36, 38, 52, 53, 57, 59, 61, 64, 65, 69, 70, 71, 72, 73, 75, 79, 82, 84, 85, 86, 88, 92, 93, 98, 100, 102, 104, 105, 107, 108, 109, 111, 113, 115, 117, 119, 120, 121, 131, 135, 139, 144, 146, 148, 154, 162, 163, 170, 171, 173, 174, 177, 179, 181, 182, 186, 188, 191, 194, 206, 209, 213, 218, 220, 223, 226, 233, 284, 300, 302, 309, 310, 312, 313, 314, 319, 324, 325, 329, 330, 331, 332, 333, 339, 341, 343, 344, 347, 348, 350, 354, 355, 360, 366, 369, 372, 373, 374, 375, 377, 379, 380, 381, 383, 388, 392, 394, 395, 399, 401, 402, 409, 410, 412, 413, 417, 420, 422], "followers_count": 353, "followtoscreen_demo": [0, 351, 354], "folmodel": [0, 180, 186], "fom": 164, "font": [25, 57, 103, 117, 119, 341, 345, 398], "foo": [61, 72, 80, 93, 108, 131, 308, 314, 368, 375, 380, 391, 400, 404, 410, 422], "foobar": [177, 314, 400], "food": [57, 72, 131, 381, 389], "foolswood": 265, "fora": 399, "foral": [119, 184, 191, 192], "forbid": 373, "forbidden": 413, "forc": [113, 217, 324, 325, 328, 335, 337, 339, 373, 402, 419], "foreground": 117, "foreign": [216, 220, 300, 338, 409], "foreman": 402, "forese": [57, 72, 381], "forev": [324, 325, 328, 335, 337, 339, 417], "forg": 373, "forget": 364, "form": [15, 24, 28, 29, 33, 43, 52, 57, 72, 89, 92, 93, 94, 99, 104, 107, 111, 113, 119, 121, 124, 125, 128, 156, 162, 164, 167, 171, 172, 176, 178, 181, 182, 183, 184, 188, 191, 192, 193, 201, 202, 203, 204, 209, 211, 216, 218, 223, 225, 226, 229, 231, 233, 286, 307, 310, 312, 320, 323, 341, 343, 347, 348, 350, 366, 373, 377, 380, 381, 384, 386, 388, 399, 401, 402, 409, 412, 415, 417, 422], "forma": 399, "formal": [179, 218, 232], "format": [0, 28, 29, 30, 33, 34, 44, 55, 57, 59, 65, 67, 77, 79, 87, 88, 92, 100, 107, 111, 121, 124, 126, 128, 131, 135, 164, 169, 177, 182, 186, 216, 223, 227, 229, 232, 311, 320, 321, 323, 327, 338, 340, 341, 345, 352, 353, 354, 355, 356, 366, 367, 373, 375, 376, 377, 383, 388, 392, 397, 405, 417, 422], "format_debug_decis": [0, 302, 309], "formatt": 44, "former": [163, 372, 398], "formul": 165, "formula": [111, 124, 125, 148, 180, 186, 187, 188, 190, 191, 324, 339, 375, 378, 388], "formula_tre": [180, 188], "fortaleci\u00f3": 373, "forth": [339, 373], "fortun": 135, "forum": [205, 402, 420], "forw": 327, "forward": [14, 15, 57, 61, 68, 80, 93, 108, 111, 164, 218, 327, 373, 380], "forwardcombin": [0, 12, 15], "forwardonli": [0, 12, 15], "forwardsconstraint": [0, 12, 15], "forwardtconstraint": [0, 12, 15], "forwardtyperaiserul": [0, 12, 14], "fought": 410, "found": [34, 39, 46, 48, 49, 57, 62, 65, 79, 104, 106, 107, 108, 110, 111, 120, 124, 125, 126, 131, 162, 171, 173, 174, 178, 179, 204, 206, 209, 211, 216, 222, 229, 300, 306, 309, 324, 333, 334, 341, 343, 360, 373, 374, 377, 378, 388, 392, 396, 400, 401, 408, 409, 410, 412, 413, 417], "foundat": [127, 402, 422], "four": [28, 119, 146, 204, 300, 312, 367, 377, 378, 392, 417], "fourgram": [324, 371, 394], "fourgram_measur": 371, "fourth": [367, 411, 422], "fox": [163, 175, 221], "foxu": 117, "fp": 353, "fpa": 373, "fpath1": 380, "fpath2": 380, "fprefix": 355, "fpt": 373, "fr": [57, 106, 374, 384, 412], "fr64": [57, 60], "fra": [374, 417], "frac12": 192, "frac14": 192, "frac34": 192, "fraction": [0, 150, 229, 322, 324], "fractional_pres": [0, 143, 148], "fragment": [188, 225, 335, 373], "frame": [55, 57, 72, 105, 117, 119, 373], "frame2": [57, 72], "frame_by_id": [55, 57, 72], "frame_by_nam": [55, 57, 72], "frame_config": [114, 117], "frame_id": [57, 107, 417], "frame_ids_and_nam": [55, 57, 72], "frame_rel": [55, 57, 72], "frame_relation_typ": [55, 57, 72], "frame_str": [57, 107, 417], "framefil": [57, 81, 89], "frameid": [57, 72], "framenam": [57, 72], "framenet": [55, 57, 105, 361, 422], "framenet2": [57, 72], "framenetcorpusread": [55, 57, 72], "frameneterror": [55, 57, 72], "framerel": [57, 72, 381], "framerelationtyp": [57, 72], "frames_by_lemma": [55, 57, 72, 381], "frameset": [57, 81, 89, 401], "framework": [33, 111, 182, 366, 422], "franc": [182, 383, 417], "franci": 424, "frank": 417, "franz": 324, "fraser": 203, "frasl": 192, "frauenfeld": 306, "fraze": 422, "freaki": 417, "free": [0, 111, 115, 121, 123, 127, 129, 180, 184, 186, 191, 219, 373, 375, 378, 420, 422], "freedom": 402, "freez": [0, 120, 341, 348, 373, 380, 398], "frel": [57, 72], "french": [57, 106, 209, 318, 332, 373, 408], "frenchstemm": [0, 199, 209], "frente_a": 373, "freq": [0, 179, 371], "freq_threshold": [302, 309], "freqdist": [0, 42, 53, 57, 70, 179, 218, 300, 371, 373, 374, 394, 399, 422], "frequenc": [33, 36, 42, 53, 57, 107, 135, 137, 142, 146, 147, 179, 196, 217, 218, 225, 300, 306, 309, 324, 371, 399, 400, 422], "frequent": [20, 135, 142, 147, 179, 197, 213, 223, 300, 309, 399, 424], "fresh": 120, "fri": [57, 72, 133, 381], "frick": 198, "frickin": 198, "fridai": [223, 410], "friend": [163, 175], "friendli": [135, 137, 355], "friends_count": 353, "frig": 198, "friggin": 198, "fring": [7, 173], "frisian": 133, "from": [7, 8, 14, 16, 22, 24, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 43, 44, 46, 47, 48, 49, 51, 52, 53, 55, 57, 58, 59, 60, 61, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 102, 104, 105, 106, 107, 108, 111, 113, 117, 118, 119, 120, 121, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 142, 144, 145, 146, 147, 148, 149, 150, 152, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 194, 196, 197, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 231, 232, 233, 281, 283, 284, 285, 289, 290, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 345, 347, 348, 349, 350, 353, 354, 355, 356, 357, 358, 360, 362, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422], "from_product": [159, 162, 167, 171], "from_train": [30, 44], "from_tt": [57, 84], "from_uid": [57, 84], "from_unified_model_dir": [159, 161], "from_word": [0, 53, 371], "fromkei": 380, "fromlist": [0, 341, 348], "fromstr": [0, 12, 14, 16, 25, 28, 111, 120, 121, 131, 170, 180, 184, 186, 190, 191, 301, 322, 323, 341, 345, 348, 364, 365, 375, 376, 378, 379, 380, 382, 384, 386, 388, 392, 396, 398, 403, 404, 407, 412, 413, 414, 415], "fromxml": [0, 113], "front": 373, "frontier": [7, 159, 173, 402], "frozen": [0, 120, 206, 380], "frozenset": 323, "frt": [57, 72], "frump": 417, "fry": [133, 381], "fr\u00e1ncfort": 373, "fs0": 379, "fs1": [379, 380, 407], "fs1_name": 380, "fs2": [379, 380, 407], "fs2_name": 380, "fs3": [379, 380], "fs4": 380, "fs5": 380, "fs_class": [120, 380], "fscore": 325, "fsnlp": 53, "fstruct": [120, 190, 380, 384], "fstruct1": 120, "fstruct2": 120, "fstruct_read": [111, 378], "fstructur": [0, 180, 189, 384], "ft_sent": [55, 57, 72], "ftp": [67, 375], "ftype": 44, "fuck": 198, "fuel": 46, "fueron": 364, "fugir": 399, "ful": 306, "fulfil": [232, 301, 373], "full": [28, 34, 57, 61, 72, 75, 102, 106, 107, 112, 120, 131, 133, 135, 137, 262, 340, 353, 354, 355, 373, 380, 381, 383, 399, 422], "full_text": [57, 72], "fuller": 381, "fulli": [14, 132, 162, 164, 170, 198, 326, 379], "fullsignatur": 112, "fulltextannot": [57, 72], "fulton": [55, 57, 223, 360, 373, 410], "fun": 373, "func": [33, 78, 112, 117, 119, 203, 354, 357], "funccolor": [341, 345], "function": [0, 13, 15, 17, 25, 28, 29, 30, 33, 34, 35, 39, 43, 47, 50, 51, 52, 53, 58, 62, 65, 66, 71, 72, 76, 78, 79, 80, 81, 86, 87, 89, 99, 100, 104, 107, 108, 111, 112, 113, 117, 118, 119, 120, 121, 128, 131, 133, 135, 136, 138, 141, 144, 145, 146, 148, 169, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 191, 194, 196, 197, 201, 202, 205, 209, 211, 217, 218, 220, 223, 225, 229, 233, 284, 300, 301, 304, 308, 310, 312, 313, 320, 324, 325, 326, 327, 328, 333, 334, 335, 337, 338, 339, 341, 342, 347, 348, 350, 353, 354, 355, 356, 357, 358, 359, 360, 365, 366, 371, 372, 373, 375, 377, 379, 380, 381, 383, 388, 392, 398, 399, 402, 413, 417, 421, 422], "functionalcategori": [0, 12, 13], "functionbackedmaxentfeatureencod": [0, 30, 33], "functionvariableexpress": [0, 180, 184, 191], "functool": [112, 380], "functor": 15, "fund": [419, 422], "fundament": [167, 171, 379, 420], "fundamentalrul": [0, 159, 162, 167], "fundo": 399, "funky_punct_1": [302, 318, 410], "funky_punct_2": [302, 318, 410], "funnel": 373, "funni": [57, 63, 373, 405], "fur": 410, "furiou": 300, "further": [28, 134, 170, 172, 182, 186, 206, 225, 302, 306, 309, 324, 339, 366, 372, 373, 383, 409, 410, 422], "furthermor": [28, 324], "futur": [55, 57, 72, 89, 124, 167, 201, 202, 340, 355, 373, 413, 419], "future_hav": 373, "future_scor": [322, 340], "future_score_t": 340, "fv": 384, "fval": [33, 34, 35], "fval1": 120, "fval2": 120, "fvmh0": [100, 373], "fx": 373, "fx8": 363, "fy": 133, "f\u00falgido": 399, "f\u0aaf": [], "g": [2, 7, 8, 16, 23, 25, 28, 36, 38, 57, 59, 62, 65, 67, 69, 72, 75, 80, 87, 89, 91, 106, 107, 110, 111, 113, 117, 118, 119, 120, 121, 124, 144, 145, 147, 148, 151, 156, 164, 169, 185, 186, 196, 197, 198, 213, 214, 222, 223, 300, 302, 305, 308, 309, 310, 312, 319, 324, 339, 341, 348, 352, 353, 354, 355, 357, 360, 366, 367, 373, 376, 378, 379, 380, 381, 384, 386, 388, 392, 394, 395, 399, 400, 404, 409, 410, 413, 422], "g0": 404, "g1": [180, 384, 404], "g12345": 384, "g134": 384, "g14": 384, "g2": [180, 384, 388, 404], "g21": 404, "g25": 384, "g3": [57, 91, 186, 373, 384, 404], "g4": [186, 384], "g5": 384, "g_graph": 170, "ga2": 205, "gaac": [0, 46], "gaacluster": [0, 46, 49], "gaan": 414, "gag": 411, "gai": 373, "gai3i": 205, "gain": [225, 347, 350], "gaisha": 308, "gale": [179, 326], "gale_church": [0, 322], "galileo": 97, "galopava": 399, "gambl": 419, "game": [36, 412, 419], "gamma": [135, 138, 162, 167, 179, 192, 218, 335, 391, 400], "ganapathibhotla": [68, 90], "gang": 422, "gao": [96, 324, 328], "gap": [57, 58, 61, 63, 66, 68, 71, 87, 90, 91, 99, 310, 317, 328, 410], "garbag": [104, 218], "garner": 179, "garrett": [422, 424], "gascon": [57, 60], "gasp": 417, "gasta": 399, "gat": 399, "gate": 357, "gather": [70, 306, 309, 357, 410], "gaussian": [33, 46, 48], "gaussian_prior_sigma": 33, "gave": 324, "gawron": 422, "gaze": 372, "gb": 383, "gb2312": [57, 103], "gdfa": [0, 290, 322], "gdmt": 397, "gdnt": 397, "ge": [192, 203, 411], "gee": 67, "geht": 338, "gelo": 399, "gem": [24, 405], "gender": [57, 100, 373, 380, 398], "gener": [0, 13, 14, 18, 23, 25, 26, 28, 33, 34, 35, 39, 41, 44, 50, 52, 104, 107, 108, 112, 116, 120, 124, 128, 129, 131, 135, 136, 137, 142, 144, 146, 150, 151, 155, 159, 160, 161, 162, 165, 167, 169, 170, 171, 173, 174, 177, 178, 179, 182, 186, 187, 191, 192, 214, 217, 218, 223, 227, 229, 231, 233, 300, 302, 306, 308, 309, 310, 311, 313, 318, 323, 328, 331, 332, 333, 334, 339, 341, 347, 348, 350, 352, 355, 357, 361, 366, 368, 369, 371, 373, 374, 375, 377, 379, 380, 385, 386, 388, 399, 408, 409, 417, 418, 422], "generate_chomski": [0, 153, 155], "generate_malt_command": [159, 169], "generate_repp_command": [302, 311], "genericcorenlppars": [0, 159, 163], "genericstanfordpars": [0, 159, 175], "genesereth": 127, "genesi": [109, 371, 373, 417], "genesis_": 417, "genesis_dir": 373, "genr": [373, 422], "gensim": 361, "gensim_fixt": [234, 383], "genu": [399, 417], "genuin": 417, "genu\u00edna": 399, "geographi": [182, 366], "geoloc": 353, "geometr": [324, 337], "georg": [328, 337, 373], "georgetown": 424, "geraldin": 148, "gerefa": 109, "german": [57, 106, 133, 203, 209, 306, 318, 379, 387, 408, 410, 422], "germani": [57, 72, 383, 424], "germanstemm": [0, 199, 209], "germantest1": 387, "germantest2": 387, "germantest3": 387, "germantestsuit": 387, "gerund": [57, 89, 216, 223, 409], "get": [0, 38, 42, 57, 72, 75, 92, 100, 107, 114, 117, 119, 120, 131, 133, 135, 137, 142, 145, 149, 176, 191, 201, 202, 206, 216, 225, 229, 323, 324, 354, 355, 357, 373, 375, 380, 381, 383, 384, 388, 389, 391, 399, 400, 404, 405, 409, 410, 413, 417, 422], "get_a_job": [57, 72, 381], "get_all_symbol": [180, 181, 184, 190, 191], "get_booleanexpression_factori": [180, 184, 190, 191], "get_by_address": [159, 164], "get_cycle_path": [159, 164], "get_domain": [0, 123, 127], "get_glue_dict": [180, 187], "get_glueformula_factori": [180, 187], "get_glueformulas_from_semtype_entri": [180, 187], "get_header_field_list": [0, 351, 353], "get_label": [180, 187], "get_languag": [55, 57, 85], "get_macrolanguag": [55, 57, 85], "get_meaning_formula": [180, 187], "get_model_build": [123, 124], "get_neighborhood": [227, 233], "get_next_token_vari": [180, 181, 191], "get_param": [302, 309], "get_path": [55, 57, 80], "get_pos_tagg": [180, 187], "get_prov": [123, 124], "get_quantifiedexpression_factori": [180, 191], "get_read": [180, 187, 384], "get_ref": [180, 184, 378], "get_segm_id": [57, 80], "get_semtyp": [180, 187], "get_sent": [57, 80], "get_sent_beg": [57, 80], "get_sent_end": [57, 80], "get_unified_model_paramet": 161, "get_vers": [55, 57, 107, 417], "get_words_from_dictionari": [0, 143, 149], "getchildren": [0, 131], "getinfo": [0, 112], "getiter": [0, 131], "getop": [180, 184, 191], "getquantifi": [180, 191], "gettempdir": 176, "gf": [57, 72, 381], "gfl": [187, 384], "gfl_to_compil": [180, 187, 384], "gg1": 205, "gh": [113, 360, 410], "ghd": [0, 143, 151], "ght": 372, "gi": [33, 57, 60, 369], "gid": [92, 373], "gilbert": 198, "gile": 22, "gim": [305, 319], "gio": 399, "girl": [125, 180, 377, 378, 379, 385, 396, 404, 410], "girlfriend": 418, "gisencod": [0, 30, 33], "gist": 72, "github": [72, 209, 234, 257, 265, 281, 290, 308, 318, 320, 325, 345, 349, 357, 359, 364, 372, 383, 391, 410, 417, 421, 422], "githubusercont": [111, 113, 360, 375], "give": [28, 35, 46, 49, 57, 72, 75, 77, 86, 88, 100, 107, 111, 113, 124, 135, 137, 163, 177, 181, 191, 198, 218, 229, 231, 270, 318, 324, 341, 348, 354, 364, 365, 368, 371, 373, 375, 377, 378, 379, 380, 381, 388, 392, 409, 412, 413, 417, 418, 422], "given": [2, 10, 14, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41, 43, 44, 46, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 63, 65, 66, 68, 69, 70, 72, 78, 79, 80, 81, 82, 83, 86, 87, 89, 90, 91, 93, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 113, 117, 118, 119, 120, 121, 124, 125, 129, 131, 134, 135, 136, 137, 138, 142, 144, 146, 147, 148, 149, 150, 152, 162, 164, 165, 167, 171, 172, 173, 174, 178, 179, 182, 184, 188, 190, 191, 192, 196, 204, 211, 213, 214, 215, 218, 223, 224, 225, 226, 229, 230, 231, 232, 233, 266, 283, 300, 301, 309, 312, 314, 320, 323, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335, 339, 340, 341, 342, 345, 352, 354, 355, 357, 366, 371, 372, 373, 375, 377, 379, 381, 384, 388, 394, 397, 398, 399, 402, 411, 413, 417, 418, 419], "giz": 208, "giza": [323, 333], "gl": [169, 399], "gleu": [328, 422], "gleu_scor": [0, 322], "glg": 417, "glint": [57, 72], "glob": 388, "global": [57, 92, 107, 134, 197, 354, 357, 417], "glue": [0, 180, 190], "glue_dict": 189, "gluedict": [0, 180, 187, 384], "glueformula": [0, 180, 187, 190, 384], "glueformulafactori": 190, "gluesemant": 361, "gluesemantics_malt": 361, "gluesemantics_malt_fixt": [234, 385], "gl\u00f3ria": 399, "gmt": 373, "gnd": [379, 407], "gni3": 205, "go": [57, 72, 163, 373, 380, 401, 421, 422], "goal": [70, 123, 124, 126, 127, 128, 129, 130, 341, 344, 388, 396], "goal_node_index": 164, "goalkeep": 36, "gobbl": 373, "god": [300, 341, 348, 373], "godwin": 402, "goe": [131, 400], "gold": [25, 26, 29, 43, 52, 89, 92, 196, 203, 214, 215, 336, 373, 401, 412], "gold_chunked_text": 368, "gold_data": [214, 216, 409], "gold_relation_list": [57, 65], "gold_sent": [166, 176, 217], "goldberg": 422, "goldstein": 144, "golf": [170, 376, 402], "gon": [305, 319], "gondola": 417, "gone": 377, "goo": 169, "good": [24, 43, 46, 57, 62, 163, 179, 217, 221, 225, 300, 302, 305, 306, 308, 309, 310, 313, 314, 315, 318, 319, 320, 331, 332, 333, 340, 373, 400, 405, 407, 409, 410, 414, 417, 420], "goodeater1": 389, "goodeater2": 389, "goodeater3": 389, "goodeater4": 389, "goodman": [136, 138, 140], "googl": [220, 328, 383, 417, 422], "googlecod": 422, "googlenew": 383, "gooo": 410, "gorg": 373, "gorki": 402, "goslin": 306, "gospel": 109, "got": [305, 319, 380, 413], "gothenburg": 424, "gouw": 328, "gov": [73, 148], "govern": [300, 373, 387, 400], "governar": 399, "governo": 399, "governor": [163, 371, 402], "gp": 411, "gr": 384, "gra": 399, "grabar": 410, "graber": [136, 422], "gradabl": 68, "gradient": 324, "gradual": 333, "graem": 422, "grai": 371, "grail": 373, "grain": [2, 57, 81, 89, 373, 401], "gram": [42, 57, 70, 179, 223, 259, 324, 325, 328, 337, 357, 374], "gramfil": [125, 377, 404], "grammar": [0, 2, 7, 8, 12, 13, 14, 16, 20, 28, 96, 111, 113, 115, 123, 125, 159, 160, 162, 165, 167, 168, 170, 171, 172, 173, 174, 177, 178, 183, 188, 194, 321, 347, 350, 360, 361, 366, 373, 375, 377, 378, 380, 384, 388, 404, 407, 422], "grammar_filenam": 188, "grammar_url": 177, "grammartestsuit": 361, "grammat": [170, 177, 199, 387], "grand": [55, 57, 135, 137, 223, 360, 373, 399, 410], "grandmoth": [57, 72], "grandpar": [61, 80, 93, 108, 347, 350], "grang": 6, "grant": 422, "granular": [57, 86], "graph": [57, 107, 119, 164, 169, 170, 172, 176, 179, 187, 218, 345, 349, 357, 417, 422], "grapher": 119, "graphic": [2, 3, 7, 8, 57, 107, 113, 118, 119, 341, 348, 422], "graphviz": [57, 107, 164, 357], "grate": 422, "gra\u00e7a": 399, "great": [38, 134, 155, 300, 367, 405, 409, 410, 422], "greater": [52, 57, 107, 117, 119, 135, 142, 148, 178, 179, 217, 304, 341, 348, 410], "greatest": [117, 179, 341, 345], "greatli": [198, 422], "greec": [182, 366], "greedi": 221, "greedili": 218, "greek": [57, 103, 106, 133], "green": [7, 67, 341, 345, 371], "greenland": 395, "greet": 373, "greg": [328, 422], "gregori": 109, "grei": [163, 175], "grenzpo": 203, "grenzpost": 203, "grenzposten": 203, "grid": [57, 69, 114, 117, 119, 158, 341, 345], "grito": 399, "groom": 373, "ground": [129, 218, 328, 417], "group": [25, 26, 28, 46, 49, 51, 57, 59, 72, 84, 86, 96, 105, 113, 118, 124, 149, 192, 221, 308, 332, 339, 341, 348, 367, 373, 381, 399, 401, 402, 409, 410, 422], "group_by_para": [57, 64, 66, 86, 99], "group_by_s": [57, 58, 64, 66, 71, 74, 86, 99], "groupbi": 400, "grow": 373, "grow_diag_final_and": [0, 322, 327], "gro\u00df": [329, 330, 331, 332, 333], "grsampson": 179, "grzegorz": 145, "gscl": 203, "gt": [192, 320, 400], "guarante": [26, 131, 162, 165, 174, 305, 324, 325, 328, 333, 334, 335, 337, 339, 373, 417], "guardar": 399, "guerrilla": 402, "guess": [25, 27, 29, 33, 57, 72, 221, 223, 356, 411], "guess_encod": [0, 357], "guess_languag": [30, 42], "guess_path": [0, 351, 356], "gui": [18, 373, 422], "guid": [182, 324, 325, 328, 335, 337, 339, 420, 421], "guidebook": [324, 325, 328, 335, 337], "guidelin": 96, "gujarati": [57, 103], "gulp": [57, 90, 373], "gumt": 397, "gust": 373, "gutenberg": [22, 30, 300, 372, 373], "gv": 384, "gwmt": 397, "gz": [175, 224, 375, 383], "gzip": [111, 197, 353, 355], "gzip_compress": [197, 353, 355], "gzipfil": 111, "gzipfilesystempathpoint": [0, 111], "g\u00eanesi": 399, "g\u0e12\u1305v": [], "h": [7, 8, 10, 57, 92, 100, 106, 109, 201, 202, 216, 218, 308, 373, 376, 378, 380, 384, 392, 394, 395, 399, 400, 409, 410, 412, 413], "h0": 339, "h1": 339, "h2": 339, "h5": 339, "ha": [7, 8, 13, 28, 32, 33, 35, 36, 39, 43, 52, 57, 59, 62, 66, 72, 92, 104, 107, 108, 111, 113, 117, 118, 119, 120, 121, 125, 131, 134, 135, 136, 142, 145, 148, 159, 162, 170, 171, 173, 176, 178, 179, 180, 182, 188, 197, 206, 213, 215, 216, 218, 225, 233, 257, 285, 301, 305, 307, 309, 314, 318, 324, 328, 332, 333, 334, 335, 337, 338, 340, 341, 343, 345, 347, 348, 350, 352, 353, 355, 357, 360, 362, 365, 366, 372, 373, 375, 377, 379, 380, 381, 382, 388, 393, 399, 402, 405, 409, 410, 411, 412, 413, 415, 417, 420, 422], "haar": 414, "habitava": 399, "hack": [183, 392], "had": [36, 57, 68, 179, 371, 372, 373, 410, 414, 422], "hadn": 198, "hadnt": 198, "hagiwara": 422, "hail": 373, "hair": 371, "hajim": 339, "half": [148, 151, 155, 157], "hall": [170, 373], "hall_demo": [0, 159, 170], "hallow": 148, "halo": 327, "halt": 33, "halt_on_error": 113, "halv": 157, "ham": [151, 317, 329, 369, 371], "hamlet": 373, "hammer": 417, "hamza": 204, "hamzat": [201, 202], "han": 317, "hand": [8, 14, 30, 104, 119, 121, 162, 167, 171, 173, 178, 198, 215, 347, 350, 373, 379, 417, 420], "handl": [34, 44, 104, 111, 119, 125, 131, 134, 135, 144, 167, 180, 181, 183, 184, 190, 191, 197, 223, 233, 283, 285, 304, 313, 321, 351, 352, 355, 364, 373, 391, 392, 405, 410, 417, 422], "handle_cond": [180, 184], "handle_condit": [180, 181], "handle_dr": [180, 181, 184], "handle_elt": [57, 61, 79, 80, 93, 108], "handle_head": [57, 61], "handle_lambda": [180, 191], "handle_neg": [180, 191, 197], "handle_open": [180, 191], "handle_prop": [180, 184], "handle_qu": [180, 191], "handle_queri": [57, 80], "handle_ref": [180, 184], "handle_s": [57, 61, 93], "handle_vari": [180, 191], "handle_word": [57, 61, 93], "handler": [79, 80, 108, 120, 186, 355], "handsom": 405, "hang": 410, "hangul_jamo": [302, 320], "hangul_syl": [302, 320], "hank": 53, "hapax": [0, 179], "happen": [57, 63, 232, 373, 417], "happi": [95, 197, 406], "happy0": 95, "happyyi": 410, "har": 235, "harbin": 366, "hard": [94, 311, 373, 410], "hard1": 373, "hard_delimit": 326, "hardcopi": 422, "hardi": 422, "hardin": 148, "hardli": 198, "hardrock": [57, 107, 211, 417], "harmon": [15, 147, 150, 214], "harr": 192, "harri": 373, "harsh": 324, "has_kei": [0, 120, 380], "has_prior": [180, 191], "hash": [120, 179, 398], "hashabl": [121, 144, 223, 232], "hashtag": [57, 102, 198, 353], "hasn": 198, "hasnt": 198, "hat": [57, 72, 381], "hate": 405, "hau": [323, 329, 330, 331, 332, 333, 338, 412], "hav": 372, "have": [7, 24, 25, 28, 29, 33, 34, 36, 39, 46, 47, 49, 51, 52, 57, 63, 67, 68, 72, 83, 88, 90, 91, 93, 99, 100, 102, 104, 107, 111, 113, 117, 119, 120, 121, 129, 131, 134, 135, 136, 142, 144, 145, 147, 148, 149, 150, 156, 161, 162, 163, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 182, 184, 190, 191, 192, 196, 197, 204, 206, 209, 218, 229, 231, 233, 300, 302, 309, 314, 320, 324, 328, 331, 333, 334, 340, 341, 343, 347, 348, 350, 353, 354, 355, 359, 365, 366, 367, 372, 373, 374, 375, 377, 379, 380, 381, 388, 389, 391, 394, 396, 399, 401, 402, 408, 409, 410, 412, 413, 417, 419, 421, 422], "haven": [198, 369], "havent": 198, "hawaii": 97, "hc": 317, "he": [57, 67, 72, 206, 319, 324, 328, 338, 339, 371, 373, 377, 410], "head": [57, 69, 78, 107, 121, 164, 170, 172, 176, 332, 333, 334, 341, 344, 347, 348, 350, 373, 376, 388, 401, 402], "head_address": 164, "head_distortion_t": [332, 333], "head_id": [57, 107], "head_index": [159, 172], "head_len": [55, 57, 86], "head_vacancy_t": 333, "head_word": [57, 107], "header": [44, 55, 57, 80, 113, 162, 197, 355, 411], "header_mod": [55, 57, 80], "header_sect": [30, 44], "headlin": [73, 373], "headquart": 222, "headword": [57, 72], "health": [30, 369], "heap": 131, "heapsiz": 169, "hear": [324, 325, 328, 335, 337], "hearst": [151, 410], "heart": [192, 373], "heat": [57, 72, 381], "heathenish": 372, "heatherleaf": 424, "heating_instru": [57, 72, 381], "heaven": 373, "heavi": [57, 72, 373, 381], "heb": 417, "hebrew": [57, 103], "heed": [324, 325, 328, 335, 337, 339], "heidelberg": 140, "height": [0, 81, 89, 100, 114, 117, 119, 163, 341, 348, 401, 413], "held": [179, 419], "heldout": 179, "heldout_fdist": [0, 179], "heldoutprobdist": [0, 179, 400], "helf": 387, "hella": 198, "hellip": 192, "hello": [117, 131, 319, 373, 375, 380, 400, 410], "help": [0, 7, 8, 10, 24, 55, 57, 59, 72, 80, 107, 110, 113, 119, 131, 135, 300, 309, 319, 360, 373, 380, 399, 402, 404, 405, 409, 417, 422], "helper": [17, 43, 80, 120, 134, 136, 139, 334, 373, 398, 413], "helpfulli": 135, "helsinki": [57, 109], "helvetica": 117, "hen": [170, 172], "henc": [46, 50, 57, 72, 334, 347, 350, 377, 381, 395], "hench": 306, "heptateuch": 109, "her": [57, 72, 163, 371, 373, 381], "herbarium": 109, "herd": 373, "here": [57, 72, 100, 107, 112, 120, 131, 135, 144, 146, 148, 182, 203, 209, 221, 224, 235, 301, 329, 333, 334, 339, 340, 366, 372, 373, 377, 380, 383, 388, 389, 391, 399, 402, 404, 409, 410, 412, 417, 422], "herm": 422, "hermia": 373, "hernia": 373, "hessian": 217, "het": 402, "heurist": [174, 309, 398], "hh": [67, 373], "hi": [57, 63, 109, 170, 206, 319, 373, 376, 405, 412, 417, 422], "hiccup": 373, "hidden": [114, 117, 119, 218], "hiddenmarkovmodeltagg": [0, 213, 218], "hiddenmarkovmodeltrain": [0, 213, 218, 400], "hide": [7, 8, 67, 114, 117, 119], "hide_column": [114, 117], "hideki": 339, "hideto": 328, "hierarch": [57, 105, 118, 119, 341, 347, 348, 350], "hierarchi": [57, 65, 119, 181, 314, 353], "higbe": 148, "high": [100, 104, 113, 201, 213, 216, 229, 306, 311, 324, 354, 371, 373, 380, 409], "highe": 148, "higher": [28, 33, 135, 137, 148, 162, 165, 167, 171, 173, 174, 177, 178, 324, 334, 340, 392, 419], "highest": [33, 35, 135, 170, 216, 218, 337, 358, 409, 419], "highlevel": 335, "highli": [198, 371, 388], "highlight": [119, 341, 345, 348], "highlightthick": 117, "higve": 148, "hike": 373, "hilfst": 387, "hilft": 387, "hill": [25, 46, 50, 331, 332, 333, 334, 398], "hillclimb": [322, 333, 334], "him": [57, 63, 341, 348, 373, 410], "himmal": 372, "hindi": [74, 422], "hing": 413, "hint": 422, "hip": 399, "hirao": 339, "hire": [57, 72, 381], "histogram": 340, "histor": 145, "histori": [109, 173, 174, 223, 324, 328, 333, 339], "hit": [57, 63, 339, 373, 399, 417], "hllw": 148, "hlt": [306, 314, 337, 412], "hlt94": 88, "hmm": [0, 179, 213, 422], "hobbi": [373, 400], "hoc": [305, 319, 410], "hockenmai": 365, "hof": 402, "hoi": 373, "hold": [111, 117, 124, 167, 176, 188, 229, 232, 308, 317, 334, 373, 381, 388, 417], "holder": [113, 388], "hole": [0, 180, 422], "hole_read": [0, 180, 188], "holesemant": [0, 180, 188], "holi": 109, "holidai": 410, "holist": 91, "home": [57, 80, 111, 113, 169, 311, 356, 419, 422], "homem": 399, "homepag": [119, 125, 206, 281, 357], "homili": 109, "hon": 218, "honest": 357, "honey_bunni": 404, "honnib": 221, "honoriu": 109, "hood": [57, 67, 72, 417], "hook": [25, 184, 190, 191, 251, 260, 271, 299, 422], "hope": [57, 65, 381], "hor": [307, 410], "horizont": [118, 119, 341, 345, 347, 348, 350], "horribl": 405, "horzmarkov": [341, 347, 348, 415], "hosam": 422, "host": [22, 111, 206, 422], "hour": [57, 72, 163, 372, 381], "hous": [57, 72, 323, 329, 330, 331, 332, 333, 338, 367, 402, 412, 419], "how": [14, 24, 28, 30, 33, 57, 97, 104, 107, 113, 119, 120, 121, 135, 136, 138, 147, 157, 162, 164, 171, 178, 179, 229, 231, 300, 309, 313, 325, 329, 330, 331, 332, 333, 341, 348, 355, 358, 373, 375, 377, 379, 380, 381, 388, 399, 402, 410, 417, 421], "howev": [33, 36, 57, 72, 102, 104, 107, 113, 117, 118, 120, 121, 135, 148, 159, 167, 204, 206, 216, 225, 301, 309, 333, 373, 375, 377, 379, 380, 381, 385, 388, 399, 401, 405, 409, 417, 418], "howl": 373, "howto": [354, 373, 399, 422], "hr": 384, "href": [57, 78, 373], "hrv": 417, "hsi3": 205, "hsieh": 96, "hsiug5ct": 205, "ht": [100, 205, 219, 373], "htm": [73, 96, 109], "html": [42, 57, 61, 70, 78, 80, 94, 96, 105, 106, 107, 112, 119, 125, 151, 164, 169, 179, 182, 209, 257, 260, 341, 345, 348, 352, 353, 357, 360, 366, 373, 421, 422], "http": [0, 10, 22, 38, 42, 53, 55, 57, 61, 63, 65, 68, 70, 72, 73, 75, 78, 79, 80, 83, 85, 88, 90, 91, 94, 95, 96, 105, 106, 107, 109, 111, 112, 113, 117, 119, 125, 133, 140, 145, 148, 151, 163, 164, 169, 179, 182, 203, 206, 209, 215, 217, 220, 221, 224, 225, 234, 257, 260, 265, 281, 289, 290, 308, 311, 318, 319, 320, 324, 325, 326, 328, 335, 337, 339, 341, 345, 347, 348, 349, 350, 352, 353, 354, 355, 357, 358, 360, 362, 364, 365, 366, 367, 372, 373, 375, 383, 388, 391, 395, 399, 410, 417, 420, 421, 422], "hu": [57, 83, 90, 91, 106, 197, 422], "huang": [96, 218], "huge": [198, 340, 402], "hugh": 328, "hui": 410, "hum": 97, "human": [88, 135, 137, 209, 229, 230, 306, 328, 335, 377, 381, 399, 412, 420, 422], "humana": 399, "humanli": 320, "humbl": 408, "humor": [373, 400, 405], "hund": [379, 387, 417], "hundr": [371, 402, 417], "hung": 402, "hungarian": [57, 106, 209, 373, 408], "hungarian_magyar": [57, 103], "hungarianstemm": [0, 199, 209], "hunpo": [0, 213], "hunpostagg": [0, 213, 219], "hunt": 373, "hurt": [67, 229, 373], "husband": 373, "husk": 205, "huston": 422, "hut": 67, "hutto": 198, "hv": 384, "hvd": 410, "hyderabad": [74, 366], "hyp": [92, 107, 151, 325, 328, 337, 339, 373], "hyp1": [324, 325, 328, 339], "hyp2": [324, 325, 328, 339], "hyp_extra": [30, 37], "hyp_len": [324, 337], "hyper": [309, 417], "hypergraph": [345, 349], "hypernym": [57, 107, 357, 413, 417], "hypernym_dist": [57, 107], "hypernym_path": [57, 107, 417], "hyperparamet": 339, "hyperspher": 46, "hyphen": [57, 72, 381], "hypnoym": [57, 107, 417], "hypo": 417, "hyponym": [107, 417], "hypothes": [2, 14, 162, 165, 171, 324, 325, 328, 337, 339, 340], "hypothesi": [2, 37, 92, 146, 162, 165, 324, 325, 328, 335, 336, 337, 339, 340, 373], "hypothesis1": [324, 335, 337], "hypothesis2": [324, 335, 337], "hypothet": 151, "hz": [57, 103], "h\u00e1": 399, "i": [0, 2, 7, 8, 10, 13, 14, 15, 16, 20, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 46, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 158, 159, 160, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 229, 231, 232, 233, 235, 262, 265, 266, 270, 283, 284, 285, 297, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 345, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424], "i1": [118, 341, 348], "i1i": 205, "i2": [118, 341, 348], "i3": 384, "i4": 384, "i6": 140, "iN": [341, 348], "i_peg": 334, "ia": 399, "iacut": 192, "iad": 73, "ial": 399, "ibm": [291, 292, 293, 294, 295, 296, 329, 330, 331, 332, 333, 334, 422], "ibm1": [0, 322, 338], "ibm2": [0, 322], "ibm3": [0, 322], "ibm4": [0, 322], "ibm5": [0, 322], "ibm_model": [0, 322, 332], "ibmmodel": [0, 322, 329, 330, 331, 332, 333, 334], "ibmmodel1": [0, 322, 329, 334, 412], "ibmmodel2": [0, 322, 330, 334], "ibmmodel3": [0, 322, 331, 334], "ibmmodel4": [0, 322, 332, 333, 334], "ibmmodel5": [0, 322, 333, 334], "ic": [55, 57, 107, 197, 358, 417, 422], "icassp": 140, "iceland": [57, 106], "icfil": [57, 107], "ich": [331, 332, 333, 387, 410], "icirc": 192, "icl": 339, "icsi": [57, 72], "ictaac": 202, "icwsm": 198, "id": [0, 12, 13, 33, 57, 63, 68, 69, 72, 83, 84, 90, 91, 92, 93, 98, 100, 105, 107, 109, 113, 120, 125, 216, 232, 332, 333, 335, 337, 341, 345, 352, 353, 354, 355, 358, 367, 373, 380, 381, 392, 409, 413], "id_str": 353, "iddo": [187, 190], "idea": [43, 119, 125, 127, 136, 138, 213, 338, 381], "ideal": [136, 373], "idealab": 402, "ident": [57, 86, 107, 135, 138, 148, 152, 172, 182, 218, 366, 371, 401, 413, 417], "identif": [42, 70, 170, 422], "identifi": [13, 25, 26, 28, 32, 42, 47, 49, 51, 53, 55, 57, 59, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 75, 78, 80, 81, 82, 84, 85, 86, 87, 89, 92, 93, 94, 98, 99, 100, 105, 107, 108, 109, 111, 113, 117, 120, 164, 170, 181, 187, 192, 198, 207, 214, 301, 303, 309, 310, 313, 324, 338, 341, 345, 357, 373, 377, 380, 401, 402, 417, 420], "ideolog": 417, "idf": [0, 38, 300], "idiomat": [57, 72, 381], "idl": [18, 204, 357], "ids_f": 355, "ie": [57, 73, 82, 86, 92, 108, 129, 191, 225, 341, 347, 348, 350], "ie_er_99": 73, "ieee": 218, "ieer": [29, 55, 57, 192, 373, 402], "ieer_headlin": [0, 180, 192], "ieercorpusread": [55, 57, 73], "ieerdocu": [55, 57, 73, 373], "ieerstr2tre": [0, 25, 29], "iesha": [0, 18], "iesha_chat": [0, 18, 20], "iexcl": 192, "iff": [33, 34, 121, 123, 129, 130, 162, 167, 180, 184, 188, 191, 232], "iff_list": [180, 191], "iffexpress": [0, 180, 188, 191], "ight": 413, "ignor": [25, 28, 33, 35, 55, 57, 61, 69, 72, 74, 82, 83, 86, 91, 100, 106, 108, 111, 116, 119, 120, 135, 166, 171, 177, 191, 219, 265, 270, 283, 300, 321, 325, 329, 333, 371, 380, 411, 417], "ignore_abbrev_penalti": [302, 309], "ignore_cas": 116, "ignore_lines_startswith": [57, 106], "ignore_stopword": [209, 408], "ignore_whitespac": 325, "ignorecas": [305, 319], "ignored_word": 371, "ignorekei": [57, 72], "ignorereadmecorpusview": [55, 57, 83], "igrav": 192, "ih": 67, "ih0": 373, "ih1": 373, "ihr": 387, "ii": [33, 53, 57, 67, 72, 96, 109, 327, 338, 369, 417, 422], "iii": [53, 109, 338], "iiit": 74, "iit": 74, "iixi": 53, "ij": [218, 220], "ijcnlp": 96, "ilia": 424, "iliakur": 424, "ill": 312, "illeg": [231, 368, 378, 392, 410], "illegaltypeexcept": [0, 180, 191], "illinoi": [68, 83, 91], "illustr": [57, 72, 125, 157, 170, 373, 381, 402], "im": [338, 373], "imag": [55, 57, 78, 107, 164, 192, 357, 373], "image_impress": 373, "image_read": [57, 78], "immedi": [14, 28, 121, 131, 162], "immut": [0, 31, 32, 33, 35, 43, 120, 121, 341, 413], "immutablemultiparentedtre": [0, 341, 342], "immutableparentedtre": [0, 341, 342], "immutableprobabilisticmixin": [0, 121, 179], "immutableprobabilistictre": [0, 341, 342, 413], "immutabletre": [0, 341, 342, 413], "imp": [119, 123, 130, 180, 188, 190, 191], "imp_list": [180, 191], "impact": [134, 337], "impass\u00edvel": 399, "imper": 202, "impexpress": [0, 180, 188, 190, 191, 384], "implement": [0, 13, 14, 15, 25, 28, 33, 34, 38, 42, 43, 52, 57, 59, 72, 76, 79, 86, 107, 119, 120, 121, 124, 132, 135, 136, 138, 144, 145, 146, 148, 151, 159, 162, 165, 167, 170, 171, 172, 173, 174, 176, 179, 188, 196, 201, 202, 203, 206, 215, 218, 221, 225, 231, 302, 306, 314, 319, 324, 325, 328, 329, 330, 331, 334, 337, 339, 340, 341, 343, 352, 358, 362, 369, 379, 380, 383, 388, 389, 412, 413, 417, 422], "impli": [184, 191, 335, 378], "implic": [190, 191, 392], "implicitli": [57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 82, 84, 85, 93, 98, 105, 107, 108, 109, 119, 121, 373], "import": [25, 28, 30, 34, 36, 38, 39, 46, 52, 55, 57, 60, 63, 68, 72, 76, 80, 83, 90, 91, 95, 102, 106, 107, 119, 120, 131, 133, 134, 135, 136, 137, 142, 144, 147, 148, 163, 166, 169, 170, 172, 175, 176, 177, 179, 180, 186, 196, 202, 203, 205, 207, 208, 209, 211, 213, 214, 216, 217, 219, 221, 222, 223, 224, 225, 226, 231, 232, 233, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 319, 320, 323, 325, 336, 340, 341, 345, 348, 349, 350, 357, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422], "import_from_stdlib": [0, 131], "importantli": [314, 324], "importorskip": 394, "impos": [115, 120, 121, 373, 380], "imposing_oblig": [57, 72], "imposs": [25, 380, 413], "impound": 417, "imprensa": 399, "improb": 392, "improp": 28, "improv": [33, 112, 151, 202, 203, 204, 206, 217, 281, 302, 305, 330, 331, 332, 347, 350, 375, 399, 409, 410, 422], "imprtre": 413, "imptre": 413, "in_chunk_pattern": [25, 28], "in_demo": [0, 180, 192], "in_idl": [0, 357], "in_region_domain": 417, "in_spite_of": 307, "in_strip_pattern": [25, 28, 368], "in_topic_domain": 417, "in_usage_domain": 417, "inadvert": 400, "inaugur": [263, 373, 422], "inaugura": 373, "inc": [0, 308, 337, 420, 422], "incept": 422, "incl": 422, "includ": [25, 28, 29, 30, 33, 36, 38, 46, 50, 53, 57, 59, 61, 72, 75, 79, 80, 81, 89, 93, 99, 102, 107, 108, 109, 112, 117, 119, 120, 121, 131, 135, 137, 172, 176, 179, 191, 192, 206, 218, 300, 306, 309, 312, 324, 330, 331, 332, 333, 334, 337, 338, 340, 341, 347, 348, 350, 355, 373, 380, 381, 383, 388, 391, 399, 401, 402, 410, 412, 413, 417, 421, 422], "include_abbrev_colloc": [302, 309], "include_all_colloc": [302, 309], "include_encod": [57, 59], "include_fileid": [57, 59], "include_nt": 198, "include_rt": 355, "include_semant": [16, 365], "include_tre": 69, "inclus": [61, 80, 93, 108, 229, 231], "incom": [170, 410], "incompat": [117, 120, 422], "incompet": 417, "incomplet": [104, 162, 165, 167, 379], "inconsist": [120, 377, 380, 388, 422], "inconsistenttypehierarchyexcept": [0, 180, 191, 392], "incorpor": [25, 28, 57, 72, 182, 366, 422], "incorporar": 399, "incorporatedf": [57, 72], "incorrect": [25, 28, 29, 39, 104, 147, 216, 222, 233, 341, 343, 357, 368, 409, 413, 417], "incorrectli": 203, "incr_download": [0, 113], "increas": [46, 48, 104, 119, 131, 135, 138, 152, 162, 167, 179, 198, 204, 225, 327, 334, 339, 340, 371, 373, 388, 417], "incredibli": [198, 405], "increment": [119, 125, 131, 162, 165, 178, 179, 229, 309, 422], "incremental_stat": 229, "incrementalbottomupchartpars": [0, 159, 165, 398], "incrementalbottomupleftcornerchartpars": [0, 159, 165, 398], "incrementalchart": [0, 159, 165], "incrementalchartpars": [0, 159, 165], "incrementalleftcornerchartpars": [0, 159, 165, 398], "incrementaltopdownchartpars": [0, 159, 165, 398], "incub": 402, "ind": [392, 417], "inde": [372, 380], "indel": 145, "indent": [32, 57, 102, 105, 129, 130, 189, 341, 348, 357], "independ": [35, 57, 105, 118, 146, 150, 233, 308, 324, 332, 373, 422], "indetermin": 400, "index": [0, 14, 30, 33, 42, 47, 48, 49, 50, 51, 52, 57, 65, 69, 70, 72, 81, 89, 104, 107, 113, 114, 117, 118, 119, 120, 131, 135, 137, 146, 149, 162, 163, 164, 165, 167, 170, 171, 172, 178, 179, 181, 182, 186, 187, 191, 201, 215, 217, 223, 231, 232, 233, 283, 300, 317, 326, 329, 330, 334, 338, 339, 341, 342, 343, 348, 357, 373, 376, 379, 380, 397, 399, 412, 413], "index_count": 190, "index_sens": [55, 57, 107], "index_timeout": [0, 113], "index_to_kei": 383, "indexerror": [120, 341, 342, 348, 409, 412, 413], "india": [74, 366, 417], "indian": [55, 57, 100, 300, 373, 422], "indiancorpusread": [55, 57, 74], "indiancorpusview": [55, 57, 74], "indic": [14, 25, 28, 29, 30, 37, 44, 51, 52, 55, 57, 61, 62, 69, 75, 79, 80, 81, 89, 93, 100, 104, 108, 113, 117, 118, 119, 120, 121, 129, 131, 135, 144, 146, 150, 151, 162, 173, 181, 182, 186, 187, 188, 190, 191, 214, 218, 222, 223, 225, 230, 232, 233, 300, 304, 309, 313, 323, 329, 330, 338, 339, 341, 343, 345, 352, 366, 371, 373, 377, 380, 388, 411, 412, 422], "indirect": 373, "individu": [0, 28, 32, 52, 57, 59, 78, 102, 107, 113, 117, 144, 179, 180, 181, 186, 191, 205, 215, 218, 223, 229, 313, 324, 339, 341, 348, 360, 373, 374, 384, 388, 392, 404], "individualvariableexpress": [0, 180, 184, 186, 191, 379], "indp": 399, "induc": [121, 218, 347, 350, 398], "induce_pcfg": [0, 121, 398], "induct": 422, "industri": 420, "ineffici": 215, "inequ": 392, "inf": [125, 357, 391, 399, 414], "infam": [325, 328], "infer": [0, 57, 72, 180, 184, 188, 191, 361, 377, 378, 392, 396, 403, 422, 424], "inference_fixt": 234, "infil": [270, 353], "infin": 192, "infinit": [57, 89, 373, 382, 389, 391, 417], "infix": [201, 202], "infl": 401, "inflat": 324, "inflect": [57, 89, 401, 417], "influenc": [135, 142, 340], "info": [0, 57, 65, 72, 100, 108, 112, 113, 117, 345, 349, 381], "info_or_id": 113, "inform": [12, 13, 28, 29, 30, 33, 35, 37, 46, 55, 57, 58, 63, 64, 66, 68, 71, 72, 73, 74, 75, 81, 84, 86, 88, 89, 90, 94, 96, 99, 100, 104, 107, 113, 119, 120, 125, 127, 134, 135, 146, 151, 156, 159, 161, 162, 165, 167, 171, 173, 176, 177, 179, 192, 201, 202, 204, 209, 213, 214, 215, 218, 223, 225, 302, 332, 334, 340, 341, 347, 348, 350, 355, 357, 359, 367, 369, 371, 373, 374, 379, 380, 381, 388, 394, 399, 401, 417, 422], "informatik": 140, "information_cont": [55, 57, 107, 417, 422], "informchk": [125, 377], "infrequ": 371, "ing": [57, 107, 207, 216, 223, 364, 372, 402, 409], "inher": 379, "inherit": [57, 72, 87, 131, 135, 138, 146, 179, 373, 381], "inhibit": 417, "ini": [57, 72], "init_func": 54, "init_vocab": [322, 334], "initi": [7, 8, 13, 14, 23, 25, 28, 46, 50, 57, 59, 62, 76, 77, 78, 83, 86, 87, 99, 104, 107, 111, 117, 119, 120, 125, 129, 131, 135, 137, 138, 144, 156, 159, 162, 165, 167, 170, 171, 173, 174, 176, 179, 180, 190, 204, 215, 216, 217, 218, 225, 300, 306, 307, 309, 316, 324, 328, 329, 330, 331, 333, 334, 354, 355, 357, 373, 374, 388, 400, 409, 413], "initial_column": [0, 113], "initial_mean": [48, 50], "initial_tagg": [215, 216], "initial_valu": 131, "initialerror": 216, "initialis": [46, 51, 57, 102, 301], "initialize_edge_scor": [159, 170], "initialize_label": [180, 187, 190], "inner": [57, 77, 170], "innermostfunct": [0, 12, 15], "inp": 375, "input": [16, 23, 25, 27, 28, 29, 30, 34, 35, 38, 39, 41, 44, 57, 58, 59, 66, 71, 74, 75, 76, 86, 92, 94, 104, 107, 111, 112, 117, 121, 124, 125, 126, 128, 129, 130, 131, 135, 142, 161, 163, 164, 169, 170, 172, 175, 176, 177, 181, 182, 186, 191, 192, 194, 197, 198, 201, 202, 203, 211, 216, 219, 222, 223, 224, 225, 266, 284, 304, 305, 308, 311, 317, 318, 320, 321, 325, 355, 366, 368, 373, 378, 379, 388, 392, 394, 404, 410, 417, 422], "input_feat": 33, "input_fil": 176, "input_file_path": 316, "input_str": 320, "input_text": 284, "input_word": 198, "inputfilenam": [169, 311], "inquir": 373, "inquisit": 340, "inrang": [180, 191], "ins_cost": 151, "insanomania": 410, "insensit": [33, 57, 72, 203, 283, 300], "insert": [0, 52, 57, 75, 114, 117, 119, 120, 148, 151, 159, 162, 167, 171, 181, 307, 413], "insert_child": [114, 118, 119], "insert_with_backpoint": [159, 162], "insid": [57, 72, 111, 163, 171, 175, 183, 257, 304, 312, 347, 350, 380, 410, 419], "insidechartpars": [0, 159, 171, 398], "insight": [163, 409], "inspect": [131, 182, 198, 366, 377, 379, 388], "inspir": [192, 318], "inst": [373, 401], "inst_var": [159, 167], "instal": [0, 55, 110, 111, 113, 179, 181, 262, 300, 302, 353, 354, 373, 374, 407, 422], "install3": 421, "instanc": [44, 53, 55, 57, 59, 63, 69, 72, 78, 81, 85, 89, 91, 94, 120, 121, 127, 129, 132, 134, 135, 136, 142, 161, 162, 163, 169, 170, 175, 179, 184, 186, 191, 194, 196, 197, 205, 216, 218, 223, 225, 229, 231, 232, 233, 300, 301, 304, 309, 323, 324, 326, 339, 352, 367, 380, 388, 394, 401, 404, 405, 408, 410, 413, 417], "instance_hypernym": 107, "instance_hyponym": 107, "instant": [6, 399], "instanti": [57, 61, 72, 121, 135, 136, 138, 167, 184, 191, 209, 221, 304, 309, 368, 379, 417], "instantiate_edg": [159, 167], "instantiatevarschart": [0, 159, 167, 379], "instead": [25, 26, 33, 43, 52, 57, 59, 61, 63, 65, 75, 87, 111, 131, 135, 136, 138, 144, 162, 179, 206, 214, 215, 223, 225, 300, 308, 310, 313, 317, 324, 325, 328, 333, 335, 339, 341, 344, 345, 348, 349, 350, 367, 373, 375, 380, 409, 413, 414, 417, 422], "institut": [96, 109, 204, 402, 419], "instr_commun": 373, "instruct": [110, 111, 119, 234, 354, 388, 399, 421, 422], "instrument": [57, 72, 371, 381, 417], "insur": [324, 325, 328, 335, 337], "insurg": 357, "int": [14, 28, 31, 33, 48, 49, 50, 51, 57, 65, 72, 84, 91, 92, 107, 111, 117, 119, 126, 128, 131, 135, 136, 137, 142, 147, 148, 151, 156, 158, 162, 164, 165, 167, 171, 172, 173, 174, 177, 178, 179, 181, 182, 186, 187, 190, 192, 207, 214, 216, 218, 223, 225, 229, 231, 232, 233, 266, 300, 303, 305, 309, 310, 313, 314, 317, 319, 320, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 348, 352, 355, 357, 367, 373, 380, 414, 416], "intact": 205, "integ": [33, 68, 92, 104, 117, 120, 131, 144, 170, 179, 186, 197, 302, 303, 310, 313, 317, 326, 332, 333, 341, 345, 355, 357, 373, 377, 379, 380, 395], "integr": [57, 72, 422], "integratedpro": [57, 90, 373], "intellig": [68, 91, 127, 201, 405], "inten": 399, "intend": [30, 57, 65, 119, 125, 181, 182, 184, 190, 191, 234, 300, 352, 373, 375, 377, 380, 399, 404, 409], "intens": [36, 198, 405], "intent": [20, 377], "intentionally_affect": 381, "intentionally_cr": [57, 72], "inter": [144, 422], "interact": [1, 25, 48, 49, 113, 118, 119, 131, 185, 300, 373, 379, 388], "intercept": 179, "interchang": 395, "interesant": 364, "interest": [57, 72, 94, 107, 156, 198, 229, 323, 324, 328, 339, 345, 349, 364, 373, 377, 379, 405, 412, 422], "interest_4": 373, "interest_5": 373, "interest_6": 373, "interfac": [10, 13, 25, 26, 30, 31, 33, 34, 39, 46, 47, 57, 70, 95, 96, 105, 107, 108, 113, 123, 124, 131, 135, 136, 142, 154, 159, 161, 162, 163, 167, 169, 170, 171, 175, 179, 181, 191, 199, 200, 213, 214, 215, 219, 220, 224, 232, 233, 280, 300, 303, 313, 315, 316, 322, 340, 352, 368, 369, 371, 373, 389, 420, 422], "interior": 119, "interj": 363, "interject": [57, 72, 381], "interleav": 373, "intermedi": 389, "interment": 395, "intern": [0, 28, 38, 39, 57, 68, 70, 72, 83, 90, 91, 104, 120, 159, 171, 191, 192, 198, 202, 309, 329, 330, 358, 361, 373, 374, 375, 381, 399], "internal_punctu": [302, 309], "international_regex": [302, 308], "international_token": [302, 308, 422], "internet": 308, "interpformat": 126, "interpol": [135, 136, 138, 140, 225, 324], "interpolatedlanguagemodel": [0, 135, 138], "interpret": [33, 121, 180, 181, 186, 360, 377, 388, 399, 404, 421, 422], "interpret_multi": [180, 181], "interpret_multi_s": [180, 181], "interpret_s": [0, 180, 181, 194, 404], "interrog": [182, 366], "intersect": [119, 150, 227, 231, 233, 327, 380, 383, 402], "interv": [144, 148, 231], "interval_dist": [0, 143, 148], "interven": [192, 341, 348, 371], "intj": [57, 72, 381], "intran": 379, "intransit": [373, 379], "intransvsg": 365, "intrins": [57, 107], "intro": [57, 72], "introduc": [28, 33, 39, 121, 182, 184, 191, 234, 317, 330, 333, 347, 350, 366, 377, 420], "introduct": [109, 148, 420], "introductori": 399, "intuit": 339, "inv": [367, 379], "invalid": [28, 131, 179, 368, 377, 389, 400, 413], "invari": 218, "inventor": [88, 206], "inventori": 392, "invers": [121, 133, 217], "inverse_dict": [0, 133], "invert": [322, 323, 357, 410, 412], "invert_dict": [0, 357, 416], "invert_graph": [0, 357], "invest": 319, "investig": [223, 367, 373, 377, 409, 410], "invoc": 124, "invok": [57, 102, 124, 209, 219, 223, 225, 305, 377], "involv": [38, 43, 46, 51, 57, 72, 148, 231, 248, 301, 373, 381, 424], "io": [373, 375, 383], "ioannidi": 357, "iob": [27, 29, 57, 69], "iob_sent": [55, 57, 69], "iob_word": [55, 57, 69], "ioerror": [111, 373], "iona": 148, "iota": [180, 184, 191, 192, 422], "iota_list": [180, 191], "iotaexpress": [0, 180, 191], "iowa": 148, "ipa": [306, 314], "ipi": [57, 75], "ipipan": [55, 57], "ipipancorpusread": [55, 57, 75], "ipipancorpusview": [55, 57, 75], "ipod": 91, "iptre": 413, "iquest": 192, "ir": [384, 399], "iraq": 163, "iraqi": 163, "iraqu": 399, "irlandes": 399, "irlandesa": 399, "iron": [57, 72, 381], "irregular": [199, 223, 410], "is_alpha": [302, 309], "is_atom": [123, 130, 180, 191], "is_backward": [12, 13], "is_binaris": [0, 121], "is_cap_diff": 198, "is_chomsky_normal_form": [0, 121], "is_cjk": [0, 302, 320], "is_complet": [12, 14, 159, 162, 165], "is_defin": [199, 209], "is_ellipsi": [302, 309], "is_eventvar": [0, 180, 191], "is_flexible_chomsky_normal_form": [0, 121], "is_forward": [12, 13], "is_funct": [12, 13], "is_funcvar": [0, 180, 191], "is_head_word": [322, 334], "is_incomplet": [12, 14, 159, 162, 165], "is_indvar": [0, 180, 191], "is_initi": [302, 309], "is_instal": [0, 113], "is_leftcorn": [0, 121], "is_lex": [0, 121], "is_nod": [180, 188], "is_non_punct": [302, 309], "is_nonempti": [0, 121], "is_nonlex": [0, 121], "is_noun": [199, 209], "is_numb": [302, 309], "is_ord": [57, 78, 373], "is_primit": [12, 13], "is_pronoun_funct": [180, 184], "is_regex": [131, 163], "is_rel": [0, 180, 186, 404], "is_stal": [0, 113], "is_tautologi": [123, 129], "is_unseen": 33, "is_var": [12, 13], "is_vari": [12, 13], "is_verb": [199, 209], "is_writ": [0, 131], "isalnum": [57, 106], "isalpha": [57, 106, 371], "isawjohn": 398, "isbndb": 422, "isfil": 375, "isin": 192, "isinst": [57, 72, 380, 404, 413, 416], "isl": 417, "islic": [398, 417], "islow": [57, 106], "isn": [57, 106, 172, 198, 213, 319, 374, 405, 409, 410, 413], "isnt": 198, "iso": [42, 57, 62, 70, 84, 103, 107, 111, 134, 192, 213, 219, 374, 399, 417], "iso2022_jp": [57, 103], "iso639": [57, 85, 133, 422], "iso639_typ": [57, 85], "iso639retir": 133, "iso63_cod": [57, 85], "iso_to_crubadan": [55, 57, 70, 374], "isolated_plac": [57, 72, 381], "isort": [0, 57, 213, 227, 322, 422], "isozaki": 339, "isra": 402, "isri": [0, 199, 422], "isristemm": [0, 199, 204], "issc": [57, 106], "isso": [57, 106], "issu": [0, 57, 72, 257, 281, 290, 308, 347, 350, 357, 373, 388, 393, 400, 410, 413, 417, 422, 424], "issubset": 323, "issubsetof": [123, 129], "issue9025": 395, "issuecom": 391, "issuperset": [227, 231], "ist": [148, 323, 329, 330, 331, 332, 333], "istanc": [57, 63], "istest": 297, "isti": 95, "isupp": [57, 106], "isvari": [180, 184, 191], "ita": 417, "ita_iwn": 417, "itali": 402, "italian": [57, 106, 209, 311, 408], "italianstemm": [0, 199, 209], "item": [0, 46, 51, 52, 55, 57, 61, 72, 78, 79, 80, 91, 93, 100, 104, 108, 109, 113, 119, 120, 121, 135, 136, 137, 140, 142, 144, 148, 151, 156, 157, 179, 180, 187, 189, 192, 197, 198, 265, 341, 342, 352, 355, 357, 371, 373, 375, 376, 379, 380, 392, 399, 400, 402, 404, 405, 408, 410, 413], "item1": 371, "item2": 371, "item3": 371, "item4": 371, "item5": 371, "itemcget": [114, 117], "itemconfig": [114, 117], "itemconfigur": [114, 117], "itemgett": [57, 72, 381], "itemid": 100, "iter": [14, 33, 36, 38, 43, 46, 49, 51, 52, 57, 100, 104, 107, 116, 120, 132, 135, 136, 137, 139, 142, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 183, 196, 217, 218, 221, 222, 232, 300, 301, 303, 305, 309, 310, 311, 312, 313, 319, 320, 321, 326, 329, 330, 331, 332, 333, 334, 335, 341, 342, 355, 357, 358, 399, 411, 417], "iterate_from": [0, 52, 57, 104, 373], "iteredg": [159, 162, 165], "itertool": [398, 400, 417], "iti": 414, "itj": 363, "itl": 73, "itman": 148, "its": [7, 8, 14, 25, 28, 30, 33, 39, 42, 52, 57, 59, 65, 68, 70, 72, 81, 84, 89, 91, 104, 107, 110, 111, 112, 113, 117, 118, 119, 120, 121, 131, 135, 136, 138, 142, 148, 157, 162, 163, 164, 167, 169, 170, 171, 172, 173, 174, 179, 182, 186, 190, 191, 192, 213, 214, 218, 223, 231, 232, 233, 309, 310, 311, 312, 313, 314, 317, 321, 323, 328, 329, 330, 331, 332, 333, 334, 338, 339, 340, 341, 343, 347, 348, 350, 357, 373, 374, 375, 379, 380, 388, 399, 401, 402, 409, 410, 411, 413, 415, 417, 419, 422], "itself": [25, 28, 43, 52, 57, 72, 107, 108, 110, 113, 117, 120, 121, 134, 135, 136, 137, 144, 177, 317, 341, 342, 347, 348, 350, 373, 380, 389, 402, 409, 417], "iuml": 192, "iv": [366, 379, 384, 404], "ivan": 410, "ivdict2tab": [0, 212], "iwslt": 327, "ix": 373, "ixi": 53, "ixii": 53, "ixxi": 53, "iy1": 373, "iz_th": 394, "i\u0307\u1a29\ua151\ua095": [], "j": [42, 57, 106, 117, 125, 127, 151, 162, 165, 167, 198, 204, 205, 214, 218, 323, 326, 329, 330, 331, 332, 333, 334, 338, 365, 373, 377, 381, 395, 398, 399, 400, 409, 413], "j07": 365, "j1": 205, "j82": [182, 366], "j93": 326, "j_caesar": 373, "j_peg": [333, 334], "ja": [329, 330, 331, 332, 333], "jaccard": [143, 146, 394], "jaccard_dist": [0, 143, 148, 394], "jack": 398, "jacob": 422, "jai": 165, "jakarta": 366, "jakobsen": 422, "jal\u00e3o": 399, "jambon": 329, "jame": 109, "jan": [148, 309, 388], "jane": 373, "jane_eyr": 372, "janel": 208, "janela": 208, "januari": 422, "japan": [83, 90], "japanes": [308, 361, 422], "japanese_nihongo": [57, 103], "jar": [131, 169, 224, 316], "jaro": 148, "jaro_scor": 148, "jaro_sim": 148, "jaro_similar": [0, 143, 148], "jaro_winkler_sim": 148, "jaro_winkler_similar": [0, 143, 148], "jason": [328, 422], "java": [0, 131, 169], "java_class": 316, "java_opt": [163, 175, 224, 315, 316], "javascript": 10, "jbo": 125, "jcn": [417, 422], "jcn_similar": [55, 57, 107, 417], "jct": 367, "jd": 100, "je": 329, "jean": 422, "jeff": 328, "jefferson": 417, "jeffrei": 328, "jegar": 371, "jeh1r": 205, "jenkin": 422, "jeraldin": 148, "jeremi": 306, "jersei": 399, "jespersen": [306, 314], "jesperson": 314, "jessica": 163, "jetai": 201, "je\u00fa": 399, "jgaa": [345, 349], "jh": [67, 373], "jhu": 215, "ji": [57, 103], "ji1d": 205, "jiang": [57, 107, 417], "jiann": 96, "jindal": [57, 68], "jing": 324, "jj": [25, 28, 39, 57, 62, 147, 163, 166, 175, 176, 177, 213, 214, 216, 221, 223, 224, 301, 368, 373, 376, 394, 398, 407, 409, 410, 414, 420], "jjr": [214, 409], "jjt": 373, "jn1d": 205, "jnothman": 424, "jo1d": 205, "joakim": 176, "job": [381, 418], "jodi": [379, 404], "joel": [422, 424], "joh": 379, "johan": 181, "johan_rotti": 402, "johann": 309, "john": [117, 127, 148, 162, 163, 164, 165, 167, 187, 191, 213, 226, 339, 341, 348, 362, 377, 378, 379, 380, 385, 386, 388, 392, 393, 396, 398, 401, 403, 404, 410, 417, 419], "johnson": [148, 328], "join": [0, 55, 57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 82, 84, 85, 93, 98, 104, 105, 107, 108, 109, 111, 113, 144, 162, 166, 176, 209, 229, 232, 304, 309, 339, 341, 347, 348, 350, 366, 369, 373, 375, 376, 380, 382, 383, 399, 402, 408, 412, 417, 420], "joinchar": [341, 347, 348, 350], "joint": [30, 34, 218], "joint_feat": 33, "joke": 404, "jon": [148, 318], "jonathan": [57, 85], "jone": [148, 410], "jonsafari": [318, 410], "jordan": [136, 422], "josef": 324, "joseph": 422, "journal": [88, 148, 179, 201, 345, 349, 373, 422], "journalist": 399, "journei": 24, "joven": 399, "joyster2012": 410, "jp": [57, 76, 103, 339, 422], "jpeg": 164, "jpn": 417, "jr": 410, "jrev1t": 205, "jrmy": 410, "jscore": 148, "jsim2t": 205, "json": [57, 102, 111, 132, 164, 197, 221, 353, 354, 355, 373], "json2csv": [0, 270, 351, 353], "json2csv_ent": [0, 270, 351, 353], "json2csv_preprocess": [0, 195, 197], "json_fil": 197, "json_tag": [213, 215, 221, 223, 227, 231, 232, 375], "jsondecod": 132, "jsonencod": 132, "jsonserializ": 375, "jsontag": [0, 375], "jsontaggeddecod": [0, 132, 375], "jsontaggedencod": [0, 132, 375], "ju": 314, "ju1d": 205, "judg": [314, 410], "judgement": 373, "judgment": 335, "juf1": 205, "jule": [392, 404], "juli": [148, 375, 422], "juliu": 148, "jump": [163, 175, 221, 378, 417], "june": [198, 395, 422], "junki": 20, "junsheng": [83, 90], "juntar": 399, "junto": 399, "jurafski": [136, 179], "juri": [55, 57, 223, 360, 373, 410], "jussi": 422, "just": [35, 57, 69, 72, 75, 77, 87, 91, 92, 107, 117, 121, 124, 125, 135, 182, 186, 198, 215, 226, 309, 310, 313, 320, 328, 353, 354, 360, 366, 367, 373, 377, 380, 391, 394, 399, 400, 405, 410, 412, 413, 417], "justen": 424, "justic": 300, "justif": [119, 314], "justifi": 119, "juvenil": [57, 63, 373], "juzgado_de_instrucci": 402, "juzgado_de_lo_penal_n": 402, "j\u00e1": 399, "j\u0677\u1c7c\u1654\u2d5b\u0207\u0227\ufdb0": 308, "k": [38, 46, 48, 50, 52, 57, 61, 67, 113, 120, 144, 151, 162, 167, 170, 201, 202, 204, 216, 218, 233, 265, 317, 324, 357, 367, 371, 373, 380, 392, 395, 399, 400, 402, 405, 409, 413, 417], "k1": 233, "k2": 233, "kaa": 411, "kabushiki": 308, "kahn": 306, "kaiser": 328, "kamholz": [57, 85], "kappa": [143, 144, 192], "kappa_pairwis": [143, 144], "kardinaal_van_roey_instituut": 402, "karnaim": 371, "katakana_hangul_halfwidth": [302, 320], "kath": 395, "kato": 328, "katsuhito": 339, "katz": 379, "katzen": 387, "kaufmann": 337, "kazawa": 328, "kbeval": [57, 72], "kcl": 373, "kdd": [83, 91], "ke": 314, "kecl": 339, "keep": [52, 107, 119, 120, 135, 142, 148, 170, 172, 198, 313, 319, 333, 340, 347, 350, 357, 373, 380, 405, 413, 419], "keep_token_posit": 311, "keep_whitespac": 316, "keepend": 111, "keh": 96, "kei": [0, 32, 35, 36, 52, 57, 67, 72, 73, 84, 101, 107, 111, 112, 117, 119, 120, 121, 135, 137, 142, 143, 147, 149, 152, 179, 182, 186, 187, 189, 192, 300, 307, 326, 341, 342, 353, 354, 355, 357, 366, 367, 371, 373, 380, 381, 384, 385, 391, 394, 399, 400, 401, 405, 411, 417, 422], "keith": [170, 328], "kelab": 402, "kendal": 339, "kendall_tau": [0, 322, 339], "kenya": 373, "kenyan": 373, "kept": [133, 154, 197, 233, 373], "kevin": 339, "kexw_5": 422, "keyboard": [7, 8, 117], "keyedvector": 383, "keyerror": [52, 117, 119, 120, 186, 380], "keyword": [25, 29, 55, 57, 59, 68, 86, 110, 117, 119, 124, 146, 177, 179, 321, 354, 355, 373, 375, 398], "keywords_readm": [55, 57, 68], "kharagpur": 74, "khoja": 204, "kibwana": 402, "kickback": 375, "kid": 36, "kidnap": 405, "kill": 357, "kilomet": 205, "kim": [379, 403], "kimmo": 422, "kin": 418, "kind": [14, 25, 57, 93, 135, 138, 159, 160, 162, 198, 301, 373, 402, 405, 410], "kinda": [198, 405], "kindof": 198, "king": [371, 383], "kipper": [57, 105], "kiriyenko": 402, "kirkku": 373, "kishor": 324, "kiss": [198, 309, 404], "kit": 373, "kivi": 422, "kivutha": 402, "kjv": 373, "klau": 328, "klein": [0, 323, 329, 330, 331, 332, 333, 347, 350, 420, 422, 424], "klingner": 328, "kmean": [0, 46], "kmeanscluster": [0, 46, 50], "kmike": 424, "kn": [57, 76, 400], "knbc": [55, 57, 390], "knbcorpusread": [55, 57, 76], "knead": 373, "knee": 67, "kneel": 397, "knelt": 397, "kneser": [135, 138, 140, 179], "kneser_ney_mini_exampl": 140, "knesernei": [0, 135, 140], "kneserney_bigram_model": 249, "kneserney_trigram_model": 249, "kneserneyinterpol": [0, 135, 138], "kneserneyprobdist": [0, 179, 400], "know": [127, 131, 132, 135, 209, 218, 309, 379, 388, 399, 417], "knowledg": [46, 83, 91, 96, 111, 182, 366, 373, 375, 379], "known": [0, 29, 30, 31, 33, 36, 39, 57, 59, 92, 104, 107, 113, 121, 135, 159, 160, 200, 218, 309, 347, 350, 357, 371, 373, 409, 412, 413, 417], "known_len": 52, "koehn": [327, 329, 330, 331, 332, 333, 334, 340, 412], "koehn2010": 412, "komm": 387, "kommen": 387, "kommst": 387, "kommt": 387, "kondrak": 145, "konrad": 119, "koran": 417, "korobov": [422, 424], "korpu": [57, 75], "kowloon": 366, "krasnoy": 402, "krikun": 328, "krippendorf": 422, "krippendorff": [144, 148, 265, 422], "krippendorffs_alpha": 265, "kuang": 96, "kubler": 176, "kuchen": 410, "kudo": 328, "kulyukin": 151, "kumaran": 74, "kunnen": 414, "kurenkov": 424, "kurian": 328, "kw": [112, 113, 117, 119, 186], "kwarg": [26, 29, 33, 40, 52, 57, 59, 62, 63, 72, 75, 78, 80, 83, 85, 86, 87, 90, 99, 101, 110, 111, 113, 115, 117, 118, 119, 120, 124, 131, 135, 138, 140, 144, 146, 150, 160, 163, 171, 175, 179, 185, 196, 197, 214, 218, 224, 262, 285, 321, 324, 341, 348, 350, 357], "l": [10, 33, 35, 57, 62, 67, 109, 119, 144, 148, 151, 188, 216, 217, 233, 301, 313, 326, 329, 330, 331, 332, 333, 334, 341, 348, 372, 373, 377, 378, 379, 392, 395, 400, 402, 409, 410, 411, 413], "l1": [217, 225, 373], "l123": 373, "l162": 308, "l2": [217, 225, 373], "l3": [225, 373], "l309": 320, "l926": 308, "la": [166, 204, 364, 373, 399, 410, 412, 413], "la2": 205, "lab": 33, "label": [0, 29, 30, 31, 32, 33, 34, 35, 36, 38, 41, 43, 44, 47, 51, 57, 59, 60, 69, 72, 78, 81, 86, 89, 92, 114, 117, 118, 135, 136, 138, 142, 144, 147, 148, 164, 166, 170, 178, 180, 182, 188, 192, 194, 196, 197, 218, 221, 223, 283, 301, 341, 342, 345, 347, 348, 350, 366, 369, 373, 377, 378, 383, 401, 402, 404, 405, 409, 413, 414, 415, 416, 422], "label1": [35, 148], "label2": [35, 148], "label_": 117, "label_config": [114, 117], "label_foreground": 117, "label_freq": 144, "label_indiv": [0, 180, 182], "label_probdist": 35, "labeled_featureset": [32, 35, 38], "labeled_sequ": 218, "labelled_sequ": 218, "labor": 373, "lack": [52, 120, 371, 373], "lacklust": 409, "lacnunga": 109, "lacura": 148, "lad": 109, "laddish": [57, 63, 373], "lado": 399, "lafferti": 151, "lagu": 109, "lahai": 371, "lai3": 205, "lakhdar": 209, "lamb": 371, "lambda": [25, 57, 76, 107, 119, 180, 184, 188, 191, 192, 300, 301, 340, 341, 348, 357, 365, 371, 379, 384, 400, 404, 413, 417, 422], "lambda_abstract": [180, 187, 384], "lambda_list": [180, 191], "lambdaexpress": [0, 180, 184, 191, 379], "lambdalog": 380, "lambek": 422, "lancast": [0, 199, 422], "lancasterstemm": [0, 199, 205], "land": 419, "lang": [42, 55, 57, 70, 106, 107, 192, 213, 221, 309, 314, 316, 355, 358, 367, 374, 417], "lang22": 109, "lang2q": [0, 133], "lang2str": [55, 57, 60], "lang_cod": [57, 85], "lang_dependent_regex": [302, 308], "lang_dir": 309, "lang_dist": [30, 42], "lang_freq": [55, 57, 70, 374], "lang_independent_sub": [302, 308], "lang_var": [284, 309, 410], "langcod": [0, 133], "langnam": 0, "languag": [0, 42, 46, 57, 60, 70, 74, 78, 84, 88, 96, 106, 107, 133, 136, 138, 140, 141, 142, 145, 170, 179, 182, 188, 199, 203, 206, 209, 213, 218, 300, 302, 306, 308, 309, 311, 314, 316, 318, 323, 327, 329, 330, 331, 332, 333, 334, 338, 339, 340, 341, 347, 348, 350, 355, 357, 358, 359, 366, 367, 373, 392, 399, 402, 408, 412, 417, 422, 424], "language_cod": [55, 57, 85], "language_model": 340, "language_prob": 340, "language_varieti": [55, 57, 84], "languageindepend": [0, 322, 326], "languagemodel": [0, 135, 136, 138], "langvar_uid": [57, 85], "lao": [57, 103], "laplac": [0, 135, 138, 179, 400], "laplace_bigram_model": 249, "laplaceprobdist": [0, 179, 400], "laportea": 395, "laquo": 192, "larg": [14, 25, 46, 111, 179, 218, 229, 309, 373, 375], "large_grammar": 398, "larger": [29, 39, 104, 170, 178, 179, 218, 373], "largest": [57, 105, 139, 157, 417], "larr": 192, "last": [25, 52, 104, 117, 120, 148, 217, 231, 232, 233, 312, 321, 333, 341, 342, 345, 352, 355, 365, 368, 369, 373, 374, 375, 380, 382, 388, 389, 399, 400, 401, 404, 410, 411, 412, 413, 417, 422], "last_dist": [30, 42], "last_par": 317, "last_tok_seq": 317, "lastnam": 367, "lat0117": [57, 103], "later": [28, 46, 49, 92, 134, 215, 317, 400, 411, 419], "latest": [181, 355, 422], "latex": [341, 348], "latin": [57, 60, 103, 111, 133, 192, 219, 357, 399], "latin1": [57, 58, 103], "latin2": [57, 103], "latin4": [57, 103], "latin5": [57, 103], "latn": [57, 60, 133], "latter": [92, 332, 333], "lattic": 170, "latvian": [57, 106], "lau3": 205, "launch": 10, "lavi": 335, "lavrar": 399, "law": [42, 109, 357], "lawrenc": 218, "lawyer": 402, "layer": [57, 72], "layout": [57, 100], "lazi": [43, 52, 57, 61, 65, 79, 93, 134, 135, 163, 175, 221], "lazili": [43, 52, 72, 104, 110, 139, 373, 417], "lazyconcaten": [0, 52, 72], "lazycorpusload": [0, 55, 57, 59, 76, 110], "lazyenumer": [0, 52], "lazyimport": 0, "lazyiteratorlist": [0, 52, 72], "lazyload": [0, 111, 375], "lazymap": [0, 43, 52, 72, 196], "lazymodul": [0, 134], "lazysubsequ": [0, 52, 373], "lazyzip": [0, 52], "lba3": 205, "lbai4i": 205, "lbaifi6": 205, "lbfg": 217, "lbi3": 205, "lc": [57, 84, 107, 317, 411, 417, 422], "lc1": 205, "lc_all": 357, "lcb": [305, 319], "lceil": 192, "lch": 418, "lch_similar": [55, 57, 107, 417], "lcon": [192, 402], "ldquo": 192, "le": [57, 103, 192, 328], "leacock": [57, 107, 417], "lead": [104, 170, 174, 223, 270, 324, 373, 402, 420, 424], "leader": 402, "leaf": [0, 7, 12, 14, 30, 32, 51, 52, 118, 121, 159, 162, 167, 173, 301, 341, 347, 348, 350, 413, 415], "leaf_": 118, "leaf_freez": [341, 348], "leaf_label": 51, "leaf_pattern": [341, 348, 413], "leaf_treeposit": [0, 341, 348], "leafcolor": [341, 345], "leafedg": [0, 14, 159, 162, 171], "leafinitrul": [0, 159, 162, 165, 167], "leafless": 372, "leaflet": 422, "leak": 117, "learn": [38, 40, 46, 47, 49, 51, 151, 196, 215, 216, 217, 218, 227, 229, 309, 334, 357, 369, 373, 400, 409, 421], "learner": 229, "learning_curve_output": 229, "learning_curve_tak": 229, "learnt": 215, "least": [14, 28, 33, 51, 57, 79, 104, 107, 108, 117, 121, 148, 160, 161, 162, 171, 173, 174, 178, 179, 205, 216, 232, 314, 335, 338, 373, 405, 417], "leav": [0, 7, 14, 25, 29, 32, 51, 55, 57, 61, 65, 66, 104, 118, 121, 159, 161, 162, 167, 173, 197, 199, 313, 321, 341, 345, 348, 373, 378, 388, 402, 408, 413], "lebanes": 402, "lebanon": 402, "lec": 148, "lectur": 373, "led": 218, "ledger": 417, "lee": [63, 67, 197, 364, 379, 422], "leechdom": 109, "left": [7, 8, 14, 15, 25, 28, 30, 104, 113, 117, 119, 121, 135, 147, 157, 162, 164, 167, 171, 173, 174, 176, 192, 203, 223, 229, 266, 319, 333, 341, 343, 345, 347, 348, 350, 357, 368, 372, 373, 379, 385, 398, 399, 402, 410, 413, 415], "left_arc": [159, 176], "left_children": [159, 164], "left_context_tag_pattern": 28, "left_edg": [14, 162, 167, 171], "left_pad_symbol": [135, 357], "left_sibl": [0, 341, 343, 413], "left_tag_pattern": 28, "leftarc": 176, "leftcorn": [0, 121], "leftcorner_par": [0, 121], "leftcornerchartpars": [0, 159, 162, 398], "leftmost": [7, 172], "leftward": [25, 119, 172], "leg": 417, "legaci": [194, 404], "legal": [188, 306, 357], "legal_frequency_threshold": 306, "legalcod": [57, 85], "legality_principl": [0, 302], "legalitysyllabletoken": [0, 284, 302, 306], "legitim": 357, "legomena": 179, "lehrbuch": [306, 314], "lei": 364, "leipzig": [306, 314], "leitor": 399, "lem": [305, 319], "lembr": 399, "lembra": 399, "lemburg": 134, "lemma": [55, 57, 72, 76, 79, 81, 89, 93, 105, 107, 149, 211, 373, 381, 397, 401], "lemma_count": [55, 57, 107], "lemma_from_kei": [55, 57, 107, 417], "lemma_nam": [57, 107, 417], "lemma_para": [55, 57, 79], "lemma_s": [55, 57, 79], "lemma_word": [55, 57, 79], "lemmaid": [57, 72], "lemmat": [37, 199, 211, 417], "lemmatis": 417, "len": [30, 33, 52, 57, 68, 72, 76, 91, 104, 131, 135, 142, 150, 163, 167, 170, 178, 179, 233, 317, 320, 324, 327, 337, 339, 341, 348, 357, 363, 365, 367, 369, 370, 371, 372, 373, 376, 380, 381, 382, 383, 391, 398, 399, 400, 405, 413, 417], "lend": 419, "length": [12, 14, 25, 30, 33, 48, 49, 50, 51, 52, 57, 92, 104, 107, 117, 121, 139, 147, 148, 150, 151, 159, 162, 165, 170, 171, 177, 179, 192, 204, 207, 218, 221, 223, 231, 300, 304, 306, 317, 320, 324, 326, 329, 330, 331, 332, 333, 337, 338, 340, 341, 348, 355, 357, 370, 373, 380, 388, 404, 410, 411, 413, 417], "leofric": 109, "leoni": 203, "leq": [180, 188], "lesk": [0, 358], "lesk_sens": 358, "less": [28, 33, 52, 104, 135, 137, 142, 146, 147, 152, 171, 198, 215, 223, 233, 324, 371, 373], "let": [7, 8, 25, 36, 42, 131, 132, 135, 218, 373, 377, 379, 388, 399, 417], "letter": [109, 133, 146, 148, 156, 158, 186, 203, 205, 209, 374, 417, 422], "lev": [187, 190], "levant": 399, "level": [28, 33, 57, 61, 72, 78, 80, 91, 93, 100, 107, 108, 119, 150, 162, 165, 167, 171, 173, 174, 177, 178, 198, 216, 229, 301, 302, 314, 323, 324, 325, 328, 335, 337, 341, 345, 348, 357, 360, 362, 373, 374, 381, 388, 402, 404, 413, 417, 422], "levenshtein": [148, 394, 422], "levenstein": 422, "levi": 399, "lex": [364, 365, 373, 413], "lex_filenum": [57, 107], "lex_id": [57, 107], "lex_sens": [57, 107], "lex_str": 16, "lexem": [57, 72, 381], "lexic": [0, 57, 62, 72, 85, 95, 105, 106, 107, 116, 121, 180, 317, 329, 330, 331, 332, 333, 334, 373, 379, 420], "lexicalis": 121, "lexicograph": [57, 72, 107], "lexicon": [0, 2, 12, 14, 55, 57, 67, 72, 91, 105, 182, 197, 198, 218, 307, 364, 422], "lexicon_fil": 198, "lexnam": [57, 107], "lexname_index": 107, "lexpars": 175, "lexunit": [57, 72, 381], "lfg": [0, 180], "lfilter": 317, "lfloor": 192, "lg_record": [57, 60], "lgn": 133, "lgtm": 422, "lh": [0, 12, 14, 121, 159, 162, 165, 167, 171, 178, 188, 386, 398], "lhe": 399, "li": [209, 314, 377, 422], "lib": [57, 106, 111, 113], "lib2l": 205, "libero": 112, "librari": [0, 30, 33, 38, 57, 102, 111, 131, 352, 353, 355, 420, 422], "librarian": 402, "libri": 399, "libro": 364, "licens": [0, 14, 55, 57, 59, 85, 96, 107, 112, 113, 162, 165, 167, 171, 417, 422], "lidston": [0, 135, 138, 179, 218, 391, 400], "lidstone_bigram_model": 249, "lidstone_trigram_model": 249, "lidstoneprobdist": [0, 179, 400], "life": [163, 381], "lifetim": 104, "lifo": [52, 120], "light": [120, 201, 202, 209, 281], "light_emiss": 373, "lightn": 373, "lightweight": 0, "lign256": 140, "like": [14, 23, 28, 31, 32, 43, 46, 52, 57, 62, 72, 75, 82, 86, 104, 107, 108, 111, 112, 117, 120, 121, 132, 134, 135, 156, 160, 161, 162, 163, 164, 169, 171, 173, 174, 178, 179, 182, 186, 191, 197, 223, 229, 309, 314, 324, 329, 332, 333, 334, 340, 341, 348, 353, 366, 371, 373, 376, 379, 380, 381, 388, 392, 400, 402, 405, 406, 409, 410, 417], "like_neg": 197, "likelihood": [33, 43, 46, 47, 48, 51, 53, 121, 135, 146, 150, 179, 217, 309, 323, 324, 340, 371, 394], "likelihood_ratio": [143, 146, 371, 394], "likelihood_vectorspac": [46, 48, 51], "liken": 170, "likewis": 417, "lil": 370, "lile": 424, "lillian": 63, "limit": [24, 25, 57, 102, 107, 150, 169, 197, 217, 225, 229, 308, 340, 347, 350, 352, 354, 355, 357, 373, 411, 417], "limit_by_time_demo": [0, 351, 354], "lin": [55, 57, 107, 324, 417, 422], "lin_similar": [55, 57, 107, 417], "lincoln": 417, "line": [10, 16, 18, 28, 29, 32, 44, 55, 57, 58, 60, 62, 66, 67, 69, 72, 74, 78, 81, 83, 87, 88, 89, 91, 94, 96, 99, 102, 104, 105, 106, 111, 118, 119, 123, 129, 130, 147, 162, 165, 167, 177, 179, 197, 201, 208, 217, 231, 232, 233, 300, 310, 313, 318, 319, 321, 324, 341, 345, 348, 353, 354, 355, 357, 368, 372, 373, 388, 399, 410, 411, 412, 417, 421, 422], "line_color": 118, "line_length": 155, "line_separ": [57, 106], "line_token": [0, 302, 313], "linear": [38, 169, 179, 190, 225, 373, 417], "linearlog": [0, 180, 384], "linearlogicapplicationexcept": [0, 180, 190, 384], "linearlogicpars": [0, 180, 190], "linearsvc": 38, "linebreak": 321, "linebuff": [0, 111, 373], "lines_list": 405, "linesearch": 217, "linestart": [302, 309], "linetok": 263, "linetoken": [0, 263, 302, 313], "ling": [341, 348], "linger": 373, "lingfil": 164, "linguateca": 399, "linguist": [25, 28, 68, 90, 96, 119, 144, 145, 151, 155, 170, 179, 203, 309, 329, 330, 331, 332, 333, 334, 373, 379, 420, 422], "link": [55, 57, 72, 78, 80, 107, 281, 283, 301, 326, 360, 373, 381, 417, 422], "link_read": [57, 78], "linkag": 148, "linspac": 317, "lint": 422, "linthesauruscorpusread": [55, 57, 77], "linux": 420, "linuxfest": 422, "lion": 373, "lionel": 22, "lip": 314, "lippincott": 422, "lirg": 339, "lisboa": 399, "lisp": [57, 77], "list": [0, 7, 8, 13, 14, 16, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 41, 43, 44, 47, 51, 52, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 144, 145, 147, 148, 149, 150, 151, 152, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 189, 190, 191, 192, 194, 196, 197, 198, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 284, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 345, 346, 348, 353, 354, 355, 357, 359, 360, 365, 366, 367, 368, 371, 375, 377, 378, 379, 381, 382, 383, 386, 387, 388, 390, 391, 395, 396, 397, 398, 400, 401, 402, 405, 406, 409, 410, 411, 413, 416, 417, 422, 424], "list2sym": [0, 180, 192], "list2txt": [0, 212], "list_of_list": 52, "list_of_refer": [324, 328, 337, 339], "list_read": [57, 78], "listbox": [114, 117], "listbox_": 117, "listbox_config": [114, 117], "listbox_foreground": 117, "listdir": [373, 375], "listofkeyword": [57, 68], "lit": 417, "lite": [84, 422], "liter": 131, "literatur": 33, "lithuanian_lietuviskai": [57, 103], "littl": [57, 62, 72, 92, 176, 198, 229, 307, 339, 381, 415], "liu": [57, 68, 83, 90, 91, 197, 328], "liub": [68, 83, 90, 91], "lium": 308, "live": [109, 355, 371, 373, 381], "lively_plac": [57, 72], "living_t": 413, "living_th": [57, 107, 357, 417], "ljungl\u00f6f": 424, "ll": [52, 64, 161, 305, 319, 372, 373, 375, 389, 391, 399, 405, 409, 414, 421], "ll1": 205, "lld0": 422, "lm": [0, 33, 246, 300, 361], "lmu": 203, "ln": 324, "lo": [373, 399, 402], "load": [0, 25, 52, 55, 57, 59, 60, 72, 79, 107, 110, 111, 113, 125, 134, 144, 159, 161, 162, 164, 177, 182, 192, 213, 216, 221, 238, 300, 309, 357, 366, 370, 373, 377, 379, 383, 388, 399, 400, 404, 409, 410, 413, 422], "load_ace_data": [0, 25, 27], "load_ace_fil": [0, 25, 27], "load_arg": 177, "load_arrai": [143, 144], "load_cr": [351, 356], "load_earlei": 378, "load_fol": [0, 123, 125, 377], "load_from_json": [213, 221], "load_lang": [302, 309], "load_maxent_param": [0, 30, 33], "load_param": [25, 27], "load_pars": [0, 159, 177, 366, 378, 379, 398], "load_parser_opt": 161, "load_po": [0, 213, 218], "load_punkt_param": [0, 302, 309], "load_reranker_model": 161, "load_stanford_segment": 284, "load_wiki_q": [55, 57, 60], "load_word2vec_format": 383, "loader": [72, 132], "lobo": 399, "loc": [39, 97, 221, 222, 373, 377, 401, 402, 404], "loc_": 118, "loc_attr": 118, "local": [46, 50, 57, 78, 87, 103, 104, 111, 113, 134, 192, 333, 334, 341, 348, 352, 357, 360, 373, 377, 380, 388, 417], "local_test": 234, "localhost": [10, 163, 422], "localtimezoneoffsetwithutc": [0, 351, 352], "locat": [7, 29, 57, 58, 59, 65, 69, 76, 78, 79, 81, 87, 89, 99, 102, 103, 109, 110, 111, 118, 119, 120, 131, 171, 173, 177, 191, 192, 221, 224, 300, 332, 338, 353, 360, 366, 373, 388, 401, 402, 409, 418, 422, 424], "location_of_sound_sourc": [57, 72], "lock": [25, 398, 401], "locomia": 399, "locura": 148, "lodg": 373, "log": [10, 33, 43, 57, 107, 136, 150, 179, 217, 218, 225, 309, 323, 326, 337, 340, 360, 417], "log_base2": [0, 135, 141], "log_likelihood": [0, 30, 43, 143, 150, 179, 394], "log_prob": [213, 218, 322, 323], "logarithm": [33, 135, 141, 146, 179], "logi": 179, "logic": [0, 12, 111, 124, 125, 127, 128, 131, 136, 138, 180, 181, 184, 186, 188, 190, 194, 229, 232, 301, 304, 361, 365, 375, 377, 378, 379, 380, 385, 396, 402, 403, 404, 422], "logic_pars": [111, 120, 191, 375, 377, 378], "logicalexpressionexcept": [0, 180, 191, 378, 392], "logicpars": [0, 111, 180, 184, 190, 191, 375, 392], "logist": 38, "logprob": [0, 179], "logscor": [135, 136], "logsumexp2": [0, 213, 218], "logx": 179, "lol": 405, "london": [222, 417], "londr": [399, 417], "long": [24, 52, 57, 105, 208, 209, 311, 329, 355, 357, 373, 388, 389, 399, 410, 412, 414, 416, 417, 419], "longer": [57, 104, 107, 119, 154, 171, 219, 328, 338, 340, 341, 345, 373, 375, 413, 417, 422], "longest": [57, 107, 121, 306, 334, 417], "longest_target_sentence_length": [0, 322, 334], "longestchartpars": [0, 159, 171, 398], "longid": [55, 57, 105, 373], "longitudin": 419, "longman": 415, "look": [28, 38, 52, 57, 65, 72, 81, 89, 111, 132, 135, 138, 142, 223, 229, 231, 300, 304, 333, 334, 340, 368, 371, 372, 373, 377, 379, 380, 388, 399, 402, 412, 417], "lookahead": 191, "lookback": 191, "lookup": [0, 57, 77, 107, 133, 135, 142, 180, 187, 248, 332, 333, 355, 417], "lookup_by_userid_demo": [0, 351, 354], "lookup_uniqu": [180, 187], "lookuperror": [34, 111, 131, 388], "loop": [28, 338, 373, 399, 417], "loos": [147, 182, 373, 415], "loper": [0, 420, 422, 424], "lore": [373, 400], "lose": [347, 350], "loss": [341, 347, 348, 350], "lost": [36, 422], "lot": [52, 57, 72, 307, 309, 377, 409, 412], "lote": 399, "love": [163, 164, 180, 197, 362, 388, 392, 393, 398, 404, 405, 419], "low": [133, 215, 229, 371, 380, 409, 422], "lowast": 192, "lower": [36, 46, 49, 57, 107, 135, 138, 163, 179, 216, 221, 300, 324, 333, 334, 335, 340, 355, 371, 373, 399], "lower_date_limit": [352, 355], "lowercas": [57, 67, 191, 194, 203, 206, 281, 308, 309, 404, 410], "lowest": [35, 107, 171, 306, 340, 341, 348, 417], "lowest_common_hypernym": [57, 107, 417, 418], "loz": 192, "lp": 306, "lpq": 392, "lrb": [163, 175, 305, 319, 409], "lrec": [57, 85], "lrec2014": [57, 85], "lrec_skipgram": 357, "lrm": 192, "lsaquo": 192, "lsb": [305, 319], "lsquo": 192, "lst": [52, 192, 308], "lstrip": [302, 318], "lt": [192, 320, 373, 422], "ltext": 33, "lu": [55, 57, 72, 381], "lu2": 205, "lu256": [57, 72], "lu_bas": [55, 57, 72], "lu_ids_and_nam": [55, 57, 72], "lucid": 422, "lucorpu": [57, 72], "luf3": 205, "lufi4i": 205, "luid": [57, 72], "lukasz": 328, "luminos": 327, "lunam": [57, 72], "lunamepattern": [57, 72], "lunch": 383, "lv": [57, 84, 106], "lvdmaaten": 383, "lwidth": 14, "lx": [57, 101, 411], "ly": [216, 223, 409], "lynch": 163, "lynx": 422, "lysand": 373, "l\u00e1": 399, "m": [7, 22, 42, 46, 48, 57, 67, 79, 85, 92, 100, 113, 148, 151, 163, 175, 180, 186, 192, 206, 209, 214, 231, 232, 281, 283, 301, 305, 308, 325, 326, 327, 329, 330, 331, 332, 333, 341, 345, 360, 366, 367, 378, 379, 384, 388, 392, 395, 399, 400, 401, 402, 404, 409, 410, 417, 421, 424], "m0": 404, "m1": 404, "m2": 404, "m3": 404, "ma": [100, 207, 399], "mac": [360, 399, 420], "mac_morpho": [57, 99, 399], "macduff": 328, "mace": [0, 123, 125, 128, 388], "mace4": [125, 126, 377, 396, 422], "macecommand": [0, 123, 126, 128, 388], "macedonian": 373, "macherei": 328, "machin": [38, 40, 46, 57, 106, 151, 196, 218, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 337, 339, 340, 358, 360, 373, 381, 393, 412, 417, 421], "macintosh": 422, "macintyr": 305, "macintyrecontract": [0, 302, 305], "macmorphi": 422, "macmorphocorpusread": [55, 57, 99], "macn001": 399, "macn002": 399, "macn003": 399, "macr": 192, "macro": [283, 301, 324, 325, 328, 339], "macwhinnei": 367, "made": [15, 28, 52, 57, 63, 72, 87, 91, 92, 102, 113, 117, 120, 131, 163, 197, 204, 209, 309, 319, 333, 338, 373, 381, 410, 413], "madnani": 422, "madra": 366, "mag": 387, "magahi": [57, 103], "magistr": 300, "magst": 387, "mai": [13, 15, 18, 25, 28, 31, 34, 38, 44, 46, 50, 52, 53, 57, 72, 81, 83, 87, 89, 90, 91, 99, 104, 107, 108, 111, 113, 116, 117, 119, 120, 121, 124, 131, 146, 160, 161, 162, 171, 179, 191, 198, 203, 209, 218, 223, 225, 229, 231, 232, 233, 300, 302, 309, 312, 324, 331, 334, 341, 343, 354, 357, 371, 373, 377, 378, 380, 381, 385, 388, 392, 399, 412, 413, 418, 422], "mail": [359, 424], "mailto": 134, "main": [0, 7, 8, 57, 60, 72, 86, 91, 117, 119, 131, 135, 165, 180, 182, 204, 337, 353, 373, 388, 422], "main_field": 353, "mainentri": [57, 72], "mainli": [57, 63, 120, 313, 353, 373, 375], "mainloop": [0, 113, 114, 115, 118, 119, 180, 185, 357], "maintain": [7, 8, 13, 52, 104, 111, 117, 120, 128, 162, 171, 174, 206, 225, 306, 311, 341, 342, 343, 373, 375, 413, 424], "maja": 325, "major": [46, 306, 314, 409], "majorli": 198, "make": [28, 29, 32, 35, 44, 52, 57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 78, 80, 81, 82, 84, 85, 89, 93, 98, 100, 105, 107, 108, 109, 111, 118, 119, 120, 124, 126, 127, 128, 131, 135, 136, 137, 144, 148, 159, 173, 174, 182, 190, 191, 216, 223, 233, 300, 302, 309, 328, 337, 340, 354, 355, 357, 366, 368, 371, 373, 377, 379, 380, 381, 388, 399, 405, 409, 410, 413, 415, 422], "make_applicationexpress": [180, 184, 191], "make_booleanexpress": [180, 184, 190, 191], "make_equalityexpress": [180, 184, 191], "make_lambdaexpress": [180, 184, 187, 191], "make_leaf": 118, "make_lex": [0, 180, 182], "make_lex_dict": [195, 198], "make_mptre": 413, "make_negatedexpress": [180, 184, 191], "make_nod": 118, "make_nois": [57, 72], "make_ptre": 413, "make_quanifiedexpress": [180, 191], "make_testcorpu": 373, "make_tre": [159, 163], "make_valu": [0, 180, 182, 366], "make_variableexpress": [180, 184, 187, 190, 191], "makeel": [0, 131], "mal": 134, "male": [36, 100, 373, 417], "mallet": 422, "malt": [0, 159, 164, 385], "malt_demo": [0, 159, 164], "malt_model": 169, "malt_pars": 169, "malt_regex_tagg": [0, 159, 169], "maltpars": [0, 159, 169, 377, 385], "maltxml": 164, "mammal": [57, 107, 357, 413, 417], "man": [53, 57, 107, 146, 170, 174, 183, 300, 347, 350, 371, 376, 378, 382, 383, 386, 388, 392, 394, 396, 398, 402, 403, 404, 417], "man_x": 378, "manag": [114, 118, 119, 163, 219, 373, 377, 402, 421, 422, 424], "manchest": [68, 90], "maneuv": [57, 90, 373, 419], "mang": 329, "mangl": 48, "mani": [38, 43, 52, 57, 63, 67, 72, 107, 111, 117, 119, 120, 125, 135, 136, 157, 171, 178, 179, 204, 206, 215, 229, 231, 301, 309, 329, 330, 331, 332, 333, 347, 350, 360, 371, 373, 380, 381, 399, 409, 410, 417, 422], "manifold": 383, "manipul": [101, 321, 383, 422], "manner": [46, 162, 181, 355, 377, 381, 388, 404, 410], "manner_speak": 373, "manter": 399, "manual": [7, 8, 44, 57, 65, 72, 104, 109, 161, 223, 233, 283, 301, 320, 371, 381, 388], "map": [0, 16, 23, 30, 32, 33, 36, 38, 43, 51, 52, 57, 59, 65, 72, 79, 86, 92, 100, 104, 105, 107, 111, 119, 120, 121, 125, 129, 133, 135, 142, 148, 162, 167, 179, 180, 181, 182, 186, 188, 191, 194, 213, 214, 218, 223, 300, 301, 309, 323, 332, 333, 335, 366, 373, 375, 377, 380, 394, 412, 422], "map_tag": [0, 213, 220], "map_to_mani": [55, 57, 107], "map_to_on": [55, 57, 107], "map_wn": [55, 57, 107], "mapping_msd_univers": [57, 79], "mar": 135, "mar_tin": 410, "marathi": [57, 74, 103, 422], "marc": 134, "march": [73, 367, 422], "marek": 422, "margaret": [109, 422], "margin": [119, 121, 146, 147, 198, 329, 330, 341, 348, 371], "marhta": 148, "mari": [57, 72, 109, 127, 163, 164, 191, 226, 341, 345, 362, 378, 385, 388, 392, 393, 396, 403, 404, 414, 419], "mark": [29, 67, 79, 104, 107, 114, 119, 120, 131, 132, 135, 142, 151, 197, 225, 262, 300, 307, 309, 312, 317, 333, 341, 348, 357, 368, 380, 402, 410, 422], "mark_alls_fresh": [123, 130], "mark_neg": [0, 195, 197, 405], "mark_neqs_fresh": [123, 130], "markdown": [55, 57, 422], "markdownblock": [55, 57, 78, 373], "markdowncorpusread": [55, 57, 78], "markdownsect": [55, 57, 78, 373], "marker": [28, 57, 75, 225, 321, 357], "market": 176, "markonli": [114, 119], "markov": [218, 225, 341, 347, 348, 350, 415], "markovtre": 415, "marm05": 399, "marri": [373, 375, 377, 419], "martha": 148, "martin": [179, 206, 209, 281], "martin_extens": [199, 206], "martinez": 148, "martyrologi": 109, "marvel": [109, 373], "masato": 422, "masc": 379, "masculin": [201, 202], "masi": [144, 148], "masi_dist": [0, 143, 148, 394], "masiu": 410, "mask": [135, 136, 138], "masquerad": 373, "mass": [179, 207, 233], "massa": 399, "massei": 148, "massi": 148, "master": [100, 117, 119, 155, 209, 265, 308, 318, 320, 410], "mat": [324, 325, 328, 368, 393], "match": [7, 16, 18, 23, 25, 28, 32, 57, 59, 61, 62, 64, 65, 69, 70, 71, 72, 75, 79, 80, 82, 84, 85, 86, 93, 98, 104, 105, 107, 108, 109, 113, 120, 121, 129, 131, 144, 148, 159, 173, 174, 180, 191, 198, 207, 223, 283, 300, 301, 310, 312, 320, 324, 328, 335, 338, 341, 348, 357, 372, 373, 379, 380, 381, 392, 399, 402, 409, 412, 419], "match_phone_numb": [284, 304], "matchbracket": [0, 12, 16], "mateo": 402, "materi": [23, 25, 28, 37, 310, 399], "mathemat": [329, 330, 331, 332, 333, 334, 400, 422], "matild": [57, 72, 381], "matplotlib": [116, 179, 229, 238, 383], "matric": [33, 38, 46, 48], "matrix": [38, 46, 48, 147, 214, 217, 218, 379, 409, 422], "matter": [265, 329, 373], "matthew": [148, 221], "matur": 300, "mau": 399, "max": [0, 30, 35, 57, 84, 148, 179, 198, 328, 380, 382, 399], "max_count": 383, "max_depth": [57, 107, 417], "max_dist": 144, "max_fn_exampl": 29, "max_fp_exampl": 29, "max_id": 355, "max_it": [33, 196, 369], "max_iter": [217, 218], "max_l": 148, "max_len": [0, 121, 135, 325, 328, 357, 391], "max_linesearch": 217, "max_model": 126, "max_phrase_length": 338, "max_proof": 388, "max_rul": [216, 229, 409], "max_sentence_s": 39, "max_tp_exampl": 29, "max_v": 333, "maxdepth": [57, 107, 357, 416], "maxent": [0, 30, 34, 38, 170, 369], "maxent_ne_chunk": [0, 25, 27], "maxent_pos_tagg": [0, 30, 33], "maxentclassifi": [0, 30, 33, 34, 170, 196, 369], "maxentdecod": [0, 212], "maxentencod": [0, 212], "maxentfeatureencodingi": [0, 30, 33, 34], "maxim": [33, 168, 205, 306, 328, 334, 338], "maxima": 334, "maximis": [46, 48, 218], "maximize_alignment_prob": [322, 330], "maximize_distortion_prob": [322, 331, 332], "maximize_fertility_prob": [322, 334], "maximize_lexical_translation_prob": [322, 334], "maximize_null_generation_prob": [322, 334], "maximize_vacancy_prob": [322, 333], "maximum": [25, 28, 29, 33, 39, 46, 48, 50, 57, 88, 107, 111, 126, 131, 135, 158, 168, 170, 171, 177, 179, 205, 217, 218, 225, 229, 300, 324, 325, 328, 333, 334, 340, 341, 345, 348, 355, 357, 369, 373, 388, 417, 422], "maxlen": 179, "maxreprs": [57, 72], "maxwidth": [341, 345, 414], "mayb": [10, 24, 191], "mayor": 410, "ma\u00f1ana": 373, "mb": 388, "mccune": 388, "mcdonal": 176, "mcdonald": [170, 220], "mcglashan": 402, "mcintyr": 319, "mcmillan": 136, "mco": 169, "md": [100, 113, 163, 166, 214, 373, 376, 409], "md5": 113, "md5_hexdigest": [0, 113], "mdash": 192, "mdit": 373, "me": [24, 67, 163, 302, 305, 310, 313, 315, 319, 320, 371, 373, 398, 399, 407, 410], "mean": [24, 28, 46, 48, 50, 55, 57, 72, 84, 91, 107, 121, 124, 131, 134, 135, 147, 150, 151, 164, 179, 181, 187, 191, 214, 218, 232, 306, 314, 324, 328, 334, 337, 355, 373, 381, 388, 405, 417], "meander": 373, "meaning": [152, 394], "meaning_q": [55, 57, 84], "meant": [205, 334, 368], "measur": [28, 29, 42, 50, 53, 146, 147, 148, 150, 166, 192, 196, 197, 203, 214, 215, 328, 399, 405, 409, 417, 418, 422], "meat": 217, "mecklenburg": 133, "med": 148, "media": [0, 198, 353, 420, 422], "median": 373, "medic": [57, 72], "medical_profession": [57, 72], "medical_specialti": [57, 72], "medicina": 109, "medit": 24, "medium": 140, "meet": [172, 373, 408], "megabyt": 131, "megam": [0, 30, 33, 43, 369, 422], "mehl": 410, "meio": 399, "melbourn": 424, "mellon": 67, "melt": 197, "melvil": [300, 372], "melvin": 328, "mem": 399, "member": [29, 33, 34, 41, 57, 105, 135, 179, 182, 186, 192, 366, 373, 401, 402, 417], "member_holonym": [107, 417], "member_meronym": 107, "membership": [46, 48, 49, 50, 135, 142, 404], "membro": 399, "memoiz": 112, "memori": [38, 43, 52, 104, 117, 135, 192, 217, 225, 229, 233, 309, 323, 357, 373, 399, 413], "mem\u00f3ria": 399, "men": [57, 107], "meno": 399, "mental": 410, "mention": [120, 192, 373, 380, 388, 402, 417], "mentor": 422, "menu": [119, 360], "menubutton": 119, "mercado": 373, "mercer": [329, 330, 331, 332, 333, 334], "mere": 15, "merg": [0, 25, 28, 46, 49, 51, 119, 153, 157, 181, 307, 368, 373, 378, 380, 395], "merged_synset": [55, 57, 107], "merger": [57, 72], "mergerul": [0, 25, 28, 368], "mesma": 399, "mesmo": 399, "mesol": 395, "messag": [10, 111, 113, 128, 131, 154, 191, 217, 355, 368, 380, 388, 402, 422], "mesur": 151, "met": [205, 327, 414], "metadata": [57, 75, 78, 100, 182, 366, 373], "metadata_read": [57, 78], "meteor": [335, 361, 422], "meteor_scor": [0, 322], "method": [13, 25, 26, 28, 29, 33, 34, 39, 52, 57, 59, 61, 62, 64, 65, 69, 70, 71, 72, 75, 76, 79, 80, 82, 83, 84, 85, 86, 87, 93, 98, 104, 105, 107, 108, 109, 111, 112, 117, 119, 120, 124, 125, 126, 128, 131, 132, 135, 136, 137, 138, 142, 143, 146, 148, 149, 157, 161, 162, 170, 171, 172, 173, 174, 176, 179, 181, 184, 186, 190, 191, 196, 197, 203, 205, 217, 218, 219, 222, 223, 225, 229, 231, 233, 251, 260, 271, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 304, 305, 309, 310, 311, 313, 317, 321, 324, 329, 330, 332, 334, 335, 340, 341, 343, 347, 348, 350, 352, 355, 356, 366, 368, 375, 377, 378, 379, 389, 395, 399, 400, 401, 404, 409, 410, 414, 417, 418, 422], "method0": [322, 324], "method1": [322, 324], "method2": [322, 324], "method3": [322, 324], "method4": [322, 324, 362], "method5": [322, 324], "method6": [322, 324], "method7": [322, 324], "methodologi": [148, 306], "metric": [0, 29, 49, 57, 107, 196, 265, 289, 298, 308, 322, 324, 328, 335, 361, 371, 397, 412, 417, 422, 424], "metz": 109, "meu": 399, "mi": 198, "mi_lik": [143, 146, 394], "mia": [375, 377, 392, 404], "mich": 387, "michael": [127, 148, 338, 358, 405], "michel": [57, 72, 112, 148, 381], "michelesimionato": 112, "micro": [192, 324, 339, 410], "microblog": 373, "microchip": 88, "microsoft": 74, "mid": 373, "middl": [2, 57, 72, 104, 119, 176, 306, 371, 373, 381], "middot": 192, "midland": 100, "midsumm": 373, "midwai": [162, 174], "might": [30, 33, 110, 111, 162, 163, 167, 177, 323, 333, 334, 364, 372, 377, 380, 383, 402, 421], "mightn": 198, "mightnt": 198, "mihalcea": 412, "mihalcea2003": 412, "mike": [328, 402], "mikhail": [422, 424], "mikheev": 309, "mikolov": 383, "mil": 413, "milajev": 424, "mileston": 422, "milh": 399, "militari": [324, 325, 328, 335, 337, 339], "milk": 413, "miller": [57, 105], "million": [57, 72, 109, 381, 399], "milstein": 373, "mim": 399, "mimic": 107, "mimic_wrap": [55, 57, 72], "min": [42, 148, 207, 216, 337, 380, 409], "min_acc": [216, 229], "min_colloc_freq": [302, 309], "min_depth": [57, 107], "min_freq": [196, 405], "min_len": [0, 121, 325, 328, 357], "min_ll": 33, "min_lldelta": 33, "min_prob": [322, 334], "min_scor": [216, 229], "min_score_factor": [322, 333], "min_siz": [0, 52, 373], "min_stem_length": 223, "mind": [24, 120, 347, 350, 377, 380], "mine": [68, 83, 90, 91, 95, 373], "minfreq": 217, "ming": 96, "minha": 399, "minim": [25, 120, 148, 156, 179, 309, 317, 337, 338, 341, 345, 352, 417], "minimalset": [0, 153], "minimum": [52, 63, 107, 148, 156, 196, 207, 217, 229, 309, 325, 328, 355, 357, 371, 417, 422], "minist": [375, 399], "ministro": [364, 399], "minnesota": 94, "minor": [204, 209, 422], "minq": [83, 90, 91], "minu": [51, 120, 192], "minut": [57, 72, 320, 355, 373, 381, 410], "mir": 387, "mirror": [57, 65], "miryanov": 72, "misalign": 39, "misc": [0, 360, 361, 422], "miscellan": [57, 72], "mishpat": 371, "mismatch": 28, "miss": [25, 28, 29, 52, 57, 72, 144, 365, 368, 409, 412, 413, 422], "misss": 29, "mist": 373, "mistak": 20, "mistaken": 373, "mistakenli": [57, 107], "mit": [306, 314], "mitchel": [213, 422], "mitr": 422, "mix": [2, 36, 57, 107, 120, 179, 341, 343, 368, 373, 380, 405, 413], "mixin": [57, 59], "mixtur": [46, 48], "mizzl": 373, "mk": 411, "mk_reldict": 192, "mkdtemp": [373, 375], "mkstemp": 411, "mlb": 117, "mlc": 178, "mle": [0, 135, 136, 138, 218, 391, 400], "mle_bigram_model": 249, "mle_trigram_model": 249, "mleprobdist": [0, 179, 394, 400], "mlu": [55, 57, 65, 367], "mm": [305, 319], "mm1": 205, "mn": [57, 84], "mobi": [300, 372], "moby_dick": [300, 372], "mock": 261, "mock_plot": 238, "mock_stdout": 276, "mocker": 238, "mod": [121, 164, 367], "mod_address": 164, "modal": 364, "mode": [0, 10, 25, 111, 113, 169, 206, 211, 220], "mode_fil": 217, "model": [0, 32, 33, 34, 41, 46, 48, 57, 68, 88, 111, 112, 113, 123, 124, 125, 126, 136, 140, 141, 142, 148, 151, 161, 169, 172, 175, 176, 179, 180, 181, 182, 186, 187, 188, 194, 198, 217, 218, 219, 221, 223, 224, 225, 291, 292, 293, 294, 295, 296, 300, 302, 309, 311, 318, 324, 329, 330, 331, 332, 333, 334, 340, 360, 366, 373, 377, 399, 409, 421, 422, 424], "model2count": [0, 322, 330], "model3count": [0, 322, 331], "model4_prob_t_a_given_": [322, 332], "model4count": [0, 322, 332], "model5count": [0, 322, 333], "model_build": 126, "model_dir": 161, "model_fil": 217, "model_filenam": [44, 169, 224], "model_fixtur": 249, "model_found": 126, "model_path": 175, "model_tsn": 383, "modelbuild": [0, 123, 124, 126, 388], "modelbuildercommand": [0, 123, 124, 388], "modelbuildercommanddecor": [0, 123, 124], "modelfil": 176, "moder": 25, "modern": [96, 133, 422], "modern_e_wordtyp": 96, "modes_of_being_with_mot": 373, "modesto": [97, 373], "modif": [52, 120, 204, 206, 209, 248, 309, 347, 350, 357, 380, 413], "modifi": [25, 28, 52, 57, 104, 105, 107, 110, 116, 117, 119, 120, 121, 124, 131, 162, 167, 172, 179, 182, 197, 206, 218, 284, 300, 301, 309, 314, 324, 333, 341, 342, 347, 348, 350, 357, 366, 368, 373, 377, 380, 388, 413, 422], "modified_precis": [0, 322, 324], "modul": [234, 246, 247, 288, 366, 373, 375, 377, 380, 385, 388, 401, 402, 404, 413, 417, 422], "moeder": 414, "moest": 402, "mohammad": 328, "moin": 422, "mole": 399, "molina": 218, "moment": [57, 91, 325, 379], "mon": 388, "monei": [29, 192, 310, 358, 365, 373, 419], "moni": 300, "monolingu": [57, 106], "monoton": [339, 340], "monstrou": 372, "montant": 399, "month": [57, 65, 367, 422], "monthli": 410, "moonshin": 373, "mor": 367, "more": [12, 14, 25, 28, 29, 30, 31, 33, 37, 52, 55, 57, 58, 59, 61, 63, 64, 66, 67, 68, 71, 72, 74, 75, 79, 80, 81, 83, 84, 86, 89, 94, 99, 104, 107, 108, 111, 113, 117, 118, 119, 121, 131, 135, 137, 142, 144, 146, 147, 148, 156, 159, 161, 162, 165, 167, 171, 173, 174, 177, 178, 179, 182, 186, 188, 191, 197, 198, 204, 209, 213, 214, 215, 217, 218, 221, 223, 224, 225, 229, 231, 232, 233, 265, 283, 300, 302, 305, 313, 314, 319, 324, 325, 328, 331, 332, 333, 340, 341, 343, 347, 348, 350, 355, 365, 366, 368, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 388, 394, 399, 401, 402, 409, 410, 411, 412, 413, 415, 417, 418, 420, 422], "more_prompt": 113, "morefeatur": 120, "moreov": [57, 72, 135, 381], "moreovo": 112, "morethuent": 217, "morgan": 337, "morn": [372, 420], "morphem": 159, "morphi": [55, 57, 107, 199, 211], "morphlist": [57, 76], "morpho": 399, "morpholog": [13, 57, 75, 107, 159, 160, 199, 200, 207, 223, 341, 348, 408], "morphologi": [55, 57, 60, 199, 422], "morphological_substitut": [55, 57, 107], "morphs2str": [57, 76], "mortal": [388, 396, 403], "morten": 424, "mortgag": 410, "mose": [57, 106, 308, 320, 422], "mosesdecod": [308, 320], "mosqu": 402, "most": [7, 8, 14, 28, 30, 31, 32, 33, 35, 38, 46, 50, 52, 57, 59, 72, 104, 107, 117, 119, 121, 129, 135, 160, 161, 162, 171, 172, 173, 174, 178, 179, 196, 197, 198, 203, 213, 214, 215, 216, 218, 223, 224, 231, 232, 233, 300, 312, 319, 331, 333, 334, 341, 343, 347, 350, 355, 365, 367, 368, 369, 371, 372, 373, 374, 375, 380, 381, 382, 383, 388, 389, 399, 400, 401, 404, 405, 409, 410, 411, 412, 413, 417, 422], "most_common": [371, 400], "most_general_unif": [0, 123, 129], "most_informative_featur": [30, 33, 35], "most_similar": 383, "mostli": [103, 218, 229, 309], "mot": [57, 65, 322, 323, 329, 330, 331, 332, 333, 367, 412], "moth": 373, "mother": [57, 65, 72, 367, 381, 418], "mother_of": 403, "motion": [57, 72, 156, 381], "motiv": [111, 215, 332], "motorcar": 417, "mots_index": 323, "mountain": 372, "mous": [378, 379], "mouth": 198, "move": [8, 100, 111, 114, 117, 119, 174, 317, 334, 422], "move_dot_forward": [159, 162, 167], "movement": 119, "moveto": [114, 119], "movi": [63, 197, 405, 422], "movie_neg": 197, "movie_review": 373, "movimenta": 399, "mo\u00e7a": 399, "mp": 169, "mpalmer": [57, 105], "mpcheck": 413, "mpdbvq": 169, "mpg": 33, "mpre": 399, "mptree": 413, "mr": [203, 309, 372, 373, 405], "mrf": 324, "mrg": [373, 401, 420], "msd": [57, 79, 373], "msd_to_univers": [57, 79], "msg": 191, "msi3": 205, "msnm": 20, "mst": [57, 107, 170, 357], "mt": [325, 327, 335, 337, 422], "mte": [55, 57], "mtecorpusread": [55, 57, 79, 422], "mtecorpusview": [55, 57, 79], "mtefileread": [55, 57, 79], "mtetagconvert": [55, 57, 79], "mteval": [308, 324, 337], "mtevalbleu": 308, "mu": [192, 205], "much": [14, 24, 46, 57, 68, 72, 86, 107, 113, 135, 162, 229, 304, 309, 347, 350, 373, 375, 383, 388, 409, 410, 417], "muffin": [163, 302, 305, 308, 310, 313, 315, 319, 320, 407, 410], "mui3": 205, "muita": 399, "muito": 399, "mukden": 366, "mule": 408, "mulher": 399, "mult": [117, 392], "multex": 79, "multext": [57, 79, 373, 422], "multi": [31, 46, 57, 69, 72, 117, 119, 144, 147, 215, 307, 339, 341, 343, 360, 372, 413, 422], "multi_comma": [302, 318], "multi_dash": [302, 318], "multi_dot": [302, 318], "multi_kappa": [143, 144], "multiclass": [25, 27], "multiclassifieri": [0, 30, 31], "multidimension": 170, "multidisciplinari": 422, "multilin": [29, 57, 58, 63, 66, 68, 71, 87, 90, 91, 99, 309, 310, 411], "multilingu": [57, 107, 309, 417, 422], "multilistbox": [0, 114, 117], "multinomialnb": 38, "multiparentedtre": [0, 341, 342, 343], "multipl": [8, 28, 29, 39, 57, 69, 70, 72, 104, 107, 120, 126, 128, 144, 148, 159, 163, 169, 174, 175, 196, 225, 283, 311, 315, 324, 331, 335, 339, 340, 341, 343, 355, 371, 380, 381, 392, 395, 396, 398, 403, 404, 410, 413, 417], "multipli": [123, 125, 146, 205, 324], "multiword": [57, 72, 373, 381], "mung": 305, "munic": 399, "munn": 422, "murder": 373, "murthi": [68, 90], "museo_de_art": 402, "museo_de_bellas_art": 402, "mushroom": 364, "muss": 410, "must": [15, 28, 31, 33, 34, 38, 46, 51, 57, 72, 111, 113, 115, 117, 118, 119, 120, 121, 124, 129, 131, 144, 148, 160, 161, 162, 169, 170, 172, 175, 179, 185, 190, 191, 205, 214, 218, 219, 223, 224, 225, 231, 232, 300, 301, 303, 306, 309, 310, 320, 329, 330, 331, 332, 333, 340, 341, 345, 347, 350, 354, 357, 364, 365, 368, 373, 380, 384, 388, 389, 392, 398, 400, 409, 410, 412, 413], "mustard": 198, "mustardse": 373, "mustn": 198, "mustnt": 198, "mutabl": [52, 120, 179, 410], "mutableoptionmenu": [0, 114, 119], "mutableprobdist": [0, 179, 400], "mutual": [88, 146, 371, 417], "mwa": [57, 106, 422], "mwa_ppdb": 262, "mwa_ppdb_xxxl_fil": [55, 57, 106], "mwappdbcorpusread": [55, 57, 106], "mwe": [0, 302], "mwetoken": [0, 302, 307], "mx1000m": [224, 315], "mx2g": 316, "mx4g": 175, "mxpost": 319, "my": [24, 36, 111, 162, 163, 165, 167, 169, 175, 318, 319, 360, 373, 376, 386, 398, 410, 413], "my_al": 412, "my_corpu": 373, "my_genesi": 373, "my_sent_token": 373, "mybg": 377, "mysteri": [373, 400], "mytext": 300, "mytoi": 375, "m\u00e1quina": 417, "m\u00e3e": 399, "m\u00e3o": 399, "m\u00fasica": 208, "m\u1694\uab73\u1891\u0726\ua79b": [], "n": [0, 32, 33, 35, 42, 43, 46, 49, 51, 57, 58, 61, 66, 67, 70, 71, 72, 79, 84, 88, 89, 91, 92, 93, 95, 99, 106, 107, 113, 119, 120, 121, 124, 131, 135, 137, 143, 144, 145, 146, 155, 164, 165, 168, 170, 171, 172, 174, 178, 179, 186, 188, 197, 211, 213, 214, 215, 216, 223, 225, 232, 233, 259, 300, 301, 302, 305, 309, 310, 313, 318, 319, 320, 324, 325, 328, 331, 337, 341, 345, 347, 348, 350, 357, 358, 364, 365, 366, 367, 371, 373, 375, 377, 378, 379, 380, 381, 382, 383, 386, 391, 392, 394, 395, 398, 399, 400, 401, 402, 404, 406, 407, 409, 410, 411, 413, 414, 417, 418, 419, 420], "n0": 410, "n12": 373, "n_all": [123, 130, 146, 328], "n_all_output": 328, "n_all_target": 328, "n_and": [123, 130], "n_app": [123, 130], "n_atom": [123, 130], "n_compani": 394, "n_compon": 383, "n_eq": [123, 130], "n_exist": [123, 130], "n_iff": [123, 130], "n_ii": [146, 371], "n_iii": 146, "n_iiii": 146, "n_iiix": 146, "n_iix": 146, "n_iixi": 146, "n_iixx": 146, "n_imp": [123, 130], "n_instanc": [197, 405], "n_io": [146, 371], "n_ix": [146, 371], "n_ix_xi_tupl": 146, "n_ixi": 146, "n_ixii": 146, "n_ixix": 146, "n_ixx": 146, "n_ixxi": 146, "n_ixxx": 146, "n_match": 328, "n_new": 394, "n_new_compani": 394, "n_oi": [146, 371], "n_oo": [146, 371], "n_or": [123, 130], "n_prop": [123, 130], "n_review": [57, 91, 373], "n_scalar": [195, 198], "n_sent": 284, "n_split": 284, "n_w1": 394, "n_w1_w2": 394, "n_w1_w2_w3": 394, "n_w1_w2_w3_w4": 394, "n_w1_w3": 394, "n_w2": 394, "n_w2_w3": 394, "n_w2_w3_w4": 394, "n_w3": 394, "n_w4": 394, "n_xi": [146, 371], "n_xii": 146, "n_xiii": 146, "n_xiix": 146, "n_xix": 146, "n_xixi": 146, "n_xixx": 146, "n_xx": [146, 371], "n_xxi": 146, "n_xxii": 146, "n_xxix": 146, "n_xxx": 146, "n_xxxi": 146, "n_xxxx": 146, "na": [305, 319, 399], "na2": 205, "naacl": [306, 314, 324, 412], "nabla": 192, "nacion": 399, "nacionalismo": 399, "nada": 399, "nai3": 205, "nairobi": 373, "naiv": [35, 36, 38, 144, 197, 366, 369], "naive_bay": [38, 369], "naivebay": [0, 30, 44, 223, 422], "naivebayesclassifi": [0, 30, 35, 36, 170, 196, 223, 369, 405], "naivebayesclassifiertest": 273, "naivebayesdependencyscor": [0, 159, 170], "name": [0, 25, 27, 28, 29, 30, 32, 33, 36, 37, 39, 43, 47, 55, 57, 59, 60, 61, 62, 64, 65, 69, 70, 71, 72, 73, 75, 81, 82, 84, 85, 86, 89, 93, 98, 100, 105, 107, 108, 109, 110, 111, 112, 113, 117, 119, 120, 121, 124, 125, 127, 131, 133, 134, 144, 148, 162, 164, 167, 169, 176, 179, 181, 182, 184, 187, 190, 191, 192, 194, 209, 214, 215, 224, 235, 262, 263, 283, 300, 301, 302, 309, 319, 321, 353, 354, 355, 366, 367, 373, 375, 377, 378, 379, 380, 381, 388, 392, 398, 399, 401, 404, 409, 410, 417, 420, 422], "name_or_path": 120, "name_pattern": 131, "named_ent": [0, 25], "namedtemporaryfil": 176, "nameerror": 388, "names_demo": [0, 30, 41, 43], "names_demo_featur": [0, 30, 43], "namespac": [79, 80, 134], "nand": 411, "nanswer": 373, "naquel": 399, "narad": 422, "nasiriya": 163, "natcorp": 61, "nathan": [57, 62, 373, 422, 424], "nation": [57, 61, 68, 80, 91, 213, 300, 402, 422], "natur": [0, 46, 67, 96, 182, 188, 225, 347, 350, 359, 366, 373, 392, 422], "natural_language_processing_with_python": 422, "navaho": [57, 103], "navaho_din": [57, 103], "navajo": [57, 103], "navig": 373, "nb": [38, 148, 213, 217, 380, 389, 420, 422], "nba": 373, "nbest": 371, "nbp": [57, 106], "nbsp": 192, "nc": [96, 179, 220, 373], "ncheirass": 399, "nck": [143, 144, 357], "ncollect": 113, "ncomo": 399, "nd": [133, 203], "ndash": 192, "ndiciou": 399, "ndirectori": 113, "ndito": 399, "ndownload": 113, "ndp": 170, "ne": [37, 55, 57, 69, 93, 119, 192, 373], "ne2": 205, "ne_chunk": [0, 25, 180, 192, 420], "ne_chunk_s": [0, 25], "ne_label": 192, "nearbi": 215, "nearest": [114, 117], "necess": 399, "necessari": [13, 33, 57, 80, 81, 89, 113, 119, 135, 170, 172, 191, 301, 302, 306, 314, 319, 324, 360, 373, 421], "necessarili": [57, 107, 223, 333, 341, 343, 417], "nechunkpars": [0, 25, 27], "nechunkparsertagg": [0, 25, 27], "ned": [402, 410], "nee0": 205, "need": [14, 28, 30, 33, 39, 43, 46, 52, 57, 60, 65, 72, 80, 91, 104, 107, 110, 111, 113, 117, 119, 121, 135, 137, 144, 148, 162, 163, 170, 179, 182, 190, 206, 217, 218, 219, 224, 231, 301, 302, 309, 319, 320, 326, 339, 347, 350, 353, 360, 372, 373, 378, 379, 380, 381, 388, 395, 400, 404, 409, 412, 413, 417, 421, 422], "needn": 198, "neednt": 198, "neergaard": 424, "neg": [29, 33, 52, 55, 57, 63, 83, 91, 95, 111, 117, 119, 131, 147, 170, 197, 198, 214, 223, 309, 332, 333, 340, 373, 377, 379, 383, 394, 405, 413], "neg_scor": [55, 57, 95, 406], "negat": [119, 124, 180, 191, 195, 197, 198, 373, 377, 388, 392, 405], "negatedexpress": [0, 180, 184, 188, 191], "negative300": 383, "negative_tweet": 373, "neglect": 373, "negr": 208, "negro": 208, "negscor": [95, 406], "nei": [135, 138, 140, 179, 412], "neighbor": [57, 72, 322, 327, 333, 334], "neighborhood": 233, "neither": [57, 65, 121, 191, 198, 405, 409], "nek": 411, "nem": 399, "nemo": [1, 6], "nemo_app": [0, 1], "nenhuma": 399, "neot": 109, "nep": [341, 344], "neq": [180, 191], "neq_list": [180, 191], "ner": [39, 163, 222, 422], "nertagg": 222, "nervou": 300, "ness": [205, 216, 223, 399, 409], "nessa": 399, "nest": [28, 32, 57, 79, 80, 107, 108, 120, 186, 205, 312, 321, 341, 344, 348, 357, 368, 380, 396, 410, 413, 417], "nestado": 399, "net": [53, 179, 216, 422], "netherland": [57, 72, 424], "network": 354, "networkx": 164, "neu": 405, "neural": [135, 175, 328, 422], "neurophysiolog": 318, "neutral": [197, 198, 399], "nevada": 204, "neve": 399, "never": [35, 43, 104, 119, 162, 198, 206, 341, 343, 345, 357, 373, 405, 409, 413], "new": [2, 10, 13, 14, 25, 28, 33, 46, 52, 57, 58, 62, 64, 66, 71, 72, 73, 74, 75, 78, 79, 80, 81, 83, 85, 86, 87, 89, 92, 94, 95, 99, 100, 102, 103, 104, 107, 108, 109, 111, 113, 117, 118, 119, 120, 121, 124, 130, 131, 135, 136, 137, 138, 142, 147, 156, 162, 163, 165, 167, 170, 171, 172, 173, 174, 176, 178, 179, 182, 184, 186, 190, 191, 196, 202, 209, 210, 213, 217, 218, 223, 232, 233, 300, 302, 304, 305, 306, 308, 310, 313, 315, 319, 320, 323, 329, 330, 331, 332, 333, 334, 340, 341, 342, 346, 347, 348, 350, 352, 355, 357, 360, 366, 368, 375, 377, 379, 380, 383, 388, 391, 399, 400, 401, 407, 408, 410, 411, 412, 413, 417, 422], "new_assumpt": 124, "new_edg": 162, "new_end": [162, 167], "new_id": [12, 13], "new_index": 170, "new_model": 383, "new_nod": 170, "new_p": 178, "new_prop": 127, "new_sig": 127, "new_token_pad": 121, "new_tre": 178, "new_var": 120, "new_weight": 33, "new_wrapp": [0, 112], "newchild": [118, 119], "newclassnam": 131, "newcom": 422, "newer": 422, "newli": [117, 190, 413], "newlin": [111, 177, 219, 284, 309, 310, 313, 321, 411], "newnod": 413, "newspap": 399, "newswir": 73, "newton": 33, "newvar": [184, 191], "next": [0, 7, 8, 16, 50, 104, 111, 113, 119, 162, 163, 165, 173, 180, 182, 185, 190, 191, 321, 326, 339, 360, 366, 373, 399, 402, 417], "next_src_phrase_span": 340, "next_with_bind": [159, 167], "nextcategori": [0, 12, 16], "nextsym": [12, 14, 159, 162, 165], "nf": 33, "nfarrai": 33, "nfmap": 33, "nfp": 163, "nftranspos": 33, "ng": [67, 339, 373, 399], "ngram": [0, 53, 57, 77, 135, 136, 137, 138, 139, 140, 143, 146, 196, 324, 325, 337, 339, 357, 371, 391, 399, 409, 422], "ngram1": [57, 77], "ngram2": [57, 77], "ngram_count": [135, 137], "ngram_fd": 371, "ngram_ord": 391, "ngram_text": [135, 137], "ngramassocmeasur": [0, 143, 146, 196], "ngramcount": [0, 135, 136, 137, 138, 140, 248], "ngrammodelvocabularytest": 251, "ngrams_fn": [135, 136, 138], "ngramtagg": [0, 213, 223], "nhaa": [341, 344], "nher": 373, "ni": 192, "nice": [14, 112, 135, 232], "niceee": 410, "nicer": 131, "nichleson": 148, "nichulson": 148, "nicodemu": 109, "niemand": 340, "night": [373, 417], "nijmegen": 424, "nik": [143, 144], "nil": 127, "nilsson": 127, "nin": [113, 163, 302, 305, 310, 313, 315, 319, 320, 407, 410], "nine": 422, "nineteen": 367, "nineteeth": 91, "nishant": 328, "nist": [0, 73, 100, 298, 302, 324, 337, 422], "nist_length_penalti": [0, 322, 337], "nist_scor": [0, 322], "nisttoken": [0, 302, 308], "nit": 373, "nitin": [68, 422], "nivr": [164, 176], "njindal": 68, "nk": [143, 144], "nkeyboard": 113, "nkjp": [55, 57, 422], "nkjpcorpus_header_view": [55, 57, 80], "nkjpcorpus_morph_view": [55, 57, 80], "nkjpcorpus_segmentation_view": [55, 57, 80], "nkjpcorpus_text_view": [55, 57, 80], "nkjpcorpusread": [55, 57, 80], "nl": [42, 57, 106], "nld": 417, "nlg": 422, "nline": 411, "nlp": [38, 53, 92, 140, 163, 175, 202, 218, 224, 394, 420, 422], "nltk": [362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 422], "nltk2": 107, "nltk3": [107, 422], "nltk_contrib": 46, "nltk_data": [55, 57, 65, 78, 80, 87, 103, 111, 113, 335, 360, 367, 373, 374], "nltk_data_dir": 65, "nltk_data_subdir": 110, "nltk_extens": [199, 206], "nltk_org": 354, "nltkdemo18": [0, 213, 215], "nltkdemo18plu": [0, 213, 215], "nltkdestructivewordtoken": 305, "nltkdrtboxerdrsinterpret": [0, 180, 181], "nltkwordtoken": [0, 302, 305, 422], "nmod": [163, 166, 175, 376], "nmodel": 113, "nmore": 411, "nmtpy": 308, "nn": [25, 28, 39, 57, 62, 147, 163, 166, 175, 176, 177, 213, 214, 216, 219, 220, 221, 222, 223, 224, 226, 232, 301, 368, 373, 376, 377, 384, 385, 394, 398, 401, 407, 409, 410, 413, 415, 417, 420], "nn1": [57, 72, 205, 363], "nno": 417, "nnp": [25, 39, 163, 166, 213, 214, 226, 341, 348, 373, 376, 384, 385, 398, 401, 409, 413, 415, 420], "noam": 155, "nob": 417, "noblest": 373, "nobodi": 340, "nocturna": 399, "node": [0, 7, 28, 29, 32, 51, 57, 82, 86, 93, 107, 108, 109, 118, 121, 162, 163, 164, 167, 169, 170, 171, 172, 173, 178, 183, 187, 188, 194, 283, 301, 341, 342, 343, 345, 346, 347, 348, 350, 357, 373, 376, 399, 401, 402, 413, 415, 417], "node_": 118, "node_address": 164, "node_attr": 118, "node_index": [164, 170], "node_pattern": [341, 348, 413], "nodecolor": [341, 345], "nodecoord": [0, 341, 345], "nodedist": [341, 345, 413, 414], "nodelist": 164, "nodesep": [341, 348], "noi3": 205, "nois4j": 205, "noise_mak": [57, 72], "noit": 399, "noix4ct": 205, "nom": [377, 379, 398, 404], "nombank": [55, 57, 274, 373], "nombank_ptb": 373, "nombankchaintreepoint": [55, 57, 81], "nombankcorpusread": [55, 57, 81], "nombankdemo": 274, "nombankinst": [55, 57, 81], "nombankpoint": [55, 57, 81], "nombanksplittreepoint": [55, 57, 81], "nombanktreepoint": [55, 57, 81], "nomfil": [57, 81], "nomin": [44, 410], "non": [25, 26, 28, 33, 48, 49, 53, 57, 58, 59, 61, 62, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 79, 80, 82, 83, 84, 85, 86, 87, 93, 94, 98, 99, 104, 105, 107, 108, 109, 110, 118, 119, 120, 121, 131, 134, 163, 164, 170, 171, 177, 180, 185, 186, 191, 218, 231, 233, 300, 308, 309, 310, 312, 319, 321, 332, 333, 335, 341, 345, 347, 348, 350, 373, 377, 379, 387, 391, 396, 404, 411, 413, 417], "non_break": [302, 318], "non_head_distortion_t": [332, 333], "non_head_vacancy_t": 333, "nonascii": [302, 308], "nonbreak": [57, 106], "nonbreaking_prefix": [57, 106], "nonbreakingprefixescorpusread": [55, 57, 106], "noncommerci": 96, "none": [13, 14, 16, 23, 27, 28, 29, 32, 33, 34, 35, 37, 41, 43, 44, 48, 49, 50, 51, 52, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 113, 115, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 134, 135, 136, 137, 138, 142, 144, 147, 150, 151, 156, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 205, 211, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 229, 231, 232, 233, 279, 284, 300, 301, 307, 309, 315, 316, 317, 321, 323, 324, 329, 330, 331, 332, 333, 334, 336, 341, 342, 343, 345, 346, 347, 348, 352, 355, 356, 357, 358, 360, 369, 370, 373, 376, 379, 380, 387, 388, 396, 398, 401, 403, 404, 409, 410, 411, 412, 413, 417], "nonequ": [120, 380], "nonexecut": [166, 376], "nonexist": 422, "nonlex": [121, 213], "nonmonoton": [0, 123, 361], "nonmonotonic_fixt": 234, "nonneg": [179, 357], "nonproject": 170, "nonprojective_conll_parse_demo": [0, 159, 170], "nonprojectivedependencypars": [0, 159, 376], "nonterm_pars": 121, "nontermin": [0, 14, 28, 115, 121, 162, 167, 168, 171, 379, 398], "nonvehicl": 373, "nonverbal_express": 373, "nonzero": [33, 131, 179], "noosa": 404, "nope": 198, "nor": [191, 198, 405], "norm": [55, 57, 92, 199, 201, 202, 204, 347, 350], "norm_cdf": [0, 322, 326], "norm_logsf": [0, 322, 326], "normal": [28, 35, 57, 59, 61, 62, 64, 65, 69, 70, 71, 72, 75, 82, 84, 85, 92, 93, 98, 99, 105, 107, 108, 109, 121, 179, 180, 191, 193, 195, 198, 201, 202, 204, 213, 221, 223, 300, 317, 324, 326, 328, 339, 341, 345, 347, 348, 350, 357, 367, 373, 377, 378, 384, 385, 386, 392, 396, 411, 415, 417], "normal0117": [57, 103], "normalis": [46, 48, 49, 50, 51, 218], "normalize_whitespac": 163, "normpath": 373, "norouzi": 328, "nort": 399, "north": 100, "northern": 100, "northumbra": 109, "northwest": [398, 422], "norwegian": [209, 408], "norwegianstemm": [0, 199, 209], "nos": 399, "nosub_pars": 364, "not_found": 232, "not_instal": [0, 113], "not_list": [180, 191], "notabl": 144, "notat": [0, 96, 135, 137, 144, 163, 186, 322, 341, 348, 379, 380], "note": [0, 8, 15, 25, 28, 33, 39, 44, 46, 53, 57, 59, 72, 79, 80, 83, 91, 98, 100, 104, 107, 108, 111, 117, 118, 119, 120, 121, 135, 136, 137, 138, 142, 144, 145, 147, 155, 159, 162, 163, 164, 166, 167, 174, 176, 179, 196, 198, 206, 209, 213, 215, 222, 223, 225, 229, 231, 233, 284, 309, 310, 314, 319, 320, 328, 329, 333, 337, 339, 341, 343, 348, 355, 364, 373, 375, 377, 379, 380, 381, 398, 400, 401, 413, 417], "note1": 216, "notequ": 119, "noth": [25, 28, 57, 105, 119, 124, 173, 174, 198, 211, 232, 373, 377, 411], "nothman": [422, 424], "notic": [57, 72, 135, 399], "notimplementederror": [111, 131, 368, 369, 389], "notin": 192, "notion": [182, 366], "notsubset": 119, "noun": [25, 26, 28, 55, 57, 72, 79, 81, 88, 89, 107, 156, 211, 213, 216, 217, 220, 223, 332, 368, 371, 373, 381, 384, 398, 399, 409, 413, 414, 417, 418], "noun1": [57, 88, 373], "noun2": [57, 88, 373], "nounsfil": [57, 81], "nov": [166, 216, 376], "novel": 201, "novemb": 422, "now": [57, 107, 135, 233, 328, 371, 372, 373, 375, 377, 379, 380, 384, 389, 398, 399, 400, 405, 409, 410, 413, 417, 422], "nowher": [57, 72, 198, 381], "np": [25, 28, 29, 39, 57, 62, 88, 121, 163, 174, 175, 213, 222, 223, 301, 341, 344, 345, 348, 364, 365, 366, 368, 373, 375, 377, 379, 380, 382, 383, 386, 392, 398, 399, 401, 404, 407, 410, 413, 414, 415, 422], "npp": 170, "nprop": 399, "nps_chat": [55, 57], "npschatcorpusread": [55, 57, 82], "nr": [0, 179, 223, 398, 410, 414], "nr_iter": 221, "nr_tree": 398, "nschneid": [57, 62, 424], "nsp": 53, "nsub": 192, "nsubj": [163, 175], "nt1": 398, "nt2": 398, "nth": 324, "nthank": [163, 302, 305, 310, 313, 315, 319, 320, 407, 410], "nthat": 113, "nthe": 113, "nthere": 372, "nthi": 373, "nti": [57, 72], "ntild": 192, "ntop": 164, "ntt": 339, "ntwo": [163, 302, 305, 310, 313, 315, 319, 410], "nu": 192, "nueva": 364, "null": [164, 169, 324, 329, 330, 331, 332, 333, 334, 376], "null_binary_rel": 404, "nullableinttoken": [180, 181], "nullifi": 198, "num": [57, 61, 72, 79, 93, 97, 125, 126, 128, 182, 186, 204, 216, 220, 300, 366, 367, 371, 373, 377, 379, 381, 398, 399, 404, 407, 409, 413], "num_clust": [46, 47, 48, 49, 50], "num_edg": [14, 159, 162, 165, 167, 171, 398], "num_increasing_pair": 339, "num_leav": [159, 162], "num_mean": 50, "num_memori": 217, "num_possible_pair": 339, "num_sent": [218, 229], "num_word": 136, "numa": 399, "number": [14, 23, 25, 28, 29, 30, 31, 33, 38, 43, 46, 47, 48, 49, 50, 51, 52, 53, 57, 65, 72, 78, 81, 85, 89, 92, 100, 104, 106, 107, 111, 113, 117, 119, 120, 124, 125, 126, 128, 131, 135, 137, 138, 142, 144, 146, 147, 148, 150, 156, 158, 162, 163, 164, 165, 167, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 182, 186, 192, 196, 197, 214, 215, 216, 217, 218, 220, 221, 223, 225, 229, 284, 300, 304, 309, 317, 318, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 345, 347, 348, 350, 352, 355, 357, 366, 367, 371, 373, 377, 379, 380, 381, 382, 387, 388, 394, 395, 398, 401, 409, 410, 411, 412, 417, 419, 422], "number_possible_pair": 339, "number_regex": [302, 308], "numedg": [12, 14], "numer": [29, 33, 35, 38, 44, 140, 144, 146, 302, 322, 324, 373], "numpars": [162, 165, 398], "numpi": [34, 41, 46, 48, 317, 383, 394, 421, 422], "nw": [119, 325], "nwhen": 113, "nwt": 73, "nx": [164, 373], "nx_graph": [159, 164], "ny": [163, 222, 224], "nyt_19980315": [73, 373, 402], "nyt_19980403": [73, 373], "nyt_19980407": [73, 373], "n\u00e3o": 399, "n\uff7e\u1c1f": [], "o": [0, 39, 57, 89, 102, 132, 144, 163, 176, 187, 190, 208, 214, 216, 218, 222, 224, 229, 281, 373, 375, 380, 384, 394, 395, 396, 399, 400, 402, 409, 411, 417, 420, 422], "o1": 109, "o12": 109, "o2": 109, "o23": 109, "o24": 109, "o3": 109, "o34": 109, "o4": 109, "o_k": 218, "o_t": 218, "oacut": 192, "oakland": 424, "oana": [57, 79, 373], "oat": 67, "oath": 373, "oauth": [355, 356], "oauth_token": [355, 356], "oauth_token_secret": [355, 356], "obei": [324, 325, 328, 335, 337, 339], "obj": [57, 63, 132, 163, 166, 176, 182, 192, 215, 221, 223, 231, 232, 367, 373, 375, 376, 378, 379, 384, 405], "obj_doc": 405, "obj_scor": [55, 57, 95, 406], "objcas": 379, "objclass": [192, 402], "object": [13, 15, 16, 23, 26, 28, 29, 31, 33, 35, 37, 38, 40, 42, 43, 44, 46, 47, 51, 52, 57, 58, 59, 68, 69, 71, 72, 73, 78, 79, 80, 81, 84, 88, 89, 91, 92, 94, 95, 98, 99, 100, 102, 104, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 142, 144, 146, 147, 149, 156, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 176, 177, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 196, 197, 198, 200, 211, 212, 214, 216, 217, 218, 219, 221, 231, 232, 233, 248, 253, 263, 266, 278, 284, 285, 300, 304, 305, 309, 317, 320, 321, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 340, 341, 342, 345, 352, 353, 354, 355, 356, 357, 358, 366, 370, 375, 377, 379, 380, 381, 388, 389, 392, 401, 402, 405, 411, 413, 417, 419, 422], "objsym": [192, 402], "objtext": [192, 402], "obl": 163, "oblig": 373, "obra": 399, "observ": [83, 90, 144, 179, 218, 332, 399], "obtain": [46, 52, 57, 61, 72, 80, 100, 107, 120, 129, 191, 197, 311, 329, 330, 332, 333, 334, 341, 348, 354, 373, 381, 405], "oc": [57, 60], "occasion": 198, "occitan": [57, 60], "occupi": [322, 333, 402], "occur": [30, 33, 37, 46, 50, 57, 107, 119, 131, 135, 142, 147, 156, 162, 179, 192, 202, 223, 226, 300, 309, 312, 314, 329, 341, 342, 343, 358, 371, 411, 413, 417, 419], "occur_index": 181, "occurr": [13, 28, 52, 53, 120, 121, 146, 181, 184, 191, 192, 196, 214, 226, 300, 317, 320, 337, 341, 342, 372, 373, 379], "ocean": 182, "och": [324, 412], "och2000": 412, "ocirc": 192, "oct": 328, "octob": [410, 422], "odd": [67, 317], "ody1ysutd7o": 140, "oehrl": [306, 314], "oelig": 192, "oepen": 311, "oeuvr": [307, 410], "of2ss": [55, 57, 107], "off": [36, 57, 63, 75, 90, 147, 179, 197, 206, 213, 309, 319, 320, 354, 357, 373, 377, 385, 388, 398, 399, 410, 422], "offens": [381, 405], "offer": [355, 371], "offic": 373, "offici": [203, 337, 339, 357], "offset": [0, 52, 57, 100, 104, 107, 111, 300, 303, 305, 310, 313, 319, 320, 326, 352, 373, 383, 417, 422], "often": [30, 46, 50, 53, 119, 121, 135, 144, 147, 162, 164, 174, 179, 215, 218, 229, 300, 309, 371, 372, 373, 380, 409, 412], "oftentim": 372, "ograv": 192, "oh": [318, 367], "ohio": 318, "oi": [67, 149, 397], "oil": [92, 373], "oili": 373, "ok": [128, 389, 411, 413], "okai": 367, "oken": [162, 171], "old": [57, 109, 130, 166, 210, 300, 357, 367, 373, 376, 410, 417, 422], "old_dir": 375, "old_p": 178, "oldchild": [118, 119], "oldclassnam": 131, "older": [107, 111, 316, 380, 421], "oldi": [182, 366], "oleomargar": 395, "olhar": 399, "olho": 399, "olin": 192, "omega": 192, "omicron": 192, "omit": [99, 100, 164, 182, 341, 348, 355, 366], "omw": [57, 107, 422], "omw1": [57, 107], "omw_read": [57, 107], "omwn": [57, 107], "on_and_on": 413, "on_error": [351, 355], "on_finish": [351, 352, 355], "on_success": [351, 355], "onc": [28, 33, 39, 104, 107, 110, 111, 120, 135, 162, 179, 197, 324, 340, 341, 342, 371, 373, 377, 380, 409, 410, 417], "oncologi": [57, 72], "ond": 399, "one": [8, 14, 25, 28, 29, 30, 31, 33, 34, 35, 36, 46, 49, 50, 52, 53, 55, 57, 59, 63, 64, 65, 66, 72, 74, 79, 80, 81, 82, 86, 89, 99, 100, 104, 106, 107, 108, 113, 117, 119, 120, 121, 124, 125, 128, 131, 133, 135, 136, 138, 142, 144, 148, 152, 156, 157, 159, 160, 162, 163, 165, 167, 169, 171, 172, 174, 176, 177, 178, 179, 182, 186, 187, 189, 191, 192, 196, 205, 206, 213, 215, 218, 223, 229, 231, 232, 233, 300, 307, 309, 314, 318, 324, 329, 330, 331, 332, 333, 334, 338, 339, 340, 341, 343, 347, 348, 350, 353, 355, 360, 366, 372, 373, 375, 377, 384, 385, 389, 392, 398, 399, 401, 405, 410, 411, 412, 413, 415, 417, 418, 422], "one_spac": [302, 318], "one_tag": [57, 75], "ones": [25, 36, 100, 171, 215, 331, 394], "ong": 372, "ongo": [125, 357], "onkrippendorffalpha": 265, "onli": [8, 25, 28, 33, 36, 39, 46, 49, 52, 53, 57, 60, 63, 72, 82, 86, 91, 98, 100, 102, 104, 105, 107, 108, 111, 113, 118, 119, 120, 121, 125, 133, 135, 137, 142, 147, 152, 162, 164, 165, 170, 172, 173, 174, 176, 177, 179, 181, 186, 196, 197, 199, 203, 206, 214, 216, 218, 223, 229, 231, 233, 248, 265, 301, 306, 309, 310, 313, 318, 319, 324, 325, 328, 331, 333, 334, 338, 341, 342, 345, 348, 354, 355, 357, 371, 373, 377, 380, 383, 384, 388, 391, 396, 398, 401, 408, 409, 411, 412, 413, 415, 417], "onlin": [0, 154, 202, 412, 420, 422], "onset": [302, 306], "ontem": 399, "onto": 301, "onward": [309, 413], "onyx": 395, "oov": [93, 135, 136, 138, 409], "op": 372, "open": [0, 10, 55, 57, 59, 65, 104, 107, 111, 113, 118, 119, 124, 131, 144, 180, 186, 190, 191, 208, 219, 300, 312, 314, 321, 341, 348, 360, 373, 375, 377, 380, 383, 389, 399, 402, 417, 420], "open_bracket": [180, 184], "open_punct": [302, 318, 410], "open_punct_r": [302, 318], "open_punctu": [57, 106], "open_str": [0, 321], "openondemandzipfil": [0, 111], "oper": [7, 8, 13, 16, 28, 29, 39, 46, 111, 119, 120, 121, 148, 151, 162, 167, 170, 172, 173, 174, 176, 179, 181, 183, 184, 188, 190, 191, 283, 301, 302, 319, 369, 373, 378, 381, 392, 395, 398, 400, 402, 412, 413, 422], "opinion": [55, 57, 68, 90, 91, 95, 197, 373], "opinion_lexicon": [55, 57], "opinionlexiconcorpusread": [55, 57, 83, 373], "oplu": 192, "opportun": 422, "oppos": 191, "opposit": [121, 124, 152, 371], "opt": 111, "optim": [34, 121, 145, 162, 167, 217, 218, 339, 417, 422], "optimis": 218, "option": [10, 33, 34, 39, 44, 51, 57, 66, 68, 72, 75, 79, 91, 107, 119, 131, 134, 135, 136, 137, 138, 142, 147, 148, 161, 163, 164, 169, 171, 176, 177, 179, 182, 186, 196, 206, 211, 214, 217, 218, 219, 222, 223, 224, 229, 231, 300, 304, 305, 311, 313, 315, 316, 319, 324, 325, 329, 330, 331, 332, 333, 334, 341, 345, 348, 355, 357, 360, 373, 377, 380, 381, 388, 413, 414, 417, 421, 422], "or_list": [180, 191], "orang": 324, "orchestra": 373, "order": [14, 28, 29, 30, 33, 34, 35, 46, 49, 51, 52, 53, 57, 62, 72, 83, 84, 86, 92, 104, 107, 111, 113, 117, 119, 120, 121, 125, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 147, 148, 150, 154, 157, 162, 170, 171, 178, 179, 180, 181, 182, 186, 187, 188, 191, 192, 194, 201, 204, 215, 218, 223, 225, 229, 300, 304, 321, 323, 324, 325, 328, 329, 330, 332, 334, 337, 339, 340, 341, 342, 345, 347, 348, 350, 355, 357, 366, 373, 375, 377, 378, 379, 380, 388, 392, 394, 399, 400, 404, 405, 407, 409, 413, 419, 422], "ordereddict": [0, 52], "ordf": 192, "ordin": 309, "ordinari": 37, "ordm": 192, "oreilli": 422, "orelha": 399, "orexpress": [0, 180, 184, 188, 191], "org": [0, 22, 38, 55, 57, 65, 78, 79, 85, 94, 96, 106, 107, 132, 133, 148, 169, 182, 192, 206, 209, 217, 220, 222, 225, 257, 260, 281, 289, 311, 320, 324, 325, 326, 328, 337, 339, 347, 350, 352, 353, 355, 357, 358, 360, 362, 365, 366, 367, 373, 395, 399, 402, 420, 421, 422, 424], "organ": [25, 29, 57, 94, 107, 119, 159, 163, 171, 192, 224, 357, 373, 402, 413, 417, 418], "organismo": 399, "orient": [100, 118], "origin": [57, 65, 92, 100, 106, 107, 112, 119, 121, 149, 164, 165, 170, 197, 202, 203, 204, 206, 209, 210, 215, 232, 289, 304, 305, 308, 309, 317, 319, 320, 324, 325, 327, 332, 339, 341, 345, 347, 348, 350, 358, 367, 388, 401, 408, 413, 415, 417, 420, 422], "original_algorithm": [199, 206], "original_best_arc": [159, 170], "original_length": 317, "original_tag": [227, 232], "original_text": 119, "oriol": 328, "ork": 372, "ormiston": 422, "orn": 100, "orosiu": 109, "orphan": 373, "orth": [345, 349], "ortho_context": [302, 309], "ortho_thresh": 309, "orthograph": 309, "orwel": 373, "osborn": 327, "oserror": [131, 163], "oslash": 192, "ostara": 395, "ostrich": [127, 396], "ota": [57, 61, 109], "other": [7, 10, 13, 15, 33, 36, 51, 53, 57, 62, 68, 72, 76, 77, 81, 89, 93, 100, 104, 105, 107, 110, 113, 120, 124, 129, 131, 135, 142, 148, 159, 160, 161, 162, 164, 167, 170, 172, 179, 182, 184, 186, 187, 190, 191, 201, 203, 206, 216, 218, 220, 221, 223, 231, 232, 233, 259, 300, 301, 302, 306, 308, 309, 310, 312, 314, 318, 324, 327, 329, 330, 331, 332, 333, 334, 341, 348, 353, 364, 368, 371, 380, 381, 388, 389, 394, 399, 405, 409, 417, 422], "other_co": 373, "other_indic": 190, "other_typ": 191, "otherwai": 410, "otherwis": [7, 33, 34, 39, 52, 57, 61, 65, 77, 104, 111, 113, 117, 118, 119, 120, 124, 131, 133, 135, 137, 142, 164, 173, 174, 179, 185, 190, 191, 218, 231, 232, 309, 321, 355, 360, 371, 373, 398, 400, 413], "othr": 144, "otild": 192, "otim": 192, "otto": [306, 314], "ou": 399, "ouamour": 201, "ought": [67, 394, 409], "oughtn": 198, "oughtnt": 198, "ouml": 192, "ounc": 163, "our": [135, 196, 235, 311, 328, 368, 371, 373, 379, 384, 388, 399, 400, 405, 409, 410, 412, 413, 422], "ouro": 399, "out": [42, 51, 52, 57, 62, 104, 108, 109, 111, 113, 120, 125, 135, 136, 148, 157, 163, 179, 182, 183, 188, 192, 203, 209, 233, 283, 301, 310, 313, 317, 323, 333, 334, 341, 342, 354, 366, 372, 373, 375, 379, 383, 399, 402, 405, 409, 410, 413], "out_fil": 383, "outcom": [179, 399], "outdat": [341, 348], "outdoor": 372, "outer": 170, "outerspac": [180, 184], "outfil": [44, 197, 353], "outlin": [118, 119, 170], "output": [28, 29, 33, 34, 41, 44, 46, 50, 57, 72, 107, 120, 126, 131, 135, 145, 147, 148, 162, 163, 165, 166, 167, 169, 171, 173, 174, 177, 178, 181, 182, 192, 196, 197, 214, 216, 217, 218, 225, 229, 231, 233, 266, 281, 284, 290, 301, 305, 309, 311, 317, 320, 325, 327, 328, 332, 333, 334, 337, 338, 339, 340, 341, 345, 353, 354, 355, 357, 364, 366, 368, 371, 373, 375, 376, 380, 383, 402, 405, 409, 417], "output_format": [128, 388], "output_markdown": [0, 195, 197], "outputfilenam": 169, "outra": 399, "outro": 399, "outsid": [163, 334, 338, 347, 350, 412, 419], "oval": 119, "ovalwidget": [0, 114, 119], "over": [2, 25, 28, 31, 33, 35, 36, 38, 39, 46, 47, 52, 57, 58, 59, 61, 64, 65, 66, 69, 70, 71, 72, 74, 75, 82, 83, 84, 85, 86, 93, 94, 98, 99, 104, 105, 107, 108, 109, 112, 118, 135, 137, 139, 142, 144, 150, 151, 162, 163, 165, 167, 172, 175, 182, 191, 201, 217, 218, 221, 222, 225, 300, 302, 325, 329, 330, 335, 338, 368, 372, 373, 380, 398, 399, 410, 411, 412, 417, 420], "overal": [2, 29, 324], "overflow": 179, "overgedaan": 402, "overhead": 43, "overheard": 373, "overlap": [25, 26, 28, 30, 37, 120, 231, 324, 325, 337, 341, 345, 358, 380, 419], "overload": 392, "overrid": [28, 57, 59, 87, 113, 124, 131, 134, 179, 309, 334, 341, 348, 373, 375, 400], "overridden": [0, 57, 61, 62, 80, 93, 108, 113, 119, 131, 181, 184, 190, 191, 223, 309], "overs": 371, "overstem": 149, "overt": [57, 72], "overtli": [57, 72], "overview": [0, 180, 353, 354], "overweigh": 148, "overwhelm": 373, "overwrit": 375, "ow": [67, 205], "ow0": 373, "ow2": 373, "own": [35, 57, 72, 92, 102, 110, 111, 119, 120, 233, 312, 341, 343, 373, 377, 381, 401, 402, 408, 413], "ox": [57, 61], "ox2": 109, "oxford": 109, "p": [7, 8, 10, 35, 36, 57, 67, 79, 88, 89, 91, 107, 109, 111, 120, 121, 127, 129, 130, 135, 142, 145, 147, 148, 150, 166, 171, 178, 179, 182, 183, 191, 197, 214, 218, 220, 225, 232, 304, 306, 308, 311, 327, 334, 341, 348, 365, 366, 368, 369, 373, 375, 376, 378, 379, 380, 382, 383, 384, 386, 388, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 407, 409, 410, 411, 412, 413, 417], "p0": [331, 332, 333], "p02": [289, 324, 325], "p03": [347, 350], "p1": [331, 332, 333, 339, 388, 396, 398, 403], "p103": 179, "p108": [187, 190], "p12": 311, "p1y9m21d": 367, "p1y9m28d": 367, "p2": [388, 396, 398, 403], "p2y1m12d": 367, "p2y1m23d": 367, "p2y1m3d": 367, "p3": [396, 403], "p4": [396, 403], "p5": [57, 79, 396], "p_factor": 148, "p_n": 324, "pa": 411, "pablo": 364, "pabo": 63, "pack": [114, 117, 119, 417], "packag": [34, 38, 44, 53, 107, 108, 110, 111, 126, 128, 164, 177, 270, 285, 309, 348, 357, 360, 369, 371, 373, 388, 392, 394, 421, 422, 424], "package_id": 113, "packt": 422, "pad": [121, 135, 136, 138, 139, 232, 284, 319, 357, 391], "pad_both_end": [135, 139], "pad_fn": [135, 136, 138], "pad_left": [135, 357], "pad_right": [135, 357], "pad_sequ": [0, 135, 357], "paddan": 371, "padded_bigram": 135, "padded_everygram": [0, 135, 139], "padded_everygram_pipelin": [0, 135, 139, 391], "paediatr": [57, 72], "pagam": 399, "pagamento": 399, "page": [113, 140, 176, 206, 311, 360, 365, 422], "pagin": 352, "pai": [92, 208, 373, 399, 405], "paic": [0, 143, 201, 205, 361], "pain": 373, "pair": [23, 32, 33, 34, 35, 41, 46, 49, 52, 55, 57, 72, 75, 92, 106, 107, 119, 120, 121, 125, 127, 144, 148, 151, 161, 162, 174, 179, 180, 182, 186, 192, 194, 223, 232, 233, 309, 323, 324, 326, 329, 330, 333, 334, 335, 338, 339, 357, 366, 368, 373, 380, 381, 390, 394, 402], "pair_count": 394, "pairwis": [0, 357], "paisagem": [208, 399], "pajama": [169, 376], "palavra": 399, "pale": 300, "palmellacea": 395, "palmer": [57, 107, 417], "pan": [57, 75, 399], "panader\u00eda": 364, "pang": [63, 197, 422], "panlex": [57, 84, 85, 422], "panlex_lit": [55, 57], "panlex_swadesh": [55, 57], "panlex_uid": [57, 85], "panlexlanguag": [55, 57, 85], "panlexlitecorpusread": [55, 57, 84], "panlexswadeshcorpusread": [55, 57, 85], "panlingu": [57, 85], "pant": 417, "panton": 424, "pap": 399, "paper": [63, 68, 83, 88, 90, 91, 144, 148, 155, 170, 203, 206, 215, 289, 324, 325, 339, 371, 422], "papineni": 324, "par_count": 317, "para": [55, 57, 59, 64, 66, 75, 78, 79, 86, 87, 99, 109, 192, 373, 399, 424], "para_block_read": [57, 66, 71, 78, 87, 99, 103], "para_path": [57, 79], "paradigm": 422, "paragno": [57, 72], "paragraph": [57, 63, 64, 66, 68, 72, 78, 79, 87, 90, 91, 99, 103, 308, 317, 326, 373, 405], "parallel": [57, 69, 124, 329, 330, 331, 332, 333, 334, 388], "parallel_corpu": [329, 330, 331, 332, 333], "parallelize_preprocess": [0, 357], "parallelproverbuild": [0, 123, 124], "parallelproverbuildercommand": [0, 123, 124], "param": [33, 51, 57, 100, 107, 121, 124, 125, 131, 169, 170, 176, 182, 184, 186, 191, 192, 217, 221, 225, 229, 231, 300, 309, 326, 410], "paramater": 35, "paramet": [13, 14, 23, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 41, 43, 44, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 111, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 142, 145, 147, 148, 149, 150, 151, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 194, 196, 197, 198, 200, 201, 202, 203, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 229, 230, 231, 232, 233, 266, 284, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 352, 353, 355, 356, 357, 358, 373, 375, 377, 378, 404, 410, 413, 417, 422], "parameter": [33, 179, 233], "paramfil": 41, "paraphras": [57, 106], "paras_mod": [57, 75], "parastart": [302, 309], "parecia": 399, "paren": [28, 190, 191, 312, 341, 348, 373], "parens_bracket": [302, 305, 319], "parent": [0, 57, 61, 72, 80, 93, 108, 114, 115, 117, 118, 119, 121, 131, 172, 179, 267, 283, 301, 341, 345, 347, 348, 350, 367, 381], "parent_index": [0, 341, 343, 413], "parent_indic": [0, 341, 343, 413], "parent_of": 403, "parentchar": [341, 347, 348], "parentedtre": [0, 301, 341, 342, 343], "parenthas": 119, "parenthasi": 119, "parenthes": [23, 25, 28, 120, 300, 305, 310, 312, 319, 372, 379, 380, 410], "parenthesi": [25, 57, 62, 309, 312, 373], "parenwidget": [0, 114, 119], "paresd": 120, "pari": [182, 379, 383], "park": 382, "parliament": 373, "pars": [0, 2, 7, 8, 12, 14, 16, 25, 26, 27, 28, 29, 57, 59, 60, 62, 66, 69, 76, 79, 81, 89, 96, 99, 107, 109, 111, 120, 121, 125, 128, 180, 181, 182, 183, 186, 187, 188, 191, 194, 196, 197, 283, 301, 311, 321, 326, 341, 347, 348, 350, 357, 361, 364, 365, 366, 368, 375, 377, 382, 385, 387, 388, 399, 401, 404, 420, 422, 424], "parse_al": [159, 160], "parse_condit": [180, 181], "parse_corpu": [57, 81, 89], "parse_dog": 163, "parse_dr": [180, 181], "parse_error": 378, "parse_fileid_xform": [57, 81, 89], "parse_fox": 163, "parse_friend": 163, "parse_index": [180, 181], "parse_john": 163, "parse_mari": 163, "parse_megam_weight": [0, 30, 34], "parse_on": [159, 160, 169], "parse_output": [213, 224], "parse_repp_output": [302, 311], "parse_s": [0, 159, 160, 163, 169, 175, 180, 194, 404], "parse_sexpr_block": 373, "parse_tadm_weight": [0, 30, 41], "parse_tag": [55, 57, 60], "parse_tagged_s": [159, 169], "parse_text": [159, 163], "parse_to_compil": [180, 187], "parse_to_mean": [180, 187, 385], "parse_to_read": [123, 125], "parse_token_stream": [0, 322, 326], "parse_tweets_set": [0, 195, 197], "parse_vari": [180, 181], "parse_weka_distribut": [30, 44], "parse_weka_output": [30, 44], "parse_with_bindop": [0, 180, 183, 404], "parse_wolf": 163, "parseappl": [0, 12, 16], "parsed_doc": [55, 57, 73, 373, 402], "parsed_docu": [57, 69], "parsed_expr": 404, "parsed_para": [55, 57, 62, 373], "parsed_s": [55, 57, 59, 62, 69, 71, 109, 166, 373, 376, 398, 399, 401, 420], "parsed_word": [55, 57, 62], "parseprimitivecategori": [0, 12, 16], "parser": [1, 2, 3, 7, 8, 14, 16, 25, 26, 27, 28, 29, 78, 111, 120, 121, 125, 159, 160, 161, 162, 163, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 184, 190, 191, 218, 253, 311, 364, 365, 368, 377, 379, 380, 384, 422], "parser_annot": [159, 163], "parser_arg": [162, 165, 167], "parser_dirnam": 169, "parser_eag": 176, "parser_model": 161, "parser_opt": 161, "parser_std": 176, "parseri": [0, 14, 26, 159, 160, 161, 162, 163, 169, 171, 173, 174, 175, 176, 178], "parserul": [199, 205], "parsesubscript": [0, 12, 16], "parsimoni": 198, "parsnip": 364, "part": [1, 28, 55, 57, 65, 69, 72, 75, 79, 81, 89, 93, 99, 105, 107, 117, 119, 135, 136, 142, 156, 162, 165, 172, 182, 192, 199, 209, 211, 213, 214, 218, 221, 223, 225, 285, 300, 301, 309, 317, 332, 340, 341, 347, 348, 350, 358, 367, 373, 380, 381, 383, 400, 405, 409, 411, 417, 422], "part_holonym": 107, "part_meronym": 107, "parti": [324, 325, 328, 335, 337, 339, 355, 388, 422], "partial": [0, 2, 14, 36, 57, 72, 104, 113, 120, 148, 162, 167, 171, 173, 176, 218, 312, 340, 373, 380], "partial_names_demo": [0, 30, 43], "particip": [55, 57, 65, 72, 105, 367, 381, 399], "participant_property_kei": [57, 65], "participl": [57, 89], "particl": 220, "particular": [14, 25, 28, 33, 43, 52, 57, 72, 80, 92, 104, 119, 120, 121, 146, 147, 150, 162, 167, 170, 171, 172, 173, 178, 179, 182, 192, 214, 223, 233, 301, 302, 312, 313, 324, 330, 331, 332, 333, 341, 343, 352, 366, 373, 377, 380, 381, 385, 388, 399, 413, 422], "particularli": [14, 52, 57, 72, 198, 424], "partli": 198, "partner": 402, "pascal": 379, "pasim": 411, "pass": [14, 34, 43, 57, 62, 63, 65, 72, 78, 87, 90, 99, 107, 112, 118, 124, 131, 132, 135, 142, 157, 162, 165, 167, 170, 171, 175, 179, 184, 186, 191, 196, 206, 218, 219, 284, 300, 301, 309, 317, 321, 329, 330, 331, 332, 333, 341, 345, 347, 348, 350, 352, 358, 372, 373, 378, 380, 381, 387, 388, 389, 404, 413, 417, 418, 422], "passar": 399, "passeio": 399, "passiv": [57, 89, 162], "passonneau": 148, "passthroughboxerdrsinterpret": [0, 180, 181], "password": [111, 357, 360], "past": [57, 89, 117, 216, 223, 354, 355, 367, 379, 380, 409], "pastorali": 109, "pat": [57, 72, 169], "patch": [308, 417], "path": [0, 34, 39, 54, 57, 58, 59, 61, 64, 65, 66, 69, 70, 71, 72, 74, 75, 79, 82, 83, 84, 85, 86, 93, 94, 98, 99, 102, 104, 105, 107, 108, 109, 110, 111, 113, 118, 120, 129, 131, 144, 161, 169, 170, 173, 181, 218, 219, 221, 222, 224, 301, 311, 341, 343, 353, 356, 357, 373, 375, 379, 388, 399, 401, 417, 422], "path_point": [57, 59], "path_similar": [55, 57, 107, 417], "path_to_bin": [131, 219], "path_to_dict": 316, "path_to_jar": [131, 163, 175, 224, 315, 316], "path_to_model": [219, 316], "path_to_models_jar": [163, 175], "path_to_sihan_corpora_dict": 316, "path_to_slf4j": 316, "path_to_tre": 118, "patha": 270, "pathb": 270, "pathnam": 356, "pathpoint": [0, 57, 58, 59, 61, 64, 65, 66, 69, 70, 71, 72, 74, 75, 82, 83, 84, 85, 86, 93, 94, 98, 99, 104, 105, 107, 108, 109, 111], "patient": 422, "patil": 328, "pattern": [18, 23, 28, 57, 58, 59, 63, 66, 68, 71, 72, 86, 87, 90, 91, 99, 104, 155, 191, 192, 204, 283, 300, 301, 304, 310, 317, 341, 348, 368, 373, 381, 402, 409, 410, 422], "paul": 422, "paulo": [373, 399, 422], "paus": 61, "pawl": 417, "payload": 373, "payment": 410, "pb": 61, "pb_instanc": 401, "pbb737gold": 410, "pbbabscbn": 410, "pbc": 410, "pc": 176, "pca": 383, "pcfg": [0, 111, 121, 171, 177, 178, 375, 386, 398, 422], "pchart": [0, 159, 398], "pcheck": 413, "pcl": 373, "pcm": 100, "pcp": 399, "pd": 400, "pdf": [12, 42, 53, 57, 85, 106, 140, 148, 182, 225, 265, 289, 311, 324, 325, 326, 328, 335, 339, 345, 349, 357, 362, 365, 366, 422], "pdist": [179, 369], "pdist1": 394, "pdist2": 394, "pdt": [213, 409], "pe08": 422, "pea": 389, "peacekeep": 402, "peak": 317, "pearson": 146, "peaseblossom": 373, "peculiar": 91, "pedersen": [57, 94, 107, 146, 412, 417], "pedi": 399, "pee": 67, "peer": 373, "peg": [333, 334], "pek": 402, "peke": 366, "pela": 399, "pelo": 399, "pelt": 373, "pen": 410, "pen_up": 417, "penalti": [148, 309, 324, 335, 337, 339, 340, 412], "pencil": 410, "penetr": [372, 399], "penn": [57, 62, 81, 89, 164, 206, 213, 262, 319, 341, 347, 348, 350, 365, 373, 376, 381, 401, 422], "pensamento": 399, "peopl": [63, 107, 144, 154, 300, 347, 350, 419], "pep8": 422, "per": [28, 38, 57, 66, 72, 74, 81, 89, 100, 104, 106, 107, 177, 222, 229, 318, 328, 335, 353, 373, 379, 381, 399, 401, 402, 407], "per_s": [57, 107], "perak": 402, "percent": [29, 163, 179, 192, 410], "perceptron": [0, 213], "perceptrontagg": [0, 213, 214, 221, 409], "perder": 399, "pereira": [182, 366], "perf": 367, "perf_count": 373, "perfect": [57, 89, 336, 412], "perfect_and_progress": [57, 89], "perfectli": 223, "perform": [7, 8, 14, 15, 18, 26, 28, 30, 33, 36, 39, 51, 52, 57, 66, 104, 119, 120, 124, 127, 129, 147, 149, 172, 173, 174, 181, 184, 190, 191, 196, 197, 201, 203, 214, 215, 218, 223, 225, 229, 232, 300, 301, 306, 308, 309, 314, 319, 371, 373, 375, 380, 383, 389, 394, 409, 413, 415, 419, 422], "perhap": 379, "perif": 399, "period": [217, 309, 318, 319, 372, 373, 410], "period_comma_follow": [302, 308], "period_comma_prece": [302, 308], "period_context_r": [302, 309], "period_fin": [302, 309], "periodcategori": [341, 344], "peripher": [57, 72], "perkin": 422, "perl": [53, 57, 106, 107, 320, 417], "perldoc": [57, 106], "perluniprop": [57, 106], "permil": 192, "permiss": [63, 68, 74, 83, 88, 90, 91, 94, 113, 211], "permit": [233, 371, 373, 399, 413], "permut": [13, 15, 150, 183, 404], "pero": 364, "perp": 192, "perplex": [135, 136], "persian": 318, "persist": [0, 52, 180], "person": [23, 29, 89, 113, 163, 192, 224, 371, 375, 377, 379, 380, 381, 387, 388, 401, 402, 417, 418, 419, 420], "person01": 379, "persona": 373, "perspect": [57, 72, 381, 412], "perspectiv": [57, 72, 381], "perspective_on": [57, 72, 381], "persuad": 364, "pertain": 373, "pertainym": [57, 107, 417], "pesco\u00e7o": 399, "pessoa": 399, "pessoal": 399, "peter": [329, 330, 331, 332, 333, 334, 422, 424], "petersburg": [320, 410], "petro": 422, "petrograph": 395, "petrov": 220, "pevzner": 151, "pfeat": 233, "pformat": [0, 179, 341, 348, 401], "pformat_latex_qtre": [0, 341, 348, 413], "pg": [306, 314], "phags_pa": [302, 320], "pharaoh": 327, "phd": [100, 145, 187, 190, 306], "phenomena": 170, "phenomenon": 331, "phi": [146, 192, 331, 332, 333], "phi_sq": [143, 146, 394], "philadelphia": 402, "philip": 91, "philipp": [329, 330, 331, 332, 333, 334, 340], "philosophi": 109, "phn": [57, 100, 373], "phone": [55, 57, 100, 163, 284, 304, 373, 422], "phone_tim": [55, 57, 100, 373], "phone_tre": [55, 57, 100, 373], "phone_word_r": [302, 304], "phonem": [30, 67, 100, 306, 314, 373], "phonet": [57, 100, 145, 252, 373], "phonetik": [306, 314], "phonologi": [145, 306, 314], "photo": 410, "php": [57, 65], "phr": 414, "phrasal": [121, 341, 345, 373], "phrase": [25, 26, 28, 57, 68, 72, 88, 155, 300, 323, 324, 338, 340, 341, 348, 372, 373, 381, 413, 414], "phrase_bas": [0, 322], "phrase_extract": [0, 322, 338], "phrase_t": 340, "phraset": [0, 322, 323, 340], "phrasetableentri": [0, 322, 323, 340], "phyast": 112, "physic": 413, "physical_ent": [57, 107, 357, 417], "pi": [96, 131, 143, 144, 192], "pi0": 324, "picasso": 417, "pick": [187, 211, 335, 373], "pickl": [111, 197, 229, 370, 375, 398, 400, 410, 413, 422], "pictur": [57, 91, 372, 373], "piec": [52, 57, 69, 72, 81, 89, 121, 159, 163, 373, 401], "pierpaolo": 424, "pierr": [166, 373, 376], "pietra": [329, 330, 331, 332, 333, 334], "pihs4": 205, "pile": 419, "pili": 395, "pine": 358, "ping": 67, "pinhal": 399, "pinion": 417, "piou": 300, "pip": 421, "pipe": [131, 163, 219, 302, 318, 398], "pipelin": [38, 39, 175, 280], "pit": 373, "pitt": 112, "piv": 192, "pivot": 172, "pixel": 119, "pk": [0, 143, 151], "pl": [16, 57, 75, 80, 106, 111, 182, 308, 318, 324, 337, 366, 367, 379, 380, 398, 407, 410], "pl196x": [55, 57], "pl196xcorpusread": [55, 57, 86], "place": [25, 42, 57, 75, 118, 119, 120, 134, 158, 164, 167, 171, 197, 217, 223, 333, 340, 341, 342, 345, 353, 362, 372, 373, 379, 381, 392, 395, 398, 410, 422], "placehold": [57, 72, 384], "placement": [333, 341, 345], "placent": [57, 107, 357, 417], "placenta": 413, "plai": [55, 57, 100, 170, 373, 376, 377, 380, 420], "plain": [57, 68, 341, 345, 373], "plaintext": [55, 57, 78, 103, 164, 309], "plaintextcorpusread": [55, 57, 78, 87, 103, 110, 373], "plan": [120, 380, 402], "plane": [320, 410], "planeamento": 399, "plastika": 402, "platform": [111, 113, 373, 420, 422], "plausibl": [187, 355], "player": 367, "plc": 25, "pleas": [0, 55, 163, 176, 198, 213, 218, 225, 234, 302, 305, 310, 313, 315, 319, 320, 339, 373, 374, 399, 407, 410, 412, 420, 421, 422], "plot": [0, 116, 179, 197, 229, 238, 300, 317, 383, 405, 408, 422], "plt": 383, "plu": [57, 93, 120, 124, 191, 192, 301, 341, 348, 357, 373, 392, 399, 420, 422], "plug": [180, 188], "plugin": 373, "plur2s": [199, 201, 202], "plural": [201, 202, 216, 223, 408, 409, 414], "pluralis": 408, "plusmn": 192, "ply": 205, "pm": [57, 106, 352, 355, 373, 375, 410], "pmi": [143, 146, 196, 197, 371, 394], "pmod": [166, 376], "pn": 324, "png": [164, 373], "pnp": 363, "po": [0, 14, 27, 33, 39, 55, 57, 59, 61, 62, 63, 64, 65, 69, 70, 71, 72, 74, 75, 82, 84, 85, 93, 95, 98, 105, 107, 108, 109, 120, 163, 169, 175, 177, 181, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 229, 231, 232, 233, 341, 348, 358, 367, 373, 379, 380, 381, 398, 399, 402, 405, 407, 409, 415, 417, 419, 422], "pobj": 367, "pocket": 373, "pode": 399, "poder": 399, "poderemo": 399, "poesio": 144, "poi": 399, "point": [28, 57, 65, 72, 79, 81, 89, 110, 111, 163, 179, 215, 218, 229, 231, 320, 326, 327, 333, 334, 338, 360, 364, 377, 381, 383, 412], "point_entropi": [213, 218], "pointer": [57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 81, 82, 84, 85, 89, 93, 98, 105, 107, 108, 109, 111, 162, 341, 343, 375, 380, 401, 413], "pointwis": [146, 218, 371], "poison": 373, "poisson": 146, "poisson_stirl": [143, 146, 394], "poke": 373, "pol": [399, 417], "polar": [57, 63, 197, 373], "polarity_scor": [195, 198, 405], "polic": 197, "policeman": [417, 418], "polici": [317, 422], "poliqarp": [57, 80], "polish": [57, 80, 103, 106, 373, 422], "polish_polski": [57, 103], "polit": 402, "politi": 109, "polonian": 395, "polysem": [57, 72, 381], "pool": [57, 85], "poor": [163, 176, 375, 405], "pop": [0, 120, 130, 341, 342, 380, 400, 413], "pop_first": [123, 130], "popen": 131, "popitem": [0, 52, 120, 380, 400], "popov": 325, "popul": [135, 142, 182, 196, 197, 366], "popular": [347, 350, 421], "population_of": [182, 366], "popup": 8, "por": [399, 410, 417], "porpois": 400, "porqu": 399, "port": [10, 57, 106, 145, 163, 208, 209, 308, 318, 319, 320, 326, 422, 424], "porta": 208, "porter": [0, 199, 209, 281, 422], "porterstemm": [0, 199, 206, 209, 281, 335, 408, 422], "portertest": 281, "portim": 399, "portion": [7, 8, 14, 16, 28, 57, 59, 100, 162, 171, 173, 174, 178, 225, 309, 373], "portugues": [57, 106, 208, 209, 373, 408, 422], "portuguesa": 399, "portuguese_en": 361, "portuguese_en_fixt": [234, 399], "portuguesecategorizedplaintextcorpusread": [55, 57, 87], "portuguesestemm": [0, 199, 209], "pos1": [57, 76], "pos2": [57, 76], "pos3": [57, 76], "pos_concord": 373, "pos_in_tre": [57, 69], "pos_m2": 233, "pos_m33": 233, "pos_scor": [55, 57, 95, 406], "pos_tag": [0, 93, 169, 177, 213, 276, 373, 409, 420], "pos_tag_s": [0, 213], "pos_tagset": [57, 72, 381], "pose": [57, 72], "posid1": [57, 76], "posid2": [57, 76], "posid3": [57, 76], "posit": [14, 23, 28, 29, 33, 36, 55, 57, 58, 64, 66, 71, 72, 74, 75, 81, 83, 86, 89, 91, 94, 95, 99, 104, 107, 111, 117, 119, 120, 121, 131, 147, 151, 157, 158, 162, 167, 170, 171, 182, 197, 198, 214, 217, 218, 229, 231, 232, 233, 270, 283, 300, 301, 323, 325, 329, 330, 331, 332, 333, 334, 339, 340, 341, 343, 348, 357, 373, 383, 394, 399, 405, 411, 413], "position_of_ngram": [0, 322, 339], "positive_featureset": 36, "positive_prob_prior": 36, "positive_tweet": 373, "positivenaivebay": [0, 30], "positivenaivebayesclassifi": [0, 30, 36], "posix": 111, "poss": [163, 367, 381], "posscor": [95, 406], "possibl": [14, 16, 23, 28, 33, 34, 36, 46, 57, 63, 72, 75, 107, 111, 113, 118, 119, 120, 121, 135, 142, 148, 150, 156, 160, 162, 165, 167, 170, 171, 172, 173, 174, 177, 178, 179, 183, 186, 192, 211, 215, 217, 218, 225, 231, 233, 301, 305, 309, 319, 323, 329, 330, 331, 332, 333, 336, 338, 341, 343, 355, 357, 358, 372, 373, 375, 377, 380, 381, 398, 405, 410, 412, 413, 417, 418], "possible_st": 217, "possible_transit": 217, "possibleanteced": [0, 180, 184], "possibli": [13, 16, 53, 57, 63, 65, 69, 192, 229, 231, 373, 388, 402, 417], "post": [55, 57, 60, 82, 305, 319, 355, 360, 367, 373, 402, 410, 422], "postag": [0, 215, 227, 229], "postag_tre": [0, 25, 27], "posthum": 399, "postord": [341, 348], "postpl": 233, "postposit": 220, "postscript": [119, 180, 185], "postura": 399, "potato": [57, 72, 381], "potenti": [70, 120, 121, 144, 309, 373, 377, 380], "pouco": 399, "pound": [192, 373, 417], "pour": [151, 373], "power": [146, 223, 373], "powershot": [57, 91, 373], "po\u00e7o": 399, "pp": [29, 88, 96, 151, 163, 175, 179, 201, 222, 306, 314, 364, 366, 368, 373, 375, 382, 386, 398, 399, 401, 407, 413, 414, 415], "pp1": 205, "pp3n": 373, "pp560": 96, "ppattach": [55, 57], "ppattachmentcorpusread": [55, 57, 88], "ppdb": [57, 106, 422], "ppdp": 172, "pprint": [0, 25, 55, 57, 69, 72, 105, 107, 179, 341, 348, 357, 373, 376, 380, 381, 384, 417], "pprint_fram": [55, 57, 105], "pprint_memb": [55, 57, 105], "pprint_subclass": [55, 57, 105], "pprint_themrol": [55, 57, 105], "pr": [0, 218, 357], "practic": [57, 72, 324, 328, 335, 337, 339, 347, 350, 373, 409, 417, 420], "pragmat": 148, "praguej": 399, "prais": 410, "prasa": [57, 75], "prd": 414, "pre": [25, 57, 87, 113, 135, 142, 169, 175, 176, 217, 221, 309, 310, 335, 341, 348, 379, 404, 418, 422], "pre1": [199, 204], "pre32": [199, 204], "prec": [147, 214, 409], "prec_count": 324, "preced": [28, 33, 57, 72, 100, 104, 135, 136, 148, 198, 204, 223, 283, 300, 309, 319, 377, 381, 410], "precipit": 373, "precis": [0, 25, 28, 29, 57, 79, 143, 147, 150, 196, 213, 214, 225, 231, 324, 325, 328, 335, 339, 368, 394, 405, 407, 409, 422], "precomput": 179, "precondit": [33, 176], "pred": [180, 188, 191, 301, 367, 384, 392], "predhold": [0, 123, 127], "predic": [15, 57, 81, 89, 127, 180, 181, 182, 188, 191, 301, 366, 373, 380, 392, 396, 401, 404], "predicate_valu": 373, "predict": [34, 38, 52, 57, 72, 147, 167, 179, 213, 214, 221, 330, 331, 332, 379, 381, 410], "predictor": [162, 379], "predictorrul": [0, 159, 165], "predid": [57, 81, 89], "predominatement": 399, "pref": [199, 201, 202], "prefac": [57, 58, 64, 66, 71, 74, 75, 83, 86, 87, 94, 99, 104, 109], "prefer": [179, 182, 306, 308, 340, 364], "prefix": [32, 57, 106, 113, 118, 120, 132, 148, 162, 171, 176, 201, 202, 204, 205, 210, 281, 355, 379, 380, 413], "prefix_replac": [0, 199, 210], "prefix_step2a_success": [199, 209], "prefix_step3a_noun_success": [199, 209], "prefix_step3b_noun_success": [199, 209], "preflabel": [182, 366], "prehistor": 417, "prejudic": [57, 72], "preliminari": 25, "premis": [127, 384, 396], "preorder": [341, 348], "preosta": 109, "prep": [57, 72, 88, 367, 373, 381, 398, 399, 402, 413, 414], "prepar": [0, 94, 317, 373, 422], "prepend": 111, "prepnadjn": 364, "prepnadjnp": 364, "prepnpcompl": 364, "preposit": [57, 72, 88, 192, 220, 332, 368, 373, 381], "preprocess": [0, 38, 121, 135, 197, 198, 335, 391], "presenc": [0, 143, 148, 197], "present": [33, 42, 52, 57, 89, 107, 120, 124, 131, 152, 170, 171, 172, 196, 201, 202, 206, 324, 329, 330, 331, 332, 333, 341, 342, 362, 371, 373, 380, 383, 402, 410, 422], "preserv": [46, 107, 117, 120, 135, 142, 181, 304, 321, 380, 411], "preserve_cas": [304, 410], "preserve_lin": 302, "presid": [36, 300, 373, 402], "president": 364, "presidi": 395, "press": [73, 306, 314, 329, 330, 331, 332, 333, 334, 340, 412], "presum": 205, "presuppos": [57, 72, 319, 381], "preta": 399, "pretermin": 121, "pretrain": 221, "pretti": [32, 57, 105, 162, 184, 192, 341, 345, 348, 349, 357, 373, 399, 410, 414], "pretty_format": [30, 32, 143, 147, 159, 162, 180, 184, 189, 378, 394], "pretty_format_edg": [159, 162], "pretty_format_leav": [159, 162], "pretty_print": [0, 163, 180, 184, 341, 348, 378, 413], "prettydict": [55, 57, 72], "prettylazyconcaten": [55, 57, 72], "prettylazyiteratorlist": [55, 57, 72], "prettylazymap": [55, 57, 72], "prettylist": [55, 57, 72, 381], "prettyprint": [0, 341, 348], "prev": [180, 185], "prevent": [28, 33, 57, 107, 117, 121, 124, 129, 197, 373, 422], "previou": [30, 57, 72, 113, 152, 162, 173, 174, 202, 223, 309, 332, 333, 334, 341, 345, 355, 360, 409], "previous": [57, 107, 154, 196, 321, 333, 341, 348, 417], "previous_cept": [322, 334], "previous_edg": 162, "previous_in_tablet": [322, 334], "prevword": [30, 33], "price": [373, 376, 422], "pricktimb": 395, "prim_onli": 13, "primari": [15, 43, 67, 182, 223, 366, 373, 410], "primarili": [119, 373, 424], "prime": [192, 375], "primeiro": 399, "primit": [13, 16, 52], "primitivecategori": [0, 12, 13], "primou": 399, "princeton": [57, 107, 417], "princip": 373, "principl": [57, 72, 306, 314, 324, 325, 328, 335, 337, 339, 377], "princ\u00edpio": 399, "print": [7, 8, 14, 28, 29, 30, 32, 33, 46, 51, 55, 57, 72, 91, 95, 102, 105, 107, 111, 112, 117, 119, 124, 125, 126, 128, 129, 131, 135, 147, 162, 163, 164, 176, 177, 179, 182, 184, 186, 191, 192, 196, 202, 208, 209, 211, 213, 214, 215, 218, 223, 229, 231, 283, 300, 309, 311, 316, 318, 323, 324, 329, 330, 331, 332, 333, 338, 341, 345, 348, 349, 354, 355, 357, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 377, 379, 380, 382, 383, 384, 385, 388, 392, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 419, 422], "print_assumpt": [123, 124, 126, 128, 388], "print_concord": [0, 300], "print_error_to": 113, "print_grammar": [162, 165, 167, 398], "print_maxent_test_head": 369, "print_mptre": 413, "print_pars": 171, "print_proof": [0, 123, 127], "print_ptre": 413, "print_sent": 167, "print_str": [0, 357, 416], "print_template_statist": [213, 215, 216, 409], "print_tim": [162, 165, 167, 398], "print_to_fil": [114, 119], "print_tre": [162, 165, 167], "printccgderiv": [0, 12, 14, 364, 365], "printccgtre": [0, 12, 14], "printtyp": [0, 180, 191], "printunus": [215, 216, 409], "prior": [33, 36, 46, 48, 119, 218, 309, 322, 324, 326, 329, 330, 331, 332, 333, 339], "prison": [163, 371], "privileg": 360, "prn": 175, "pro": [57, 90, 184, 364, 367, 373, 377, 378, 399], "pro_w4": [199, 204], "pro_w53": [199, 204], "pro_w54": [199, 204], "pro_w6": [199, 204], "pro_w64": [199, 204], "proadj": 399, "prob": [0, 33, 35, 121, 159, 171, 179, 300, 369, 398, 400, 413], "prob_alignment_point": [322, 329, 330], "prob_all_align": [322, 329, 330], "prob_classifi": [30, 31, 33, 35, 44, 369], "prob_classify_mani": [30, 31, 38, 44, 369], "prob_dict": 179, "prob_dist": 179, "prob_kwarg": [179, 341, 342, 346], "prob_of_align": [322, 334], "prob_single_quot": [302, 318], "prob_t_a_given_": [322, 329, 330, 331, 332, 333, 334], "probabilist": [0, 111, 121, 159, 170, 171, 172, 177, 178, 179, 218, 341, 375, 386, 422], "probabilistica": 179, "probabilisticbottomupinitrul": [0, 159, 171], "probabilisticbottomuppredictrul": [0, 159, 171], "probabilisticdependencygrammar": [0, 121, 172], "probabilisticfundamentalrul": [0, 159, 171], "probabilisticleafedg": [0, 159, 171], "probabilisticmixin": [0, 179, 341, 342, 346], "probabilisticnonprojectivepars": [0, 159, 170], "probabilisticproduct": [0, 121], "probabilisticprojectivedependencypars": [0, 159, 172], "probabilistictre": [0, 341, 346], "probabilistictreeedg": [0, 159, 171], "probability_chang": 340, "probability_fixt": [234, 400], "probability_t": [329, 330, 331, 332, 333], "probabl": [0, 14, 28, 31, 33, 35, 36, 38, 46, 47, 48, 121, 135, 138, 150, 159, 171, 172, 178, 213, 218, 223, 225, 323, 326, 329, 330, 331, 332, 333, 334, 340, 347, 350, 355, 361, 392, 394, 412, 417, 422], "probdist": 179, "probdist_dict": 179, "probdist_factori": 179, "probdisti": [0, 31, 33, 35, 38, 44, 150, 179, 218], "problem": [25, 38, 46, 57, 72, 111, 157, 199, 311, 324, 364, 373, 380, 413, 422], "problemat": [368, 398], "proc": 398, "proce": 317, "procedur": [121, 170, 173], "proceed": [57, 63, 68, 83, 85, 88, 90, 91, 96, 148, 149, 171, 176, 203, 324, 325, 335, 337, 339, 358], "process": [0, 2, 14, 25, 26, 31, 46, 48, 49, 50, 57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 82, 84, 85, 87, 93, 96, 98, 104, 105, 107, 108, 109, 111, 119, 120, 125, 143, 160, 162, 170, 171, 173, 174, 179, 180, 182, 191, 194, 198, 200, 201, 204, 214, 218, 221, 225, 229, 235, 303, 307, 312, 317, 321, 333, 334, 340, 341, 348, 352, 353, 355, 357, 366, 373, 375, 388, 392, 398, 402, 420, 422], "process_bundl": [0, 180, 182], "process_next_express": [180, 191], "process_quoted_token": [180, 191], "process_thread": [123, 125], "procura": 399, "prod": [121, 178, 192, 398], "prod1": 398, "prod2": 398, "produc": [14, 29, 33, 46, 48, 52, 57, 107, 120, 121, 139, 144, 159, 162, 164, 165, 167, 170, 171, 173, 174, 177, 178, 179, 181, 188, 201, 216, 223, 225, 229, 300, 302, 309, 317, 326, 327, 331, 332, 333, 339, 341, 345, 348, 354, 373, 380, 390, 402, 410, 412, 413, 417], "product": [0, 7, 8, 33, 57, 91, 115, 121, 125, 148, 162, 167, 171, 172, 173, 174, 178, 218, 221, 233, 341, 347, 348, 350, 373, 375, 376, 379, 382, 386, 398, 405, 413], "product_reviews_1": [57, 91], "product_reviews_2": 91, "productionlist": [0, 114, 115], "professor": 402, "profil": [30, 42], "program": [57, 107, 118, 119, 125, 131, 159, 162, 164, 165, 178, 181, 185, 206, 209, 218, 300, 326, 347, 350, 357, 367, 420, 422], "programm": 422, "progress": [7, 57, 89, 113], "progress_bar": 357, "progressmessag": [0, 113], "proj": 225, "project": [22, 42, 57, 67, 105, 170, 172, 176, 225, 235, 345, 349, 359, 373, 374, 381, 417, 420, 422, 424], "projectista": 399, "projective_prob_parse_demo": [0, 159, 172], "projective_rule_parse_demo": [0, 159, 172], "projectivedependencypars": [0, 159, 376], "projecto": 399, "projet": 410, "prolog": [181, 182, 366], "prologu": 373, "promin": 134, "promis": 201, "promo": 53, "prompt": [119, 171, 178, 373, 399], "pron": [79, 170, 220, 363, 371, 373, 398, 399, 402], "prone": 322, "pronoun": [91, 180, 184, 220, 371], "pronounc": 67, "pronunci": [57, 67, 373, 422], "proof": [123, 124, 126, 128, 129, 130, 388], "proof_str": [124, 128], "prooftran": 388, "prop": [57, 72, 123, 130, 186, 192, 367, 381, 399], "propag": [57, 72, 119, 186], "propagate_semtyp": [55, 57, 72], "propbank": [55, 57, 72, 361, 381, 422], "propbank_ptb": [373, 401], "propbankchaintreepoint": [55, 57, 89, 401], "propbankcorpusread": [55, 57, 89], "propbankinflect": [55, 57, 89, 401], "propbankinst": [55, 57, 89, 373, 401], "propbankpoint": [55, 57, 89], "propbanksplittreepoint": [55, 57, 89, 401], "propbanktreepoint": [55, 57, 89, 401], "propdemo": [0, 180, 186], "proper": [182, 220, 285, 373], "properli": [110, 267, 283, 398], "properti": [33, 57, 59, 72, 78, 81, 89, 104, 106, 111, 113, 117, 118, 120, 124, 125, 126, 127, 135, 142, 146, 163, 177, 179, 182, 184, 186, 191, 198, 213, 214, 218, 223, 224, 231, 232, 233, 301, 304, 309, 323, 324, 328, 340, 341, 348, 360, 366, 367, 373, 377, 388, 396], "property_nam": [227, 231], "propfil": [57, 89], "propn": [182, 366, 377, 379, 404], "proport": 412, "proportion": 324, "propos": [203, 206, 306, 314, 340], "proposit": [181, 186, 388], "propriament": 399, "pros_con": [55, 57], "prosconscorpusread": [55, 57, 90], "prose": [57, 109], "prosodi": 306, "protest": 373, "protocol": [111, 177, 375], "prototyp": 422, "provabl": 388, "prove": [123, 124, 125, 126, 127, 128, 129, 130, 148, 377, 388, 396], "proven": [57, 107, 127, 396], "prover": [0, 123, 124, 125, 127, 128, 129, 130, 184, 191, 385, 396, 422], "prover9": [0, 123, 422], "prover9_input": [123, 128], "prover9_search": 388, "prover9command": [0, 123, 128, 388, 396], "prover9commandpar": [0, 123, 126, 128], "prover9except": [0, 123, 128], "prover9fatalexcept": [0, 123, 128], "prover9hom": 388, "prover9limitexceededexcept": [0, 123, 128], "prover9par": [0, 123, 126, 128], "provercommand": [0, 123, 124, 128], "provercommanddecor": [0, 123, 124, 127], "proverparseerror": [0, 123, 127, 129, 130], "provid": [14, 42, 52, 53, 55, 57, 59, 69, 72, 81, 83, 86, 89, 91, 92, 98, 100, 108, 111, 113, 119, 120, 122, 128, 131, 135, 136, 138, 145, 146, 148, 154, 157, 161, 162, 164, 169, 170, 171, 176, 179, 180, 182, 186, 188, 205, 209, 211, 218, 225, 281, 300, 302, 352, 357, 366, 371, 373, 374, 375, 380, 381, 388, 394, 401, 402, 404, 412, 413, 420, 422], "provied": 316, "provis": 205, "proxi": [72, 110, 355, 357], "prp": [163, 175, 214, 221, 373, 377, 399, 409, 414], "prt": [79, 213, 220, 371], "prtree": 413, "prune": [322, 333, 340, 417], "psalm": 372, "psent": 399, "psent1": 399, "psent2": 399, "pseudo": [109, 150, 178], "pseudocod": [30, 32], "pseudosent": 317, "psi": 192, "psoe": 402, "pst": [57, 72, 410], "pst2": 410, "psy": [57, 65], "pt": [57, 72, 106, 381, 399, 410], "ptb": [220, 305, 319, 373, 401], "ptbtoken": 315, "ptcl": 220, "ptext1": 399, "ptext2": 399, "ptext3": 399, "ptext4": 399, "pth": 356, "ptree": [341, 343, 413], "pu": 176, "public": [140, 146, 300, 354, 355, 373, 422], "publicdomain": [57, 85], "publicli": 203, "publicystyczni": [57, 75], "publish": [145, 206, 337, 371, 420, 422], "pukka": 417, "pull": [163, 192, 364, 410, 417], "pumpkin": 404, "pun": 363, "punc": [170, 373, 402], "punc_list": [195, 198], "punct": [163, 175, 180, 184, 190, 191, 302, 308, 414], "punct_1": [302, 308], "punct_2": [302, 308], "punct_regex": [302, 308], "punctuat": [42, 57, 58, 61, 62, 63, 65, 66, 68, 78, 79, 82, 83, 86, 87, 90, 91, 93, 99, 102, 106, 108, 166, 170, 197, 220, 225, 302, 305, 309, 319, 371, 399, 405, 410], "punkt": [0, 302, 375, 399, 410, 422, 424], "punkt_debug_decis": 284, "punkt_tab": 309, "punktbaseclass": [0, 302, 309, 410], "punktdecod": [0, 212], "punktlanguagevar": [0, 302, 309, 410], "punktparamet": [0, 302, 309, 410], "punktsentencetoken": [0, 302, 309, 399], "punkttoken": [0, 302, 309, 375, 399], "punkttrain": [0, 302, 309, 410], "pup": [57, 106], "pup_numb": [302, 308], "pup_punct": [302, 308], "pup_symbol": [302, 308], "purchas": [57, 91, 373, 422], "pure": 198, "purg": [180, 186, 404], "purific": 424, "purpos": [28, 35, 43, 57, 107, 112, 117, 119, 131, 135, 172, 196, 218, 227, 329, 330, 331, 332, 333, 347, 350, 352, 373, 379, 381, 417], "push": 373, "put": [57, 62, 105, 120, 123, 130, 135, 158, 304, 373, 379, 380, 401, 419], "put_al": [123, 130], "put_atom": [123, 130], "put_direct": 373, "put_spati": 373, "pwd": 111, "py": [10, 14, 39, 113, 222, 231, 232, 233, 235, 284, 308, 373, 375, 380, 398, 415, 422], "py3_data": [0, 54], "pye": 410, "pyfound": 422, "pylab": 300, "pypi": [217, 421], "pyplot": 383, "pyramu": 373, "pyr\u00e9n\u00e9": [57, 60], "pytest": 394, "pytestmark": 262, "python": [0, 10, 14, 25, 38, 52, 57, 100, 106, 110, 111, 112, 113, 117, 120, 131, 132, 135, 137, 144, 163, 181, 182, 203, 204, 206, 216, 217, 221, 229, 301, 308, 310, 318, 320, 352, 353, 355, 357, 360, 366, 373, 375, 379, 380, 388, 392, 395, 413, 417, 420, 422, 424], "python2": 364, "python25": 113, "python38": 421, "pythonhom": 113, "pyupgrad": 422, "p\u00e9": 399, "p\u00f3stuma": 399, "p\u00fablico": 399, "p\u0857\u18e1": [], "q": [7, 8, 57, 60, 79, 113, 133, 145, 191, 365, 366, 378, 379, 380, 384, 388, 392, 395, 400, 403, 404, 413], "q14": [57, 106], "q25433": 133, "q2name": [0, 133], "q2tag": [0, 133], "q4289225": 133, "q79388": [57, 60], "qam": 394, "qc": 373, "qcode": 133, "qin": 328, "qtree": [341, 348], "quadgram": [53, 146], "quadgram_fd": 53, "quadgramassocmeasur": [0, 143, 146, 371, 394, 422], "quadgramcollocationfind": [0, 53, 371], "quadro": [208, 399], "quadrupedibu": 109, "qualifi": [132, 405], "qualiti": [46, 57, 84, 91, 314, 337, 339, 373, 424], "quando": 399, "quant": [180, 191, 367], "quanti": [57, 72, 381], "quantif": 384, "quantifi": [124, 183, 191, 257, 377, 378, 392], "quantifiedexpress": [0, 180, 191], "quantit": 179, "quantiti": [46, 341, 344], "quarter": 163, "que": [208, 364, 373, 399], "queen": 383, "queer": 300, "quel": 151, "quer": 399, "querem": 399, "queri": [0, 22, 119, 182, 192, 300, 341, 343, 351, 354, 355, 373, 402], "query_regex": 276, "question": [23, 24, 97, 113, 146, 181, 354, 372, 402, 410, 422], "queu": 398, "queue": [171, 177], "quick": [0, 153, 157, 163, 175, 221, 395], "quicker": 388, "quier": 410, "quiet": [44, 113, 186, 362], "quieta": 399, "quinca": 399, "quit": [7, 8, 23, 25, 57, 79, 91, 176, 198, 328, 380], "quoc": 328, "quot": [22, 57, 75, 120, 131, 191, 192, 283, 319, 320, 341, 348, 373, 379, 380, 389, 392, 399, 410], "quotat": 410, "quote_char": 392, "r": [0, 8, 23, 25, 57, 61, 67, 72, 76, 79, 95, 107, 111, 112, 125, 127, 135, 142, 143, 145, 147, 150, 179, 191, 204, 211, 214, 216, 223, 232, 308, 310, 319, 320, 324, 325, 328, 337, 339, 357, 363, 365, 366, 368, 369, 372, 373, 376, 377, 378, 380, 381, 384, 385, 388, 392, 394, 395, 396, 399, 400, 402, 403, 404, 406, 409, 410, 411, 412, 413], "r0": [125, 339, 377], "r1": [125, 339, 368, 377, 384], "r2": [339, 368, 384], "r3": 368, "r4": 368, "r5": [339, 368], "r6": 368, "r7": 368, "r7209": 400, "r8": 368, "r9": 368, "r_nr": [0, 179], "ra2": 205, "rabin": 218, "race": [100, 373], "radic": 192, "radiu": 119, "radnei": 372, "rae0": 205, "rag": 373, "rai": 410, "railcar": 417, "railroad_car": 417, "railway_car": 417, "rain": [148, 372, 373, 394, 404, 410], "rais": [13, 14, 15, 28, 34, 52, 57, 59, 86, 110, 111, 117, 119, 120, 121, 129, 131, 132, 135, 137, 142, 147, 150, 179, 186, 190, 191, 209, 231, 232, 233, 285, 300, 312, 335, 341, 342, 343, 348, 355, 357, 365, 374, 375, 380, 388, 389, 391, 404, 410, 413, 422], "raise_on_error": 113, "raise_unorderable_typ": [0, 131], "raita": 151, "rakuten": 308, "ralph": [57, 72], "ramakrishnan": 357, "rami": [163, 224], "ran": [398, 413], "randn": 317, "random": [46, 50, 104, 136, 150, 171, 218, 229, 300, 373, 394, 395, 399], "random_sampl": [213, 218], "random_se": [135, 136, 300], "random_st": 383, "randomchartpars": [0, 159, 171, 398], "randomis": 50, "randomli": [150, 179, 197, 218], "rang": [29, 30, 33, 57, 107, 120, 152, 162, 179, 192, 218, 229, 231, 302, 320, 322, 323, 328, 341, 342, 368, 369, 370, 373, 375, 380, 397, 400, 409, 412, 413, 417, 424], "range_r": [0, 120], "rangefeatur": [0, 120, 380], "rank": [33, 53, 57, 72, 152, 215, 339, 394], "rank_gap": [152, 371], "ranks1": 152, "ranks2": 152, "ranks_from_scor": [0, 143, 152, 371], "ranks_from_sequ": [0, 143, 152, 371], "rape": 163, "rapid": 156, "raquo": 192, "rare": [33, 198, 309], "rarr": 192, "rate": [25, 63, 149, 213, 265, 311, 336, 354, 355, 373, 397, 419], "rater": 422, "rather": [32, 35, 53, 57, 72, 107, 111, 120, 146, 164, 167, 179, 182, 204, 215, 229, 309, 321, 366, 371, 373, 374, 379, 380, 381], "ratio": [53, 114, 119, 146, 147, 179, 214, 324, 328, 371, 412], "ration": 324, "ratnaparkhi": 88, "raw": [55, 57, 59, 78, 80, 102, 111, 113, 169, 225, 265, 317, 354, 360, 373, 375, 391, 399, 410, 412], "raw_field": [0, 321], "raw_freq": [143, 146, 371, 394], "raw_mod": [55, 57, 80], "raw_pars": [159, 163, 175], "raw_parse_s": [159, 163, 175], "raw_tag_s": [159, 163], "raw_text": 399, "rb": [163, 213, 214, 216, 223, 373, 375, 399, 409, 414, 415, 420], "rbr": [214, 373, 409, 410], "rc": 377, "rcb": [305, 319], "rce": 422, "rceil": 192, "rcon": [192, 402], "rd": 407, "rdb": 366, "rdparser": 1, "rdparser_app": [0, 1], "rdquo": 192, "re": [12, 13, 25, 28, 33, 43, 57, 58, 63, 66, 68, 71, 87, 90, 91, 99, 104, 110, 111, 113, 119, 120, 124, 129, 135, 182, 198, 203, 218, 305, 307, 308, 309, 310, 318, 319, 324, 332, 339, 366, 368, 373, 388, 402, 409, 410, 421, 422], "re2": 205, "re_boundary_realign": [302, 309], "re_show": [0, 357, 416], "reach": [7, 32, 57, 91, 104, 107, 162, 197, 341, 343, 352, 355, 373, 388, 417], "reachabl": [51, 417], "read": [0, 39, 42, 52, 55, 57, 58, 59, 60, 62, 63, 64, 66, 67, 68, 69, 71, 74, 75, 76, 79, 83, 85, 86, 88, 90, 91, 94, 97, 99, 100, 101, 104, 106, 107, 108, 111, 117, 120, 123, 125, 131, 164, 180, 186, 188, 203, 229, 285, 321, 323, 324, 328, 334, 339, 341, 344, 348, 354, 356, 364, 365, 367, 379, 384, 385, 388, 392, 398, 404, 422], "read_": 131, "read_alignedsent_block": [55, 57, 58, 104], "read_app_valu": [0, 120], "read_blankline_block": [55, 57, 66, 71, 87, 99, 104], "read_block": [55, 57, 58, 64, 66, 71, 74, 75, 79, 80, 86, 94, 99, 104, 108, 373], "read_cmudict_block": [55, 57, 67], "read_depgraph": [180, 189, 384], "read_expr": [365, 384, 388, 392, 396, 403], "read_fil": [180, 187], "read_fstruct_valu": [0, 120], "read_grammar": [0, 121], "read_int": [0, 131], "read_int_valu": [0, 120], "read_leaf": [341, 348, 413, 414], "read_line_block": [55, 57, 104], "read_log": [0, 180, 191], "read_logic_valu": [0, 120], "read_nod": [341, 348, 413], "read_numb": [0, 131], "read_parse_blankline_block": [55, 57, 78], "read_parti": [0, 120], "read_regexp_block": [55, 57, 104], "read_rul": [199, 208], "read_sent": [0, 180, 194], "read_set_valu": [0, 120], "read_sexpr_block": [55, 57, 104, 373], "read_str": [0, 131], "read_str_valu": [0, 120], "read_sym_valu": [0, 120], "read_timit_block": [55, 57, 100], "read_tuple_valu": [0, 120], "read_typ": [0, 180, 191], "read_valu": [0, 120, 180, 186], "read_var_valu": [0, 120], "read_whitespace_block": [55, 57, 104, 373], "read_wordpunct_block": [55, 57, 104], "readabl": [0, 111, 144, 230, 300, 309, 320, 358, 377, 381, 399, 415, 422], "reader": [0, 42, 43, 52, 111, 191, 211, 335, 375, 380, 381, 384, 417, 420, 422], "reader_cl": 110, "readerror": [0, 131, 389], "readi": [135, 163, 379], "readili": 371, "reading_command": 125, "readingcommand": [0, 123, 125], "readlin": [0, 104, 111, 373], "readm": [55, 57, 59, 83, 84, 107, 263, 373, 374, 388, 399], "real": [135, 149, 179, 192, 233, 331, 397, 409, 417], "realign": 309, "realign_boundari": [309, 410], "realist": 417, "realiti": [57, 72, 381], "realiz": [57, 72], "realli": [24, 191, 198, 319, 379, 380, 405, 410], "reason": [57, 87, 125, 127, 135, 138, 191, 218, 262, 318, 354, 357, 380, 388, 412, 420], "rebbani": 202, "rebecca": 311, "rebuilt": 39, "recal": [0, 25, 28, 29, 143, 147, 150, 196, 213, 214, 325, 328, 335, 368, 379, 394, 405, 407, 409, 422], "recalcul": [46, 50, 135, 142, 309], "recdat": [100, 373], "recebido": 399, "receiv": [35, 125, 213, 354, 377, 388], "recent": [7, 8, 57, 91, 104, 117, 162, 173, 174, 223, 231, 232, 233, 312, 355, 365, 368, 369, 373, 374, 375, 380, 382, 388, 389, 400, 401, 404, 410, 411, 412, 413, 417], "rechunk": [26, 29], "recip": [117, 157, 422], "recogn": [33, 92, 165, 186, 373, 380, 402, 410], "recognis": 422, "recognit": [73, 218, 402, 422], "recommend": [25, 28, 57, 91, 102, 120, 151, 163, 198, 206, 213, 223, 302, 311, 360, 380, 383, 414, 417, 421], "reconstruct": [52, 145, 162, 167, 373, 413], "record": [2, 7, 8, 29, 30, 57, 60, 61, 93, 100, 107, 113, 121, 148, 162, 171, 173, 174, 178, 179, 182, 319, 321, 328, 366, 373, 411, 417], "recov": [301, 355], "rectangl": 119, "recurs": [1, 7, 25, 113, 173, 180, 184, 186, 191, 225, 357, 382, 389, 404], "recursionerror": 382, "recursivedesc": [0, 159, 407], "recursivedescentpars": [0, 159, 173, 398, 407], "red": [117, 119, 221, 341, 345], "redefin": [179, 400], "redesign": 422, "redirect": [131, 163, 164], "redirect_arc": [159, 164], "redo": [373, 422], "reduc": [1, 8, 46, 48, 49, 50, 51, 52, 111, 147, 159, 174, 176, 202, 214, 216, 309, 373, 383, 419], "reduce_len": [284, 304, 410], "reduce_lengthen": [0, 302, 304], "reducible_product": [159, 174], "reduct": [8, 43, 51, 57, 72, 174, 181, 381], "redund": [13, 107, 377, 417], "redupl": 373, "reed": 372, "reentran": 380, "reentranc": [120, 379], "reentrant": [120, 380], "ref": [61, 73, 147, 151, 181, 184, 325, 328, 336, 337, 339], "ref1": [325, 328], "ref1a": [324, 328, 339], "ref1b": [324, 328, 339], "ref1c": [324, 328, 339], "ref2": 325, "ref2a": [324, 328, 339], "ref_len": 337, "refactor": 422, "refer": [0, 25, 28, 33, 52, 61, 80, 96, 117, 120, 146, 147, 149, 150, 151, 164, 167, 170, 173, 181, 182, 184, 214, 231, 297, 306, 314, 318, 322, 324, 325, 327, 328, 334, 335, 336, 337, 339, 340, 341, 345, 347, 348, 349, 350, 352, 355, 357, 362, 366, 373, 374, 375, 378, 379, 393, 394, 399, 407, 408, 409, 410, 417, 422], "referenc": [136, 326, 340], "reference1": [324, 335, 337], "reference2": [324, 335, 337], "reference3": [324, 335, 337], "reference_set": [394, 407], "referenced_label": [180, 181], "referringentri": [57, 72], "refin": [30, 32, 229, 347, 350], "reflect": [23, 26, 170, 197, 317, 341, 348, 357, 373], "reflex": [121, 182, 357], "reflexive_appear": 373, "refrain": 373, "refrescant": 399, "refus": 380, "reg": 192, "regard": [42, 218, 311], "regardless": [111, 162, 373, 412], "regex": [57, 72, 131, 283, 304, 305, 319, 422], "regex_remove_punctu": [195, 198], "regexp": [0, 25, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 75, 78, 79, 81, 82, 83, 84, 85, 87, 89, 90, 91, 93, 97, 98, 99, 102, 103, 104, 105, 107, 108, 109, 120, 199, 223, 300, 302, 304, 320, 357, 368, 373, 409], "regexp_pattern": 368, "regexp_span_token": [0, 302, 320], "regexp_tagg": 223, "regexp_token": [0, 302, 310, 410], "regexpchunkpars": [0, 3, 28], "regexpchunkrul": [0, 28, 368], "regexppars": [0, 25, 28], "regexpstemm": [0, 199, 207], "regexptagg": [0, 213, 216, 223, 377, 385, 409], "regexptoken": [0, 57, 58, 66, 71, 99, 302, 310, 373], "regim": 218, "region": [57, 100, 119, 182], "region_domain": [107, 417], "regist": [118, 119, 132, 134, 351, 355, 373], "register_tag": [0, 132, 375], "registr": 133, "registri": [57, 60], "regress": [38, 179, 263, 270, 422], "regular": [1, 3, 6, 23, 25, 28, 29, 33, 57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 82, 84, 85, 86, 87, 92, 93, 98, 105, 107, 108, 109, 131, 192, 207, 217, 223, 300, 301, 302, 304, 309, 310, 319, 320, 341, 348, 357, 368, 373, 381, 383, 399, 402, 409], "rei": 399, "rei3i": 205, "reilli": [0, 420, 422], "reivindicar": 399, "reject": [177, 373, 377, 387], "rel": [29, 53, 57, 59, 81, 89, 104, 107, 111, 117, 135, 147, 149, 164, 176, 181, 182, 186, 187, 189, 215, 229, 231, 233, 320, 332, 335, 341, 343, 373, 376, 377, 397, 399, 401, 402, 413, 418], "rel_nam": 182, "relat": [57, 63, 65, 68, 72, 83, 90, 91, 92, 107, 113, 120, 121, 131, 151, 164, 170, 172, 176, 181, 182, 186, 187, 191, 192, 283, 301, 332, 366, 367, 373, 376, 377, 380, 381, 399, 422], "relation_list": [57, 65], "relationship": [52, 57, 63, 107, 121, 172, 367, 417], "relax": 410, "reldict": [192, 402], "releas": [111, 373, 420, 424], "relev": [30, 57, 102, 145, 182, 186, 198, 216, 352, 366, 404, 409], "relextract": [0, 180, 361], "reli": [135, 181, 373], "reliabl": 422, "relief": 117, "religion": [373, 400], "reload": 229, "relsym": [192, 402], "remain": [8, 33, 57, 62, 72, 78, 87, 99, 111, 119, 131, 135, 173, 174, 176, 179, 218, 333, 334, 340, 373, 375, 377, 400, 417], "remaind": [156, 157, 162, 165, 167], "remaining_text": [159, 173, 174], "remark": 198, "rememb": [7, 173], "remi": [304, 410], "remind": 377, "remov": [0, 26, 28, 51, 52, 57, 87, 111, 114, 118, 119, 120, 121, 125, 152, 164, 170, 173, 176, 181, 186, 191, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 233, 265, 304, 309, 319, 321, 333, 340, 341, 342, 347, 348, 350, 371, 373, 375, 388, 391, 408, 410, 413, 422], "remove_blank": [0, 321], "remove_by_address": [159, 164], "remove_callback": [114, 119], "remove_child": [114, 118, 119], "remove_choic": [57, 80], "remove_dupl": [125, 187, 197], "remove_empty_top_bracket": [341, 344, 348, 413], "remove_handl": [0, 284, 302, 304], "remove_preprocessed_fil": [57, 80], "remove_punctu": [30, 42], "remove_unitary_rul": [0, 121], "remove_vari": [0, 120, 380], "remove_widget": [114, 119], "ren": 96, "renam": [120, 184, 191, 380, 398], "rename_var": [120, 380], "rename_vari": [0, 120, 380], "render": [119, 192, 377], "renumber_sent": [180, 181], "reorder": [332, 340, 422], "reparameteris": 46, "repars": [181, 183], "repeat": [46, 50, 120, 121, 304, 309, 324, 333, 334, 355, 410], "repeatedli": [173, 174, 179], "repetit": [25, 28, 188, 405], "repl": 28, "repl_xx": [199, 203], "repl_xx_back": [199, 203], "replac": [1, 6, 13, 16, 28, 51, 57, 65, 72, 75, 111, 117, 118, 119, 120, 121, 123, 127, 129, 134, 162, 167, 170, 180, 184, 187, 191, 197, 201, 202, 205, 210, 232, 304, 305, 319, 331, 340, 353, 354, 367, 373, 375, 396, 410, 413], "replace_al": [123, 130], "replace_back": [199, 203], "replace_bound": [184, 191], "replace_child": [114, 118, 119], "replace_qu": [123, 127], "replace_to": [199, 203], "replace_xmlent": [57, 75], "replacement_tag": [227, 232], "replic": 145, "report": [28, 88, 125, 156, 197, 216, 325, 373, 410, 422], "repp": [0, 302], "repp_dir": 311, "repp_dirnam": 311, "repp_output": 311, "repptoken": [0, 302, 311], "repr": [72, 120, 192, 229, 232, 368, 373, 413], "repres": [2, 13, 14, 15, 16, 25, 30, 33, 34, 41, 49, 51, 57, 63, 68, 72, 84, 91, 93, 100, 102, 107, 109, 120, 121, 124, 125, 144, 159, 160, 162, 165, 170, 171, 172, 173, 176, 179, 180, 186, 188, 191, 196, 197, 218, 221, 224, 225, 301, 302, 307, 309, 317, 323, 329, 330, 332, 333, 334, 338, 340, 341, 344, 348, 357, 369, 373, 379, 380, 381, 383, 394, 396, 399, 402, 405, 411, 417], "represent": [13, 14, 16, 28, 32, 44, 57, 76, 105, 107, 119, 120, 124, 132, 147, 162, 164, 169, 170, 172, 176, 178, 179, 181, 182, 183, 184, 188, 191, 194, 197, 226, 231, 232, 306, 321, 323, 341, 344, 345, 348, 357, 373, 379, 380, 383, 388, 392, 399, 402, 404, 405, 413], "reprfunc": 117, "repris": 412, "reproduc": [135, 136, 300, 391, 395], "request": [10, 104, 119, 134, 155, 249, 317, 355, 373, 422], "requir": [10, 25, 33, 46, 52, 53, 57, 65, 72, 86, 104, 111, 119, 128, 135, 138, 142, 144, 146, 148, 149, 169, 171, 172, 179, 182, 186, 196, 199, 201, 204, 214, 218, 219, 229, 300, 301, 302, 309, 313, 324, 328, 331, 332, 334, 341, 347, 348, 350, 353, 355, 358, 360, 366, 369, 371, 373, 374, 375, 380, 384, 388, 395, 410, 421, 422], "requiresf": [57, 72], "rerank": 161, "reranker_featur": 161, "reranker_opt": 161, "reranker_weight": 161, "rerankingpars": 161, "res_similar": [55, 57, 107, 417], "rescal": 148, "research": [0, 57, 65, 74, 105, 148, 164, 204, 402, 420], "research_pap": 265, "resembl": 284, "reserv": [35, 124, 134, 162, 165, 167, 179, 334, 419], "reset": [7, 8, 400], "reset_cach": [213, 218], "reset_id": [12, 13], "reset_prob": [322, 331, 332, 333, 334], "reset_workspac": [114, 115], "resid": 111, "resin": 371, "resiz": [113, 114, 118, 180, 185], "resnik": [57, 107, 417], "resolut": [0, 91, 123, 181, 361, 402, 422], "resolution_test": [0, 123, 129], "resolutionprov": [0, 123, 129, 388], "resolutionprovercommand": [0, 123, 129, 388, 403], "resolv": [57, 81, 89, 125, 180, 181, 191, 378, 388, 417, 422], "resolve_anaphora": [0, 180, 184], "reson": 306, "resourc": [57, 85, 95, 105, 111, 140, 219, 373, 420], "resource_nam": 111, "resource_url": 111, "resp": [57, 61, 72], "respect": [38, 57, 63, 72, 91, 119, 124, 131, 135, 146, 170, 182, 218, 324, 328, 332, 336, 337, 341, 343, 348, 366, 373, 377, 381, 388, 402, 404], "respond": [18, 22, 23, 24], "respons": [23, 24, 61, 117, 119, 128, 354, 355, 373, 388, 422, 424], "responsabilidad": 399, "rest": [16, 33, 57, 62, 121, 203, 354, 355, 400], "restart": [110, 162], "restr": [12, 13], "restrain": 417, "restrict": [13, 15, 57, 59, 72, 107, 115, 120, 135, 162, 165, 167, 192, 211, 341, 348, 355, 357, 375, 380, 417], "result": [13, 15, 28, 29, 52, 57, 72, 75, 79, 88, 100, 107, 108, 111, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 135, 142, 144, 145, 146, 147, 148, 152, 159, 162, 163, 164, 171, 176, 177, 178, 179, 182, 191, 196, 197, 201, 202, 206, 213, 216, 225, 300, 309, 318, 320, 324, 325, 339, 340, 341, 343, 348, 353, 354, 357, 366, 369, 371, 372, 373, 377, 379, 380, 383, 388, 389, 391, 398, 400, 404, 405, 409, 413, 417, 418], "resultado": 399, "results_list": 371, "results_list2": 371, "results_scor": 371, "resum": [14, 162, 165, 167, 171], "resumpt": 412, "retag": 214, "retain": [53, 107, 309], "retard": 417, "retir": [133, 355], "retoken": 307, "retract": [124, 377, 384, 388], "retract_assumpt": [123, 124, 388], "retract_bind": [0, 120, 380], "retract_sent": [123, 125, 377], "retrain": 399, "retri": 355, "retries_after_twython_except": 355, "retriev": [0, 57, 63, 68, 69, 72, 83, 98, 107, 111, 113, 136, 151, 179, 183, 192, 202, 220, 326, 328, 351, 355, 356, 373, 377, 394, 422], "retry_count": 355, "retry_in": 355, "return": [7, 13, 14, 16, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 184, 186, 187, 188, 190, 191, 192, 194, 196, 197, 198, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 235, 270, 284, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 355, 357, 358, 366, 367, 369, 371, 373, 374, 375, 376, 380, 381, 388, 389, 395, 398, 399, 400, 401, 404, 409, 411, 413, 417, 418, 419, 422], "return_conf": 221, "return_str": [305, 308, 318, 319, 410], "returncod": 128, "retweet": [197, 355], "retweet_count": 353, "reus": [229, 341, 343, 379, 413], "reuter": [373, 391, 422], "rev": 380, "reveng": [57, 72, 381], "revers": [0, 117, 120, 148, 319, 323, 324, 341, 342, 371, 374], "revert": 305, "review": [55, 57, 63, 83, 197, 373, 400, 405, 422], "review_lin": 91, "reviewlin": [55, 57, 91], "reviewscorpusread": [55, 57, 91], "revis": [113, 379, 380, 422], "revivalismo": 399, "revword": [0, 153, 158], "reward": 328, "rewards_and_punish": [57, 72, 381], "rewind": [57, 68, 373], "rewrit": 422, "rewritten": [57, 72], "rewrot": 424, "rfloor": 192, "rflorian": 215, "rgoodtur": 179, "rh": [0, 12, 14, 121, 159, 162, 165, 167, 171, 178, 188, 398], "rho": [192, 339], "ri": 147, "ria": 399, "ribe": [339, 422], "ribes_scor": [0, 322], "rica": 399, "rico_amorim": 399, "rid": [42, 125, 377, 384], "ridden": 410, "ridg": 419, "ridzuan": 402, "riedel": 422, "riesa": 328, "rifir": 394, "right": [7, 8, 14, 15, 24, 25, 28, 30, 57, 65, 112, 113, 119, 121, 134, 135, 147, 157, 162, 164, 167, 171, 173, 174, 176, 177, 178, 192, 198, 209, 219, 223, 229, 266, 319, 332, 333, 341, 343, 347, 348, 350, 357, 360, 363, 368, 373, 379, 380, 399, 402, 410, 413, 415, 422], "right_arc": [159, 176], "right_children": [159, 164], "right_context_tag_pattern": 28, "right_edg": [14, 162, 167, 171], "right_pad_symbol": [135, 357], "right_sibl": [0, 341, 343, 413], "right_tag_pattern": 28, "rightarc": 176, "rightarrow": 119, "rightmost": [8, 157, 172, 174, 226], "rightward": [118, 119, 172], "ring": 397, "ringer": 381, "riot": 197, "risc": 208, "risca": 208, "rise": [46, 49, 388, 401], "risk": 373, "ritheu": 109, "ritualiza": 399, "river": [182, 366], "rkt": 308, "rl": 328, "rlevi": 140, "rlm": 192, "rm_nl": [0, 212], "rmdir": [373, 375], "rnc": 220, "rng": [50, 218], "ro": [57, 106], "ro2": 205, "road": 419, "roar": 373, "robber": 404, "robert": [305, 319, 329, 330, 331, 332, 333, 334, 422], "robin": 422, "robinson": 422, "robust": [135, 201], "rocl": 96, "rogberi": 402, "roger": 405, "roi": 371, "role": [57, 69, 72, 81, 89, 105, 199, 367, 373, 377, 381, 401, 402, 418, 424], "roles_demo": [0, 180, 192], "roleset": [55, 57, 69, 81, 89, 373, 401], "roleset_id": [57, 81, 89], "roll": 373, "romanc": [57, 65, 371, 373, 399, 400], "romanian": [57, 106, 209, 373, 408], "romanianstemm": [0, 199, 209], "ron": 417, "rood": 109, "roof": 118, "roof_color": 118, "roof_fil": 118, "room": [373, 415], "root": [0, 27, 28, 29, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 113, 117, 118, 119, 121, 162, 163, 164, 166, 167, 172, 173, 175, 176, 181, 194, 204, 341, 343, 345, 347, 348, 350, 357, 363, 367, 373, 376, 384, 413, 417], "root_hypernym": [57, 107, 417], "root_label": [28, 29, 57, 69], "root_semrep": [0, 180, 194, 404], "roottyp": [57, 72], "rose": 401, "rosneft": 92, "rot": [57, 72], "roth": 422, "rotoka": [373, 411], "roughli": [305, 319, 373], "rouko": 324, "round": [144, 148, 213, 216, 324, 329, 330, 331, 332, 333, 335, 339, 352, 355, 391, 393, 412], "rover": 396, "row": [57, 63, 117, 158, 182, 197, 214, 341, 345, 366, 394, 409, 419], "row_index": 117, "rowconfig": [114, 117], "rowconfigur": [114, 117], "rowvalu": 117, "royalti": 422, "rp": [214, 409], "rr": 120, "rr1": 205, "rr93": 148, "rr94": 148, "rrb": [163, 175, 305, 319, 409], "rrc": 373, "rsaquo": 192, "rsb": [305, 319], "rslp": [0, 199, 399], "rslpstemmer": [0, 199, 208, 399], "rsquo": 192, "rst": 234, "rstrip": [302, 318], "rt": [373, 410], "rt1": 205, "rte": [37, 55, 57, 422], "rte1": [92, 373], "rte1_dev": 373, "rte1_test": 373, "rte2": [92, 373], "rte2_dev": 373, "rte2_test": 373, "rte3": [92, 373], "rte3_dev": 373, "rte3_test": 373, "rte_classifi": [0, 30], "rte_featur": [0, 30, 37], "rte_pair": 37, "rtecorpusread": [55, 57, 92], "rtefeatureextractor": [0, 30, 37], "rtepair": [37, 55, 57, 92, 373], "rtext": 173, "rthird": 411, "rtupl": [0, 180, 192, 402], "rtype": [47, 124, 135, 137, 160, 170, 186, 192], "ru": [57, 106, 213, 220], "ru2": 205, "rude": [0, 18], "rude_chat": [0, 18, 21], "rudnick": [328, 424], "rue": 379, "rug": [42, 398, 407], "rule": [0, 2, 7, 8, 12, 13, 14, 15, 25, 28, 35, 57, 72, 109, 121, 148, 162, 165, 167, 170, 171, 172, 179, 182, 198, 199, 205, 213, 215, 216, 227, 229, 231, 233, 257, 300, 311, 366, 373, 377, 379, 382, 384, 398, 409, 417], "rule_based_demo": [0, 159, 170], "rule_dictionari": 205, "rule_index": 208, "rule_tupl": 205, "rulebas": 311, "ruleformat": [216, 229], "rulescor": 216, "ruleset": 14, "rummag": [372, 373], "run": [0, 10, 14, 25, 28, 52, 57, 72, 104, 110, 113, 123, 124, 131, 159, 163, 164, 171, 177, 178, 179, 186, 202, 214, 229, 235, 251, 260, 325, 329, 330, 331, 332, 333, 341, 348, 354, 357, 360, 373, 377, 378, 381, 387, 392, 398, 399, 407, 408, 409, 413, 417, 421, 422], "run_profil": [0, 159, 167], "run_var": 392, "rung": 397, "runtim": 209, "runtimeerror": [374, 382], "ruppenhof": [57, 72], "rural": [111, 373, 375], "rush": 373, "russia": 424, "russian": [57, 92, 106, 209, 213, 318, 408, 422], "russian_russki": [57, 103], "russianstemm": [0, 199, 209], "rutilant": 399, "rwth": 140, "ryan": 176, "r\u0c39": [], "s0": [121, 125, 205, 218, 304, 357, 377, 410], "s0_sigma": 121, "s1": [57, 107, 121, 125, 148, 151, 203, 304, 323, 357, 377, 388, 394, 404, 410, 417], "s10": 410, "s11": 410, "s12": 410, "s14": [57, 106], "s15": [57, 106], "s1t": 205, "s2": [57, 107, 148, 151, 203, 323, 357, 377, 388, 394, 404, 410, 417], "s3": [151, 203, 357, 377, 394, 404, 410], "s4": [394, 404, 410], "s5": [394, 410], "s6": 410, "s7": 410, "s8": 410, "s9": 410, "s_": 218, "s_0": 218, "s_1": 148, "s_2": 148, "s_i": [148, 218], "s_j": 218, "s_retriev": [180, 183, 404], "s_t": 218, "sa": 96, "sa1": [100, 373], "sa2": [100, 373], "saarbrucken": 424, "sad": 197, "saem": 399, "safe": [117, 135, 319, 335], "safeappend": [180, 189], "saga": 367, "sahadutha": 371, "saharan": 402, "sai": [22, 36, 57, 72, 135, 165, 177, 184, 191, 205, 373, 377, 381, 405, 417], "said": [55, 57, 163, 223, 319, 360, 371, 373, 391, 401, 402, 410], "sain": 148, "saint": 109, "sale": [92, 422], "salienc": 145, "salienta": 399, "salim": 324, "salin": 107, "salmela": 422, "salt": [107, 371], "salti": 107, "salvatori": 109, "sam": [127, 371, 396, 422], "same": [14, 24, 25, 28, 29, 57, 69, 72, 87, 91, 100, 107, 112, 113, 117, 120, 121, 129, 131, 135, 136, 138, 142, 144, 147, 150, 151, 157, 162, 171, 172, 173, 176, 178, 179, 191, 196, 206, 223, 225, 229, 231, 265, 283, 300, 302, 309, 313, 320, 321, 324, 331, 332, 333, 334, 340, 341, 343, 345, 347, 350, 357, 368, 369, 371, 373, 379, 380, 385, 388, 394, 396, 398, 400, 404, 410, 411, 413, 417, 418], "same_r": 393, "samp": 179, "sampl": [0, 24, 33, 35, 38, 57, 96, 100, 136, 150, 179, 206, 218, 281, 300, 322, 332, 333, 334, 351, 354, 355, 361, 422], "sample_grammar": [375, 379, 384, 388, 404], "sample_n": 37, "sampletoscreen_demo": [0, 351, 354], "sampson": 179, "san": 402, "san_sebasti": 402, "sandra": 176, "sandt": 181, "saniti": 270, "sao": [373, 399], "sara": 36, "sarrail": 402, "sat": [368, 386, 393, 398], "satdemo": [0, 180, 186], "satellit": [57, 107, 211, 422], "satisfact": 186, "satisfi": [57, 91, 124, 135, 142, 148, 176, 180, 186, 232, 373], "saturdai": [320, 373, 410], "saturn": 109, "savag": 372, "save": [65, 111, 113, 176, 196, 213, 217, 221, 229, 300, 309, 319, 367, 375, 377, 379, 383], "save_analyz": 197, "save_classifi": 196, "save_fil": [195, 196], "save_loc": 221, "save_maxent_param": [0, 30, 33], "save_param": [25, 27, 302, 309], "save_punkt_param": [0, 302, 309], "save_to_json": [213, 221], "savings_bank": [358, 419], "saw": [25, 162, 165, 167, 174, 226, 341, 348, 379, 382, 386, 398, 399, 413], "sax": 320, "saxon": 109, "saxutil": 320, "sayoud": 201, "sb": 119, "sbar": [373, 379, 401, 413], "sbj": [176, 373, 401, 414], "sbl": 209, "sbquo": 192, "sc": 399, "scalar": 231, "scalar_inc_dec": [195, 198], "scale": [33, 53, 63, 125, 135, 138, 148, 179, 317, 324, 377, 393], "scan": 157, "scan_dragto": [114, 117], "scan_mark": [114, 117], "scanner": 379, "scannerrul": [0, 159, 165], "scarc": 198, "scaron": 192, "scatter": 383, "scc": 417, "scenario": [285, 389], "scene": 372, "schema": [182, 366], "schemaloc": 367, "scheme": [57, 79, 321, 422], "schneider": [57, 62, 424], "school": [100, 383, 422], "schuler": [57, 105], "schuster": 328, "schutz": [53, 146, 371, 394], "scienc": [83, 91, 96, 202, 204, 373], "science_fict": [373, 400], "scikit": [38, 40, 369], "scikitlearn": [0, 30, 40], "scipi": [146, 317, 357], "scitaminea": 395, "scon": [57, 72, 381], "scope": [28, 183, 197, 377], "score": [0, 25, 26, 28, 29, 53, 57, 77, 91, 95, 107, 135, 136, 138, 141, 143, 145, 146, 151, 152, 159, 166, 170, 172, 196, 197, 198, 214, 215, 216, 229, 300, 317, 322, 324, 325, 328, 333, 334, 335, 337, 339, 340, 362, 368, 371, 373, 383, 391, 393, 405, 409, 412, 417, 422], "score1": [324, 328], "score2": [324, 328], "score_fn": [53, 146], "score_ngram": [0, 53, 371], "score_val": [195, 198], "scored_4gram": 371, "scored_synonym": [55, 57, 77], "scorer": 170, "scott": 144, "scotti": 373, "scout": 372, "scratch": [52, 161, 373], "screen": [57, 63, 155, 354, 355, 373], "screen_nam": 355, "screenanam": [57, 102], "screw": 373, "scribbl": 373, "scribe6": 140, "script": [57, 72, 85, 118, 119, 134, 185, 308, 319, 320, 337, 339, 381, 405, 417], "scriptur": 417, "scroll": 119, "scrollbar": [117, 119], "scrollregion": [114, 119], "scrollwatcherwidget": [0, 114, 119], "sd": [57, 60, 133], "sd500": 91, "sdf": 416, "sdf123": 416, "sdot": 192, "se": [57, 107, 164, 373, 399], "sea": [67, 182, 371], "sean": [148, 422], "search": [0, 24, 28, 34, 39, 57, 72, 77, 91, 104, 106, 107, 111, 116, 128, 131, 170, 171, 177, 202, 217, 222, 225, 283, 300, 327, 333, 334, 339, 340, 354, 355, 357, 360, 372, 373, 375, 381, 388, 417, 422], "search_demo": [0, 351, 354], "search_leav": [283, 301], "search_tweet": [351, 355], "searchpath": 131, "seat": 373, "seattl": 83, "sebastian": 422, "sec": 355, "second": [23, 25, 33, 34, 41, 52, 57, 68, 72, 77, 84, 100, 111, 127, 128, 129, 135, 145, 180, 182, 184, 190, 191, 192, 193, 225, 231, 266, 284, 310, 314, 338, 352, 366, 373, 375, 377, 384, 388, 392, 413, 422], "second_on": 413, "secondari": [67, 304, 373], "secret": [355, 399], "secript": [118, 119, 185], "sect": 192, "section": [2, 23, 44, 57, 58, 62, 64, 66, 71, 74, 75, 78, 83, 86, 87, 94, 99, 104, 107, 148, 182, 317, 333, 355, 360, 366, 371, 373, 379, 399, 410, 422], "section_read": [57, 78], "secur": [402, 422], "sed": 319, "see": [12, 14, 28, 33, 34, 38, 42, 46, 53, 55, 57, 58, 63, 64, 66, 70, 71, 72, 74, 75, 80, 83, 84, 86, 92, 94, 95, 99, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 117, 119, 120, 121, 124, 125, 127, 128, 131, 134, 135, 136, 138, 146, 148, 161, 162, 165, 167, 169, 173, 174, 177, 179, 182, 184, 191, 192, 204, 206, 209, 214, 216, 217, 218, 220, 221, 223, 224, 225, 229, 234, 258, 284, 287, 300, 302, 309, 310, 314, 317, 329, 330, 331, 332, 333, 334, 337, 341, 347, 348, 350, 352, 353, 354, 355, 357, 360, 366, 367, 373, 377, 378, 379, 380, 381, 384, 385, 388, 392, 395, 396, 399, 403, 404, 408, 409, 410, 413, 415, 417, 421, 422], "see_also": [57, 72], "seealso": [33, 300], "seed": [135, 136, 142, 300, 334, 395], "seek": [0, 24, 104, 111, 163, 218], "seekabl": 111, "seekableunicodestreamread": [0, 111], "seen": [35, 135, 142, 179, 213, 223, 369, 375, 379, 405, 409, 413, 417], "seg": 316, "seg1": 151, "seg2": 151, "segm": 80, "segment": [0, 118, 143, 145, 199, 203, 252, 283, 284, 302, 305, 316, 317, 324, 325, 340, 362, 373, 394, 422], "segment_fil": [302, 316], "segment_s": [302, 316], "seguint": 399, "segundo": 399, "sehe": 387, "sehen": 387, "sei": 399, "sei3i": 205, "seizur": 67, "seja": 399, "seldom": 198, "select": [0, 2, 8, 13, 32, 38, 57, 59, 65, 72, 81, 84, 89, 100, 107, 108, 113, 114, 117, 119, 153, 155, 157, 159, 162, 165, 167, 171, 178, 179, 192, 206, 218, 233, 283, 301, 310, 340, 353, 354, 360, 366, 371, 373, 380, 395, 398, 401, 417], "select_anchor": [114, 117], "select_clear": [114, 117], "select_includ": [114, 117], "select_set": [114, 117], "selectbackground": 117, "selectborderwidth": 117, "selectdownloaddirmessag": [0, 113], "selected_row": [114, 117], "selectforeground": 117, "selection_anchor": [114, 117], "selection_clear": [114, 117], "selection_includ": [114, 117], "selection_set": [114, 117], "selectkbest": 38, "selector": [301, 373], "self": [14, 31, 33, 44, 52, 57, 79, 80, 99, 104, 107, 108, 111, 112, 113, 117, 119, 120, 124, 125, 129, 131, 132, 135, 142, 160, 162, 170, 179, 184, 186, 187, 190, 191, 205, 214, 223, 224, 303, 334, 337, 340, 341, 348, 369, 373, 375, 380, 389, 402, 417], "selkirk": [306, 314], "seller": 422, "selrestr": 373, "sem": [0, 57, 93, 111, 120, 124, 125, 126, 128, 129, 130, 365, 366, 375, 377, 378, 379, 380, 384, 385, 388, 392, 396, 399, 402, 403, 404, 424], "sem2": 404, "sem4": 377, "sem_tag": 93, "semant": [12, 16, 17, 28, 57, 69, 72, 93, 105, 111, 125, 148, 180, 181, 182, 183, 186, 188, 194, 197, 233, 302, 361, 364, 373, 375, 379, 380, 381, 383, 420, 422, 424], "semanticb": 422, "semcor": [55, 57, 417], "semcor_": 417, "semcorcorpusread": [55, 57, 93], "semcorsent": [55, 57, 93], "semcorwordview": [55, 57, 93], "semi": 192, "semi_rel2reldict": [0, 180, 192, 402], "semicolon": 283, "semin": 215, "semkei": [194, 404], "sempr": 399, "semrel": 404, "semrep": 404, "semtyp": [55, 57, 72, 187, 384], "semtype_fil": [125, 187], "semtype_inherit": [55, 57, 72], "semvalu": 404, "sen": [306, 314], "senat": 373, "send": [354, 355, 373], "sender": 117, "senna": [0, 30, 213, 280, 422], "senna_main": 39, "senna_path": 39, "sennachunktagg": [0, 213, 222], "sennanertagg": [0, 213, 222], "sennatagg": [0, 213, 222], "sens": [30, 33, 57, 72, 81, 89, 94, 107, 124, 135, 144, 148, 172, 181, 199, 214, 328, 358, 373, 377, 381, 401, 417, 422], "sensat": 408, "sense_kei": [57, 107], "senseidx5wn": [57, 107], "sensenumb": [57, 81, 89], "sensev": [55, 57, 422], "sensevalcorpusread": [55, 57, 94], "sensevalcorpusview": [55, 57, 94], "sensevalinst": [55, 57, 94, 373], "sensibl": [329, 330, 331, 332, 333], "sensibli": 229, "sensit": [146, 213, 214, 300, 417], "sent": [0, 11, 14, 39, 55, 57, 58, 59, 61, 63, 64, 65, 66, 68, 69, 71, 72, 74, 75, 76, 78, 79, 80, 86, 87, 88, 90, 91, 93, 99, 100, 109, 135, 137, 160, 162, 165, 167, 171, 172, 173, 174, 177, 178, 179, 197, 213, 214, 217, 219, 222, 223, 224, 225, 308, 311, 316, 339, 357, 363, 364, 367, 373, 379, 383, 390, 391, 398, 399, 400, 401, 404, 405, 407, 419], "sent_detector": 309, "sent_end_char": [302, 309], "sent_index": 181, "sent_path": [57, 79], "sent_segm": 80, "sent_splitt": [57, 64], "sent_start": [302, 309], "sent_tim": [55, 57, 100, 373], "sent_token": [0, 57, 58, 63, 66, 68, 71, 78, 87, 99, 103, 177, 197, 302, 305, 373, 399, 405, 422], "sent_typ": [57, 100], "sentbreak": [302, 309], "sentenc": [2, 14, 18, 25, 26, 28, 29, 30, 36, 39, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 72, 76, 78, 79, 80, 81, 87, 89, 90, 91, 93, 96, 99, 100, 103, 121, 123, 125, 135, 136, 137, 138, 139, 155, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 186, 187, 188, 192, 194, 197, 198, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 229, 231, 232, 233, 284, 302, 305, 306, 308, 309, 311, 314, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 345, 348, 358, 362, 364, 366, 367, 368, 373, 377, 379, 380, 381, 385, 387, 388, 390, 391, 398, 400, 401, 404, 405, 409, 410, 412, 414, 419, 420, 422], "sentence1": 398, "sentence2": 398, "sentence_aligned_corpu": [329, 330, 331, 332, 333, 334], "sentence_bleu": [0, 322, 324, 328, 362], "sentence_chrf": [0, 322, 325], "sentence_gleu": [0, 322, 328], "sentence_id": [57, 88], "sentence_length": 340, "sentence_nist": [0, 322, 337], "sentence_pair": [329, 330, 333, 334], "sentence_polar": [57, 63], "sentence_read": 125, "sentence_rib": [0, 322, 339], "sentencecount": [57, 72], "sentences_from_text": [302, 309], "sentences_from_text_legaci": [302, 309], "sentences_from_token": [302, 309], "senti_synset": [55, 57, 95, 406], "sentid": [55, 57, 100, 373], "sentido": 399, "sentim_analyz": 405, "sentiment": [0, 63, 91, 95, 360, 361, 373, 422], "sentiment_analyz": [0, 195], "sentiment_val": [195, 198], "sentimentanalyz": [0, 195, 196, 197, 405], "sentimentintensityanalyz": [0, 195, 198, 405], "sentisynset": [55, 57, 95], "sentitext": [0, 195, 198, 422], "sentiwordnet": [55, 57, 361, 422], "sentiwordnetcorpusread": [55, 57, 95], "sentno": [57, 72], "sentnum": [57, 81, 89, 401], "sents_mod": [55, 57, 75, 80], "sentstart_thresh": 309, "sep": [29, 57, 58, 99, 226, 320, 373], "separ": [16, 30, 42, 57, 58, 59, 60, 61, 69, 72, 78, 80, 87, 91, 93, 99, 104, 106, 108, 111, 121, 131, 164, 175, 197, 224, 225, 226, 301, 305, 307, 309, 310, 312, 313, 314, 317, 319, 320, 341, 348, 353, 355, 357, 373, 405, 410, 422], "separate_baseline_data": 229, "sepler": 424, "septemb": [410, 422], "seq": [48, 51, 152, 216, 218, 229, 339, 409, 413], "sequenc": [25, 28, 33, 46, 50, 51, 52, 53, 81, 89, 104, 107, 117, 118, 119, 120, 121, 125, 131, 135, 136, 137, 138, 139, 142, 144, 145, 148, 151, 152, 160, 162, 167, 172, 178, 179, 182, 213, 214, 215, 218, 223, 224, 225, 231, 252, 259, 284, 300, 301, 304, 307, 309, 310, 312, 314, 320, 321, 323, 324, 328, 339, 341, 345, 348, 357, 380, 399, 404, 410, 412, 422], "sequence1": 52, "sequence2": 52, "sequencewidget": [0, 114, 119], "sequenti": [0, 124, 213, 218, 221, 321, 333, 335], "sequentialbackofftagg": [0, 213, 223], "ser": [175, 224, 399], "serbian": 373, "serem": 399, "sergei": 72, "seri": [57, 69, 218, 223, 334, 368, 422], "seria": 399, "serial": [111, 183, 192, 229, 375], "serialis": 102, "serializ": 132, "serialize_output": 229, "serugu": 399, "serv": [10, 57, 72, 94, 163, 172, 184, 190, 191, 223, 352, 355, 373, 381, 409], "server": [0, 10, 111, 163, 357, 422], "server_index_url": 113, "servic": [154, 373, 417], "ser\u00e1": 399, "session": [25, 131, 238, 355, 373, 412], "sessionapi": 355, "set": [2, 13, 14, 16, 25, 28, 30, 31, 32, 33, 34, 36, 38, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 64, 65, 68, 69, 72, 77, 78, 79, 81, 84, 87, 88, 89, 99, 100, 101, 102, 103, 107, 109, 113, 114, 116, 117, 118, 119, 120, 121, 124, 125, 127, 128, 129, 131, 135, 144, 146, 148, 149, 150, 151, 156, 159, 162, 164, 165, 167, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 184, 186, 190, 191, 192, 196, 197, 203, 204, 205, 209, 215, 216, 217, 218, 224, 225, 232, 233, 251, 260, 271, 283, 299, 301, 304, 306, 309, 311, 312, 321, 323, 324, 327, 329, 330, 331, 332, 333, 334, 338, 341, 342, 343, 345, 348, 355, 357, 360, 365, 366, 368, 369, 371, 372, 373, 376, 378, 379, 381, 383, 388, 393, 394, 398, 399, 404, 405, 407, 409, 410, 412, 417, 418, 422], "set2rel": [0, 180, 186, 404], "set2txt": [0, 212], "set_bin_dir": [180, 181], "set_callback": 119, "set_cfg_callback": 115, "set_chart": [159, 162], "set_child": [114, 119], "set_discount": [0, 179], "set_grammar": [159, 162, 173, 174], "set_height": [114, 119], "set_label": [0, 114, 118, 341, 342, 348, 413], "set_logprob": [0, 179], "set_model_fil": [213, 217], "set_prob": [0, 179], "set_proxi": [0, 357, 360], "set_strategi": [159, 162], "set_symbol": [114, 119], "set_text": [114, 119], "set_uniform_prob": [322, 329, 330, 331, 332, 333, 334], "set_weight": [30, 33], "set_width": [114, 119], "setdefault": [0, 52, 120, 179, 380], "sethold": [0, 123, 127], "setlocal": 357, "setp": 174, "settl": 373, "setup": [0, 182, 235, 260, 271, 299, 351, 354, 391, 404], "setup_class": [248, 285], "setup_fixt": [163, 219, 388, 396], "setup_modul": [236, 237, 240, 241, 244, 245, 253, 261, 269, 282, 367, 369, 377, 383, 385, 399, 400], "setupclass": [251, 260], "setuptool": [235, 421], "seu": 399, "seven": [57, 84, 109], "sever": [29, 57, 72, 88, 113, 158, 159, 163, 201, 202, 206, 213, 304, 310, 324, 326, 341, 348, 357, 369, 373, 374, 379, 381, 398, 413, 417, 422], "sex": [57, 100, 367, 373], "sexpr": [0, 57, 62, 302, 373], "sexpr_token": [0, 302, 312], "sexprtoken": [0, 302, 312], "sfm_file": 321, "sg": [182, 365, 366, 379, 398, 404], "sh": [57, 67, 107], "shackelford": 148, "shackleford": 148, "shadow": 131, "shah": 328, "shake": 373, "shakespear": [222, 422], "shall": 372, "shallow": [25, 52, 57, 66, 120, 179, 186, 197, 218, 341, 342, 343, 346, 348, 380, 413], "shallowli": 413, "shan": 198, "shane": 415, "shanghai": 366, "shannon": 136, "shant": 198, "shape": [0, 25, 27, 57, 107, 119, 164, 335, 357, 383], "shapeabl": 118, "share": [39, 57, 69, 78, 87, 100, 103, 107, 111, 113, 162, 167, 172, 204, 218, 222, 339, 341, 343, 360, 373, 379, 388, 410, 413, 417, 418], "sharealik": 96, "sharm": [320, 410], "sharp": 373, "she": [57, 67, 107, 163, 363, 365, 367, 371, 410], "shed": 371, "sheikh": [320, 410], "shelf": [213, 388, 422], "shell": 25, "sheppard": 373, "shift": [1, 8, 61, 117, 119, 151, 159, 174, 176, 317, 319], "shift_cost_coeff": 151, "shiftreduc": [0, 159], "shiftreducepars": [0, 159, 174, 398, 422], "shin": 148, "shine": [148, 394], "shipyard": 402, "shit": [198, 405], "shlep": 417, "shoebox": 422, "short": [28, 57, 80, 92, 105, 125, 133, 204, 215, 324, 338, 347, 350, 373, 398], "shortcut": [7, 8, 57, 83, 113, 373], "shorten": 73, "shorter": [52, 171, 324, 340], "shortest": [52, 57, 107, 121, 133, 211, 324, 338, 417], "shortest_path_dist": [57, 107, 417], "shortid": [55, 57, 105, 373], "shot": [169, 376], "should": [14, 25, 27, 28, 29, 30, 33, 34, 35, 37, 38, 39, 41, 43, 48, 49, 50, 51, 52, 55, 57, 58, 59, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 98, 99, 100, 104, 105, 107, 108, 109, 111, 113, 116, 117, 118, 119, 120, 121, 124, 125, 128, 129, 131, 135, 136, 140, 144, 146, 152, 162, 163, 165, 167, 169, 171, 173, 174, 177, 178, 179, 181, 182, 184, 186, 187, 190, 191, 200, 202, 203, 206, 207, 208, 209, 215, 217, 218, 219, 223, 225, 229, 231, 233, 265, 285, 300, 301, 304, 307, 309, 310, 312, 313, 314, 316, 317, 318, 323, 324, 325, 328, 329, 330, 331, 333, 334, 340, 341, 342, 343, 345, 346, 348, 352, 353, 354, 355, 356, 357, 360, 364, 365, 369, 371, 372, 373, 375, 379, 380, 387, 388, 389, 390, 391, 394, 400, 410, 411, 413, 416, 417, 419], "shouldn": [111, 198, 391, 409], "shouldnt": 198, "show": [7, 8, 33, 36, 46, 51, 57, 72, 114, 119, 125, 147, 172, 179, 201, 202, 203, 214, 229, 300, 324, 325, 328, 354, 355, 360, 372, 375, 377, 381, 383, 388, 398, 401, 402, 410, 414], "show_cfg": [0, 111, 366, 379], "show_collect": 113, "show_column": [114, 117], "show_exampl": 187, "show_most_informative_featur": [30, 33, 35, 369], "show_packag": 113, "show_perc": 147, "show_thread_read": [125, 377], "show_tre": 177, "shower": 373, "shown": [7, 8, 14, 67, 113, 146, 209, 309, 341, 344, 377, 379, 381, 388, 402, 404], "showtext": [0, 114, 119], "shrubberi": 372, "shuffl": 150, "shut": [57, 72, 381], "shutdown": 10, "shy": 192, "si": 218, "si1466": 373, "si2": 205, "si2096": 373, "si836": 373, "sian": 366, "sibl": [341, 343, 347, 348, 350, 413], "sicenc": 68, "sid": [125, 405], "side": [7, 8, 14, 119, 121, 162, 167, 171, 173, 178, 347, 350, 373, 379], "sidereal_dai": 418, "sie": 387, "siegel": 144, "siehst": 387, "sieht": [379, 387], "siez": 408, "sig": 392, "sigefyrth": 109, "sigeweard": 109, "sight": 373, "sigir": [68, 149, 205], "sigkdd": [83, 91], "siglex": 94, "sigma": [33, 179, 192, 225], "sigma_exp": [0, 143, 145], "sigma_skip": [0, 143, 145], "sigma_sub": [0, 143, 145], "sigmaf": 192, "sign": [119, 120, 399, 420], "signal": [30, 92, 111, 317, 405], "signatur": [79, 80, 108, 112, 117, 120, 127, 181, 184, 191, 223, 341, 348, 358, 373, 392, 402], "signifi": 191, "signific": [33, 43, 150, 225, 371, 377, 399], "significantli": [29, 46, 48, 52], "significativament": 399, "sihan_post_process": 316, "sil": [133, 422], "silb": [306, 314], "silent": 10, "silli": [57, 63, 373], "sim": 192, "sime\u00e3o": 399, "similar": [0, 46, 49, 55, 57, 64, 72, 77, 106, 107, 119, 144, 145, 148, 172, 176, 225, 300, 309, 313, 317, 324, 340, 371, 373, 375, 381, 383, 398, 399, 404, 409, 410, 413, 419, 422], "similar_to": 107, "similar_word": [0, 300], "similarity_method": [317, 410], "similarli": [135, 137, 203, 218, 371, 373, 402, 409], "simionato": 112, "simmer": [57, 72, 381], "simp": 399, "simpl": [0, 7, 8, 18, 37, 48, 49, 57, 59, 61, 71, 93, 99, 104, 113, 119, 120, 125, 132, 133, 134, 135, 137, 140, 148, 159, 162, 173, 174, 179, 196, 218, 225, 263, 265, 283, 300, 302, 318, 347, 350, 355, 361, 369, 373, 375, 377, 379, 380, 383, 402, 405, 409, 410, 414, 422], "simple_block_read": [104, 373], "simple_dress": 373, "simplegoodtur": 179, "simplegoodturingprobdist": [0, 179, 400], "simpler": [25, 28, 119, 302, 417], "simplest": [57, 72, 144, 373, 381], "simpli": [25, 33, 36, 61, 80, 93, 108, 113, 118, 121, 126, 135, 136, 144, 163, 167, 171, 179, 197, 213, 218, 319, 325, 328, 329, 330, 347, 350, 373, 375, 380, 412], "simplic": [135, 329, 333, 422], "simplifi": [57, 61, 124, 128, 180, 184, 187, 190, 191, 354, 373, 377, 384, 385, 399, 422], "simplify_po": [0, 25, 27], "simplify_tag": [57, 75, 399], "simplist": [57, 63, 216, 373], "simul": [375, 398], "simulate_root": [57, 107, 417], "simultan": 25, "sin": 317, "sinai": [320, 410], "sinc": [24, 37, 38, 52, 57, 63, 87, 121, 162, 164, 167, 182, 190, 191, 206, 301, 306, 341, 343, 347, 348, 350, 354, 359, 366, 372, 373, 375, 384, 388, 400, 401, 412, 417, 422], "sincer": 417, "sing": 380, "singl": [2, 8, 25, 28, 29, 31, 32, 33, 42, 55, 57, 59, 63, 69, 72, 78, 81, 84, 86, 89, 99, 100, 104, 107, 111, 113, 117, 118, 119, 120, 121, 125, 135, 139, 148, 159, 162, 167, 173, 174, 177, 178, 179, 181, 191, 192, 196, 197, 215, 218, 219, 225, 229, 233, 300, 301, 306, 307, 311, 314, 319, 321, 324, 325, 328, 335, 337, 341, 343, 347, 348, 350, 357, 373, 379, 380, 381, 401, 408, 413, 415, 418, 422], "single_meteor_scor": [0, 322, 335], "singleedgefundamentalrul": [0, 159, 162, 165, 167], "singleedgeprobabilisticfundamentalrul": [0, 159, 171], "singleton": [46, 49, 404], "singular": [46, 48, 51, 201, 202, 380, 413, 414], "sinica": [57, 96, 341, 344, 373, 422], "sinica_pars": [0, 341, 344], "sinica_treebank": [55, 57, 373], "sinicacorpu": 96, "sinicatreebankcorpusread": [55, 57, 96], "sink": 218, "sinta": 399, "sion": 205, "sir": [307, 410], "siria": 402, "sis2": 205, "sister": [283, 301], "site": [57, 105, 399, 422], "situada": 399, "situat": [38, 57, 72, 381, 409, 422], "sitzungsperiod": 412, "six": [204, 399, 413], "size": [0, 33, 39, 52, 104, 111, 113, 114, 117, 119, 131, 135, 142, 151, 162, 171, 184, 185, 213, 223, 317, 340, 341, 345, 355, 372, 375, 377, 383, 388, 408, 409], "size_canva": 184, "size_nam": 373, "sizehint": 111, "sj": 218, "sji": [57, 103], "sk": [57, 106], "skardal": 422, "skikda": 202, "skillet": [57, 72, 381], "skin": [284, 422], "skip": [55, 57, 58, 64, 66, 71, 74, 75, 83, 86, 87, 94, 99, 103, 104, 129, 148, 163, 197, 217, 262, 308, 325, 357, 395], "skip_ambiguous_tweet": 197, "skip_bnew": 27, "skip_fil": [0, 57, 213, 227, 322], "skip_head": 197, "skip_instal": 113, "skip_retweet": 197, "skip_tongue_tweet": 197, "skipgram": [0, 357, 422], "skipif": 262, "skipintersect": 233, "sklearn": [38, 369, 383], "sklearnclassifi": [0, 30, 38, 369], "sko": 182, "skolem": [0, 129, 180, 191, 377], "skolem_funct": [0, 180, 191], "sl": [57, 106], "slang": [405, 417], "slap": 417, "slash": [29, 61, 80, 93, 108, 111, 120, 318, 380, 398, 410], "slashfeatur": [0, 120], "sleep": [57, 72, 365, 381, 392], "sleeper": 109, "sleet": 373, "slept": 382, "slf4j": 316, "slice": [52, 131, 302, 320, 372, 413], "slice_bound": [0, 131], "slice_obj": 131, "slide": [373, 394, 422], "slight": 357, "slightli": [182, 198, 203, 328, 366], "slip": [57, 72, 381, 422], "slk": 417, "slocum": 410, "slope": [179, 419], "slot": [0, 322, 333, 419], "slovak": [57, 106, 373], "slovenian": [57, 106, 373], "slow": [95, 229, 354, 405, 406, 412], "slowli": [95, 406], "slu": [42, 70], "slv": 417, "smain": 414, "small": [107, 121, 124, 135, 146, 229, 323, 329, 330, 331, 332, 333, 337, 347, 350, 373, 379, 381, 395, 400, 405, 417, 418, 422], "smaller": [25, 29, 57, 102, 104, 157, 324, 373, 417], "smallest": 157, "smart": [57, 63, 373, 405], "smell_emiss": 373, "smith": [148, 309, 328, 422], "smooth": [0, 57, 107, 135, 136, 138, 179, 218, 302, 317, 324, 337, 341, 347, 348, 350, 362, 391, 400, 410, 415, 417, 422], "smoothednr": [0, 179], "smoothing_cl": 138, "smoothing_funct": [324, 362], "smoothing_method": [317, 410], "smoothing_round": 317, "smoothing_width": 317, "smoothingfunct": [0, 322, 324, 362], "smoothli": [57, 68, 373], "smt": [140, 308, 320], "sn": 388, "sne": 383, "snlp": 394, "snooz": 373, "snow": 373, "snowbal": [0, 199, 203, 281, 422], "snowballstem": 209, "snowballstemm": [0, 199, 209, 408, 422], "snowballtest": 281, "snyder": 373, "so": [25, 28, 33, 35, 57, 63, 72, 79, 99, 107, 117, 132, 133, 135, 136, 137, 142, 144, 157, 162, 172, 173, 174, 179, 191, 197, 198, 203, 206, 215, 232, 301, 313, 317, 320, 323, 324, 328, 333, 334, 340, 341, 345, 354, 357, 369, 372, 373, 377, 380, 383, 384, 388, 394, 395, 399, 401, 402, 405, 409, 410, 412, 417, 419, 422], "sobr": 399, "social": [198, 418], "societi": 203, "sociolinguist": 145, "socrat": [127, 388, 396, 403], "soda": 163, "sof": 402, "soft_delimit": 326, "softwar": [151, 224, 367, 422], "soi": 373, "sol": 399, "sold": 92, "sole": 309, "solemnli": 405, "soliloqui": 109, "sollten": 323, "solomon": 109, "solta": 399, "solu": 399, "solut": 225, "solv": [33, 157, 311], "somalia": 402, "sombr": 372, "sombra": 399, "some": [25, 33, 36, 37, 53, 55, 57, 62, 72, 79, 91, 100, 107, 108, 113, 117, 119, 120, 121, 125, 126, 128, 131, 134, 135, 136, 137, 138, 139, 145, 162, 170, 172, 176, 179, 182, 184, 188, 191, 198, 206, 213, 214, 215, 216, 218, 231, 233, 266, 301, 304, 320, 324, 328, 329, 330, 331, 332, 333, 341, 348, 352, 354, 355, 364, 368, 371, 372, 373, 375, 377, 379, 381, 382, 383, 384, 388, 389, 394, 398, 399, 401, 402, 403, 407, 409, 410, 412, 413, 415, 417, 418, 419, 422], "some_corpu": [57, 59], "some_corpus_file_id": 373, "some_data": 373, "some_label": 33, "somebodi": 417, "somecorpusread": 373, "somehow": 135, "sometest": 374, "someth": [57, 100, 112, 135, 138, 373, 381, 384, 402, 410, 417], "sometim": [28, 30, 57, 72, 120, 121, 131, 148, 159, 309, 341, 348, 371, 373, 380, 381, 410], "somewhat": [198, 301], "song": 373, "sonor": 314, "sonority_hiearchi": 314, "sonority_hierarchi": 314, "sonority_sequenc": [0, 302], "soon": [118, 119, 185], "sophist": [334, 388], "sormovo": 402, "soron": 314, "sorri": [367, 409, 410], "sorria": 399, "sort": [0, 14, 57, 72, 83, 107, 117, 118, 120, 121, 135, 137, 142, 147, 153, 160, 162, 171, 173, 174, 178, 196, 197, 198, 214, 232, 318, 321, 327, 335, 338, 341, 342, 357, 367, 368, 369, 371, 373, 375, 376, 378, 379, 380, 381, 384, 385, 391, 392, 398, 399, 400, 402, 403, 404, 405, 410, 417, 422], "sort_bi": [114, 117], "sort_by_count": [147, 214, 394, 409], "sort_field": [0, 321], "sort_kei": [57, 102], "sort_queu": [159, 171], "sorta": 198, "sorted_data": 395, "sorted_set": 404, "sortof": 198, "sound": [57, 72, 100, 306, 314, 373], "sound_emiss": 373, "sound_exist": 373, "sound_mak": [57, 72], "sound_mov": [57, 72], "sound_sourc": [57, 72], "sourc": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 244, 245, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 355, 356, 357, 358, 366, 373, 377, 381, 388, 399, 410, 412, 420], "source_block": 326, "source_group": [57, 84], "source_of_legal_author": 381, "source_s": 326, "source_sents_len": 326, "source_tag": 220, "source_tagset": [29, 66], "source_word_class": [332, 333], "sourceforg": [53, 422], "south": 100, "southern": [100, 402], "soviet": 402, "sp": 402, "spa": 417, "space": [7, 8, 46, 51, 52, 57, 61, 65, 75, 104, 115, 118, 119, 121, 163, 170, 179, 186, 218, 229, 305, 310, 313, 319, 321, 333, 334, 340, 357, 368, 375, 383, 392, 399, 411], "spacer": [0, 123, 125, 126, 128], "spacetoken": [0, 302, 313], "spacewidget": [0, 114, 119], "spade": 192, "spain": [57, 60, 133, 366], "spam": [369, 376], "span": [12, 14, 69, 107, 159, 162, 165, 167, 170, 171, 172, 178, 300, 302, 305, 309, 314, 319, 320, 340, 357, 371, 373, 401, 410, 417], "span1": 172, "span2": 172, "span_token": [284, 302, 303, 305, 309, 310, 313, 319, 320, 410], "span_tokenize_s": [302, 303], "spangli": [57, 60], "spanisch": 340, "spanish": [57, 65, 100, 106, 209, 340, 402, 408, 422], "spanishstemm": [0, 199, 209], "spank": 373, "spans_to_rel": [0, 302, 320], "sparciti": [347, 350], "spars": [33, 38, 369], "sparsearrai": [46, 48], "spass": 388, "spatial_configur": 373, "spawn": 131, "speak": 380, "speaker": [57, 65, 98, 100, 367, 373], "speakerinfo": [55, 57, 100, 373], "spear": 372, "spearker": 98, "spearman": [0, 143, 339, 371, 422], "spearman_correl": [0, 143, 152, 371, 394], "spearman_rho": [0, 322, 339], "spec": [57, 108, 232, 384], "special": [16, 57, 58, 61, 64, 65, 72, 75, 80, 93, 98, 99, 109, 117, 119, 120, 134, 135, 142, 159, 163, 167, 188, 191, 209, 218, 231, 284, 312, 357, 368, 373, 379, 380, 399], "special_case_idiom": [195, 198], "specialis": 373, "speciallist": [55, 57, 72], "specialti": [57, 72], "specif": [39, 44, 57, 59, 63, 65, 70, 72, 79, 80, 87, 91, 93, 106, 107, 108, 110, 111, 126, 128, 136, 146, 162, 172, 196, 209, 214, 218, 225, 229, 231, 232, 233, 311, 326, 334, 373, 377, 381, 408, 410, 411, 417, 421], "specifi": [10, 13, 14, 28, 29, 33, 34, 39, 44, 51, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 113, 117, 118, 119, 120, 121, 131, 133, 135, 137, 147, 148, 151, 156, 158, 161, 162, 163, 164, 165, 167, 171, 172, 173, 176, 177, 178, 179, 192, 196, 197, 203, 209, 213, 214, 215, 217, 222, 223, 224, 225, 231, 232, 233, 300, 301, 302, 303, 304, 312, 313, 316, 321, 323, 329, 330, 331, 332, 333, 334, 338, 341, 345, 347, 348, 350, 354, 357, 358, 360, 367, 373, 375, 377, 378, 379, 380, 385, 388, 396, 399, 402, 404, 410, 413, 417, 422], "speech": [1, 57, 67, 69, 72, 75, 79, 93, 99, 107, 156, 165, 179, 199, 211, 213, 214, 218, 221, 223, 225, 306, 327, 332, 341, 347, 348, 350, 358, 373, 381, 417, 422], "speed": [39, 49, 57, 72, 225, 381, 391, 422], "speicherbeh": 203, "speicherbehalt": 203, "speicherbeh\u00e4l": 203, "speicherbeh\u00e4lt": 203, "speicherbeh\u00e4ltern": 203, "spell": 20, "spent": 410, "sphere": 100, "spice": 405, "spiller": 422, "spit": 373, "spite": 307, "spkrid": [55, 57, 100, 373], "spkrinfo": [55, 57, 100, 373], "spkrutteranceid": [55, 57, 100], "split": [14, 25, 28, 36, 39, 57, 66, 69, 81, 87, 89, 99, 100, 104, 135, 144, 147, 157, 163, 164, 169, 170, 172, 175, 191, 193, 197, 208, 219, 221, 222, 223, 224, 302, 303, 307, 309, 310, 313, 316, 319, 320, 324, 325, 326, 327, 328, 339, 357, 362, 364, 365, 366, 368, 373, 377, 378, 379, 383, 385, 391, 394, 398, 399, 401, 402, 405, 407, 410, 414, 419], "split_at": [0, 322, 326], "split_non_ascii": 308, "split_rul": 368, "split_synset": [55, 57, 107], "split_train_test": [0, 195, 197], "split_valu": 326, "splitrul": [0, 25, 28, 368], "splitter": 410, "spn": 100, "spoke": 402, "spoken": [100, 218], "sponsor": 422, "sponsorship": 422, "sport": [30, 36, 369], "sports_sent": 36, "spot": 373, "spous": 379, "sprai": 373, "sprinkl": 373, "spx": 163, "spy": 417, "sq": 146, "sql": [182, 192], "sql0": 366, "sql_demo": [0, 180, 182], "sql_queri": [0, 180, 182, 366], "sqlite": 84, "squar": [29, 38, 120, 135, 137, 146, 179, 371, 380], "src": [57, 78, 373], "src_class": [332, 333], "src_phrase": 323, "src_phrase_span": 340, "src_sentenc": [322, 329, 330, 334, 340], "srclen": [327, 338], "srctext": [327, 338], "srd": 148, "sre_pattern": 192, "srl": [55, 57, 69], "srl_includes_roleset": [57, 69], "srl_instanc": [55, 57, 69], "srl_span": [55, 57, 69], "srparser": 1, "srparser_app": [0, 1], "ss": [57, 107, 305, 317, 319, 405, 419], "ss0": 205, "ss15": 140, "ss2of": [55, 57, 107], "ss_type": [57, 107], "ssen4": 205, "ssl": 355, "ssp": [314, 422], "st": [57, 72, 109, 205, 207, 208, 209, 218, 224, 320, 410], "st_custom": 205, "st_pre": 205, "sta": 399, "stabilis": [46, 50], "stabl": [120, 341, 342], "stack": [8, 119, 159, 174, 176, 299, 340, 422], "stack_decod": [0, 322], "stack_siz": [322, 340], "stackdecod": [0, 322, 340], "stackoverflow": 72, "stackwidget": [0, 114, 119], "stage": [28, 162, 368], "stai": [135, 142, 338], "stale": [0, 113], "stalemessag": [0, 113], "stalk": 373, "stand": [110, 120, 135, 142, 181, 182, 380], "standard": [14, 25, 26, 28, 29, 31, 36, 51, 52, 53, 57, 81, 86, 89, 92, 100, 108, 109, 124, 129, 131, 135, 137, 159, 161, 162, 163, 176, 179, 186, 199, 203, 214, 215, 313, 319, 321, 336, 347, 350, 357, 373, 374, 379, 401, 409, 412, 413], "standardformat": [0, 321], "standardli": 402, "stanford": [0, 53, 91, 148, 159, 213, 261, 284, 302, 316, 422], "stanford_model": [224, 316], "stanford_segment": [0, 302, 422], "stanfordcorenlp": 175, "stanforddependencypars": [0, 159, 175], "stanfordnertagg": [0, 213, 224], "stanfordneuraldependencypars": [0, 159, 175], "stanfordpars": [0, 159, 175], "stanfordpostagg": [0, 213, 224], "stanfordsegment": [0, 302, 316, 422], "stanfordtagg": [0, 213, 224], "stanfordtoken": [0, 302, 315], "star": [63, 188], "start": [0, 7, 10, 12, 14, 16, 25, 28, 33, 46, 48, 49, 50, 52, 57, 58, 62, 64, 66, 69, 71, 72, 74, 75, 81, 83, 86, 89, 91, 94, 99, 100, 104, 107, 111, 113, 120, 121, 129, 131, 135, 148, 159, 162, 163, 164, 165, 167, 168, 171, 172, 173, 174, 178, 183, 191, 205, 213, 218, 219, 221, 231, 233, 305, 309, 310, 317, 319, 320, 324, 333, 334, 338, 340, 341, 343, 345, 348, 357, 360, 366, 373, 375, 377, 379, 382, 386, 388, 398, 399, 401, 404, 410, 411, 413, 421, 422], "start1": 233, "start2": [221, 233], "start_i": [303, 310, 313], "start_index": [52, 172], "start_posit": 131, "start_r": 104, "start_symbol": 178, "start_t": 373, "start_tok": 104, "start_toknum": 104, "startcollectionmessag": [0, 113], "startdownloadmessag": [0, 113], "starter": 309, "starting_quot": [302, 305, 319], "startpackagemessag": [0, 113], "startpo": [57, 58, 64, 66, 71, 74, 75, 83, 86, 94, 99, 104], "startunzipmessag": [0, 113], "startup": 134, "stat": [57, 91, 144, 216, 229, 373], "state": [7, 28, 92, 97, 117, 121, 148, 167, 172, 173, 174, 217, 218, 300, 305, 318, 333, 373, 375, 379, 380, 382, 388, 396, 398, 408, 422], "state_j": 218, "state_or_provinc": 163, "state_unio": 373, "state_union": 373, "statefulli": 301, "stateless": 111, "statement": [23, 32, 61, 129, 219, 366, 373, 388, 422], "static": [28, 32, 36, 44, 52, 78, 79, 81, 85, 89, 113, 119, 120, 125, 130, 131, 146, 162, 164, 167, 171, 189, 203, 215, 231, 285, 299, 311, 323, 324, 332, 340, 341, 345], "statis": 225, "statist": [29, 70, 148, 149, 150, 151, 172, 215, 216, 225, 229, 309, 318, 328, 329, 330, 331, 332, 333, 334, 337, 340, 399, 409, 412], "statmt": 325, "statu": [0, 57, 72, 93, 113, 355, 381], "status": 355, "status_cod": 355, "stderr": [113, 131, 163], "stdin": [131, 231, 232, 233, 357, 417], "stdlib": 131, "stdoffset": [351, 352], "stdout": [34, 41, 131, 163, 179, 355, 372, 398], "stdout_redirect": 260, "steak": 389, "steal": 373, "steam": [57, 72, 381], "steedman": 365, "stem": [0, 57, 61, 65, 107, 149, 281, 335, 361, 363, 367, 417, 420], "stem1": [199, 202], "stem_match": [0, 322, 335], "stem_unicod": 209, "stemmer": [199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 281, 335, 360, 399, 422], "stemmer2": 408, "stemmeri": [0, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 335], "sten": 203, "step": [0, 2, 7, 8, 38, 46, 48, 57, 66, 121, 131, 135, 148, 153, 158, 159, 162, 173, 174, 196, 204, 209, 229, 319, 327, 329, 330, 331, 332, 333, 398], "stephan": [311, 328], "stephen": [329, 330, 331, 332, 333, 334], "steppingchartpars": [0, 159, 162], "steppingrecursivedescentpars": [0, 159, 173], "steppingshiftreducepars": [0, 159, 174], "steven": [0, 328, 420, 422, 424], "stevenbird": [111, 335, 424], "sthe": 402, "still": [111, 116, 117, 121, 164, 170, 225, 300, 324, 372, 373, 377, 411, 420, 422], "stimulu": [57, 72], "stimulus_subject": 373, "stirl": 146, "stk_0_form_on": 176, "stk_0_lemma_on": 176, "stk_0_pos_in": 176, "stk_0_pos_top": 176, "stk_1_pos_nn": 176, "stock": [376, 419], "stok": 399, "stoni": [163, 224], "stop": [37, 52, 131, 159, 163, 179, 197, 204, 216, 217, 352, 355, 373, 378], "stopiter": 370, "stopword": [37, 209, 300, 317, 371, 373, 408], "storag": [183, 323], "store": [30, 43, 57, 59, 72, 86, 104, 109, 110, 111, 124, 125, 127, 129, 135, 137, 142, 149, 161, 167, 176, 177, 179, 182, 183, 192, 196, 197, 301, 307, 309, 323, 330, 331, 332, 333, 334, 352, 355, 366, 372, 373, 375, 377, 388, 402, 404, 413, 422], "store_log": 179, "stori": [163, 372, 373], "storm": 373, "stp": 164, "str": [14, 23, 28, 29, 31, 33, 34, 41, 52, 55, 57, 58, 59, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 98, 99, 102, 104, 105, 107, 108, 109, 110, 111, 112, 116, 117, 119, 121, 124, 125, 131, 132, 135, 136, 137, 138, 139, 142, 145, 147, 148, 149, 151, 156, 160, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 187, 190, 191, 192, 194, 196, 200, 202, 203, 207, 208, 209, 211, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 229, 232, 266, 283, 284, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 344, 347, 348, 350, 353, 355, 356, 357, 358, 365, 368, 373, 375, 377, 378, 383, 384, 385, 392, 409, 413, 417], "str1": 145, "str2": 145, "str2chunktre": [57, 66], "str2tupl": [0, 57, 99, 213, 226], "straight": [357, 373], "straightforward": 381, "strang": 107, "strangl": 411, "strategi": [2, 28, 159, 162, 165, 167, 171, 197, 398, 417], "stream": [0, 34, 41, 57, 58, 59, 61, 64, 66, 67, 71, 74, 75, 76, 78, 79, 80, 86, 91, 93, 94, 99, 100, 104, 108, 111, 113, 135, 139, 177, 179, 191, 326, 341, 348, 354, 355, 357], "streambackedcorpusview": [55, 57, 58, 63, 64, 66, 68, 71, 74, 75, 83, 86, 87, 90, 91, 94, 99, 102, 104, 108, 111, 373], "streamer": [0, 351, 355], "streamlin": 422, "streamread": [111, 373], "streamtofile_demo": [0, 351, 354], "street": [88, 148, 373, 379], "strength": [57, 91, 198, 420], "stress": 67, "stretch": 417, "strict": [29, 57, 101, 111, 312, 321, 422], "strict_json": 163, "strictli": [120, 371, 380, 402, 409], "strida": 373, "string": [13, 14, 16, 23, 25, 28, 29, 30, 32, 33, 38, 44, 51, 52, 55, 57, 58, 59, 60, 61, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 104, 105, 107, 108, 109, 111, 113, 115, 117, 119, 120, 121, 124, 128, 131, 135, 137, 138, 142, 144, 145, 147, 148, 162, 163, 164, 169, 172, 173, 174, 175, 177, 179, 180, 181, 182, 183, 184, 186, 187, 191, 192, 196, 198, 204, 205, 207, 209, 210, 211, 213, 214, 215, 223, 225, 226, 229, 230, 232, 266, 279, 283, 284, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 319, 320, 321, 323, 324, 325, 338, 339, 340, 341, 344, 345, 347, 348, 350, 354, 355, 357, 366, 368, 369, 372, 373, 375, 377, 379, 381, 386, 388, 389, 390, 392, 394, 399, 402, 404, 405, 409, 410, 411, 413, 416, 422], "string1": 402, "string2": 402, "string3": 402, "string_categori": [55, 57], "string_span_token": [0, 302, 320], "stringcategorycorpusread": [55, 57, 97], "stringio": [373, 375], "stringtoken": [0, 302, 303, 313], "strip": [25, 28, 29, 57, 61, 65, 84, 101, 104, 109, 111, 197, 200, 202, 206, 207, 208, 209, 214, 309, 313, 321, 368, 373, 399, 401], "strip_emr": [199, 203], "strip_eol_hyphen": [302, 308], "strip_esn": [199, 203], "strip_g": [199, 203], "strip_handl": [284, 304, 410], "strip_nd": [199, 203], "strip_off_emoticon": 197, "strip_prefix_flag": 205, "strip_rul": 368, "strip_skip": [302, 308], "strip_spac": [57, 61, 65], "strip_t": [199, 203], "striprul": [0, 25, 28, 368], "strong": [217, 306], "strongbacktrack": 217, "strongest": 91, "strongli": [120, 206, 372, 380, 417, 421], "struct": 380, "structur": [0, 2, 7, 8, 14, 24, 25, 26, 28, 29, 32, 57, 61, 62, 63, 69, 72, 76, 81, 89, 92, 93, 104, 111, 119, 121, 122, 125, 159, 160, 162, 163, 164, 165, 167, 171, 172, 173, 174, 180, 181, 184, 186, 188, 192, 306, 314, 321, 340, 341, 343, 347, 348, 350, 357, 365, 367, 368, 373, 381, 388, 399, 401, 402, 413, 420, 422], "struggl": 373, "strunk": 309, "stuart": 422, "stuck": [333, 334], "student": [119, 146, 371, 377, 379, 420, 422], "student_t": [143, 146, 371, 394], "studi": [151, 163, 224, 306, 314], "stuff": 410, "stump": [30, 32], "stupid_backoff_trigram_model": 249, "stupid_quotes_1": [302, 318], "stupid_quotes_2": [302, 318], "stupidbackoff": [0, 135, 138], "sturgeon": 373, "style": [29, 53, 57, 69, 111, 128, 155, 164, 341, 348, 379], "stylist": 155, "stype": [57, 72], "su": [205, 381], "sua": 399, "sub": [13, 28, 57, 72, 159, 166, 192, 214, 328, 367, 373, 376, 402], "subcat": 379, "subcategor": 387, "subcategori": [13, 373], "subclass": [25, 28, 31, 52, 55, 57, 59, 61, 72, 80, 81, 87, 89, 93, 105, 108, 111, 118, 119, 120, 121, 124, 131, 132, 160, 162, 171, 177, 179, 181, 209, 214, 223, 224, 231, 233, 303, 310, 341, 348, 352, 373, 379, 389, 408, 413], "subcorpora": [57, 72], "subcorpu": [57, 72], "subdir": [0, 113, 355, 356], "subdirectori": [57, 73, 100, 110, 113, 356, 373], "subdiv": [57, 60], "subdiv_dict": [55, 57, 60], "subdivis": [57, 60], "sube": 192, "subel": 321, "subev": [57, 72, 381], "subexpress": 191, "subf": [57, 72], "subfenam": [57, 72], "subfold": 360, "subfram": [57, 72, 381], "subframenam": [57, 72], "subgraph": 417, "subid": [57, 72], "subitament": 399, "subiter": 326, "subj": [57, 63, 182, 187, 192, 367, 373, 377, 378, 379, 380, 384, 399, 405], "subj_doc": 405, "subjclass": [192, 402], "subject": [57, 63, 91, 117, 161, 172, 182, 192, 197, 364, 384, 402, 405], "subjsym": [192, 402], "subjtext": [192, 402], "sublist": [52, 233], "submodul": 119, "subordin": [57, 72, 381], "subpart": 119, "subprocess": [131, 164, 398], "subscr": 16, "subscript": [16, 52], "subsequ": [52, 120, 144, 162, 165, 182, 192, 218, 306, 340, 341, 348, 366, 379, 405], "subset": [57, 106, 119, 186, 197, 209, 229, 233, 373, 421, 422], "subseteq": 119, "subsitut": 203, "subst": [57, 80, 363], "substance_emiss": 373, "substance_holonym": 107, "substance_meronym": 107, "substanti": [198, 333, 422], "substituit": 308, "substitut": [12, 13, 15, 28, 57, 61, 107, 111, 129, 145, 148, 173, 191, 266, 301, 319, 364, 365], "substitute_bind": [0, 120, 123, 129, 180, 191, 380], "substitutebindingsi": [0, 120, 167, 180, 191], "substitution_cost": [148, 266], "substitutionruleset": 364, "substr": [28, 80, 104, 172, 207, 223, 302, 303, 310, 312, 313, 341, 348, 357, 373, 410], "subsum": [0, 57, 107, 120, 123, 129, 170, 417], "subtag": [57, 60], "subtask": 402, "subterm": 184, "subtoken": [173, 218, 233], "subtop": [317, 410], "subtract": 170, "subtre": [0, 25, 28, 114, 118, 121, 162, 173, 178, 341, 343, 347, 348, 350, 357, 402, 413, 415], "subtyp": [57, 72, 184, 191, 341, 342, 346, 348, 381], "subvers": [113, 181], "succ": 392, "succe": [285, 341, 342, 373, 388], "success": [124, 173, 174, 183, 320, 332, 333, 357, 368], "successful_encod": 357, "successfulli": [129, 158, 173, 174, 421], "sudo": [360, 421], "sudoh": 339, "sue": 404, "suf1": [199, 204], "suf32": [199, 204], "suff": [199, 201, 202], "suffer": 373, "suffici": [91, 113, 354, 371, 388], "suffix": [15, 57, 107, 146, 182, 197, 201, 202, 203, 204, 206, 209, 210, 223, 281, 422], "suffix_noun_step1a_success": [199, 209], "suffix_noun_step2a_success": [199, 209], "suffix_noun_step2b_success": [199, 209], "suffix_noun_step2c2_success": [199, 209], "suffix_replac": [0, 199, 210], "suffix_verb_step2a_success": [199, 209], "suffix_verb_step2b_success": [199, 209], "suffixe_noun_step1b_success": [199, 209], "suffixes_verb_step1_success": [199, 209], "suffoc": 373, "suficient": 399, "sufix": 204, "suggest": [91, 121, 324, 422], "suit": [177, 235, 309, 400, 417, 420], "suitabl": [117, 152, 164, 197, 320, 334, 340, 357, 388, 420], "sultan": [57, 106], "sum": [33, 35, 57, 72, 84, 91, 121, 135, 138, 145, 175, 179, 192, 215, 218, 324, 328, 329, 330, 339, 373, 391], "sum1": 33, "sum2": 33, "sum_": 218, "sum_log": [0, 179], "sum_s0": 218, "sum_t": 218, "sum_to_on": [0, 179], "summar": [57, 63, 72, 83, 91, 331, 332, 333], "summari": [171, 178], "summat": 218, "summer": [410, 422], "summerofcod": 422, "sun": 22, "sunter": 148, "suntsu": [0, 18], "suntsu_chat": [0, 18, 22], "suo3": 205, "sup": 192, "sup1": 192, "sup2": 192, "sup3": 192, "supe": 192, "super": [132, 364, 405], "superclass": 373, "supercon": 414, "superconductor": 414, "superf": [57, 72], "superfenam": [57, 72], "superflu": 385, "superfram": [57, 72], "superframenam": [57, 72], "superior": 410, "superl": 68, "superset": 231, "superst": [57, 72], "supertyp": [57, 72], "supervis": [46, 218, 309], "supid": [57, 72], "supp": 381, "supplement": 109, "supplementari": [214, 257], "supplementary_ideographic_plan": [302, 320], "suppli": [33, 52, 57, 86, 94, 117, 120, 131, 144, 179, 223, 304, 314, 324, 373, 380, 381, 398, 401, 409, 419], "support": [10, 25, 28, 33, 38, 39, 40, 57, 60, 69, 70, 72, 75, 79, 107, 111, 112, 119, 120, 132, 133, 144, 148, 175, 176, 177, 180, 209, 219, 300, 301, 302, 324, 325, 352, 369, 373, 374, 375, 377, 380, 383, 408, 409, 410, 413, 422], "support_cutoff": [32, 369], "supported_oper": [30, 39], "suppos": [24, 377, 388, 410], "sur": 410, "sure": [24, 28, 57, 59, 124, 135, 137, 302, 323, 336, 357, 360, 368, 373, 380, 409, 410, 412], "surfac": [57, 76], "surround": [28, 300, 357], "survei": [144, 148, 311], "surviv": [372, 377], "susan": [57, 85, 148, 306, 314], "suspect": [373, 381], "suspicion": 381, "sux": 405, "suzi": 404, "sv": [57, 106], "svar": 16, "svc": 369, "svd": [46, 48, 49, 50, 51], "svd_dimens": [48, 49, 50, 51], "svg": [0, 164, 341, 345], "svm": [0, 30, 38, 369], "svmclassifi": [0, 30, 40], "svn": [373, 380, 413], "svn_revis": [0, 113], "sw": [149, 397], "swadesh": [57, 85, 422], "swadeshcorpusread": [55, 57, 106], "swallow": [163, 219, 222, 224, 326, 417], "swap": [157, 334], "swarm": 373, "swat": 373, "swbp": 182, "swe": 417, "sweden": 424, "swedish": [57, 106, 209, 408], "swedishstemm": [0, 199, 209], "swelter": 373, "swift": 354, "switch": [57, 90, 328, 373, 398, 422], "switchboard": [55, 57, 373, 422], "switchboardcorpusread": [55, 57, 98], "switchboardturn": [55, 57, 98], "swn": [95, 406], "sx": [15, 364], "sx1": 410, "sx116": 373, "sx2": 410, "sx206": [100, 373], "sx26": 373, "sx296": 373, "sy": [355, 357, 398], "sydnei": 424, "syllab": 306, "syllabif": [306, 314], "syllabifi": [306, 314], "syllabl": [306, 314], "syllable_list": [306, 314], "syllabletoken": [0, 284, 302, 314, 422], "symbol": [0, 7, 28, 57, 58, 61, 63, 65, 66, 68, 78, 79, 82, 83, 86, 87, 90, 91, 93, 99, 102, 106, 107, 108, 114, 119, 121, 135, 162, 167, 173, 178, 180, 182, 184, 186, 191, 192, 218, 302, 305, 308, 318, 319, 355, 357, 366, 377, 391, 398, 400, 404, 410], "symbol_regex": [302, 308], "symbolsheet": [114, 119], "symbolwidget": [0, 114, 119], "symlink": 373, "symmetr": [182, 327, 328, 366, 379, 417], "symmetrisat": 327, "synchron": [145, 373], "synonym": [55, 57, 77, 106, 107, 335, 417, 422], "synrep": 404, "synrestr": 373, "syns": [57, 107], "synset": [55, 57, 95, 107, 357, 358, 413, 418, 419, 422], "synset1": [57, 107, 417], "synset2": [57, 107, 417], "synset_from_pos_and_offset": [55, 57, 107, 417], "synset_from_sense_kei": [55, 57, 107, 417, 422], "syntact": [2, 26, 57, 59, 107, 109, 121, 159, 162, 163, 194, 373, 381, 383, 398, 399], "syntactic_mark": [57, 107], "syntax": [2, 57, 91, 105, 160, 194, 215, 301, 341, 348, 368, 373, 380], "syntaxcorpusread": [55, 57, 59, 62, 71, 76, 96], "syntre": [194, 404], "syrian": 373, "system": [34, 39, 111, 113, 119, 131, 182, 218, 219, 233, 324, 327, 328, 337, 339, 357, 358, 360, 366, 373, 374, 422], "systemat": [324, 362], "szlig": 192, "s\u00e3o": [399, 422], "s\u00ed": 410, "s\u00faplice": 399, "s\u16dc\u0e17": 308, "t": [29, 33, 57, 67, 72, 91, 92, 109, 111, 113, 118, 121, 127, 131, 134, 135, 144, 145, 146, 147, 148, 151, 161, 164, 172, 175, 178, 179, 182, 186, 191, 197, 198, 203, 205, 213, 214, 216, 218, 229, 234, 283, 302, 305, 313, 314, 317, 318, 319, 320, 324, 325, 328, 329, 330, 331, 332, 333, 337, 338, 339, 341, 345, 348, 349, 364, 365, 366, 368, 369, 371, 374, 376, 377, 379, 380, 383, 388, 389, 391, 392, 394, 395, 396, 398, 399, 400, 404, 405, 407, 409, 410, 411, 412, 413, 417, 420], "t0": 368, "t1": 368, "t10": 368, "t2": [144, 368], "t3": [144, 368], "t4": 368, "t5": 368, "t6": 368, "t61": [57, 103], "t7": 368, "t8": 368, "t9": 368, "t_i": 225, "t_t": 225, "ta": [57, 106, 305, 319], "ta2": 205, "tab": [10, 57, 104, 107, 113, 164, 302, 310, 313, 318, 376, 411, 422], "tab2dict": [0, 212], "tab2intdict": [0, 212], "tab2ivdict": [0, 212], "tab2tup": [0, 212], "tab_dir": 33, "tab_fil": [57, 107], "tabbi": [163, 175], "tabdata": 0, "tabdecod": [0, 212], "tabencod": [0, 212], "tabl": [0, 24, 33, 36, 57, 60, 69, 100, 107, 113, 114, 120, 146, 148, 176, 178, 182, 223, 317, 329, 330, 331, 332, 333, 334, 340, 366, 380, 398], "tableau": [0, 123], "tableau_test": [0, 123, 130], "tableauprov": [0, 123, 130, 378, 388], "tableauprovercommand": [0, 123, 130, 388], "tablet": [332, 333, 334], "tabtoken": [0, 57, 71, 302, 313], "tabul": [0, 147, 179, 214, 339, 422], "tabular": 388, "tac": [341, 348], "tacilp4i": 205, "tackl": 422, "tacohn": 46, "tadm": [0, 30, 33, 369], "tadmeventmaxentfeatureencod": [0, 30, 33, 41], "tadmmaxentclassifi": [0, 30, 33], "taft": [263, 373], "tag": [0, 26, 27, 28, 29, 30, 39, 52, 55, 57, 59, 60, 61, 62, 64, 65, 66, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 84, 85, 86, 89, 91, 93, 94, 98, 100, 105, 107, 108, 109, 114, 119, 121, 131, 132, 133, 147, 159, 161, 163, 164, 169, 170, 172, 175, 177, 179, 192, 211, 227, 229, 230, 231, 232, 233, 280, 341, 347, 348, 350, 361, 367, 368, 371, 376, 377, 379, 381, 385, 390, 400, 402, 411, 419, 420, 422], "tag1": [57, 99, 373], "tag2": [57, 99, 373], "tag2q": [0, 133], "tag3": [57, 99, 373], "tag_": [57, 62], "tag_1": 218, "tag_mapping_funct": [74, 99], "tag_n": [57, 79, 218], "tag_on": [213, 223], "tag_pattern": [28, 368], "tag_pattern2re_pattern": [0, 25, 28, 368], "tag_sent": [30, 39, 159, 163, 213, 214, 217, 219, 222, 224], "tag_set": 400, "tagdata": [213, 225], "tagfil": 373, "tagged_": [57, 59, 61, 62, 64, 65, 69, 70, 71, 72, 75, 82, 84, 85, 93, 98, 105, 107, 108, 109, 373], "tagged_chunk": [55, 57, 93, 373], "tagged_data": 229, "tagged_discours": [55, 57, 98], "tagged_para": [55, 57, 62, 64, 66, 75, 79, 86, 99, 109, 373], "tagged_pars": [159, 161, 175], "tagged_parse_s": [159, 175], "tagged_post": [55, 57, 82, 373], "tagged_s": [25, 55, 57, 59, 61, 62, 64, 65, 66, 69, 71, 74, 75, 79, 86, 93, 99, 109, 213, 214, 216, 222, 223, 363, 367, 373, 390, 399, 400, 409], "tagged_sent": [25, 226], "tagged_sequ": 215, "tagged_span": [57, 69], "tagged_text": 368, "tagged_tok": 213, "tagged_token": [25, 28, 226, 233], "tagged_treebank_para_block_read": [55, 57, 104], "tagged_turn": [55, 57, 98], "tagged_word": [55, 57, 59, 61, 62, 64, 65, 66, 69, 71, 74, 75, 76, 79, 80, 82, 86, 93, 98, 99, 109, 179, 363, 367, 371, 373, 390, 399], "taggedcorpusread": [55, 57, 79, 99, 109, 373], "taggedcorpusview": [55, 57, 64, 99, 373], "taggedsent_to_conl": [0, 159, 177], "taggedsents_to_conl": [0, 159, 177], "taggedtyp": 28, "tagger": [27, 57, 89, 113, 161, 163, 169, 175, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 229, 232, 233, 254, 360, 377, 385, 394, 399, 401, 422], "tagger0": 399, "tagger1": [216, 399, 409], "tagger2": [216, 399], "taggeri": [0, 39, 163, 213, 214, 215, 217, 218, 219, 221, 223, 224, 225], "taggertrain": 215, "taghva": 204, "tagpattern": 122, "tagrul": [0, 215, 227, 232], "tags_to_ignor": [57, 61], "tagset": [57, 59, 61, 62, 64, 65, 66, 69, 70, 71, 72, 74, 75, 79, 82, 84, 85, 86, 93, 96, 98, 99, 105, 107, 108, 109, 213, 220, 276, 371, 373, 422], "tagset_map": [0, 213, 220], "tagspec": [79, 80, 108], "tagstr2tre": [0, 25, 29, 57, 66, 368], "tagtyp": 163, "tajik": 318, "take": [13, 14, 15, 20, 30, 33, 38, 42, 50, 51, 52, 55, 57, 59, 69, 72, 76, 79, 80, 92, 100, 104, 107, 108, 112, 119, 121, 125, 131, 135, 139, 144, 146, 148, 161, 163, 169, 170, 175, 179, 186, 191, 192, 196, 213, 217, 218, 223, 225, 229, 233, 307, 310, 320, 324, 325, 333, 357, 371, 372, 373, 375, 376, 377, 378, 380, 381, 383, 388, 391, 399, 410], "takefocu": 117, "taken": [57, 72, 73, 91, 92, 124, 155, 162, 167, 171, 179, 183, 198, 205, 206, 215, 332, 341, 345, 357, 373, 422], "taku": 328, "talbot": 327, "talk": [24, 57, 72, 373, 381, 392, 422], "talkbank": [57, 65, 367, 422], "tall": 392, "taln": 151, "talvez": 399, "tam": 394, "tamb": 399, "tamil": [57, 103, 106], "tampa": 148, "tan": 424, "tangibl": 417, "tanoaria": 399, "tanoth": 411, "tanya": 148, "tape": [367, 373], "target": [16, 30, 33, 57, 72, 84, 113, 116, 124, 153, 156, 220, 231, 300, 309, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 338, 340, 367, 381, 383, 399, 412], "target_block": 326, "target_child": 367, "target_s": 326, "target_sentence_length": 333, "target_sents_len": 326, "target_tagset": [29, 66], "target_word": 399, "target_word_class": [332, 333], "tartaru": [206, 209, 281], "task": [25, 30, 46, 52, 92, 119, 144, 151, 159, 196, 215, 218, 304, 339, 383, 388, 394, 402, 410], "tasti": 404, "tau": [192, 339], "taught": [170, 376], "tautologi": 129, "tax": [92, 373], "taxonomi": [57, 107, 396, 417], "taylor": 354, "taza": 410, "tb": 313, "tbl": [0, 215, 216, 409], "tcl": 373, "tcp": 10, "tcud1": 205, "tcvn": [57, 103], "td": 411, "te": 413, "tea": 67, "teach": [196, 218, 420, 422], "team": [36, 410, 422], "tear": 179, "teardown": 260, "teardown_loaded_corpora": 238, "teardown_modul": [261, 279], "teardownclass": 260, "tearless": 395, "technic": [61, 347, 350], "techniqu": [218, 324, 362, 388], "technologi": [88, 203], "ted": [94, 107], "tediou": [57, 63, 135, 373], "teem": 373, "teen": [20, 163], "teenag": [57, 63, 373], "tei": [57, 79], "teicorpusview": [55, 57, 86], "telecommun": 201, "telephon": 422, "telescop": [386, 398], "televis": [57, 63, 373], "tell": [0, 34, 104, 111, 131, 135, 300, 358, 372, 385, 404, 409], "telno": 379, "telugu": [74, 422], "tem": 399, "temp": [57, 72, 176, 375], "tempdir": 375, "temperatur": [57, 72], "tempfil": [176, 373, 375, 411], "templat": [0, 215, 216, 227, 229, 231, 232, 402, 409], "template_stat": 229, "templateid": 232, "tempo": 399, "temporari": [25, 176, 229, 373, 383], "temporarili": [119, 125], "temporibu": 109, "ten": [306, 314, 371, 399], "tend": [332, 395, 418], "tendenc": 306, "tens": [89, 199, 202, 216, 220, 223, 379, 380, 401, 409], "tenwi": 145, "ter": 399, "tere": 203, "teredo": 395, "term": [33, 35, 53, 57, 96, 106, 112, 129, 183, 184, 187, 191, 218, 229, 300, 347, 350, 355, 372, 373, 383, 392, 409, 410], "termin": [14, 33, 115, 121, 162, 167, 168, 169, 176, 192, 311, 341, 345, 347, 348, 350, 354, 355, 373, 379, 411], "terminologi": [0, 30, 144, 322], "tern": 203, "terra": 399, "terrassen": 414, "terreno": 399, "territ": 399, "tess": 404, "test": [25, 28, 39, 55, 57, 64, 73, 76, 88, 100, 111, 119, 121, 125, 128, 131, 135, 146, 147, 148, 150, 163, 176, 177, 194, 196, 197, 205, 213, 214, 215, 216, 217, 218, 219, 222, 223, 225, 229, 307, 309, 318, 324, 336, 360, 364, 367, 371, 379, 383, 384, 385, 386, 388, 394, 396, 399, 405, 412, 419, 421, 422, 424], "test1_lex": 364, "test2_lex": 364, "test_absolute_discounting_trigram_scor": 249, "test_advanc": 265, "test_advanced2": 265, "test_affix_tagg": 271, "test_alin": 246, "test_aline_delta": 252, "test_antonym": 287, "test_arab": 281, "test_backward_prob": 269, "test_bad_oper": 283, "test_bas": 282, "test_best_model2_align": 296, "test_best_model2_alignment_does_not_change_pegged_align": 296, "test_best_model2_alignment_handles_empty_src_sent": 296, "test_best_model2_alignment_handles_empty_trg_sent": 296, "test_best_model2_alignment_handles_fertile_word": 296, "test_best_returns_none_when_stack_is_empti": 299, "test_best_returns_the_best_hypothesi": 299, "test_bigram2": 259, "test_bigram3": 259, "test_bigram5": 259, "test_bigram_counts_seen_ngram": 248, "test_bigram_counts_unseen_ngram": 248, "test_bleu": 288, "test_bllip": 246, "test_brevity_penalti": 289, "test_bril": 246, "test_brill_demo": 254, "test_brill_tagg": 271, "test_build_model": [0, 123, 126], "test_candidate_type_check": 297, "test_case_where_n_is_bigger_than_hypothesis_length": 289, "test_catalan": 262, "test_categori": 262, "test_category_word": 262, "test_cfd_mut": 246, "test_cfg2chomski": 246, "test_chunk": 246, "test_classifi": 246, "test_clausifi": [0, 123, 129], "test_colloc": 246, "test_com": 283, "test_complex": 256, "test_compute_future_cost": 299, "test_compute_future_costs_for_phrases_not_in_phrase_t": 299, "test_concord": 246, "test_concordance_lin": 260, "test_concordance_list": 260, "test_concordance_print": 260, "test_concordance_width": 260, "test_config": [0, 123, 128], "test_convert_to_prover9": [0, 123, 128], "test_corenlp": 246, "test_corpora": 246, "test_corpu": 400, "test_corpus_bleu": 289, "test_corpus_bleu_with_bad_sent": 289, "test_corpus_bleu_with_multiple_weight": 289, "test_corpus_read": 275, "test_corpus_view": 246, "test_correct_fil": 285, "test_correct_length": 263, "test_correct_valu": 263, "test_count": 247, "test_counter_len_changes_with_lookup": 248, "test_counts_set_correctli": 251, "test_creation_with_count": 251, "test_cutoff_setter_checks_valu": 251, "test_cutoff_value_set_correctli": 251, "test_data": [246, 369, 395], "test_default_tagg": 271, "test_dependency_pars": 261, "test_derivationally_related_form": 287, "test_disagr": 246, "test_dist": 246, "test_distortion_scor": 299, "test_distortion_score_of_first_expans": 299, "test_domain": 287, "test_download": 246, "test_downloader_using_existing_parent_download_dir": 267, "test_downloader_using_non_existing_parent_download_dir": 267, "test_draw": [0, 180, 184], "test_easi": 265, "test_easy2": 265, "test_easy3": 265, "test_emoji_token": 284, "test_empty_hypothesi": 289, "test_empty_input": 248, "test_empty_refer": 289, "test_empty_references_and_hypothesi": 289, "test_entri": 262, "test_environ": 285, "test_eq": 251, "test_esp": 262, "test_everygrams_max_len": 286, "test_everygrams_min_len": 286, "test_everygrams_pad_left": 286, "test_everygrams_pad_right": 286, "test_everygrams_without_pad": 286, "test_exampl": 283, "test_feature_extractor_object": 278, "test_file_is_wrong": 270, "test_fileid": 262, "test_find_all_src_phras": 299, "test_find_raises_except": 264, "test_find_raises_exception_with_full_resource_nam": 264, "test_forward_prob": 269, "test_forward_probability2": 269, "test_framefiles_fileid": 274, "test_freqdist": 246, "test_from_eflomal_output": 290, "test_full_match": 289, "test_future_scor": 299, "test_gdfa": 288, "test_generate_cycl": 249, "test_generate_none_text_se": 249, "test_generate_one_from_limiting_context": 249, "test_generate_one_from_varied_context": 249, "test_generate_one_no_context": 249, "test_generate_oov_text_se": 249, "test_generate_with_text_se": 249, "test_german": 281, "test_hillclimb": 296, "test_hmm": 246, "test_hyperhyponym": 287, "test_ibm1": 288, "test_ibm2": 288, "test_ibm3": 288, "test_ibm4": 288, "test_ibm5": 288, "test_ibm_model": 288, "test_in_topic_domain": 287, "test_incr": 255, "test_input": 284, "test_inst": 274, "test_iterable_type_for_all_lemma_nam": 287, "test_iterating_returns_an_iterator_ordered_by_frequ": 268, "test_json2csv_corpu": 246, "test_json_seri": 246, "test_kneserney_trigram_scor": 249, "test_labeled_nod": 283, "test_laplace_bigram_entropy_perplex": 249, "test_laplace_bigram_scor": 249, "test_laplace_gamma": 249, "test_lch": 287, "test_legality_principle_syllable_token": 284, "test_len_is_const": 251, "test_length_one_hypothesi": 289, "test_lidstone_bigram_scor": 249, "test_lidstone_entropy_perplex": 249, "test_lidstone_trigram_scor": 249, "test_lookup": 251, "test_lookup_empty_iter": 251, "test_lookup_empty_str": 251, "test_lookup_int": 251, "test_lookup_iter": 251, "test_lookup_non": 251, "test_lookup_recurs": 251, "test_lowercase_opt": 281, "test_lr_bigram": 272, "test_lr_quadgram": 272, "test_lr_trigram": 272, "test_make_relation_set": [0, 123, 126], "test_max": 369, "test_megam": 258, "test_membership_check_respects_cutoff": 251, "test_meronyms_holonym": 287, "test_meteor": 288, "test_metr": 246, "test_misc_rel": 287, "test_mle_bigram_entropy_perplexity_seen": 249, "test_mle_bigram_entropy_perplexity_unigram": 249, "test_mle_bigram_entropy_perplexity_unseen": 249, "test_mle_bigram_logscore_for_zero_scor": 249, "test_mle_bigram_scor": 249, "test_mle_trigram_scor": 249, "test_model": 247, "test_model_found": [0, 123, 126], "test_modified_precis": 289, "test_multiple_conj": 283, "test_n": 248, "test_naivebay": 246, "test_neighboring_finds_neighbor_align": 296, "test_neighboring_returns_neighbors_with_pegged_align": 296, "test_neighboring_sets_neighbor_alignment_info": 296, "test_ner_tagg": 261, "test_news_fileid": 262, "test_ngram_conditional_freqdist": 248, "test_ngram_order_access_unigram": 248, "test_ngram_tagg": 271, "test_nist": 288, "test_no_zero_div": 277, "test_node_encod": 283, "test_node_nocas": 283, "test_node_noleav": 283, "test_node_print": 283, "test_node_quot": 283, "test_node_regex": 283, "test_node_regex_2": 283, "test_node_simpl": 283, "test_node_tree_posit": 283, "test_nombank": 246, "test_numb": 274, "test_numpy_weight": 289, "test_obj_doc": 405, "test_oed_bug": 281, "test_omw_lemma_no_trailing_underscor": 287, "test_pad_asterisk": 284, "test_pad_dotdot": 284, "test_padded_everygram_pipelin": 250, "test_pars": 261, "test_parsed_s": 262, "test_parser_loads_a_valid_tre": 253, "test_partial_matches_hypothesis_longer_than_refer": 289, "test_pdist": 179, "test_perceptron_tagg": 271, "test_phone_token": 284, "test_pl196x": 246, "test_plot": 255, "test_polish_encod": 262, "test_pos_tag": 246, "test_pos_tag_eng": 276, "test_pos_tag_eng_univers": 276, "test_pos_tag_ru": 276, "test_pos_tag_rus_univers": 276, "test_pos_tag_unknown_lang": 276, "test_pos_tagg": 261, "test_pos_templ": 254, "test_preprocess": 247, "test_prob_t_a_given_": [291, 292, 293, 294, 295], "test_prov": [0, 123, 128], "test_prun": 295, "test_punkt_debug_decisions_custom_end": 284, "test_punkt_pair_it": 284, "test_punkt_pair_iter_handles_stop_iteration_except": 284, "test_punkt_tokenize_custom_lang_var": 284, "test_punkt_tokenize_no_custom_lang_var": 284, "test_punkt_tokenize_words_handles_stop_iteration_except": 284, "test_punkt_train": 284, "test_punkt_train_no_punc": 284, "test_punkt_train_single_word": 284, "test_push_bumps_off_worst_hypothesis_when_stack_is_ful": 299, "test_push_does_not_add_hypothesis_that_falls_below_beam_threshold": 299, "test_push_removes_hypotheses_that_fall_below_beam_threshold": 299, "test_raw_unicod": 262, "test_read": 279, "test_reader_stream_closes_when_delet": 279, "test_reference_or_hypothesis_shorter_than_fourgram": 289, "test_reference_type_check": 297, "test_regexp_tagg": 271, "test_rel_preced": 283, "test_rel_sister_nod": 283, "test_relation_list": [57, 65], "test_remove_handl": 284, "test_retrieve_synset": 287, "test_retweet_original_tweet": 270, "test_rib": 246, "test_ribes_empty_word": 277, "test_ribes_one_word": 277, "test_ribes_two_word": 277, "test_rte_classifi": 246, "test_rte_classification_with_megam": 278, "test_rte_classification_without_megam": 278, "test_rte_feature_extract": 278, "test_russian": 281, "test_sampl": 296, "test_scenarios_that_should_raise_error": 285, "test_seekable_unicode_stream_read": 246, "test_senna": [39, 222, 246], "test_senna_chunk_tagg": 280, "test_senna_ner_tagg": 280, "test_senna_pipelin": 280, "test_senna_tagg": 280, "test_sent": [223, 230, 262, 329, 330, 331, 332, 333], "test_sent_token": 284, "test_sentence_nist": 298, "test_sequ": 218, "test_set": [196, 394, 405, 407], "test_set_uniform_alignment_prob": 292, "test_set_uniform_alignment_probabilities_of_non_domain_valu": 292, "test_set_uniform_distortion_prob": 293, "test_set_uniform_distortion_probabilities_of_max_displac": 294, "test_set_uniform_distortion_probabilities_of_non_domain_valu": [293, 294], "test_set_uniform_translation_prob": 291, "test_set_uniform_translation_probabilities_of_non_domain_valu": 291, "test_set_uniform_vacancy_probabilities_of_max_displac": 295, "test_set_uniform_vacancy_probabilities_of_non_domain_valu": 295, "test_short_strings_bug": 281, "test_simpl": [256, 273], "test_sonority_sequencing_syllable_token": 284, "test_spanish": 281, "test_stack_decod": 288, "test_stanford_segmenter_arab": 284, "test_stanford_segmenter_chines": 284, "test_stat": [215, 216, 409], "test_stem": [246, 408], "test_str": 251, "test_string_token": 284, "test_stupid_backoff_trigram_scor": 249, "test_subj_doc": 405, "test_suit": 235, "test_sums_to_1": 249, "test_syllable_tokenizer_numb": 284, "test_tabul": 255, "test_tadm": 258, "test_tag": 246, "test_tag_pattern2re_pattern_quantifi": 257, "test_tagged_parse_finds_matching_el": 253, "test_tagged_word": 262, "test_tagsets_brown": 276, "test_tagsets_claw5": 276, "test_tagsets_upenn": 276, "test_textoutput": 270, "test_tgrep": 246, "test_token": [246, 261], "test_tokenize_encod": 283, "test_tokenize_exampl": 283, "test_tokenize_link_typ": 283, "test_tokenize_macro": 283, "test_tokenize_node_label": 283, "test_tokenize_nodenam": 283, "test_tokenize_quot": 283, "test_tokenize_segmented_pattern": 283, "test_tokenize_simpl": 283, "test_total_translated_word": 299, "test_trailing_semicolon": 283, "test_train_on_bigram": 248, "test_train_on_illegal_sent": 248, "test_train_on_mix": 248, "test_train_on_unigram": 248, "test_transform_output": [0, 123, 126], "test_translated_posit": 299, "test_translation_so_far": 299, "test_translation_so_far_for_empty_hypothesi": 299, "test_treebank_span_token": 284, "test_truthi": 251, "test_tweet_hashtag": 270, "test_tweet_media": 270, "test_tweet_metadata": 270, "test_tweet_plac": 270, "test_tweet_place_boundingbox": 270, "test_tweet_token": 284, "test_tweet_tokenizer_expand": 284, "test_tweet_url": 270, "test_tweet_userment": 270, "test_twitter_auth": 246, "test_unable_to_change_cutoff": 251, "test_unexpected_tagtyp": 261, "test_unigram_counts_completely_unseen_word": 248, "test_unigram_counts_seen_word": 248, "test_unspecified_lang": 276, "test_untranslated_span": 299, "test_untranslated_spans_for_empty_hypothesi": 299, "test_update_empty_vocab": 251, "test_use_macro": 283, "test_user_metadata": 270, "test_userurl": 270, "test_util": 246, "test_valid_phras": 299, "test_vocab_iter_respects_cutoff": 251, "test_vocab_len_respects_cutoff": 251, "test_vocabulari": 247, "test_vocabularies_are_initi": 296, "test_vocabularies_are_initialized_even_with_empty_corpora": 296, "test_vocabulary_martin_mod": 281, "test_vocabulary_nltk_mod": 281, "test_vocabulary_original_mod": 281, "test_with_transposit": 266, "test_wittenbell_trigram_scor": 249, "test_word": 262, "test_word_token": 284, "test_wordnet": 246, "test_wordnet_similar": 287, "test_zero_match": 289, "testbleu": 289, "testbleufringecas": 289, "testbleuvsmteval13a": 289, "testbleuwithbadsent": 289, "testbleuwithmultipleweight": 289, "testbllippars": 253, "testbril": 254, "testbuf": 375, "testcas": [250, 251, 254, 255, 256, 257, 260, 261, 262, 263, 265, 271, 272, 273, 274, 275, 276, 280, 281, 283, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "testcess": 262, "testchunkrul": 257, "testconcord": 260, "testconll2007": 262, "testcorpusview": [263, 275], "testcredenti": 285, "testdir": 399, "testdisagr": 265, "testeditdist": 266, "testemptycondfreq": 255, "testeng": 394, "tester": 387, "testfloresta": 262, "testgdfa": 290, "testgrammar": [0, 159, 177, 387], "testhigherordertableauprov": [0, 123, 130], "testhypothesi": 299, "testibmmodel": 296, "testibmmodel1": 291, "testibmmodel2": 292, "testibmmodel3": 293, "testibmmodel4": 294, "testibmmodel5": 295, "testindian": 262, "testing_data": [216, 409], "testing_doc": 405, "testjsonseri": 271, "testlikelihoodratio": 272, "testmeteor": 297, "testmwappdb": 262, "testngramcount": 248, "testngramcountertrain": 248, "testnist": 298, "testparserapi": 261, "testpostag": 276, "testpreprocess": 250, "testptb": 262, "testpunkttrain": 284, "testresolutionprov": [0, 123, 129], "testrteclassifi": 278, "tests_rel_domin": 283, "tests_rel_indexed_children": 283, "testsennapipelin": 280, "testsennatagg": 280, "testsent": 398, "testsequencefunct": 283, "testsinicatreebank": 262, "teststack": 299, "teststackdecod": 299, "testtableauprov": [0, 123, 130], "testtaggerapi": 261, "testtoken": 284, "testtokenizerapi": 261, "testudhr": 262, "testvalu": 404, "teu": 399, "teubner": [306, 314], "text": [0, 1, 7, 8, 11, 14, 25, 26, 28, 29, 31, 33, 37, 38, 42, 53, 57, 59, 61, 65, 68, 72, 73, 75, 79, 80, 82, 84, 86, 92, 100, 102, 107, 108, 109, 111, 113, 114, 115, 116, 118, 119, 121, 135, 136, 137, 138, 139, 151, 159, 162, 163, 164, 165, 167, 171, 173, 174, 177, 178, 179, 197, 198, 203, 204, 208, 209, 214, 215, 218, 224, 225, 231, 257, 260, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 317, 318, 319, 320, 321, 324, 326, 341, 345, 353, 354, 355, 356, 357, 368, 371, 372, 373, 375, 381, 401, 402, 410, 414, 420, 422], "text1": [300, 372, 399, 400], "text2": [300, 400], "text3": 300, "text4": 300, "text5": 300, "text9": 300, "text_bigram": [135, 137], "text_contains_sentbreak": [302, 309], "text_ngram": 136, "text_profil": 42, "text_se": [135, 136, 300], "text_unigram": [135, 137], "text_word": 306, "textbook": [186, 422], "textbox_opt": 119, "textcat": [0, 30], "textcollect": [0, 300], "textcoord": 383, "textfil": [27, 57, 106], "textid": [55, 57, 86], "textiowrapp": 113, "texttil": [0, 302, 410], "texttilingtoken": [0, 302, 317], "textual": [57, 72, 92, 373, 422], "textwidget": [0, 114, 118, 119], "textwrap": [72, 373], "tf": [0, 38, 300, 411], "tf_idf": [0, 300], "tfidf": 38, "tfidftransform": 38, "tgrep": [0, 283, 422], "tgrep2": [283, 301], "tgrep_compil": [0, 301], "tgrep_nod": [0, 301], "tgrep_posit": [0, 301], "tgrep_str": 301, "tgrep_token": [0, 301], "tgrepexcept": [0, 301], "th": [33, 52, 67, 117, 232, 233, 300, 323, 325, 341, 348, 372, 401], "tha": 417, "thailand": 366, "than": [24, 25, 28, 29, 32, 33, 35, 37, 46, 49, 52, 53, 57, 59, 63, 68, 72, 86, 104, 107, 111, 117, 119, 120, 135, 142, 146, 152, 156, 159, 162, 164, 167, 174, 178, 179, 182, 190, 191, 197, 203, 204, 213, 215, 216, 217, 223, 229, 232, 233, 300, 309, 314, 316, 321, 324, 331, 333, 334, 341, 343, 345, 347, 348, 350, 366, 371, 373, 374, 377, 379, 380, 381, 388, 389, 399, 408, 409, 418, 419], "thank": [163, 302, 305, 310, 313, 315, 319, 359, 407, 410, 420, 422], "thaw": 373, "theatr": 222, "thee": 67, "thei": [13, 15, 28, 30, 33, 34, 35, 36, 43, 46, 52, 53, 55, 57, 66, 72, 105, 106, 107, 110, 111, 117, 119, 120, 121, 129, 131, 135, 144, 148, 157, 167, 170, 179, 191, 218, 219, 231, 232, 233, 300, 306, 313, 314, 319, 321, 323, 328, 341, 347, 348, 350, 364, 369, 372, 373, 375, 379, 380, 381, 389, 394, 396, 400, 401, 402, 405, 409, 410, 412, 413, 417, 418], "them": [25, 28, 30, 33, 35, 51, 52, 53, 104, 108, 111, 119, 120, 121, 128, 131, 135, 142, 144, 157, 162, 163, 167, 170, 171, 174, 179, 183, 188, 192, 223, 300, 302, 305, 310, 313, 315, 317, 319, 320, 323, 324, 333, 335, 338, 341, 342, 347, 350, 352, 353, 354, 360, 365, 369, 371, 372, 373, 374, 377, 378, 380, 385, 388, 389, 399, 407, 409, 410, 412, 417], "themat": [57, 72, 105, 373], "theme": [341, 344, 373, 405], "themrol": [55, 57, 105, 373], "themselv": [57, 79, 80, 81, 89, 108, 310, 373, 381], "theo": 306, "theorem": [123, 124, 128, 129, 130, 136, 184, 191, 377, 385, 422], "theoremtoolcommand": [0, 123, 124], "theoremtoolcommanddecor": [0, 123, 124], "theoremtoolthread": [0, 123, 124], "theoret": [180, 186, 201, 202, 306, 332], "theori": [57, 72, 181, 306, 314, 381], "there4": 192, "therefor": [25, 28, 33, 57, 69, 309, 324, 327, 328, 371, 373, 385, 388, 396, 416], "thesauru": [57, 72, 77, 381], "thesaurus": [57, 77], "theseu": 373, "theta": [67, 192], "thetasym": 192, "thi": [2, 8, 10, 13, 14, 20, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 46, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 121, 124, 125, 127, 128, 129, 131, 132, 134, 135, 136, 137, 138, 140, 142, 144, 145, 146, 147, 148, 154, 157, 159, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 188, 190, 191, 192, 193, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 209, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 229, 231, 232, 233, 235, 257, 281, 297, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 360, 362, 366, 369, 371, 372, 373, 375, 377, 378, 379, 380, 381, 383, 384, 385, 388, 389, 390, 391, 394, 395, 396, 398, 399, 400, 401, 402, 404, 405, 406, 407, 409, 410, 412, 413, 414, 415, 416, 417, 418, 421, 422], "thick": [300, 372], "thing": [129, 135, 300, 301, 318, 357, 377, 379, 380, 401, 405, 410, 417], "thinghood": 395, "think": [328, 379, 399, 402, 410, 417], "thinsp": 192, "third": [52, 182, 216, 231, 355, 366, 373, 388, 409, 411, 422], "third_person": [57, 89], "thirteen": [57, 63, 373, 405], "thirti": 373, "this_corpu": 110, "this_corpus_particip": 367, "this_fil": 367, "this_is_an_extremely_long_mark": 411, "this_neg": 197, "thisb": 373, "thislovesthat": 398, "tho": 394, "thoma": 422, "thorn": 192, "thoroughli": 198, "thorsten": 225, "those": [28, 42, 57, 62, 68, 72, 73, 107, 110, 111, 120, 121, 125, 127, 131, 161, 162, 170, 179, 199, 205, 206, 231, 300, 306, 309, 323, 340, 341, 348, 371, 372, 373, 375, 379, 380, 396, 405, 413, 417], "though": [57, 72, 135, 142, 144, 148, 172, 215, 339, 373, 380, 410], "thought": [191, 300, 347, 350], "thousand": 373, "thread": [124, 125, 300], "thread_id": 125, "threadgroup": 124, "three": [2, 7, 28, 53, 57, 67, 69, 72, 81, 89, 95, 100, 119, 144, 146, 148, 159, 162, 170, 204, 206, 218, 233, 301, 307, 311, 324, 329, 332, 333, 340, 341, 348, 354, 371, 373, 377, 378, 381, 383, 388, 392, 402, 411, 417], "threshold": [48, 145, 192, 217, 306, 309, 340], "thrice": 203, "through": [7, 10, 24, 28, 57, 72, 111, 120, 146, 151, 157, 162, 163, 170, 172, 173, 174, 183, 186, 218, 300, 333, 357, 380, 417, 420, 421], "throw": [37, 281, 370, 373, 382, 409, 414], "thrown": 37, "thu": [24, 28, 46, 57, 72, 86, 104, 120, 135, 146, 182, 206, 215, 318, 319, 329, 332, 333, 366, 373, 377, 380, 388, 402, 412, 413, 417], "thuent": 217, "thunder": 373, "thursdai": [420, 422], "thyroid": 373, "ti": [216, 314, 379], "tiago": 422, "tibor": 309, "tica": 399, "tico": 399, "tid": 125, "tie_down": 417, "tientsin": 366, "tier": 419, "tigersearch": 422, "tighten": 233, "tigrinya_tigrigna": [57, 103], "tikteat": 367, "tild": 192, "tile": 422, "time": [7, 14, 25, 28, 29, 33, 39, 52, 57, 64, 69, 72, 73, 99, 103, 104, 110, 113, 119, 131, 134, 135, 147, 150, 155, 158, 162, 163, 165, 167, 171, 173, 174, 179, 182, 192, 196, 197, 215, 218, 223, 229, 300, 309, 324, 329, 330, 331, 332, 333, 340, 341, 342, 343, 352, 354, 355, 357, 366, 369, 371, 373, 377, 379, 380, 381, 383, 388, 398, 399, 405, 417, 422], "timedelta": 352, "timeout": [128, 163, 354, 355], "timer": [0, 195, 197], "timestamp": 355, "timestamped_fil": [351, 355], "timezon": 352, "timi": 100, "timit": [55, 57, 99, 422], "timitcorpusread": [55, 57, 100], "timitd": [57, 100], "timittaggedcorpusread": [55, 57, 99], "tingl": 373, "tinha": 399, "tion": 314, "tip": [0, 419], "tirentirentiren": 410, "titan": 417, "titl": [55, 57, 61, 73, 78, 91, 109, 116, 119, 179, 373], "tj": 147, "tk": [117, 119, 357], "tkinter": [113, 117, 118, 119, 185, 357, 422], "tknzr": [304, 410], "tl": [223, 373, 410], "tlp": 392, "tmp": [33, 81, 89, 309], "tmp_path": [267, 270], "tn": 404, "tna3": 205, "tne3": 205, "tnem4": 205, "tnt": [0, 213, 422], "to_chunkstruct": [25, 28], "to_cnf": [0, 180, 193], "to_conl": [159, 163, 164, 376], "to_depgraph": [180, 189, 384], "to_dot": [159, 164], "to_fol": [123, 125], "to_glueformula_list": [180, 187, 189, 384], "to_lowercas": [206, 281], "to_screen": 355, "to_settings_str": [0, 321], "to_sfm_str": [0, 321], "to_uid": [57, 84], "toda": 399, "todai": [221, 373, 405, 410], "todd": 324, "todo": [57, 69, 144, 147, 163, 317, 365, 371, 399], "togeth": [13, 57, 72, 91, 104, 139, 161, 300, 307, 372, 373, 381, 388, 399, 412, 417], "toggl": [8, 117], "toggle_collaps": [114, 118], "toi": [67, 111, 360, 375, 422], "tok": [43, 181, 184, 190, 191, 196, 223, 302, 309, 318, 319, 410], "tok_cl": 309, "token": [0, 7, 8, 12, 14, 16, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 41, 43, 44, 47, 51, 52, 55, 57, 58, 61, 63, 64, 65, 66, 68, 71, 74, 75, 78, 86, 87, 90, 91, 93, 94, 99, 100, 102, 103, 104, 106, 113, 121, 131, 135, 142, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 184, 190, 191, 196, 197, 200, 201, 202, 204, 207, 208, 209, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 231, 232, 233, 263, 283, 284, 300, 301, 325, 326, 327, 328, 334, 335, 337, 338, 339, 356, 357, 360, 361, 368, 369, 371, 373, 375, 378, 379, 392, 394, 398, 399, 401, 405, 409, 420, 422, 424], "token_cl": 309, "tokenis": 354, "tokenize_s": [302, 303, 311, 410], "tokenized_source_text": 306, "tokenizeri": [0, 163, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319], "tokensearch": [0, 300], "tokensequ": [0, 302, 317], "tokentablefield": [0, 302, 317], "tokenwrap": [0, 357], "toknum": [104, 373], "toktok": [0, 302, 410], "toktok_regex": [302, 318], "toktoktoken": [0, 302, 318, 422], "toktyp": 37, "tokyo": 308, "tom": [422, 424], "tomaarsen": 424, "tomar": 399, "tomast": 399, "tomcavag": 422, "tone": [284, 422], "tongu": 20, "tonight": [307, 410], "tonya": 148, "too": [57, 72, 90, 198, 304, 331, 332, 333, 339, 371, 373, 380, 389, 405, 410, 417], "took": [57, 72, 223, 373, 410, 422], "tool": [1, 2, 3, 7, 8, 53, 113, 115, 119, 124, 152, 164, 196, 198, 373, 388, 399, 402, 405, 420, 422], "toolbox": [0, 55, 57, 361, 422], "toolbox_data": 411, "toolboxcorpusread": [55, 57, 101], "toolboxdata": [0, 321], "toolboxset": [0, 321], "toolkit": [0, 57, 96, 106, 119, 311, 359, 422], "top": [2, 8, 28, 33, 61, 80, 93, 108, 117, 118, 119, 134, 162, 164, 165, 167, 173, 191, 197, 301, 341, 345, 347, 348, 350, 360, 371, 376, 383, 386, 388, 398, 404, 413, 414, 415, 419, 422], "top_n": 196, "top_relation_label": [164, 169, 376], "topdownchartpars": [0, 159, 162, 398], "topdowninitrul": [0, 159, 162, 167], "topdownpredictrul": [0, 159, 162], "topic": [30, 36, 107, 317, 373, 420, 422], "topic_domain": [107, 417], "topmost": 107, "topn": 383, "topspac": [180, 184], "toronto": [57, 109, 145], "torsten": 422, "tostr": [373, 401, 411], "tot": [57, 91, 373], "total": [0, 57, 72, 100, 104, 113, 135, 137, 143, 146, 162, 165, 167, 179, 197, 198, 328, 329, 330, 371, 422], "total_count": 317, "total_ord": 380, "totalannot": [57, 72], "touch": [372, 373, 410], "tow": 417, "toward": [29, 147, 215, 372], "tower": [57, 72, 381, 405], "town": 366, "toy_pcfg1": [386, 398], "toy_pcfg2": 398, "tp": [341, 348, 354, 403], "tpc": 373, "tpec2iv": 205, "tpeders": 94, "tpir2b": 205, "tpl": [216, 409], "tpmus2": 205, "tpp": 414, "tpro2b": 205, "tr": [179, 182], "tra": 399, "trace": [0, 14, 28, 33, 48, 49, 50, 51, 81, 89, 120, 159, 162, 165, 167, 171, 173, 174, 177, 178, 180, 183, 186, 192, 194, 216, 229, 322, 326, 341, 343, 368, 369, 375, 377, 378, 379, 401, 404, 409], "trace_chart_width": [162, 165, 167], "traceback": [231, 232, 233, 312, 326, 365, 368, 369, 373, 374, 375, 380, 382, 388, 389, 400, 401, 404, 410, 411, 412, 413, 417], "track": [52, 120, 170, 172, 333, 340, 354, 355, 380, 413, 419], "tracktoscreen_demo": [0, 351, 354], "tractabl": [340, 417], "trade": [192, 415], "tradeoff": [347, 350], "tradit": 408, "trail": [57, 61, 65, 184, 223, 270, 321, 373, 411], "train": [0, 27, 32, 33, 34, 35, 36, 38, 41, 44, 52, 88, 100, 136, 138, 156, 159, 169, 170, 172, 176, 179, 192, 195, 196, 197, 213, 215, 216, 217, 218, 219, 221, 223, 224, 225, 229, 233, 291, 292, 293, 294, 295, 302, 309, 322, 324, 329, 330, 331, 332, 333, 334, 360, 369, 373, 399, 400, 402, 405, 409, 412, 422], "train_and_test": 400, "train_cl": 309, "train_corpu": 400, "train_data": [217, 369, 391], "train_deppars": [180, 187], "train_from_fil": [159, 169], "train_maxent_classifi": 33, "train_maxent_classifier_with_gi": [0, 30, 33], "train_maxent_classifier_with_ii": [0, 30, 33], "train_maxent_classifier_with_megam": [0, 30, 33], "train_obj_doc": 405, "train_sent": [216, 230], "train_set": 383, "train_stat": [213, 215, 216], "train_subj_doc": 405, "train_supervis": [213, 218, 400], "train_text": 309, "train_tok": [33, 34, 41, 43], "train_token": [302, 309], "train_unsupervis": [213, 218], "trainer": [43, 196, 197, 216, 218, 231, 233, 400, 405], "training_data": [216, 249, 409], "training_doc": 405, "training_opt": 217, "training_set": [196, 405], "training_stat": 215, "tran": 379, "transact": [402, 419], "transcr": 373, "transcrib": 373, "transcript": [57, 67, 100, 373, 422], "transcription_dict": [55, 57, 100], "transfer": [176, 179], "transfer_mesg": 373, "transform": [0, 25, 28, 57, 79, 80, 81, 89, 108, 110, 126, 148, 151, 159, 163, 201, 202, 215, 216, 218, 227, 232, 233, 320, 341, 348, 350, 368, 373, 413, 415], "transient": 317, "transit": [0, 107, 121, 159, 176, 182, 217, 218, 357, 366, 379, 401, 417, 422], "transition_pars": 176, "transitionpars": [0, 159], "transitive_closur": [0, 357], "translat": [0, 22, 24, 33, 55, 57, 67, 84, 85, 106, 127, 133, 154, 192, 246, 361, 362, 366, 374, 377, 393, 422], "translation_opt": 340, "translation_q": [55, 57, 84], "translation_t": [329, 330, 331, 332, 333, 412], "translations_for": [322, 323], "transpos": 33, "transposit": [148, 266], "travers": [57, 72, 107, 170, 215, 326, 341, 345, 347, 350, 357, 417], "travi": 422, "treat": [32, 52, 57, 72, 117, 124, 135, 137, 144, 162, 163, 175, 191, 300, 310, 312, 319, 377, 380, 388, 402, 411, 412, 413], "tree": [0, 2, 7, 8, 14, 25, 26, 27, 28, 29, 32, 38, 46, 49, 51, 55, 57, 62, 66, 69, 76, 81, 89, 93, 96, 107, 108, 109, 114, 119, 121, 131, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 188, 192, 194, 283, 321, 349, 350, 357, 361, 366, 368, 369, 373, 376, 377, 378, 379, 384, 387, 398, 399, 401, 402, 404, 411, 415, 416, 420, 422], "tree1": 402, "tree2": [402, 413], "tree2conllstr": [0, 25, 29], "tree2conlltag": [0, 25, 29], "tree2semi_rel": [0, 180, 192, 402], "tree3": 402, "tree_": 118, "tree_class": [57, 69, 162, 167], "tree_load": 413, "tree_str": [164, 415], "tree_to_treeseg": [0, 114, 118], "treebank": [0, 25, 57, 62, 81, 89, 96, 113, 164, 206, 213, 214, 216, 220, 262, 302, 341, 344, 347, 348, 350, 365, 373, 376, 398, 401, 409, 410, 413, 414, 420, 422], "treebank_data": [164, 376], "treebanktoken": 319, "treebankworddetoken": [0, 302, 305, 319, 410, 422], "treebankwordtoken": [0, 284, 302, 305, 319, 320, 410, 422], "treeedg": [0, 14, 159, 162, 167, 171], "treepo": [57, 81, 89, 341, 343, 401, 413], "treeposit": [0, 301, 341, 343, 348, 413], "treeposition_spanning_leav": [0, 341, 348], "treepositions_no_leav": [0, 301], "treeprettyprint": [0, 341, 345, 348, 361], "trees2": 379, "treeseg": 118, "treesegmentwidget": [0, 114, 118], "treetoken": 121, "treetransform": [0, 361], "treeview": [0, 114, 118], "treewidget": [0, 114, 118], "tremend": 198, "trenkl": 42, "tresoldi": 422, "trevor": 424, "trevorcohn": 424, "trg_class": [332, 333], "trg_phrase": [322, 323], "trg_sentenc": [322, 329, 330, 334], "trglen": [327, 338], "trgtext": [327, 338], "tri": [111, 124, 144, 171, 173, 223, 225, 232, 311, 355, 357, 409], "triag": 424, "trial": [50, 57, 72, 217, 381], "triangular": 118, "tribe": 300, "tribunal_supremo": 402, "trichocyst": 395, "trick": 367, "tricki": 413, "tricky_sent": 405, "trie": [0, 52, 307], "trigger": [57, 72, 107, 119, 205, 232, 357], "trigram": [0, 42, 53, 135, 146, 179, 300, 324, 357, 371, 394, 400], "trigram_fd": 53, "trigram_measur": [53, 371], "trigram_score_fn": 146, "trigram_training_data": 249, "trigramassocmeasur": [0, 143, 146, 371, 394], "trigramcollocationfind": [0, 53, 371], "trigramtagg": [0, 213, 223], "triniti": 401, "tripl": [144, 159, 163, 164, 175, 192, 194, 311, 376, 380, 402], "triplet_count": 394, "trippl": 173, "trivial": [371, 373], "trn": [100, 373], "troop": [324, 325, 328, 335, 337], "troubl": 24, "trough": 314, "trouser": 417, "trq": [57, 84], "true": [13, 14, 27, 29, 30, 32, 33, 34, 36, 37, 38, 43, 44, 46, 49, 52, 57, 58, 59, 61, 63, 65, 66, 68, 69, 71, 72, 75, 80, 87, 90, 91, 93, 99, 100, 101, 102, 106, 107, 111, 113, 117, 118, 119, 120, 121, 124, 125, 127, 128, 129, 131, 135, 137, 138, 142, 147, 162, 163, 164, 165, 166, 167, 173, 174, 176, 179, 181, 182, 183, 184, 186, 187, 188, 191, 192, 196, 197, 198, 203, 205, 206, 209, 211, 214, 215, 216, 218, 220, 221, 223, 225, 229, 231, 232, 233, 262, 266, 281, 284, 300, 301, 304, 305, 307, 308, 309, 310, 311, 312, 315, 317, 318, 319, 320, 321, 323, 324, 325, 327, 339, 341, 343, 344, 345, 347, 348, 353, 355, 357, 363, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 379, 380, 383, 384, 385, 388, 389, 390, 391, 392, 393, 394, 396, 398, 400, 403, 404, 408, 409, 410, 413, 414, 415, 417, 418, 422], "truli": 409, "truman": 373, "truncat": [52, 107, 147, 149, 214, 357, 394, 397, 409], "trust": 419, "truth": [24, 155, 180, 186, 194, 221, 328], "truth_typ": 392, "truthi": [57, 72], "truthvaluetyp": [0, 180, 191], "try": [7, 57, 65, 75, 107, 124, 126, 128, 132, 135, 142, 158, 232, 334, 364, 369, 373, 377, 378, 379, 380, 384, 388, 389, 392, 404, 409], "try_port": [0, 159, 163], "ts_occur": 317, "tsai": 96, "tsent": 399, "tsi3": 205, "tsis0": 205, "tsne": 383, "tst": 100, "tsu": 22, "tsukada": 339, "tsutomu": 339, "tt": [57, 84, 216, 317, 409, 410], "tt1": 205, "tthe": 410, "tudo": 399, "tulo2v": 205, "tune": [145, 179, 324], "tup": 212, "tup2tab": [0, 212], "tupdict2tab": [0, 212], "tupkey2dict": [0, 212], "tupl": [14, 16, 23, 26, 29, 30, 33, 34, 35, 41, 43, 44, 52, 55, 57, 59, 61, 64, 65, 66, 67, 69, 70, 71, 72, 75, 76, 77, 78, 79, 81, 82, 84, 85, 88, 89, 91, 93, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 112, 117, 119, 120, 124, 125, 127, 129, 131, 135, 136, 137, 138, 142, 144, 145, 146, 148, 150, 152, 156, 158, 161, 162, 163, 166, 167, 169, 171, 173, 175, 177, 179, 180, 182, 186, 191, 192, 194, 196, 197, 203, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 230, 232, 233, 266, 284, 300, 301, 302, 303, 304, 305, 307, 309, 310, 311, 313, 314, 319, 320, 321, 323, 324, 325, 326, 327, 334, 335, 338, 339, 340, 341, 345, 348, 352, 354, 355, 357, 366, 367, 368, 371, 373, 390, 404, 405, 411, 412], "tuple2str": [0, 213, 226], "tups2tab": [0, 212], "ture": [179, 400], "turica": 424, "turismo": 417, "turkish": [57, 103], "turkish_turkc": [57, 103], "turn": [25, 28, 55, 57, 66, 69, 75, 78, 79, 81, 87, 89, 98, 99, 135, 136, 138, 139, 206, 360, 367, 373, 379, 398, 401, 404, 410, 415, 419], "turn_01": 401, "turn_on": [57, 81, 89, 401], "turner": 401, "turveydrop": 395, "tussl": [57, 106], "tutori": [218, 301, 347, 350, 422], "tv": [364, 379, 404], "tw": 96, "twd": 319, "tweak": 373, "tweet": [57, 102, 197, 304, 351, 352, 353, 354, 355, 356, 373, 422], "tweethandl": 352, "tweethandleri": [0, 351, 352, 355], "tweeti": [127, 396], "tweetid": 353, "tweets_by_user_demo": [0, 351, 354], "tweets_fil": 353, "tweettoken": [0, 57, 102, 197, 284, 302, 304, 422], "tweetview": [0, 351, 355], "tweetwrit": [0, 351, 355], "twenti": 68, "twice": 379, "twin": 405, "twitter": [0, 55, 57, 270, 285, 304, 373, 410, 422], "twitter_demo": [0, 351], "twitterclass_demo": [0, 351, 354], "twittercli": [0, 351, 353, 354, 356], "twittercorpusread": [55, 57, 102, 354], "twizt": 300, "two": [8, 13, 25, 28, 33, 35, 36, 50, 51, 52, 53, 57, 67, 72, 75, 77, 81, 89, 98, 104, 107, 111, 113, 119, 120, 121, 129, 131, 135, 139, 142, 144, 145, 148, 150, 151, 152, 159, 162, 163, 172, 174, 177, 178, 179, 180, 191, 192, 197, 203, 204, 223, 231, 233, 252, 259, 266, 270, 284, 300, 302, 305, 307, 309, 310, 312, 313, 315, 319, 320, 323, 324, 326, 328, 341, 342, 347, 348, 350, 353, 364, 367, 369, 371, 373, 377, 378, 379, 380, 385, 387, 388, 391, 392, 394, 396, 400, 402, 407, 410, 411, 412, 413, 415, 417, 418, 422], "tword": 399, "twython": [353, 355], "twythonstream": 355, "txt": [57, 58, 68, 78, 84, 87, 89, 90, 91, 99, 100, 103, 109, 111, 144, 198, 263, 281, 300, 356, 371, 372, 373, 375, 383, 398, 399, 412, 417], "txt2list": [0, 212], "txt2set": [0, 212], "ty": 152, "typ": [72, 133, 309], "type": [0, 13, 14, 15, 18, 23, 25, 26, 28, 29, 31, 32, 33, 35, 38, 43, 44, 49, 51, 55, 57, 58, 59, 61, 63, 65, 66, 68, 69, 71, 72, 74, 75, 78, 79, 82, 83, 84, 86, 87, 90, 91, 92, 93, 94, 99, 100, 102, 104, 105, 107, 108, 111, 116, 118, 119, 120, 121, 124, 125, 131, 132, 135, 136, 138, 142, 144, 145, 147, 148, 149, 150, 151, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 190, 191, 192, 194, 196, 203, 204, 209, 211, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 229, 231, 232, 233, 257, 283, 284, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 348, 353, 355, 357, 360, 365, 368, 375, 381, 388, 390, 398, 399, 401, 410, 413, 421, 422], "type_check": [180, 181, 184, 190, 191], "type_no_period": [302, 309], "type_no_sentperiod": [302, 309], "type_str": 191, "type_thresh": 309, "typecheck": [0, 180, 184, 191, 392], "typedmaxentfeatureencod": [0, 30, 33], "typeerror": [132, 135, 137, 142, 231, 233, 341, 343, 380, 413], "typeexcept": [0, 180, 191, 392], "typeraiseruleset": 364, "typeresolutionexcept": [0, 180, 191], "typic": [26, 28, 29, 30, 31, 33, 34, 52, 57, 58, 72, 99, 107, 111, 119, 120, 121, 131, 159, 160, 161, 162, 163, 170, 174, 179, 202, 218, 223, 231, 300, 312, 323, 334, 341, 348, 369, 373, 379, 380, 381, 388, 389, 399, 413, 417], "typo": 220, "tyre": 109, "tzinfo": 352, "u": [51, 57, 60, 91, 92, 106, 133, 135, 142, 175, 211, 216, 300, 308, 311, 316, 318, 320, 341, 347, 348, 350, 364, 372, 373, 377, 379, 380, 392, 395, 399, 402, 409, 410, 412, 413, 421], "u1": 186, "u2": 186, "u200": 192, "u2002": 192, "u2003": 192, "u2009": 192, "u200c": 192, "u200d": 192, "u200f": 192, "u201c": 410, "u201cleft": 410, "u201d": 410, "u2026": 410, "u2028": 308, "u3": 186, "u4": 186, "ua": 166, "uacut": 192, "ualberta": 145, "uarr": 192, "uber": 198, "ubuntu": 422, "uc": 306, "ucirc": 192, "ucsd": 140, "udhr": [55, 57, 422], "udhrcorpusread": [55, 57, 103], "ugh": 183, "ugli": 405, "ugo1": 205, "ugrav": 192, "uh": [67, 198, 373], "uhuh": 198, "ui": [57, 84, 149, 397], "uic": [68, 83, 90, 91], "uk": [57, 61, 109, 125, 357, 373, 424], "ukip": 373, "ulrich": 306, "ultim": 391, "um": [205, 399], "uma": [208, 399], "uml": 192, "umn": 94, "umsd": 357, "un": [25, 28, 57, 72, 222, 312, 364, 381, 399], "un_chomsky_normal_form": [0, 341, 347, 348, 350, 415], "una": 410, "unabl": [223, 375, 388], "unambigu": 398, "unann": [57, 72], "unannot": [46, 373], "unari": [13, 121, 182, 186, 341, 347, 348, 350, 366], "unary_concept": [0, 180, 182], "unarychar": [341, 347, 348], "unattest": 33, "unavail": 388, "unbedingt": 410, "unbeliev": [198, 405], "unbind_click": [114, 119], "unbind_drag": [114, 119], "unbound": 120, "unchang": [186, 203, 209, 211, 333, 334, 400], "unchunk": [25, 29, 368], "unchunked_text": 368, "unchunkrul": [0, 25, 28, 368], "unclear": [61, 373], "uncompel": 405, "uncompress": 33, "unconstrain": 161, "uncurri": [180, 191], "undefin": [0, 50, 52, 104, 179, 180, 186, 283, 404], "under": [33, 57, 59, 65, 72, 96, 107, 111, 112, 120, 121, 134, 162, 164, 179, 182, 201, 202, 209, 232, 304, 324, 325, 326, 328, 333, 334, 335, 337, 339, 377, 381, 386, 395, 397, 398, 404, 405, 410], "underflow": [135, 179], "undergo": 422, "undergon": 422, "undergradu": 383, "underli": [43, 52, 61, 93, 104, 111, 191, 368, 373], "underscor": [57, 72, 163], "underspecifi": [188, 325, 379], "understand": [24, 135, 206, 309, 399], "understem": 149, "understood": [172, 381], "understudi": 324, "undesir": 328, "undirect": 15, "undirectedbinarycombin": [0, 12, 15], "undirectedcomposit": [0, 12, 15], "undirectedfunctionappl": [0, 12, 15], "undirectedsubstitut": [0, 12, 15], "undirectedtyperais": [0, 12, 15], "undo": [8, 159, 173, 174, 319], "undon": [173, 174, 319], "unemploy": 213, "unescap": 320, "unexpand": 162, "unexpect": [191, 378, 392, 413], "unexpectedtokenexcept": [0, 180, 191], "unexplain": 413, "unfortun": [57, 62, 131, 373], "unfre": [107, 357, 417], "ungrammat": [170, 177, 387], "uni": [119, 140, 225, 399, 402], "uni_count": 394, "uni_counts2": 394, "unicharscorpusread": [55, 57, 106], "unicod": [25, 57, 58, 59, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 79, 80, 82, 83, 84, 85, 86, 87, 90, 91, 93, 94, 98, 99, 103, 104, 105, 106, 107, 108, 109, 111, 192, 201, 202, 204, 209, 219, 302, 310, 321, 341, 345, 348, 357, 373, 375, 410, 422], "unicode_field": [57, 101, 321], "unicode_str": 279, "unicodeerror": 357, "unicodelin": [341, 345, 413, 414], "unif": [120, 129, 167, 379, 398, 422], "unifi": [0, 13, 120, 123, 129, 161, 167, 180, 181, 190, 379, 380, 384, 413], "unificationexcept": [0, 123, 129, 180, 190, 384], "unificationfailur": [120, 380], "uniform": [57, 84, 162, 179, 324, 329, 330, 331, 332, 333, 334, 341, 345, 405], "uniformli": [324, 331, 332, 333], "uniformprobdist": [0, 179], "unify_base_valu": [0, 120], "unigram": [0, 53, 135, 136, 137, 138, 143, 146, 197, 213, 223, 229, 324, 325, 339, 399, 405, 409], "unigram_feat": 405, "unigram_scor": [135, 136, 140], "unigram_tagg": [223, 409], "unigram_word_feat": [195, 196, 405], "unigramtagg": [0, 213, 216, 223, 399, 409], "unimelb": 46, "unimpl": 175, "unind": [57, 62], "unindented_paren": [57, 62], "unintellig": 218, "union": [119, 127, 327, 380], "uniqu": [13, 30, 55, 57, 67, 92, 98, 100, 107, 113, 124, 127, 167, 179, 190, 191, 341, 343, 380, 409], "unique_ancestor": [0, 301], "unique_index": 187, "unique_list": [0, 357, 400], "unique_names_demo": [0, 123, 127], "unique_vari": [0, 180, 191], "uniquenamesprov": [0, 123, 127, 396], "uniquepair": [57, 106], "unit": [39, 46, 57, 72, 93, 102, 177, 218, 222, 234, 238, 300, 373, 402], "unitari": 121, "united_kingdom": 417, "uniti": [135, 138], "unittest": [280, 398], "univ_qu": [377, 385], "univ_scop": [191, 193], "univers": [57, 67, 68, 79, 83, 85, 91, 94, 124, 145, 163, 201, 204, 209, 213, 217, 220, 224, 306, 314, 318, 329, 330, 331, 332, 333, 334, 340, 371, 373, 377, 383, 392, 395, 412, 422], "unix": 360, "unk": [135, 142, 225, 391], "unk_cutoff": [135, 142], "unk_label": [135, 142], "unknown": [36, 57, 59, 79, 100, 113, 119, 120, 135, 142, 186, 223, 225, 232, 375, 380], "unlabel": [33, 36, 166, 218, 223], "unlabeled_featureset": 36, "unlabeled_sequ": 218, "unladen": [163, 219, 222, 224], "unless": [61, 80, 93, 104, 108, 111, 396, 410], "unlexic": [347, 350], "unlik": [26, 172, 309, 333, 398, 422], "unlimp": 395, "unlink": [375, 411], "unload": 238, "unm": 388, "unmark": [114, 119], "unmasked_scor": [0, 135, 136, 138], "unmatch": [312, 335, 373], "unmodifi": [57, 65, 197, 204], "unnecessari": [124, 129], "unord": 121, "unp": 396, "unparseableinputexcept": [0, 180, 181], "unpermut": 150, "unpickel": 410, "unpickl": [375, 400], "unprocess": [55, 57, 373], "unquot": 120, "unrecogn": 388, "unresolv": 0, "unrestrict": [15, 25, 26], "unsaf": 375, "unseen": [33, 35, 135, 142, 179, 225, 229, 369, 391, 400], "unseen_featur": 33, "unseg": 225, "unsort": 395, "unsortedchartpars": [0, 159, 171, 398], "unspecifi": [57, 84, 120, 162, 388], "unsuccess": 357, "unsuccessfulli": 388, "unsuit": 309, "unsupervis": [46, 218, 309], "unsupport": 374, "unsur": 421, "untag": [0, 213, 216, 226, 373, 409], "untagged_fil": 402, "until": [7, 25, 33, 46, 48, 49, 50, 57, 79, 104, 107, 108, 110, 120, 121, 134, 158, 162, 171, 178, 306, 309, 341, 343, 373, 375, 380, 388, 413, 417], "untouch": [57, 62], "untrain": [216, 225], "untransl": 340, "untri": [7, 173], "untried_expandable_product": [159, 173], "untried_match": [159, 173], "unus": [215, 229], "unusu": [198, 373], "unweight": [107, 215, 357, 417], "unweighted_minimum_spanning_dict": [0, 357], "unweighted_minimum_spanning_digraph": [0, 357], "unweighted_minimum_spanning_tre": [0, 107, 357, 417], "unwrap": [0, 57, 101, 131, 321, 411], "unzip": [0, 113, 360], "unzipped_s": [0, 113], "up": [2, 7, 8, 49, 52, 57, 59, 61, 64, 65, 69, 70, 71, 72, 75, 78, 80, 81, 82, 84, 85, 89, 93, 98, 99, 100, 105, 107, 108, 109, 111, 113, 117, 118, 119, 131, 132, 135, 138, 139, 142, 159, 161, 162, 171, 172, 174, 178, 216, 223, 225, 251, 260, 271, 299, 300, 306, 314, 324, 325, 328, 333, 334, 338, 340, 341, 345, 367, 368, 372, 373, 375, 380, 381, 388, 398, 399, 401, 402, 409, 417, 420, 422], "updat": [0, 25, 33, 46, 48, 52, 112, 113, 114, 119, 120, 125, 135, 137, 142, 143, 149, 170, 178, 179, 186, 213, 217, 221, 380, 393, 400, 413, 420, 422], "update_align": [322, 330], "update_clust": [46, 49], "update_distort": [322, 331, 332], "update_edge_scor": [159, 170], "update_fertil": [322, 334], "update_lexical_transl": [322, 330, 334], "update_null_gener": [322, 334], "update_output": 218, "update_vac": [322, 333], "update_wrapp": 112, "upenn": [57, 88, 106, 182, 319, 341, 348, 366], "upenn_tagset": [0, 122], "upo": 372, "upon": [104, 155, 170, 179, 191, 221, 305, 372, 373, 410], "upper": [57, 99, 119, 203, 309, 341, 348, 355, 399, 417], "upper_data_limit": [352, 355], "upper_date_limit": [352, 355], "upperbound": 148, "uppercas": [67, 191, 309, 410], "upsih": 192, "upsilon": 192, "uptodatemessag": [0, 113], "upward": 119, "uq": [57, 84], "uqi3": 205, "urg": [61, 373], "url": [0, 57, 63, 65, 72, 102, 111, 113, 131, 163, 177, 353, 357, 375], "url_foe_1": [302, 318], "url_foe_2": [302, 318], "url_foe_3": [302, 318], "url_foe_4": [302, 318], "urlbas": [57, 65], "us": [0, 2, 7, 8, 10, 13, 14, 18, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 142, 144, 145, 146, 147, 148, 149, 151, 152, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 181, 182, 183, 184, 186, 188, 190, 191, 192, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 211, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 229, 233, 257, 260, 283, 284, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 360, 368, 369, 373, 375, 376, 377, 378, 379, 380, 381, 385, 389, 391, 392, 394, 396, 398, 399, 401, 404, 405, 409, 410, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422], "usa": [57, 65, 83, 91, 204, 222, 318, 367, 424], "usabl": 146, "usag": [0, 10, 34, 46, 52, 57, 58, 72, 76, 78, 79, 87, 99, 103, 109, 112, 113, 131, 143, 163, 172, 180, 182, 225, 229, 358], "usage_domain": [107, 417], "use_agenda": [162, 167], "use_lemmat": 37, "use_min_depth": [107, 418], "use_tagdict": 221, "use_thread": 113, "used_var": 120, "used_vari": 193, "user": [10, 18, 23, 33, 57, 58, 59, 80, 86, 99, 104, 109, 111, 113, 117, 118, 119, 131, 169, 171, 178, 179, 180, 182, 217, 222, 304, 310, 325, 335, 339, 353, 354, 355, 356, 357, 360, 366, 373, 388, 420, 421, 422], "user_info_from_id": [351, 355], "user_ment": 353, "user_tweet": [351, 355], "userid": [354, 355], "usernam": [304, 357, 360, 410], "userwarn": 107, "usr": [39, 57, 78, 87, 103, 111, 113, 188, 222, 360, 373, 388], "usthb": 201, "usu": 151, "usual": [24, 33, 57, 65, 107, 120, 121, 134, 148, 169, 179, 186, 191, 197, 215, 218, 231, 300, 301, 326, 332, 335, 353, 367, 373, 379, 380, 401, 405, 412, 419], "usw": 410, "utc": 352, "utcoffset": [351, 352], "utf": [39, 57, 95, 103, 111, 113, 192, 222, 224, 316, 318, 321, 354, 373, 417], "utf8": [57, 59, 62, 63, 64, 66, 68, 69, 70, 71, 76, 79, 81, 87, 89, 90, 91, 97, 99, 100, 101, 102, 103, 104, 109, 131, 163, 175, 194, 197, 224, 302, 311, 315, 321, 353, 357, 373, 401, 411], "util": [0, 18, 25, 30, 46, 55, 57, 76, 107, 114, 116, 118, 125, 135, 137, 139, 159, 172, 180, 195, 196, 199, 213, 302, 306, 307, 314, 351, 353, 361, 368, 373, 391, 396, 398, 400, 404, 405, 410], "utrecht": 424, "utt": 399, "utter": [55, 57, 58, 61, 65, 66, 78, 79, 87, 98, 99, 100, 159, 373], "utteranceid": [55, 57, 100, 373], "utterli": 198, "uu": [120, 164], "uuml": 192, "uw": [67, 405], "uw1": 373, "ux": 373, "v": [0, 28, 33, 51, 52, 57, 67, 72, 79, 88, 89, 95, 107, 109, 120, 140, 143, 145, 151, 156, 164, 170, 174, 180, 184, 186, 188, 191, 211, 213, 214, 220, 229, 308, 323, 328, 333, 341, 342, 347, 348, 350, 366, 367, 368, 371, 373, 375, 379, 380, 381, 384, 386, 391, 392, 395, 398, 399, 401, 402, 404, 406, 407, 409, 411, 413, 414, 419, 422], "v0": [57, 72, 404], "v1": [144, 170, 384, 392, 404], "v13a": 324, "v14": 308, "v2": [107, 170, 384, 392, 404], "v3": [39, 170, 222, 392, 404, 411, 418], "v4": 392, "v5": 392, "v_head": 333, "v_kei": 391, "v_non_head": 333, "va": 399, "va11": 373, "va4": 373, "vacanc": 333, "vacancies_at": [322, 333], "vacant": 333, "vacuous": 377, "vader": [0, 195, 197, 422], "vader_lexicon": 198, "vaderconst": [0, 195, 198], "vagu": 24, "vag\u00f3n": 417, "vag\u00f3n_de_pasajero": 417, "vai": 399, "val": [33, 57, 60, 95, 111, 120, 131, 179, 180, 186, 341, 342, 346, 366, 375, 380, 404, 411, 413], "val0": 404, "val1": 404, "val2": 404, "val2str": [55, 57, 60], "val3": 404, "val_dump": [0, 180, 182, 366], "val_load": [0, 180, 182, 366], "valenc": [57, 72, 198], "valencia": [57, 60, 133], "valencian": [57, 60, 133], "valian": 367, "valid": [25, 28, 57, 72, 80, 117, 119, 131, 148, 163, 176, 179, 184, 190, 191, 205, 211, 229, 301, 306, 307, 313, 329, 330, 331, 332, 333, 352, 357, 389, 414, 418], "valid_phras": [322, 340], "validate_sig_len": [123, 127], "validate_syl": [302, 314], "valu": [0, 14, 28, 29, 30, 32, 33, 34, 35, 38, 39, 43, 44, 46, 51, 52, 57, 59, 60, 61, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 78, 79, 80, 82, 84, 85, 92, 93, 98, 100, 102, 105, 107, 108, 109, 111, 112, 113, 117, 118, 119, 120, 121, 128, 131, 135, 142, 144, 145, 146, 147, 148, 149, 150, 151, 156, 162, 163, 167, 171, 172, 177, 178, 179, 180, 181, 182, 183, 186, 187, 191, 192, 194, 198, 214, 223, 225, 229, 231, 232, 233, 259, 300, 301, 309, 313, 314, 321, 324, 325, 326, 328, 329, 330, 331, 332, 333, 340, 341, 342, 347, 348, 350, 353, 354, 355, 357, 368, 373, 379, 383, 384, 387, 388, 391, 394, 402, 404, 405, 411, 413, 415, 417], "valuat": [0, 111, 123, 124, 126, 180, 182, 186, 375, 388], "valuation1": 404, "value_handl": [0, 120], "value_str": 92, "valueerror": [28, 111, 119, 120, 121, 131, 147, 150, 179, 209, 231, 232, 312, 341, 342, 343, 348, 368, 373, 375, 380, 400, 401, 404, 410, 413], "values_in_chart": [147, 394], "vamo": 399, "vamoo": 410, "van": [181, 192, 345, 349, 402], "vannoord": 42, "var": [13, 16, 25, 120, 181, 186, 364, 365, 380, 388], "var1": 181, "var2": 181, "varanda": 399, "varex": 186, "vari": [30, 57, 69, 107, 150, 373], "variabl": [0, 13, 14, 16, 28, 29, 33, 39, 46, 55, 57, 87, 102, 104, 117, 119, 120, 121, 127, 129, 131, 144, 159, 162, 165, 167, 171, 173, 174, 178, 179, 180, 181, 184, 186, 187, 188, 190, 191, 209, 222, 223, 224, 285, 309, 316, 324, 354, 360, 373, 375, 378, 379, 384, 388, 398, 400, 401, 404, 413], "variable_typ": [180, 181], "variablebinderexpress": [0, 180, 191], "variablebindingexcept": [0, 180, 190, 384], "variableexpress": [0, 180, 186, 190, 191, 380, 384, 392], "varianc": [48, 179, 373], "variance_charact": [322, 326], "variant": [36, 57, 67, 107, 146, 151, 186, 218], "variat": [15, 46, 50, 53, 179, 192, 309, 337, 405], "varieti": [28, 55, 57, 84, 113, 119, 157, 170, 179, 300, 355, 373, 394, 399, 402, 413, 417], "variou": [33, 36, 57, 107, 113, 125, 126, 170, 220, 285, 324, 330, 331, 332, 333, 334, 340, 373, 377, 408, 413, 422], "various_sent": 36, "varnam": 186, "var\u00e3o": 399, "vb": [147, 163, 166, 214, 216, 219, 224, 232, 373, 376, 377, 384, 385, 394, 401, 407, 409, 410, 420], "vbb": 363, "vbd": [28, 57, 62, 175, 176, 179, 214, 216, 223, 226, 368, 373, 401, 409, 410, 420], "vbg": [214, 216, 223, 409], "vbn": [28, 214, 373, 409, 410, 413, 415], "vbp": [163, 175, 214, 220, 386, 409, 414], "vbz": [39, 163, 175, 177, 213, 214, 219, 220, 221, 222, 224, 363, 373, 409, 410, 413], "vc": [166, 376], "ve": [57, 68, 107, 110, 305, 319, 373, 405, 409, 410, 422], "vector": [33, 34, 40, 41, 46, 47, 48, 49, 50, 51, 170, 383], "vectorspac": 46, "vectorspacecluster": [0, 46, 48, 49, 50, 51], "vee": 67, "vega": 204, "vegetoalkali": 395, "vehicl": 373, "veh\u00edculo": 417, "veio": 399, "vel": 399, "venda": 399, "vender": 399, "vennemann": 306, "ventura": 399, "ver": 399, "verb": [25, 55, 57, 69, 72, 79, 88, 89, 105, 107, 156, 199, 201, 202, 211, 213, 216, 217, 220, 223, 363, 368, 371, 373, 381, 398, 401, 409, 413, 414], "verb_group": [107, 417], "verb_head": [57, 69], "verb_stem": 69, "verb_t1": [199, 201, 202], "verb_t2": [199, 201, 202], "verb_t3": [199, 201, 202], "verb_t4": [199, 201, 202], "verb_t5": [199, 201, 202], "verb_t6": [199, 201, 202], "verbnet": [55, 57, 422], "verbnetcorpusread": [55, 57, 105], "verbos": [0, 28, 32, 33, 57, 107, 111, 113, 124, 125, 128, 129, 130, 131, 135, 137, 162, 163, 165, 167, 169, 171, 173, 174, 175, 176, 177, 178, 181, 182, 186, 187, 188, 196, 216, 217, 218, 219, 223, 224, 229, 232, 309, 315, 316, 351, 352, 354, 355, 356, 357, 375, 377, 379, 388, 402, 417], "verbrak": 402, "verbsfil": [57, 89], "verbspecif": 373, "vercelli": 109, "verd": 399, "verdad": 399, "verdadeirament": 399, "veri": [14, 24, 25, 33, 57, 104, 106, 125, 135, 137, 176, 198, 203, 233, 324, 369, 371, 373, 379, 380, 385, 395, 399, 405, 409, 412, 417, 420], "verif": 355, "verifi": [259, 355, 377], "verissimo": 208, "verkhogliad": 422, "versa": 172, "version": [0, 25, 28, 29, 32, 52, 57, 61, 65, 75, 84, 92, 94, 105, 107, 109, 111, 125, 131, 135, 138, 162, 164, 167, 179, 181, 182, 184, 191, 202, 206, 209, 216, 226, 229, 300, 302, 316, 320, 339, 341, 348, 357, 366, 367, 373, 376, 377, 388, 399, 401, 402, 409, 420, 421, 422], "versu": 151, "vertebr": [57, 107, 357, 417], "vertebra": 413, "vertex": 218, "vertic": [118, 119, 341, 345, 347, 348, 350], "vertmarkov": [341, 347, 348, 415], "vez": 399, "vg": [220, 414], "vg2main": [57, 103], "vi": [28, 109, 220, 399], "vi2": 205, "via": [29, 99, 107, 108, 111, 120, 170, 183, 192, 217, 218, 219, 300, 328, 355, 373, 380, 399, 422], "viagem": 399, "vice": [172, 300, 399], "vicissitud": 373, "victoria": 402, "vida": 399, "video": [373, 422], "vie0": 205, "vierem": 399, "vietnames": [57, 103, 318], "view": [52, 57, 58, 59, 61, 64, 66, 69, 71, 72, 74, 75, 79, 80, 81, 83, 86, 87, 89, 93, 94, 99, 102, 104, 108, 114, 119, 263, 333, 347, 350, 355, 372, 381, 399], "vigil": 410, "villanueva_de_la_serena": 402, "vincent": [109, 329, 330, 331, 332, 333, 334, 375, 377, 392, 404], "vindicta": 109, "vindo": 399, "vinken": [166, 373, 376], "vinyal": 328, "viqr": [57, 103], "vir": 399, "virg": 399, "virgin": 399, "virtual": [393, 421], "virtualenv": 421, "virtutibu": 109, "vis3j": 205, "visibl": [117, 119, 120, 134, 357, 380], "visit": [180, 184, 191], "visit_structur": [180, 184, 191], "visitatori": 395, "vista": 360, "visual": [115, 119, 197, 341, 345, 347, 350, 378, 383, 422], "visualis": [57, 107], "viterbi": [0, 159, 218], "viterbipars": [0, 159, 178, 398], "vitii": 109, "viveu": 399, "vkulyukin": 151, "vkweb": 151, "vl2": [341, 344], "vm": 393, "vmh0": 373, "vmi": 373, "vmis3": 373, "vmod": [166, 376], "vn": [57, 105], "vn_31_2": 373, "vncl": 373, "vnclass": [55, 57, 105, 373], "vnclass_id": [57, 105], "vnv": 402, "voar": 399, "voc": [281, 367], "vocab": [0, 135, 136, 140, 142, 300, 391], "vocab2": [135, 142], "vocab_data": 391, "vocabulari": [0, 135, 136, 138, 139, 140, 151, 249, 251, 281, 332, 391, 399, 409], "vocabulary_introduct": 317, "vocabulary_text": 136, "vocal": [57, 61, 72, 417], "voic": [89, 401, 417], "vol": [179, 201], "volta": 399, "volum": 354, "voluntari": 359, "vorpommern": 133, "vote": 371, "vovhund": 417, "vovs": 417, "vowel": [67, 145, 205, 209, 306, 314], "vp": [29, 39, 57, 62, 88, 103, 121, 163, 175, 220, 222, 301, 341, 345, 348, 364, 366, 368, 373, 375, 377, 379, 380, 382, 386, 392, 398, 401, 404, 407, 413, 414, 415], "vpnp": 364, "vppp": 364, "vpser": 364, "vulner": [373, 422], "vvn": 363, "v\u0495\u0911": [], "w": [30, 36, 42, 55, 57, 61, 67, 79, 87, 90, 91, 108, 111, 113, 120, 145, 186, 213, 214, 305, 308, 310, 317, 324, 325, 328, 337, 339, 368, 371, 373, 375, 378, 379, 380, 383, 391, 392, 395, 398, 399, 409, 411], "w0": 368, "w1": [53, 146, 371], "w14": [324, 362], "w16": 325, "w2": [53, 146, 371], "w3": [53, 79, 146, 182, 367, 371], "w4": [53, 146], "w_i": 225, "wa": [28, 33, 36, 40, 42, 57, 65, 70, 72, 86, 91, 92, 97, 107, 111, 117, 118, 119, 124, 131, 135, 142, 147, 163, 170, 173, 174, 179, 182, 197, 198, 201, 202, 203, 204, 207, 213, 218, 222, 223, 300, 305, 306, 308, 309, 319, 321, 324, 328, 329, 330, 331, 332, 333, 339, 341, 348, 362, 366, 367, 372, 373, 375, 380, 388, 392, 393, 398, 402, 405, 410, 413, 417, 418, 422], "waaaaayyyi": [304, 410], "waaayyi": [304, 410], "waaw": [201, 202], "wagon": 417, "wai": [8, 24, 32, 107, 110, 117, 119, 135, 144, 148, 159, 161, 172, 179, 188, 203, 209, 233, 283, 301, 302, 306, 331, 332, 339, 340, 341, 348, 357, 373, 375, 377, 379, 384, 388, 389, 399, 405, 412, 417], "wait": [135, 137, 191, 355], "walk": [0, 120, 125, 127, 163, 187, 341, 345, 372, 377, 378, 379, 380, 382, 388, 392, 396, 403, 404, 414, 417], "walk_x": 378, "wall": [88, 163, 315, 373], "waltz": 373, "wan": [305, 319], "wander": 372, "wang": [328, 422], "wanna": 410, "want": [36, 57, 59, 72, 91, 102, 119, 121, 135, 136, 137, 138, 144, 161, 179, 182, 196, 197, 222, 223, 360, 366, 371, 373, 375, 377, 378, 380, 388, 398, 399, 402, 409, 412], "war": [22, 163, 331, 332, 333], "ward": 324, "warm": 197, "warn": [55, 57, 72, 104, 107, 124, 131, 233, 334, 357, 368, 388, 413, 422], "warranti": 405, "warren": [182, 366, 405], "washington": [83, 263, 373, 402, 422], "wasn": [198, 319, 410], "wasnt": 198, "wast": 388, "wat": [57, 65, 339], "watch": [57, 65, 119, 140, 405, 422], "watcher": 119, "water": 419, "waterloo": 402, "wav": [55, 57, 100, 373], "wave": 373, "waw": [199, 204], "wb": 375, "wd_0": 233, "wd_01": 233, "wdt": [214, 409, 410, 413], "we": [25, 28, 33, 36, 57, 65, 67, 69, 72, 79, 91, 107, 108, 119, 121, 124, 135, 136, 137, 138, 142, 144, 156, 163, 164, 179, 180, 182, 183, 186, 188, 196, 197, 198, 203, 213, 218, 225, 235, 301, 302, 307, 311, 319, 320, 324, 327, 328, 333, 335, 347, 350, 357, 363, 364, 366, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 388, 391, 394, 396, 398, 399, 400, 401, 402, 405, 409, 410, 412, 413, 414, 417, 422], "weak": 375, "weakest": 91, "weakref": 375, "weather": 373, "weather_typ": 373, "web": [10, 57, 65, 83, 90, 91, 111, 148, 206, 234, 371, 373, 374, 422], "webdoc": 145, "weblog": 198, "webp": 164, "webpag": 375, "websit": [57, 65, 206, 318, 410, 422], "webtex": 373, "webtext": [57, 78, 87, 103, 373], "webview_fil": [55, 57, 65], "wee": 363, "weed": 333, "week": [134, 402, 422], "weekend": 373, "weekli": 73, "wei": [324, 328], "weierp": 192, "weight": [29, 30, 33, 34, 38, 41, 57, 107, 113, 120, 144, 145, 147, 149, 150, 151, 161, 170, 201, 214, 215, 218, 221, 324, 325, 329, 330, 331, 332, 333, 335, 373, 388, 397], "weight_senses_equ": [57, 107], "weighted_kappa": [143, 144], "weighted_kappa_pairwis": [143, 144], "weird": [318, 410], "weissweil": 203, "weka": [0, 30, 422], "wekaclassifi": [0, 30, 44, 369], "welch": 218, "welcom": 24, "well": [57, 69, 94, 107, 119, 135, 182, 232, 306, 309, 320, 328, 347, 350, 366, 373, 380, 388, 391, 399, 401, 410, 412], "went": [36, 358, 419], "werd": 402, "were": [28, 29, 33, 57, 72, 73, 75, 82, 86, 92, 107, 108, 119, 129, 131, 133, 158, 162, 167, 170, 172, 179, 203, 204, 232, 281, 319, 324, 357, 372, 373, 381, 410, 417, 422], "weren": 198, "werent": 198, "weshalb": 323, "west": 109, "western": [100, 133], "western_lang": 308, "wfeat1": 233, "wfeat2": 233, "wgt": 33, "wh": [367, 379], "wha": 305, "whad": 305, "whale": 372, "what": [14, 15, 28, 30, 33, 36, 57, 72, 79, 80, 97, 108, 113, 117, 118, 121, 131, 132, 135, 137, 138, 144, 149, 162, 163, 167, 170, 171, 173, 213, 218, 219, 222, 224, 309, 366, 372, 373, 375, 377, 388, 398, 399, 409, 410, 411], "whatev": 171, "whatwasthat": 398, "wheat": 373, "when": [2, 14, 25, 28, 30, 32, 33, 34, 36, 38, 41, 43, 46, 50, 52, 53, 57, 69, 72, 97, 100, 104, 106, 107, 111, 113, 116, 117, 118, 119, 120, 124, 125, 128, 131, 135, 136, 138, 142, 148, 149, 150, 160, 162, 165, 167, 169, 170, 171, 172, 173, 174, 177, 178, 179, 181, 186, 191, 205, 216, 217, 218, 219, 223, 225, 231, 233, 267, 281, 301, 302, 304, 308, 309, 310, 312, 313, 319, 324, 328, 329, 330, 337, 339, 340, 341, 345, 347, 348, 350, 352, 355, 357, 360, 367, 368, 371, 372, 373, 375, 377, 379, 380, 381, 382, 385, 388, 389, 398, 407, 409, 410, 413, 417, 418, 422], "whenc": 111, "whenev": [33, 104, 111, 119, 134, 167, 229, 373, 380, 413], "where": [14, 15, 25, 28, 29, 32, 33, 34, 38, 44, 52, 57, 59, 69, 72, 75, 77, 84, 92, 100, 104, 107, 108, 110, 111, 113, 117, 118, 119, 120, 121, 124, 125, 131, 135, 147, 148, 149, 151, 156, 162, 163, 165, 169, 170, 171, 175, 176, 177, 178, 179, 180, 182, 184, 187, 188, 192, 196, 197, 202, 214, 218, 221, 223, 225, 229, 231, 232, 233, 260, 300, 301, 303, 304, 307, 309, 310, 313, 317, 318, 319, 321, 324, 326, 329, 331, 332, 333, 334, 337, 338, 341, 343, 345, 347, 348, 350, 352, 353, 355, 356, 357, 358, 366, 373, 379, 380, 381, 388, 390, 393, 402, 404, 409, 417, 422], "wherea": 144, "wherev": 373, "whether": [2, 13, 15, 25, 37, 38, 43, 44, 52, 93, 113, 117, 118, 119, 121, 124, 129, 131, 147, 148, 162, 164, 173, 179, 186, 191, 198, 214, 218, 219, 229, 266, 301, 302, 304, 309, 334, 341, 345, 352, 355, 357, 373, 377, 379, 380, 388, 394], "which": [2, 7, 8, 10, 13, 14, 15, 23, 25, 28, 29, 30, 31, 32, 33, 34, 37, 41, 43, 44, 46, 49, 50, 51, 52, 53, 55, 57, 58, 59, 62, 63, 64, 66, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 87, 89, 91, 92, 93, 94, 99, 100, 104, 105, 107, 108, 110, 111, 113, 117, 119, 120, 121, 124, 125, 127, 128, 129, 131, 133, 135, 136, 138, 142, 144, 146, 152, 156, 159, 162, 163, 164, 165, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 184, 186, 190, 191, 192, 197, 198, 202, 203, 206, 209, 213, 214, 215, 216, 217, 218, 219, 223, 225, 229, 231, 232, 233, 300, 301, 302, 307, 308, 309, 310, 313, 319, 323, 324, 325, 326, 328, 330, 332, 333, 334, 335, 337, 339, 341, 342, 345, 346, 348, 352, 353, 355, 357, 364, 366, 368, 369, 371, 372, 373, 375, 377, 378, 379, 380, 381, 383, 388, 391, 394, 399, 401, 402, 404, 408, 409, 410, 413, 417, 418, 419, 421, 422], "whichev": [124, 172, 325], "while": [14, 29, 33, 135, 142, 146, 163, 170, 174, 182, 196, 203, 218, 225, 354, 364, 366, 371, 373, 380, 381, 388, 394, 402, 409, 413, 417, 422], "white": [100, 117, 300, 321, 327, 402, 411], "white_hous": 402, "whitespac": [25, 28, 29, 57, 58, 69, 87, 104, 119, 120, 163, 164, 175, 192, 197, 270, 302, 309, 310, 312, 313, 319, 321, 325, 341, 348, 357, 373, 410, 411, 413], "whitespacetoken": [0, 57, 58, 63, 68, 90, 99, 197, 302, 310, 320], "whnp": 413, "who": [89, 97, 113, 163, 359, 373, 379, 381, 405], "whoever": 371, "whole": [36, 57, 72, 80, 107, 321, 357, 371, 373, 400, 413, 417], "whose": [7, 8, 28, 30, 33, 35, 36, 52, 57, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 78, 79, 80, 82, 83, 84, 85, 87, 90, 91, 93, 98, 99, 105, 107, 108, 109, 111, 113, 117, 119, 120, 121, 131, 162, 167, 170, 173, 174, 178, 179, 182, 192, 197, 209, 223, 231, 232, 233, 321, 324, 341, 343, 348, 352, 366, 373, 375, 379, 380, 381, 401, 413, 417], "whquestion": 373, "wht": [100, 373], "why": [23, 206, 309, 323, 409], "whyi": 402, "wide": [30, 83, 90, 113, 181, 311, 373, 394], "wider": [119, 373], "widget": [117, 118, 119], "widgetnam": 119, "width": [28, 32, 113, 114, 117, 118, 119, 151, 162, 165, 167, 178, 300, 317, 341, 345, 357, 380], "wife": 373, "wiki": [148, 320, 357, 421, 422], "wiki_dict": [55, 57, 60], "wiki_q": [57, 60], "wikidata": [57, 60, 133], "wikipedia": [148, 320, 357], "wild": 172, "wildcard_fd": 53, "wilk": [57, 80], "wilkdom": [57, 80], "wilkwilczi": [57, 80], "william": [109, 148, 396], "win": 421, "wind": [156, 371, 372], "window": [2, 7, 8, 18, 113, 115, 118, 119, 151, 192, 204, 231, 300, 317, 341, 348, 354, 355, 360, 394, 420, 422], "window_len": 317, "window_s": [53, 300, 371], "windowdiff": [0, 143, 151, 394], "wink": [373, 417], "winkelen": 414, "winkler": 148, "winkler_exampl": 148, "winkler_scor": 148, "winlen": 231, "winresearch": [57, 103], "winter": 372, "winter2008": 140, "wipe_instr": 373, "wipe_mann": 373, "wir": 387, "wisdom": [24, 155], "wise": [300, 339, 373], "wish": [2, 104, 119, 300, 347, 350, 373, 375, 380, 410], "wit": 405, "withdraw": 373, "within": [28, 42, 53, 57, 81, 89, 98, 105, 107, 109, 111, 119, 121, 131, 148, 172, 191, 192, 205, 218, 259, 357, 373, 374, 375, 379, 388, 402, 417], "without": [52, 57, 75, 80, 93, 110, 117, 120, 134, 135, 142, 148, 169, 179, 191, 192, 198, 201, 204, 205, 218, 281, 309, 324, 364, 365, 369, 373, 380, 388, 391, 400, 405, 410, 411, 413, 422], "witten": [135, 138, 140, 179, 391], "wittenbel": [0, 135, 140], "wittenbell_trigram_model": 249, "wittenbellinterpol": [0, 135, 138, 391], "wittenbellprobdist": [0, 179, 400], "witti": 405, "wlement": 108, "wmt14": [324, 362], "wmt15": 325, "wmt16": 325, "wmt49": 325, "wn": [57, 107, 357, 413, 417, 418, 419], "wn31": 417, "wninput5wn": 107, "wnl": 211, "wo": 402, "wolf": [163, 175, 217, 417], "wolfgang": 328, "woman": [378, 383, 388, 392, 404, 418], "won": [36, 121, 198, 283, 306, 373, 405, 410, 422], "wonder": [306, 372, 420], "wont": 198, "word": [0, 16, 24, 26, 27, 29, 30, 33, 36, 37, 39, 43, 53, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 113, 115, 116, 120, 121, 135, 136, 138, 139, 140, 142, 146, 148, 149, 156, 158, 159, 161, 162, 163, 164, 169, 170, 172, 175, 176, 177, 179, 187, 192, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 213, 215, 216, 218, 219, 220, 221, 222, 223, 225, 226, 229, 231, 232, 233, 249, 281, 284, 300, 302, 306, 307, 309, 310, 311, 314, 316, 322, 323, 324, 327, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 345, 348, 357, 358, 360, 364, 367, 371, 372, 376, 377, 379, 380, 381, 384, 390, 391, 394, 395, 397, 400, 401, 405, 408, 409, 412, 413, 418, 422], "word1": [57, 99], "word2": [57, 99], "word2vec": 383, "word2vec_sampl": 383, "word3": [57, 99], "word_": [57, 62], "word_1": 218, "word_and_tag_pair": 161, "word_class": 333, "word_class_": 332, "word_class_t": [332, 333], "word_fd": [53, 371], "word_find": [0, 153, 158, 395], "word_index_in_sourc": 329, "word_index_in_target": 329, "word_indic": 181, "word_n": 218, "word_path": [57, 79], "word_penalti": [322, 340], "word_po": 339, "word_pres": 383, "word_r": [302, 304], "word_rank_align": [0, 322, 339], "word_seq": 391, "word_similarity_dict": [0, 300], "word_tim": [55, 57, 100, 373], "word_token": [0, 57, 58, 63, 68, 71, 78, 87, 90, 91, 99, 102, 103, 177, 179, 197, 213, 284, 302, 305, 306, 309, 314, 372, 393, 410, 420, 422], "worden": 402, "worder": 339, "wordfind": [0, 153], "wordfreq_app": [0, 1], "wordlist": [55, 57, 373, 422], "wordlistcorpusread": [55, 57, 83, 85, 106, 110, 373], "wordlistcorpusview": 373, "wordnet": [0, 1, 10, 55, 57, 93, 95, 105, 199, 287, 335, 357, 358, 361, 413, 419, 420, 422, 424], "wordnet31": 417, "wordnet_": [57, 107, 417], "wordnet_app": [0, 1], "wordnet_corpus_read": 107, "wordnet_lch": 361, "wordnetcorpusread": [55, 57, 107, 335, 417], "wordneterror": [55, 57, 107], "wordneticcorpusread": [55, 57, 107], "wordnetid": [55, 57, 105, 373], "wordnetlemmat": [0, 199, 211, 417], "wordnetsyn_match": [0, 322, 335], "wordnnetdemo": 287, "wordnum": [57, 81, 89, 401], "wordpunct_token": [0, 302, 310, 371, 407], "wordpuncttoken": [0, 57, 87, 90, 91, 197, 302, 310], "words_by_iso639": [55, 57, 85], "words_by_lang": [55, 57, 85], "words_index": 323, "words_mod": [55, 57, 75, 80], "wordt": 402, "wordtpl": 233, "work": [18, 25, 38, 57, 68, 75, 80, 102, 107, 111, 112, 113, 121, 128, 131, 135, 136, 140, 144, 179, 183, 203, 225, 267, 301, 309, 323, 341, 347, 348, 350, 357, 373, 374, 375, 379, 380, 381, 389, 391, 394, 399, 401, 404, 409, 410, 411, 412, 413, 414, 420, 421, 422], "workaround": [216, 229, 301], "worker": 401, "workshop": [96, 325, 327, 339, 412], "workspace_markprod": [114, 115], "world": [83, 90, 131, 163, 182, 216, 233, 300, 324, 328, 339, 366, 373, 409, 410], "world0": [182, 366], "world1": [182, 366], "worldli": 24, "worri": 104, "wors": [229, 372], "worst": [84, 405], "would": [34, 57, 69, 72, 120, 127, 135, 144, 148, 156, 162, 170, 191, 215, 223, 232, 233, 301, 324, 341, 347, 348, 350, 373, 377, 380, 409, 410, 413, 417], "wouldn": [135, 198, 380, 405], "wouldnt": 198, "wound": 363, "wp": [163, 219, 222, 224, 409], "wrap": [38, 52, 72, 119, 121, 131, 134, 135, 142, 146, 156, 179, 304, 341, 345, 348, 357, 371, 411], "wrap_at": 72, "wrap_etre": [57, 82, 105, 108], "wrapper": [15, 38, 57, 72, 77, 92, 112, 121, 131, 133, 134, 196, 211, 261, 300, 355, 371, 375, 420, 422], "wrd": [57, 100, 373], "wrdindex_list": 317, "wrinkleproof": 395, "write": [0, 30, 44, 101, 111, 113, 117, 155, 164, 197, 206, 229, 300, 321, 353, 354, 355, 374, 380, 383, 411, 417, 420], "write_megam_fil": [0, 30, 34], "write_tadm_fil": [0, 30, 41], "writer": [197, 402], "writestr": [0, 111], "written": [34, 41, 155, 182, 233, 319, 353, 355, 356, 366, 373, 380, 388, 413, 420, 422], "wrong": [144, 324, 373, 380, 398, 417], "wscore": 148, "wsd": [0, 30, 361, 424], "wsd_demo": [0, 30, 43], "wsd_featur": 30, "wsdm": 91, "wsj": [213, 341, 347, 348, 350, 373], "wsj_0001": [373, 401, 420], "wsj_0002": 373, "wsj_0003": 373, "wsj_0004": [373, 401], "wsj_0199": 401, "wsj_0200": 401, "wu": [57, 107, 328, 417], "wulfgeat": 109, "wulfsig": 109, "wulfstan": 109, "wup_similar": [55, 57, 107, 417], "wv": 383, "www": [0, 22, 42, 55, 57, 61, 63, 68, 73, 78, 79, 83, 85, 88, 90, 91, 94, 96, 106, 109, 112, 119, 140, 148, 169, 179, 182, 203, 206, 215, 257, 260, 265, 289, 319, 324, 325, 335, 339, 341, 347, 348, 350, 360, 365, 366, 367, 373, 388, 399, 420, 421, 422], "x": [15, 16, 25, 32, 33, 57, 72, 79, 80, 100, 107, 109, 111, 112, 117, 119, 120, 125, 127, 131, 135, 142, 144, 146, 158, 169, 172, 179, 183, 184, 186, 187, 188, 191, 212, 214, 216, 220, 259, 301, 305, 307, 317, 319, 326, 341, 344, 348, 357, 365, 368, 369, 375, 377, 378, 379, 380, 381, 383, 384, 388, 389, 392, 395, 396, 398, 400, 402, 403, 404, 409, 413, 416, 420], "x0": [186, 404], "x00": 308, "x1": [384, 392, 404, 413], "x2": [120, 380, 384, 392, 413], "x3": 380, "x6f": 380, "x7f": 308, "x80": 373, "x81": 373, "x83": 373, "x84": 373, "x85": 373, "x89": 373, "x8a": 417, "x8b": 373, "x8d": 373, "x8f": 373, "x93": 373, "x97": 399, "x98": 373, "x9a": 373, "x9c": 373, "x_50": 383, "x_t": 218, "xa": 109, "xa0": [192, 318], "xa1": 410, "xa1thi": 410, "xa3": 373, "xa3170": 373, "xa3o": 417, "xa6": 373, "xa7": 373, "xa8": 373, "xab": [399, 410], "xabencomendem": 399, "xabespecializarem": 399, "xabgeracionista": 399, "xabn": 399, "xabnow": 410, "xabo": 399, "xaboutro": 399, "xabvamo": 399, "xabveri": 399, "xac": 417, "xad": [192, 373], "xae": 373, "xb0": 373, "xb3": 373, "xb8": 373, "xb9": 373, "xbb": [399, 410, 411], "xbf": [373, 410, 411], "xc1rio": 399, "xc3": 417, "xc3o": 399, "xc9": 399, "xcdtulo": 399, "xcomp": 367, "xe": [57, 107], "xe0": [373, 399], "xe1": 399, "xe1n": 402, "xe1rio": 399, "xe2": 373, "xe2mara": 399, "xe3o": [399, 417], "xe4": 373, "xe5": 373, "xe6": 373, "xe7": [373, 399, 417], "xe7a": 399, "xe7o": 399, "xe9": 399, "xe9ci": 399, "xe9cnico": 399, "xe9dia": 399, "xe9i": 399, "xe9nero": 399, "xe9rcito": 402, "xe9rica": 399, "xe9rio": 399, "xeam": 399, "xedbano": 402, "xedlia": 399, "xedn": 402, "xedna": 399, "xedpio": 399, "xef": 411, "xemac": 25, "xf": 158, "xf1a": 402, "xf3": 399, "xf3n": 402, "xf3n_europea": 402, "xf3n_n": 402, "xf3ria": 399, "xf3rio": 399, "xf3stuma": 399, "xf3tese": 399, "xf5e": 399, "xf5em": 399, "xf8ter": 417, "xfamero_1": 402, "xfamero_2": 402, "xfasica": 399, "xfcentement": 399, "xform": [25, 28, 368], "xi": [179, 192], "xiaob": 328, "xiaowen": 91, "xim": 424, "xmax": 119, "xmin": 119, "xml": [55, 57, 61, 62, 65, 72, 75, 79, 80, 81, 82, 86, 89, 92, 93, 94, 101, 105, 108, 113, 131, 320, 363, 367, 373, 401, 411, 422], "xml_escap": [0, 302, 320], "xml_n": [57, 79], "xml_post": [55, 57, 82, 373], "xml_tool": [55, 57, 80], "xml_unescap": [0, 302, 320], "xmlcorpusread": [55, 57, 61, 65, 72, 80, 82, 86, 92, 93, 105, 108], "xmlcorpusview": [55, 57, 61, 79, 80, 93, 108], "xmldoc": [55, 57], "xmlinfo": [0, 113], "xmlschema": 367, "xmltree": 373, "xmx1024m": 169, "xmx512m": 131, "xpath": [55, 57, 79], "xprime": 384, "xprime_chas": 384, "xprime_chases_a_dog": 384, "xprime_chases_yprim": 384, "xreadlin": [0, 111], "xsd": 367, "xspace": 118, "xss": 422, "xtag": [57, 105], "xx": [341, 344], "xxx": 221, "xxxl": [57, 106], "xxxx": 91, "xxxxyi": 400, "xxxyyyzz": 400, "xy": [15, 383], "xytext": 383, "x\u00f5e": 399, "y": [15, 16, 33, 57, 67, 72, 107, 112, 119, 120, 127, 151, 158, 172, 179, 184, 186, 191, 259, 317, 364, 365, 369, 373, 375, 377, 378, 379, 380, 383, 384, 388, 392, 395, 396, 400, 402, 403, 404, 413], "y332": 186, "ya": [305, 410], "yaa": [201, 202], "yacut": 192, "yahoomesseng": 20, "yaml": [111, 373, 375], "yanswer": 373, "yca3": 205, "ycn2t": 205, "ycoe": [55, 57], "ycoecorpusread": [55, 57, 109], "ycoehom": 109, "ycoeparsecorpusread": [55, 57, 109], "ycoetaggedcorpusread": [55, 57, 109], "ye": [24, 92, 221, 305, 319], "yeah": 198, "year": [57, 65, 166, 221, 300, 367, 371, 373, 376, 410], "yellow": 402, "yen": 192, "yes_no_s": 220, "yesterdai": [0, 339, 351, 354], "yet": [7, 8, 42, 104, 111, 131, 171, 173, 174, 179, 341, 347, 348, 350, 369, 373, 375, 380], "yevett": 148, "yew": 324, "yf": 158, "yfi3": 205, "ygo1": 205, "yhp1": 205, "yi": [96, 179], "yield": [14, 33, 52, 67, 152, 162, 165, 167, 171, 177, 179, 191, 216, 218, 303, 305, 309, 319, 357, 382, 401], "yl2": 205, "ylb1": 205, "yli3i": 205, "ylp0": 205, "ymax": 119, "ymin": 119, "ymo1": 205, "ynquestion": 373, "yoav": 422, "yolanda": 404, "yonghui": 328, "york": [57, 73, 100, 109, 163, 302, 305, 308, 310, 313, 315, 319, 320, 329, 330, 331, 332, 333, 334, 340, 407, 410], "yoshikiyo": 328, "you": [0, 2, 7, 8, 14, 23, 24, 25, 28, 34, 35, 39, 52, 57, 61, 69, 72, 75, 91, 100, 102, 104, 107, 113, 117, 119, 120, 121, 124, 132, 135, 137, 161, 162, 173, 174, 179, 197, 198, 204, 206, 209, 213, 215, 223, 300, 302, 304, 313, 324, 341, 345, 347, 350, 354, 355, 360, 364, 367, 371, 372, 373, 374, 375, 377, 379, 380, 381, 388, 399, 401, 409, 410, 412, 413, 417, 418, 421], "young": 328, "younger": 300, "your": [24, 28, 35, 39, 57, 102, 120, 135, 144, 181, 198, 233, 324, 339, 354, 355, 360, 373, 377, 380, 401, 421, 422], "your_app_kei": 356, "your_app_secret": 356, "your_path": 316, "yourself": 383, "youtub": [140, 422], "ypo1": 205, "yprime": 384, "yra3": 205, "yro3": 205, "yrtsi5": 205, "yspace": 118, "yte3": 205, "yti3": 205, "ytl2": 205, "yu": [91, 96], "yuan": 328, "yuganskneftegaz": 92, "yuko": 92, "yum": 389, "yuml": 192, "yuppi": 415, "yvett": 148, "yview": [114, 117], "yview_moveto": [114, 117], "yview_scrol": [114, 117], "y\ufb67\u0802": 308, "z": [8, 15, 57, 67, 107, 109, 120, 127, 179, 186, 214, 218, 220, 310, 365, 378, 380, 392, 394, 395, 400, 403, 404, 409, 413, 416], "z0": 120, "z1": [183, 377, 378, 384, 385, 392, 396, 404], "z10": [378, 403], "z101": 379, "z102": 379, "z103": 379, "z104": 379, "z105": 379, "z106": 379, "z107": 379, "z2": [377, 378, 379, 384, 385, 388, 396, 403, 404], "z22": 404, "z3": [377, 378, 379, 392, 396, 403, 404], "z4": [378, 388, 392, 396, 403, 404], "z472": 392, "z5": [377, 378, 396], "z6": [378, 388, 396, 403], "z7": [378, 396, 403], "z8": [378, 396, 403], "z9": [378, 396], "z938": 392, "z_": 120, "za": 120, "zag": [170, 172], "zc": 24, "zdg": 376, "ze": [57, 107, 414], "zeb": 399, "zee": 67, "zen": [0, 18], "zen_chat": [0, 18, 24], "zero": [25, 28, 31, 33, 52, 57, 81, 85, 89, 104, 107, 118, 119, 144, 162, 164, 171, 179, 188, 191, 225, 231, 232, 233, 324, 329, 330, 331, 332, 334, 335, 340, 341, 343, 373, 375, 376, 383, 392, 394, 400, 417], "zero_bas": [164, 376], "zero_indexed_align": [322, 334], "zerodivisionerror": 400, "zeta": 192, "zh": [67, 316], "zhao": 96, "zhifeng": 328, "zhu": 324, "zi2": 205, "zip": [33, 52, 57, 106, 111, 113, 131, 148, 198, 360, 383, 404, 422], "zipf": 42, "zipfil": [111, 113, 375], "zipfilepathpoint": [111, 375], "zjw": 422, "zloti": [182, 366], "zodat": 402, "zpa": 374, "zpar": [164, 376], "zpar_data": 376, "zsm": 417, "zul": 374, "zusammen": [331, 332, 333], "zwaaien": [170, 172], "zwemmen": 414, "zwj": [192, 284], "zwnj": 192, "zy1": 205, "z\u01e3": [], "\u00aa": 192, "\u00b2": 192, "\u00b3": 192, "\u00b5": 192, "\u00b9": [119, 192], "\u00ba": [192, 308], "\u00bc": 192, "\u00bd": 192, "\u00be": 192, "\u00df": [192, 308], "\u00df\ua122": 308, "\u00e0": [192, 399], "\u00e1": [192, 308], "\u00e1lvaro": 424, "\u00e2": [192, 308], "\u00e2\u2097": 308, "\u00e2\uffd7\u2d96": [], "\u00e3": 192, "\u00e3\u1747\u12e8": 308, "\u00e4": [119, 192], "\u00e4\u1d10\ua291\u1c65\u2dc5": [], "\u00e5": 192, "\u00e6": [119, 192], "\u00e6lfric": 109, "\u00e6thelr": 109, "\u00e6\u05e7\uff50\u170e\ua3da\ufd6d\u0717\u16bd\ua2fe": 308, "\u00e6\u0686\ua64d\ua016": [], "\u00e7": [119, 192, 308], "\u00e8": [119, 192], "\u00e8\u1b8e": 308, "\u00e8\u1e33": [], "\u00e9": [192, 399], "\u00e9\ua653\u1447": [], "\u00e9\ufb3e\ufb38\uff4a\ud7f4\u00e4": 308, "\u00ea": [192, 308], "\u00eb": [119, 192, 308], "\u00eb\u056a\u1d4e\u1204\u0994": 308, "\u00eb\u1ff4\u0c3d\u0562\u12e6": [], "\u00ec": [119, 192], "\u00ed": [119, 192], "\u00edndice": 373, "\u00ed\ufc84\u078a\u1132": [], "\u00ee": 192, "\u00ee\ua64f": 308, "\u00ee\uab7b\u0f8b": 308, "\u00ef": 192, "\u00ef\uab39": [], "\u00f0": [192, 308], "\u00f0\u14d3": [], "\u00f1": 192, "\u00f1\u2c57\uab15\ud7cf\ufd6f": 308, "\u00f1\ua88b": 308, "\u00f2": 192, "\u00f3": [192, 399], "\u00f4": [192, 308], "\u00f5": 192, "\u00f6": 192, "\u00f6\u2d22\ufc5f\ua101\u318d\ua941\ua41c": 308, "\u00f8": [119, 192, 308], "\u00f8\ua88e\u15a6\u14cf\u1bd5\ufdc5\ua2cc": 308, "\u00f9": [119, 192], "\u00fa": [119, 192], "\u00fb": 192, "\u00fb\u0201": [], "\u00fc": 192, "\u00fc\u03f1": [], "\u00fd": 192, "\u00fd\u046b": 308, "\u00fe": [115, 119, 192, 308], "\u00fe\u03d7": [], "\u00fe\u04ed\ua0b3": 308, "\u00ff": [192, 308], "\u00ff\u0646": 308, "\u0101\u0127\u1b9c": 308, "\u0105\u0b33": 308, "\u0109\u123d\u1288": 308, "\u010d\u0623\u01b6\u11c8": 308, "\u010d\u0b2f\u0527\u113b": 308, "\u010d\ua2dd\ua18a\u044e": [], "\u010f": [], "\u0111\u0f4e": 308, "\u0111\ua99f\ua024": [], "\u0113\ua75d\u0278": 308, "\u0117\u0274": [], "\u0119": [], "\u011b": [], "\u011b\u0c38": 308, "\u011d\u0773": 308, "\u011f": 308, "\u011f\u099d": [], "\u011f\u0da6\u2db2\ua546\ua5f1\ufc3d": [], "\u011f\u3189": 308, "\u0121": [], "\u0121\u314c\u1826\ua245\ufef6\ua761\ufc36": [], "\u0123": [], "\u0123\u0e9d\ua1b1\ua27a": 308, "\u0125\u00ed\u12e0": 308, "\u0125\u15e3": 308, "\u0127\u1224\u1208\ua294\ua597\u19c8\u1078\ufb17\u1223\ua105\u2da0\u05e0\u0a88": [], "\u0129": 308, "\u0129\u02af\u211d": [], "\u012b": [], "\u012b\u069a\u134f\u123b": [], "\u012f\u1c70\u12d3": 308, "\u0131\ua1bf": [], "\u0133\ua0ba\u0a59": 308, "\u0135\u03c9\u129d": 308, "\u0135\u0cac": [], "\u0135\ud7e7": 308, "\u0137": 308, "\u0138\ua453\u0c1a\u1ea9\u30e4\ua134\u142b": [], "\u013a\u05e7\u154d\u2cab\u0507": [], "\u013a\ua58f\ufef2": 308, "\u013c\u0217": [], "\u013e\u0b05": [], "\u0140\u107f": [], "\u0142\u1fb1": [], "\u0144\ua28c\u2d50": [], "\u0146": 308, "\u0146\uaa69": 308, "\u0148": 308, "\u014d\u01eb\u110f\u16f4": [], "\u014d\u1828": 308, "\u014d\ufbaa": 308, "\u014f": [], "\u014f\ufec0": 308, "\u0151": [], "\u0151\u04b5\u0b23\ua250\u2d86\u165a": 308, "\u0153": [192, 308], "\u0155": 308, "\u0157\u098f\ua542\ua741\u1130": 308, "\u0157\ufb33": [], "\u015b\u12fe": 308, "\u015d": 308, "\u015d\u2130": [], "\u015f": [], "\u0161": 192, "\u0161\u01a1": 308, "\u0163\u1564": 308, "\u0163\u2c4b\u09b2\u1158\uab70": [], "\u0165": [], "\u0165\u16cd": [], "\u0167\u2c66\uffda\uab86\ufb70\u074e": 308, "\u0169": [], "\u0169\u0911\u10f9\u1108\u1969": 308, "\u016b": 308, "\u016b\ufd79": [], "\u016d\u03c1\u1f87\u1837\u2d1f\uaa02\uaa81\u03eb": [], "\u016f\ua45e\ua88a\u04b5\ufed0": [], "\u0171": 308, "\u0175\u026a": [], "\u0175\ua697": 308, "\u017a\u112e\u101d\u1f06": 308, "\u017c": [], "\u017e\u00fa": 308, "\u017e\u03bb": [], "\u0180\u03b8\u160e\u1fa5": [], "\u0180\u03dd\u1665\u017c": 308, "\u0180\ua270": [], "\u0180\ua568": 308, "\u0185\u1292\u1418\ufd71\u0c9a": [], "\u0188\u16ea\u1d22\ufce5": 308, "\u018c": [], "\u018c\u0daa": [], "\u0192": 192, "\u0192\u0523\u126f\u1446\ua0a4": 308, "\u0195": [], "\u0199\u023c\u1957": [], "\u019a": 308, "\u019b\ua65d\u17d7": [], "\u019e": [], "\u019e\u111f\u14a5": 308, "\u01a3": 308, "\u01a3\u313b\u1db3": [], "\u01a5\u06c8\u1535\u052b": 308, "\u01a8": [], "\u01a8\u0f88": 308, "\u01aa": [], "\u01ab": 308, "\u01ad": 308, "\u01ad\u11d8": 308, "\u01b0\u021d": [], "\u01b0\u0f5a": 308, "\u01b4": 308, "\u01b6": [], "\u01bb": 308, "\u01bd": 308, "\u01bd\u0225\ua559\ufea7": 308, "\u01bd\ufeb2\u1f7c\u15b2\u1fb6\ua07b\u0268\ua647\uaaa1\u19c3": [], "\u01be\u1866": 308, "\u01bf": [], "\u01bf\u013a": 308, "\u01bf\u0688\u1c6e\u1662\ufd00\ua3aa\u3046\ua6e5\u0450\ufc2f\u166c\u2d57\u1d08": [], "\u01c0\u10ed": [], "\u01c1\u03b7\u0905\u0674\ufb54\u167c\u148e": 308, "\u01c2\u19a4": 308, "\u01c3\u048b": [], "\u01c9": 308, "\u01c9\u15fa": 308, "\u01c9\ua4de\u1515\u314a": [], "\u01cc": 308, "\u01ce": [], "\u01d0\u1ef5\ua5cd\u0583\u1d66\ua255\ua0dc\u3143\u1a29\uabb0": 308, "\u01d0\u2d13": [], "\u01d2": [], "\u01d2\u1ed5": 308, "\u01d4": [], "\u01d4\u03dd\u15ff\u149d": 308, "\u01d6\u0521\ua50e": [], "\u01d6\uaaf4\uff4b\u1541\u199c": 308, "\u01d6\ufb1f": 308, "\u01d8": 308, "\u01d8\u1d99": 308, "\u01dc": [], "\u01dc\u16da": 308, "\u01dd\ua791": 308, "\u01df\u074d\ua156": [], "\u01df\u30fe": [], "\u01e1": [], "\u01e1\u11ca\u14d2\ua71f\ua47a\u04fb\u1276": [], "\u01e1\ufbd3\u0e8d": 308, "\u01e3\u090a\u2c65\u1b14": [], "\u01e3\ua1a5": 308, "\u01e5\u1901\u313d\uabca\ufcfa\ufdbe\u1f70\u15a5": [], "\u01e7": [], "\u01eb": 308, "\u01ed": [], "\u01ef\u121d\ua74b\u1291\u1544\ufbdd": 308, "\u01ef\ua20d\u1542\ua9ea": [], "\u01f3": 308, "\u01f3\u077b\ua5a6": [], "\u01f3\u1411\ufd89\u1294\ua995": [], "\u01f5\u078f": [], "\u01f5\u1402\u1e83\u0d32": [], "\u01f9\u0199": [], "\u01f9\u0566": [], "\u01f9\u30a8\u0b0c\u0e1c\u182e": 308, "\u01fb": 308, "\u01fb\ua57b\u2da2\ua6a4": 308, "\u01fd\u00f3\u11e7\u025e\u1351": 308, "\u01ff\uab43\ufd5f\u01dd\ua25b\ufc8d\u1950\u1a05\ufc07\uff81": [], "\u0203\u0458": [], "\u0203\u1320\u2c55\u138f\u04d3\u0e0b\ua2d7\u1169\u0284\u14cb\ufc74": 308, "\u0203\ua045\u1d4f": [], "\u0205\u1a23\u1e19\u1993\u0582\u134b": 308, "\u0207\u1226\u11c6": 308, "\u0209\ua003\ufcc9\u31b3\u0847\u03d7\u2cbd": 308, "\u020b": 308, "\u020b\u3181": [], "\u020d\u211b\ua4f8\ua5df": 308, "\u0211\u1c5d": 308, "\u0213": [], "\u0215": [], "\u0215\ua27d\u2c30\u2c3f\u1ea9\u0a98\u1a36\ud7db\u0e0d\ua6ac\u0edd": 308, "\u0217\ufd32\u0d39\u0f46\ua4e2": [], "\u0219": [], "\u0219\u0109": 308, "\u021b\u11bb": [], "\u021b\u1783\ua1fc": 308, "\u021b\ua761\u1f64\u06fb\uabb7": 308, "\u021d\u1270": 308, "\u021f\ua210\ud7b6": 308, "\u0223\u1200\u0438\u31a6\ua34c": [], "\u0225\uff6d\u0643": 308, "\u0227": [], "\u0227\u19bb\ua645": 308, "\u0229\uabba": 308, "\u022b": 308, "\u022d\u1327\u0aa7": [], "\u022d\u1512\ua59f\u1113\u1221\u04e3\u1915": 308, "\u022d\ua6d8": 308, "\u022f": 308, "\u0231": [], "\u0231\u1784\u2c6a\ua745\ua8b1\u0eb2\u16de": 308, "\u0231\ua237\ufef8\u0781": [], "\u0233": [], "\u0233\u1611\ua6ba\u0195\u0ab0\u0298": 308, "\u0237\u0a1a\u1152\u1c4f\u1fa0\u2c87": 308, "\u0238": 308, "\u0239\uabba\ufc5b\ufb1f\u06ee": [], "\u023c\ua15c\ua77f\u0ca6": 308, "\u023f": [], "\u0240": 308, "\u0247": 308, "\u0249\u0456": 308, "\u024b\u101a\uffc5\u04cc": 308, "\u024f": 308, "\u024f\u1614": [], "\u0250\u0672\u071d": 308, "\u0251": 308, "\u0251\ua08e\ua30a": 308, "\u0251\ua1dd\ua345\u0227\u31b3": [], "\u0252": 308, "\u0252\u1559": [], "\u0253\u0481\u1499": [], "\u0253\u04f9\u068d\u02b3": [], "\u0253\u2c7d\u145f\u1600\ua311\u0a09\u0215": 308, "\u0254\u3137\u2d96": 308, "\u0254\ua26c": [], "\u0256": [], "\u0257": [], "\u0259": 308, "\u0259\u0267\u0287\ua6ad": [], "\u025b\ufede\u15e8": [], "\u025c": 308, "\u025c\ufcfd\u06b6": [], "\u025f\u1e85\u1442": [], "\u0261": 308, "\u0262\u1ed7\u1fb1\u183d\u18e7": 308, "\u0262\ufb8a": [], "\u0265\u0290\u0c99\ua1f2\u1fa4": [], "\u0268\ua57c\ua791\u1009": 308, "\u0269": 308, "\u026a": 308, "\u026b": 308, "\u026b\ud7e8\u04e1\ud7e2": [], "\u026b\ufc8f\ua24d\uffd2": 308, "\u026c": [], "\u026e": [], "\u026e\ua767": 308, "\u026f": [], "\u026f\ua783\ufedf\u095f": 308, "\u026f\uab2d": [], "\u0270": [], "\u0272\ua99f\u09ad\ufe92\ua301\u19bc": 308, "\u0273\u1d07\u17d7\u164b\u211c": 308, "\u0274\ua6ab": 308, "\u0275": [], "\u0275\u0444": [], "\u0276": 308, "\u0276\ua471\u1a53": [], "\u0279\ua40a\ua5ac": [], "\u027a\u0ae1": 308, "\u027a\ua300\ua3a4": [], "\u027b\u1634\u1767\uaa1b\ua3f7": 308, "\u027d": 308, "\u027d\u16ad": [], "\u027d\ud7b6": [], "\u027f\u06b7\u15b4\u3060\ua08f\u1f62\u0525\ua236\uff92": 308, "\u027f\u2d07": [], "\u0280\u1245\u12c4\u0bb7\u1b1d\u14c0": 308, "\u0281\ua6a0\ua356\u1434\ua6d4": [], "\u0283": 308, "\u0283\u0e2e\u1027": 308, "\u0283\u0e95\ua649": [], "\u0283\u1184\u2d64": [], "\u0285": 308, "\u0287\u0b38\u0434": 308, "\u0288\uabc0\u1790": [], "\u0289\u3109\u17b0\ufd84\ua4e1": [], "\u028b": [], "\u028b\u2d94\ufbed\u16ad\u115f\u132f": 308, "\u028c\u1666\ua822": 308, "\u028e\u01cc\u0434\u316d\u1e93": 308, "\u028e\ua2dc\u0aa2\ua580": [], "\u028f": 308, "\u0292\u0225\uabd1y": [], "\u0292\ua617\ua76d\u18ef": 308, "\u0294": [], "\u0296\u06aa\u1d46\u09ab\ufd8b": 308, "\u0297\ua3e5\u10dc": 308, "\u029b\u1c1f": 308, "\u029c\u16d0\u0baf": 308, "\u029c\ua8f3\u2d1e\ua685": [], "\u029f\ua3e4": [], "\u02a1": [], "\u02a2": 308, "\u02a2\u1f26\ua526\u0b9a\u0103\ua3fa\ua13b": [], "\u02a3": 308, "\u02a4": 308, "\u02a4\u01be\uabbb\u14b9\ua044": [], "\u02a5\u102a": [], "\u02a7": [], "\u02a8": 308, "\u02a9\u0620\u01e9\ua5d4\u2c39\u16b2\u0a2a\ua932\u0574\u0a8c": [], "\u02ab": [], "\u02ac\u131a": 308, "\u02ac\u2d22\uff55\ufeec": [], "\u02ad\u1691\u056d": [], "\u02b1\u1b08": 308, "\u02b2": [], "\u02b4": [], "\u02b4\u04bd\u2d30\ufcf8\u09e1": 308, "\u02b5\u10fe\ua41c": [], "\u02b6\u0c20": [], "\u02b7\u03d1\u0db9\u06ce\u014b\u1e93": [], "\u02b7\u16b2\ua615\u0934\u13f9": 308, "\u02b8": [], "\u02b8\u2d02\u1ec3\uabb3\ua5a3\ua557\ufc33\ua76b\ua058\u0437\u1a26\u2cbf\u2c95\ua020\ua436": 308, "\u02b9": [], "\u02bd": [], "\u02bd\u0713\u0280\u1572\u1b9d": 308, "\u02be\u1c7a": [], "\u02be\u1eff\u1303\u01b6": 308, "\u02bf\u2d00\u1f41\ufd96\u2d05": 308, "\u02c0\uaa0a\u0289\u1281": [], "\u02c1\u066e": 308, "\u02c6": 192, "\u02c8\u00e6": 308, "\u02c8\u00e6m\u0259z\u0252n": 308, "\u02c8\u0b27\ua2d8\u30dd\u0101\u0a09\u1be5\u01a5": [], "\u02cb": [], "\u02cd\u0762\ua172\ua0d1\u1e83\u1c68": 308, "\u02cd\ua0da\ua285\u1468": [], "\u02ce": 308, "\u02cf\ufb90\u06e6": 308, "\u02d0\u028a": 308, "\u02d1\u013a": [], "\u02e1": [], "\u02e1\u02a7\u1d32": 308, "\u02e2": [], "\u02e3": [], "\u02e4\u0c22\u15ca\u317a\ua5fd\ua5c3\ufd07\u0f56": [], "\u02e4\u16b8": 308, "\u02ec": 308, "\u02ec\ua455\u0430\u0465": [], "\u02ee\ua419\u2d0c": [], "\u0371\u0503\uab44\ua2f1": 308, "\u0373\u1b11\u1f36": 308, "\u0374\u0e0e": 308, "\u0377": 308, "\u037a": 308, "\u037b\u10f3\u1497\ufe89\u0b1b\u1e8f": 308, "\u037c\u1304\u0cae\u19c3": 308, "\u0390\u2e2f\ua6a4\ua9ef": [], "\u03ad": 308, "\u03ad\ua2fa\ua2d2\ua66e\u0a14\u0d7e\u00fd": [], "\u03ad\ufd57": 308, "\u03ae\u309d\u114c": [], "\u03ae\ufc98\u0ce0\u0e20\u304c": [], "\u03af\u182f\u18bd": [], "\u03af\u2d01": 308, "\u03b1": 192, "\u03b1\u110f": 308, "\u03b2": [192, 325], "\u03b2\u144a": 308, "\u03b3": [192, 308], "\u03b4": 192, "\u03b4j": 332, "\u03b4v": 333, "\u03b4\u1278\u1496\u18e6": [], "\u03b4\u1434": 308, "\u03b5": 192, "\u03b5\ua3d2": 308, "\u03b6": 192, "\u03b6\u1d2e": 308, "\u03b7": 192, "\u03b7\u12a6\u1a50\u0195\u12f3\u15a6": [], "\u03b7\u2dbc": [], "\u03b8": [145, 192], "\u03b8in": 145, "\u03b9": 192, "\u03b9\u0f68": 308, "\u03b9\u1108": [], "\u03b9\ufdc6\u0282": [], "\u03ba": 192, "\u03ba\u12b8\u1eb9\u1fa2\u1d03\u0450": 308, "\u03bb": 192, "\u03bc": 192, "\u03bc\u020f": [], "\u03bd": 192, "\u03be": 192, "\u03bf": 192, "\u03bf\u0c08\ua5e3\u047d\ua2c7": [], "\u03bf\ua0e3": 308, "\u03bf\ua58e\u0828": [], "\u03c0": [192, 308, 379], "\u03c1": 192, "\u03c1\ua433\ua81a\u19c6": 308, "\u03c2": 192, "\u03c3": [192, 308], "\u03c3\u01ce": 308, "\u03c4": 192, "\u03c5": 192, "\u03c6": 192, "\u03c6\u0ca0\u1009\ua58b": [], "\u03c7": 192, "\u03c8": 192, "\u03c8\u2cc5\u3059": 308, "\u03c9": 192, "\u03c9\ua377\u1f96": 308, "\u03ca\u11ef": [], "\u03ca\u1e11": 308, "\u03cb": 308, "\u03cb\ufea5\ufec6": [], "\u03ce": [], "\u03d0\ua30c\ua5f8": 308, "\u03d1": 192, "\u03d1\u048b": 308, "\u03d2": 192, "\u03d2\ua6d0\ufcdf": [], "\u03d3": [], "\u03d6": [192, 308], "\u03d7\ufc7a\ua939\ufdf8": [], "\u03d9": 308, "\u03d9\ua084\uab09\u04a3\u3095": 308, "\u03d9\ua263\u0173": [], "\u03db": [], "\u03db\ua21b\u0dac": 308, "\u03db\ufd36": [], "\u03df\u0675\u15b2\ua97a\u1b12": 308, "\u03df\u1141\ua98c\ufc44\u0985": [], "\u03df\ua911\u3164\u107b": [], "\u03e1\u1e91": 308, "\u03e1\ufed6\ua1a2": [], "\u03e3": [], "\u03e3\u050b\u148f\u2dd2": 308, "\u03e5\u3162\ufbfa\u0d9b": [], "\u03e7": [], "\u03e7\u1e4d": 308, "\u03e9": 308, "\u03ed": 308, "\u03f2\u1a49\ua871\u1ed5\ua140\ufe89": [], "\u03f2\u304b\ua618\ua961": 308, "\u03f2\ua9a1": 308, "\u03f8\ufcc7\u026c\ua21c\u1fb6\ua681\u2c36\ufb6b": 308, "\u03fb": 308, "\u03fb\ua004\u03b6": 308, "\u0430\u1836\u0c8b\ua5a9": 308, "\u0430\u18c9": [], "\u0430\uab98": 308, "\u0431\u0443\u043c\u0430\u0436\u043a\u0443": 213, "\u0431\u0b8e\u2d08\u304c": 308, "\u0431\u1b33\ua474": [], "\u0432\ua027\u1314": 308, "\u0433": 308, "\u0434\u0432\u0430\u0436\u0434\u044b": 213, "\u0435\u1530": 308, "\u0436\u0c1c": 308, "\u0437\u00f2": 308, "\u0438": 213, "\u0438\u043b\u044c\u044f": 213, "\u0439\u04d9\u1208": 308, "\u0439\u10d7\u156c\u03c0": 308, "\u043b": [], "\u043b\u196a": 308, "\u043d\u1473": [], "\u043e\u0442\u043e\u0440\u043e\u043f\u0435\u043b": 213, "\u043e\u1f51\ua3d7\ua889\ua976\ua02f": [], "\u043f": 308, "\u043f\u0435\u0440\u0435\u0447\u0438\u0442\u0430\u043b": 213, "\u0440": 308, "\u0440\u11d3": [], "\u0440\ua3bd\u1529\ua867\u2d14": [], "\u0441": 308, "\u0441\u017e": [], "\u0441\ufd31\u30c3\u013e": 308, "\u0443\uff4b\ufb40\ua35b": [], "\u0444\u1234\ua429\u30dc\u06c5\u186c": [], "\u0444\u124a": 308, "\u0445\u0c60": [], "\u0445\ufef0\ua6dd\uaa72": [], "\u0446\u09dd\u1bd5": [], "\u0447": 308, "\u0448": 308, "\u0448\ua40c\u138c": 308, "\u0448\ufb22": [], "\u0449\ua19b\ua3d6": [], "\u044a": 308, "\u044a\ua6c4": [], "\u044b\ua5dd\u00ff\u023c": [], "\u044c\u0c24\ua3f3": 308, "\u044e": 308, "\u044f": 308, "\u044f\u2cdb": 308, "\u0450": 308, "\u0451": [], "\u0453": [], "\u0453\u0791\u1ecf": 308, "\u0454": [], "\u0454\ua262": 308, "\u0455\uff92": [], "\u0456\u1266": 308, "\u0457": 308, "\u0457\u1c06\u07d5\u080c": [], "\u0458": [], "\u0459\u179f": [], "\u045a\u188b\u1e19": [], "\u045a\ua3c3\u140a\ua21f": 308, "\u045b": [], "\u045b\u0449": 308, "\u045c": 308, "\u045d": [], "\u045d\uab0e\u028a\u057f\u2d36\ufd56\u3056": [], "\u045e": 308, "\u045f\u1d88": 308, "\u045f\u1f7c\ua1ed": 308, "\u045f\uaa0e\u09b6": [], "\u0461": [], "\u0463\u1384\ua683": 308, "\u0463\u167b\u04b7": [], "\u0465\u116b\u1c73\u0119": 308, "\u0465\u1253": [], "\u0467\u0167": [], "\u0467\ua54d\ua990\u01ef\u119c\u1623": [], "\u0469": [], "\u0469\u1701": 308, "\u046b\u1160\u11c8": [], "\u046b\u1bba": 308, "\u046b\u3163\u0767\ua0e6\u18a1": [], "\u046d": [], "\u046d\u043c\u1d51o\u0a96": 308, "\u046d\u19a5\ua4dd\ufb04": 308, "\u046f\ud7bf\u03c2": 308, "\u0471": [], "\u0471\u0ead": 308, "\u0473\u0bb2": [], "\u0473\ua28f\u18a2\u120e": 308, "\u0475\u152c\u1c77": 308, "\u0477\uffa1": 308, "\u0479": [], "\u0479\u132d": 308, "\u0479\u15cf\u00e5\u1e73\u07ce\u0a1c": [], "\u047b": 308, "\u047d\ua106\ua614": 308, "\u047d\ua514": [], "\u047f\ua0af\ufdba": [], "\u0481\u12df": [], "\u048b\u185f": 308, "\u048d\u063a\u1258": 308, "\u048d\u12d2": 308, "\u048d\u150c": [], "\u048d\u1991": [], "\u048f\ua817\u00e6\u1db5\u1a43": 308, "\u0491": [], "\u0493\u0689": [], "\u0495": 308, "\u0499\u121f\u1407\ua00e": [], "\u0499\ua6a6\ua012\u016fk\ua605\u01a8\u16d5\u056c\u01dd\u1f24\u1f72\ua778": 308, "\u049d\u0d88": 308, "\u049d\u1573": [], "\u049d\u2149\ua808\ua65d": 308, "\u049f": [], "\u04a1\u1444": [], "\u04a5": 308, "\u04a5\u09ac\u03b8\u15b5\ua395": [], "\u04a5\ua59d\ufbee\u06bb\ua323": [], "\u04a7": 308, "\u04a7\u0f6b": 308, "\u04a7\uab06": [], "\u04a9": [], "\u04ab": 308, "\u04ad\u1d5a\ua3a9\ufeae\ua02d": 308, "\u04ad\u1db0\u1e6d\ua294\ua9a2\uff55": 308, "\u04af": 308, "\u04af\uaa8b\uff7b\u1953\u0137\ua406\uabd7\ua55f\u0bb6": [], "\u04b3": 308, "\u04b3\u1617": [], "\u04b3\ua970": 308, "\u04b5": 308, "\u04b7\ufdb6": 308, "\u04bb": 308, "\u04bb\ua608": [], "\u04bd": 308, "\u04bd\u06b1\u0d13\ua11e": [], "\u04bf": [], "\u04bf\u1f54\ua0ab": [], "\u04bf\ud7df\u097a": 308, "\u04c2\u0438\u1ebb\uab4c\ua447": 308, "\u04c2\ua1da": [], "\u04c2\ua73b": [], "\u04c4\u1e4b\ua1d1\u309f\ua1ca\ua6d7\u19b4\u2c48": 308, "\u04c6\u2d01\u0575": [], "\u04c8\u2d4b": [], "\u04ca\ua059": 308, "\u04cc": [], "\u04ce": 308, "\u04cf": 308, "\u04cf\u1eeb\u1199\ufb32\u1d55\uaae8\u0a5b\u0c17\ua66b\ufce8": [], "\u04d1": 308, "\u04d3": [], "\u04d5\ua753": [], "\u04d7\u154c\u1386": 308, "\u04d7\u1e19\u11b2\u06b2\u1b20\u1ecb\ufcb0\ua483\u1604\u12b2\u12ee\u1676": [], "\u04d9\u3123\uaa40": 308, "\u04db": [], "\u04db\u1822\ufc91\u158d\u0269": [], "\u04dd\ua1af\u14b4\u1a4f": [], "\u04e1\u1174": 308, "\u04e3\u3111\ua17c\u2c61\ua869": [], "\u04e5": 308, "\u04e5\u1653\u090f": [], "\u04e7": [], "\u04e7\u168f": 308, "\u04e9": 308, "\u04e9\u0142": 308, "\u04eb\u1f05\u30a6\u0481": 308, "\u04ed\u12ca\u11de\u121c": [], "\u04ef": [], "\u04ef\u02a5\u0db1\u1f02\u09b0\u1d76\u080d": 308, "\u04f1": [], "\u04f1\ufb4a\u06c6\u14c5": [], "\u04f3\u1151\ua438\uff96\u3163\ufc8a\ufb76": 308, "\u04f3\u1476": [], "\u04f5": [], "\u04f5\u1277": 308, "\u04f5\u1f79\u114f": [], "\u04f7": 308, "\u04f7\u2ddd\u31b4": [], "\u04f9": [], "\u04fb\u1bc9\ua2a0": 308, "\u04ff\ua4fb\ua535\u1295": [], "\u0501\u1c05": 308, "\u0503": [], "\u0505": 308, "\u0505\u1177": [], "\u0507\uabae\ua3fa\ua4dc": 308, "\u0509": [], "\u0509\ua965": 308, "\u0509\ufdb1\uab9f\u00e3": [], "\u050b\u1fe3": [], "\u050d": [], "\u050f\u1236\u017f\u08b1\u0e16\ufea7": [], "\u050f\ua283": 308, "\u0511": [], "\u0513": [], "\u0515\u06d3\u0258\u056b\u1fb3\u0b5d": 308, "\u0515\ua5fc\u0264\u1f34\u107e\u11b7\u1163\u06cf": [], "\u0517\ud7f2\ufe70": 308, "\u0519": [], "\u051b": 308, "\u051d": 308, "\u051d\u2d8a\u123a\u0ea7\uab90": 308, "\u051d\u2d8b": [], "\u051f": 308, "\u0525\u14c8": [], "\u0527\u14ff\u1787\u3074\ufce5\u0ab5\u0c1b\ufe87\u1729": [], "\u0527\ua346\u114b\u080f\ua221\uff9c": [], "\u0529": 308, "\u052d": [], "\u052d\u1f02\ua0ffy\u1d7c": [], "\u052d\ua68d\u199d\u3049\u1f24\u1f26": 308, "\u0561\u0961\ufe96\ua0d7": 308, "\u0563\u0e33\u1144\ua6a2\u198d\u2c49\ua590": [], "\u0564\u0b2f\u30b5\u0687": [], "\u0564\ua15c": [], "\u0564\ua69d\uab3d": 308, "\u0564\ufd7c\u1558\ua661\u0a19\uab7a\u0da0\ua735": 308, "\u0565": [], "\u0566\ua159\u1d57\u107f\ufe9c": 308, "\u0566\ua91f": [], "\u0566\ufd06\uab82\u09e0\u1f7b": 308, "\u0567\u1a26\u3167\ua603\ufeb7": [], "\u0569": 308, "\u0569\u1516\ua767": [], "\u056a": [], "\u056c": 308, "\u056c\u06bd\u1e43": [], "\u056d\u0b90\u0443\ua24e\u0d93": 308, "\u056e": [], "\u056e\u128a\ua06c\u3055": 308, "\u056f\u1466": 308, "\u056f\u1bd4\u3166\u1d9e\uffa3": [], "\u0570": 308, "\u0571": [], "\u0572": 308, "\u0572\u1fe5\u0127": 308, "\u0573": 308, "\u0573f": [], "\u0574": 308, "\u0575\u06b4": 308, "\u0575\ufcdb\ufd19\ua9a7": [], "\u0576\u0caa": 308, "\u0576\u1f7a": 308, "\u0577": 308, "\u0578\u1eb9\ua56f": 308, "\u0578\u2c54\ua321": 308, "\u0578\u2dca\u09ae": [], "\u0579": [], "\u057a\u1d49": 308, "\u057a\ua1e4\u1b16": 308, "\u057b": [], "\u057b\u0daf": [], "\u057c": [], "\u057d": 308, "\u057e\u029f": 308, "\u0580\u0c0a\ua154": [], "\u0580\u1f95": 308, "\u0581\u0917": [], "\u0581\u1421\u10f8": 308, "\u0582": 308, "\u0583": [], "\u0584": 308, "\u0584\u123a\u056e": [], "\u0584\u1656": 308, "\u0585": [], "\u0585\ua511": 308, "\u0586\u0ce1\u2d21\uff66\ua578\u3178\ua765": 308, "\u0586\uab8e\uaa67\u1eab": [], "\u05d1": [], "\u05d1\u078e": 308, "\u05d3\u101e\ua051\u112e\u04ed": [], "\u05d4": 308, "\u05d5\ufbe4\u0a97\u1e63\u0270\u07ea": 308, "\u05d6\ua06d\u044c\u05e6\ua1b0\u186b\u1e39\ua77a": [], "\u05d7\u00ef": 308, "\u05d8": 308, "\u05da": 308, "\u05db": 308, "\u05dc": 308, "\u05dd\u09a5\u02bb": 308, "\u05de": [], "\u05df\u1613\u072b\u1e7b\u3132": [], "\u05e1\u0ba9\ua610": [], "\u05e1\ua2ff\ua5bc\uff59": 308, "\u05e4": [], "\u05e5": [], "\u05e5\u118c\u2c4d": 308, "\u05e8\u0199\ufc51\u1428\ua46d\ua729\uff56\u2093": 308, "\u05e8\ua9ee\ua6b5\u02b0": [], "\u05ea\u015f\u0768": 308, "\u05f0\u0287": [], "\u05f1\u1127\ua456\uab0e": 308, "\u05f1\u30f5\ua43f": [], "\u05f2c\ua35e\u0f8a": [], "\u0620": 308, "\u0622": 308, "\u0623\uab80": [], "\u0624\u1564\u18c7\ud7f9": [], "\u0624\ufbdf\ufb05\u30b8\u210c": 308, "\u0626": 308, "\u0627": [], "\u0627\u0644\u0639\u0631\u0628\u064a": 316, "\u0627\u0644\u0643\u0644\u0645\u0627\u062a": 316, "\u0628": 308, "\u0629": [], "\u062a\u0635\u0646\u064a\u0641": 316, "\u062a\u0641\u0627\u0639\u064a\u0644": 204, "\u062c\ua6c7\u2db6\u0251\ua568": [], "\u062d_l": 308, "\u062e\ua0d6": [], "\u0630\u155a\u14cc\ufb5c\ua129\ua73f\ua2e2\u1b2e": 308, "\u0630\ua3e6\u0b2c\u1356\ua035\u0b8a\ua31d": [], "\u0632": 308, "\u0632\u138e\u30ee": [], "\u0633\u062a\u0627\u0646\u0641\u0648\u0631\u062f": 316, "\u0634\u0926\ua9e1\ua032\u015b\u1635\uabdc\u15c0\ufc4f\u1e05\ufefa\u0469\u0cb8": [], "\u0637": [], "\u0638": 308, "\u0639\u0645\u0644": [202, 408], "\u063c\u03cb": 308, "\u063d\u18cd\u0d10\u0c0e\u134e": [], "\u063f": 308, "\u0640\u0d28\u1b27": 308, "\u0644": 316, "\u0644\u0644\u0643\u0644\u0645\u0627\u062a": 316, "\u0647\u0630\u0627": 316, "\u0647\u0648": 316, "\u0647\ufbe7\u0917\ua91a": 308, "\u0648": 204, "\u0648\u0b14": 308, "\u064a\u0639\u0645\u0644": [202, 408], "\u066f\u11d0": [], "\u066f\ufd6c\u0233": 308, "\u0671\uab7b\ufc97\u0236": [], "\u0672\u2d1c\u0517": [], "\u0673\u1b8f\u1cec\uaa9c": [], "\u0676\u0d9a\ua6a1": 308, "\u0677": [], "\u067a": [], "\u067b\u15ce": 308, "\u067c": [], "\u067d": [], "\u067d\uaa74": 308, "\u067e\ufd8e\u2c3a": 308, "\u067f\u03cc": [], "\u067f\ua119\uab36": 308, "\u0680": 308, "\u0680\u0e82": [], "\u0681\u117f\u162e\ua2b7\u134c": [], "\u0683\u138b": [], "\u0683\ua388": 308, "\u0684": [], "\u0684\u0907\uab2a": 308, "\u0687\u167d\u1741\ua036\uab26": 308, "\u0688\u2d59\uff4f\u0e25": 308, "\u068b": 308, "\u068f": [], "\u0690": [], "\u0692": [], "\u0695\u1ebb\u1fb2\u2ca3\u0c12\u1fe1\u2d5e\u12c4\u1607\ua6d6\u0505": [], "\u0696": [], "\u0698\u198a": [], "\u0699": [], "\u069b": [], "\u069b\u1104\ua5b5\ufc49": 308, "\u069c\u0625": 308, "\u069c\ua12a": [], "\u069d": [], "\u069e": [], "\u069e\u1854\ufba7\u18a1": 308, "\u069f\u1409\ufb26\u209b\u0aa6\u11e3": 308, "\u06a0": 308, "\u06a3\u30f0\u3108\u30f8\ufd81": 308, "\u06a5\u18f2": [], "\u06a8": [], "\u06a8\ufd5a\u19ba\u1f92\u3079\u310b\u1e85\u1edf\u1e1b": 308, "\u06a9": [], "\u06aa\u044e\u12fa\ufeaf": [], "\u06ab\u0f4c\u1225\u1c01\u1cec\u1e87\ua026\ua3a8\ua747": 308, "\u06ac\ua478\uab41": 308, "\u06ad\u1425": [], "\u06af\ufc52": [], "\u06b0": [], "\u06b1": 308, "\u06b4": [], "\u06b5\u045d": 308, "\u06b6\u0ba4\uab8d\u159b\u165c\u026f\u1433": 308, "\u06b8\u0dab\u16dc\u1477\ua5c2": [], "\u06bb": 308, "\u06bc": [], "\u06be\u020f\u12c3": 308, "\u06c0": 308, "\u06c0\u0959": [], "\u06c1": 308, "\u06c1\u08a4\u021f\u1e3f\u0d38": [], "\u06c2": 308, "\u06c4\ua127\u03cd\u315f": 308, "\u06c5": 308, "\u06c7": 308, "\u06ca\u1609\u31ba\ua3a9\u04fd\u01dc": [], "\u06cc": [], "\u06cd\u1638\uab23\u160a\u1438": [], "\u06cf": 308, "\u06d1\u12dd": 308, "\u06d2\u145d": 308, "\u06e6": [], "\u06ef": [], "\u06fa\u01e7\u0b86": 308, "\u06fc\uaae4\u14b9\u00e5\u01ed\u1bc2": 308, "\u06ff": 308, "\u06ff\u1a3c": [], "\u0712": 308, "\u0713\ua1ad": [], "\u0714": 308, "\u0715\ufc13\ua512": [], "\u0716": [], "\u0719\u11c9\u1587": [], "\u071a": [], "\u071b\u0808": [], "\u071b\ua1cf": 308, "\u071c": [], "\u071d": [], "\u071e": 308, "\u071f\u028d\u2ca9": 308, "\u0720\u152a\uaa64\ua247\ufc6f\u0694": 308, "\u0721": [], "\u0722\u0788\u1e3b": 308, "\u0723": [], "\u0725\u1659": [], "\u0727\u156f\ua1ef\u19b7\ufd3a": [], "\u0727\ufc72": 308, "\u0728\u1210\uaab9": 308, "\u0728\u2dd0\u1546": [], "\u0729": [], "\u072e": 308, "\u074e\u01a3": [], "\u0750\u04df\u1462\u1700": [], "\u0750\u081a\u03b7\u18e4\ua365\u1115\u1d13\u1008\ua86f": 308, "\u0751": [], "\u0751\ua0a6\uab85": 308, "\u0752\u05d6": 308, "\u0752\u1c73\u0b0b": [], "\u0755\ua860\u2cbf": [], "\u0757\u133f": [], "\u0758": [], "\u0758\ua29d\u1b9a\ua4e9\u119b": 308, "\u0759": 308, "\u075a": 308, "\u0763\u1eaf": 308, "\u0764\u1d34": 308, "\u0765": [], "\u0767\u0770": 308, "\u0768\ua691\u17ad\uffc3": [], "\u076a": [], "\u076d\u0975\ua1a1": [], "\u076e": [], "\u076e\u0686\uaba9": 308, "\u076f\ua23c": 308, "\u076f\ufc73": [], "\u0770\ua392\ua966": [], "\u0772\u06b2\u161a": 308, "\u0773\ua485\u0d8d": [], "\u0775": 308, "\u0777\u0a26": 308, "\u0777\ua145\u10f7": [], "\u0778": [], "\u077b\u15d6\ufe86": 308, "\u077c": 308, "\u0782\u316d\u0373\u01da\u186d\ua037\u1f93\u30cd": [], "\u0785": 308, "\u0785\uab03\u00f1\u2cbdk\u1e7f": [], "\u0787": [], "\u0787\u143e\u01b4\u06c3\u15c4\ua31c\uaa8e\u2d31\ua55b": 308, "\u0789\u0d94\u027d": 308, "\u078d\ua048\ua31a\uaaac\u16d4": 308, "\u0792\u1026": 308, "\u0794\u057e": [], "\u0795": 308, "\u0796": 308, "\u0798": 308, "\u0799\u06ad": 308, "\u0799\u1514\u0117\u1f04m": [], "\u079a\u09e0\ua096\u07e1": [], "\u079b": [], "\u079d\ua2d9": 308, "\u079e\u0d95o\u162a": [], "\u079f": 308, "\u079f\u1599": [], "\u07a0\u3165\u2c95\u154c\ua26d": [], "\u07a1\u0453": [], "\u07a2": [], "\u07a4\uab33\ua546\u114e": 308, "\u07a5": 308, "\u07b1\ua821\u0cde": [], "\u07cc": 308, "\u07ce\u2d27": 308, "\u07cf\u16ae\uaba8": [], "\u07d1\ua5d7": [], "\u07d2": 308, "\u07d2\uaaa8": [], "\u07d3": [], "\u07d4\u0573": [], "\u07d5\u3109\u1652\u2d36": 308, "\u07d7": 308, "\u07d8\u2db9": [], "\u07d9\u14dd\ua244\ua38d\u075d\u0726\u125d\u12fc\u1a47": 308, "\u07da\u3141\uffb8": [], "\u07db": 308, "\u07db\u027b\u2c4e": [], "\u07dc\u125a": [], "\u07dd": 308, "\u07df": [], "\u07e1\u112c\u16bb\ufbf0": 308, "\u07e2": 308, "\u07e5": [], "\u07e6": 308, "\u07e6\u182c\u31a5\ua915\u1882\u0d28": [], "\u07e7\u0c95\ufc89\ua437": 308, "\u07e8": [], "\u07e8\u1c65\u1f20": 308, "\u07f5\u0f5e\ua5e0": 308, "\u07f5\u1797": [], "\u07fa": 308, "\u0804\uab78": 308, "\u0805\u1664\u0636\u0c09\ua5c6\u1313": [], "\u0806\u07e3\u146b\u04b5\u18c1": [], "\u0807": 308, "\u0808": 308, "\u080a\ua21d": [], "\u080b\u028d\u0dba": [], "\u080c": 308, "\u0810\u0f5e\u0676\u1b29\u121d\u2d8a\u2d1b\ua96f": [], "\u0812\u07d4\ua320\u0b13\u1c17\ua092": 308, "\u0812\u2c4d": [], "\u0813\u0edd\u2dac": [], "\u0824\uffbc\ua4d7": 308, "\u0828\u1a16\u2145\ufb86": 308, "\u0840\ua0bf\u1cef\u2ca7\ua000": [], "\u0841\u3156": 308, "\u0841\ua187\u1fd3\ua5bf\u3145\u06c8": [], "\u0842": 308, "\u0844": 308, "\u0845\u00ff\u0b36": [], "\u0846\u1e63": [], "\u0848\ua601\ua1cc\u0a16\u1f13": [], "\u0849\u12dc\u03ef\u2092": 308, "\u084a\ua5d8": [], "\u084b": [], "\u084b\u04f9\u1692\uff77\u1905": 308, "\u084e": 308, "\u084e\u1765\u2cb1\ua410\u1f65": [], "\u084f\ua6a8\u1851\ua96a\u0c92\ua753\u0ec0\u03f8\u078a": 308, "\u0851\u1241\u1254": 308, "\u0851\ua933": [], "\u0852\ua59a\ua765\ua898\u1e53\u16c6\ua917\u303c\u0693\u3138": [], "\u0853\uff5a": 308, "\u0854\u2d38\u2d56\ua659\ua6d8": [], "\u0855\u028b\u1d98\u1d7d\u1e23": 308, "\u0855\ua22b\u195a": [], "\u08a0\u1f02": [], "\u08a1\u1daf\u0aa0": [], "\u08a3\u1e31\u2112": 308, "\u08a4\ufcf9": 308, "\u08a6": 308, "\u08a6\u1ed3\u1fe0\ua432\u025b": [], "\u08a7\u12da": 308, "\u08a8\ua944\u1ed9\ua528\uaa61\u14ce\u06b3": 308, "\u08a9\u1c6e\u12de": 308, "\u08a9\u2d95\u305e\u1203\u076b\u2da2\u30c4": [], "\u08aa\uab7d\u1c02\ua560\u097f": [], "\u08ab\u01fd\ufb31\u1e25": [], "\u08ad": 308, "\u08ad\u1a44\u0572": [], "\u08ae": [], "\u0906\u190e": [], "\u0907": [], "\u0908": 308, "\u0909": 308, "\u090e\u0d94\u15e6\uab9c\u1e55": [], "\u090f\u0e33": 308, "\u0910": 308, "\u0913\ua942": 308, "\u0915\u2c66\u2d1f": [], "\u0915\ua39d\u19c9\u1daf\uaa88\u313d\u2cc5\u09b8\u1453\u19c1\u03cc": 308, "\u0916": [], "\u0916\uabcd\u0b1d\u1e01\ua08b": 308, "\u0918\u0a8a\u2ccb\ua269": 308, "\u0919\u071e\ufc4d": [], "\u091a": 308, "\u091b": 308, "\u0920": 308, "\u0922": 308, "\u0922\u18a5": [], "\u0924\u0f42\u17a6\u0443\ua840": [], "\u0925": [], "\u0926\u1c6a": 308, "\u0928": 308, "\u092c": 308, "\u0930": 308, "\u0934": [], "\u0936\u1e6d": [], "\u0937\u1d9f": [], "\u0938\u1be1\ufcff": [], "\u0939\u03e9\u19a7\u0437\ua0b1\u0d21\ufc9d\u107c\u18a6\u0265": [], "\u093d\u1d5a\u2147\ua01f\u04b1\u1213\u16ea\u0284": [], "\u0950": 308, "\u0958\ua7ff": 308, "\u0959": 308, "\u095a": [], "\u095b": 308, "\u095c": 308, "\u095e\u0a9b\ufed3\ua019": [], "\u0960\u04b3\u0788\u30e7": [], "\u0972": 308, "\u0973\ufc20\ua564": 308, "\u0975\u09aa": 308, "\u0976": 308, "\u0979": [], "\u097a": [], "\u097b": [], "\u097c\u0137\u1229\u31b2\ua2d1": [], "\u097d": 308, "\u0980\u0974": 308, "\u0986\u1b8d\u0562": 308, "\u0987": [], "\u0988\u0e81\u12d5\uff4c\ua27b": 308, "\u0989\u1d7b\u01b9\u14e3\ua79b": 308, "\u0989\uff57": [], "\u098a\ufcef\ua425\u16e1\u0790\u095f\u06be\u03ba\u304d\uaaa4": [], "\u098b\u10d2\u1285": 308, "\u098c": [], "\u098f\u312d\u2d3b\u1967\uffce\ua1db": [], "\u0995\ua209": 308, "\u0998": 308, "\u099a": [], "\u099b\u1bdc\u0aa2\u1b2c\ufcdf": 308, "\u099b\u307e\u1bdc": [], "\u099f\ufecc\u076d\u2d66\u0814\u0aaf": 308, "\u09a0\ua09d\ua10a\uab03\uab9e\u106e": 308, "\u09a0\ufb78\uab79\u01c9": [], "\u09a2": 308, "\u09a4\u1159\u0eaa\u1575\ua362\u1f65": 308, "\u09a5\u1622": [], "\u09a6\u0235\u0d0a": [], "\u09aa\uff43": [], "\u09af": [], "\u09b7\u2cdd\u1687\ua1a9\uffbd\u2102\u0b94\u1d74\ua6c2\u1f01": 308, "\u09bd\u1556": [], "\u09bd\u2cb3": 308, "\u09ce\u1024\u0177\u043d\u1e65": 308, "\u09f1\u1c18": 308, "\u09f1\ufc0a": [], "\u0a08": 308, "\u0a0a\u0175\u19b6\ua914\u2d0b\u08ae\u1b07": 308, "\u0a0f": [], "\u0a0f\u1da9\u1422\ufe88\u117b": 308, "\u0a13": [], "\u0a14": 308, "\u0a15\u129f\u1fe0\u1f66\ua61d\ua85e\u167c\u03c7": [], "\u0a17\u3043": 308, "\u0a18": 308, "\u0a1b\u10f5": [], "\u0a1b\ua5c1s\ua1bd": 308, "\u0a1c": 308, "\u0a1d": 308, "\u0a1e\u1180\u1106\u1487\u163e\u1e9d\ud7d8\ufe98\ua691\u1a25\u1418\u0803\u05d0\u0201\u1a00\u1678\uffc7\uffcc\u2da0": 308, "\u0a1f\u149a\ufb95": [], "\u0a1f\u15cf": 308, "\u0a20": 308, "\u0a22\u1c00\u0ca2\u0db5": 308, "\u0a22\ua944\u2c9f\u1be3\u062f\u1b87": [], "\u0a23": [], "\u0a23\u0ab7\u1506\u0c18\ua485": 308, "\u0a25": 308, "\u0a25\u1e0d": [], "\u0a27\ufe81\ua12b\ua73f": [], "\u0a28": 308, "\u0a28\ua502\u1f72": [], "\u0a2a\u12ce\ua260": 308, "\u0a2b": 308, "\u0a2c": 308, "\u0a2c\u198f": [], "\u0a2d\uab94": [], "\u0a2f": [], "\u0a30": 308, "\u0a32\ufc80\uaa1c": [], "\u0a35": [], "\u0a38\u024d\u2c76": [], "\u0a5b\u03e5": 308, "\u0a5c": 308, "\u0a73\u1b14\u1b48\ua24b": 308, "\u0a74": [], "\u0a86": 308, "\u0a87\ua077": 308, "\u0a89\u00e0": 308, "\u0a8b": [], "\u0a8b\u0631\u1297\uaa8b\ufea9\u0786\u18c3\ua53d": 308, "\u0a8c\u16ab": 308, "\u0a8f\u0bb7\u1015\u1c21\ua6e0\ufc3f": [], "\u0a8f\ufbf2": 308, "\u0a91": [], "\u0a91\u1f71\ufc68": 308, "\u0a93": 308, "\u0a93\u0dad": [], "\u0a94\ua297\u2ccd\u03b5\ua2a2\ua133\u1825": [], "\u0a95\u1e7d\u2c58\ua040\ua550\ufda9": [], "\u0a98\ua4d8\u1745\ua0c3\ua91e": [], "\u0a99\u0cb2\u2119": [], "\u0a99\u1336": 308, "\u0a9a\u015b\u03b9\u184d\u3151\ua9e8\u0140": 308, "\u0a9a\u2d41\ua6dc\u2d09\u1bd8\ufd0b\u19c6": [], "\u0a9b\u0771\ufdbc\u0377\ufce0\u045d\u0491\u2cdd\u04f5\u1605\u18f5": 308, "\u0a9c\u2c4e\ufceb\ua109\u1b8c": 308, "\u0a9d": [], "\u0a9d\u0c27\ua57d": 308, "\u0a9e\u123c\u0919": 308, "\u0a9f\u0642": 308, "\u0aa1": [], "\u0aa3\ufc8c": [], "\u0aa5": 308, "\u0aa7": 308, "\u0aaa\u0d25\u306e": 308, "\u0aac": 308, "\u0aac\u2cad": [], "\u0aad": [], "\u0aad\ua11b\u0561\ua126\u0b99\u12df\u30c0": 308, "\u0aae": 308, "\u0ab3": 308, "\u0ab5\u107e": 308, "\u0ab6\u12a0": 308, "\u0ab6\u1ea1\u091e\ua69c\u07dd\u1482\u02ca\u314b\u1988\u1b47": [], "\u0ab7": [], "\u0ab8\u04d5\u1133\u120b": 308, "\u0ab9\u1d1a\u133b\u0167\u01b9\u0c34": 308, "\u0ad0\u1ecd\ua070": [], "\u0ae0\u0718\ua214\ufeb5\u209a\uffaa\u0149\uffad": 308, "\u0ae1\u30f1\ua693": [], "\u0b05\u10ed\u2c4c": 308, "\u0b06\u0a9e": [], "\u0b08\u0e9d": [], "\u0b0a": 308, "\u0b0c\u00f5": [], "\u0b0f\u0921": 308, "\u0b10": 308, "\u0b15\ufea8": 308, "\u0b16\u1d58": [], "\u0b18": [], "\u0b1a\u183c\u1644": [], "\u0b20": [], "\u0b21\ua5a9\ufeaa": [], "\u0b22": 308, "\u0b22\u2095\ua472\ua053\ua07a": [], "\u0b24\u1848": 308, "\u0b26\ua358\u162c\ua1bb": [], "\u0b26\ufbac": 308, "\u0b2a": 308, "\u0b2c\u16c4\ua4f4": 308, "\u0b30": 308, "\u0b32\ua2be\ua815\ufcb2\u0b71\ua360": [], "\u0b36": 308, "\u0b39\uaa47": [], "\u0b3d\u1e57\u30d9\u1f70\u1f25": [], "\u0b5d\ua260\ud7f3": [], "\u0b61\ufc83\u1ee7": [], "\u0b71": 308, "\u0b83\uaa83": [], "\u0b85": [57, 106], "\u0b85\u0f6a\u043c": 308, "\u0b86": [57, 106], "\u0b86\ua203\ua594\ua578\ua975": [], "\u0b87": [57, 106], "\u0b88": [57, 106], "\u0b88\u1f91": [], "\u0b89": [57, 106, 308], "\u0b89\u1406": [], "\u0b8a": 308, "\u0b8e\ua1df": [], "\u0b99": [], "\u0b9a": 308, "\u0b9c": [], "\u0b9e": 308, "\u0b9e\ufecc\u1154i": [], "\u0baa\u1ec3": 308, "\u0bae": 308, "\u0baf\u2da6\ua3af": [], "\u0bb1": [], "\u0bb1\u1416": 308, "\u0bb2\u16b6\u0dc3": 308, "\u0bb3": [], "\u0bb3\ufcc2": 308, "\u0bb5\u1611": [], "\u0bb8": [], "\u0bb8\u00ef\u0e9f\ufc44\uaa27": 308, "\u0bb9\ua16e\u1305": 308, "\u0bd0\u10d4\u2dad\ua687": 308, "\u0c05\u148c\u1ec5\u04e1": [], "\u0c0a": 308, "\u0c0b\u04e9": [], "\u0c0c": [], "\u0c0f\ua1de\ufc46\u1cea\u0442\u1992": [], "\u0c10": [], "\u0c13": 308, "\u0c14\u0d2c\u1c23\u1b1c\ua659\u0580": 308, "\u0c14\ufc94\u1889": [], "\u0c16": [], "\u0c16\u1284\ufe8c\u0d13": 308, "\u0c19": [], "\u0c1a": 308, "\u0c1b\u08a5\u01c3\u195a\ua35a\ua0e1\u1f02\u0265\uff41\u017c": 308, "\u0c1c\u1a34": [], "\u0c1d\u11c0\u072d\u0e04": 308, "\u0c1f": 308, "\u0c1f\u0d4e": [], "\u0c20": 308, "\u0c21": [], "\u0c22\ua017": 308, "\u0c23": [], "\u0c25": [], "\u0c26": 308, "\u0c2a\u317c": 308, "\u0c2b\u092f": [], "\u0c2c": 308, "\u0c2d": 308, "\u0c2e": [], "\u0c30": 308, "\u0c30\ua01b": [], "\u0c31": [], "\u0c32\u1874": [], "\u0c33\uaa24": 308, "\u0c35": [], "\u0c36\u2115\ua307\u1212": [], "\u0c37": 308, "\u0c37\u1bc3\u1b8e\ua5c9": [], "\u0c58": [], "\u0c59\u013c": [], "\u0c61\u1405\u097e\u2c3c\u316c": 308, "\u0c61\ua669": [], "\u0c86\u0d17\u19b5": [], "\u0c87\u1426\u0938": 308, "\u0c88\u1981": 308, "\u0c8a\uab48\u1be2\u1f37": 308, "\u0c8b\u2c8b\u016b\u0c93\ua0a5\ua176": [], "\u0c8c": 308, "\u0c8c\u10e1": [], "\u0c8e": [], "\u0c8e\u1909\u30f2\ua65d": 308, "\u0c90": [], "\u0c90\uaa0d": 308, "\u0c95\ua05d\ufdbb\u14b8\u0c13": [], "\u0c97\u10ee\u1d0e\u03b2\ua5ba\u03b4\ua14f\ufc2f\u01da\u07cf\u1dbb\uaa97": 308, "\u0c99": 308, "\u0c9a\ua1e0": 308, "\u0c9b\u2c53\u00ea": [], "\u0c9d\ua341": [], "\u0c9d\ua9af\u0794\ua507": 308, "\u0c9f\u14ef\uff93\u1c7b": 308, "\u0ca2\u0278\ufc38\u2c48\u0780\u0c28": [], "\u0ca3\u0205": [], "\u0ca4": 308, "\u0ca5": 308, "\u0ca6\u1616": [], "\u0ca7\u30e8\u2db2\ua9e3\u1f61": 308, "\u0caa\u2c99\u119a\u1cf0": [], "\u0cad\u1eb3\ua9cf\uab3f\ua775": 308, "\u0caf\ua310\u3133\u0271\uabe0": 308, "\u0cb1": [], "\u0cb3": 308, "\u0cb5\ua9a3\uff50\u0783\u0640\ua262": [], "\u0cb6": 308, "\u0cb8": 308, "\u0ce0\u150c": 308, "\u0cf2": 308, "\u0d0a": 308, "\u0d0b": 308, "\u0d0e": 308, "\u0d0f": [], "\u0d12": [], "\u0d15": 308, "\u0d15\u1f34": [], "\u0d17\u1703": 308, "\u0d18\u2c8d\u062a": [], "\u0d19\u05d4\u10fa": [], "\u0d19\ua395": 308, "\u0d1a\u19bf": 308, "\u0d1c\u1954": [], "\u0d1d\u1221": [], "\u0d1d\u3184\u2d80\u020d\u0993\ua6cf": 308, "\u0d1e": 308, "\u0d20": 308, "\u0d25": [], "\u0d26": 308, "\u0d27": 308, "\u0d2a\ufc89\u03d5\ufd53\u18e9": [], "\u0d2b": 308, "\u0d2d\u188d\u01fd\ufc38": 308, "\u0d2d\ua685": [], "\u0d2e\u1f60\ufd5e\ufcae\u03ce\u01d4\u05e0": 308, "\u0d2e\uff7c": [], "\u0d2f\u10e6": 308, "\u0d30": 308, "\u0d32": 308, "\u0d33": 308, "\u0d36": 308, "\u0d39\u0527": 308, "\u0d3a": [], "\u0d4e\u0137\ud7c6": 308, "\u0d60": 308, "\u0d60\u0493\ufeca\uaa99\u0d31": [], "\u0d61\ua15d\uab38\u1334\ua88f": 308, "\u0d7a": 308, "\u0d7a\ua4d5\uaa22\uffc2\u01dd\u15a2\ua972\u0576\u131d": [], "\u0d7d": 308, "\u0d7e": 308, "\u0d85\u1192\u184c\u0505": 308, "\u0d86\u037b\u03f3\u0503\u1000": [], "\u0d87\u15da\u18f2\u0c17": 308, "\u0d88": [], "\u0d89\u1f61\u1b2c": [], "\u0d8a": 308, "\u0d8b\u051d\ua023\uff72\u0679\ua774\u0c07\u0da1\uab3e\u1e9a\ua5a3": [], "\u0d8c\u2c50\u0265\u1760\u0a2d": 308, "\u0d8d": 308, "\u0d8e\u11cb\ua807": [], "\u0d8f\u1279\u134f\uaba8": 308, "\u0d91\u18be\ua36a\ua56a\u0f53\u15e4\ua326": [], "\u0d95": 308, "\u0d96": [], "\u0d9b": 308, "\u0d9c": 308, "\u0d9d\u1325": 308, "\u0d9d\ua894\ufce6": [], "\u0d9f": [], "\u0da2": [], "\u0da3\ua0c7": [], "\u0da3\ua5ef": 308, "\u0da4\ua413": 308, "\u0da4\ua616\ufe90\ufee2": [], "\u0da7\u14ea": [], "\u0da8": [], "\u0da8\u1162\ua066\uffb1\u11a0\u167a\u311b\u1385\u1e57\ud7d6\ua2fa": 308, "\u0da9\u1ec9\uabcc\u1348\ua79f": 308, "\u0dab\u00f3\ufd56\u305b": 308, "\u0dad\u152f": 308, "\u0db1\uaa24": [], "\u0db3": [], "\u0db3\u02ad": 308, "\u0db4\u0207\u133e\u1f92\u1a4b": [], "\u0db4\u312a": 308, "\u0db5": [], "\u0db7\u0aae\u31b0\u0142\ua8ae": [], "\u0db7\u1e5b\u14f5\u11a7": 308, "\u0db8": [], "\u0db9": 308, "\u0dc1": 308, "\u0dc1\ua1aa": [], "\u0dc4\u1648\u1f40\u0252": 308, "\u0dc5": 308, "\u0e02": [], "\u0e02\u15a9\ua695\ua5af": 308, "\u0e05": [], "\u0e06\u0936\u313f\ua4d1": 308, "\u0e06\u1c11": [], "\u0e07\u068a\u0ca4": [], "\u0e08\u04ad": [], "\u0e08\u1467\u1eab": 308, "\u0e09": [], "\u0e0a": [], "\u0e0c": [], "\u0e0f": 308, "\u0e10\u03bb": 308, "\u0e11\u0c24\ua025\u1592\ufd69": [], "\u0e11\u2d54\uab42\u157a\ua759": 308, "\u0e13": 308, "\u0e14\u0f5b\u11b7\u1f15\ua44a\ufd7a": 308, "\u0e18": [], "\u0e19\ufb9e": 308, "\u0e1b\ud7e1\ua29f\u199e\u1b2e\u0c18\ua9aa": [], "\u0e1c": [], "\u0e1d\u03e9": 308, "\u0e1e\u18b5": 308, "\u0e21\ufce2": [], "\u0e23": 308, "\u0e25": [], "\u0e26": [], "\u0e26\ua553\u18d9": 308, "\u0e27": [], "\u0e27\u10e5": 308, "\u0e29\u2d90\u0639": [], "\u0e29\ua48b\u1110": 308, "\u0e2a": [], "\u0e2c\u3064\u1d12\u115dq\u127a": [], "\u0e2f": [], "\u0e2f\u1896\u1a39": 308, "\u0e30": 308, "\u0e32": [], "\u0e41": [], "\u0e43\u0250": 308, "\u0e45": 308, "\u0e46": 308, "\u0e81": [], "\u0e84\ua861\u30ad\u1e27": [], "\u0e87": 308, "\u0e87\u2c5e\u1bc9\ud7e4\u02a8\u075b": [], "\u0e88": [], "\u0e8a": [], "\u0e8d": [], "\u0e94\u18b2\u0a27\uff9a": 308, "\u0e96\u080a\ua967\u101f": 308, "\u0e97": 308, "\u0e97\uabb1": [], "\u0e9b": 308, "\u0e9b\u111c": [], "\u0e9e": [], "\u0ea1": [], "\u0ea2\u17b3\ua7fb\ua691\ufcdc\u1d4a\u0a5a\ufcc8i\ua16c\u2d3e\ua35d": 308, "\u0ea3": [], "\u0ea5": 308, "\u0ea5\u1053\u145b": [], "\u0eaa": [], "\u0eae": [], "\u0eaf": 308, "\u0eb0": 308, "\u0eb0\u30d0\u0a96\u1329\u2d46\ud7b3\u03af\u12f9\u1bde\u1d60\ua99b": [], "\u0eb2\u1ec9\u0d2c\u1a0b\uab3c\uabd2\ufca8\u1123\ua753\ua102\ua68b\ua3dd": [], "\u0eb3\u174b\u1e35": [], "\u0ec0\u2ce1": [], "\u0ec1\u186a": 308, "\u0ec1\ua282\ua083\uaa80\u08b2\u1750\u0377": [], "\u0ec2": 308, "\u0ec2\u04ab\u1c0f\u09b0\u02b1\u152e\u2cbd\ua984\u196c": [], "\u0ec3": [], "\u0ec3\u11ba\u176e": 308, "\u0ec4": 308, "\u0ec6\u1bd0\u0d35": [], "\u0edf\u0961\uab05": [], "\u0edf\u1e81\u143b\ua665\ua2c0\ufd78\u150a\ua545": 308, "\u0f41": [], "\u0f45\uaa86\u1e35\u04a7": [], "\u0f47\u18a6\u2db5": 308, "\u0f49\ua3ac\ua6da": 308, "\u0f4a\u0b8f": 308, "\u0f4b": 308, "\u0f4d\u19b1\u2d88\ua1f1\u16ce": [], "\u0f4e\u2d20": [], "\u0f4f": 308, "\u0f51\ua4d0\ufc1c\u1b11": [], "\u0f51\ufb61": 308, "\u0f52\u01df\u0629\ua667": 308, "\u0f54": [], "\u0f5a\u3189\u31fd": [], "\u0f5d\u11db\u1798": [], "\u0f5f": [], "\u0f60\ua418\ua79d\u1134\u1c64\ua781\u169a\u1439\u2d10\u105a": [], "\u0f63": [], "\u0f64": 308, "\u0f66": [], "\u0f6a\u027c\u1dbd\ua71a": [], "\u0f6c\u1966\ua272\ufb64\u1962": 308, "\u0f88": [], "\u0f89\u2d39\u10fa": 308, "\u0f8a": 308, "\u0f8b": [], "\u0f8c\u1162": [], "\u1001\ua3c2\u0f49": [], "\u1003": 308, "\u1004": 308, "\u1004\u1533\u0cf1\u015b\u161d": [], "\u1005\ua501\ud7d7": 308, "\u1006\ua30b": 308, "\u1006\ufcfc\u1e09": [], "\u1007": [], "\u1007\ua935": 308, "\u100a": [], "\u100a\ua842": 308, "\u100b": 308, "\u100c\ua371": [], "\u100d": [], "\u100d\u1176\u1055\u130c\u0c98\ua3b2\ua02a\u06c9\u308d\ufea0\u105d": 308, "\u1010\u15d6\ua1b7\uab37\u01e9\ua899\u06ab\u1347\ufd29\ua100\u1181": [], "\u1011": 308, "\u1012": [], "\u1012\u1550": 308, "\u1014": [], "\u1015\u1ee1\ua06a\u0d86\u1d63\ua12b\ua1d8": 308, "\u1016": [], "\u1016\ua689": 308, "\u1017": [], "\u1019\ua25f": [], "\u101b": 308, "\u101c": [], "\u101c\ufb50\u1e45": 308, "\u101e\u03bc\u07de\u098c\u1f50": 308, "\u1021\ufe7e\u0905": [], "\u1022\ufc4d": 308, "\u1028": 308, "\u1029": [], "\u103f": 308, "\u1055": [], "\u105b": 308, "\u106f": [], "\u1070\ua292\u1f32": [], "\u1070\ua2ae\ufb81\u2094\u1f7c\u308f\ufb20\ua960\u190c\ua924": 308, "\u1078": 308, "\u1079\u1be0": 308, "\u1079\u2d09\ua941\ufeed\u16e2": [], "\u107a\u1cee\ufc8d": 308, "\u107a\ufcde\u067e\u163a\ua3f1\u012d\ua942\u1131\ua851\ufd82\u092c\u2dc4\ua86f\u18b9\ua5f0": [], "\u107b": 308, "\u107d\u149b\u1a0a\u04fd\ufb74\u2d43\u156e\ua6d6": 308, "\u1081\u15fb": [], "\u108e\u2110\u1a2c\u1ed1\u0635\u029d": [], "\u10d0\u1f30\u18c4": [], "\u10d1\ua43b\u1238\ua454\u18d4\u19b1\uaa9a\u2ce1": 308, "\u10d2\u1ec9\u1f81\u18c8\u037d\u1ea3\u0371\u1d1f": [], "\u10d4\u12ae\u129d\u06c3": [], "\u10d5\u069f\ua042\u2c54\ua3e3\u0cb7\ua5e5\u0772\u30b1": [], "\u10d7": [], "\u10db\uff87": 308, "\u10dd\u1a20\u07d9\u0562": [], "\u10e0\u0e2a\u1919\ua043\ufb99\uaa48": 308, "\u10e0\ua225\u0269\u14cf\u1d24": [], "\u10e2": 308, "\u10e4\ufd9a": 308, "\u10e8": [], "\u10e9": [], "\u10ea": 308, "\u10ec": 308, "\u10ee": [], "\u10ef\u111a": 308, "\u10f0": [], "\u10f1\u02e2\u03f3": 308, "\u10f2": [], "\u10f3\ua238\u0dbd\u1e5f": [], "\u10f4": [], "\u10f5": 308, "\u10f6": 308, "\u10f8": [], "\u10f9\u1420": [], "\u10fc\u18c5": [], "\u10ff\u1650\u30e5\u16ab": [], "\u1100\u308f\ufc01": [], "\u1101\u052f": [], "\u1101\ufbee": 308, "\u1102": [], "\u1103\u0275\uaabc\u0637\ua2e1\u31ae\u1f70\u18d3\u01f3\u084d\ua769\u0163\u1eeb": 308, "\u1103\ufc26\u1579\ua1d9": [], "\u1105\ua2ff\ua339\ua00f\u1d38": [], "\u1106": [], "\u110a\u1d30\u3110": 308, "\u110a\ua2a1\ufc99\u022d\u1824\ufba6": [], "\u110c\u1793\u078c\ua33e\ua64d\ufda1": 308, "\u1111": 308, "\u1114\u1904\u1385": [], "\u1116\ua21d": 308, "\u1118": [], "\u1119": [], "\u111a": [], "\u111b": 308, "\u111c\u1f21\ua6c4": 308, "\u111d\uab23\u17af\u1e81\ua6a7\u3105\u0b19\u15cb": 308, "\u111e\ua41f\u00f2": 308, "\u111e\uab90\ua68d\u151f": [], "\u1120": 308, "\u1120\u1183\u0d0c\u0463\uaa20\u1c7b\u044a\u0e04": [], "\u1121\u04b1\u213d\u2ccf": 308, "\u1121\ua2af\ua389\u11e5\u0792\u071f\u0a9f\u1e2d\u12fb": [], "\u1122": 308, "\u1125\u0229": 308, "\u1125\ua52c\u0192\uaadc": [], "\u1126": 308, "\u1128": 308, "\u112b\u1ec7\u0b1b\ua6a1": [], "\u112b\uab9c": 308, "\u112d": [], "\u1130\u14af\u1d97\u315d": [], "\u1132\u31f1\ua470\u0519\u07cd\u166c": 308, "\u1134": 308, "\u1136": [], "\u1138\u1443\u150e": [], "\u1138\u18ee\u129f": 308, "\u1139": 308, "\u113a\u145e\ua37d": 308, "\u113c\u15fb": 308, "\u113c\ua5dc\u1f87": [], "\u113d\u0646": [], "\u113e": 308, "\u113f\u196c\u0473": 308, "\u1140": 308, "\u1140\u04d7\u11d7\ua5a5": [], "\u1141": 308, "\u1142\ufeb0": [], "\u1143": [], "\u1143\u31a1": 308, "\u1145\u126c\u19bd\u0f64\ua20f\u010d\u1624\ua772": [], "\u1146": 308, "\u1146\u07de\ufcdc\ufbe3\u1f27\ua298\u0442": [], "\u1148\u1484": 308, "\u1149\u114c\u1131": 308, "\u114a\ud7c2\u1682": [], "\u114d\ua122\u1ecf": [], "\u1150\u1490": [], "\u1153\u1a40": 308, "\u1154\u166a\ua5ca\u2d51\ufc35\u0264\uab47\u1670\u068d": 308, "\u1155": 308, "\u1155\ua466": [], "\u1156": 308, "\u1157": [], "\u1157n\u0801\ua191": 308, "\u1158\ua858\u17b2\u018c\u0780": 308, "\u1159\u050d\u0e40\ua5db": [], "\u115c\u0195\u1d54\u0cb0\u1956\ua581": 308, "\u115c\u1da2\ua548\u188c\u156e": [], "\u115eg\u1255": 308, "\u115e\u149b\u012f": [], "\u1161": [], "\u1163\u03ac\u1700\ua2b4": 308, "\u1165\u0d36": [], "\u1165\u12ec\u0721\ua33a\u1612": 308, "\u1166\u1422": [], "\u1168\u122c\u1ff2": [], "\u116b\ua27b\ua565\ua19a": [], "\u116c": 308, "\u1170": 308, "\u1172": 308, "\u1173\u0774\ufec4": [], "\u1174\u09b8": [], "\u1177\ua47f\uffa6": 308, "\u1178\u1558\ufefb\u14ed\ua9e4\u0691": [], "\u1178\ufef9\u1d31\ufd80\u0b5f\ua328\uab7c\ufef7\ua110\u09ae\u1449\u1200\uaa65": 308, "\u1179\ufd33\u30c0\u1c6b\ua808\u1b25": [], "\u117b\ua0f2\ua697\ua1c6\u17b1\u1fb3": [], "\u117d": [], "\u117e": 308, "\u1180": [], "\u1182\u04b7\u15a3": 308, "\u1182\u0c1e\ua5d2\ua437\uff9b": [], "\u1183\uab25": 308, "\u1184\ua46c\u1d67\u01d0\u06d5": 308, "\u1185": 308, "\u1185\u12a5\u0d22": [], "\u1186": 308, "\u1188\u2c58\u05df\u30ae\ua371\u154e\u1f35": 308, "\u1188\ufc96\u1512\uffb0\u15a8\u1a4d\u1bbb": [], "\u1189\ua685": 308, "\u118a\u1577": [], "\u118b\u14d2\u1109\ufeab": 308, "\u118d\u01ff": [], "\u118e\u130e": 308, "\u118e\ua803\u14c3\u1b9a": [], "\u118f\u184e": [], "\u1191\ufd96\u1828\u08a7": [], "\u1193\u1275\ua0cf\u0d05\u1e0b": 308, "\u1194": 308, "\u1196": 308, "\u1197\u2d1e": 308, "\u1198\ua31f": 308, "\u1198\ufca6\u01a1": [], "\u119b": [], "\u119d\u12b9": [], "\u119d\ufda9\ufc99": 308, "\u119e\u30ba\u168d": [], "\u119f\u01ce\u025d\u1595": [], "\u11a0\uab30": [], "\u11a2": 308, "\u11a3\u12d0\u2c89\ua55c": [], "\u11a4": 308, "\u11a5\uabb8": [], "\u11a6": [], "\u11a7\u15cc": [], "\u11a8": [], "\u11a8\ua0fa\u01df": 308, "\u11a9": 308, "\u11ab\u0269": 308, "\u11ac\ufdc3": [], "\u11ad\u1ff3\u0223\ua62a": 308, "\u11af\u07e2\ua36d\u00e1\u0c9f\u1340\u0237": [], "\u11af\ua407": 308, "\u11b0\u2d44\ufbf1\ua333": [], "\u11b1\u1e29\u15b6\u1d93\ua13a\ufba4": [], "\u11b2\u11e9": 308, "\u11b3\u014f\ua123\u0a5a\ua1cb": [], "\u11b3\u1743\ua156": 308, "\u11b4\u15f1\ua08b\u2c68": [], "\u11b5": [], "\u11b9\u185e\u1ef7": 308, "\u11bb\ua251": 308, "\u11bc\ufbf6\ufc30\u2091": 308, "\u11bd\u1730\ufc03": [], "\u11be\u1fe1\u30f7": 308, "\u11bf\u05e9\ua4d8": 308, "\u11c0": [], "\u11c2\uaab6\ua73f\ua420": [], "\u11c3\u03f5\u2c34\ufce1": [], "\u11c4": 308, "\u11c6": [], "\u11c9\u06bd\u1698\ua68f\ufc06\u1061": 308, "\u11ca\u2136": 308, "\u11cc\ua71d\ufece\u06cb\u1e4d": [], "\u11cd\u03c6\uaa02\ua1c3z\ufb33\u16bf\u0443\u0925\u0c35\u1d4f\ua2c6\ua390\ufca6\u1213\u1542": 308, "\u11d0\u1290\ua134\u043e": 308, "\u11d1": [], "\u11d1\ufef4": 308, "\u11d2": 308, "\u11d3\ua429\ufd66\u0a2e": 308, "\u11d4\u11f2\u1ed5\u316a": 308, "\u11d4\u31f2": [], "\u11d8\u09a1\u1f50\ua41f": [], "\u11df\u16b7": [], "\u11e2\ua5de\uaba7": [], "\u11e4\u1608": 308, "\u11e7": [], "\u11e8": 308, "\u11e8\u0aaa": [], "\u11ea\ua53e\uffa6": [], "\u11ec": [], "\u11ed": 308, "\u11ed\u30f6\ufd28\u0258\u04dd": [], "\u11ee\ua128\ua71c": 308, "\u11ef\ua1ad\ua840": 308, "\u11f0\u0bb4": [], "\u11f0\ufd99\ua426\u1029\ua584\ua594": 308, "\u11f2\u15b3": [], "\u11f3\u12b3\ua3a2": 308, "\u11f4\u1593": [], "\u11f5\u0568": 308, "\u11f7\ufef3": 308, "\u11f9": 308, "\u11fa": [], "\u11fb\ua3d3\ua6b4": 308, "\u11fb\ufdc4\ua0d7": [], "\u11fc\u1d66\u1d84\u18e8": [], "\u11fd\u102a": 308, "\u11fd\u3087": [], "\u11fe\u14ad\u025d\ufb82\u043b\u1f85": 308, "\u11ff\uff6a\u1453\u12d3\u141f\u17af\u12db\u123d\ua90e\u178d": [], "\u1201\ua3b6\ufbf3": [], "\u1201\ufbad\u1876\u2dbd": 308, "\u1202\ua3f4\u1d50\u2ccd\u157a": [], "\u1202\ufda4\u14cd\ua42a\ufe90\u05f2": 308, "\u1203\u09a1": 308, "\u1204": [], "\u1206\u0563\u1109\ua4e6\ua583\u1e49": [], "\u1206\u1d96\u2d15\u311a": 308, "\u1209\u10fd\ua34b\u1f86": 308, "\u120c\u1bae": [], "\u120d\ua00a": [], "\u120e\u1285": [], "\u120f\ua483\u172e\u16c5\ua023": 308, "\u1210\ua30b\u1f80": [], "\u1211\u02c0\u013c\ua263\u1838": 308, "\u1211\u17a4\ua54f\u0625\u164d\u30d1": [], "\u1215\uab37\u0286\u1536\u0d92\u1639": 308, "\u1216": 308, "\u1217\uabd6": [], "\u1219\u0117": 308, "\u121a\u2d46\ufe8f\ua475\u0e07\ufd50\u0497\ua50f": 308, "\u121b": 308, "\u1220\ufdb7\uff66": [], "\u1222\ua3d8": [], "\u1227": [], "\u1228\u0247\ua46e\u1e65\u14a4": [], "\u1229\u1573\u1d0d\u1983\u1e47": 308, "\u122a\ua16d\u2c87\ud7d4\u0517": 308, "\u122d\u19a3": [], "\u122f\u1970": [], "\u122f\u1eb5": 308, "\u1231": 308, "\u1233": 308, "\u1233\u154a": [], "\u1235\u157b\u03c7\u1cef\ua78c\ua755": 308, "\u1236": 308, "\u1237": 308, "\u123c\u1555\u02bb\u168f\ua439\u09a4\u1488\u0272": [], "\u123e\u11e0\u1b10\u31ab\ufc32\u2c73\ua500\ua4e6\u0a39\ua97b\u151d\u1014\ua0ec\u1ea7": 308, "\u1240\u18de\u31f8\ua13c\ufea4": [], "\u1242": 308, "\u1243\u2d93": 308, "\u1243\u30b4": [], "\u1244\ua0cc\ua7f9": 308, "\u1245\u30d7\uaaa2\u1494": [], "\u1246\ufc92\uab24\u1123\u14be": 308, "\u1247": [], "\u1248\u174f\u16a8\u1300\u1127\uaaab\ufc0c\u0bd0": [], "\u1248\u1788": 308, "\u124d\ua90e\ua04c\u1963\u1fd6\u14fd": 308, "\u1250\ufd03": 308, "\u1255": [], "\u1256\ufc53\u18df\u017e\u316f\ua529\ua998\uab06": 308, "\u1258": [], "\u125a": 308, "\u125b": [], "\u125c\u1c79": [], "\u1260": 308, "\u1260\u2d24": [], "\u1262\u129b": 308, "\u1263\ua51b": 308, "\u1264": [], "\u1264\u0188\u1312\u1bbc\u1f56": 308, "\u1267\ua016\ufb2c\ua72f": 308, "\u1268": [], "\u1269": 308, "\u126a\u1441": 308, "\u126b\ua476\u2cb5": [], "\u126e\u3165": 308, "\u126e\ua537\u30ed": [], "\u126f": [], "\u1273\u0913\u092a": [], "\u1274": 308, "\u1276\u1579": 308, "\u1277": [], "\u1279\ua922": [], "\u127d": [], "\u127f": [], "\u127f\ua1be": 308, "\u1282": [], "\u1282\u1136": 308, "\u1287\u1c1c": 308, "\u128a\u1ef5": [], "\u128b\ua870\ufea3\u30e2\ua5e8\ufb90\uff46\u19c5\u185d": [], "\u128c": 308, "\u128d": 308, "\u1293\u16a7": [], "\u1294\u2c8f\ufd3c\u1e5f\u0183": 308, "\u1295": 308, "\u1298\u2c45\ua548\ua22a\u1c1b": 308, "\u129a\ud7ba\u049b\u0d90": 308, "\u129c\u14d9\u3124": 308, "\u129e\ufc62": 308, "\u12a1": [], "\u12a3": 308, "\u12a6": 308, "\u12a8\u075f": [], "\u12a8\ufc29\ufd3d": 308, "\u12a9\u0447": [], "\u12a9\u15ba\u1874": 308, "\u12aa\uab9e\u1959\ua3a8\ufb5c\ufb7d\ufdf1\ufe98": [], "\u12ab": [], "\u12ac": 308, "\u12ad\u12f8": 308, "\u12ae\ua12f\uab21\u0924\ua747": 308, "\u12af\u0717\u15f8\u1973": [], "\u12b0": [], "\u12b3\u2cdb\u2dc1": [], "\u12b4\u03c8\u3083\ua272\u1f00": [], "\u12b5\u03d4": [], "\u12b5\u18e0\ufd18": 308, "\u12b9\u172f\ua325\ua3c9\ua5d8\ufd1d": 308, "\u12bc\u1a33\u076c\u04ab\u0c88\u0291\u1cee\ufb7f\u1998": [], "\u12bd\u1eb1\ua51a": [], "\u12c5": [], "\u12ca": 308, "\u12cb": [], "\u12cb\u0445\u14bb\ua59e": 308, "\u12ce": [], "\u12cf\u1749": [], "\u12d0\u11c3\u158f": 308, "\u12d2": [], "\u12d4": [], "\u12d6\ua775\u0123": [], "\u12d9n": 308, "\u12db\ua3fd": 308, "\u12dc": [], "\u12dd\u0ae0": [], "\u12de\ufeda": [], "\u12e2\ufc8b": [], "\u12e3\ua177\u04c8\u1f85\u1c13\u03ca\u1fa3": 308, "\u12e4": 308, "\u12e5": 308, "\u12e5\ua1d7": [], "\u12e7": 308, "\u12e7\u1da1\u1412": [], "\u12e8": [], "\u12e9\u1334": [], "\u12ea": 308, "\u12eb\ua963\u3155": 308, "\u12ec\u1d2fl": [], "\u12ed": 308, "\u12ed\ua211": [], "\u12ee\u1586\u2115": 308, "\u12ef": [], "\u12f1": [], "\u12f1\ua22c\u11cf": 308, "\u12f4": 308, "\u12f5": [], "\u12f6\u1d39": 308, "\u12f8": [], "\u12f9": 308, "\u12fa\u131f": 308, "\u12fb\u0a21\uaa60\u308b\u09a6\u0221\ua402": 308, "\u12fd": [], "\u12fd\ufcd4\u10eb\u1523\u1f93\ua141\ufece\u116d": 308, "\u1300\ua144": 308, "\u1303\u185e\ufdb5\u0183\u03f2\ua223": [], "\u1306": 308, "\u1308": [], "\u130b\u0999\u11b6\u1c1b\u0a86\ua9b0\u0aa8\u0a8d": [], "\u130d\u019e\u167e\u3069": 308, "\u130e\u11fe\u1254": [], "\u1310": [], "\u1310\u078f\u0c15\u1ec5": 308, "\u1314": [], "\u1315\u1a52": 308, "\u1318\u2cbd\u0c3d": 308, "\u1319": [], "\u131b": 308, "\u131c": 308, "\u131c\u1d42": [], "\u131e\u0515\ua13b\ufb1d": 308, "\u1322\u090c\ua35f": [], "\u1322\ufc08": 308, "\u1323": [], "\u1323\ua99e\u00f4": 308, "\u1324": 308, "\u1325": [], "\u1326": [], "\u1326\ua72b\ud7c3": 308, "\u1328": [], "\u1329": 308, "\u132a\u0779": 308, "\u132b\u1b10": [], "\u132c": 308, "\u132c\u1d30": [], "\u132d\u013e": [], "\u132e\u2c4c\u2dd5\u01c6\u1145\ua32d": 308, "\u132e\uaae2\u1d25": [], "\u1331\u1ec7": 308, "\u1331\u318b\u1147": [], "\u133a\u304d\ua273\u0774\uab9dc\u1dba\u0371\u029a": 308, "\u133a\u304e": [], "\u133b": [], "\u133d": 308, "\u133e\ua3ce": 308, "\u1340": 308, "\u1341": [], "\u1342": 308, "\u1344\u03ed\uff57": [], "\u1346\u03c5\u184e\ua2ce\u1d21\ufe8e\u08aa\u18b3": 308, "\u1349": 308, "\u134a": [], "\u134b\u312a\u0ba3": [], "\u134c": 308, "\u134d\u15d7": 308, "\u134e\u0140\u00fb\u0173\u1b87": 308, "\u1351\ufbaa\ua66d\u1846": [], "\u1352\u0a33\ua608\u138b\u010b\u0268\u080e\u1602": 308, "\u1353\u199e": 308, "\u1354": 308, "\u1355\u0b35\u2c54\ua283\u1f62\ua58f": [], "\u1357\u1c69\ufc20\u0c8f\u0113": [], "\u1358": [], "\u135a": 308, "\u1380": [], "\u1380\u1872": 308, "\u1381": 308, "\u1381\ua533": [], "\u1382": 308, "\u1387\ufe9f\u04c6\ufb4f\u0582\u1683\uaa6f\u10d3\u017a": [], "\u1388": 308, "\u138c\u141c": [], "\u138d\u08a0\u079e": 308, "\u138e": 308, "\u138f\uabde\u18f5": [], "\u13f8": 308, "\u13f8\u2c74\u1d2d\u01da\u03c0": [], "\u13f9": [], "\u13fb\u0a88\u144b": 308, "\u13fc\uaa09\ua1fa\ufeda\u2111\u1a32": 308, "\u1402\ua339\ud7ed\ua015": 308, "\u1404\u0f44\u1c16": 308, "\u1404\ua925": [], "\u1406": 308, "\u1408\u010b\ua0e2\ua55d\u0c8a\u0148\ud7e7": [], "\u1408\u18bf": 308, "\u1409": [], "\u140b": [], "\u140d\ua081\u1796\u1d78": [], "\u140e\u04ce": [], "\u1410\u1d72": 308, "\u1414\ufcfb\u19b2\ufb26\u1348\ufec1\u0763": [], "\u1415": [], "\u1416\u1312": [], "\u1417\u12c9\ua42d\ufd2a\u1d95\ua4ee": 308, "\u1419": [], "\u141a": 308, "\u141b": [], "\u141c\ua430": 308, "\u141d\u1124\u0431": 308, "\u141d\u30e9\u158f\u1116\u0d7c\ua0b3\ua6ab": [], "\u141e\u04e5\u2dab": 308, "\u141f": 308, "\u1420\u30ed\u1546\u0d9f\ud7da\u0432": 308, "\u1421": [], "\u1426": [], "\u1429\u1901": 308, "\u142b": 308, "\u142c\u00f8\u172b\uab25": [], "\u142e": 308, "\u142f\uffb9": [], "\u1430": [], "\u1435\u1222\ufed6\u1524": 308, "\u1437\u1f55\ua055": [], "\u1439": 308, "\u143c\u1d87": 308, "\u143f": 308, "\u143f\ua161\ufb63\ufb9a\ufd0c\u0a1e": [], "\u1440": [], "\u1441": [], "\u1444\u1d10\ua76f\ufc73\u02c6\u1a3b": 308, "\u1445": [], "\u1445\ufc36": 308, "\u1447": 308, "\u1448\u1169\u19c1\u1602": [], "\u144c": 308, "\u144d": 308, "\u144e\u12d8": 308, "\u144f\u0157\ud7cc\u0c0c\u04bb\uab2c": 308, "\u1451\u1aa7\ufd58\u1423\ua12e\u00e4": 308, "\u1451\uab8c": [], "\u1454": 308, "\u1455\u0576\u1f07\ua31a": [], "\u1455\u2c81": 308, "\u1457\u12d9\ua02a": [], "\u1457\u18c8\ufb53\u1f30\u15f5\u1fa4\ua699\u06c6\u1ee5": 308, "\u1458\u09a8\ua0ef\u06a5\u1658\u00f5\u0845": 308, "\u1459\u090d\u1557\u043a\u0c93": 308, "\u145b\u30b3": 308, "\u145c\ua7fa": [], "\u145d": [], "\u145e": [], "\u1460e": [], "\u1463": 308, "\u1463\ua985": [], "\u1465\ufb3b": 308, "\u1466": [], "\u1468\u2113\u1bbf": 308, "\u146b\u0185\ufc25": 308, "\u146d": [], "\u146e": [], "\u146e\ua855": 308, "\u146f\ufd76\ua2b5": 308, "\u1470": [], "\u1472\u2d05\ua0a2\u0f55\u1021": 308, "\u1474\u1647": 308, "\u1477\u1a4f\u184a\u1076\u0d91\u057c": 308, "\u1478": 308, "\u1479\u1d42": 308, "\u147a\u1f86": [], "\u147c": [], "\u147d": 308, "\u147e": 308, "\u147f\u1a0b\uab91\u1513\u1c6d": 308, "\u1480\u04d1": [], "\u1480\u2c61": 308, "\u1482\u2119": 308, "\u1486\u0aa8\u1b95\ua5b8": 308, "\u1486\ufe76\ufd6d": [], "\u1487": [], "\u1489\u0213": [], "\u1489\u0c23\u2c79\u0142": 308, "\u148a": 308, "\u148b": [], "\u148d\u1eaf\u183d\u021d\u130f": [], "\u148e": [], "\u148f": [], "\u1490": 308, "\u1491\u044c": 308, "\u1491\u2c79": [], "\u1492": [], "\u1493\u1ed7\u1e01\ua1c5\ua32f\uffb2\ua07e": [], "\u1493\ua346\u091d\u158d\ua45f": 308, "\u1498": 308, "\u149c": [], "\u149d\ufd5a\uabb2\ua480\u0f5c": [], "\u149e\u162d\u1b97\u1c4e\u0858": 308, "\u149f\u0854": 308, "\u14a1": 308, "\u14a6\u0e03": 308, "\u14a7": [], "\u14a8\u0559\u1836\ufe94\u090b\u025e": [], "\u14a8\u0b1e": 308, "\u14aa": 308, "\u14ab": [], "\u14ac\u115d\u15a1": 308, "\u14ad\u15c9\ua5ba\u18b2\u092b\u0582": [], "\u14ae\u1403": [], "\u14ae\uffd6": 308, "\u14b1": 308, "\u14b3\u012f": 308, "\u14b5\ua424": 308, "\u14b6": 308, "\u14b6\u045a\u1c01\uabb6\u0ab3": [], "\u14b7\u15b8\u02cc": [], "\u14b8\ua69b\ufb9f": 308, "\u14ba": 308, "\u14bc\u31f0\u1f23\uaa1f": [], "\u14bd\ua45c\ua20f\ufccd": 308, "\u14c1\u0716": 308, "\u14c2": [], "\u14c3\u12aa": 308, "\u14c4\u3096\u09a3": [], "\u14c5\u1d64": 308, "\u14c6\u16a4\u0477": [], "\u14c6\ua197\ua450\ua25d": 308, "\u14c9": [], "\u14cb\uff7d\u0229\u0146\u0a39": [], "\u14cc": [], "\u14d0\u1677\uab3d\ua16a\u1eb7": [], "\u14d1": [], "\u14d4\u11f1\ua3cc": [], "\u14d5\ufb68": [], "\u14d8\u1028\u1b1b\u1f97": [], "\u14d8\ufb63": 308, "\u14d9": [], "\u14db": 308, "\u14dd\ufc08": [], "\u14de": [], "\u14e0\u1473": 308, "\u14e1\u047f\u11dd": [], "\u14e3": [], "\u14e8\u1383\u1171\u1823\ua57d\ufe7a\u1b1f\u1900\u0285\u03c3\ua813": [], "\u14e9\u0cac\ua57f": 308, "\u14ea": 308, "\u14eb": 308, "\u14eb\u2cc1\uaae0": [], "\u14ed\u116e": 308, "\u14f1\ufdf7\u0579\ua295\u185d\u0568": 308, "\u14f4": 308, "\u14f6\u090b\u15be\u1e59\ua915": 308, "\u14f7\u2c42\u15c0": 308, "\u14f7\ua659\ua3b8\u1711\u14fc\ua0c8": [], "\u14f8": 308, "\u14f9\u196a\u1f00\u01ed\ua3fd\ufd10\u1731": [], "\u14fa\ua5ad\ua34d\u02af\ua08c\ufba8\ua0ea\u142d\u11aa": 308, "\u14ff\u1880\u01e1\u0856": 308, "\u1500": 308, "\u1502": [], "\u1504": 308, "\u1507\u0b32": 308, "\u150a": [], "\u150b\u08ac": [], "\u150d\ua308": [], "\u1510\u1da8\u1f75": [], "\u1514\uff42": 308, "\u1515\ua65b": 308, "\u1519": [], "\u1519\ua38e\u0f54": 308, "\u151b": [], "\u151e\uaa16\ufd28": 308, "\u151f": 308, "\u1520": [], "\u1522": [], "\u1524\uaaaa\u1c05\ua3fb\uffa5\ufb61\u068c": [], "\u1526\u12d1\u118f\ua84b\ua9ef": 308, "\u1527": [], "\u1528\u152d": 308, "\u152b\u1346\u09ad": [], "\u152d": [], "\u152f\u01d0\u1958\ua382\u0c27\u113f": [], "\u1530": [], "\u1531": [], "\u1532": [], "\u1533": 308, "\u1534\u072c": [], "\u1534\u16aa": 308, "\u1535\ua489": [], "\u1537\ufc22\u05e4\u1a21": 308, "\u1539": 308, "\u153a\u15d5": [], "\u153b\u1b99\ufb96\u1e33\ua974\u1ec5\u31b6\ua2bd\uab44": [], "\u153d\u0979\u19c0\u04d1": 308, "\u1543\u0a2f\ufc84\u071c": 308, "\u1545\ua91e\ua5f1\ufd5f\u1c04": 308, "\u1547": 308, "\u1547\ua131\u13fc": [], "\u1548": 308, "\u1548\ua3e9": [], "\u154a\ua69b": 308, "\u154b\u1f14": 308, "\u154d": 308, "\u154f\ufdfa": 308, "\u1551": 308, "\u1552\u1ef9\ua037\u0753": 308, "\u1553\u2c55": [], "\u1554": 308, "\u1555": 308, "\u1556\u0481": 308, "\u1559\u1833\ua9e6\ufc7f\ufce6\uff9f\ua6b8\ua81c\u0644\u057b\u0254\u0211": 308, "\u155b\u160b\u1227\u09f0\u0e9c": 308, "\u155c\u0d3d\ufc2a\u3151\u18aa": [], "\u155c\ua9b2\u0d7c\u1e75\u00fc\u04c2\u14f9": 308, "\u155d\u2092": [], "\u155f": [], "\u1560": 308, "\u1562": 308, "\u1562\uff49": [], "\u1563\u1907\u1d3c\ufb4a": 308, "\u1563\ufbad": [], "\u1565": [], "\u1566\u305c\u101d": [], "\u1566\u30d6\ufdc1": 308, "\u1567": 308, "\u1568\u116e\u1b83": [], "\u156a": [], "\u156a\u2cee\u1296": 308, "\u156b\u1d1a\u0e0e\u0685\u2d53\u3179\ua55e": [], "\u1570\u1831\u3082\u0201\u1205\u15fd": 308, "\u1571\u11eb\u1689\ua335": [], "\u1572\u079d\ufb24\u07cd\u12c3\u2dbe\u1648": [], "\u1574": 308, "\u157b\u131e": [], "\u157d": [], "\u157f": 308, "\u1580": 308, "\u1582\u1699\u16db\u0a1d": [], "\u1583\u185c": [], "\u1584": 308, "\u1585": [], "\u1587\u1c5e\u2cf3\ufca2\u074f": 308, "\u1588\u12ab\u2d1a\u3119\ufd7d": 308, "\u1589": 308, "\u158a": 308, "\u158b\u1436\ua6e1\ua59c\u1708\ufc21\ua693": 308, "\u1590": 308, "\u1592": 308, "\u1594": 308, "\u1596": 308, "\u159a\u04ce": 308, "\u159c": [], "\u159e": 308, "\u15a0\ua1f8\u1195": 308, "\u15a2\u0766\u1f77": 308, "\u15a3": [], "\u15a4": 308, "\u15a5\ua885\ua5b2\uabb4\u2c49": 308, "\u15a8": 308, "\u15a9": [], "\u15aa": [], "\u15ac": [], "\u15ac\ua90a\u0a95\u0121": 308, "\u15ad\ufca7\u1e7f": 308, "\u15ae": 308, "\u15b0\u2d16": [], "\u15b5\u1e8d": 308, "\u15b7": [], "\u15b7\ua41d\u010b": 308, "\u15b9": 308, "\u15bb": 308, "\u15bc": 308, "\u15bd\ua5b7\u06d1": [], "\u15bf\u127b": 308, "\u15bf\ua91b\u1f94": [], "\u15c1": 308, "\u15c3\u1f53": 308, "\u15c6": 308, "\u15c7\ufc77\u0db0\u1b89": [], "\u15c8": 308, "\u15c8\u159d\u063b\u16d8\ua50c\ufec8": [], "\u15c9\u0dba\u1d11": 308, "\u15cb\u1f76\u0247": [], "\u15cc": 308, "\u15ce\ua596\ud7ec\u134d": [], "\u15d3\uab5d\uffb6": [], "\u15d5": 308, "\u15d8": [], "\u15d9": 308, "\u15da\ua5ae\uff69": [], "\u15dc\ua7a3\u11a5\u3174": 308, "\u15dc\ufdc1": [], "\u15dd": 308, "\u15de\u14df\ua8f6\u0438": 308, "\u15e0\u0671\ua91c": 308, "\u15e1\u0c94\uab5e\u1895": 308, "\u15e1\uabbe\u0238\u1176": [], "\u15e2\uabdd": [], "\u15e4": 308, "\u15e5\u1a2b\u0639\ua31b\ua25b\u209c\u06bf\u1688\u0e1b\u2ca5\uff89\u0b3d\u1319": 308, "\u15e5\ufc51\u0c33r": [], "\u15e7\u09ce": [], "\u15e8\u05e3": 308, "\u15e9\u2c66\ua00e": 308, "\u15eb": 308, "\u15ed": [], "\u15ed\u166b": 308, "\u15ee\u1968\ua22d\u1f34\u17a6\u1c5a\u3183\u06cb": 308, "\u15ef": 308, "\u15ef\u04f3": [], "\u15f1": 308, "\u15f2\u0105\u0695\u09b9\u0cb7\u119f\u121e\u1b8a": 308, "\u15f4": 308, "\u15f6": 308, "\u15f7\u14d7": 308, "\u15fc": 308, "\u15fc\ua076\u0f69\ua71c\uaab9": [], "\u1601": [], "\u1605": [], "\u1606": 308, "\u1606\u1ee3": [], "\u1607\u01eb\u1d58": 308, "\u1608": [], "\u160c": 308, "\u160f": 308, "\u160f\u027e": [], "\u1610\ufb9b": 308, "\u1612": [], "\u1615": [], "\u1617": 308, "\u1618\u00e5": 308, "\u1619": [], "\u161b\u16aa\ua8a0": [], "\u161b\ua12a": 308, "\u161c": 308, "\u161d\u14bc\u1ebd": 308, "\u161e": [], "\u161e\ufb85": 308, "\u1621": 308, "\u1623": 308, "\u1624\u0d2a\u1b45\ua26b\u2dae": 308, "\u1625\u318c\ufc71\u2c7b\ua751\u0dae\u16f6\u1a0f\u1481": 308, "\u1627": [], "\u1628\u142d\u31fa\ua1c1\u116c\u052b\ua804\u3120\u03b0": [], "\u1628\ufcb6\ua278\ua576\u1307\ua473": 308, "\u1629\u01dc\u1e4d": 308, "\u1629\ua2cb": [], "\u162b": 308, "\u162b\u0133\u0581\ua293": [], "\u162e\u1bd4\u2096": 308, "\u162f\u1a42\u1d5e\u1527\u1696\uff45\u0b87": 308, "\u1630\u1da1\ufc3a\ua5ec\u17a0\ufc98": 308, "\u1631\ua89f\u03f3": [], "\u1632": 308, "\u1632\u026c\uff83": [], "\u1633\u31a4\ua2d4l": [], "\u1636\ufc2e\ua5e6\u019e\u0b5f\u0188\uab49": [], "\u1637\ua172\u07e4\u04cc": [], "\u1638": 308, "\u163a\ua515": 308, "\u163b": 308, "\u163c": 308, "\u163d\u0789\ua1e7": [], "\u163f": 308, "\u163f\u1f96": [], "\u1641\u195e\u2db8\u01ad\u00e4\u2c59\ua0ef\ua479\ua43d\u1f92\u16a6": [], "\u1641\ufcbd\ua000\u016b": 308, "\u1642\u0146\ufc31\u1270\u0511\u1d0f\ua443\uff58": [], "\u1643\u1db9\ua528": [], "\u1643\ufd12\ua20c": 308, "\u1649": [], "\u1649\u0697\u01a3\u1147\u17a3": 308, "\u164b": [], "\u164c": 308, "\u164d\u2cc3\u06ee": 308, "\u164e": 308, "\u164f\u1a0d": [], "\u1650\ufd5c\u2d3d\ufb73": 308, "\u1651": [], "\u1653": 308, "\u1654\u0dc0": [], "\u1655\ua124\u1b05\u18d5\u0a16\ua266\u158c\u0c59\u145c": 308, "\u1657": 308, "\u1659\ua90c\ua381": 308, "\u165a": [], "\u165d\u18da": [], "\u165e": [], "\u165e\u31f6\uabce": 308, "\u1660": 308, "\u1660\u2c3e": [], "\u1661\u16f2\u1857": 308, "\u1663\u0a24": [], "\u1666": [], "\u1669": 308, "\u166f\u2d12\ua731\u1135\u06a6": 308, "\u1671": 308, "\u1671\ua811\u166f": [], "\u1672": 308, "\u1672\u011d": [], "\u1673\u09dd\ua477\u08b1\u1414\ua887": 308, "\u1674": [], "\u1676\u127e\ua852\u01c6\u07da\u1ecb\u11bd\u03eb\u1217\u12f2": 308, "\u1677": 308, "\u1678\u2ccf": [], "\u167a\ua359\ua391\u043d\u165f\u2c5a\ua005": [], "\u167d": [], "\u1681": 308, "\u1682": 308, "\u1683\ua739": 308, "\u1684": 308, "\u1685\ufbe8": [], "\u1686": [], "\u1686\u1dad": 308, "\u1687\u1681\u091b\u16cc\u3124\u2c5d\u091f": [], "\u1689": 308, "\u168c": [], "\u168c\u1ef3": 308, "\u168e": 308, "\u168e\u12e3": [], "\u1690": [], "\u1690\u0d24": 308, "\u1691\u0621\uab5d\ua1bc": 308, "\u1695\ufcbf\u01f0\ua357\u16c3": [], "\u1696\u0809\u1f40\u1e9f\uff42\u151c\u15f0": [], "\u1699\u07d3\ua741": 308, "\u16a0": [], "\u16a1\u1e37\u010f\uff4a\ua2e3": [], "\u16a3\ufb36\ua274": [], "\u16a5\u04d9": [], "\u16a5\u1e13\u2d20\u03c7\ua5aa\ud7f5\u1d52\ua89f\u1494a\ua29c\u1721\ufdbd\u077e\ufd8a\u1662\u0255\ua047": 308, "\u16a6": 308, "\u16a7\u1387\u1d5b\u00f9": 308, "\u16a9": 308, "\u16a9\u0b14": [], "\u16ac": 308, "\u16ae\u1edb\u2ccd": 308, "\u16b0": [], "\u16b1\u010f\u1990\u092b\u050d": 308, "\u16b4\u099e": [], "\u16b5": 308, "\u16b9\u2d03": [], "\u16b9\ua797": 308, "\u16ba\uff7a\u1600\u199c\ufbb0": [], "\u16be\u1c17\ua177": [], "\u16c0\u1d0c\ua911\u1025\ua3ae": 308, "\u16c1": [], "\u16c2": 308, "\u16c2\u0153": [], "\u16c4": [], "\u16c5\u1e7f": [], "\u16c6\ua872\ufb7a\u0f00\ua057": 308, "\u16c7\ufed4": [], "\u16c9": [], "\u16ca\u1c0c\u2c87\u2c30": [], "\u16cb": [], "\u16cb\u1ecf\ufc88\ua4d5": 308, "\u16cc\u2c8d\u0c21\u115b\u1863\ua505": 308, "\u16cf": 308, "\u16d1\u189c": [], "\u16d1\u3083\ua5f3": 308, "\u16d2\u0183\ua80d": [], "\u16d2\u1840\u0793\u3086\ua1d0\u2d62\u1054\u00e8\ua212\u0242\u07ca": 308, "\u16d3\u0249\u14e7": [], "\u16d4\ua69b\u1d64": [], "\u16d6x": 308, "\u16d7\u2d1e": [], "\u16db\u1ee3": 308, "\u16dd\u156d": [], "\u16de\u1fc3": [], "\u16e0\ua101\u2c36": [], "\u16e1\u1f42\u1e27": 308, "\u16e4\u1f97\u3170\ufb7c\uff48": [], "\u16e5\u15c3\u128c\u158e\u0b1c\u1e79\u077e": [], "\u16e6\u03e5": [], "\u16e7": [], "\u16e7\u0171": 308, "\u16e9\uff44\u0d14\uaac2\u2d34\uaa10\uaa04": [], "\u16f1\u1fa4\u0586": [], "\u16f4": 308, "\u16f5\u3046\u092d": 308, "\u16f6\u126d\u023f\u0ab2\ufc23\u140a": [], "\u16f7": 308, "\u1701\u3051\u03b2": [], "\u1704\u04d1\u16c0\u0718": [], "\u1705\uaa8d\u0ea2\u04b7": [], "\u1706": 308, "\u1707\ua7f9\ua2f3\uff51\u1e6b\ufc74\u00f2\u101f\u1194\u00ba\u0797\u127b\uabd5": [], "\u1709": [], "\u170a\ua769\u0c26": [], "\u170e\uabbf\u1e0d\u06a4": [], "\u170f\uab57": [], "\u1710": [], "\u1710\u1dbe": 308, "\u1711": 308, "\u1720\u30d3\ua54d\ua46a\ufb27\ufed9": 308, "\u1722": 308, "\u1724": 308, "\u1725": 308, "\u1726\u1d59\u0769\ua562\ud7f7\ua50a\ua299\u1d9c\ua329\u03eb": 308, "\u1727": [], "\u172b\ua97c": 308, "\u172c\ufc59\u14fe\uffbe\u1d85\uaa8e\u2d2d\u0374\u31f4\u018d\u1f44": [], "\u172f": [], "\u1740": 308, "\u1741\ufc6f\ua5d9": [], "\u1743\ua2df": [], "\u1744\ua89a\u0d09\u1d1d\u1598\ua29f": 308, "\u1745\ud7e5": 308, "\u1748": [], "\u174a\u1956": [], "\u174b\u0275t\u0e16": 308, "\u174c\u157d": 308, "\u174d\u18b1": [], "\u174e\u14a1\u084d": [], "\u1762": 308, "\u1763\u2138\ua207\ufcb7\u0990": 308, "\u1764\ua4d9\u1d56\ufd67\u1139\u1639\u11b9": [], "\u1766\u00aa\u047f\u09df": 308, "\u1767\u1f83": [], "\u1769": 308, "\u176b\u1528": [], "\u176c\u2149\u024b\u2d0e": [], "\u176f": 308, "\u176f\u2d23\ua1e3\ua256\ua09f\u3033\u08a3\ufb59\u0988": [], "\u1780\u04c4": [], "\u1783\u182d\u03cd": [], "\u1785": 308, "\u1786\u0d10\u1f96\u3041": 308, "\u1787\ufdba\uaa6b\ua383": 308, "\u1788": [], "\u178a": [], "\u178c": 308, "\u178d": 308, "\u1790\ufbd8": 308, "\u1793": [], "\u1795\u0242\u1230\u1647\u028c\ua86b\u00aa\u07a4": [], "\u1795\ufb6d": 308, "\u1797": 308, "\u179a\ua25e\ua513": 308, "\u179b\u15c2\u095b\u1f22\ua401": [], "\u179c": [], "\u179e": [], "\u17a0\ua743\uaa74\u044b\ua51f\u037a": [], "\u17a1": [], "\u17a1\ufd7f\ua508\u0997\ua8b3": 308, "\u17a2\u0d06\uab2b": 308, "\u17a3\u1a00\ua03f": [], "\u17a4": 308, "\u17a8": [], "\u17aa": [], "\u17ae": 308, "\u17b0\u07df": 308, "\u17dc\u0920\u1e31\u15f7\ua33c": [], "\u1820": 308, "\u1820\ua2f6": [], "\u1822\u2c4f\ua258": 308, "\u1824\u30b1\u067c\ua17f": 308, "\u1825": 308, "\u1826": 308, "\u1827": 308, "\u1829\u1a2e\u1912\u1d09": 308, "\u182a": [], "\u182b\ua80d\u1518\u0634": 308, "\u1830\u2dd3": [], "\u1830\ua5d9": 308, "\u1831\u31a1\u0240": [], "\u1832": 308, "\u1835\u19b8\u0980": [], "\u183a": [], "\u183e\ua71f\u100e\ua860\ufca9\ua3db\ufcb9\ua8f7\uabaa\u0a72": 308, "\u183f\ua6e2\ufed7\uffba\u155b\u1eb1": [], "\u1840\u145a\u02bf\ufb67": [], "\u1841\uff6d\ua569\u0722\u0933\u2d40": [], "\u1842\u199f\u1d29\ua24b\u3127\u0811": [], "\u1842\u1c10": 308, "\u1844\u1214\u0236": 308, "\u1846\u3076\u1d20\uffdc": 308, "\u1848": [], "\u1849\ua8f4\u1474\u1e57": [], "\u184a": [], "\u184c\u1122\u111f\u0105\ua89d\u0149": [], "\u184f": [], "\u1850\u30e1\ua507": [], "\u1851": [], "\u1852": 308, "\u1855\u03ac": 308, "\u1856\u189b": 308, "\u1857\u1128\u0c38": [], "\u1859": [], "\u185a": 308, "\u185b": [], "\u1860": [], "\u1860\u0511\u0f41": 308, "\u1862": 308, "\u1862\u057f": [], "\u1864": 308, "\u1865": [], "\u1867": 308, "\u1868\ua0e9\ua23b": [], "\u1869\u1551": [], "\u1869\u3063\ufd0f\u30d5\u0279\ua886\u1292": 308, "\u186a\u0e28\u084c\u17a9": [], "\u186e": 308, "\u186f": [], "\u1870\u027c\u30bd\u1e6f": 308, "\u1871\uaa85": [], "\u1872\u1c20\u3058\ua002": [], "\u1873\ua217\ua2bf\u101b\ua747": [], "\u1876": [], "\u1877": [], "\u1880\ua470\ua718\u2c68\uaa6c\uab20": [], "\u1881": 308, "\u1882\ua0c3\u02a6\u165b\ua240\ufe9a": 308, "\u1883": 308, "\u1883\ufe91\u0ca5\u1d18\u178e\u1219": [], "\u1884\u2cdb": [], "\u1887": [], "\u1887\u0c39": 308, "\u1888\ua729\u04d3": [], "\u188a\ua224\u0177\ufd20\u11f8\u1337": [], "\u188b": 308, "\u188e": 308, "\u188f\u1768\ua32d\u0561\u12a7\ua078\u090d": [], "\u1890": [], "\u1890\ua287": 308, "\u1891\ua03f": 308, "\u1892\u189e\u07a3\uab85\ua155": [], "\u1893": 308, "\u1895\u1d80": [], "\u1896": [], "\u1899": 308, "\u189a\u0675\u0261": [], "\u18a0\u03bd\u14c9": 308, "\u18a3\u1e89\u138a": 308, "\u18a4\ufcb7\u18b7\uff4c\u1b2d": [], "\u18a7\u00e6": [], "\u18aa": 308, "\u18b1\ua064\ua972": 308, "\u18b3\ua458\ud7d8": [], "\u18b5": [], "\u18b6\u0455": 308, "\u18b6\ua6b9": [], "\u18b7\u2c93\uaa8d": 308, "\u18b8\u1173": 308, "\u18ba": 308, "\u18bb\uaa92": [], "\u18bc\u0d34": 308, "\u18bc\ua30d\uab75\ua524\ua05e\u1008\u3174": [], "\u18be\ufca8\ua10b": 308, "\u18bf": [], "\u18c1\u1e3f": 308, "\u18c2": 308, "\u18ca\u14bf\ua105\ua1eb\u07e9\ua35f\u1960\ua29b\ua61f\u18cf\ufb57\uff8c\ua37b\uff4a\u315a\u1a01": 308, "\u18cb\u1d23": 308, "\u18cb\ua99d": [], "\u18cc\ua55a\u0c34": [], "\u18cd\ua00c\ua697": 308, "\u18ce\u0b8f\u0972": [], "\u18cf": [], "\u18d0\ua613": 308, "\u18d0\ufdf4": [], "\u18d1": 308, "\u18d2\u195c": 308, "\u18d4": [], "\u18d7\ua28b": [], "\u18d8\u046f\ua393\u0434": [], "\u18d9": [], "\u18dd\u1d73\u03b8\u091e\ua851": 308, "\u18e0": [], "\u18e1": 308, "\u18e3\u1c6c": 308, "\u18e8\u0272": 308, "\u18ea": 308, "\u18eb": [], "\u18ec": 308, "\u18ec\ua2f7\u31af\u0e19": [], "\u18ed\u310d": [], "\u18ef\u04a9\u0457\ua93b\ufcc0\uff8e": [], "\u18f0": [], "\u18f1\u0e2d\uffd7\u1389\ua78c": 308, "\u18f3\u1517": 308, "\u18f4": [], "\u1900": 308, "\u1902\u133c\u0761": [], "\u1903\u1520\u1633\u1f03": 308, "\u1904\u312c\u0811": 308, "\u1906": 308, "\u1908": [], "\u1909": [], "\u190a": [], "\u190c\u1ebf": [], "\u190d\uab87": 308, "\u190f": [], "\u1910": [], "\u1911\ua396\ufc09\u1054\u1e2b\u1f74\u043c\u1113\u1e67\u2138": [], "\u1913\ua0d2\ua544": [], "\u1914\ua64f\uff47\u164f\u2d82": 308, "\u1915": [], "\u1916": 308, "\u1917\u2dae\ua4da\u0842\ua99e\u1f24\u1984\u0d1a\ua5f4\u06c4\u1246": [], "\u1918": 308, "\u191a\u03e1": [], "\u191c\u091c": [], "\u191c\ua45a\u037c": 308, "\u191d\u0292": 308, "\u191d\u0724\u14fd\ua415\u04b9\u1117\ua76d\u044f\u00e5": [], "\u191e\ufdfa\u0140\u049f\u07e7": [], "\u1952\u1fa6\ud7ce\u1538": [], "\u1952\u2d1f": 308, "\u1954\ua5be\u1bd6\u2c3e\ua1e8\u15ca\u0d0f": 308, "\u1955\ua1fb\ufe95\u1d3e": [], "\u195b\u1272": 308, "\u195c": [], "\u195e\ua1ab": 308, "\u195f": [], "\u195f\u1d33\u1d69\ufdbf\u0852": 308, "\u1961": [], "\u1962\ua236": [], "\u1964": 308, "\u1965": 308, "\u1965\u14b2\u0710": [], "\u196b": 308, "\u1972": 308, "\u1973": 308, "\u1974\ua244": [], "\u1980": [], "\u1982": [], "\u1985\ua575\u1595\u0461\u2c3b": 308, "\u1986\u0461\u0521\u10d9\ua5ea\ua737\ufb5d\ua025\u0209\u1d8d\u1462": 308, "\u1988\ua50d\u3093\u165d\u057b\ufd00\uabdb\u1ee3": 308, "\u1989": [], "\u198b": 308, "\u198c": [], "\u198d": 308, "\u198e": [], "\u198f\u075f\ua538": 308, "\u1990\ua58d\ua442h\u0a9c\u1702": [], "\u1991\u099d\u028c": 308, "\u1995\ua062\u090e\u1d47\ufcfa\u04fd\ua0d0": 308, "\u1996\u16f8\ua5ec": [], "\u1997": [], "\u1997\ufd01\u2d38\ua265\u1f74\u0458\uaa99\u1100": 308, "\u199a": [], "\u199b": 308, "\u199f": 308, "\u19a0": 308, "\u19a1\u12eb\u18b4": [], "\u19a2\ua369\u11c5k": 308, "\u19a3": 308, "\u19a6": 308, "\u19a7": 308, "\u19a8": [], "\u19a8\u214e\ua0d5": 308, "\u19aa": 308, "\u19b0\u1d2f": 308, "\u19b2\ufed8\ua5d7\ud7fa\ufcee\u30ad": 308, "\u19b3\u1b23": 308, "\u19b4": [], "\u19b6\u1b18": [], "\u19b8\ufc1f\uaba5\ua013\ua52e\ua551": 308, "\u19b9": 308, "\u19ba\uaa08": [], "\u19bc\ua144\ua447\u1a47\u15bc\u03ad\u024b\ua411": [], "\u19c2\u161c\u063a": [], "\u19c4": [], "\u19c5": 308, "\u19c7\u00df": [], "\u19c8\uab59\ufd2d\u16b4": 308, "\u19c9\ua6e3": [], "\u1a02\ud7e3": 308, "\u1a03": 308, "\u1a03\u0682\u0847\u0f65": [], "\u1a04\u0bae": [], "\u1a04\u0e24\u1a14\u3139": 308, "\u1a05": 308, "\u1a06\u11dc": 308, "\u1a06\ufdbc": [], "\u1a09": [], "\u1a0a\u1a16\u1761": [], "\u1a0d\ua587": 308, "\u1a0e\u011d": 308, "\u1a0f": [], "\u1a10\u2c7c": [], "\u1a12\ufdc3\u213f": 308, "\u1a13\u1970": 308, "\u1a14\u3168\ua575": [], "\u1a20": 308, "\u1a21\ua844": [], "\u1a22": 308, "\u1a24\u196d": 308, "\u1a24\ua522\ud7c0": [], "\u1a25": [], "\u1a27": 308, "\u1a27\u04b9": [], "\u1a28\uab9a\uaa05\u0d37": [], "\u1a2a\u15ea": 308, "\u1a2c\uaa8a": 308, "\u1a2f": [], "\u1a30": 308, "\u1a31": [], "\u1a32\u30bf\ufc66": [], "\u1a35": [], "\u1a37": 308, "\u1a39\uaae6\ufeb1\ua3ce\u12f6\ua165\u050b\u19a2": [], "\u1a3a": 308, "\u1a3b": [], "\u1a3c\ua088": 308, "\u1a3d\uaa1a\ufc4b": [], "\u1a3d\ufd11\u140d\u1d8e": 308, "\u1a3f\u2d25": 308, "\u1a40\uffd3\u151e\u1bdb\u1bba": [], "\u1a41": 308, "\u1a42": [], "\u1a43\ufcad\u166a": [], "\u1a44": 308, "\u1a46\u01cc": [], "\u1a46\u106f\u0850\u3062": 308, "\u1a48\ua4f3\u1964": [], "\u1a49": 308, "\u1a4b\u050d\u092e": 308, "\u1a4c\u108e": 308, "\u1a50\u16a4": 308, "\u1a51": [], "\u1a51\ud7ce\u311f": 308, "\u1a53": 308, "\u1a54": 308, "\u1a54\ua09e\ua75f": [], "\u1aa7\uab14\ud7b2\u18b0\u1dbb\uabcd\uab8a\u0298\ua306\u14c0": [], "\u1b06\u1917": 308, "\u1b08\u0d87\u195d\uff68\u1e63\u0377\u00f9": [], "\u1b09\ua2ad\ua910": [], "\u1b0b\u063e\ua20b\u2d2d\u15e6\u3186": 308, "\u1b0b\u3177": [], "\u1b0c\u2d87\ua1c5\ua535\ua883\u1051": 308, "\u1b0c\ufe93\ua26b": [], "\u1b0d": 308, "\u1b0e\u026d": 308, "\u1b15\u31ad\u1db0\u2d35": [], "\u1b15\ufe99\ua1f4": 308, "\u1b19": 308, "\u1b19\ua2a6\ua6d1": [], "\u1b1a": 308, "\u1b1b\ua116": 308, "\u1b1e": 308, "\u1b1e\ua44c": [], "\u1b1f\u1b29": 308, "\u1b21": [], "\u1b22": 308, "\u1b24\u2c6c\u0155\ua304\u0a89\ua7a5\ufc82\u30df\u14f3": [], "\u1b26": 308, "\u1b28\u163d\ua3bd": 308, "\u1b2a\uabc0\ufd0b": 308, "\u1b2b": [], "\u1b2b\u0567": 308, "\u1b2d": 308, "\u1b30\u117c": [], "\u1b31": [], "\u1b32\u30f3\u01cc\u1f10": [], "\u1b33\ua0df\u1f75": 308, "\u1b46\ufd99": [], "\u1b48": [], "\u1b49": 308, "\u1b49\ud7d5\u0e99": [], "\u1b4a\u056d": 308, "\u1b4a\ufb92": [], "\u1b84": [], "\u1b85": [], "\u1b88\uabb3": [], "\u1b89": 308, "\u1b8a\u196b": [], "\u1b8b\u1888\ua641\ua242": 308, "\u1b8c\u05d5\u0a19": [], "\u1b8d\ua6b2\ua78c\u1723\u31a9": [], "\u1b8f\u3074": 308, "\u1b90\ua445\u1989\ua5f6\ufc00\ua30d": 308, "\u1b92": 308, "\u1b94\u1460\u3116": 308, "\u1b98\u1c7c\u03f8\u2c52": [], "\u1b9b": 308, "\u1b9d": [], "\u1b9e\u2128\u0523": [], "\u1b9f": [], "\u1b9f\ufb44\u30ef": 308, "\u1ba0": [], "\u1baf": 308, "\u1bbb": 308, "\u1bbc": [], "\u1bbd": [], "\u1bbe\ufb2a\u11a3\u0452": 308, "\u1bc1\ua890": [], "\u1bc1\uaa6d\u1640\ua5ce": 308, "\u1bc4\u0467\u1850": 308, "\u1bc5": [], "\u1bc5\u3122\ua0cb\u1105": 308, "\u1bc6": [], "\u1bc6\u12f5\u118d": 308, "\u1bc7\u1efb\u0435\ua5c4": [], "\u1bc7\ua2ed": 308, "\u1bc8\ufca3\ufda8\u0eb3\ua3e9\ua519\u17dc": 308, "\u1bca\u05e9\ua13f\ud7bc\ufd7c\u015f\u18d2\ud7db\u19a9": [], "\u1bcb": 308, "\u1bcc\u1fe4\u0259": 308, "\u1bce": [], "\u1bce\ufb03\ua52d\ufca5\u3047\ua96c": 308, "\u1bd0\ua097": 308, "\u1bd1": [], "\u1bd1\u12e6": 308, "\u1bd2\u1065": 308, "\u1bd3\ua53a\u1274\ua44b\ua086": [], "\u1bd6": [], "\u1bd7": 308, "\u1bd8\u16ce": 308, "\u1bda": [], "\u1bdb": 308, "\u1bdd\u1338\u0211\ua1d3": [], "\u1bdd\u1ee9\ufec9": 308, "\u1bde": 308, "\u1bdf\u11ae": [], "\u1be0\uaa44\u1d2c": [], "\u1be1\ua0bb\ua0b0\u0b95\u141b\u0e9e\u07d8\u010f": 308, "\u1be2\ua18b": [], "\u1be4\u2ca1\u1e07\u1998\u2d5e\ua504": 308, "\u1c02\u2cd3\u0778": 308, "\u1c06\u16d8": 308, "\u1c07\u1d92": 308, "\u1c09\u11b0\u2da5\u0ea3": 308, "\u1c0a": 308, "\u1c0b\u1532\ua4ed\ua2de\u14c7\ufcb2\ua32a\ua427": 308, "\u1c0e": [], "\u1c10\u2da9\u045e": [], "\u1c12": 308, "\u1c13\ufc7c": [], "\u1c15\u0848\ua541\ua51c\ufd9c\u1799\u18e2": 308, "\u1c16": [], "\u1c19\u1e0f\u064a": [], "\u1c19\uab0d": 308, "\u1c1c": [], "\u1c1e": 308, "\u1c20": 308, "\u1c22": 308, "\u1c23\ua6d3\ua299\u0d7f": [], "\u1c4f\uff88": [], "\u1c5a\u06c9": [], "\u1c5b\u04e7\ua224\u1f00": 308, "\u1c5c\u30b7": 308, "\u1c5d": [], "\u1c60\u0b28": [], "\u1c61": 308, "\u1c62": 308, "\u1c62\ufd55": [], "\u1c63": 308, "\u1c64": 308, "\u1c67": 308, "\u1c68\u012d\u1d76\ua2f0\u117a\u18e2": [], "\u1c6c\ua85a\u212d": [], "\u1c6d\u12e0\u0580": [], "\u1c6f": [], "\u1c71": 308, "\u1c71\u2c44\u18dd\ua128": [], "\u1c72": [], "\u1c72\u315b\u1a4e": 308, "\u1c75\u1694": 308, "\u1c75\ufb76": [], "\u1c76\ua821\u0a10\u0d0c\u1f95\ufb14\u014f": 308, "\u1c77": [], "\u1c78\ud7d0": [], "\u1c78\uff4f": 308, "\u1c7a\ua26d\u3182\u31ac": 308, "\u1c7d": 308, "\u1cf0": 308, "\u1cf1\ufd8d\u056b": [], "\u1cf2\u12be": 308, "\u1cf2\u1d05\ufd7f\u01c2\ua084\ufbf2\ua6de": [], "\u1cf3\u0151\u179c": 308, "\u1cf6": [], "\u1cf6\u1ed3\u1f84": 308, "\u1d00": 308, "\u1d00\u00e7": [], "\u1d01": 308, "\u1d01\u1339": [], "\u1d02": [], "\u1d03\u084f\ua39b\ua41e\u10d9": [], "\u1d04": [], "\u1d04\ua888\u0678": 308, "\u1d05\u1e39": 308, "\u1d06": 308, "\u1d0a\u1f21\ua4e7": [], "\u1d0b": [], "\u1d0c\u0b92\u1bd9": [], "\u1d0f\u1fd0\u100c\u025b": 308, "\u1d11\uab59\ufd81": [], "\u1d12\u012d": 308, "\u1d14": [], "\u1d15": 308, "\u1d16": [], "\u1d16\u1f60": 308, "\u1d17": 308, "\u1d17\u1e25\u2c3a\u3133\u1567": [], "\u1d19": 308, "\u1d1b": [], "\u1d1b\ua563": 308, "\u1d1c\u1d09": [], "\u1d1c\ua4de\ua93b\u1ff4": 308, "\u1d1e\u0da5\u00fb\u2daa": 308, "\u1d1e\ua856\u1655\u1275\u15d9\u045e\ua0ed\ua1f6\u0d1e\ua6c0\u0642": [], "\u1d21\u12f2\ua0a1": [], "\u1d22\u0e0b\uff53": [], "\u1d23\ufb6c\u3092\ua761": [], "\u1d24": 308, "\u1d26": 308, "\u1d27\u1651\u0260\u062f": 308, "\u1d28\u1f83\u1449\u0c96": [], "\u1d29": 308, "\u1d2a\u2d61": 308, "\u1d2b\u14c8": 308, "\u1d2c": 308, "\u1d33\u0497\ua0eb\ua325": [], "\u1d34\u12be\u1770\u0b25\u0977\ua731\ufcea\u1fa1": [], "\u1d35": 308, "\u1d3b": 308, "\u1d3e\ua2a3\u0843": 308, "\u1d41": [], "\u1d41\ufb6a\u03cd\u0f42": 308, "\u1d44\u2dc8": [], "\u1d44\ufd8f\u1615\ua7a9\ufc91": 308, "\u1d45\u14fb\u0459": 308, "\u1d46\ufc5a\u2d87\ufc7d\u10ec": [], "\u1d47": [], "\u1d48": [], "\u1d49\u1554": [], "\u1d4a\u0b2e\u1e2f\ua394\ua794": [], "\u1d4c\u1d13": [], "\u1d4d\ufd1b\u043f\u1415\ua0c1\ua1b8": 308, "\u1d50": 308, "\u1d51\ua79d\u15e9": [], "\u1d53\u1e71\ua3c6\ua54f\ua602\ua343\u056a": 308, "\u1d54": [], "\u1d5d": [], "\u1d5e": [], "\u1d5f\u2d5f": [], "\u1d60\ua083\u2dd9\u10fe\u112d\ufbef": 308, "\u1d61\u1ff2": 308, "\u1d67\u174c\ufd9c\uaa63": [], "\u1d68\u077a": 308, "\u1d68\u1560\u1594": [], "\u1d69": [], "\u1d6a": 308, "\u1d6c": 308, "\u1d6d": [], "\u1d6e\ua1d1\u184d": [], "\u1d71": 308, "\u1d74": [], "\u1d79": [], "\u1d79\u31ab": [], "\u1d7a": [], "\u1d7c\ua1ce\ua854\ufb15": 308, "\u1d7d\u0521": 308, "\u1d7f": [], "\u1d80\ua37a\u0444": 308, "\u1d81\u0d9e": 308, "\u1d82\u01e5": 308, "\u1d83": [], "\u1d84\uaba0": 308, "\u1d86": 308, "\u1d87\u0d1b\ua589\u1b0e\u2c33": [], "\u1d88\u0b2a\ufebc\ufcc7": [], "\u1d8a\ua611": 308, "\u1d8b": 308, "\u1d8c\u159d\ua309\u1179": 308, "\u1d8d\u2caf": [], "\u1d8f": [], "\u1d90\u2da6\ua2eb": 308, "\u1d91\ua86d\u2d18": 308, "\u1d92": [], "\u1d94\ua1ba\u12f3\u0641": 308, "\u1d97\ua102\u0a05\u11c7": 308, "\u1d98\u0f67\u0908\ufd24": [], "\u1d99\ua208": [], "\u1d9b\u0497\u057d\u2dce": [], "\u1d9d\u00f5": 308, "\u1d9f\ua2b7\ufe80\uab64\u0abd": 308, "\u1da2": 308, "\u1da3": [], "\u1da4\u1584\u11c1": [], "\u1da4\u1c69": 308, "\u1da6\u09af\u0cab\ua453\u16cd\u2d91\u15d2\u1212\u1b18": 308, "\u1da7\u1791\u1302\u2d21\ufccd\u2d12": [], "\u1da9\ua5f9\u1e87\ua693\u2cbfw\u2d37\u1e11\ufc57\u1027\ua5d0\u0167": [], "\u1daa": 308, "\u1dab\u1f07": 308, "\u1dac": [], "\u1dad\ua428": [], "\u1db1\u1513": [], "\u1db2\u1335\u078c\u31a7\u03e7\u311e\u1b27\ua1c3\u1598\ua405\uaa1b\u1f7b\u1781": [], "\u1db2\u1f32": 308, "\u1db4\u1eef": 308, "\u1db4\ud7cb\u1424\u2097\uaa6e\u198b": [], "\u1db6\ua27e\u15f9\u1912": [], "\u1db6\ufc6e": 308, "\u1db8": 308, "\u1db8\u18dc": [], "\u1db9": 308, "\u1dba\ua566\u0441\u0c92\u1320\uff89\u11c5": [], "\u1dbf\u0765\u122b\u16e2": 308, "\u1dbf\ua4f4\u0e30\ua10d": [], "\u1e01": [], "\u1e01\ua028\ua187\u1c03\u0155": 308, "\u1e03\u1a11": 308, "\u1e03\u30b9": [], "\u1e03\ufb73": [], "\u1e05\u02ca\ua0d2\u079a\u03b5": 308, "\u1e05\u16f7\u31fe\ua9eb\ua1d2": [], "\u1e07\ua1ae": 308, "\u1e0b": [], "\u1e0b\ua39f": [], "\u1e0d": 308, "\u1e15": [], "\u1e15\ua176\u0111\u1892": 308, "\u1e15\ud7b1": [], "\u1e17": 308, "\u1e17\u125b\u2c9b\uab79\u31b4\ua6b0\u1585": 308, "\u1e1d": 308, "\u1e1d\ufc19": 308, "\u1e23\u0697\ua05c\u1464": [], "\u1e23\u1875\u2c6c": [], "\u1e23\u18bd\uab3a": 308, "\u1e25\ua052": 308, "\u1e27\u12ff\u1431": [], "\u1e2b\u0587\ua733\ua985\ufc60\uff85\u0aa1\u1d7e": 308, "\u1e2d": [], "\u1e2f\u00fc\u1601\uab74": 308, "\u1e33\u0260\u0447\ua932": 308, "\u1e37": 308, "\u1e37\u1fa4\u1218": 308, "\u1e39": 308, "\u1e39\u1589": [], "\u1e3b": [], "\u1e3d": 308, "\u1e3d\u31ff\u3121": [], "\u1e3f": 308, "\u1e41": 308, "\u1e41\u2c7a\ua0d0": [], "\u1e45\u2094\u0f50": [], "\u1e47": 308, "\u1e49t\u045e": 308, "\u1e49\u1458\u03e3": [], "\u1e4b": 308, "\u1e4d": [], "\u1e4f\u2c85\ua47e": [], "\u1e4f\ua757": 308, "\u1e51": 308, "\u1e53\ua3e8\ua15b\u14d5\u1d36\u30b0\u184f\ua739\uaa08": 308, "\u1e55\ua123\ua804\ufd70\u0bb5\u1704\ua1b0\u043d": 308, "\u1e59": [], "\u1e59\u317b\u08b0\u0432\ua9e0\u1a2b\u1e75": [], "\u1e59\ua699\u00ec\u1e0f": 308, "\u1e5b": [], "\u1e5b\u077c\u1995": [], "\u1e5b\uab29\ufeb7\u2c6c\uaae7\u14ab\u03bc": 308, "\u1e5d": [], "\u1e5d\u1580": [], "\u1e5d\ua857\ua3c8\u04a5": 308, "\u1e5d\uabc5\ufd82": 308, "\u1e5f": 308, "\u1e61": [], "\u1e61\u1ed1\u0b1c": 308, "\u1e63": 308, "\u1e67\u0dc6": 308, "\u1e67\u1e2d": 308, "\u1e69": 308, "\u1e6b": [], "\u1e6d\u1a3e\u2c77\u10e3\u0aa3\ufd79\u0935\uab52\uaa25\ua5a0\ua096\ua4eb\u122e": 308, "\u1e6f": 308, "\u1e6f\u0a5e": [], "\u1e6f\ua888": [], "\u1e73": 308, "\u1e73\u08ab\u062a\u1bbd": 308, "\u1e75": 308, "\u1e77": [], "\u1e77\u047d\u1d18\u16e5\ufb8f\u04db\ufe81\u2c8b\u2d09\u06a2": 308, "\u1e77\ufcaf\u2c56\u03bd": 308, "\u1e79": 308, "\u1e7b": 308, "\u1e7b\ufd80\u1517\u0432": [], "\u1e7d\u0960\u11b4\ua554": 308, "\u1e7d\u1327\u179b": 308, "\u1e7f\uab65\u100f\ua0c6": 308, "\u1e81": [], "\u1e83": 308, "\u1e85\ua2a3": [], "\u1e87": [], "\u1e87\u0e09\u0a06": 308, "\u1e8b": [], "\u1e8b\u3060": [], "\u1e8b\ua1e1": 308, "\u1e8d": 308, "\u1e8f\u3052\u30ac\u0c36": 308, "\u1e8f\ufdbd": [], "\u1e91": [], "\u1e91\uaa0d\u178c": [], "\u1e95\u04d5\u1e2d": 308, "\u1e95\u1a38": 308, "\u1e96\ua0ea": [], "\u1e97\u1187\ua469\ua4d4\uaa97\u0d05": [], "\u1e97\ua1f7": 308, "\u1e9b": 308, "\u1e9c": 308, "\u1e9d\u11ee\ufc40\ua90a": [], "\u1e9f\u0435\u160d\ua463\ufdf9\u31f2\u310a\u1d6f\ua1dc\u305a\u2d11": 308, "\u1ea1\u1e3d": 308, "\u1ea5": [], "\u1ea7\u1306\u1413\u0d9c\u1e65\ufbd5\ua3f2\ua08e": [], "\u1ea7\uaae2\ua580\ua93d\u14c4": 308, "\u1ea9": 308, "\u1eab": [], "\u1eab\ua366\u134a": 308, "\u1ead": [], "\u1ead\u03c6": 308, "\u1eaf": [], "\u1eb3": [], "\u1eb3\u1e93": [], "\u1eb5": 308, "\u1eb7\u0779\ua09a\uab47": [], "\u1eb9": [], "\u1ebd\ua74b\u0231\u00ed": 308, "\u1ebf": 308, "\u1ebf\u1ea5": 308, "\u1ebf\ufee0\u1d27\u0256\u0766": [], "\u1ec1": 308, "\u1ec1\u02a6": [], "\u1ec3": [], "\u1ec5\u037d": 308, "\u1ec7\u0e14\u16a2": [], "\u1ec9\ufb55\uff83\u2d57": 308, "\u1ecd\ua045": 308, "\u1ed1": 308, "\u1ed1\ua551\u1e47\u0996\u11d2\u191b\ua041": [], "\u1ed3w\u1b94\ua2f5": [], "\u1ed7\u1993\ua687\u30cb": [], "\u1ed9": 308, "\u1ed9\u0b37\u10d8\u0b15\u1061\u1fd1": [], "\u1edb": [], "\u1edd\u10dd": 308, "\u1edd\u161a": [], "\u1edd\ua1b5\u1efd\u0221\u2c89": [], "\u1ee1\u1076\ufebf": [], "\u1ee3": [], "\u1ee5\u084c\u0e82\ua256\u1697": 308, "\u1ee5\ufb80": [], "\u1ee7\u03ba\u12bb": 308, "\u1ee7\ua53c": 308, "\u1ee9\u1a36\ua440\u14fa\u3054\ufbed\u1e9c": [], "\u1eeb": [], "\u1eeb\ua4e1\u3065\ufc81\ua975\u1bda\uaae9\ufc07\ua555\ufc04\u1e35": 308, "\u1eed\ufba2\u1f22": [], "\u1eef": [], "\u1ef1\u15db": [], "\u1ef1\ua74b\ua049": [], "\u1ef3": 308, "\u1ef3\ufb87\ua41a": [], "\u1ef5\u047b": [], "\u1ef7": 308, "\u1ef9\u03c9\u15d7": [], "\u1ef9\ufd15": 308, "\u1ef9\ufda4": [], "\u1efb\u2c31": 308, "\u1efb\u30a4\ua809\ua05a": [], "\u1efd\u1f94\u2ddb": 308, "\u1eff\ufb38\u1728\ua778\ufc61": [], "\u1f00\u12bc": 308, "\u1f01": [], "\u1f01\u31a2": 308, "\u1f03": [], "\u1f03\u00ea\u11ae\ufc0b": 308, "\u1f04": 308, "\u1f04\u1304\ufd0d\u1b1a\ufed2\u1149\ua29c\ufdbf": [], "\u1f05": [], "\u1f05\u1c6b\ua386\u1232\ufbdb": 308, "\u1f06": 308, "\u1f07\u1347": 308, "\u1f10": 308, "\u1f10\ua08f\u03dd\ua511": [], "\u1f11": [], "\u1f11\u1d2d\u14e2": 308, "\u1f11\u2c4b\ua2f4\ua4f1\ua104\u1eb3": 308, "\u1f12\u047f\u1492": 308, "\u1f12\u1d75\ua1e6\u1d1d": [], "\u1f14\u052f\u093d\ua51f\u18db": 308, "\u1f14\u305a": [], "\u1f15": [], "\u1f15\u04a3\ua763\u2d27\u0760": [], "\u1f15\uab34": 308, "\u1f20": [], "\u1f20\ufcf5\u1747\u0574\ua264\uffac\ud7bf\ua773\u1d4e\u00e9\u16f3\u1ce9\ufe7c\ua797\u0759\uaaaf\ufd02\ufc0d\ua517\ufee3": [], "\u1f21y": 308, "\u1f22": 308, "\u1f23\u10d6\uff74\ua340": [], "\u1f25": 308, "\u1f25\ua783": [], "\u1f25\ufc90": 308, "\u1f27\u06cc\ua590\ufc65": 308, "\u1f31\u0217": 308, "\u1f31\u1431": 308, "\u1f31\ua2bb\u2c35\ua54c": [], "\u1f32": 308, "\u1f33\u2c9f\u0c87\ua164\ua75d\ua28a": [], "\u1f33\u3075\ua0e4\ua174": 308, "\u1f33\ua757\ua261": 308, "\u1f35": [], "\u1f36\uaa9e\u02bc": [], "\u1f37": [], "\u1f43": [], "\u1f44\u0177\ufd9b\u1f45\u189e\ua810\u151b\ua0ee\u01e5": 308, "\u1f44\u1d61": [], "\u1f45\u04c4\u0803\u1a0e": [], "\u1f45\u1e31": [], "\u1f51\u107c": 308, "\u1f52\ua5a2\u1545\ua460": [], "\u1f53": [], "\u1f55\u01aa\ua925\u0565": 308, "\u1f55\u1c6f\ufcf7": 308, "\u1f56": [], "\u1f60\u099f": [], "\u1f61\u19bf\ua249": [], "\u1f62\u1536\ua5e4\u0209": [], "\u1f62\u1f10\u155e\ua8a7": 308, "\u1f63\u16a2\u1427\ua3cc": 308, "\u1f64\u30de": 308, "\u1f66": 308, "\u1f66\u0912": 308, "\u1f67": 308, "\u1f71\u30e6\u1999": 308, "\u1f72": [], "\u1f73": 308, "\u1f73\u1a3f": [], "\u1f74": 308, "\u1f75\u1673": [], "\u1f75\uab35\u0503": 308, "\u1f77\u00b5": [], "\u1f77\u1a31": 308, "\u1f78\u00f5": [], "\u1f79": 308, "\u1f79\u07d6": 308, "\u1f7a\u06b7": [], "\u1f7b": [], "\u1f7c\ufeee\u062d\u148a\u1f63\u05d2": [], "\u1f7d": [], "\u1f7d\ua3a7\u0e1f\u129b\u1214\uab04\u0ea7\u105d": [], "\u1f81": 308, "\u1f82": [], "\u1f83\u2d3c\u10d0\u1e1b\u2d52\ufb92\u2d24\u2071": 308, "\u1f84\u03c8\u1d81": [], "\u1f85\ua46b\u1051\u1266\ufd12\ua0a6\u1124": [], "\u1f85\ua9fd\u0c2a": [], "\u1f86": 308, "\u1f87": 308, "\u1f87\ua585": 308, "\u1f90": [], "\u1f90\u151a": 308, "\u1f90\u17a7\ua5ad": [], "\u1f91\u1000\u1d9b": 308, "\u1f94": [], "\u1f95": [], "\u1f95\ua0f9": [], "\u1f96\u03b4\u0eaf": [], "\u1f97": 308, "\u1fa0": [], "\u1fa0\u1f83": 308, "\u1fa0\ufc25\u141a": [], "\u1fa1": 308, "\u1fa2\ufb30": 308, "\u1fa3\ua0ba\u024f\u14e2\u021f": [], "\u1fa5": 308, "\u1fa5\u14a0\u305d\u03ba\u1f71\u18c3\ufb88": [], "\u1fa6": [], "\u1fa7\u0bb6": 308, "\u1fb0\ua547\u0985": 308, "\u1fb1\u04af\ufb2e": 308, "\u1fb1\u0da5": [], "\u1fb3": 308, "\u1fb3\ufcbb": [], "\u1fb4\ua53f\u0261\u155e\u1d65\u068e": [], "\u1fb4\ufd93\u0525": 308, "\u1fb7\u0958\uaba9\u0e9a\uaab1\u0a05\u1c03\ua777": [], "\u1fbe\u1b09": 308, "\u1fbe\ud7b4": [], "\u1fc2": [], "\u1fc4\u0439\u3119": [], "\u1fc6\ua8fb\ufd0f": [], "\u1fc7\u06b9": [], "\u1fd0": [], "\u1fd0\ua986\u15bd": 308, "\u1fd1\u07d1\u1b9e\u1bdf\ua1ea\u017a\u16c3": 308, "\u1fd2\u1e1d\u2d80\ua3ec\u19a4\u2184\u049b": [], "\u1fd3\u0f45\ua221\ua451\uabdd\u30d4": 308, "\u1fe2": 308, "\u1fe2\u3173\u0e1a\ua119\u1b92": [], "\u1fe4": [], "\u1fe5\u0b9c\u1a4a": 308, "\u1fe5\ua31e\u2d24\u0161": [], "\u1fe7\u1507": [], "\u1fe7\ufcab\u2d25\u08b2\u15b0": 308, "\u1ff3\u03c8": 308, "\u1ff3\u212c\u0242\u2db4\ua602\u2d1a\u1e69\ua1f7": [], "\u1ff3\ufb51\u0260\ua1fe": [], "\u1ff6": [], "\u1ff7": 308, "\u207f": 308, "\u207f\u30a9": [], "\u2090\uab3b\ua36c\u1511\u2da1\u092f\u052f\u126c": 308, "\u2093": [], "\u2095": 308, "\u2096\u0501": [], "\u2098": 308, "\u2099\u116f": 308, "\u209c\u14ba\u0e23": [], "\u2107": 308, "\u210a": 308, "\u210b": [], "\u210b\ufc0a": 308, "\u210c\ud7ee": [], "\u210f\ufcd2\u15f3\ufb77\ua845\u1a0c\u179f": 308, "\u2110": 308, "\u2111": 192, "\u2112\u153e": [], "\u211a\u0cb9\ua96e\u2c5a": [], "\u211c": 192, "\u211co\ua8f7": [], "\u211d\u04db\u210e": 308, "\u2124": [], "\u2128": 308, "\u212d\u11f6": 308, "\u2134\ua0a3\u1272\u0771\u1349\u0997": [], "\u2135": [192, 308], "\u2135\ua063\ua776\ufc00\u1350\u1881\u1fa7\u2d59\u1968\u103f": [], "\u2136": [], "\u2137": 308, "\u2139": 308, "\u213c": [], "\u2145\ufc1b\u11e3": [], "\u2146\u190e": 308, "\u2148\u30f2": [], "\u214e": 308, "\u214e\ua5f3\u16cf\u1853\u0448": [], "\u2184": 308, "\u2184\u31f7\u0649\u158c": [], "\u2c31\u16b3\ufd76": [], "\u2c31\uaa21": 308, "\u2c32\u1d6b\u1273\u012d\u1569\u0e12\ua40a": 308, "\u2c32\ufd2a": [], "\u2c33": 308, "\u2c33\ua2d7\ufd70\u1da0\ua446": [], "\u2c34": 308, "\u2c34\uab2d\u1343\u16a3": 308, "\u2c35": [], "\u2c35\u1e27\u0373": 308, "\u2c35\ua773": 308, "\u2c36\u304e\ua3f5": 308, "\u2c37": 308, "\u2c39": 308, "\u2c3b": 308, "\u2c3b\u03fc\u312b\ua733\u1785\ua65d\ua795": [], "\u2c3b\u2d06\u2d60": [], "\u2c3c\ufc5b": 308, "\u2c3d": 308, "\u2c3d\u15bb\ua60c": [], "\u2c3f": [], "\u2c3f\u0a5c\u00f3": [], "\u2c3f\u0f67": 308, "\u2c40\ua39e\u1b13\uaae9\uaba6\u1ea1\u12e1": [], "\u2c41": [], "\u2c41\u2c33\u0267\u043a": 308, "\u2c41\ufb43\u0d7d\u120b\u1b90\ufdaa\ua403": [], "\u2c42\ua5a1\ua9e2\u1020\u16bb\u0da9\u1951": [], "\u2c43": 308, "\u2c44\u1b46\u03db\ua616": 308, "\u2c45\u0c0b\u31b8": 308, "\u2c45\u183e\uaa09": [], "\u2c46": 308, "\u2c47\ua665": [], "\u2c47\ufd5d\u14e8": 308, "\u2c4a\u04cf\ua47c\u11e6\u153b": 308, "\u2c4a\u0923\ua0aa\u10d1\u121b": [], "\u2c4a\ua553\u144d\ua5bd": [], "\u2c4b\u111d\u131f": [], "\u2c4b\ua4df": 308, "\u2c4d": 308, "\u2c4e\u3140\u1505\u12f7": [], "\u2c50\ua106": [], "\u2c50\uff90": [], "\u2c51\u07b1": 308, "\u2c51\ua37e\u2da5": [], "\u2c52": [], "\u2c52\u1e05\ua59d\u08ac\u3050": 308, "\u2c52\ua0de": 308, "\u2c53\u1b25\u0b07": 308, "\u2c53\u3073\ud7de\u0d92\uaba3\u1d6b\u199d": [], "\u2c55\u00ef\ufd2d\ua010\uab24\u11e6\u2c37\ua04c": [], "\u2c56\u0277\u1341\ua6c9": 308, "\u2c56\u31aa\u0993": [], "\u2c57\u02c1\u1a0c": [], "\u2c57\u0dc4\u1511\ua265\ua3d0\u01fd": [], "\u2c57\u1f27\u1761": 308, "\u2c58\u142a\u1fc6": 308, "\u2c59": 308, "\u2c59\u1762": [], "\u2c5a\ufd87\u174e": 308, "\u2c5b\u1fc2\ua080": 308, "\u2c5b\ufbf0\u1960": [], "\u2c5c": 308, "\u2c5c\ufb04\u0435\u3072\u1485\uab5e\uaa84": [], "\u2c5c\ufe78": [], "\u2c5d": 308, "\u2c5d\u1f7d": 308, "\u2c5e\u02a1\ua6af": 308, "\u2c61": [], "\u2c65": 308, "\u2c65\u063e\u141e\ufcba\ua372\u1133\u0159\ufd66\u1d20\uff7f\u03dd": [], "\u2c65\ua4d4\u167b\ua460": 308, "\u2c66\ufeea": [], "\u2c68\ufb4e": 308, "\u2c6a": 308, "\u2c6a\u0b87\ufd2e\u1235": [], "\u2c6a\ua8aa\u1fa2\uff9d\u06fc": [], "\u2c73\u0567\u2c31": [], "\u2c73\ua0fb\ufb23\u022f": [], "\u2c76": [], "\u2c76\u1f67\uab71": 308, "\u2c78": 308, "\u2c7a\u04bf\ua26f\u16f8\u12cc\ufeb9\u1ff6\u0c19\u1538\u0290": 308, "\u2c7b": [], "\u2c7c\u0b60": 308, "\u2c81": 308, "\u2c83\ua34b": [], "\u2c85": 308, "\u2c85\u0499\u080b": 308, "\u2c85\ua48b\u1c00": [], "\u2c87\u1792": [], "\u2c89\ua65f\u015f": 308, "\u2c8b": 308, "\u2c8b\ufb44": [], "\u2c8d\u0b94": [], "\u2c8f": [], "\u2c8f\ua14b\u15d3": 308, "\u2c8f\ufbdc\u1299": [], "\u2c91": 308, "\u2c91\u01cc": 308, "\u2c91\u2cb1": [], "\u2c91\ua417\ua9fb\u0577": [], "\u2c93": [], "\u2c95": 308, "\u2c97": 308, "\u2c97\u1986\u0d06": [], "\u2c97\u3160\u2d0a": [], "\u2c99\u1b84\u1499": 308, "\u2c99\u314f\ua0f0\uaa95\ufd03\uabcf\u0144": [], "\u2c9b\u0263\u1023\u1427u\uabdf": [], "\u2c9d": [], "\u2c9f": 308, "\u2c9f\ua145": 308, "\u2ca1": [], "\u2ca3\u02b9\ua36e": 308, "\u2ca5": [], "\u2ca5\u01e3\u1440": 308, "\u2ca5\ua3c0": [], "\u2ca7\u16bc\u1727\ua3d8\u1bae\u11eb\u147c": 308, "\u2ca9\ua52b\u1126": [], "\u2cab\u04eb\u0519\u14a3": 308, "\u2cad\u147a": 308, "\u2caf\ua039": 308, "\u2cb1\u1dbd": 308, "\u2cb3\u2dc2": [], "\u2cb3\ua091\ufe8c": [], "\u2cb3\uff6a\u1723\u1d85\uab53\u314d": 308, "\u2cb5": [], "\u2cb5\ua038\u0c32\u2cb5\u0467\u16e6\u1dae\u190a": 308, "\u2cb7": 308, "\u2cb9\u1e1f": [], "\u2cbb": 308, "\u2cbb\u0784\ua488\ua4f3\u0219": 308, "\u2cbb\ud7c4": [], "\u2cc1": 308, "\u2cc3\u020b\ua322\ua5b3\ufd50\u15c4": [], "\u2cc5": [], "\u2cc7": [], "\u2cc7\u30c2\ufeb4\ufc70\u0bb4": 308, "\u2cc9": [], "\u2cc9\u190f\u1018\u0583": 308, "\u2cc9\ufbec\u0932\u04d9": [], "\u2ccb\u0249\u2090\u0456": [], "\u2ccb\u14e6\uff6c\ua6bd\u1456": 308, "\u2ccd\ua161": 308, "\u2ccf": 308, "\u2ccf\ufb7b\u0dbb\u1c0d\ua21f": [], "\u2cd1\u1297": [], "\u2cd1\ua387\u1bc8": [], "\u2cd1\ua940": 308, "\u2cd3\ua5a7": [], "\u2cd5": 308, "\u2cd5\u1263\u179d": [], "\u2cd5\ua400\ua60a\u1d5c\u0127": [], "\u2cd7": [], "\u2cd7\ud7d4\u1471\u167f": [], "\u2cd7\ufe97\uaa4b": 308, "\u2cd9": [], "\u2cd9\u2d8e\u14dc": 308, "\u2cdb": 308, "\u2cdd": [], "\u2cdd\ufce3": [], "\u2cdf": [], "\u2cdf\u30b0": [], "\u2ce3\u0781": 308, "\u2ce3\u18e4\u15be": [], "\u2ce4": [], "\u2ce4\u1987\ua206\uabbd": 308, "\u2cec\uff56\u0c96\ua6bf": 308, "\u2cee": [], "\u2cf3": [], "\u2cf3\u100f\ua11b": [], "\u2cf3\uff51\u0c05\u04a9": 308, "\u2d00\u1e1f": 308, "\u2d02\uaa91": [], "\u2d03": 308, "\u2d04": [], "\u2d04\u15a1\u1e8d": [], "\u2d04\ua021\u117d\u095e\uab55\u1f13": 308, "\u2d05\u0277": [], "\u2d05\u12da\u1d94\u1eb5\u1f06\ua59f\u1dbe\ua645": [], "\u2d06\u161f\u1e33\ua9a8\ud7ea": 308, "\u2d07\u0294\u0d18": 308, "\u2d07\u2c49": [], "\u2d08": 308, "\u2d08\u0513": [], "\u2d0b\u0e22\u1fa2\ua39d\ua26f": [], "\u2d0b\ua2fc": [], "\u2d0b\ua54c\ua725\ufcf6\u2d34": 308, "\u2d0c": [], "\u2d0c\ua055": 308, "\u2d0d": [], "\u2d0d\ua55e\u0c86": 308, "\u2d0e": [], "\u2d0e\u023f": 308, "\u2d0f\u0458\u2d06\uab84\ua171\ua0cd\ua6dc\u2d04": 308, "\u2d0f\ua422\u0133\u0454": 308, "\u2d0f\ufc2b": [], "\u2d10": 308, "\u2d10\u31b1\ufbfb": 308, "\u2d10\ua0d8\u07d0\u12b8\u147b\uab97\u1724\uabcb\ua81a\u1bbf\u1503": [], "\u2d11\ua6d9": [], "\u2d11\ufe92\uaa0c": [], "\u2d13": [], "\u2d13\u050b": 308, "\u2d14": 308, "\u2d14\u1bc3\u16d7\ua16a": 308, "\u2d15": [], "\u2d17": [], "\u2d17\ufd17": [], "\u2d18": [], "\u2d18\u1509\u1ef7": [], "\u2d18\ua01a\ua3a6": 308, "\u2d19": 308, "\u2d19\u0d26": [], "\u2d19\ua727": [], "\u2d1a\u1d3d\ua51d\u0129\u1664\u2c9d\ua193\u1c1d": 308, "\u2d1b\uaa48\u100b\ufcd2\u1506\u1d31": [], "\u2d1c": 308, "\u2d1c\ua008\u03be\uff52\u150f\u090a": 308, "\u2d1c\uaa6d\u1c15\u1256": [], "\u2d1d": [], "\u2d1d\u1847\ua3f3": [], "\u2d1d\u3078\u023f": 308, "\u2d1d\ua30f\u0693": 308, "\u2d1f": 308, "\u2d20": 308, "\u2d21": 308, "\u2d21\ua32b\ua669": [], "\u2d22\ua06b": 308, "\u2d23": 308, "\u2d23\ud7eb\u1667\u1bcf\u0f43": 308, "\u2d25\u04d5\u02c7\u1013\u1b26\uab9d\u30be\uff8f": [], "\u2d27": 308, "\u2d2d": 308, "\u2d30": [], "\u2d32": 308, "\u2d33\u03b0\u211a": 308, "\u2d33\u04ca\u19a0": [], "\u2d35\u30bb": 308, "\u2d37": 308, "\u2d39\u11a1\ua42a\ua735": [], "\u2d3a\u0d1f\ufc18": 308, "\u2d3a\ufc15": [], "\u2d3b": 308, "\u2d3c": [], "\u2d3d\u0c97": [], "\u2d3e\uaa11\u1e69\ua04b\ua6b3": [], "\u2d3f": [], "\u2d3f\u11da": 308, "\u2d42": [], "\u2d42\u07e3\u183c\u3056": 308, "\u2d43\u1d2a": [], "\u2d44\u0ca8\u0da6": 308, "\u2d49": 308, "\u2d4a\u2c58\u1190\ua5f7\ufcaf\u2c38": [], "\u2d4b": 308, "\u2d4d": [], "\u2d4d\ua518": 308, "\u2d4e\u18d8\u0511\ua560\ud7b3\u1eb1": 308, "\u2d4e\ua462": [], "\u2d4f\ua592\ua79d\u2c42\u044d\u3181": 308, "\u2d51\ua7fe": [], "\u2d52\u05e3\u3059": [], "\u2d53": 308, "\u2d54\ua6bd\ua573\u1345\u16da\u0ca1\ua6a8": [], "\u2d55": 308, "\u2d56\u071a\u0761": 308, "\u2d58": [], "\u2d58\u16e9\ua75b\ua419": 308, "\u2d5a": [], "\u2d5a\ufd02\u119c\ua398\u0529\ua114\uaa82\u30eb\ua342\u0471": 308, "\u2d5c\ua135\u31a8\uffdb": [], "\u2d5c\ua442": 308, "\u2d5d": 308, "\u2d5f": 308, "\u2d60": 308, "\u2d61": [], "\u2d62\ufb25": [], "\u2d63\u1261\u1168\u056f\u10de\u0b2e\u305d\ua918\u02c8\u1705": 308, "\u2d64\ua4d9\u069a\u1782\ua565\ua154\ua220": 308, "\u2d65\ua36b": [], "\u2d6f\u30d4": [], "\u2d81": 308, "\u2d82\u1111\uaaa6\ua37b\ufc58\u1352\u1479\uaa9d\u1630": [], "\u2d83": 308, "\u2d84\ua1b3\u14b3\uffcf\ua50d": [], "\u2d88": 308, "\u2d89\u097c\u174f\u182f\u0636\ufbf7\u0213\ufc46\u0103\ua23a": 308, "\u2d8c": [], "\u2d8c\ua533": 308, "\u2d8d\u020f\ua5b0": 308, "\u2d8e\u1e13": [], "\u2d8f\ua0be\u1582": 308, "\u2d8f\ua745\u143d\ua2ab\ua32a": [], "\u2d90": 308, "\u2d92\ua414": 308, "\u2d93\u14d7": [], "\u2d94": [], "\u2da1\ufc9c\u30a3\u0f57\u2d02\u01d8\u1c76\u1501\ufc78\ufd7d": [], "\u2da4": 308, "\u2da4\u1d07\u0a72": [], "\u2da9\u2c73\u1c0e\ua36a\u0edc\u0249": 308, "\u2daa\u3088": [], "\u2dab\u2d08": [], "\u2dad\u0ebd\u0565\u151d\ud7e9\ufda5": [], "\u2db0\u1f93\u1ea7\u116a": [], "\u2db1": 308, "\u2db3\u044b\uab8f\u1488\u013e": 308, "\u2db3\ua751": [], "\u2db4\ufc43\u14af\u10e8\ufd9f\u170b\u11b8\u06cd\u3096\ufdc4": 308, "\u2db5\uaa6a": [], "\u2db8": 308, "\u2db9\u0eab\u14e5": 308, "\u2dba": [], "\u2dbb\ua797\u1fd6\u09b7": [], "\u2dbc\u1e85": 308, "\u2dc0": 308, "\u2dc0\ua681": [], "\u2dc1\ufd54": 308, "\u2dc2\ua643\u00f0\u12cd": 308, "\u2dc4": 308, "\u2dc5": 308, "\u2dc6": [], "\u2dc6\ufd71f": 308, "\u2dc8\u099e": 308, "\u2dca": 308, "\u2dcb": 308, "\u2dcb\ua4d7": [], "\u2dcd": [], "\u2dce": 308, "\u2dd1\u01b6\u0cb0\u2d0a\u1854": [], "\u2dd4\u16b6\u1981\u3134": [], "\u2dd4\ufbaf": 308, "\u2dd8": 308, "\u2dd9\u1205": [], "\u2dda\ua252\ua872\ua4f5\u1d7d\u159f": [], "\u2ddb\u2c42\u077d": [], "\u2ddc": 308, "\u2ddd": 308, "\u2dde\u1fc3\u318a\u1571\u0442\u1efd\ua861k": 308, "\u2e2f": 308, "\u3006\u3147\ufb7b": 308, "\u3031\u30d0": 308, "\u3032": 308, "\u3032\ufd1b\ua3b4": [], "\u3034": 308, "\u303c\ua9aa": 308, "\u3041\u0b95\ufb4d": [], "\u3045\u0e9a\u17a7": 308, "\u3050\u0568\u0986\u30ab": [], "\u3051\ufdbe\u127a\u0257\u0a07\u212f\u2cb9\ufc3e\u02ab\u074d": 308, "\u3052\u3187\u15d0\ufb58\u1c04\ua961\u10e3\u1829\ua543": [], "\u3054\u1da8\u2ca1\ua11f": 308, "\u305c\u04d3\u0c9c": 308, "\u305f\ua6a6\u143c\u30c7": [], "\u3061\ufeb1\u130b": 308, "\u3064\u1c21\u09ac\u1da7": 308, "\u3065\ua310\u06a2\u0171": [], "\u3066\u1f40\ufd11\u1d0d": [], "\u3067\u06fb\u0188": [], "\u3068\u1436\u3169\u1405": [], "\u306a\ua763\u1435": [], "\u306d\u1350\ua5e7\u1578\u3085\ufb51\ufdb4\u19a1": 308, "\u3077\ua15a\ua394\u0ab2\u020b": 308, "\u307b\ufc31\ua185\u1f30\u024d\uab40\uaaa1\u2c93": 308, "\u307c\u0c98\u017c\ua787\u15cd\u0b5c\ua152\ua6b7\u1336": [], "\u307d\ufd78\ua24d\u0912\ua375": [], "\u307e\u308f\u3057\u8005": 417, "\u3080\u1597\ud7f3\u049f\u0c9e\u1383\u0e28": 308, "\u3081\u048f\u1c79": 308, "\u3084\u12e2\ua2bb": 308, "\u308a\ua930\uaa26\u0c31\u1d08": 308, "\u308a\ufd2b\u0b24\u1ff7": [], "\u3092\ufebd\u1438": 308, "\u3094\uff48\uff82\u1333\ua23b": 308, "\u309e": 308, "\u309f": [], "\u30a1": [], "\u30a1\u1e31\ua19d\ua298\uab4a\u2134": 308, "\u30a3": 308, "\u30a5\u0dac\ua9a6": [], "\u30a7\ufc3e\u1987": [], "\u30a8\ua279": [], "\u30aa\ufd52": [], "\u30ac\u308c": [], "\u30ae\ufc93": [], "\u30af": [], "\u30b2": [], "\u30b2\ua18b\u1f52\ufc8b\ua138\u1271\u1e98": 308, "\u30b3\ua01c": [], "\u30b4": 308, "\u30b5\ua899\u149c\u1411\u1b91\u1f92\ua165\u148d\ufd19\u18a5\uaabb": 308, "\u30b6": 308, "\u30b6\ua581": [], "\u30b9\u1668\u30ec\ua307": 308, "\u30b9\u30d1\u30a4": 417, "\u30ba": 308, "\u30bb": [], "\u30bc": [], "\u30bd": [], "\u30be\ua88c\u16c1": 308, "\u30bf": 308, "\u30c1\u2c9d\ua063\u1e91": 308, "\u30c2\ufeb9": [], "\u30c5": [], "\u30c6": [], "\u30c7\u1609\ufcb8": 308, "\u30c8": [], "\u30c8\u1749": 308, "\u30c9\u312b\u213e\u15df\uabb5": 308, "\u30ca": 308, "\u30ca\ufc55\u1f27": [], "\u30cc": [], "\u30cc\u2c71\ua1dd\u2c97\u037b": 308, "\u30cd\u16b3\ua39b": 308, "\u30cf\u0da2\u06ef": 308, "\u30cf\u15b1\u19c0": [], "\u30cf\u30ed\u30fc": 327, "\u30d1\u1525": 308, "\u30d3\uabc1\u1661\u08a2\ua0be": [], "\u30d5": [], "\u30d6\ufbf9": [], "\u30d9": 308, "\u30da\u1224": 308, "\u30da\u31ae": [], "\u30db": [], "\u30db\u142f": 308, "\u30dc\uaa62": 308, "\u30dd\u14b2\ua410\u16e3\u024d\u16dd\ua300": 308, "\u30df\u306b\ufb79\ua9ec\u1fa7": 308, "\u30e1": 308, "\u30e2": 308, "\u30e3\u075a": [], "\u30e4\ufb84\u09a3\u147b\ua7fa\u3106": 308, "\u30e5\u1c74\ua9e0\u0d37\ufcd0\u152b": 308, "\u30e7": 308, "\u30e8\u1fe1\u1129\u3093\u0c2d\u157c": [], "\u30e9\ua818": 308, "\u30ea\ua2c0\u1cf5\u0d85\u15fd\u167e": [], "\u30ec\u1d8e\u2131": [], "\u30ef\u0a85\u0ec4\u1a52\u2da8\ufd2f": [], "\u30f0\u0a06": [], "\u30f1": 308, "\u30f4\ua556\u1c4d": 308, "\u30f6": 308, "\u30f9": 308, "\u30fa\ufc47\u16d3\u097b\u0a36\u0d22\u198e\u12cf": 308, "\u30fc": 308, "\u30fd": [], "\u30fd\ua292\u127c\uffc4": 308, "\u3106": [], "\u3108\u18d5": [], "\u310a\u03eb": [], "\u310b": [], "\u310c": [], "\u310e\u2c89\u1d4b\u1fd7\u057f": 308, "\u310f": 308, "\u310f\u1d37": [], "\u3110\u015d\u316e\u1575\u3031": [], "\u3112": 308, "\u3113\u1950\u1f51": 308, "\u3114": [], "\u3114\u04ff": 308, "\u3115\u179a\u157f\u1003\u165b\ua232": [], "\u3115\ufee4\ua7a1": 308, "\u3116": [], "\u3117": [], "\u311c\u1c63\ufc65\u1863": [], "\u311d\ua420\u0493\ufb49\ufbd7": 308, "\u311d\ua755": [], "\u311e": 308, "\u311f\ua275\u1b23": [], "\u3120\ua527": 308, "\u3121": 308, "\u3122": [], "\u3125\u1345\ua368\ufb87\u0c58\u1461\u1d0b": 308, "\u3126\ua04b\u1858": 308, "\u3127\u1066": 308, "\u3128": [], "\u3128\ua76b\ua5d4\u2d41\u0565": 308, "\u3129": [], "\u3131\u14f1\ua2a4\u0521": [], "\u3132\ua03d\u0585\u04f1": 308, "\u3134\u1c0d\u1955": 308, "\u3135\u3169": 308, "\u3136\u0215\u048b\u1018": [], "\u3136\ua010\uaa95": 308, "\u3137": [], "\u3139": [], "\u313a\u1265": 308, "\u313b\ua354": 308, "\u313c\uaa10\uffa3": 308, "\u313e": 308, "\u3141\ua4db\u0205": 308, "\u3142": 308, "\u3142\ua0df": [], "\u3143": [], "\u3144": [], "\u3144\u0809\u0165\u1e09": 308, "\u3146\u0f43\u2c3c\ua759\u1d57\ua61a\u0c94\u11aa\ua209": [], "\u3146\u1efb\ua5e3\ufc37\u1e6b\uab97\ufb62": 308, "\u3147": [], "\u3148\ua7a1\ua8aa\u025a\u1908\u1627": 308, "\u3148\ufb9d": [], "\u314b": 308, "\u314c\ua3b5\u1d9e\ufcc4\ufb60\u12d4\u1f82": 308, "\u314e\u06ca\u2cc7\u0ebd": 308, "\u314f\u114b\ua45d\u06af\u10d3\u1510\u098a\u0ba9": 308, "\u3150\u1e3b\ua6ae\u169a": 308, "\u3152": [], "\u3153": 308, "\u3154\u15ad": [], "\u3154\ua543\u30a7\u198c\u2d17\ua04a": 308, "\u3155\u3158\ua77a": [], "\u3156\u1526": [], "\u3157": 308, "\u3158\ufb6c\u2dbe": 308, "\u3159": [], "\u3159\u1f41\u1335\u03c4\u1d4c\u1112\u18ed": 308, "\u315c": [], "\u315c\ua502\ud7f6\u04ef": 308, "\u315d": 308, "\u315e": 308, "\u315f\ua06a\u1e37\ua0fa": [], "\u3160\ua78e\u309d\u1d1f\ufdaa": 308, "\u3161\u0451\u1837": 308, "\u3161\u1153\u12ba": [], "\u3162": 308, "\u3166\u10ff": 308, "\u3167\u0479": 308, "\u3168": 308, "\u316b\u3149": 308, "\u316b\ua193": [], "\u316e": 308, "\u316f": [], "\u3170\ua916": 308, "\u3171\u00e0\u1355\u0a15\u1a15\ua2f0": 308, "\u3171\ua43a": [], "\u3172\u03e5\ufd6a\u1792\u1f12\ua612\u0f62": 308, "\u3173\u0dbb\ufc7e": 308, "\u3175\u0995": [], "\u3176\ua2a9\ufeae\ua0fd\uaabd": [], "\u3177\u2dc3": 308, "\u3178": [], "\u3179": 308, "\u317a": 308, "\u317b": 308, "\u317c\ua0ad": [], "\u317d\u068a": 308, "\u317d\ua538": [], "\u317e": [], "\u317e\u057e\ufdb1\u2c48w\ua931\u1ea5\u1505\u1eaf": 308, "\u317f\u16af\ua385\ua066": [], "\u3180\u03cc\u0447\u1561\ua91a\ua10a\u14e4\u0775": [], "\u3182\ua35a\ua255\ua2f8\ua2cc\u0d0e\u01bd\u1284": [], "\u3183\u2ce1\ua064\ufed1\ua451t\u0a97\ua254\ua158\u14be": [], "\u3185\u03c5\ufe88": [], "\u3185\u1ea3\u1d75\u172d": 308, "\u3188": 308, "\u3188\u1469\ua80c\ua4f9\ua014": [], "\u318a": [], "\u318b\u195d": 308, "\u318c": [], "\u318e\u057d\ufd51\ufc75\ua89e": 308, "\u318e\u2ca9\u14d6": [], "\u31a0\uab99": 308, "\u31a3": [], "\u31a4": 308, "\u31a5\u1796\u072c\u01f3\ua7fc": 308, "\u31a9\ufb56\u0b92\u06b8": 308, "\u31aa\ua844": 308, "\u31ac": [], "\u31ad": 308, "\u31af": 308, "\u31b1": [], "\u31b2\uaa17": 308, "\u31b6\ua47b": 308, "\u31b7\u014b\u1220\u0679\u15e2": 308, "\u31b7\uab15\u0ce1": [], "\u31b8\ua3db\ua657\u1f7a\ua021\u30a6\u1543\ua561": [], "\u31b9\u022b\u1e09": 308, "\u31b9\u0293\u0a0a\ua27f\u1ebd": [], "\u31ba": 308, "\u31f1\u01e7\ua3b2": [], "\u31f3": 308, "\u31f4\ua472": 308, "\u31f5\u011d\u1f07\ua246\u05d7": [], "\u31f7\u130f": 308, "\u31f9": 308, "\u31fb": [], "\u31fb\u1001\ua6cd\ufe8d\u06ce\u186d\u1f23\u1911": 308, "\u31fc\u0192\uaa1e": [], "\u31fe": 308, "\u4e0d\u9023\u7d9a": 327, "\u4e2d\u6587": 316, "\u5171": 327, "\u5206\u8bcd\u5668": 316, "\u56de\u3057\u8005": 417, "\u56de\u8005": 417, "\u5897\u52a0": 327, "\u5bc6\u5075": 417, "\u5de5\u4f5c\u54e1": 417, "\u5efb\u3057\u8005": 417, "\u5efb\u8005": 417, "\u63a2": 417, "\u63a2\u308a": 417, "\u65af\u5766\u798f": 316, "\u661f": 327, "\u662f": 316, "\u6709\u9650\u516c\u53f8": 308, "\u671f\u5f85": 327, "\u697d\u5929\u682a\u5f0f\u4f1a\u793e": 308, "\u6d4b\u8bd5": 316, "\u72ac": 417, "\u767d\u8272": 327, "\u793a\u3057": 327, "\u79d8\u5bc6\u635c\u67fb\u54e1": 417, "\u8adc\u5831\u54e1": 417, "\u8adc\u8005": 417, "\u8fd9": 316, "\u8fd9\u662f\u65af\u5766\u798f\u4e2d\u6587\u5206\u8bcd\u5668\u6d4b\u8bd5": 316, "\u9593\u8005": 417, "\u9593\u8adc": 417, "\u95a2\u6570": 327, "\u963f\u91cc\u5df4\u5df4\u96c6\u56e2\u63a7\u80a1": 308, "\u96a0\u5bc6": 417, "\ua001\ua207": [], "\ua002": 308, "\ua003": [], "\ua006": 308, "\ua007\ufb02": [], "\ua007\ufb8d\ua458\u0d31\u11d5\ufd34\ua26e": 308, "\ua008\uffbd\u045c": [], "\ua009\u2c39": [], "\ua00c\u1581\ua0bd": [], "\ua00d": [], "\ua00d\u124c": 308, "\ua00f": 308, "\ua011\ufbb1": 308, "\ua012\ufc28\u160d\u0d2f\u1e2f\u16d6": [], "\ua013\ufd6c\ua4f0": [], "\ua014": 308, "\ua015\uff49\ufc68\u14db\u15f5": [], "\ua017\ua32e": [], "\ua018\u072e": [], "\ua019\u1540\u18a4": 308, "\ua01c\u2ca7\u04a9": 308, "\ua01d\ua331\u31f0\ua5e8\u099c\uff97": 308, "\ua01e\u1291": [], "\ua01f": 308, "\ua022": 308, "\ua024\u0169": 308, "\ua027\u11bc": [], "\ua02b": 308, "\ua02b\u1b28\ua58a\u1332": [], "\ua02c\u0644": [], "\ua02d": [], "\ua02e": 308, "\ua02f": 308, "\ua030c\u081a\u0a21\uabb4": [], "\ua030\ua1e2\ufebf\u1d78\u0501": 308, "\ua031\u2dc3\ud7bb": [], "\ua031\ua769": 308, "\ua033\u14f5": [], "\ua033\ua285\u18d6\ua3d9\u1f84": 308, "\ua034\u0109\ufb81\ufd72": [], "\ua036\u19a5\u1626\u17b3\ua314\u1a02": [], "\ua038\u0b10": [], "\ua03a\u029d\u0b2b\u0633\ua13c\ua034\u04c4": 308, "\ua03a\ua21e": [], "\ua03b\u1452": 308, "\ua03b\u212f\u1751": [], "\ua03c\u1855": [], "\ua03d\ua37f\ufe96": [], "\ua03e\ua386\ua6a5\u0266": [], "\ua03e\ua60b\u027e\ua0b4\ua6b9\ufc7b\u18d7": 308, "\ua040": 308, "\ua041": 308, "\ua042": 308, "\ua044": 308, "\ua046": [], "\ua046\ua2c9\u1a48\ua725\u16b0": 308, "\ua048\ua2b9\ufc41": [], "\ua049\u02e0\u046f\u14f3\u076b": 308, "\ua04d\ua08c": [], "\ua04d\uaa76\u1b98\u30fe": 308, "\ua04e\ua6d2": 308, "\ua04f": [], "\ua04f\ua434": 308, "\ua050": [], "\ua050\ua476\uaa9b": 308, "\ua051": 308, "\ua052\ua5cf\u2099\ua1a3": [], "\ua053\u1f78": 308, "\ua054": 308, "\ua054\u306b": [], "\ua056": 308, "\ua058\u2c40": [], "\ua05a": 308, "\ua05b\u148b": 308, "\ua05c\ua6d9\ua179\u16ba\u2d65\ua39cq\u0234\ufb8b\u1ec7\u1f53\ua223": 308, "\ua05d\u00fa\ua218\ua107": 308, "\ua05e": 308, "\ua05f": 308, "\ua060": 308, "\ua061\ua1ee": [], "\ua062\uab22\u1670": [], "\ua065": 308, "\ua065\ua487\u0769\ua27d\ua303": [], "\ua067\u146c": 308, "\ua067\ua5e9": [], "\ua069\u1324": [], "\ua069\ua2dc\u07f4\ua3ef\u0256": 308, "\ua06b\u0257": [], "\ua06e\u044a\ua5cb\u2c5b\ua5f2": 308, "\ua06e\u151a\ua090\ua866": [], "\ua06f": 308, "\ua070\u30a4": 308, "\ua071\u189b\u0507\u00f3\u1232\u15d2\u1ceb\u2d23": [], "\ua073\ufb15": [], "\ua074": 308, "\ua074\ua17a\u158a": [], "\ua075": 308, "\ua075\uff84\ua0ac\u30c3\ufee9\u10db": [], "\ua076\u03ef\uaae0": 308, "\ua077\uaa71\u1684\u1541\u3034": [], "\ua078\u1959\ua5c5\u0f61\uabd4": 308, "\ua079\ufbd4\ua98d\u1e99\u02a0\ufb5e\u170a\ua14d": 308, "\ua07a\ua23d": 308, "\ua07b\u1019\u30c6": 308, "\ua07c": 308, "\ua07d": 308, "\ua07f\ufed2\ua996\ufebc": 308, "\ua080\u0b19\u056b": [], "\ua082": [], "\ua082\u0e8a": 308, "\ua085": 308, "\ua085\u15e0": [], "\ua086\ua482\u15c7\ua391\u1841": 308, "\ua087": [], "\ua089\ua1e4\ua029z\ufc5c": [], "\ua089\ua85f": 308, "\ua08a\ua56b\u1626": 308, "\ua08d": 308, "\ua091": 308, "\ua092": [], "\ua093": 308, "\ua095": 308, "\ua097\uaa62": [], "\ua098\ua24f": [], "\ua09b": 308, "\ua09c\ua3b9": [], "\ua09d\u1251\u1410\u1ecf\uabaa\u19aa\u15b9\ufecd\u0b23\ua233": [], "\ua09f\u0d21\uffb6": 308, "\ua0a0": 308, "\ua0a0\ufebb\ua85c\u11e1\u1994": [], "\ua0a1\u3164\u07a2\ua85b\ua5b9\u117f\u0c0f\u0e20\u2cee": 308, "\ua0a3\ua799": 308, "\ua0a4\u09a8\u2d89\u3150": [], "\ua0a7\u0aa6\ua1d8\ua42c\u2c5e": [], "\ua0a8": [], "\ua0a9": 308, "\ua0a9\u1efd\uaa88\u00e3\u1c7d\u1a2e": [], "\ua0ab": 308, "\ua0ac\ua280\u1707\u2cc9\u2cd9\u2d1b": 308, "\ua0ae\u03e1\u14a2\ua1f0": 308, "\ua0af": 308, "\ua0b0\ua699\ua01a": [], "\ua0b1\u14a7": 308, "\ua0b2": 308, "\ua0b4": [], "\ua0b5": 308, "\ua0b6": [], "\ua0b6\u1ed3\ua140\u1471\u1e57\ua727\u30a2\u186c\ufd25": 308, "\ua0b7\u17ab": [], "\ua0b8\u1d91\ua994\u1d86\u1f36": [], "\ua0b9\ua805\ufb66": [], "\ua0bc\u2c32\u1eef\u1d7b\ud7da": [], "\ua0bc\ua3c5": 308, "\ua0bd": 308, "\ua0c0": [], "\ua0c2\ufc39\u1050": 308, "\ua0c4": [], "\ua0c4\ufb93": 308, "\ua0c5": [], "\ua0c5\u029e": 308, "\ua0c6\u00f6\u028c": [], "\ua0c7\u114a\ua1c8\u1b88": 308, "\ua0c8\u07a3": 308, "\ua0c9\u0db0\ua268": 308, "\ua0c9\ua8b0\u18df": [], "\ua0ca": [], "\ua0cc\u1389\ua3b7\u112f": [], "\ua0cd\u1433": [], "\ua0ce\ua43e\u020d\u0107": [], "\ua0ce\uff52\u04f9": 308, "\ua0cf": [], "\ua0d1\ua35c": [], "\ua0d3": 308, "\ua0d3\ua36f\u1b0d\u15f2": [], "\ua0d4\ua3bf\u1b07": [], "\ua0d4\ua819\ufd07\u158e": 308, "\ua0d5": [], "\ua0d6\ua0a5\u1764\u1508\uff44": 308, "\ua0d8": 308, "\ua0db\ua17a": 308, "\ua0dd": 308, "\ua0de\ufb27\u1760\u0800": [], "\ua0e0\u1982": 308, "\ua0e2\u121f": 308, "\ua0e4": [], "\ua0e5": [], "\ua0e5\u0569\u1a33\u17aa\ua85d\u0691\u0c60\u2c99\ua428\u01b0\u12a7": 308, "\ua0e6": 308, "\ua0e7\ua34a": 308, "\ua0e8": [], "\ua0e9\ua5f0": 308, "\ua0eb\u0153": 308, "\ua0ed": 308, "\ua0f0": 308, "\ua0f1\u1a38\u1864\u15ab\u12a0": [], "\ua0f2": 308, "\ua0f4\ufc69\uff95": [], "\ua0f5": [], "\ua0f5\ua5a7\ua2c2\uff72\ua8f3\ua23f": 308, "\ua0f6\u01b4\ufc6d\u06ac": [], "\ua0f6\ua0b7\u31a6": 308, "\ua0f9": 308, "\ua0fb": 308, "\ua0fc": [], "\ua0fc\u0d14": 308, "\ua0fe": 308, "\ua0ff\ua19e": 308, "\ua100\u2130\ufb68\u0e21": 308, "\ua103\u2d00\ufba8": [], "\ua109\u03b1\u143a": [], "\ua10b\u0694": [], "\ua10c\ufc94": 308, "\ua10d\ua2a1\ua061\u2c38\u0497": 308, "\ua10e": [], "\ua10e\u064a\u1cf5": 308, "\ua10f\uff85\uaa26\ua3ad\u14e5\ua160\u0e15\u1645\ua801\ufbdb\u2c4f\u1050": [], "\ua110\ufe8b\u0436\u0255": [], "\ua111\ufba0\u1483": [], "\ua112\u12b0\ua51e\uab73": 308, "\ua113\uaba3\u1f45\ua0ad\ua1d5": 308, "\ua114\ufeac": [], "\ua115": [], "\ua116\ufd22\ua060\u18e5": [], "\ua117": [], "\ua118\ua6d1\uff6b": 308, "\ua11a": 308, "\ua11c": 308, "\ua11d\ua61e\u2c46": 308, "\ua120\ufdfb\u17b1": 308, "\ua121": [], "\ua121\u0442\u02b6\ua1d4\u16f3": 308, "\ua124\u12ad\ua5eb": [], "\ua125\u0e46\u0935\u2c47": [], "\ua125\uffc3": 308, "\ua126": [], "\ua12c": 308, "\ua12d": [], "\ua12d\ua9e9\u1d02\u018d\u08b0\ua10f": 308, "\ua12e\u0d93\u12cc": [], "\ua12f": [], "\ua133": 308, "\ua136": 308, "\ua136\u2c9b": [], "\ua137\u30eb\ufe82\u1b93\u0a2b": [], "\ua139": 308, "\ua13d\ufcce\ufbdc\u0d7b\u0689": 308, "\ua13e": [], "\ua13f\uaadc\u1f35": 308, "\ua141": [], "\ua142\ua695\u03b1": [], "\ua143": 308, "\ua143\ua609\ua0cb": [], "\ua146": 308, "\ua146\u1668\u1569": [], "\ua147\u1768": 308, "\ua147\ua192": [], "\ua148": [], "\ua148\u1268\u165f\ua598\ua0e8\u14e4\u0805\u0782": 308, "\ua149\u0810": 308, "\ua14a\ua152\u18eb\ua58a\ua9b1\ufca0\ua3dd": 308, "\ua14b\u1eff\u122e": [], "\ua14c\u1f31\u124c\u072a\ufdb9": [], "\ua14c\ua305\u1f57\ufd60\u0586\u2cab": 308, "\ua14d\ufc71": [], "\ua14f\u0371": [], "\ua150\uabb2": 308, "\ua151\u076a": 308, "\ua153\u0c06": [], "\ua157\u1459": [], "\ua157\ua5e5\u0a94\u128b\ufeba": 308, "\ua159": [], "\ua15b\ua90b\uab92\u0e01": [], "\ua15f": 308, "\ua160\ua753": 308, "\ua162\u1550": [], "\ua163\ua382": 308, "\ua164": 308, "\ua166\ua03c\u1d37\u14a0": 308, "\ua167\u0159\u1470\u2148": 308, "\ua167\u0b1f\u3105\ua1b9": [], "\ua168\uaaa3": [], "\ua169\ua739\ua76b": [], "\ua16b": [], "\ua16c\u0f44\u04a1": [], "\ua16d": [], "\ua16f": 308, "\ua170": [], "\ua173\u121c\u11d6\u07a0\u1709\ua09a\uffcd\ufc1b\ua13e\u1437": 308, "\ua173\u162f": [], "\ua174\ua149": [], "\ua175": 308, "\ua178\ua01d\u0c2c\ua404": [], "\ua179\u17ae\u0577\u1b4b\u0cb3": [], "\ua17b\u03e7": 308, "\ua17d\u11da\u1652\u16bf\uab35": [], "\ua17e\u0f62": [], "\ua17e\ua5e9": 308, "\ua180\u16ca": 308, "\ua180\u1963\u072d": [], "\ua181\u1175\ufcb8\ua991": [], "\ua182\u2c37": 308, "\ua183\u2d24\uaa23": 308, "\ua184\u056c\u01ad": [], "\ua184\u105a\u0445\u172c\u2124\u0203\ua06d\u105c\u09a7": 308, "\ua186": [], "\ua186\ua90f\u0239": 308, "\ua188\u0477\ua1a0\ufccc\u0e43": [], "\ua188\u1d79\ufb71": 308, "\ua189": 308, "\ua18a\ufd24\u01a1\u0b17\ua317\u1119\ua65f": 308, "\ua18c\ufcb1\ua1ab\uaa06\u2cec\u05dd\ua059\ufc6e": [], "\ua18d": 308, "\ua18d\ua987": [], "\ua18e": 308, "\ua18e\ufe7f": [], "\ua18f\ua2eb": [], "\ua190": [], "\ua191\u0177\u0d09\u0583\u116f\u1238\u1218\u1ee1\u0ead": [], "\ua192\uabb1": 308, "\ua194\u00f0\u2cc3\u3118\u0648\u0f89\ua576\ua17f": [], "\ua194\ua75f\ufc5e": 308, "\ua195\uaa22\u1fe3\ua9b0\u1424\ua5a6": 308, "\ua196": [], "\ua198": [], "\ua198\ufbf9\u17ac\ufcb1": 308, "\ua199\u305f\u18c7\ufbe1\u0da1": 308, "\ua19a": 308, "\ua19b\uff6f\ufc34\u0e05": 308, "\ua19c\u0f59": 308, "\ua19d\uff5a": [], "\ua19e\u14c7\ua78c\ua344\u0c9c\u0e03\u310e\u0638\u0254\u0d30": [], "\ua19f": [], "\ua1a0\ua486\u1871\u01f9": 308, "\ua1a3\u04ff": 308, "\ua1a4\ua0da": 308, "\ua1a4\ufcab\ua8a5": [], "\ua1a6\u0289\u1d0a\u1e45\ufeaa": 308, "\ua1a7": 308, "\ua1a9\ua011": [], "\ua1aa": 308, "\ua1ac\ua120": [], "\ua1ae\ua5fb": [], "\ua1af": 308, "\ua1b1": [], "\ua1b2": [], "\ua1b2\u2c44\u0266": 308, "\ua1b5": 308, "\ua1b6\ua765\uaa13": [], "\ua1b7\ufdf8": 308, "\ua1b8": [], "\ua1b9\u1877\u19ab\u03ae\u01da\u0455": 308, "\ua1ba\ua5c7\uabcc": [], "\ua1bb\u1996\u2dcd\ua815": 308, "\ua1bc\ua4f2\u1d9c": [], "\ua1be\u0d29": [], "\ua1bf\u172a\u0281": 308, "\ua1c0\u1286\u1593\ua0d9": 308, "\ua1c0\ud7ea\u0299": [], "\ua1c1\u1fe0": 308, "\ua1c2\u01b0\u1679\uaae7\u1e89\ua376\u1656": [], "\ua1c2\uabda\ua86b": 308, "\ua1c4": 308, "\ua1c4\u11ba": [], "\ua1c6\ufbd9\ua132": 308, "\ua1c7\uaa00\u0171": [], "\ua1c8\u129e\u1907\ufb2b\uab8f\ufb97\u2c81\u18a2": [], "\ua1c9": 308, "\ua1cb\ua312": 308, "\ua1cd\ufd65\u0b0b\u11c2\u2d95\ufc52\u0453": 308, "\ua1cf": [], "\ua1d2\u1edd\u145a\ua0a8\u15f0\ufccc\ua403": 308, "\ua1d3": 308, "\ua1d5\u1d3d\u06a1\u0631\ufbda\u115f\uabad\ufb3b": [], "\ua1d6": [], "\ua1d6\u049f": 308, "\ua1d7": 308, "\ua1d9\ua103": 308, "\ua1da\u120c\uabdc\uff84\u050f\u1f65\u0ca1\u1cea": 308, "\ua1db\ua0f4": 308, "\ua1dc\u02aa": [], "\ua1de\u1b83": 308, "\ua1df\u2cbf\u118a\uabd5": 308, "\ua1e0\u2098\ua1a8": [], "\ua1e1\u118b\u1794": [], "\ua1e2": [], "\ua1e3\ua16b\ufb21\u0d3d": 308, "\ua1e5\u1791\u2c4a\u1199\u0e22\ua46e\ua56a": 308, "\ua1e5\ua689": [], "\ua1e6\u16e0\ua936\u0e42\u0b35\u11d7\u15b1\ua22f": 308, "\ua1e8\u0b17\u1552": [], "\ua1e9\u1b47\u0113\u2cc3\u310d\uaa67\u0da7\uaa6c": 308, "\ua1eb": [], "\ua1ec": [], "\ua1ee\u1e51": 308, "\ua1f1\u1142\u11d9\ua335\uabbc\u0199": 308, "\ua1f2\uaa0c\uff81\uaab6": 308, "\ua1f3\u1e4f\u09e1\u316c\ufeab": [], "\ua1f3\u30e0\u127d\u0627\u12e9": 308, "\ua1f5\u1f80\ufe71\u10f1\u0568": [], "\ua1f6\u0724": 308, "\ua1f8\u05ea\u1b0f": [], "\ua1f9": [], "\ua1fc\ua730": [], "\ua1fd": [], "\ua1ff\ufb43": 308, "\ua1ff\ufb54\ufdaf\u1fc3": [], "\ua200\u115a\ua5a0\ua1fa": [], "\ua200\ua29e": 308, "\ua201": 308, "\ua202\u1fa1\ua3bc\ua6b6\u1d2e\u0b85": [], "\ua203\u01f5\uaaa9\ufd69": 308, "\ua204\u2dd0\u3176\u0a90": 308, "\ua205\u18e7\u153d": [], "\ua206\ud7c1": [], "\ua208": 308, "\ua20c\ua1d4\ufef4": [], "\ua20e\u0797": 308, "\ua20e\uaa4b\ua770\ua737\ua407": [], "\ua211": 308, "\ua212\uaa23": [], "\ua213\u10d6": 308, "\ua214": [], "\ua215\uff70\ua85b\u3057": [], "\ua216": [], "\ua217": 308, "\ua219\u0f57\u12a1\u0144\u0cb1": 308, "\ua21a": [], "\ua220": [], "\ua222": 308, "\ua222\ufcd8\u0517\ua863\u183b\u1f64\uffbc\u176a\ua313\u1cf3\ua75b\ua924\uaa42\u1b45\u07cb": [], "\ua225": 308, "\ua226\u1181\uff4d\ufb6f\u014b\u0b9f": 308, "\ua226\u2c9d\ua971\ufbd8": [], "\ua227": 308, "\ua227\u0849": [], "\ua228": [], "\ua229": 308, "\ua229\u16c8": [], "\ua22a": [], "\ua22b\u0c1e\u0673\u1f37\u14f0\u119a\ua761": 308, "\ua22c\u1c0a\u1da5\u30a2": [], "\ua22e\u1557\ufc5e\uaa40\ua8a6": [], "\ua22f\ufc81\u1164": [], "\ua230\u0a87\u30f9\ua6ae\ua7a7\ua38d\u18db\u1f73\u0756\ua08d": [], "\ua231\u04ad\u2dc9\u15a0\u1d40\ua10c": [], "\ua232": 308, "\ua234\u14a9": [], "\ua235\u2dde": [], "\ua235\ufefb\ua5fb\u3180": 308, "\ua237\ufefc\ua945\u14d3": 308, "\ua238\u14d4\u0dc2": 308, "\ua239\u19a9": 308, "\ua239\u2d01\ua129\ufd9e\uab84\u1e89": [], "\ua23a\u1634": [], "\ua23c\u1d3c\u2caf\ufb6d\u129c": [], "\ua23e\u12cd\u1c1e\u1024\u15f3\u2cad": [], "\ua23f": [], "\ua240\u1893\u1dab": [], "\ua241": [], "\ua243": [], "\ua243\u2d12": 308, "\ua245\u1301\ufdc0": 308, "\ua248": 308, "\ua248\ua2a7\ua992": [], "\ua24a\u3044\ua461": [], "\ua24c": [], "\ua24c\u0e32": 308, "\ua24e\ufb4e\u0451\ua787\ufef9\uff4b": [], "\ua24f\ua606": 308, "\ua250": [], "\ua252l": 308, "\ua253": [], "\ua253\u0f40": 308, "\ua254\u15e7\ufcff": 308, "\ua257\u1b93": 308, "\ua259\uab92\u11f4": 308, "\ua25a\u1412\u0477\u199a\u2d0a\u1679": 308, "\ua25c\u2c4c": [], "\ua25d\ufb6e\ufc0e\u0491\u1c5e": [], "\ua25e\ufd8f\ufc35": [], "\ua261": [], "\ua266\u1b2a": [], "\ua268\u1005\u1eed\u00f2\u2d4f\ua2c5\u02a0": [], "\ua26a": 308, "\ua26a\u1e13\u043f\u17ac\u01c6": [], "\ua271": [], "\ua273\u06a3\u11be\u2c44\u30ce\uffa8\u308b\u0b30": [], "\ua276\u1fa5\u1f36": 308, "\ua276\ua86e\u0b07\ua615\u111b": [], "\ua277\u0786\ufdae": [], "\ua277\ufe77": 308, "\ua278": [], "\ua279\ufd38\ua168\ufe85": 308, "\ua27a": [], "\ua27e\u1f94\u0c08\u0999\u16c7\u1cf1": 308, "\ua27f\u14d0": 308, "\ua280": [], "\ua281\ufd6e\u1b8b\ud7ef": [], "\ua282\u1898": 308, "\ua284\u2102\u1a4c": [], "\ua286": [], "\ua286\u1663\uab56\u02a9\ua081\u10fc\u2c53\ua27c\ua0ca\u1a2d": 308, "\ua288": 308, "\ua28a\u06a9\ufdae\u30d7": 308, "\ua28b\ua85c\u0f5d\u04c6": 308, "\ua28c\uaa75\u1834\u1495": 308, "\ua28e\u012f\u0f4a\u014d\ufd39\ua79f": [], "\ua28e\u168a": 308, "\ua290": 308, "\ua291": 308, "\ua293\u06a7\u051b": 308, "\ua295\ua612": [], "\ua296": 308, "\ua296\u07e9\u30d2\u0e2b": [], "\ua29a": 308, "\ua29b\u131b\u06bf\u1d9d": [], "\ua29e\u160b\u1f55\ua25a\ufdfb\ufd5e\ua3de\u1026\u04bb\u16df\u0f4f": [], "\ua2a4\ud7e2\u1357\u1187\ufb06\u1ef1\u0aab": 308, "\ua2a5\u00e5\uab13\u3140\u0148\u1b86\ua774": 308, "\ua2a5\ufc63": [], "\ua2a6\u1961\u1c14\u02bc\u3175\u1bc0": 308, "\ua2a8\u10df\u1731\uaadb\ua5d6": 308, "\ua2a8\u1225\ua5c8\u1f78": [], "\ua2a9\u1228": 308, "\ua2aa\ua891\u1332\ua98e": 308, "\ua2ab": 308, "\ua2ac": 308, "\ua2ad\u0235\u12c8\uabb8": 308, "\ua2ae\u01c9": [], "\ua2b0\u0e94": [], "\ua2b0\u1d9a": 308, "\ua2b1\u04c8\ua609\u063b\u18c4\u15f9": 308, "\ua2b2": 308, "\ua2b2\ua919\u03fb\u03e9\u127c": [], "\ua2b3\u03f0\u15c5\ua72d": [], "\ua2b3\ua3f9\u1432\u1299\uab7f\u1576\u1bcd\ua2bf": 308, "\ua2b4\u051f\u12a4\u1d59": [], "\ua2b5": [], "\ua2b6": 308, "\ua2b6\ufd38\u1504": [], "\ua2b8": [], "\ua2ba\u0abd\ufca5\ua0e7\u149f\u1f12": [], "\ua2ba\ua318\ua0bf": 308, "\ua2bc": 308, "\ua2bc\u1456": [], "\ua2be": 308, "\ua2c1\u0798": [], "\ua2c2": [], "\ua2c4\u1e89\u00e1\u14e1\ua01e\u31fa\u15b3\u1278\u0c25\u182d": 308, "\ua2c5\ua521\ua64b\u2cd7": 308, "\ua2c6\u11e0": [], "\ua2c7\ua91f\u04a1": 308, "\ua2c8\ua289\u15ec\u2d47\u0a59\u0dc3": [], "\ua2c9\u1497\u2cee": [], "\ua2ca": 308, "\ua2cb": 308, "\ua2cd\u0910\u18ca\u15ee\u115b": [], "\ua2cd\u0f53\ufb17\u079c\ua597": 308, "\ua2ce\ua518\u14a6\u17a2\u01d8": [], "\ua2cf\u12d1": [], "\ua2cf\ua655": 308, "\ua2d0": [], "\ua2d1": 308, "\ua2d2": 308, "\ua2d4\ua3ec\ua689\u12ff\ua284": 308, "\ua2d5": [], "\ua2d6": 308, "\ua2d6\u1537\u15d1\u189d\ufd9b": [], "\ua2d8\u1338\u0b09\uab05": 308, "\ua2d9": [], "\ua2da": [], "\ua2da\u17a8\u0d38\ufd05\ufc50\u31ff": 308, "\ua2db\u0643\u04e3": [], "\ua2dd\u1549": 308, "\ua2df": 308, "\ua2e1\ua2de\ua55b": [], "\ua2e2\ufcec\u3125\u1ebb\u1d36\u112a": [], "\ua2e3\ua591\u1875": 308, "\ua2e4\u0515": [], "\ua2e5\ua40f": [], "\ua2e6": 308, "\ua2e6\u1461\uaa8a\u121e\u14da\u11cf": [], "\ua2e7": 308, "\ua2e7\u03cb\u172e\u1e71": [], "\ua2e8": [], "\ua2e8\ua246": 308, "\ua2e9\ufb3e\ufd23": [], "\ua2ea\u0103": [], "\ua2ea\u18ce": 308, "\ua2ec": 308, "\ua2ee\u2c4c\u1f57": [], "\ua2ef": 308, "\ua2f1\u1edb\u1bbe": [], "\ua2f2\u10ea\uff91\ua257": [], "\ua2f2\ua1cc\u3067": 308, "\ua2f5": 308, "\ua2f6\u0710\u1419\ua4f5": 308, "\ua2f7\u06a1\u2c74\u0e01\u30a9\u0217\u1636": 308, "\ua2f8": 308, "\ua2f9": [], "\ua2fb": 308, "\ua2fc\u1781\ufec7\ua467": 308, "\ua2fd\uaae5": [], "\ua2fd\ufd3b": 308, "\ua2fe": [], "\ua302\u2dd5": [], "\ua303\ua352\u01ff\u2d01\u1eed": 308, "\ua304": 308, "\ua308": 308, "\ua30a\u078e\ua11c\u12d5": [], "\ua30c\u1610\ua649\u107d\u3043\u1207": [], "\ua311\u020d": [], "\ua313": 308, "\ua315\ua480": 308, "\ua316\u1599\ufc56\u188a": 308, "\ua316\u2c93\ua381\u18a3\ua48c": [], "\ua317": [], "\ua318\ua3a1": [], "\ua319\u3129": 308, "\ua31b": [], "\ua31c": [], "\ua31d": 308, "\ua31e": 308, "\ua320": [], "\ua321\u0cbd": [], "\ua323\u0a8d": 308, "\ua324\u14b0": 308, "\ua326\u067a\u14ee\ua39f\ufb66": 308, "\ua327": [], "\ua328\u110b\u15a7\u164c\u1226\u1e43\u1665": [], "\ua329\u0a17\u1f06\ua516\ufbfc\ua2a0\ua1e9": [], "\ua32bi\u2cd3\ua812\ua862\ua17c\u024b\u1e1f": 308, "\ua32e\u31f8\ua595\ua440\u062c\u044b": 308, "\ua32f": 308, "\ua330\u067b": [], "\ua330\u15ec": 308, "\ua332": [], "\ua332\u1516\ufc13\ua2c3\u15f8": 308, "\ua333": 308, "\ua334": 308, "\ua336\u178e": 308, "\ua337": [], "\ua337\u1631": 308, "\ua33a": [], "\ua33b": 308, "\ua33d\u2cb7": [], "\ua33d\ufd68": 308, "\ua33e": [], "\ua33f\u1a08": 308, "\ua340\u133c\u15b8\u1485\u1e53": 308, "\ua341": 308, "\ua342\u0f61\u130a": [], "\ua343\u0185": [], "\ua345\u189d\u1fd1\u1b85": 308, "\ua347\u1075": [], "\ua348\u0929\u028a\uaa6b\u16d5\u0d0b\ua920": [], "\ua348\u1f80\ua322\u097f\u0d7f": 308, "\ua349\ua043": [], "\ua34a\ua8a7\u1286\u0e1d\u1845": [], "\ua34d": [], "\ua34e\u1b13\ua2e4\ud7be": 308, "\ua34e\ua3f0\u1703\ua564\ua004\ufc06\u2cbb\u120f": [], "\ua34f": 308, "\ua34f\ua99a\uab38\u0153\ufe9e": [], "\ua350\u06b0\uabca": 308, "\ua351": 308, "\ua352": [], "\ua353\ua1f9": 308, "\ua354\uff4f\u210e\ua47c\u1972\u0461": [], "\ua355\u0288\u1a4a": [], "\ua355\ufd86": 308, "\ua357": 308, "\ua358": 308, "\ua35b\u1f80": 308, "\ua35c\u0ba8\u140c\ufc05": 308, "\ua35e\u30e3\ua5eb\u30ce\uff76\u1020\u0d1c\ua270\uaa98\ufce4": 308, "\ua361": 308, "\ua361\u1789\u1fb0\u0101": [], "\ua362\u2d66": [], "\ua363\u045c\u19b9": [], "\ua363\ua50b\ua54a\ua77a": 308, "\ua364": [], "\ua366\u07d7\u11b8\u1f63": [], "\ua367\u0d8c": [], "\ua368\uff87": [], "\ua36b\u0ca3": 308, "\ua36c\u06d3": [], "\ua36d\u17ad": 308, "\ua36f\uab96\u03ae\ua02c\u131d\u18c9": 308, "\ua370\u09a2\u1e09\u0c15": [], "\ua370\ua338\u021f": 308, "\ua372": 308, "\ua373\u1994\ua446\uaa9d\u045b": 308, "\ua374": 308, "\ua378\u03d5": 308, "\ua378\ua799\ua0f8\ufcda\ua353": [], "\ua379": [], "\ua379\u18e9": 308, "\ua37c": 308, "\ua37c\u14ce\u14f0\u1985": [], "\ua37d\u2c3c\ua977\u1167\ua14a\u0b93\u2c95": [], "\ua37f\u2cdf": 308, "\ua380\ufd65\u1b05": [], "\ua383\u124b\u14ac": [], "\ua384": [], "\ua384\u15c2\u1839\u0daf\u113d": 308, "\ua388\ua251\u30ff\ua3ab\u1999": [], "\ua38a": [], "\ua38b\u3033\u213c\uab39": 308, "\ua38b\ua2ca": [], "\ua38c": 308, "\ua38f\u11cd\ua3c9\u1697\u1832": [], "\ua390": [], "\ua393\u30bc": 308, "\ua396\u0493\u04a3\ua9ee\u17ab\u1529": 308, "\ua397\u1bd3\ufb7f\u170f\u31f5": 308, "\ua399\uab02\ua5bb\uabad\u1635": 308, "\ua399\ufd26\u052b": [], "\ua39a\u15ff\ua14e\u1c67": [], "\ua39a\ufeb8\ua663": 308, "\ua39e\u0266\ua216\ua347": 308, "\ua3a0\ufdf5\u00ec\u2d06\u1287\u1e4b\u0762": [], "\ua3a1": 308, "\ua3a2": [], "\ua3a3": [], "\ua3a3\u1fd2\u04f7\u1d77": 308, "\ua3a4\u1ec1": 308, "\ua3a5\u16a0\u075e": 308, "\ua3ab": 308, "\ua3ac": [], "\ua3ad": 308, "\ua3ae": [], "\ua3af\u1223\ua1a1\ufb9a": 308, "\ua3b0": [], "\ua3b0\ufe79\ua302\ua5fa\ufc80\u072a": 308, "\ua3b1\u1e35\u18f4": 308, "\ua3b3": 308, "\ua3b7": 308, "\ua3b8\u04fb\u2d0a": 308, "\ua3b9\u2cec\u1191": 308, "\ua3ba": [], "\ua3ba\u188c\u1897\ua807\uaab5\u1207\u1f93": 308, "\ua3bb": 308, "\ua3bc\u12f7": 308, "\ua3be\ua572": 308, "\ua3bf\u11ce": 308, "\ua3c0\u1137\u1b30\u1d6d": 308, "\ua3c1\u0856\u12c9\u0ede\u1c12\ua484": [], "\ua3c1\ua4fa": 308, "\ua3c3\u2dcc": [], "\ua3c4\u0f6b\u0111\u30f8\ua290\u16f2": [], "\ua3c4\ua57a\u03c4\u1023\u18b4\u1f70\uaaab\ua234\u1e8b": 308, "\ua3c7": 308, "\ua3ca": [], "\ua3ca\uaac0": 308, "\ua3cb": 308, "\ua3cd": [], "\ua3cd\u12ba\ua72f": 308, "\ua3cf\u1ee9\u2c4e\ua9a6\ufc85\u2dda\ua2d5\u1d43\u2d11\u077d": 308, "\ua3d0\u12bd": 308, "\ua3d1\u0d7b": [], "\ua3d1\uab20\u3111\uab22\ua375": 308, "\ua3d4\u2d91": [], "\ua3d4\uff95": 308, "\ua3d5": 308, "\ua3d5\ua288\u113e\ua4dc\ua0a2": [], "\ua3d6\u168d\ufba1": 308, "\ua3d7\u2dcc\u0452\ua367\u149a\u30ff\u1f81\u0263": 308, "\ua3d9": [], "\ua3da": [], "\ua3dc\u068c": 308, "\ua3de\ua544\ua749\u1321\ua09c": 308, "\ua3df\u0c06\u0729\u2c43": 308, "\ua3df\u1a07\ua16e\ua1bd\u11bf\u1c07\ua08a\u14ee\uff45\u045f\uff73": [], "\ua3e0\u1d77": [], "\ua3e1": 308, "\ua3e2": [], "\ua3e4\ua4ea": 308, "\ua3e5\ua9fc": [], "\ua3e6\u017f\u03be\u0c0e\u1053\u11ff\u0906": 308, "\ua3e7\ua09b\u07ca\u0f40\u0a08\u029b\u1472\u1766": [], "\ua3e8\u210d\u057d": [], "\ua3ea": [], "\ua3ea\u03e3": 308, "\ua3eb": [], "\ua3ed": 308, "\ua3ed\ua2c3\ua822\u1eb5\u1e71": [], "\ua3ee\ua389": 308, "\ua3f1": 308, "\ua3f2\ufeb3\ua094x\u11ec": 308, "\ua3f4\u0c89\u16f1": 308, "\ua3f5": [], "\ua3f6": 308, "\ua3f6\u1f91\ua988\u125d\u14f6\u1844\u1c0b\u0baa\u0cad\u1e98\u0c9e\ua130\u12bb": [], "\ua3f7": [], "\ua3f8\u1e79": 308, "\ua3f9": [], "\ua3fb\ua86c\u1f13": 308, "\ua3fc": [], "\ua3fe\ua74f\u2d92\uab02": [], "\ua3ff\uaaae\uab8b\u0291\u2c40": 308, "\ua401\u2d07": 308, "\ua402": [], "\ua405\ufd64\u1edf\u0c12": 308, "\ua408": 308, "\ua409\u138a\u03ac\u1484\ua2aa": [], "\ua40c\u1ebd": [], "\ua40d\u1342\ua513\u1e1b\uab34\u0d34\u2c45\u313c\u0157\uab99": [], "\ua40d\u18da\u1d70": 308, "\ua40e": 308, "\ua40e\u1540": [], "\ua40f\u06bc\u1702\ufecd\u1e21\u1693\uaa66\u0800\u1f54": 308, "\ua412": [], "\ua412\u1293\ua135\ua360": 308, "\ua413": [], "\ua414": [], "\ua416\u11b1\ua55c": 308, "\ua418": 308, "\ua41a": 308, "\ua41b\uaa7a": 308, "\ua41b\ufce0": [], "\ua41d": [], "\ua41e\u1d79\u016d": 308, "\ua421\u14e9\u1d9a\u3123\ua6c3\u12a2": [], "\ua421\ua65b\u01c6": 308, "\ua423\u3149": [], "\ua423\ua271\u0513\u02c9\u0723\u0eae": 308, "\ua425\ufed1\ua0f8\ua400\ua0b9\u0715\u124b\u12b4": 308, "\ua42b\ua3d2": [], "\ua42b\ufc5c\ufb4f\u0b21": 308, "\ua42d\ud7fb\uabbc": [], "\ua42e": 308, "\ua42f\u0914": 308, "\ua430\uabab": [], "\ua431": 308, "\ua432\ufee2\u0c8f": 308, "\ua434\u05dc\u10e5\u308e\u1280\ua334": [], "\ua435\u05e2\u0840\u0469\u2d1e": 308, "\ua43a": 308, "\ua43b": [], "\ua43c\u0242": 308, "\ua43c\u03bd": [], "\ua43d\u2d0c": 308, "\ua43f\uab14\u037d\u1280\u182a": 308, "\ua441": 308, "\ua441\u2d15\u0754\u017a\ua9ad\u1f51": [], "\ua443z": 308, "\ua444": 308, "\ua445\ua5e0": [], "\ua448\ua9ed": [], "\ua448\ufb69": 308, "\ua449\u1603\u110d\ua4d3": 308, "\ua449\ua287": [], "\ua44a\u1265": [], "\ua44b\ua737\ua158\uaa83\u1118": 308, "\ua44c\u1107\u0e0c\u11e1\u2131\ua526\u1ea1": 308, "\ua44d": [], "\ua44d\u025c": 308, "\ua44e": 308, "\ua44f\uff9e\u163e": [], "\ua450": [], "\ua452\u1112\u1a3e": [], "\ua454\ua964\u0e42\u0b60": [], "\ua455": 308, "\ua456\u11a2\u190b": [], "\ua457": 308, "\ua457\ua749": [], "\ua45a": [], "\ua45b\u05d3\ufeed\ufef6": 308, "\ua45b\ua62a\u1107\ua853\u1914\u02c9\u11d5": [], "\ua45c\ua06f\u091a": [], "\ua45f": [], "\ua461\u1469\u0123": 308, "\ua462\u1448\u18c6": 308, "\ua464\u0813": 308, "\ua465": 308, "\ua465\u1db5": [], "\ua466\u2c5a\u1642\u1e7b\u023c\uaa46\u1780": 308, "\ua467\u172d": [], "\ua468\u0159\u14b4\u03d7\ua1ef\u174a\u04ed": 308, "\ua469\ua153\u2d67\u0257\ua30e\u17a5": 308, "\ua46a\uff59\ua54b": [], "\ua46b\ufc24": 308, "\ua46d\u0802\u2d5b": [], "\ua46f\u14fc\ud7e6": 308, "\ua471\ufd36": 308, "\ua473": [], "\ua474\ua241\u03b1": 308, "\ua475": [], "\ua477": [], "\ua478\u0eab\ua118\u182e\ua2c4": [], "\ua479\u1eb7": 308, "\ua47a\ufd9e\ua3fc\uaa89\ua178\ua56c\u02ee\uaa28": 308, "\ua47b\u0579\u126a\u03ef": [], "\ua47d\ufcc6": 308, "\ua47e": 308, "\ua47f\ua9ae": [], "\ua481": 308, "\ua482": [], "\ua484": 308, "\ua486": [], "\ua488": [], "\ua489\ufc14": 308, "\ua48a": 308, "\ua48c\u090c": 308, "\ua4d0": 308, "\ua4d1\u2cc7\u1c1d\u04a3": [], "\ua4d2\u0240": [], "\ua4d3": [], "\ua4d6\ua3ef\u0268\u1c18\ua56e\u1839\u0647": [], "\ua4da\ufee3\u0b1a": 308, "\ua4dd": [], "\ua4df\u1e0f": [], "\ua4e0\u1b2f\u1ee1": 308, "\ua4e2": 308, "\ua4e4\ua653\u1685": 308, "\ua4e4\ua783": [], "\ua4e5": [], "\ua4e5\u05f0": 308, "\ua4e8\u0e24\u19b3\uffc7": [], "\ua4e8\ua89d\u079b": 308, "\ua4ea\u01ab\ua9ec\u165c\ufd87\u1658\ufb52\u1e29\u14a3": [], "\ua4ec": 308, "\ua4ec\u1417\ua572\u1625\ua468\u1858\u0201\ua26e\ua1ce\ua068\u106e\u1301\ua020": [], "\ua4ed\ua138\u1f37\u0473": [], "\ua4ee\u1241": [], "\ua4ef": 308, "\ua4ef\u124d\u1250\u10e6\uabe1\u2d00\u14a5": [], "\ua4f0\u1d55\ua281": 308, "\ua4f1\ufbde\u1fe6\u130d\u03cd\u1244\ua8a1\u014b\ua65f\u03bb\ufd7e\u1454\u052f\ua592": [], "\ua4f2\u0a74\u1d6e": 308, "\ua4f6\u0587": [], "\ua4f7\u1f84": [], "\ua4f8": [], "\ua4fa\u1e4b": [], "\ua4fc\u072f\u0446": 308, "\ua4fc\u1e2b": [], "\ua4fd\ua520\u0452\u2ccb\ua0dc\ua729": [], "\ua501\u0115": [], "\ua503": 308, "\ua504\ua422\ud7b5": [], "\ua505\u0d9a": [], "\ua506\u057f": 308, "\ua506\u2d32\u1f82": [], "\ua509": [], "\ua50a\ufed8": [], "\ua50b\u18c6": [], "\ua50c\ufcb5\ufcd5": 308, "\ua50e\u148c": 308, "\ua50f": [], "\ua512\u0aa4": 308, "\ua514v\u01ff\u1894": 308, "\ua516": 308, "\ua517\u1b0f\ufc1a\ufc64\u1356\u1fe1": 308, "\ua519": [], "\ua51b\uff93\u1521\u04fb\u2091\u0d90": [], "\ua51c\u178f\u170b": [], "\ua51d\uaa46\u1d39\u1f42\u1ea9\u1d8a\ua0e3g\u16b1\u0678\u1843\u00fd\u0260\u1b96": [], "\ua51e\uaa45": [], "\ua521\u0e2e\u0a2e\u06fa\u1bcb\u318d\u09f0": [], "\ua522\u03df": 308, "\ua525\uaa60\u1d4b\u09dc\u1d8b\ufb53\u1fd7": [], "\ua527\u306c\ua599\ua817\u0ba8": [], "\ua529\u105b\ufe73\ua6c9\ufd37\u1452": [], "\ua52b\u10e9\ufdf0": 308, "\ua52c": 308, "\ua52d": [], "\ua52f\ufb5b\u00ec": 308, "\ua530\u14a4": 308, "\ua530\ua857\u06d5\u2c5bs\ua35d": [], "\ua531": 308, "\ua531\ua8b1\uab98\u0475": [], "\ua532\uaa63\u0f60\u1edb": 308, "\ua532\uabc7\ufc45\u15af\u14df\ua604\u313f\uaabc": [], "\ua534\u1db7": [], "\ua536\u0433\u0273\u12c0\u13fb\u0a73\u04fd": [], "\ua539": 308, "\ua53a\u1fb0\ua745\ua2bd\u080f\uaba6": 308, "\ua53c": [], "\ua53d": [], "\ua53e": 308, "\ua540": 308, "\ua540\ua542\u1a4e": [], "\ua541\ua12c": [], "\ua545\u10fd\ua86d\u153f": [], "\ua547\u1242": [], "\ua549\ua5cd": [], "\ua549\ud7cd\u1644\ua2e0": 308, "\ua54b\ufcc1\u189a": 308, "\ua54e": 308, "\ua550\uabd8\ufe8a\u1fc3\ua032\ua80c\u0b93": 308, "\ua554\ua0fe\ua15a\u1110": [], "\ua555": [], "\ua556\u12c8": [], "\ua557\u3089\ufc24\u1f21": [], "\ua558\uffa5\ufcf4": 308, "\ua55a\u022f\ua111\u1d28": 308, "\ua55d": 308, "\ua55f": 308, "\ua561\ua1fb\ufcc3": 308, "\ua563": [], "\ua566\uff58\u0575\u1746": 308, "\ua567\u029e\u1897\u0621": [], "\ua567\ufd0d": 308, "\ua569\u03f1\ua6db\u04b9\ufee0\u15d8": 308, "\ua56b": [], "\ua56c\ua9e6\u1903": [], "\ua56d\u10d5": 308, "\ua56e\u00f9\ufb94": 308, "\ua56f\u1080": [], "\ua570": [], "\ua573\ufd59\u0f5c\ua439\u01e9\u125c\u12a4\ua108\ua267": 308, "\ua574": [], "\ua574\ufbe3\u15d0": 308, "\ua577\ua898": 308, "\ua577\ufe74": [], "\ua579": 308, "\ua57c\u3048\uaabb\u020f\ufec0\u144c": [], "\ua57e\u2d50\u153f": 308, "\ua57e\uff8d\u1a01": [], "\ua57f\ud7d9": [], "\ua582\u0a36": [], "\ua583\u1750": 308, "\ua585\u155a\u19b0\u14c1": [], "\ua586\u056e\u0685": 308, "\ua586\ua598\uab64\u1f76\u2c43\u10dc\ufe9d\ua3c8\ufd95\u11f6": [], "\ua587\u05d0\uab09": [], "\ua588": [], "\ua589": 308, "\ua58c": 308, "\ua58c\u1f05\u1195": [], "\ua58d": 308, "\ua58e\u188f": 308, "\ua591\u2c30\uab76\ufb5e": [], "\ua593\u0994\u3035\u196d\u03bd\u315b\uff4d": [], "\ua593\u1674\ua58b\u2d47\ufd08\ufd2f\ua4f7\u0436": 308, "\ua595\ua40b\u1498\u0976\u0d9e": [], "\ua596\ud7f8": 308, "\ua59a": 308, "\ua59b\u11ea\u1253": 308, "\ua59c\ua747\u1fa7": [], "\ua59e\u03ce\u0bb9": [], "\ua5a2\ua5b4\ua6ce\ua2f3\u2d45\u0776": 308, "\ua5a4\ua9fa\ua204\u1ed5": [], "\ua5a4\ufcf0": 308, "\ua5a8\u154b": [], "\ua5aa\ufda8": [], "\ua5ab": 308, "\ua5ab\ua27c\u0107\ufc17": [], "\ua5ac": 308, "\ua5ae": 308, "\ua5af\ua29a": [], "\ua5b1\ua741\u2cec\u0d24": [], "\ua5b2\u213e\u1d06": [], "\ua5b4\uabc8\u1544\u0129": [], "\ua5b5": [], "\ua5b7\ua5d3": 308, "\ua5b8\u1a08\u3086\u0e9f": [], "\ua5bb\ua16f\ufc53": [], "\ua5be\u132f": [], "\ua5bf\ua6e3\ua9e4": 308, "\ua5c0": 308, "\ua5c0\u156c": [], "\ua5c1\u0cf2\u0dae\u1f66\u3135\ua606\ua820\uaa01\ufc1d\u1e8f\u1384": [], "\ua5c3\u1e6b\u0571": 308, "\ua5c4": 308, "\ua5c5\u00ed\u08af\u1135\ufecf\u1fd0\ua4db\ud7f7\u1d62": [], "\ua5c6": 308, "\ua5c7\ua520\ua029": 308, "\ua5c9\ua79d\u0cb2": 308, "\ua5ca": [], "\ua5cb": [], "\ua5cc": 308, "\ua5ce": [], "\ua5d0\u186f": 308, "\ua5d1": 308, "\ua5d1\uff4a": [], "\ua5d3\ua258\ua3cf\u0990\u1002\u03c4\ua04a\u0280": [], "\ua5d5\u0b09\ua741": [], "\ua5d6\ua319\ufba1\u170c\ufb84": [], "\ua5da": [], "\ua5da\u18bb\u0b28\ua249\u2184": 308, "\ua5db\ua71d\u2c49": 308, "\ua5dc\u052b\u0e99\ua2e9\ua8f4": 308, "\ua5dd": 308, "\ua5de": 308, "\ua5e1\u03b3": [], "\ua5e2": [], "\ua5e4": 308, "\ua5e6\ua913": 308, "\ua5ea\ud7dd\ufda3": [], "\ua5ed\u1e96\u3152": 308, "\ua5ed\ua683": [], "\ua5ee": 308, "\ua5ee\ua218\u07fa": [], "\ua5f4": 308, "\ua5f5": [], "\ua5f5\u117a\ua3aa": 308, "\ua5f6": [], "\ua5f7\ufb8cq\u0271": 308, "\ua5f8\ua039\u1a11": [], "\ua5f9\u160a\u30aa": 308, "\ua5fc": 308, "\ua5fd\u06ba\u1583": 308, "\ua5fe": [], "\ua5fe\u072b\u1798\u1a35\ua537\ua44f": 308, "\ua5ff\ua859": 308, "\ua600\u0f8c\u150e": 308, "\ua601\u1eb1\u189c\u0b37\ua117\u191a": 308, "\ua603\u0846": 308, "\ua604\ufdb9": 308, "\ua605\uab29\u31b5": [], "\ua607\u0635": 308, "\ua607\ud7c3": [], "\ua60a": 308, "\ua611\ufc92\u1603\ua989": [], "\ua614\uabd0\ua97b\u168b\u2c48": [], "\ua617\ua8a4": [], "\ua618\u2d4c": [], "\ua619\ufbf5\ua36e": [], "\ua61a\u1f7a": 308, "\ua61b": [], "\ua61c": 308, "\ua61c\ua6cc\u168a": [], "\ua61e\ua515\u02d0\u1170\ua73d": [], "\ua61f": [], "\ua641": 308, "\ua641\u135a": [], "\ua641\u2d67": [], "\ua643": [], "\ua643\u1501": 308, "\ua645\u143b\u161f": [], "\ua647": [], "\ua649": 308, "\ua649\ua2a7\u1849\u0f63\u1d25": 308, "\ua64b": [], "\ua64b\ua424\u1834\u1066\u3095": [], "\ua64d": [], "\ua64f\u1da6\ud7bd\ufcd6\u01d2\u1318": [], "\ua651": 308, "\ua651\u1868\ufb39\u0f66\u1f04": 308, "\ua653": 308, "\ua655": 308, "\ua657": 308, "\ua657\ufbf6\ufee1": [], "\ua659\u0b2d\u1e15\u0857": 308, "\ua65b": [], "\ua65b\u1edf\u1966": [], "\ua65f\ua166\u049b\u0f5b": [], "\ua661\u1077": [], "\ua663": [], "\ua663n": [], "\ua663\u112a\ua4d6": 308, "\ua665": 308, "\ua665\ua338": [], "\ua667\u03c9": [], "\ua667\u1b2f\u1763\ua242": [], "\ua669\u11fc": 308, "\ua669\ua98a\u1081\u1252\u1160\u2d4a": 308, "\ua66b\ua183\u3070\u1267\u1ee5\ufd01\u1bcf\uab5a\u123e": [], "\ua66b\ua814\u1175\u176c\u0c2e": 308, "\ua66b\uaa1f\ufe9f": 308, "\ua66d": 308, "\ua66d\ufd1a\uaae1\u0c10\u1645": 308, "\ua66e": 308, "\ua67f": 308, "\ua681": 308, "\ua681\u10eb\ua3dc": [], "\ua683\u1782": [], "\ua683\ua202\u176b": 308, "\ua685\u1496": 308, "\ua687\ufd18\ua523\uffcd\u0645\u056d\ufbef\u07e0\u0ab0\u0cae\u1d70": [], "\ua68b\u1b31\u1553": 308, "\ua68b\uab0b": 308, "\ua68d\u14e0\ufc0b\ufc34": [], "\ua68d\u162a\ua61d\u0b27\ua74f\ua17d": 308, "\ua68f": 308, "\ua68f\ufcc2\u1025\u1e95": [], "\ua691\u12f0\u16e8\ua749\uaa21\u0921\u06a7": [], "\ua693": 308, "\ua695": 308, "\ua699\uaa89\ufee4\ua963": [], "\ua69b": [], "\ua69c": 308, "\ua69d\u1821\u1969\ua30f\u09a7": [], "\ua6a0\u091f\u3044\u0a32\ua24a\u1980": 308, "\ua6a2\u0261\ufeaf\u063d": 308, "\ua6a3": 308, "\ua6a3\u2c56\ua71b": [], "\ua6a5\uff8b\ufda2": 308, "\ua6a7\u3077\u043a": [], "\ua6aa\ua2f4": [], "\ua6aa\ufd3a\uff43": 308, "\ua6ac": [], "\ua6af\u0125\u11f3\u14cd\u1c66": [], "\ua6b0\u04b1\ua3d3\u1918\u0918\u2d8d\u1333\ua426\u1f14": [], "\ua6b1\u304f": [], "\ua6b2\u0459": 308, "\ua6b3": 308, "\ua6b4\u077a": [], "\ua6b5\ua2b8\u1b20\u1fb7\ua849\u0937\u0c2f\ua37e": 308, "\ua6b6\u1889\u14f2\u1f26": 308, "\ua6b7\u11b6\u1d83": 308, "\ua6b8": [], "\ua6bap\u0229": [], "\ua6bb": [], "\ua6bb\uff71\u2c83": 308, "\ua6bc": [], "\ua6be\u0d8e\uff86": 308, "\ua6bf\u1f26\ua0db\ua3ff": [], "\ua6c0\u15cd\u2c3e\ufd33\u09b2e\u2ce3\ud7b9\u133f": 308, "\ua6c1": 308, "\ua6c3\u068e": 308, "\ua6c5": [], "\ua6c5\u15d1\ua073": 308, "\ua6c6\u0850\u176e\u15f4": [], "\ua6c7\ufc10\u02b2\u099a": 308, "\ua6c8": 308, "\ua6c8\u0163": [], "\ua6ca\u0a26": [], "\ua6ca\uaaad": 308, "\ua6cb\ua8fb": 308, "\ua6cc": 308, "\ua6cd\u1597\u02ba": [], "\ua6ce\ua921": [], "\ua6d2": [], "\ua6d3\uab89\ua404\u1d93": 308, "\ua6d4": 308, "\ua6d5": [], "\ua6d5\ua80f\u02c7\u0a13\u1013\u2cb9\ua843\ua40b": 308, "\ua6d7": [], "\ua6da\ua15d\u1104\u1d52\u3184\ufbf7\uff4c": [], "\ua6db": [], "\ua6dd\u1728": 308, "\ua6de\u1f7d\u2c30\ua787\u0978\ua973\ufb72": 308, "\ua6df": 308, "\ua6e0\ua25c": 308, "\ua6e1": [], "\ua6e2\ua536\u024f\u1eff": 308, "\ua6e4\u138d": [], "\ua6e4\ua771": 308, "\ua6e5": 308, "\ua717": [], "\ua718\u2ca3": 308, "\ua719": [], "\ua719\u1150": 308, "\ua71a\u31b0\ufb5f\u03bf": 308, "\ua71b\u10f2\uff57\ua417\u2c83\ua99c": 308, "\ua723": [], "\ua725\ua8af": [], "\ua727": [], "\ua729": 308, "\ua72b": [], "\ua72b\u0e45\u0853\u2d45\u2137\ua8ab": [], "\ua72b\u156f\ua647\ua231\ua588\u01ef\ua777": 308, "\ua72d\u019a\ufc9aj\u013c": 308, "\ua72d\u0211\u078b\ufca2": [], "\ua72f": [], "\ua72f\ua84c\ua15e\u0e96\ufc54": [], "\ua730\u1521": 308, "\ua733\u1581\u0b1f\u0d12\u10e1": 308, "\ua735\u0437\u31f9": [], "\ua735\u1407\ua8a9": 308, "\ua737\u050f": [], "\ua739": [], "\ua73b\u0250\u182b\u06b3\u1296\u0263\u1ea5": [], "\ua73b\u157c": 308, "\ua73d": 308, "\ua73d\ua0a7": 308, "\ua73f": 308, "\ua743": 308, "\ua743\u1da3\ua510\u0d3a\u1789": 308, "\ua745\u12fc": [], "\ua74b": [], "\ua74d": 308, "\ua74f": 308, "\ua751\u16e4": 308, "\ua751\u2db1\u01b9": [], "\ua755\u10ef": [], "\ua755\u1a10\u016d": 308, "\ua757\u0c89": [], "\ua757\u1467\u1570": [], "\ua759\ua452\u06d0": 308, "\ua759\ua613": [], "\ua75b": [], "\ua75b\u120a": 308, "\ua75d": [], "\ua75d\ua74d": 308, "\ua75f": 308, "\ua763": 308, "\ua767": 308, "\ua767\ua7a1\u1a2a": [], "\ua769": [], "\ua76b": [], "\ua76f\u0434\ua552\u19be": [], "\ua76f\u2cc1\ufedd\u06b5\u3113\ua3bb": [], "\ua76f\ua005\ua3e0\u16af": 308, "\ua772": 308, "\ua77a\u03c5\u16e8": 308, "\ua77c": 308, "\ua77f\u06a6": [], "\ua77f\u0d89": 308, "\ua77f\ufc7f": [], "\ua781\ua667\u157e\u1d48": 308, "\ua783\u19b5\ufd63\ua0b8\ua96d": 308, "\ua785": [], "\ua785\u0574\u11e5": 308, "\ua785\ua406\u1b96\ua327": 308, "\ua785\ua60b\uaadb\ufce4\u1f60": [], "\ua787\u04dd\u174d": 308, "\ua788": 308, "\ua78e\ufbd4": [], "\ua791\u105c\u0431": [], "\ua791\u1667\u0f47\uabd3": [], "\ua793u\u1f78": 308, "\ua793\u01e5\u1d63": [], "\ua793\uaa1d\ua9e1": 308, "\ua794": 308, "\ua795\u1971\u1d40\u0523": 308, "\ua797": 308, "\ua799\u03c1\ua4d2": 308, "\ua799\u1f64": [], "\ua79b\u311c\ufdf2\u1d3a\u0927\u1fe6\ufc7c\ua2ee\u2caf\ua509p\u01e7\ua917\ua610\u14ca\u1577": 308, "\ua79f": 308, "\ua7a1\ufc02\ufd2c\ufb35": [], "\ua7a3\u0d08\u080d\u1bcd": [], "\ua7a3\u1e11\u16b8\u1321\uff9a\u0d33": [], "\ua7a3\ua001\ua890\u0756": 308, "\ua7a5\u03c9\u02ce\u14bd": [], "\ua7a5\uaa41\uaaa3\u1308\u170c": 308, "\ua7a5\ufbe8\ua2f9\u155d\u0e95": 308, "\ua7a7\u057a": [], "\ua7a7\u1075\ufd10\u1953\u0d29\u068f\u132b": 308, "\ua7a7\u2c8d\ua385\ua765": 308, "\ua7a9\ua859\ufb8b\u00fa": [], "\ua7f7": 308, "\ua7f8": [], "\ua7f8\u1464": 308, "\ua7fb": [], "\ua7fc": [], "\ua7fd\u1974\u0b16\u153c\u1da0\ua1c7": 308, "\ua7fd\u312c": [], "\ua7ff\u16d9": [], "\ua800": [], "\ua800\u2cdf\u1e69": 308, "\ua801": 308, "\ua803\ua984": 308, "\ua809\u30af\ufc4c\ua297\u03cc\u183a": 308, "\ua80e": [], "\ua80e\ua919": 308, "\ua811": 308, "\ua812\u190d\u213f\u113b\ua4e3": [], "\ua814": [], "\ua816": [], "\ua816\u01d2\u1502": 308, "\ua818\u308d\u0c1d": [], "\ua81b\ua376": 308, "\ua81c": [], "\ua81d\u11ad\u0844\u30b8\ua07c\u18d6\uaa7f\uabaf": [], "\ua81d\ufb7d\u1614\ufbe0": 308, "\ua81e\u115a\ua205\ua968\ua99a\u1ce9\u07e4": 308, "\ua81e\u160c": [], "\ua81f": 308, "\ua820": 308, "\ua841": 308, "\ua842": [], "\ua843\ua6cb": [], "\ua845\ufbea\ua11d": [], "\ua846": 308, "\ua847\ufedb": [], "\ua848\u16d9": 308, "\ua849\u0f58": [], "\ua84a": [], "\ua84a\ua087\u1a45": 308, "\ua84b\u2c5d": [], "\ua84c\u03ed": 308, "\ua84d": [], "\ua84d\ufbeb": 308, "\ua84e": 308, "\ua84f": 308, "\ua84f\uabb5": [], "\ua850": [], "\ua850\u0579\u2c68": 308, "\ua853\u1d5f\ua524\ufd5b\u1c1a\ua009": 308, "\ua854": [], "\ua855\u0b2b\uff4e\u1423\u1d3f\u0e0d\ufeb4\u1186\ua309": [], "\ua856\ua869": 308, "\ua858\u01d6": [], "\ua85d": [], "\ua85f\uaa18": [], "\ua862": [], "\ua863": 308, "\ua864\u057a\ua28f\u0173\u15b4\ua057\ua885": [], "\ua864\ufd6b": 308, "\ua865\u1523\ua62b\ua373": [], "\ua866\u1616\ufcec\u2d15": 308, "\ua867": 308, "\ua868\ua8a3": 308, "\ua868\uab16\u057e\u1e99\u019a": [], "\ua86a\u1eed\u019b": 308, "\ua86c\u1c08\ufb8e": [], "\ua86e\u0253\uaa20": 308, "\ua870": 308, "\ua873": 308, "\ua882": [], "\ua882\ua723\u1171": 308, "\ua883\ua19c": [], "\ua884": 308, "\ua884\uff43": [], "\ua886\u097d\u1d95": [], "\ua887": [], "\ua889\u1e19\u0b08\ua072": 308, "\ua88a": 308, "\ua88d\u021d": 308, "\ua88d\u075e\u00fb": [], "\ua88e\u1f67\u1b16\ua8a8\ua026\ufbfd\u1b1d\u1288\u1f35\u1b12\ua68f\u0db6": [], "\ua88f\u0914\ua848": [], "\ua891": [], "\ua892\ua00b\u1209": [], "\ua893\ua993": 308, "\ua893\ufc29\u1b1c\u14ec\ua416": [], "\ua894": 308, "\ua895": [], "\ua896\u1fa6\u0101": 308, "\ua896\u2d0f\u04eb\u1867": [], "\ua897": 308, "\ua89b": [], "\ua89b\u307f\ua61b\u30c4\u2cb1\u09b6\u119e\u0a5e\uab16\u150b\u1c66": 308, "\ua89c": 308, "\ua89e\u0807": [], "\ua8a0\ufc6a\u167f": 308, "\ua8a1\ua38f\u122d": 308, "\ua8a2\u12b2\u19c4": 308, "\ua8a2\ua89a\u00f9\u1c5f\ua53b": [], "\ua8a3": [], "\ua8a5\uff7e": 308, "\ua8a6\u00fd\ua992\u04e1": 308, "\ua8a8\ua937\ufeca\u1b17": 308, "\ua8a9\ua661\u1283": [], "\ua8ab": 308, "\ua8ac": 308, "\ua8ac\uaa98\u06c7\u11f7\u2d86\u029e\u31a2": [], "\ua8ad": 308, "\ua8ad\uaa28\u0793": [], "\ua8ae\u0256\u02e3\u1fe0\u01c0": 308, "\ua8af\uab12\ua162\u1fb2\u2c39": 308, "\ua8b0\u19c7": 308, "\ua8b2\ua0f7\u1786\u2c3e": [], "\ua8b2\ufd09": 308, "\ua8b3\u1d7d\ua199\ua5cc\ua723\ufc2d\ufeb3\ua3e1": [], "\ua8f2": [], "\ua8f2\u0e44\u02ae\u00e3\u1166\u2d1b": 308, "\ua8f5\uaae5\ufe9d": 308, "\ua8f6\ua07d\u2ca7": [], "\ua90b": 308, "\ua90c\ufd15\ua5ff\ufb2d\u02cf\ua81b": [], "\ua90d": 308, "\ua90d\u0148": [], "\ua90f\ufec3\u1894\u0495\u0295\u16f5\ud7d2": [], "\ua910\u1b0a\u1e29": 308, "\ua912\u146a": 308, "\ua912\ua104": [], "\ua913": [], "\ua914\u1f43\u2d14": [], "\ua916\u131a": [], "\ua918\u3080": [], "\ua91b": 308, "\ua91c\ua77c\u2c36\ua64f": [], "\ua91d\u0578": [], "\ua920\ud7b4": 308, "\ua922": 308, "\ua923\u0909\ua655\ufb9c": [], "\ua930\ua45d": [], "\ua931\ua2fb\u18ee\u1e1f": [], "\ua933\uaa1e": 308, "\ua934": 308, "\ua934\u1f24": [], "\ua935": [], "\ua936\u06a0": [], "\ua937": [], "\ua938\u11dd": 308, "\ua938\uab9b": [], "\ua939": 308, "\ua93a": [], "\ua93a\uabb6": 308, "\ua93c\u0b88\u11a1\u1675\u18dc\ua068": 308, "\ua93c\uaa93\u11d6": [], "\ua93d": [], "\ua93e\u10e7\u126d": 308, "\ua93e\ud7cd": [], "\ua93f\ua9e8\ua4e0": [], "\ua940\u1432\u1646\u095d\u1c61\ufc76\u01a1\u2c71": [], "\ua943\u092d\u15fe\ua04e\ua510\u30c1\u06ae\ua88c\ufb70\u210f": [], "\ua946\u03bc\ua093": [], "\ua946\ua987\u1f43\u150d\u1619\u1730\u1dbc\u062b\ua3a7\ua3b4\u30d8\u0682\uabab\u0b39": 308, "\ua960\ua481\u1386\u0843\ua099": [], "\ua962": 308, "\ua962\u2c5c": 308, "\ua964\u1591\u0e88\u1ecb": 308, "\ua965\ua0ee\u19a6\u2c7d\ua163": [], "\ua967\u211b\u1dbc\ua336": [], "\ua968\ufc4c": [], "\ua969": 308, "\ua969\u31f3\u02c6\u0814": [], "\ua96a": [], "\ua96b": 308, "\ua96c": [], "\ua96d\ua9a2\u0c85\u2d31": [], "\ua96e\ua9a0\u1129": 308, "\ua971": 308, "\ua973": [], "\ua974": 308, "\ua976": 308, "\ua977\ua98b\u0ba3": 308, "\ua978": 308, "\ua979\u1ecb\u3006": [], "\ua97a\u0e44": [], "\ua97c\uffa7\ua539\u1239\ufc14\ua0c2\u12a3\u1315": [], "\ua986": [], "\ua988\u1337\ua137": 308, "\ua989\u179e": 308, "\ua98b\u0115\ua1d0": [], "\ua98c\u04a1\ua5c8\ufd26\u1637\u183f": 308, "\ua98d\ua29d\ua38e\u098b": [], "\ua98f": 308, "\ua98f\ufe9c\ufdad": [], "\ua990\ua727": 308, "\ua991\u10d8": 308, "\ua993\u164a\u0525\ua0e0\u00ee\u0272\u075d\u074f\ufe83": [], "\ua995": 308, "\ua996\ua3be\u1d6a": [], "\ua997": 308, "\ua997\uaa82\ua5fa": [], "\ua999": [], "\ua999\uab80\u0a38\ua23e\ua1b3\u2cc1\u0f58\ua5bd\u11de": 308, "\ua99b\u1503\u1e65": 308, "\ua99c": [], "\ua9a0": [], "\ua9a1\u0d23\u2d5d": [], "\ua9a3\ua2c1": 308, "\ua9a4": 308, "\ua9a4\ufda6\u1692\ufb50": [], "\ua9a5\ua349\u0e84\u03d2\u2c55\u1ef5": 308, "\ua9a8\u1725": [], "\ua9a9": 308, "\ua9ab\u051b": [], "\ua9ab\u1328\u1401\u1565\u1425\u12a5\ua0f1\u11cc\u04df\u212c": 308, "\ua9ac\u2c3a": [], "\ua9ad\uabe2\uffcb": 308, "\ua9b1\u178b\u0a90": [], "\ua9b2\u1446\u1c09a\u063c\ua500": [], "\ua9e2\uaba2": 308, "\ua9e3": [], "\ua9e7\u0b1e": [], "\ua9e7\u2d0e": 308, "\ua9e9": [], "\ua9ea": 308, "\ua9ed\uab94\u0725\ufcbb": 308, "\ua9fa\u1d8f\u0696\u0115": 308, "\ua9fb\uabcb\ufd0c\ua3fe": 308, "\ua9fc": 308, "\ua9fd\u112f": 308, "\ua9fe": [], "\ua9fe\u08af\uffd3\u30ab": 308, "\uaa00\u16be\ua18f": 308, "\uaa01\uab7d": 308, "\uaa03": [], "\uaa03\ufe7b": 308, "\uaa04\ufeb0": 308, "\uaa06": 308, "\uaa07\u04cf": [], "\uaa0a\u1910\ufd04\u045c\u14da\ua07e\ufbfc": 308, "\uaa0b": 308, "\uaa0f": [], "\uaa11": 308, "\uaa12": 308, "\uaa12\u2dd6\u00f4\ua54a": [], "\uaa13\u0183\ua5b6": 308, "\uaa14\u1d8c\u1330\u0e17": [], "\uaa15": [], "\uaa15\u2c50\u0567": 308, "\uaa16": [], "\uaa17\u1827": [], "\uaa18": 308, "\uaa19": [], "\uaa19\ufc0d\u130a": 308, "\uaa1a": 308, "\uaa1c\uab5a": 308, "\uaa1d": [], "\uaa25\u1f71\u0cab\u162d\ua28d": [], "\uaa41\u1d5b\u01c1\u2d25\u0a07": [], "\uaa42\u028a\ua131\u310c\u1d56": 308, "\uaa44\ua415\u1339": 308, "\uaa45\u0a24": 308, "\uaa47\u1da5": 308, "\uaa49": 308, "\uaa4a": [], "\uaa61\ufd58": [], "\uaa64\uff76": [], "\uaa65": [], "\uaa66\ufb98": [], "\uaa68\ua5d5": 308, "\uaa68\ufcd4\u0815": [], "\uaa69": [], "\uaa6a": 308, "\uaa6e\u0509\u1646\u308e\u0295\u14b7": 308, "\uaa70": 308, "\uaa71\u01bf": 308, "\uaa73\u0436\u0b38": [], "\uaa73\ua018": 308, "\uaa75": [], "\uaa76\u06ba": [], "\uaa7a": [], "\uaa7e": [], "\uaa7e\ua18c": 308, "\uaa7f\u02b5\u2d02\u191e\u2d84": 308, "\uaa80\u04ca\u01ba\ufc26\ua2c8\u15b6": 308, "\uaa81\u0282\uab0c\ua181\u2d13\uff4d\u0446": 308, "\uaa84": 308, "\uaa85": 308, "\uaa86\u159f": 308, "\uaa87\u1fb0\ua13d\ua6be": [], "\uaa87\ufd1e\ua994\ua5e2": 308, "\uaa8c": 308, "\uaa8c\u099c\ua48a": [], "\uaa8f": 308, "\uaa8f\u10de\ua6c1\u2139\ua23d\ua852\u1799": [], "\uaa90": [], "\uaa90\u1dac\u11cb": 308, "\uaa91": 308, "\uaa93": 308, "\uaa94": 308, "\uaa94\u0250": [], "\uaa96\u0390": 308, "\uaa96\u1065\u15d4\u1fa3": [], "\uaa9b\u18a0": [], "\uaa9c": 308, "\uaa9e\u045a\u2da8\u07d0\u1313": 308, "\uaa9f": [], "\uaa9f\ua380\ua289\u0463\ua233\u057c\u156b": 308, "\uaaa0\u12ac\u0e2d\ua0c1": [], "\uaaa2": 308, "\uaaa4\uabd6": 308, "\uaaa5\u02cc\u1f90": 308, "\uaaa5\u2c38\ud7e3\ua435\u2d85\u0e1e": [], "\uaaa6\u2dd3": 308, "\uaaa7\u0628\u150f": [], "\uaaa8\u1d5c": 308, "\uaaa9\uab89": [], "\uaaaa": 308, "\uaaac\ufda2": [], "\uaaad\u1525\u2ca1\ua20a\ua2d3\ua21b\ufb9b": [], "\uaaaf\u2dbb\u1845\ua1b4\ufcdd\u0757\u1853\u19b7\uffa8\u1f44": 308, "\uaab1\ufda6": 308, "\uaab5\u112c\ua11a\u0207\u11e9\u14f2": [], "\uaaba\u048f\ua427\u15a4": [], "\uaaba\u185c": 308, "\uaac0\ua1ca": [], "\uaac2\u1ceb\u0755\u1281": 308, "\uaae3\ua0bb\u0105": [], "\uaae3\ufea4": 308, "\uaae4": [], "\uaae6\u06ae\u0b5c\u1f61\u012b": 308, "\uaae8": 308, "\uaaea": [], "\uaaea\u16a8\u0288": 308, "\uaaf2": 308, "\uaaf3\u04ff": [], "\uaaf3\u12f0": 308, "\uaaf4": [], "\uab01": 308, "\uab0a": 308, "\uab0b\ufc9b": [], "\uab0c\u15fa\u022b\u097e\u0f52": [], "\uab0d\u02e0\ua1cd": [], "\uab11\ua0f3\u209a": [], "\uab11\ua52a": 308, "\uab13\u16bc": [], "\uab21": [], "\uab26": [], "\uab28": [], "\uab28\u1a2f": 308, "\uab2a": [], "\uab2b\uff41\u15eb\ua96b\u03ca\u10e7\u1d6c\u140f\u1549\u30de": [], "\uab2c": [], "\uab2e\u072f\u1353": [], "\uab30": 308, "\uab31": [], "\uab32\u3126\u1b91\u118c\ud7f0\ua8f5\ua20b\ua897\u140c": [], "\uab32\ua93f\u04d7\ua6d0\ud7d0\u075c\u0939\u0192\u16b7": 308, "\uab33\u1bcc\u30c9\u1478\u1c5c": [], "\uab36\u01fb\u0266\u1be4\uff82\u0ab8": [], "\uab3a\ua75f\u30f7\u0a1a": [], "\uab3b\u1e21\u2c51\u1215\ua689\uff6c\u037b\u2071\u01ba\u04bd\u1d53\u3112\ua324\ufc8f\u1152\u195b\ua1b4": [], "\uab3e\ufed4": 308, "\uab3f\ufd92\u00f8": [], "\uab40\ufc4a\ufcaa\u043e\u1f42": [], "\uab41\ua350": [], "\uab42\u1866\u1539\u00f4\u1450\u1269\ud7c5\ufcc4\u056f\u0720": [], "\uab43\u12c0": 308, "\uab45": 308, "\uab46\u1770\u3057\ua749\ua33c": 308, "\uab46\ua697\ufc4e\u0f6c\ufdf3\u1a22": [], "\uab48": [], "\uab49\ua4f6\u1e4f\u0f5f": 308, "\uab4a\u1290": [], "\uab4b": 308, "\uab4c\u01fb\u079c": [], "\uab4d": 308, "\uab4d\ufb74\u2c81": [], "\uab4e": 308, "\uab4e\u1b0a": [], "\uab4f": [], "\uab4f\u1080\u015d\u091c\u14fe\ua20d\ua73b\u1622\u30ee": 308, "\uab50": 308, "\uab51\ua6a9": 308, "\uab51\ufd62": [], "\uab52\ua71e\u10df\u2cd3\u2d1a": [], "\uab54": 308, "\uab56\ufdb3\ua725\u114e": [], "\uab57": 308, "\uab58": [], "\uab58\u04b9\u16df": 308, "\uab5c\u2dbd\ua793\u147f\u0452": [], "\uab5c\ufcef\u02b3\u178b\ua5a8": 308, "\uab5f\u05e6\u06e5\u0977": 308, "\uab5f\ufdc5": [], "\uab70": 308, "\uab71": [], "\uab72": [], "\uab72\u0904\u10da\u3073\uff79": 308, "\uab74": [], "\uab75\ua3f0\u114d\u1ecd\ua6c6": 308, "\uab77": 308, "\uab77\u078d\uaae1\ufd64": [], "\uab78\u17a5\ua108": [], "\uab7a\ua558\ufe99\u0622\u1192\u044d": [], "\uab7c\u1d82": [], "\uab7e\u18c0": 308, "\uab7e\ua67f": [], "\uab7f": [], "\uab81\ufd61": 308, "\uab82\ua52f\u11c7\u30f4\ua42f\u00fa\u14ca\u1d90": [], "\uab83\u1e3b\u2c4f\ua651\u1e81\u0784\u315a\u1586": [], "\uab83\ufc3f": 308, "\uab87": [], "\uab88": [], "\uab88\u03fc": 308, "\uab8a": 308, "\uab8b": [], "\uab8c\ua411": 308, "\uab8d\u1721": [], "\uab8e": 308, "\uab91": [], "\uab93\u1d72": [], "\uab93\ufd84\ua2db\u1164\u151c\u0996": 308, "\uab95\u0923\u1f42\u2d16\u143d\ua8a4": 308, "\uab95\ua39c": [], "\uab96\ua3c5\ua5b0\ua3ee\u130c\u144e\u14ef\ua305": [], "\uab9a\ua582\u140e\uabc6": 308, "\uab9b": 308, "\uab9f": 308, "\uaba0\uab53\u1726\ufbaf\ua197": [], "\uaba1": 308, "\uaba1\u1dae\u1856": [], "\uaba2\u0523\u164e\uffaa\u1e9b\ua31f\ua6c2\ua182\u0373\u0d27\u10e2\uffdc": [], "\uaba4": 308, "\uaba5\ua438\u03c7": [], "\uaba7\u1fa3\ufe7e": 308, "\uabac": 308, "\uabac\u159a": [], "\uabaf\u0760\u049b\u1748\u0d35\u1b32\u16c9": 308, "\uabb0\u12d8": [], "\uabb7\u2146\uff6e": [], "\uabb9": [], "\uabbb\u2d6f\u1be5\u116a": 308, "\uabbd\ua88b": [], "\uabbe\ua77c\u03c9": 308, "\uabbf": 308, "\uabc1\u2d48": 308, "\uabc2\u0974": [], "\uabc3": [], "\uabc3\ud7c0": 308, "\uabc4\ufd17": 308, "\uabc5\u18e3": [], "\uabc6": [], "\uabc8": 308, "\uabc9\uff67\u0213\u1db3\u140b\u1823": 308, "\uabce\u051f": [], "\uabcf": 308, "\uabd0": 308, "\uabd1\u0815\u0119\u30d2\u19be\ua035\u1017": 308, "\uabd3\u317f": 308, "\uabd4\u2cb9": [], "\uabd7\uffb9\u1e03\u15fe\u18e6": 308, "\uabd8\ufec9": [], "\uabd9\u1a13\u1ef3\ua112\u0a20\u06c2\u0d20": [], "\uabd9\u1e11\ua2d0": 308, "\uabda\u110d": [], "\uabde\u0b18\u0247\uff7b\u0971\u182c\ua5a1": 308, "\uabdf\u3138\u0240": 308, "\uabe0\u1bc4\ua259\u144b\u120a\u1e7d": [], "\uabe1\ufb02\u0103\u198a\u2cad": 308, "\uabe2\ufb06\ua0ae\ua873\ua978\u00eb\u0296\u0753": [], "\ud7b0": [], "\ud7b0\u2c5e\ua0f3": 308, "\ud7b1": 308, "\ud7b2\u1e43\u1eef": 308, "\ud7b5": 308, "\ud7b7\u1d65": 308, "\ud7b8": 308, "\ud7ba\u311b\uab65\u1c14\ufceb\u1b06\u00e1\u116d\u2d22": [], "\ud7bb\u14d6\u0c2b": 308, "\ud7bc": 308, "\ud7bd\u168b": 308, "\ud7be\ufd75": [], "\ud7c2\u1509\ufda5\ua5e1\u1251": 308, "\ud7c4\ufdf6": 308, "\ud7c5\u2da3": 308, "\ud7c6": [], "\ud7cb": 308, "\ud7cc\u311a\u0ca8": [], "\ud7cf\ufe7b\u1edf": [], "\ud7d1": [], "\ud7d1\ua15e\ua5b1\u0b06\u0573\u1d7f": 308, "\ud7d3\ua32c\u021b": [], "\ud7d5": 308, "\ud7d6\ufcc3\u1d73\u146a": [], "\ud7d7\u1216\u03ef\uaaae\ua781\u14fb\u2c46\ua3c6\u091d\u0da0\ufb65": [], "\ud7d9\ufba6\ufd85": 308, "\ud7dc\ufb88\u1c08": 308, "\ud7dc\ufc85\ufd3d": [], "\ud7dd\u11df\u1992": 308, "\ud7de\u0563": 308, "\ud7df": [], "\ud7e0": [], "\ud7e5\u048f\u1e55": [], "\ud7e6": [], "\ud7ec\uffb0\ua3e7\u1b24": 308, "\ud7ed\u0c2f\u09b9": [], "\ud7ee\u1794": 308, "\ud7ef\u04e3": 308, "\ud7f1": 308, "\ud7f1\u09df\u14b5\u0caf\u145f\u1481\u15ae": [], "\ud7f2": [], "\ud7f4\u117e\u1e5f": [], "\ud7f5\u144f\ua0e1": [], "\ud7f6": [], "\ud7f8\u1706\uaadd": [], "\ud7f9\u0db8": 308, "\ud7fa\ua46c\ua6df\ufea1": [], "\ud7fb\u04cc\u1fc7\ua28d": 308, "\ufb00": 308, "\ufb01": [], "\ufb01\u2c61\uab31": 308, "\ufb03\u1f33": [], "\ufb05": [], "\ufb13": 308, "\ufb13\ufda1\u03c6\ua047\u152c\u0927": [], "\ufb14\ua171": [], "\ufb16": 308, "\ufb16\u18f1\u0561\u1e95\uabdb\ufb28": [], "\ufb1d\u0b2d\u04e7\u0904\u2133\u0175\ua463\ua05b\u12fe\u185a": [], "\ufb20\u14dc\u1740": [], "\ufb21": [], "\ufb22\u03d4": 308, "\ufb23\u03bb\ufbb0\u1230\uabc7\u153e\u2c59\u076c\u2dd6": 308, "\ufb24": 308, "\ufb25\ufd1f\u3145\ua661": 308, "\ufb28m": 308, "\ufb2a\u1861": [], "\ufb2c": [], "\ufb2d\u0d1b\ua190": 308, "\ufb2e\u2cc5\u1578\ua571\u1971\uff8b\u1e45\u0119": [], "\ufb2f\u0f65": 308, "\ufb2f\u209b\u1e53\ufccf": [], "\ufb30": [], "\ufb31\u1102\u18f0\u1d14\u1865\u30f3": 308, "\ufb32": 308, "\ufb34": 308, "\ufb34\u1237\ua80f": [], "\ufb35\u120d\u1a4d\u1f97": 308, "\ufb36\u0288": 308, "\ufb39": [], "\ufb3a": [], "\ufb3a\u2c6c": 308, "\ufb3c": 308, "\ufb40": 308, "\ufb41\u1fe5\u049d\ua398": [], "\ufb46": 308, "\ufb46\u1baf\u016f": [], "\ufb47\u011b": [], "\ufb48\u0cde": 308, "\ufb49\ua52a\u1193": [], "\ufb4b\u11ab\ufed9": [], "\ufb4c\ufd5b": [], "\ufb4c\ufee6\u18b9": 308, "\ufb4d": 308, "\ufb55": [], "\ufb56": [], "\ufb57": [], "\ufb58\ua43eo": 308, "\ufb5a": 308, "\ufb5be": [], "\ufb5d": [], "\ufb5f": [], "\ufb60\uabae\ufd31\u057c\u047b": [], "\ufb62\u14f8\u163b": [], "\ufb64": [], "\ufb65\u1f82\ua60c": 308, "\ufb69\ua267\ua7a9\u1ee9\u0297\ua315\u1f57\u0f4c\ua89c\ua74d": [], "\ufb6b": [], "\ufb6e\u0754\uabc2\uffae": 308, "\ufb6fq": [], "\ufb71\u0824": [], "\ufb75\uff48": [], "\ufb77": [], "\ufb78\u18b0\u2dc9\u1c0c": 308, "\ufb79\ua3b1\u0292": [], "\ufb7a\u11e4\u1354": [], "\ufb7c\ufd23\u03f0\u092a\ua00a\u143a": 308, "\ufb7e": [], "\ufb80\u0559\u1e2f\uaa6f": 308, "\ufb83": [], "\ufb85\uab12\u1919": [], "\ufb86\u18f3\u1916\u214e": [], "\ufb89": 308, "\ufb89\u1d89": [], "\ufb8a": 308, "\ufb8c": [], "\ufb8d\ua76d\ua5df\u1022\u159e\u1698": [], "\ufb8e\u0107\ua34c\u012b": 308, "\ufb8f\u1d26\u1343": [], "\ufb91": 308, "\ufb91\ua9cf\u124a\u1f86": [], "\ufb93\u1475": [], "\ufb94\u1359\ufd8c\u0109\u09ab\u0225": [], "\ufb95\uffb8\u1a07\u1247\ufd20\u0571": 308, "\ufb96\u140f\ufcda\u1be3\ufd27\ua64d": 308, "\ufb97": 308, "\ufb98": 308, "\ufb99": [], "\ufb9c\u153a": 308, "\ufb9d\u1604\u0f46\u1613\u2d40\ufed5\ua805\u3131\u30a5": 308, "\ufb9e\u1d4d": [], "\ufba2": 308, "\ufba3": [], "\ufba3\u0f69": 308, "\ufba4\ua4e7\u2d4c\u1c5f": 308, "\ufba5": [], "\ufba5\u05d2\ua91d\u0117\u2c3a\u0ad0\u08a2\ufdf4": 308, "\ufba7\u1675\u0169": [], "\ufba9\u0973\u0764\u1e61": [], "\ufba9\u2133": 308, "\ufbab\ua07f\u0271": [], "\ufbac\ua21c\uffaei\ua841": [], "\ufbae\ua64b": 308, "\ufbb1\u15ea\u309e": [], "\ufbd3": [], "\ufbd5\u03b8": 308, "\ufbd6": 308, "\ufbd6\u0571\u0a8a\u2d12": [], "\ufbd9\u11a4\ua113\ud7b8\u0f68": [], "\ufbda\uaa05\u05de": 308, "\ufbdd\u0edc\ua0b5\u0a10\u1e6d": [], "\ufbde\u00f6": 308, "\ufbdf\ua52e\ua5e7\ua56d\ua57b\ua653": [], "\ufbe1\u075c": [], "\ufbe2\u1884\u10f0\uaa92\ufba0\ufbe5": 308, "\ufbe4": [], "\ufbe5\u1429": [], "\ufbe6": 308, "\ufbe7": [], "\ufbe9\u01f5\ua26c": 308, "\ufbe9\u0459\u0449\u1115": [], "\ufbea\u12c5\u14d1\u1873": 308, "\ufbeb": [], "\ufbec\ua781\ua865": 308, "\ufbf4": [], "\ufbf4\u1db7": 308, "\ufbf5\u114f\ufd29": 308, "\ufbf8\u029e\ua1fd\u16a1\ua00b\u1450\u1f91": 308, "\ufbf8\uabc4\u04ca": [], "\ufbfa\u0b83\ua51a": 308, "\ufbfb": [], "\ufbfd\u3072": 308, "\ufbfe\u03be\u122b": [], "\ufbfe\u3107": 308, "\ufbff": [], "\ufbff\u210d\u15a7\u04f3": 308, "\ufc01": 308, "\ufc02\u1114\ua387\u025f": 308, "\ufc03\ua979\u0cf1": 308, "\ufc04\ufee5d": [], "\ufc05\u15ba\u0978\u0971\u2c77\u01bb": [], "\ufc09\u31b5\ufdad\u31fd": 308, "\ufc0c": 308, "\ufc0f\u0f00\ua5b6\u1ec3\u077f\u1197": [], "\ufc10\u010b\u30d8\ua79b\u18b8": [], "\ufc11m\u0e1a\ua275\ua85e\u15d4\u152e\ufcdb\ua85a\u04dd\ua80a\ufce3\u18c5\ua923\ufc0f\ua1f5": 308, "\ufc11\ua2e0\u2ce3": [], "\ufc12\u026c\u07a1\ua9a7": 308, "\ufc12\u1309\ud7b9\u1c74\u1d43": [], "\ufc15\ua20a": 308, "\ufc16\u153c\u0209": [], "\ufc16\uab2e\u2c9b\ua14e\ua3a0\ua01b": 308, "\ufc17\u3187": 308, "\ufc19": [], "\ufc1a\u110e\u0205\u18ea\u1e1d": [], "\ufc1c\u1077": 308, "\ufc1e\u1465\u01b9\u2dd2\u07f4\u10da": [], "\ufc1e\ua53b\ua2a2\u1d89\u1e71\ua0fd": 308, "\ufc1f": [], "\ufc21": [], "\ufc22\u3049\ufecb\ua433\u11f5\u06d2": [], "\ufc23": 308, "\ufc27\u0289": 308, "\ufc27\ufb82": [], "\ufc2a\ua813\ufc28\u0107\ua892\u1f7b\u0138\ua22e\u15af\ufb75": 308, "\ufc2b": 308, "\ufc2c": 308, "\ufc2d\u30c5": 308, "\ufc30\u05e2\u12e4": [], "\ufc32": [], "\ufc33": [], "\ufc37": [], "\ufc39\u1052\ufbae\u142a\u1508": [], "\ufc3a\u0529": [], "\ufc3b\ua397\ua5bc": [], "\ufc3b\ufcf5\u190b": 308, "\ufc3c\u1bd7\u026d\u1262\u068b\u1906\u1b86\ua600\ua127\ua651\u0501\ufca1\u1c5b\u1e21\ufcbe\u2d16": [], "\ufc3d\ufdb8\u1e41\u01ce": 308, "\ufc40": 308, "\ufc41\u2dd1": 308, "\ufc42": 308, "\ufc42\u0714\u092e": [], "\ufc43\u1ee7\u03d0\u1151\u3075": [], "\ufc45\ufca1\u1ef1\uaa72\u0144\u0299\u1f40": 308, "\ufc47\u03b5": [], "\ufc48\u0499\u0ba4\u0135x": [], "\ufc48\u1f63\ua5d2": 308, "\ufc49": [], "\ufc4a": 308, "\ufc4b": 308, "\ufc4e\u0a35\u0690\u18a8": 308, "\ufc4f\u0457\ua1b6\ua228": 308, "\ufc50": [], "\ufc54\u1568": 308, "\ufc55": 308, "\ufc56\ua219": [], "\ufc57\ua306": 308, "\ufc59\u1e61": 308, "\ufc5a\u1d38\u1e2b": 308, "\ufc5d\u1e9a": 308, "\ufc5d\u30b7\u2c43\u307b": [], "\ufc5f\uff47\u0438\u037c": [], "\ufc60": [], "\ufc61\u117c\u04f1\ua1ec\ua38a\u03af": 308, "\ufc62": [], "\ufc63\ua196\u1f34\u0931": 308, "\ufc64\ufeb5\u2cab\u1c4d\u1a45\u043b": [], "\ufc66\ua7a9\u2dba": 308, "\ufc67\ua314\u12af\ua921\u1413": 308, "\ufc67\uff41\u1137": [], "\ufc69": 308, "\ufc6a\u00fe": [], "\ufc6b\u1eb9\ua66d": [], "\ufc6c": [], "\ufc6c\u0cb9": 308, "\ufc6d\uaa14": 308, "\ufc70\u066e\u1c4e\ua74d": [], "\ufc72\u037d": [], "\ufc75": [], "\ufc76\uaaa0\u314a\uab04\ua2af\u0287\ua115\u1e0d": 308, "\ufc77": 308, "\ufc78": 308, "\ufc79\u0e2c": 308, "\ufc7a\u1190": 308, "\ufc7b\uff54\u154f": [], "\ufc7d\u0131\u1167\u0293\u1ed7\u186b\u0563\u077f": 308, "\ufc7e\ua1f0\u18d1\u1f13\ua247\u132a\ua59b": [], "\ufc82\ufb7e\u06b9\u1283\ua099\uff73": 308, "\ufc83\u1bca\ufc2e": 308, "\ufc86\u062b": [], "\ufc86\ua21e\u1847": 308, "\ufc87\u18a7\u12d6\u1358\u1c60": 308, "\ufc88\u14a2\u0b1d": [], "\ufc8a": [], "\ufc8c": 308, "\ufc8ej\ufbe2\u044d\u185f": [], "\ufc8e\u03f5\u2d0d": 308, "\ufc90\u188d\u0931": [], "\ufc93\ufbf1": 308, "\ufc95": [], "\ufc95\u0491\ufc6b\u0681\u11ac\ufb83\uabb9": 308, "\ufc97\u0e15\u1eb7\ufd7b": 308, "\ufc9a\ua1ed\ua1a5\ua210": [], "\ufc9b\ua1a8\u3042\u084a": 308, "\ufc9c": 308, "\ufc9d\ua645\u110e\u0d16\ua4fd": 308, "\ufc9e": 308, "\ufc9e\u30e6\ufb72\u1769\u146f\u08a5": [], "\ufc9f\u16e3": [], "\ufc9f\ua6bc\ua364": 308, "\ufca0\u1e17\u313a\u0475": [], "\ufca3\u1898\u1a15\ua175\ua1f4\u1d6f": [], "\ufca4": [], "\ufca4\u164a\u1f72\ufcd9\u069d": 308, "\ufca7\uaa9a\u1708\u07cc\u01c6\u1f41": [], "\ufca9\u0280\u1870": [], "\ufcaa\u0495\u1f73\u1861\u3088": 308, "\ufcac": 308, "\ufcad\u122c\ufb52": 308, "\ufcae": [], "\ufcb0\u307a\ud7e4\u11e2\u1e29": 308, "\ufcb3": [], "\ufcb3\ua6ad\u1e13\u3089\u31a7": 308, "\ufcb4": [], "\ufcb4\u1442\u1b21\ua45e\u0dbd\u1843\u01ed\u162c": 308, "\ufcb5": [], "\ufcb6": [], "\ufcb9": [], "\ufcba": 308, "\ufcbc\u0783": 308, "\ufcbc\u1daa\u0e10\u1b17\u2cd9\u0b13\u1744\u1f81\ua312\ua17b": [], "\ufcbd": [], "\ufcbf\u0121": 308, "\ufcc0\u3071\ufb41\u0e2b\ua871\uff70\uab76": 308, "\ufcc1": [], "\ufcc5\ua559": [], "\ufcc6\uaa27\u0155\u1657\u15df\u1d7e": [], "\ufcc8\u1d3a\ufcf9\ua33f\ua195\u0b90\u05d9": [], "\ufcc9\u143e\u1e83": [], "\ufcca": [], "\ufcca\u1052\u1010": 308, "\ufccb": [], "\ufccb\u15ab": 308, "\ufcce": [], "\ufccf\ufebb\u1c0f": 308, "\ufcd0\u1e67\u0e9c\ua377\u172a\u2d63": [], "\ufcd1\ufc58": 308, "\ufcd3\u1bc2\u1ecd\u1156": [], "\ufcd5\u0bb0": [], "\ufcd6\ufcd3": 308, "\ufcd7\u1d3fa": 308, "\ufcd7\ua269": [], "\ufcd8": 308, "\ufcdd": [], "\ufcde\u1309\ud7e0": 308, "\ufce1\u02ba\u0b20": 308, "\ufce2\u2c4f\u183b\ua230\u1ea3\ua9ac\ua2d3\u08a1": 308, "\ufce7": 308, "\ufce8\uff54\ua11e\u0173\u12ef": 308, "\ufce9": 308, "\ufcea": 308, "\ufced": [], "\ufced\u0719\ud7e9\u1e49\u308c": 308, "\ufcf0\u1b95\u0125\uab81": [], "\ufcf1\u0d1f": [], "\ufcf2\u07cb": 308, "\ufcf2\uff46\ua819\u1838\u0674": [], "\ufcf3": 308, "\ufcf4\u044c": [], "\ufcf6\ua4eb\ua6a9\u3082\ua0d9\u31a0\ua810\u0d2b\u1a12": [], "\ufcf7\uab50": [], "\ufcf8\u01b4\ua4e9": [], "\ufcfb": 308, "\ufcfd\uaa0f": 308, "\ufcfe\u1693\ua088\u30fa": [], "\ufcfe\u16c8\ua571\uff8e\ua4fb": 308, "\ufd04\u0d8f\u1742\u10e4\u316a": [], "\ufd05\ua33b\ua46f": [], "\ufd06\u3047\u31f6\u127e\u18d3\u026b\u14e6\u1905": [], "\ufd09\ufd7a\ua213\u15c1": [], "\ufd0a\u1fa6\u11f1": 308, "\ufd0e": 308, "\ufd13\u1307": [], "\ufd13\uffc2\ufecb\u2d85\u01a5": 308, "\ufd14": [], "\ufd14\u0465\u1902\u19c2": 308, "\ufd16": [], "\ufd16\uaa0e": 308, "\ufd1a\ua006": [], "\ufd1c\u2db6\u0223\u0570\u156d\u1ebb": 308, "\ufd1c\ufd94\u0233": [], "\ufd1d": [], "\ufd1e\u122a\ua06c\u1833\ua3b5\ua562\u1e07\ua86a\u0804\u016d\u1d2b\u0791\u0b9f\ua37a\ua22d\ua3f8": [], "\ufd1f\u1388\ua945\uff71\u1983\u1e07\u149e": [], "\ufd21": 308, "\ufd22": 308, "\ufd25\u0223\u1261": [], "\ufd27\ua072": [], "\ufd2b\u30cb": 308, "\ufd2c\u126b": 308, "\ufd2e\u1330\u1239": 308, "\ufd30": 308, "\ufd30\ua150\ufcd1": [], "\ufd32": 308, "\ufd34\u1f03\u1591\ua459": [], "\ufd35\u080e\ud7eb\u1d32\u03b3\u1b9c\u1bc0": [], "\ufd35\u15db\ua9ae\u1a09\u1443\u1522": 308, "\ufd37": 308, "\ufd3b\u16bd\ufb48\u314e\uabc9": [], "\ufd3c\u03ac": [], "\ufd51\u03f8\u1196": [], "\ufd52": 308, "\ufd53": 308, "\ufd54\u07ea\ua11f\u046f": [], "\ufd55": 308, "\ufd57\ufb9f\ua98a\u02ae\u3081\ua185": [], "\ufd59\u1a2d\u19bb": [], "\ufd5d\u1a23\u0dc6\u025a\ua68b": [], "\ufd60": [], "\ufd61\u304a\u0584": [], "\ufd62\u1f23": 308, "\ufd63\ua584": [], "\ufd67": 308, "\ufd68\u1495\ufefc": [], "\ufd6a\u04df": [], "\ufd6b\ua189\u0ca7": [], "\ufd6e": 308, "\ufd6f\ufd86\u15de\u1c6a\u3094\ufbd7\u0b0a": [], "\ufd72\ua76d\u1561": 308, "\ufd73": [], "\ufd73\u1e43\ua155": 308, "\ufd74\u043c": [], "\ufd74\ua1fe": 308, "\ufd75\u0c28\u0790": 308, "\ufd77\u19bd\ua459\ua392\u075b": 308, "\ufd77\uff97\u0446\ufcee\u0858\u158b": [], "\ufd7b": [], "\ufd7e": 308, "\ufd83\u123f\u1144\ua09e\u09dc\u1e55\u2c40\u123b\u1b99": 308, "\ufd83\ua733\ua0ec\u0234\u04eb": [], "\ufd85\u3061\u16d0": [], "\ufd88\u0271\uff53": [], "\ufd88\u2ca9\u146d": 308, "\ufd89": 308, "\ufd8a": [], "\ufd8b\ud7b7\ufe9b\ua408\u0455\u13fa": [], "\ufd8c\u1984\u2d09\u191b\u3118\ud7f0\ua9eb": 308, "\ufd8d\u1f57\u01f0\u184b": 308, "\ufd8e": [], "\ufd92": 308, "\ufd93x\u1148\ua5b9": [], "\ufd94": 308, "\ufd95\u0c9b": 308, "\ufd97\u2ca3": [], "\ufd97\ua264": 308, "\ufd98\ufb59\u1f76\u189f\u0115\u10f7\u0581\uaa07": 308, "\ufd9a\u0286": [], "\ufd9d": 308, "\ufd9d\u029a": [], "\ufd9f\u15c6\u1f65\u1746\ua6cfk": [], "\ufda0": [], "\ufda3": 308, "\ufda7\u2c51\ua62b": 308, "\ufda7\ufee6": [], "\ufdab": 308, "\ufdab\ua132\uab55": [], "\ufdac\u1620\u04b1": 308, "\ufdac\uff54": [], "\ufdaf\ua32c\ua3e2\u0185\u160e\ua723\u11db\u2c47\u2ce1": 308, "\ufdb0\u1620": [], "\ufdb2": 308, "\ufdb2\u1ead\u18a8\u189f": [], "\ufdb3\ufc0e": 308, "\ufdb4\ufc18\ua771\ua998\u1f41": [], "\ufdb5\u30ea\u1835\u11f8": 308, "\ufdb6\u0d61\u110c\u15e3\u213d\u06d0": [], "\ufdb7\ua3b6\ua943": 308, "\ufdb8\u11dc\u0ab9": [], "\ufdbb": 308, "\ufdc0\u1bd2\u01a5\u0801": [], "\ufdc2": [], "\ufdc6": 308, "\ufdc7\u0dc5\u024d\u0b33\u3091": [], "\ufdc7\ua71e\u1958\u0449\u0ede\u12e1": 308, "\ufdf0\ufd0a\ua139\u0161": [], "\ufdf1": 308, "\ufdf2\ua508\ufd5c\u1a41\u043a\u1b97\ufce9": [], "\ufdf3\u0e18\u0475\u0ca0\u1117\u14ec\u0e40\u0d07\uaabd\uaadd\u1d62": 308, "\ufdf5\u0daa\u18cc": 308, "\ufdf6\u3172": [], "\ufdf7\u19ab": [], "\ufdf9": [], "\ufe70\u0930": [], "\ufe71": 308, "\ufe72": [], "\ufe72\ufbf3\u10f4\u1d5d": 308, "\ufe73\ua53f\ufcf1\u1859\ua19f\ua487\u14e7\u1430\uffb3\u1742\u0cbd\ua776\u01e9\u13fa": 308, "\ufe74\ua090\u04df": 308, "\ufe76\u06a4\u2dac": 308, "\ufe77\u1298\u037c\u121a\u18c0": [], "\ufe78\u3035\u1002\u2d17\u1302\uffdb": 308, "\ufe79": [], "\ufe7a\ua1a2\u14de": 308, "\ufe7c\u1957": 308, "\ufe7d\u044f": [], "\ufe7f\u03b8": 308, "\ufe80\u1fd1\u154e\u2113\u14b0\u03b8": [], "\ufe82": 308, "\ufe83\u0513\u1d7a\ua142\u185b": 308, "\ufe84": 308, "\ufe85\u1640": [], "\ufe86\u0d07\ua431\ua98e": [], "\ufe87\u0806\u2cd1": 308, "\ufe8a\ua5f2\u01a8\u3157\ua3cb\u0626\u019a": [], "\ufe8b\u1f20\ua25f": 308, "\ufe8d": [], "\ufe8e\u01d4\u1618\ua028": [], "\ufe8f\uab86\u1f30\u0d16": [], "\ufe91": 308, "\ufe93\u1161": 308, "\ufe94\ua72d": 308, "\ufe95\u15c5": 308, "\ufe97": [], "\ufe9a\ufcd9\u0aa4\u0439": [], "\ufe9b": 308, "\ufe9e": 308, "\ufea0\u1401": [], "\ufea1\u0d96": 308, "\ufea2\u03f3\ua1e7\ua5cf": 308, "\ufea2\u157e\ua331\u1e1b\u00fc\u17b2": [], "\ufea3\u1403\u0263\u1bd9\u312d\u02aa": 308, "\ufea5\u0aa0\u178f": 308, "\ufea6": 308, "\ufea6\uff42\u1c70": [], "\ufea8\u1252": [], "\ufea9": [], "\ufeac": 308, "\ufead": 308, "\ufeb6": [], "\ufeb6\u1751": 308, "\ufeb8\u14bf\ufd0e\u01cc": [], "\ufeba": [], "\ufebd\u0cb6\ufc87": [], "\ufebe\ufc3c": 308, "\ufec1\u0932\u0451\ua895\u2147\u095d": 308, "\ufec2\u1271": [], "\ufec2\ua523\ua966\u07e5": 308, "\ufec3": 308, "\ufec4\ua130": 308, "\ufec5": 308, "\ufec7\uff6f": [], "\ufec8\u0a85\u0dc0\ufee9": 308, "\ufecf\u056b": 308, "\ufed0": 308, "\ufed3\ua3eb": 308, "\ufed5": [], "\ufed7\ud7d2\uff47": 308, "\ufedb\u016f\u1e0f\ua687\uffb2\ua717\uff9b": 308, "\ufedc": [], "\ufedc\ua3e3\u02cb": 308, "\ufedd\ua344\u052d\ufb47": 308, "\ufede": 308, "\ufedf": [], "\ufee1": 308, "\ufee5": 308, "\ufee7\u03ce\uaa4a": 308, "\ufee8\u30fc": [], "\ufee8\ua2b9": 308, "\ufeea\u0e41\u2db0": 308, "\ufeeb": 308, "\ufeeb\ua301\ua2b1": [], "\ufeec": 308, "\ufeee": 308, "\ufeef\u152a": [], "\ufeef\ua847": 308, "\ufef0": 308, "\ufef1": 308, "\ufef1\u304b\u0471\u166b\u1d96": [], "\ufef2\ufd98\ua743\u2d48": [], "\ufef3": [], "\ufef7": [], "\ufef8\u0d8b": 308, "\ufefa": 308, "\uff41": 308, "\uff42": 308, "\uff43": 308, "\uff44": 308, "\uff45": 308, "\uff45\ua970\u0113\u314d": [], "\uff46\u07dc\u0645\u11c1\u0161r": 308, "\uff46\u1ead\ufdc2\ua647\ua619\u0649\ua359\u0692\u0507": 308, "\uff47\u1576\ufb6a": [], "\uff48\ud7d3\u0cb5\ua3c2": 308, "\uff49": 308, "\uff49\u1f43\u1e21\u01c9\u11b5\u00b5": 308, "\uff4b\u0929\u1a28\ua169\ua599\ufeb2\u2c32\uffba\ufda0\u0987\ua1ac\u0f50": 308, "\uff4c": 327, "\uff4d": [], "\uff4e": 308, "\uff4e\uffd6\ua1a6\u0776\ua79f": [], "\uff4f": [], "\uff50\u1428": [], "\uff50\ua170": 308, "\uff51": [], "\uff51i\u0307\u1a34\ufec6\u05d9": 308, "\uff52": [], "\uff52\u1e75": [], "\uff53": 308, "\uff53\ua96f\u0d08": 308, "\uff54\u0165": 308, "\uff55\u159c": 308, "\uff55\u1d0e\u00e5": [], "\uff56": [], "\uff56\u1588\u0f55": [], "\uff57\u1476\u0c85\ufcc5\u12c2": 308, "\uff58": 308, "\uff58\u0133\ua107\ua436": [], "\uff59": [], "\uff59\ua215\ua21a\u31fc": 308, "\uff5a": 308, "\uff5a\u03c5": [], "\uff67": [], "\uff68": 308, "\uff69\u110b\ua552\u0b25\u11a6\u00e9\u0c09\u078b": 308, "\uff6b": [], "\uff6e\ua13a\u1483": 308, "\uff74\ua534": 308, "\uff75": 308, "\uff77\u30e0": [], "\uff78": 308, "\uff78\u1e79\u146c\u1784": [], "\uff79\u129a\u06e5": [], "\uff7a\u011b\ufcfc\u14c2": 308, "\uff7c\u1db1\u178a": 308, "\uff7d\ud7e1\ua570\u1344\uabd2\u0933": 308, "\uff7f\u044d\u0ea1\u1b4b\ud7e8\u02d1\ua274\u2c54": 308, "\uff80": [], "\uff80\u07e0\ua4e3\u3070\ua2e5\u15aa\ua4f9\u0bb0\u0b61\u0db6\u11fa": 308, "\uff86\u1688": [], "\uff88": 308, "\uff8a\u08a8\u0641\u1189\u12c2\ufd08": [], "\uff8a\u1359\ua525\ua42c\u1240\u1ba0": 308, "\uff8c\u2c83\ua2ed\u184b\u1ea3\u100e\u0633": [], "\uff8d\u1e25": 308, "\uff8f\u0698": 308, "\uff90\u18de": 308, "\uff91": 308, "\uff94": [], "\uff94\u0562\u0c07\ua356": 308, "\uff96\uab4b": [], "\uff98": 308, "\uff99": 308, "\uff9c\u1967": 308, "\uff9d\ua5a5\ufc1d\u1695": 308, "\uff9e\u0d23\u176a": 308, "\uff9f\ua80a": [], "\uffa0\ua1ea": [], "\uffa0\uab3c\ua99d\u1f76\ufbab": 308, "\uffa1\ufebe": [], "\uffa2": [], "\uffa2\ufe7d\u1951\u18e5": 308, "\uffa4": 308, "\uffa4\ua3a5\u1c1a\u3084\u1720": [], "\uffa7\u1e93\ua5c2\ua0aa\u03b3\u0ec6\u1e0b\u0699\u2c41\u062e": 308, "\uffa9\ua464\ufc79\u1e77\u04c8\u0151\u0a33\ua30e\u113a\ua079": [], "\uffab\u147e": [], "\uffab\ua0c0\u2d16": 308, "\uffac\u2d8b": 308, "\uffad\uab54": [], "\uffaf": [], "\uffaf\ua0f7\u179d\ufcbe": 308, "\uffb1\u056a": [], "\uffb3\u101a": [], "\uffb4": [], "\uffb4\u1475\u12a2\u2c76\u0e0a\u1fc4\uffa9": 308, "\uffb5": [], "\uffb5\u14a9\ud7c1\ua098\u155f\u0f4d": 308, "\uffb7\u16b5\u3069\u01c6\ufef5\u1518": [], "\uffb7\u1821": 308, "\uffbb\u046d\u3107\u0f59": [], "\uffbb\u142c": 308, "\uffbe\u1c11\u1913\u30f5": 308, "\uffc4": [], "\uffc5": [], "\uffc6\u0219\u0456": [], "\uffc6\ua6b1\u03d3\u17a9\u1531\ufb4b\u1234\ua770\ua5b3": 308, "\uffca\u095a": 308, "\uffca\u0b0f": [], "\uffcc\ua3a6\u144a": [], "\uffce": 308, "\uffcfu\u018c": 308, "\uffd2": [], "\uffd4": 308, "\uffd4\ua47d\ua365": [], "\uffd5\u025b": 308, "\uffd5\u123f\u1231\ufbe0\u11d9\ua094\ua57a\u07d6\u2da3": [], "\uffda": []}, "titles": ["nltk package", "nltk.app package", "nltk.app.chartparser_app module", "nltk.app.chunkparser_app module", "nltk.app.collocations_app module", "nltk.app.concordance_app module", "nltk.app.nemo_app module", "nltk.app.rdparser_app module", "nltk.app.srparser_app module", "nltk.app.wordfreq_app module", "nltk.app.wordnet_app module", "nltk.book module", "nltk.ccg package", "nltk.ccg.api module", "nltk.ccg.chart module", "nltk.ccg.combinator module", "nltk.ccg.lexicon module", "nltk.ccg.logic module", "nltk.chat package", "nltk.chat.eliza module", "nltk.chat.iesha module", "nltk.chat.rude module", "nltk.chat.suntsu module", "nltk.chat.util module", "nltk.chat.zen module", "nltk.chunk package", "nltk.chunk.api module", "nltk.chunk.named_entity module", "nltk.chunk.regexp module", "nltk.chunk.util module", "nltk.classify package", "nltk.classify.api module", "nltk.classify.decisiontree module", "nltk.classify.maxent module", "nltk.classify.megam module", "nltk.classify.naivebayes module", "nltk.classify.positivenaivebayes module", "nltk.classify.rte_classify module", "nltk.classify.scikitlearn module", "nltk.classify.senna module", "nltk.classify.svm module", "nltk.classify.tadm module", "nltk.classify.textcat module", "nltk.classify.util module", "nltk.classify.weka module", "nltk.cli module", "nltk.cluster package", "nltk.cluster.api module", "nltk.cluster.em module", "nltk.cluster.gaac module", "nltk.cluster.kmeans module", "nltk.cluster.util module", "nltk.collections module", "nltk.collocations module", "nltk.compat module", "nltk.corpus package", "nltk.corpus.europarl_raw module", "nltk.corpus.reader package", "nltk.corpus.reader.aligned module", "nltk.corpus.reader.api module", "nltk.corpus.reader.bcp47 module", "nltk.corpus.reader.bnc module", "nltk.corpus.reader.bracket_parse module", "nltk.corpus.reader.categorized_sents module", "nltk.corpus.reader.chasen module", "nltk.corpus.reader.childes module", "nltk.corpus.reader.chunked module", "nltk.corpus.reader.cmudict module", "nltk.corpus.reader.comparative_sents module", "nltk.corpus.reader.conll module", "nltk.corpus.reader.crubadan module", "nltk.corpus.reader.dependency module", "nltk.corpus.reader.framenet module", "nltk.corpus.reader.ieer module", "nltk.corpus.reader.indian module", "nltk.corpus.reader.ipipan module", "nltk.corpus.reader.knbc module", "nltk.corpus.reader.lin module", "nltk.corpus.reader.markdown module", "nltk.corpus.reader.mte module", "nltk.corpus.reader.nkjp module", "nltk.corpus.reader.nombank module", "nltk.corpus.reader.nps_chat module", "nltk.corpus.reader.opinion_lexicon module", "nltk.corpus.reader.panlex_lite module", "nltk.corpus.reader.panlex_swadesh module", "nltk.corpus.reader.pl196x module", "nltk.corpus.reader.plaintext module", "nltk.corpus.reader.ppattach module", "nltk.corpus.reader.propbank module", "nltk.corpus.reader.pros_cons module", "nltk.corpus.reader.reviews module", "nltk.corpus.reader.rte module", "nltk.corpus.reader.semcor module", "nltk.corpus.reader.senseval module", "nltk.corpus.reader.sentiwordnet module", "nltk.corpus.reader.sinica_treebank module", "nltk.corpus.reader.string_category module", "nltk.corpus.reader.switchboard module", "nltk.corpus.reader.tagged module", "nltk.corpus.reader.timit module", "nltk.corpus.reader.toolbox module", "nltk.corpus.reader.twitter module", "nltk.corpus.reader.udhr module", "nltk.corpus.reader.util module", "nltk.corpus.reader.verbnet module", "nltk.corpus.reader.wordlist module", "nltk.corpus.reader.wordnet module", "nltk.corpus.reader.xmldocs module", "nltk.corpus.reader.ycoe module", "nltk.corpus.util module", "nltk.data module", "nltk.decorators module", "nltk.downloader module", "nltk.draw package", "nltk.draw.cfg module", "nltk.draw.dispersion module", "nltk.draw.table module", "nltk.draw.tree module", "nltk.draw.util module", "nltk.featstruct module", "nltk.grammar module", "nltk.help module", "nltk.inference package", "nltk.inference.api module", "nltk.inference.discourse module", "nltk.inference.mace module", "nltk.inference.nonmonotonic module", "nltk.inference.prover9 module", "nltk.inference.resolution module", "nltk.inference.tableau module", "nltk.internals module", "nltk.jsontags module", "nltk.langnames module", "nltk.lazyimport module", "nltk.lm package", "nltk.lm.api module", "nltk.lm.counter module", "nltk.lm.models module", "nltk.lm.preprocessing module", "nltk.lm.smoothing module", "nltk.lm.util module", "nltk.lm.vocabulary module", "nltk.metrics package", "nltk.metrics.agreement module", "nltk.metrics.aline module", "nltk.metrics.association module", "nltk.metrics.confusionmatrix module", "nltk.metrics.distance module", "nltk.metrics.paice module", "nltk.metrics.scores module", "nltk.metrics.segmentation module", "nltk.metrics.spearman module", "nltk.misc package", "nltk.misc.babelfish module", "nltk.misc.chomsky module", "nltk.misc.minimalset module", "nltk.misc.sort module", "nltk.misc.wordfinder module", "nltk.parse package", "nltk.parse.api module", "nltk.parse.bllip module", "nltk.parse.chart module", "nltk.parse.corenlp module", "nltk.parse.dependencygraph module", "nltk.parse.earleychart module", "nltk.parse.evaluate module", "nltk.parse.featurechart module", "nltk.parse.generate module", "nltk.parse.malt module", "nltk.parse.nonprojectivedependencyparser module", "nltk.parse.pchart module", "nltk.parse.projectivedependencyparser module", "nltk.parse.recursivedescent module", "nltk.parse.shiftreduce module", "nltk.parse.stanford module", "nltk.parse.transitionparser module", "nltk.parse.util module", "nltk.parse.viterbi module", "nltk.probability module", "nltk.sem package", "nltk.sem.boxer module", "nltk.sem.chat80 module", "nltk.sem.cooper_storage module", "nltk.sem.drt module", "nltk.sem.drt_glue_demo module", "nltk.sem.evaluate module", "nltk.sem.glue module", "nltk.sem.hole module", "nltk.sem.lfg module", "nltk.sem.linearlogic module", "nltk.sem.logic module", "nltk.sem.relextract module", "nltk.sem.skolemize module", "nltk.sem.util module", "nltk.sentiment package", "nltk.sentiment.sentiment_analyzer module", "nltk.sentiment.util module", "nltk.sentiment.vader module", "nltk.stem package", "nltk.stem.api module", "nltk.stem.arlstem module", "nltk.stem.arlstem2 module", "nltk.stem.cistem module", "nltk.stem.isri module", "nltk.stem.lancaster module", "nltk.stem.porter module", "nltk.stem.regexp module", "nltk.stem.rslp module", "nltk.stem.snowball module", "nltk.stem.util module", "nltk.stem.wordnet module", "nltk.tabdata module", "nltk.tag package", "nltk.tag.api module", "nltk.tag.brill module", "nltk.tag.brill_trainer module", "nltk.tag.crf module", "nltk.tag.hmm module", "nltk.tag.hunpos module", "nltk.tag.mapping module", "nltk.tag.perceptron module", "nltk.tag.senna module", "nltk.tag.sequential module", "nltk.tag.stanford module", "nltk.tag.tnt module", "nltk.tag.util module", "nltk.tbl package", "nltk.tbl.api module", "nltk.tbl.demo module", "nltk.tbl.erroranalysis module", "nltk.tbl.feature module", "nltk.tbl.rule module", "nltk.tbl.template module", "nltk.test package", "nltk.test.all module", "nltk.test.childes_fixt module", "nltk.test.classify_fixt module", "nltk.test.conftest module", "nltk.test.discourse_fixt module", "nltk.test.gensim_fixt module", "nltk.test.gluesemantics_malt_fixt module", "nltk.test.inference_fixt module", "nltk.test.nonmonotonic_fixt module", "nltk.test.portuguese_en_fixt module", "nltk.test.probability_fixt module", "nltk.test.unit package", "nltk.test.unit.lm package", "nltk.test.unit.lm.test_counter module", "nltk.test.unit.lm.test_models module", "nltk.test.unit.lm.test_preprocessing module", "nltk.test.unit.lm.test_vocabulary module", "nltk.test.unit.test_aline module", "nltk.test.unit.test_bllip module", "nltk.test.unit.test_brill module", "nltk.test.unit.test_cfd_mutation module", "nltk.test.unit.test_cfg2chomsky module", "nltk.test.unit.test_chunk module", "nltk.test.unit.test_classify module", "nltk.test.unit.test_collocations module", "nltk.test.unit.test_concordance module", "nltk.test.unit.test_corenlp module", "nltk.test.unit.test_corpora module", "nltk.test.unit.test_corpus_views module", "nltk.test.unit.test_data module", "nltk.test.unit.test_disagreement module", "nltk.test.unit.test_distance module", "nltk.test.unit.test_downloader module", "nltk.test.unit.test_freqdist module", "nltk.test.unit.test_hmm module", "nltk.test.unit.test_json2csv_corpus module", "nltk.test.unit.test_json_serialization module", "nltk.test.unit.test_metrics module", "nltk.test.unit.test_naivebayes module", "nltk.test.unit.test_nombank module", "nltk.test.unit.test_pl196x module", "nltk.test.unit.test_pos_tag module", "nltk.test.unit.test_ribes module", "nltk.test.unit.test_rte_classify module", "nltk.test.unit.test_seekable_unicode_stream_reader module", "nltk.test.unit.test_senna module", "nltk.test.unit.test_stem module", "nltk.test.unit.test_tag module", "nltk.test.unit.test_tgrep module", "nltk.test.unit.test_tokenize module", "nltk.test.unit.test_twitter_auth module", "nltk.test.unit.test_util module", "nltk.test.unit.test_wordnet module", "nltk.test.unit.translate package", "nltk.test.unit.translate.test_bleu module", "nltk.test.unit.translate.test_gdfa module", "nltk.test.unit.translate.test_ibm1 module", "nltk.test.unit.translate.test_ibm2 module", "nltk.test.unit.translate.test_ibm3 module", "nltk.test.unit.translate.test_ibm4 module", "nltk.test.unit.translate.test_ibm5 module", "nltk.test.unit.translate.test_ibm_model module", "nltk.test.unit.translate.test_meteor module", "nltk.test.unit.translate.test_nist module", "nltk.test.unit.translate.test_stack_decoder module", "nltk.text module", "nltk.tgrep module", "nltk.tokenize package", "nltk.tokenize.api module", "nltk.tokenize.casual module", "nltk.tokenize.destructive module", "nltk.tokenize.legality_principle module", "nltk.tokenize.mwe module", "nltk.tokenize.nist module", "nltk.tokenize.punkt module", "nltk.tokenize.regexp module", "nltk.tokenize.repp module", "nltk.tokenize.sexpr module", "nltk.tokenize.simple module", "nltk.tokenize.sonority_sequencing module", "nltk.tokenize.stanford module", "nltk.tokenize.stanford_segmenter module", "nltk.tokenize.texttiling module", "nltk.tokenize.toktok module", "nltk.tokenize.treebank module", "nltk.tokenize.util module", "nltk.toolbox module", "nltk.translate package", "nltk.translate.api module", "nltk.translate.bleu_score module", "nltk.translate.chrf_score module", "nltk.translate.gale_church module", "nltk.translate.gdfa module", "nltk.translate.gleu_score module", "nltk.translate.ibm1 module", "nltk.translate.ibm2 module", "nltk.translate.ibm3 module", "nltk.translate.ibm4 module", "nltk.translate.ibm5 module", "nltk.translate.ibm_model module", "nltk.translate.meteor_score module", "nltk.translate.metrics module", "nltk.translate.nist_score module", "nltk.translate.phrase_based module", "nltk.translate.ribes_score module", "nltk.translate.stack_decoder module", "nltk.tree package", "nltk.tree.immutable module", "nltk.tree.parented module", "nltk.tree.parsing module", "nltk.tree.prettyprinter module", "nltk.tree.probabilistic module", "nltk.tree.transforms module", "nltk.tree.tree module", "nltk.treeprettyprinter module", "nltk.treetransforms module", "nltk.twitter package", "nltk.twitter.api module", "nltk.twitter.common module", "nltk.twitter.twitter_demo module", "nltk.twitter.twitterclient module", "nltk.twitter.util module", "nltk.util module", "nltk.wsd module", "Contributing to NLTK", "Installing NLTK Data", "Example usage of NLTK modules", "Sample usage for bleu", "Sample usage for bnc", "Sample usage for ccg", "Sample usage for ccg_semantics", "Sample usage for chat80", "Sample usage for childes", "Sample usage for chunk", "Sample usage for classify", "Sample usage for collections", "Sample usage for collocations", "Sample usage for concordance", "Sample usage for corpus", "Sample usage for crubadan", "Sample usage for data", "Sample usage for dependency", "Sample usage for discourse", "Sample usage for drt", "Sample usage for featgram", "Sample usage for featstruct", "Sample usage for framenet", "Sample usage for generate", "Sample usage for gensim", "Sample usage for gluesemantics", "Sample usage for gluesemantics_malt", "Sample usage for grammar", "Sample usage for grammartestsuites", "Sample usage for inference", "Sample usage for internals", "Sample usage for japanese", "Sample usage for lm", "Sample usage for logic", "Sample usage for meteor", "Sample usage for metrics", "Sample usage for misc", "Sample usage for nonmonotonic", "Sample usage for paice", "Sample usage for parse", "Sample usage for portuguese_en", "Sample usage for probability", "Sample usage for propbank", "Sample usage for relextract", "Sample usage for resolution", "Sample usage for semantics", "Sample usage for sentiment", "Sample usage for sentiwordnet", "Sample usage for simple", "Sample usage for stem", "Sample usage for tag", "Sample usage for tokenize", "Sample usage for toolbox", "Sample usage for translate", "Sample usage for tree", "Sample usage for treeprettyprinter", "Sample usage for treetransforms", "Sample usage for util", "Sample usage for wordnet", "Sample usage for wordnet_lch", "Sample usage for wsd", "Natural Language Toolkit", "Installing NLTK", "Release Notes", "Index", "NLTK Team"], "titleterms": {"": 397, "1": [412, 417], "1025": 409, "167": 391, "2": 417, "2005": 422, "2006": 422, "2007": 422, "2008": 422, "2009": 422, "2010": 422, "2011": 422, "2012": 422, "2013": 422, "2014": 422, "2015": 422, "2016": 422, "2017": 422, "2018": 422, "2019": 422, "2020": 422, "2021": 422, "2022": 422, "2023": 422, "2024": 422, "2088": 372, "2483": 409, "32": 421, "367": 391, "380": 391, "80": [182, 366], "A": [363, 384], "No": [365, 393], "The": 388, "With": 385, "access": [363, 373, 374, 380, 390, 399, 417], "acyclic_tre": 417, "ad": 377, "aer": 412, "agreement": 144, "algorithm": [397, 412, 419], "align": [58, 393, 412], "align_token": 410, "alin": 145, "all": [235, 417], "alpha": 392, "altern": 417, "analysi": 405, "annot": 381, "answer": 403, "api": [13, 26, 31, 47, 59, 124, 136, 160, 200, 214, 228, 303, 323, 352], "app": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "applic": 404, "argument": [373, 404], "arlstem": [201, 408], "arlstem2": [202, 408], "associ": [146, 371, 394], "assumpt": 396, "autom": 385, "automat": 373, "avail": 55, "babelfish": 154, "back": 373, "background": 377, "base": [393, 404], "basic": 367, "batch": 404, "bcp47": 60, "bell": 400, "betaconversiontestsuit": 392, "better": 417, "binari": [383, 421], "bind": [379, 380], "bit": 421, "blackburn": 404, "bleu": 362, "bleu_scor": 324, "bllip": 161, "bnc": [61, 363], "bo": 404, "book": [11, 377], "bound": 378, "boxer": 181, "bracket_pars": 62, "brill": [215, 409], "brill_train": 216, "buffer": 375, "bug": [373, 380, 400, 413], "build": 388, "builder": 388, "cach": 375, "calculu": 392, "can": 420, "candid": 371, "case": 411, "casual": 304, "categor": 373, "categori": [364, 365, 373], "categorized_s": 63, "caveat": 301, "ccg": [12, 13, 14, 15, 16, 17, 364, 365], "ccg_semant": 365, "cfg": [115, 398], "charact": 399, "chart": [14, 162, 365, 398], "chartparser_app": 2, "chase": 384, "chasen": 64, "chat": [18, 19, 20, 21, 22, 23, 24, 182, 366], "chat80": [182, 366], "check": [363, 377], "child": [65, 367], "childes_fixt": 236, "childescorpusread": 367, "chomski": 155, "chrf_score": 325, "chunk": [25, 26, 27, 28, 29, 66, 368, 373], "chunkparser_app": 3, "chunkparseri": 368, "chunkstr": 368, "cistem": 203, "class": [373, 395, 398, 415], "classifi": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 369], "classify_fixt": 237, "claus": 364, "cli": 45, "close": [396, 411], "closur": 417, "cluster": [46, 47, 48, 49, 50, 51], "cmudict": 67, "code": 374, "collect": [52, 370], "colloc": [53, 371], "collocations_app": 4, "combin": [15, 365], "combinatori": [364, 365], "command": 360, "common": [353, 373, 418], "comparative_s": 68, "comparative_sent": 373, "compat": 54, "compil": 384, "complex": 365, "comput": 365, "concaten": 373, "concept": [182, 366], "concord": 372, "concordanc": 399, "concordance_app": 5, "conditionalfreqdist": 400, "conflict": 380, "conftest": 238, "confus": 394, "confusionmatrix": 147, "conjunct": [364, 365], "conll": [69, 376], "consist": 377, "constructor": 373, "content": [0, 1, 12, 18, 25, 30, 46, 55, 57, 100, 114, 123, 135, 143, 153, 159, 180, 195, 199, 213, 227, 302, 322, 341, 351, 373], "context": [382, 398], "conting": 371, "contribut": 359, "convers": 392, "convert": 33, "cooper": 404, "cooper_storag": 183, "copi": 375, "corenlp": 163, "corpora": [55, 373, 399], "corpu": [55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 367, 373, 374, 390, 399, 412], "correl": 371, "counter": 137, "creat": 373, "crf": 217, "crubadan": [70, 374], "custom": [91, 380], "data": [111, 135, 360, 373, 375, 376, 421], "decisiontre": 32, "decod": 375, "decor": [112, 396], "default": 396, "demo": [229, 384], "demonstr": 383, "depend": [71, 376, 384, 385], "dependencygraph": 164, "deriv": 385, "descent": 398, "design": 373, "destruct": 305, "dict": 380, "dictionari": 380, "directori": 113, "disambigu": 419, "discours": [125, 377, 378], "discourse_fixt": 239, "dispers": 116, "distanc": [148, 394], "do": 420, "document": 381, "dog": 384, "domain": 396, "don": 373, "doubl": 378, "download": 113, "draw": [114, 115, 116, 117, 118, 119], "drt": [184, 378], "drt_glue_demo": 185, "dure": 392, "earleychart": 165, "easyinstal": 407, "effici": 25, "eliza": 19, "em": [48, 412], "emac": 25, "embed": 383, "encod": [375, 399], "endless": 417, "entiti": 402, "environ": 421, "equal": [380, 392], "equiv": [378, 388], "error": [378, 392, 412], "erroranalysi": 230, "estim": 400, "europarl_raw": 56, "evalu": [166, 186, 397, 404, 409, 412], "everi": 384, "exampl": [145, 324, 361, 372, 393, 396, 399], "express": 380, "extract": 402, "f": 384, "featgram": 379, "featstruct": [120, 380], "featstructnontermin": 398, "featur": [30, 33, 120, 231, 379, 380, 398, 407], "featurechart": 167, "featureset": 30, "field": 411, "file": [182, 366, 375, 398], "filter": 371, "find": [375, 380], "finder": 371, "first": 417, "floresta": 399, "fol": 378, "former": 424, "formula": [384, 404], "frame": [381, 417], "framenet": [72, 373, 381], "free": [382, 392, 398], "freqdist": 400, "frequenc": 374, "from": [365, 375, 377, 382, 404], "fromlist": 413, "function": [55, 57, 395, 404, 411, 416], "gaac": 49, "gale_church": 326, "gdfa": 327, "gener": [168, 382], "gensim": 383, "gensim_fixt": 240, "girl": 384, "gleu_scor": 328, "glue": [187, 384, 385], "gluesemant": 384, "gluesemantics_malt": 385, "gluesemantics_malt_fixt": 241, "grammar": [121, 364, 365, 376, 379, 382, 386, 387, 398], "grammartestsuit": 387, "graph": [379, 384], "gzip": 375, "hash": 380, "help": 122, "helper": 374, "hmm": [218, 400], "hole": 188, "how": 367, "hunpo": 219, "hypernym": 418, "i": 404, "ibm": 412, "ibm1": 329, "ibm2": 330, "ibm3": 331, "ibm4": 332, "ibm5": 333, "ibm_model": 334, "ieer": 73, "iesha": 20, "immut": 342, "immutablemultiparentedtre": 413, "immutableparentedtre": 413, "implement": [301, 373], "import": 414, "increment": 398, "index": 423, "indian": 74, "individu": [182, 366], "infer": [123, 124, 125, 126, 127, 128, 129, 130, 385, 388], "inference_fixt": 242, "inform": [83, 91, 377, 402], "initi": 385, "input": 33, "instal": [360, 388, 421], "instanc": 373, "integr": 376, "interact": 360, "interfac": [388, 406, 417], "intern": [131, 389], "intract": 417, "introduct": [377, 388], "ipipan": 75, "ir": 394, "is_tautologi": 403, "isri": 204, "issu": [25, 301, 372, 391, 409], "item": [182, 366], "iter": 373, "japanes": 390, "jeita": 390, "john": 384, "joint": 33, "json": 375, "jsontag": 132, "keyword": 371, "kmean": 50, "knb": 390, "knbc": 76, "kneser": 400, "knowledg": 377, "known": 301, "lambda": 392, "lancast": 205, "langnam": 133, "languag": [135, 137, 374, 390, 420], "larg": 398, "lazi": [363, 375], "lazyimport": 134, "lazyiteratorlist": 370, "legality_principl": 306, "lemma": 417, "lesk": 419, "lexic": [182, 366, 381], "lexicon": [16, 83, 365, 373], "lfg": [189, 384], "light": 380, "lightweight": 120, "likelihood": 400, "lin": 77, "line": 360, "line_num": 411, "linear": 384, "linearlog": 190, "list": [372, 373, 380, 399], "lm": [135, 136, 137, 138, 139, 140, 141, 142, 247, 248, 249, 250, 251, 391], "load": [375, 398, 417], "loader": [363, 375], "local": 375, "logic": [17, 191, 384, 388, 392], "lookup": 406, "lowest": 418, "mac": 421, "mace": 126, "mace4": 388, "machado": 399, "macmorpho": 399, "make": 375, "malt": [169, 376], "man": 384, "manual": 360, "map": [220, 374, 404], "markdown": [78, 373], "marker": 411, "matrix": 394, "maxent": 33, "maximum": 400, "measur": [371, 394], "megam": 34, "member": 424, "meteor": 393, "meteor_scor": 335, "method": [373, 374, 380, 388, 413], "metric": [143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 336, 394, 407], "minimalset": 156, "misc": [153, 154, 155, 156, 157, 158, 395], "miscellan": [394, 395], "model": [135, 137, 138, 383, 388, 404, 412], "modul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 361, 389], "morphi": 417, "most_general_unif": 403, "mst": 417, "mte": 79, "multext_east": 373, "multi": 396, "multiparentedtre": 413, "multipl": 373, "mutat": 380, "mwe": 307, "mwetoken": 410, "naivebay": 35, "name": [396, 402], "named_ent": 27, "natur": 420, "nei": 400, "nemo_app": 6, "new": 373, "next": 420, "ngram": 374, "nist": 308, "nist_scor": 337, "nkjp": 80, "nltk": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 375, 388, 389, 413, 414, 420, 421, 424], "nltkwordtoken": 410, "nombank": 81, "non": [376, 380], "nonmonoton": [127, 396], "nonmonotonic_fixt": 243, "nonprojectivedependencypars": 170, "notat": [329, 330, 331, 332, 333], "note": [301, 422], "nps_chat": [82, 373], "numer": 392, "object": [373, 412], "open": 411, "open_str": 411, "oper": 379, "opinion": 83, "opinion_lexicon": [83, 373], "other": [373, 375, 378], "overridden": 389, "overstem": 397, "overview": [182, 371, 373, 375, 378, 380, 392, 408], "packag": [0, 1, 12, 18, 25, 30, 46, 55, 57, 113, 114, 123, 135, 143, 153, 159, 180, 195, 199, 213, 227, 234, 246, 247, 288, 302, 322, 341, 351, 375], "paic": [149, 397], "panlex_lit": 84, "panlex_swadesh": 85, "paper": 365, "parent": [343, 413], "parentedtre": 413, "pars": [159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 344, 373, 376, 378, 379, 380, 386, 392, 398, 407, 411, 413], "parser": [376, 378, 385, 392, 398], "part": 399, "parti": 421, "patch": 372, "path": 380, "pattern": 25, "pchart": 171, "perceptron": 221, "persist": [182, 366], "phrase_bas": 338, "pl": 392, "pl196x": 86, "plaintext": [87, 373], "porter": [206, 408], "portugues": 399, "portuguese_en": 399, "portuguese_en_fixt": 244, "positivenaivebay": 36, "ppattach": [88, 373], "pre": 383, "precis": 412, "prepar": 135, "preprocess": 139, "pretti": 378, "prettyprint": [345, 414], "print": 378, "probabilist": [346, 398], "probabilistictre": 413, "probability_fixt": 245, "probabl": [179, 400], "process": [390, 399, 404], "product_reviews_1": 373, "product_reviews_2": 373, "program": 399, "project": 376, "projectivedependencypars": 172, "proof": 403, "propbank": [89, 373, 401], "proposit": 404, "pros_con": [90, 373], "prove": 403, "prover": [388, 403], "prover9": [128, 388], "provercommand": 388, "proxi": 360, "prune": 383, "publish": 365, "punkt": 309, "punktsentencetoken": 410, "python": [399, 421], "queri": 366, "question": 403, "rank": 371, "rate": 412, "raw_field": 411, "rd": 398, "rdparser_app": 7, "read": [182, 366, 373, 375, 377, 380, 399], "read_str": 389, "reader": [55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 367, 373, 374, 412], "reason": 396, "recal": 412, "recurs": 398, "recursivedesc": 173, "reduc": 398, "reentranc": 380, "refer": [329, 330, 331, 332, 333], "regexp": [28, 207, 310, 410], "regexpchunkpars": [25, 368], "regexpchunkrul": 25, "regexppars": 368, "regress": [368, 369, 373, 375, 377, 378, 380, 391, 392, 409, 410, 413, 417], "reinvent": 373, "rel": 364, "relat": [402, 404, 417], "releas": 422, "relextract": [192, 402], "remov": 380, "replac": [378, 392], "repp": 311, "represent": 378, "resolut": [129, 403], "resolve_anaphora": 378, "resourc": 375, "retract": 380, "retriev": 375, "review": 91, "ribes_scor": 339, "rslp": 208, "rte": [92, 373], "rte_classifi": 37, "rude": 21, "rule": [232, 368], "same": 378, "sampl": [362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "satisfi": 404, "scikitlearn": 38, "score": [150, 394], "search": [301, 399], "seek": 373, "seekableunicodestreamread": 373, "segment": [151, 399], "sem": [180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194], "semant": [365, 378, 384, 385, 404], "semcor": [93, 373], "senna": [39, 222], "sens": 419, "sensev": [94, 373], "sentenc": [363, 382, 399], "sentence_polar": 373, "sentiment": [195, 196, 197, 198, 405], "sentiment_analyz": 196, "sentisynset": 406, "sentiwordnet": [95, 373, 406], "sequenti": [223, 409], "server": [113, 360], "set": [380, 421], "setup": [367, 377, 394], "sexpr": 312, "shakespear": 373, "shift": 398, "shiftreduc": 174, "side": 378, "similar": 417, "simpl": [313, 365, 399, 407, 420], "simplifi": [378, 392], "sinica_treebank": 96, "size": 373, "skolem": 193, "slice": 373, "smooth": 140, "snowbal": [209, 408], "softwar": 421, "solut": 417, "some": [400, 420], "sonority_sequenc": 314, "sort": [157, 395], "sourc": 375, "spearman": 152, "speech": 399, "sql": 366, "squash": [373, 380, 400, 413], "sr": 398, "srparser_app": 8, "stack_decod": 340, "standard": 394, "standardformat": 411, "stanford": [175, 224, 315], "stanford_segment": 316, "statist": 397, "stem": [199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 397, 399, 408], "stemmer": 408, "step": 420, "stopword": 399, "storag": 404, "stream": 373, "string": 380, "string_categori": 97, "structur": [120, 379, 380, 384, 407], "stuff": 367, "subject": 373, "submodul": [0, 1, 12, 18, 25, 30, 46, 55, 57, 114, 123, 135, 143, 153, 159, 180, 195, 199, 213, 227, 234, 246, 247, 288, 302, 322, 341, 351], "subpackag": [0, 55, 234, 246], "subsum": 403, "suit": 387, "suntsu": 22, "support": 364, "svm": 40, "switchboard": 98, "synset": 417, "syntax": 404, "t": 373, "tabdata": 212, "tabl": [117, 371, 373], "tableau": 130, "tadm": 41, "tag": [25, 99, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 373, 399, 409], "tagger": 409, "task": 399, "tbl": [227, 228, 229, 230, 231, 232, 233], "team": 424, "teardown": 417, "tell": 373, "templat": 233, "terminologi": [33, 332, 333], "test": [234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 362, 363, 365, 368, 369, 373, 375, 377, 378, 380, 387, 389, 391, 392, 393, 395, 398, 400, 403, 404, 407, 408, 409, 410, 411, 413, 414, 415, 417], "test_alin": 252, "test_bleu": 289, "test_bllip": 253, "test_bril": 254, "test_cfd_mut": 255, "test_cfg2chomski": 256, "test_chunk": 257, "test_classifi": 258, "test_colloc": 259, "test_concord": 260, "test_corenlp": 261, "test_corpora": 262, "test_corpus_view": 263, "test_count": 248, "test_data": 264, "test_disagr": 265, "test_dist": 266, "test_download": 267, "test_freqdist": 268, "test_gdfa": 290, "test_hmm": 269, "test_ibm1": 291, "test_ibm2": 292, "test_ibm3": 293, "test_ibm4": 294, "test_ibm5": 295, "test_ibm_model": 296, "test_json2csv_corpu": 270, "test_json_seri": 271, "test_meteor": 297, "test_metr": 272, "test_model": 249, "test_naivebay": 273, "test_nist": 298, "test_nombank": 274, "test_pl196x": 275, "test_pos_tag": 276, "test_preprocess": 250, "test_rib": 277, "test_rte_classifi": 278, "test_seekable_unicode_stream_read": 279, "test_senna": 280, "test_stack_decod": 299, "test_stem": 281, "test_tag": 282, "test_tgrep": 283, "test_token": 284, "test_twitter_auth": 285, "test_util": 286, "test_vocabulari": 251, "test_wordnet": 287, "testsuit": 404, "text": [300, 399], "textcat": 42, "texttil": 317, "texttilingtoken": 410, "tgrep": 301, "theorem": [388, 403], "theori": 378, "thing": 420, "third": 421, "thread": 377, "timit": [100, 373], "tip": 25, "tnt": 225, "to_sfm_str": 411, "token": [302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 407, 410], "toktok": 318, "toktoktoken": 410, "toolbox": [101, 321, 373, 411], "toolboxdata": 411, "toolkit": 420, "trace": [380, 398], "train": [30, 135, 383], "trainer": 409, "transform": 347, "transitionpars": 176, "translat": [288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 412], "tree": [118, 301, 341, 342, 343, 344, 345, 346, 347, 348, 413, 414, 417], "treebank": [319, 399], "treeprettyprint": [349, 414], "treetransform": [350, 415], "trie": 370, "tupl": 380, "tweettoken": 410, "twitter": [102, 351, 352, 353, 354, 355, 356], "twitter_demo": 354, "twitter_sampl": 373, "twittercli": 355, "type": [373, 380, 392], "typedmaxentfeatureencod": 369, "udhr": 103, "unbound": 378, "under": 392, "understem": 397, "unicod": 364, "unif": 380, "unifi": 403, "uniqu": 396, "unit": [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 378, 381, 389, 395, 398, 404, 408, 411, 413, 414, 415], "unix": 421, "unresolv": 25, "untyp": 392, "up": 421, "us": [135, 365, 366, 367, 371, 383, 384, 388], "usag": [145, 181, 301, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "util": [23, 29, 43, 51, 104, 110, 119, 141, 177, 194, 197, 210, 226, 320, 356, 357, 389, 416], "v": 417, "vader": [198, 405], "valu": [371, 380, 397], "valuat": [366, 404], "variabl": [380, 392], "verb": 417, "verbnet": [105, 373], "version": 417, "via": 360, "view": 373, "viterbi": [178, 398], "vocabulari": 142, "walk": 384, "web": 360, "weight": 380, "weka": 44, "wheel": 373, "wikipedia": 393, "window": 421, "witten": 400, "word": [363, 373, 383, 399, 417, 419], "wordfind": [158, 395], "wordfreq_app": 9, "wordlist": 106, "wordnet": [107, 211, 373, 417, 418], "wordnet_app": 10, "wordnet_lch": 418, "world": 396, "write": [373, 375], "wsd": [358, 419], "xmldoc": 108, "ycoe": 109, "you": 420, "zen": 24}})